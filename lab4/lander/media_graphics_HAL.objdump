
C:/ece5760/lab4/lander/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab4/lander/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005b94 memsz 0x00005b94 flags r-x
    LOAD off    0x00006bb4 vaddr 0x00005bb4 paddr 0x0000fe80 align 2**12
         filesz 0x0000a2cc memsz 0x0000a2cc flags rw-
    LOAD off    0x0001114c vaddr 0x0001a14c paddr 0x0001a14c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005738  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  000058a0  000058a0  000068a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000a2cc  00005bb4  0000fe80  00006bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0001a14c  0001a14c  0001114c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010e80  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009b8  00000000  00000000  00010ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001503  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000191ff  00000000  00000000  00012d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f25  00000000  00000000  0002bf62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d94f  00000000  00000000  00031e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012c4  00000000  00000000  0003f7d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bb3  00000000  00000000  00040a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000057cb  00000000  00000000  0004364f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00048e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000308  00000000  00000000  00048e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004c058  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004c05b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0004c05e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0004c05f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0004c063  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0004c067  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0004c06b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0004c074  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0004c07d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0004c086  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f17  00000000  00000000  0004c091  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000058a0 l    d  .rodata	00000000 .rodata
00005bb4 l    d  .rwdata	00000000 .rwdata
0001a14c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e14c l     O .rwdata	00001060 JTAG_UART
0000f1ac l     O .rwdata	00000030 AV_Config
0000f1dc l     O .rwdata	00000030 Audio
0000f20c l     O .rwdata	0000002c Char_LCD_16x2
0000f238 l     O .rwdata	0000002c Expansion_JP1
0000f264 l     O .rwdata	0000002c Expansion_JP2
0000f290 l     O .rwdata	0000002c Green_LEDs
0000f2bc l     O .rwdata	0000002c HEX3_HEX0
0000f2e8 l     O .rwdata	0000002c HEX7_HEX4
0000f314 l     O .rwdata	0000002c Pushbuttons
0000f340 l     O .rwdata	0000002c Red_LEDs
0000f36c l     O .rwdata	0000002c Slider_Switches
0000f398 l     O .rwdata	00000038 PS2_Port
0000f3d0 l     O .rwdata	0000002c Serial_Port
0000f3fc l     O .rwdata	00000048 VGA_Char_Buffer
0000f444 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001024 l     F .text	00000054 altera_avalon_jtag_uart_timeout
000010f0 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000015c0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002ba0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002ca8 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000f640 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000393c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003d20 l     F .text	00000058 std
00003e2c l     F .text	00000008 __fp_lock
00003e34 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000fe7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005348 g     F .text	00000070 _isatty_r
00000a34 g     F .text	00000050 alt_main
00002224 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
0001a19c g     O .bss	00000100 alt_irq
00001c5c g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000053b8 g     F .text	00000078 _lseek_r
0000fe80 g       *ABS*	00000000 __flash_rwdata_start
000016c0 g     F .text	00000010 alt_up_character_lcd_send_cmd
0001a29c g       *ABS*	00000000 __alt_heap_start
00004f84 g     F .text	00000068 __sseek
00003d88 g     F .text	000000a4 __sinit
000036b4 g     F .text	00000130 __swbuf_r
00001e64 g     F .text	00000088 alt_up_char_buffer_string
0000191c g     F .text	0000000c read_CE_bit
00003e88 g     F .text	00000068 __sfmoreglue
0000565c g     F .text	00000004 __malloc_unlock
000019ec g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001d08 g     F .text	00000080 alt_up_rs232_read_fd
00001eec g     F .text	00000058 alt_up_char_buffer_draw
00003e78 g     F .text	00000010 _cleanup
00002918 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
000015fc g     F .text	0000001c get_DDRAM_addr
00002a0c g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000052d4 g     F .text	00000074 _fstat_r
0001a164 g     O .bss	00000004 errno
0001a150 g     O .bss	00000004 alt_argv
00017e48 g       *ABS*	00000000 _gp
000029e4 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
0000f4c0 g     O .rwdata	00000180 alt_fd_list
00002c18 g     F .text	00000070 alt_find_dev
000032f8 g     F .text	000000a0 memcpy
00001690 g     F .text	00000020 alt_up_character_lcd_write_fd
00001f44 g     F .text	00000028 alt_up_char_buffer_clear
00003e6c g     F .text	0000000c _cleanup_r
00002d0c g     F .text	00000098 alt_io_redirect
00001cbc g     F .text	0000004c alt_up_rs232_read_data
000030e0 g     F .text	00000008 altera_nios2_irq_init
000029d4 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00001298 g     F .text	00000168 altera_avalon_jtag_uart_read
0000553c g     F .text	00000084 isatty
000023b8 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00003210 g     F .text	0000003c alt_icache_flush
0001a168 g     O .bss	00000004 __malloc_top_pad
00004f0c g     F .text	00000070 _sbrk_r
00001fdc g     F .text	0000005c helper_plot_pixel
00005430 g     F .text	00000078 _read_r
0000fe58 g     O .rwdata	00000004 alt_max_fd
00001c90 g     F .text	0000000c alt_up_rs232_check_parity
000051b0 g     F .text	00000110 _fclose_r
00001928 g     F .text	00000008 read_num_bytes_available
00003cec g     F .text	00000034 fflush
0001a16c g     O .bss	00000004 __malloc_max_sbrked_mem
00002da4 g     F .text	000000bc alt_irq_register
00001908 g     F .text	0000000c read_RI_bit
0000ddc8 g     O .rwdata	00000384 explode
00002840 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
000055c0 g     F .text	00000098 lseek
0000fe70 g     O .rwdata	00000004 _global_impure_ptr
0001a29c g       *ABS*	00000000 __bss_end
000025fc g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00003034 g     F .text	000000ac alt_tick
0000193c g     F .text	00000008 read_data_byte
00003e54 g     F .text	00000018 __fp_lock_all
00003000 g     F .text	00000034 alt_alarm_stop
00001914 g     F .text	00000008 read_RE_bit
0001a158 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
0000f498 g     O .rwdata	00000028 alt_dev_null
00000800 g     F .text	000000c8 __unpack_f
000016d0 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00001af0 g     F .text	00000040 alt_up_ps2_write_data_byte
00002b9c g     F .text	00000004 alt_dcache_flush_all
0000252c g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000fe80 g       *ABS*	00000000 __ram_rwdata_end
0000fe50 g     O .rwdata	00000008 alt_dev_list
000057a8 g     F .text	000000f4 write
0000349c g     F .text	000000e8 _putc_r
00002038 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
00005bb4 g       *ABS*	00000000 __ram_rodata_end
000054bc g     F .text	00000080 fstat
00001db0 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0001a29c g       *ABS*	00000000 end
00001b30 g     F .text	00000070 alt_up_ps2_write_fd
000006a0 g     F .text	00000160 __pack_f
00001f8c g     F .text	00000050 alt_up_char_buffer_init
00001078 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000157c g     F .text	00000044 alt_avalon_timer_sc_init
00000620 g     F .text	00000080 __clzsi2
00001400 g     F .text	0000017c altera_avalon_jtag_uart_write
00003d78 g     F .text	00000004 __sfp_lock_acquire
00001664 g     F .text	0000002c alt_up_character_lcd_write
0000410c g     F .text	00000314 _free_r
00000a84 g     F .text	000001dc alt_printf
00003940 g     F .text	000001b0 __call_exitprocs
0000fe78 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
0001a15c g     O .bss	00000004 _alt_tick_rate
00005bb4 g     O .rwdata	00008214 landers
0001a160 g     O .bss	00000004 _alt_nticks
00005660 g     F .text	000000f8 read
00000ca8 g     F .text	000002ac alt_sys_init
00001774 g     F .text	00000090 alt_up_character_lcd_shift_display
00000588 g     F .text	00000098 __floatsisf
00001964 g     F .text	00000030 alt_up_ps2_clear_fifo
00001d88 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00001708 g     F .text	0000006c alt_up_character_lcd_erase_pos
00000fec g     F .text	00000038 altera_avalon_jtag_uart_close
00005bb4 g       *ABS*	00000000 __ram_rwdata_start
000058a0 g       *ABS*	00000000 __ram_rodata_start
0001a174 g     O .bss	00000028 __malloc_current_mallinfo
00000fc4 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
000031a4 g     F .text	0000006c alt_get_fd
00005140 g     F .text	00000070 _close_r
00003284 g     F .text	00000074 memcmp
00000f74 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0001a29c g       *ABS*	00000000 __alt_stack_base
00000f54 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00003800 g     F .text	0000013c __swsetup_r
00003ef0 g     F .text	000000f0 __sfp
0000fa40 g     O .rwdata	00000408 __malloc_av_
00003d84 g     F .text	00000004 __sinit_lock_release
00005068 g     F .text	00000060 __sread
00001e20 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000030e8 g     F .text	000000bc alt_find_file
00002ba8 g     F .text	00000070 alt_dev_llist_insert
00005658 g     F .text	00000004 __malloc_lock
00005758 g     F .text	00000050 sbrk
00003af0 g     F .text	000001fc _fflush_r
0001a14c g       *ABS*	00000000 __bss_start
00004e74 g     F .text	00000098 memset
000001a4 g     F .text	0000036c main
0001a154 g     O .bss	00000004 alt_envp
0001a170 g     O .bss	00000004 __malloc_max_total_mem
000028f4 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001f6c g     F .text	00000020 alt_up_char_buffer_open_dev
00000f9c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000037e4 g     F .text	0000001c __swbuf
00000510 g     F .text	00000078 __ltsf2
00001804 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00004f7c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000052c0 g     F .text	00000014 fclose
00001994 g     F .text	00000058 alt_up_ps2_read_data_byte
00004734 g     F .text	00000740 _malloc_r
0000fe5c g     O .rwdata	00000004 alt_errno
000044e8 g     F .text	000000b8 _fwalk
00001944 g     F .text	00000020 alt_up_ps2_open_dev
00003398 g     F .text	00000104 putc
000018e8 g     F .text	00000020 alt_up_character_lcd_open_dev
00003fe0 g     F .text	0000012c _malloc_trim_r
00001c78 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
000016b0 g     F .text	00000010 alt_up_character_lcd_init
00003584 g     F .text	000000bc strcmp
000058a0 g       *ABS*	00000000 __flash_rodata_start
00001c9c g     F .text	00000020 alt_up_rs232_open_dev
00000c88 g     F .text	00000020 alt_irq_init
00002fdc g     F .text	00000024 alt_release_fd
00001930 g     F .text	0000000c read_data_valid
000016ec g     F .text	0000001c alt_up_character_lcd_cursor_off
0000597c g     O .rodata	00000100 __clz_tab
00001ba0 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
000050c8 g     F .text	00000078 _write_r
0000fe6c g     O .rwdata	00000004 _impure_ptr
0001a14c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003e3c g     F .text	00000018 __fp_unlock_all
0000fe48 g     O .rwdata	00000008 alt_fs_list
00001e3c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001d98 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fe80 g       *ABS*	00000000 _edata
0001a29c g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00001224 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004fec g     F .text	0000007c __swrite
0000fe74 g     O .rwdata	00000004 __malloc_trim_threshold
0000324c g     F .text	00000038 exit
00004420 g     F .text	000000c8 _fwalk_reent
00001bd4 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003d7c g     F .text	00000004 __sfp_lock_release
00001618 g     F .text	0000004c alt_up_character_lcd_string
000008c8 g     F .text	000000a8 __fpcmp_parts_f
000054a8 g     F .text	00000014 _exit
00002a2c g     F .text	00000094 alt_alarm_start
000045a0 g     F .text	00000194 __smakebuf_r
00001a94 g     F .text	0000005c alt_up_ps2_wait_for_ack
00003640 g     F .text	00000074 strlen
00002e60 g     F .text	0000017c open
00000c60 g     F .text	00000028 alt_putchar
00002c88 g     F .text	00000020 alt_icache_flush_all
00001894 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
0000fe60 g     O .rwdata	00000004 alt_priority_mask
00001a6c g     F .text	00000028 alt_up_ps2_read_fd
0000fe64 g     O .rwdata	00000008 alt_alarm_list
00001e54 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00002ac0 g     F .text	000000dc close
00000970 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
00003d80 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	040000b4 	movhi	r16,2
 100:	84286704 	addi	r16,r16,-24164
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d69f9214 	ori	gp,gp,32328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	10a85314 	ori	r2,r2,41292

    movhi r3, %hi(__bss_end)
     180:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     184:	18e8a714 	ori	r3,r3,41628

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00009700 	call	970 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	0000a340 	call	a34 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     1a4:	defff604 	addi	sp,sp,-40
     1a8:	dfc00915 	stw	ra,36(sp)
     1ac:	df000815 	stw	fp,32(sp)
     1b0:	ddc00715 	stw	r23,28(sp)
     1b4:	dd800615 	stw	r22,24(sp)
     1b8:	dd400515 	stw	r21,20(sp)
     1bc:	dd000415 	stw	r20,16(sp)
     1c0:	dcc00315 	stw	r19,12(sp)
     1c4:	dc800215 	stw	r18,8(sp)
     1c8:	dc400115 	stw	r17,4(sp)
     1cc:	dc000015 	stw	r16,0(sp)
     1d0:	023ff6b4 	movhi	r8,65498
     1d4:	421ffa04 	addi	r8,r8,32744
     1d8:	da37883a 	add	sp,sp,r8
	//Good values for initial (centered) set
	xoff = -1.0*640.0*xscale/2.0;
	yoff = -1.0*480.0*yscale/2.0;

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     1dc:	01000034 	movhi	r4,0
     1e0:	21162804 	addi	r4,r4,22688
     1e4:	0002a0c0 	call	2a0c <alt_up_pixel_buffer_dma_open_dev>
     1e8:	00c009b4 	movhi	r3,38
     1ec:	18e00404 	addi	r3,r3,-32752
     1f0:	1ec7883a 	add	r3,r3,sp
     1f4:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     1f8:	1000041e 	bne	r2,zero,20c <main+0x68>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     1fc:	01000034 	movhi	r4,0
     200:	21162e04 	addi	r4,r4,22712
     204:	0000a840 	call	a84 <alt_printf>
     208:	00000306 	br	218 <main+0x74>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     20c:	01000034 	movhi	r4,0
     210:	21163a04 	addi	r4,r4,22760
     214:	0000a840 	call	a84 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     218:	014009b4 	movhi	r5,38
     21c:	29600404 	addi	r5,r5,-32752
     220:	2ecb883a 	add	r5,r5,sp
     224:	29000017 	ldw	r4,0(r5)
     228:	000b883a 	mov	r5,zero
     22c:	00028400 	call	2840 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     230:	01000034 	movhi	r4,0
     234:	21164504 	addi	r4,r4,22804
     238:	0001f6c0 	call	1f6c <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     23c:	1000a126 	beq	r2,zero,4c4 <main+0x320>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     240:	01000034 	movhi	r4,0
     244:	21165704 	addi	r4,r4,22876
     248:	0000a840 	call	a84 <alt_printf>
     24c:	008004f4 	movhi	r2,19
     250:	10b00004 	addi	r2,r2,-16384
     254:	d889883a 	add	r4,sp,r2
     258:	00c009b4 	movhi	r3,38
     25c:	18e00504 	addi	r3,r3,-32748
     260:	1ec7883a 	add	r3,r3,sp
     264:	19000015 	stw	r4,0(r3)
	while(1)
	{
	
		int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
     268:	00840034 	movhi	r2,4096
     26c:	10801404 	addi	r2,r2,80
     270:	10c00017 	ldw	r3,0(r2)
     274:	10bff004 	addi	r2,r2,-64
     278:	10c00015 	stw	r3,0(r2)
     27c:	014009b4 	movhi	r5,38
     280:	29600304 	addi	r5,r5,-32756
     284:	2ecb883a 	add	r5,r5,sp
     288:	28000015 	stw	zero,0(r5)
     28c:	00007106 	br	454 <main+0x2b0>
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     290:	008009b4 	movhi	r2,38
     294:	10a00204 	addi	r2,r2,-32760
     298:	16c5883a 	add	r2,r2,sp
     29c:	10c00017 	ldw	r3,0(r2)
     2a0:	008009b4 	movhi	r2,38
     2a4:	10a00104 	addi	r2,r2,-32764
     2a8:	16c5883a 	add	r2,r2,sp
     2ac:	10c00015 	stw	r3,0(r2)
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
     2b0:	1d800015 	stw	r22,0(r3)
				zi[x][y] = (float)(y*yscale + yoff);
     2b4:	b809883a 	mov	r4,r23
     2b8:	00005880 	call	588 <__floatsisf>
     2bc:	00cee934 	movhi	r3,15268
     2c0:	18f5c284 	addi	r3,r3,-10486
     2c4:	10c5ff32 	custom	252,r2,r2,r3
     2c8:	00cfe6b4 	movhi	r3,16282
     2cc:	18e66644 	addi	r3,r3,-26215
     2d0:	10e9ffb2 	custom	254,r20,r2,r3
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     2d4:	014009b4 	movhi	r5,38
     2d8:	29600004 	addi	r5,r5,-32768
     2dc:	2ecb883a 	add	r5,r5,sp
     2e0:	2f000015 	stw	fp,0(r5)
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
				zi[x][y] = (float)(y*yscale + yoff);
     2e4:	e5000015 	stw	r20,0(fp)
     2e8:	a025883a 	mov	r18,r20
     2ec:	b023883a 	mov	r17,r22
     2f0:	002b883a 	mov	r21,zero
				t = 0;
				while (t<255){
					float zr_xy = zr[x][y];
					float zi_xy = zi[x][y];
					float zr_n = zr_xy*zr_xy - zi_xy*zi_xy + (float)(x*xscale + xoff);
     2f4:	8c45ff32 	custom	252,r2,r17,r17
     2f8:	9487ff32 	custom	252,r3,r18,r18
     2fc:	10c5ffb2 	custom	254,r2,r2,r3
     300:	b0a7ff72 	custom	253,r19,r22,r2
					float zi_n = 2.0*zr_xy*zi_xy + (float)(y*yscale + yoff);
     304:	8c45ff72 	custom	253,r2,r17,r17
     308:	9085ff32 	custom	252,r2,r18,r2
     30c:	a0a1ff72 	custom	253,r16,r20,r2
					if (zr_n*zi_n < 4.0) {
     310:	9c09ff32 	custom	252,r4,r19,r16
     314:	01502034 	movhi	r5,16512
     318:	00005100 	call	510 <__ltsf2>
     31c:	1000110e 	bge	r2,zero,364 <main+0x1c0>
						zi[x][y] = zi_n;
					}else{
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
						t = 255;
					}
					t = t +1;
     320:	ad400044 	addi	r21,r21,1
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
				zi[x][y] = (float)(y*yscale + yoff);
				t = 0;
				while (t<255){
     324:	00803fc4 	movi	r2,255
     328:	a8800326 	beq	r21,r2,338 <main+0x194>
     32c:	8025883a 	mov	r18,r16
     330:	9823883a 	mov	r17,r19
     334:	003fef06 	br	2f4 <main+0x150>
     338:	00c009b4 	movhi	r3,38
     33c:	18e00004 	addi	r3,r3,-32768
     340:	1ec7883a 	add	r3,r3,sp
     344:	18c00017 	ldw	r3,0(r3)
     348:	1c000015 	stw	r16,0(r3)
     34c:	010009b4 	movhi	r4,38
     350:	21200104 	addi	r4,r4,-32764
     354:	26c9883a 	add	r4,r4,sp
     358:	21000017 	ldw	r4,0(r4)
     35c:	24c00015 	stw	r19,0(r4)
     360:	00001506 	br	3b8 <main+0x214>
     364:	014009b4 	movhi	r5,38
     368:	29600004 	addi	r5,r5,-32768
     36c:	2ecb883a 	add	r5,r5,sp
     370:	29400017 	ldw	r5,0(r5)
     374:	2c800015 	stw	r18,0(r5)
     378:	008009b4 	movhi	r2,38
     37c:	10a00104 	addi	r2,r2,-32764
     380:	16c5883a 	add	r2,r2,sp
     384:	10800017 	ldw	r2,0(r2)
     388:	14400015 	stw	r17,0(r2)
					if (zr_n*zi_n < 4.0) {
						
						zr[x][y] = zr_n;
						zi[x][y] = zi_n;
					}else{
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
     38c:	00c009b4 	movhi	r3,38
     390:	18e00404 	addi	r3,r3,-32752
     394:	1ec7883a 	add	r3,r3,sp
     398:	19000017 	ldw	r4,0(r3)
     39c:	a80b883a 	mov	r5,r21
     3a0:	008009b4 	movhi	r2,38
     3a4:	10a00304 	addi	r2,r2,-32756
     3a8:	16c5883a 	add	r2,r2,sp
     3ac:	11800017 	ldw	r6,0(r2)
     3b0:	b80f883a 	mov	r7,r23
     3b4:	00029180 	call	2918 <alt_up_pixel_buffer_dma_draw>
		int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
     3b8:	00c00044 	movi	r3,1
     3bc:	b8ef883a 	add	r23,r23,r3
     3c0:	00800104 	movi	r2,4
     3c4:	010009b4 	movhi	r4,38
     3c8:	21200204 	addi	r4,r4,-32760
     3cc:	26c9883a 	add	r4,r4,sp
     3d0:	21000017 	ldw	r4,0(r4)
     3d4:	208b883a 	add	r5,r4,r2
     3d8:	010009b4 	movhi	r4,38
     3dc:	21200204 	addi	r4,r4,-32760
     3e0:	26c9883a 	add	r4,r4,sp
     3e4:	21400015 	stw	r5,0(r4)
     3e8:	e0b9883a 	add	fp,fp,r2
     3ec:	00807804 	movi	r2,480
     3f0:	b8bfa71e 	bne	r23,r2,290 <main+0xec>
	
		int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
     3f4:	014009b4 	movhi	r5,38
     3f8:	29600304 	addi	r5,r5,-32756
     3fc:	2ecb883a 	add	r5,r5,sp
     400:	29400017 	ldw	r5,0(r5)
     404:	28c5883a 	add	r2,r5,r3
     408:	014009b4 	movhi	r5,38
     40c:	29600304 	addi	r5,r5,-32756
     410:	2ecb883a 	add	r5,r5,sp
     414:	28800015 	stw	r2,0(r5)
     418:	0080a004 	movi	r2,640
     41c:	28c00017 	ldw	r3,0(r5)
     420:	18800c1e 	bne	r3,r2,454 <main+0x2b0>
				//
			}
		}
	
		
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     424:	014009b4 	movhi	r5,38
     428:	29600404 	addi	r5,r5,-32752
     42c:	2ecb883a 	add	r5,r5,sp
     430:	29000017 	ldw	r4,0(r5)
     434:	00029d40 	call	29d4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     438:	103f8b1e 	bne	r2,zero,268 <main+0xc4>
				
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     43c:	008009b4 	movhi	r2,38
     440:	10a00404 	addi	r2,r2,-32752
     444:	16c5883a 	add	r2,r2,sp
     448:	11000017 	ldw	r4,0(r2)
     44c:	00028f40 	call	28f4 <alt_up_pixel_buffer_dma_swap_buffers>
     450:	003f8506 	br	268 <main+0xc4>
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
     454:	00c009b4 	movhi	r3,38
     458:	18e00304 	addi	r3,r3,-32756
     45c:	1ec7883a 	add	r3,r3,sp
     460:	19000017 	ldw	r4,0(r3)
     464:	00005880 	call	588 <__floatsisf>
     468:	00cee934 	movhi	r3,15268
     46c:	18f5c284 	addi	r3,r3,-10486
     470:	10c5ff32 	custom	252,r2,r2,r3
     474:	00cff374 	movhi	r3,16333
     478:	18f33304 	addi	r3,r3,-13108
     47c:	10edffb2 	custom	254,r22,r2,r3
     480:	010009b4 	movhi	r4,38
     484:	21200304 	addi	r4,r4,-32756
     488:	26c9883a 	add	r4,r4,sp
     48c:	21000017 	ldw	r4,0(r4)
     490:	2081e024 	muli	r2,r4,1920
     494:	d887883a 	add	r3,sp,r2
     498:	014009b4 	movhi	r5,38
     49c:	29600204 	addi	r5,r5,-32760
     4a0:	2ecb883a 	add	r5,r5,sp
     4a4:	28c00015 	stw	r3,0(r5)
     4a8:	010009b4 	movhi	r4,38
     4ac:	21200504 	addi	r4,r4,-32748
     4b0:	26c9883a 	add	r4,r4,sp
     4b4:	21000017 	ldw	r4,0(r4)
     4b8:	20b9883a 	add	fp,r4,r2
     4bc:	002f883a 	mov	r23,zero
     4c0:	003f7306 	br	290 <main+0xec>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     4c4:	01000034 	movhi	r4,0
     4c8:	21164b04 	addi	r4,r4,22828
     4cc:	0000a840 	call	a84 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     4d0:	00bfffc4 	movi	r2,-1
     4d4:	020009b4 	movhi	r8,38
     4d8:	42200604 	addi	r8,r8,-32744
     4dc:	da37883a 	add	sp,sp,r8
     4e0:	dfc00917 	ldw	ra,36(sp)
     4e4:	df000817 	ldw	fp,32(sp)
     4e8:	ddc00717 	ldw	r23,28(sp)
     4ec:	dd800617 	ldw	r22,24(sp)
     4f0:	dd400517 	ldw	r21,20(sp)
     4f4:	dd000417 	ldw	r20,16(sp)
     4f8:	dcc00317 	ldw	r19,12(sp)
     4fc:	dc800217 	ldw	r18,8(sp)
     500:	dc400117 	ldw	r17,4(sp)
     504:	dc000017 	ldw	r16,0(sp)
     508:	dec00a04 	addi	sp,sp,40
     50c:	f800283a 	ret

00000510 <__ltsf2>:
     510:	defff304 	addi	sp,sp,-52
     514:	dc400b15 	stw	r17,44(sp)
     518:	dc400204 	addi	r17,sp,8
     51c:	dc000a15 	stw	r16,40(sp)
     520:	d9000015 	stw	r4,0(sp)
     524:	d9400115 	stw	r5,4(sp)
     528:	d809883a 	mov	r4,sp
     52c:	880b883a 	mov	r5,r17
     530:	dc000604 	addi	r16,sp,24
     534:	dfc00c15 	stw	ra,48(sp)
     538:	00008000 	call	800 <__unpack_f>
     53c:	d9000104 	addi	r4,sp,4
     540:	800b883a 	mov	r5,r16
     544:	00008000 	call	800 <__unpack_f>
     548:	d8800217 	ldw	r2,8(sp)
     54c:	00c00044 	movi	r3,1
     550:	180d883a 	mov	r6,r3
     554:	1880062e 	bgeu	r3,r2,570 <__ltsf2+0x60>
     558:	d8800617 	ldw	r2,24(sp)
     55c:	8809883a 	mov	r4,r17
     560:	800b883a 	mov	r5,r16
     564:	1880022e 	bgeu	r3,r2,570 <__ltsf2+0x60>
     568:	00008c80 	call	8c8 <__fpcmp_parts_f>
     56c:	100d883a 	mov	r6,r2
     570:	3005883a 	mov	r2,r6
     574:	dfc00c17 	ldw	ra,48(sp)
     578:	dc400b17 	ldw	r17,44(sp)
     57c:	dc000a17 	ldw	r16,40(sp)
     580:	dec00d04 	addi	sp,sp,52
     584:	f800283a 	ret

00000588 <__floatsisf>:
     588:	2006d7fa 	srli	r3,r4,31
     58c:	defffa04 	addi	sp,sp,-24
     590:	008000c4 	movi	r2,3
     594:	dfc00515 	stw	ra,20(sp)
     598:	dc000415 	stw	r16,16(sp)
     59c:	d8800015 	stw	r2,0(sp)
     5a0:	d8c00115 	stw	r3,4(sp)
     5a4:	2000081e 	bne	r4,zero,5c8 <__floatsisf+0x40>
     5a8:	00800084 	movi	r2,2
     5ac:	d8800015 	stw	r2,0(sp)
     5b0:	d809883a 	mov	r4,sp
     5b4:	00006a00 	call	6a0 <__pack_f>
     5b8:	dfc00517 	ldw	ra,20(sp)
     5bc:	dc000417 	ldw	r16,16(sp)
     5c0:	dec00604 	addi	sp,sp,24
     5c4:	f800283a 	ret
     5c8:	00800784 	movi	r2,30
     5cc:	1807003a 	cmpeq	r3,r3,zero
     5d0:	d8800215 	stw	r2,8(sp)
     5d4:	18000e1e 	bne	r3,zero,610 <__floatsisf+0x88>
     5d8:	00a00034 	movhi	r2,32768
     5dc:	20800e26 	beq	r4,r2,618 <__floatsisf+0x90>
     5e0:	0121c83a 	sub	r16,zero,r4
     5e4:	8009883a 	mov	r4,r16
     5e8:	dc000315 	stw	r16,12(sp)
     5ec:	00006200 	call	620 <__clzsi2>
     5f0:	117fffc4 	addi	r5,r2,-1
     5f4:	017fee0e 	bge	zero,r5,5b0 <__floatsisf+0x28>
     5f8:	d8800217 	ldw	r2,8(sp)
     5fc:	8146983a 	sll	r3,r16,r5
     600:	1145c83a 	sub	r2,r2,r5
     604:	d8c00315 	stw	r3,12(sp)
     608:	d8800215 	stw	r2,8(sp)
     60c:	003fe806 	br	5b0 <__floatsisf+0x28>
     610:	2021883a 	mov	r16,r4
     614:	003ff306 	br	5e4 <__floatsisf+0x5c>
     618:	00b3c034 	movhi	r2,52992
     61c:	003fe606 	br	5b8 <__floatsisf+0x30>

00000620 <__clzsi2>:
     620:	00bfffd4 	movui	r2,65535
     624:	11000e36 	bltu	r2,r4,660 <__clzsi2+0x40>
     628:	00803fc4 	movi	r2,255
     62c:	01400204 	movi	r5,8
     630:	0007883a 	mov	r3,zero
     634:	11001036 	bltu	r2,r4,678 <__clzsi2+0x58>
     638:	000b883a 	mov	r5,zero
     63c:	20c6d83a 	srl	r3,r4,r3
     640:	00800034 	movhi	r2,0
     644:	10965f04 	addi	r2,r2,22908
     648:	1887883a 	add	r3,r3,r2
     64c:	18800003 	ldbu	r2,0(r3)
     650:	00c00804 	movi	r3,32
     654:	2885883a 	add	r2,r5,r2
     658:	1885c83a 	sub	r2,r3,r2
     65c:	f800283a 	ret
     660:	01400404 	movi	r5,16
     664:	00804034 	movhi	r2,256
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	2807883a 	mov	r3,r5
     670:	113ff22e 	bgeu	r2,r4,63c <__clzsi2+0x1c>
     674:	01400604 	movi	r5,24
     678:	2807883a 	mov	r3,r5
     67c:	20c6d83a 	srl	r3,r4,r3
     680:	00800034 	movhi	r2,0
     684:	10965f04 	addi	r2,r2,22908
     688:	1887883a 	add	r3,r3,r2
     68c:	18800003 	ldbu	r2,0(r3)
     690:	00c00804 	movi	r3,32
     694:	2885883a 	add	r2,r5,r2
     698:	1885c83a 	sub	r2,r3,r2
     69c:	f800283a 	ret

000006a0 <__pack_f>:
     6a0:	20c00017 	ldw	r3,0(r4)
     6a4:	01c00044 	movi	r7,1
     6a8:	21800317 	ldw	r6,12(r4)
     6ac:	21400117 	ldw	r5,4(r4)
     6b0:	38c02d2e 	bgeu	r7,r3,768 <__pack_f+0xc8>
     6b4:	00800104 	movi	r2,4
     6b8:	18802826 	beq	r3,r2,75c <__pack_f+0xbc>
     6bc:	00800084 	movi	r2,2
     6c0:	18800126 	beq	r3,r2,6c8 <__pack_f+0x28>
     6c4:	3000101e 	bne	r6,zero,708 <__pack_f+0x68>
     6c8:	000d883a 	mov	r6,zero
     6cc:	0007883a 	mov	r3,zero
     6d0:	19003fcc 	andi	r4,r3,255
     6d4:	200895fa 	slli	r4,r4,23
     6d8:	00c02034 	movhi	r3,128
     6dc:	18ffffc4 	addi	r3,r3,-1
     6e0:	30c6703a 	and	r3,r6,r3
     6e4:	10a0002c 	andhi	r2,r2,32768
     6e8:	10c4b03a 	or	r2,r2,r3
     6ec:	280a97fa 	slli	r5,r5,31
     6f0:	1104b03a 	or	r2,r2,r4
     6f4:	00e00034 	movhi	r3,32768
     6f8:	18ffffc4 	addi	r3,r3,-1
     6fc:	10c4703a 	and	r2,r2,r3
     700:	1144b03a 	or	r2,r2,r5
     704:	f800283a 	ret
     708:	21000217 	ldw	r4,8(r4)
     70c:	00bfe084 	movi	r2,-126
     710:	20801b16 	blt	r4,r2,780 <__pack_f+0xe0>
     714:	00801fc4 	movi	r2,127
     718:	11001016 	blt	r2,r4,75c <__pack_f+0xbc>
     71c:	308e703a 	and	r7,r6,r2
     720:	2087883a 	add	r3,r4,r2
     724:	00801004 	movi	r2,64
     728:	38800526 	beq	r7,r2,740 <__pack_f+0xa0>
     72c:	31800fc4 	addi	r6,r6,63
     730:	30000716 	blt	r6,zero,750 <__pack_f+0xb0>
     734:	300490ba 	slli	r2,r6,2
     738:	100cd27a 	srli	r6,r2,9
     73c:	003fe406 	br	6d0 <__pack_f+0x30>
     740:	3080200c 	andi	r2,r6,128
     744:	103ffa26 	beq	r2,zero,730 <__pack_f+0x90>
     748:	31cd883a 	add	r6,r6,r7
     74c:	003ff806 	br	730 <__pack_f+0x90>
     750:	300cd07a 	srli	r6,r6,1
     754:	18c00044 	addi	r3,r3,1
     758:	003ff606 	br	734 <__pack_f+0x94>
     75c:	000d883a 	mov	r6,zero
     760:	00ffffc4 	movi	r3,-1
     764:	003fda06 	br	6d0 <__pack_f+0x30>
     768:	31800434 	orhi	r6,r6,16
     76c:	00802034 	movhi	r2,128
     770:	10bfffc4 	addi	r2,r2,-1
     774:	308c703a 	and	r6,r6,r2
     778:	00ffffc4 	movi	r3,-1
     77c:	003fd406 	br	6d0 <__pack_f+0x30>
     780:	1109c83a 	sub	r4,r2,r4
     784:	00800644 	movi	r2,25
     788:	11001216 	blt	r2,r4,7d4 <__pack_f+0x134>
     78c:	3904983a 	sll	r2,r7,r4
     790:	3106d83a 	srl	r3,r6,r4
     794:	10bfffc4 	addi	r2,r2,-1
     798:	3084703a 	and	r2,r6,r2
     79c:	1004c03a 	cmpne	r2,r2,zero
     7a0:	1886b03a 	or	r3,r3,r2
     7a4:	19001fcc 	andi	r4,r3,127
     7a8:	00801004 	movi	r2,64
     7ac:	20800c26 	beq	r4,r2,7e0 <__pack_f+0x140>
     7b0:	18c00fc4 	addi	r3,r3,63
     7b4:	00900034 	movhi	r2,16384
     7b8:	10bfffc4 	addi	r2,r2,-1
     7bc:	180cd1fa 	srli	r6,r3,7
     7c0:	10c7803a 	cmpltu	r3,r2,r3
     7c4:	00802034 	movhi	r2,128
     7c8:	10bfffc4 	addi	r2,r2,-1
     7cc:	308c703a 	and	r6,r6,r2
     7d0:	003fbf06 	br	6d0 <__pack_f+0x30>
     7d4:	0007883a 	mov	r3,zero
     7d8:	000d883a 	mov	r6,zero
     7dc:	003ff906 	br	7c4 <__pack_f+0x124>
     7e0:	1880200c 	andi	r2,r3,128
     7e4:	10000126 	beq	r2,zero,7ec <__pack_f+0x14c>
     7e8:	1907883a 	add	r3,r3,r4
     7ec:	180cd1fa 	srli	r6,r3,7
     7f0:	00900034 	movhi	r2,16384
     7f4:	10bfffc4 	addi	r2,r2,-1
     7f8:	10c7803a 	cmpltu	r3,r2,r3
     7fc:	003ff106 	br	7c4 <__pack_f+0x124>

00000800 <__unpack_f>:
     800:	21800017 	ldw	r6,0(r4)
     804:	00c02034 	movhi	r3,128
     808:	18ffffc4 	addi	r3,r3,-1
     80c:	3004d5fa 	srli	r2,r6,23
     810:	3008d7fa 	srli	r4,r6,31
     814:	30ce703a 	and	r7,r6,r3
     818:	10c03fcc 	andi	r3,r2,255
     81c:	29000115 	stw	r4,4(r5)
     820:	1800131e 	bne	r3,zero,870 <__unpack_f+0x70>
     824:	38000f26 	beq	r7,zero,864 <__unpack_f+0x64>
     828:	380691fa 	slli	r3,r7,7
     82c:	01bfe084 	movi	r6,-126
     830:	008000c4 	movi	r2,3
     834:	01100034 	movhi	r4,16384
     838:	213fffc4 	addi	r4,r4,-1
     83c:	28800015 	stw	r2,0(r5)
     840:	29800215 	stw	r6,8(r5)
     844:	20c00536 	bltu	r4,r3,85c <__unpack_f+0x5c>
     848:	3005883a 	mov	r2,r6
     84c:	18c7883a 	add	r3,r3,r3
     850:	10bfffc4 	addi	r2,r2,-1
     854:	20fffd2e 	bgeu	r4,r3,84c <__unpack_f+0x4c>
     858:	28800215 	stw	r2,8(r5)
     85c:	28c00315 	stw	r3,12(r5)
     860:	f800283a 	ret
     864:	00800084 	movi	r2,2
     868:	28800015 	stw	r2,0(r5)
     86c:	f800283a 	ret
     870:	00803fc4 	movi	r2,255
     874:	18800826 	beq	r3,r2,898 <__unpack_f+0x98>
     878:	380491fa 	slli	r2,r7,7
     87c:	18ffe044 	addi	r3,r3,-127
     880:	28c00215 	stw	r3,8(r5)
     884:	10900034 	orhi	r2,r2,16384
     888:	28800315 	stw	r2,12(r5)
     88c:	008000c4 	movi	r2,3
     890:	28800015 	stw	r2,0(r5)
     894:	f800283a 	ret
     898:	3800031e 	bne	r7,zero,8a8 <__unpack_f+0xa8>
     89c:	00800104 	movi	r2,4
     8a0:	28800015 	stw	r2,0(r5)
     8a4:	f800283a 	ret
     8a8:	3080042c 	andhi	r2,r6,16
     8ac:	10000426 	beq	r2,zero,8c0 <__unpack_f+0xc0>
     8b0:	00800044 	movi	r2,1
     8b4:	28800015 	stw	r2,0(r5)
     8b8:	29c00315 	stw	r7,12(r5)
     8bc:	f800283a 	ret
     8c0:	28000015 	stw	zero,0(r5)
     8c4:	003ffc06 	br	8b8 <__unpack_f+0xb8>

000008c8 <__fpcmp_parts_f>:
     8c8:	21800017 	ldw	r6,0(r4)
     8cc:	00c00044 	movi	r3,1
     8d0:	19800a2e 	bgeu	r3,r6,8fc <__fpcmp_parts_f+0x34>
     8d4:	28800017 	ldw	r2,0(r5)
     8d8:	1880082e 	bgeu	r3,r2,8fc <__fpcmp_parts_f+0x34>
     8dc:	00c00104 	movi	r3,4
     8e0:	30c01e26 	beq	r6,r3,95c <__fpcmp_parts_f+0x94>
     8e4:	10c01a26 	beq	r2,r3,950 <__fpcmp_parts_f+0x88>
     8e8:	00c00084 	movi	r3,2
     8ec:	30c00526 	beq	r6,r3,904 <__fpcmp_parts_f+0x3c>
     8f0:	10c0071e 	bne	r2,r3,910 <__fpcmp_parts_f+0x48>
     8f4:	20800117 	ldw	r2,4(r4)
     8f8:	1000091e 	bne	r2,zero,920 <__fpcmp_parts_f+0x58>
     8fc:	00800044 	movi	r2,1
     900:	f800283a 	ret
     904:	10c0121e 	bne	r2,r3,950 <__fpcmp_parts_f+0x88>
     908:	0005883a 	mov	r2,zero
     90c:	f800283a 	ret
     910:	20c00117 	ldw	r3,4(r4)
     914:	28800117 	ldw	r2,4(r5)
     918:	18800326 	beq	r3,r2,928 <__fpcmp_parts_f+0x60>
     91c:	183ff726 	beq	r3,zero,8fc <__fpcmp_parts_f+0x34>
     920:	00bfffc4 	movi	r2,-1
     924:	f800283a 	ret
     928:	21800217 	ldw	r6,8(r4)
     92c:	28800217 	ldw	r2,8(r5)
     930:	11bffa16 	blt	r2,r6,91c <__fpcmp_parts_f+0x54>
     934:	30800416 	blt	r6,r2,948 <__fpcmp_parts_f+0x80>
     938:	21000317 	ldw	r4,12(r4)
     93c:	29400317 	ldw	r5,12(r5)
     940:	293ff636 	bltu	r5,r4,91c <__fpcmp_parts_f+0x54>
     944:	217ff02e 	bgeu	r4,r5,908 <__fpcmp_parts_f+0x40>
     948:	183fec1e 	bne	r3,zero,8fc <__fpcmp_parts_f+0x34>
     94c:	003ff406 	br	920 <__fpcmp_parts_f+0x58>
     950:	28800117 	ldw	r2,4(r5)
     954:	103fe91e 	bne	r2,zero,8fc <__fpcmp_parts_f+0x34>
     958:	003ff106 	br	920 <__fpcmp_parts_f+0x58>
     95c:	11bfe51e 	bne	r2,r6,8f4 <__fpcmp_parts_f+0x2c>
     960:	28c00117 	ldw	r3,4(r5)
     964:	20800117 	ldw	r2,4(r4)
     968:	1885c83a 	sub	r2,r3,r2
     96c:	f800283a 	ret

00000970 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     970:	deffff04 	addi	sp,sp,-4
     974:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     978:	01000074 	movhi	r4,1
     97c:	213fa004 	addi	r4,r4,-384
     980:	00c00034 	movhi	r3,0
     984:	18d6ed04 	addi	r3,r3,23476

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     988:	20c00926 	beq	r4,r3,9b0 <alt_load+0x40>
     98c:	01800074 	movhi	r6,1
     990:	31bfa004 	addi	r6,r6,-384
  {
    while( to != end )
     994:	19800626 	beq	r3,r6,9b0 <alt_load+0x40>
     998:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     99c:	20800017 	ldw	r2,0(r4)
     9a0:	18800015 	stw	r2,0(r3)
     9a4:	1947883a 	add	r3,r3,r5
     9a8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     9ac:	30fffb1e 	bne	r6,r3,99c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     9b0:	01000034 	movhi	r4,0
     9b4:	21000804 	addi	r4,r4,32
     9b8:	00c00034 	movhi	r3,0
     9bc:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     9c0:	20c00926 	beq	r4,r3,9e8 <alt_load+0x78>
     9c4:	01800034 	movhi	r6,0
     9c8:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     9cc:	19800626 	beq	r3,r6,9e8 <alt_load+0x78>
     9d0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     9d4:	20800017 	ldw	r2,0(r4)
     9d8:	18800015 	stw	r2,0(r3)
     9dc:	1947883a 	add	r3,r3,r5
     9e0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     9e4:	30fffb1e 	bne	r6,r3,9d4 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     9e8:	01000034 	movhi	r4,0
     9ec:	21162804 	addi	r4,r4,22688
     9f0:	00c00034 	movhi	r3,0
     9f4:	18d62804 	addi	r3,r3,22688

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     9f8:	20c00926 	beq	r4,r3,a20 <alt_load+0xb0>
     9fc:	01800034 	movhi	r6,0
     a00:	3196ed04 	addi	r6,r6,23476
  {
    while( to != end )
     a04:	19800626 	beq	r3,r6,a20 <alt_load+0xb0>
     a08:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     a0c:	20800017 	ldw	r2,0(r4)
     a10:	18800015 	stw	r2,0(r3)
     a14:	1947883a 	add	r3,r3,r5
     a18:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     a1c:	30fffb1e 	bne	r6,r3,a0c <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     a20:	0002b9c0 	call	2b9c <alt_dcache_flush_all>
  alt_icache_flush_all();
     a24:	0002c880 	call	2c88 <alt_icache_flush_all>
}
     a28:	dfc00017 	ldw	ra,0(sp)
     a2c:	dec00104 	addi	sp,sp,4
     a30:	f800283a 	ret

00000a34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     a34:	defffe04 	addi	sp,sp,-8
     a38:	dfc00115 	stw	ra,4(sp)
     a3c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     a40:	0009883a 	mov	r4,zero
     a44:	0000c880 	call	c88 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     a48:	0000ca80 	call	ca8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     a4c:	01800034 	movhi	r6,0
     a50:	31969f04 	addi	r6,r6,23164
     a54:	3009883a 	mov	r4,r6
     a58:	300b883a 	mov	r5,r6
     a5c:	0002d0c0 	call	2d0c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     a60:	d108c117 	ldw	r4,8964(gp)
     a64:	d148c217 	ldw	r5,8968(gp)
     a68:	d188c317 	ldw	r6,8972(gp)
     a6c:	00001a40 	call	1a4 <main>
     a70:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     a74:	01000044 	movi	r4,1
     a78:	0002ac00 	call	2ac0 <close>
  exit (result);
     a7c:	8009883a 	mov	r4,r16
     a80:	000324c0 	call	324c <exit>

00000a84 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     a84:	defff804 	addi	sp,sp,-32
     a88:	dfc00415 	stw	ra,16(sp)
     a8c:	dc800315 	stw	r18,12(sp)
     a90:	dc400215 	stw	r17,8(sp)
     a94:	dc000115 	stw	r16,4(sp)
     a98:	d9400515 	stw	r5,20(sp)
     a9c:	d9800615 	stw	r6,24(sp)
     aa0:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     aa4:	d8800504 	addi	r2,sp,20
     aa8:	d8800015 	stw	r2,0(sp)
     aac:	2023883a 	mov	r17,r4
     ab0:	00005d06 	br	c28 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     ab4:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     ab8:	21003fcc 	andi	r4,r4,255
     abc:	2100201c 	xori	r4,r4,128
     ac0:	213fe004 	addi	r4,r4,-128
     ac4:	00800944 	movi	r2,37
     ac8:	20800226 	beq	r4,r2,ad4 <alt_printf+0x50>
        {
            alt_putchar(c);
     acc:	0000c600 	call	c60 <alt_putchar>
     ad0:	00005506 	br	c28 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     ad4:	89400003 	ldbu	r5,0(r17)
     ad8:	8c400044 	addi	r17,r17,1
     adc:	29003fcc 	andi	r4,r5,255
     ae0:	2100201c 	xori	r4,r4,128
     ae4:	213fe004 	addi	r4,r4,-128
     ae8:	20005726 	beq	r4,zero,c48 <alt_printf+0x1c4>
            {
                if (c == '%')
     aec:	00800944 	movi	r2,37
     af0:	2080021e 	bne	r4,r2,afc <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     af4:	0000c600 	call	c60 <alt_putchar>
     af8:	00004b06 	br	c28 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     afc:	28c03fcc 	andi	r3,r5,255
     b00:	18c0201c 	xori	r3,r3,128
     b04:	18ffe004 	addi	r3,r3,-128
     b08:	008018c4 	movi	r2,99
     b0c:	1880061e 	bne	r3,r2,b28 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     b10:	d8c00017 	ldw	r3,0(sp)
     b14:	18800104 	addi	r2,r3,4
     b18:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     b1c:	19000017 	ldw	r4,0(r3)
     b20:	0000c600 	call	c60 <alt_putchar>
     b24:	00004006 	br	c28 <alt_printf+0x1a4>
                }
                else if (c == 'x')
     b28:	28c03fcc 	andi	r3,r5,255
     b2c:	18c0201c 	xori	r3,r3,128
     b30:	18ffe004 	addi	r3,r3,-128
     b34:	00801e04 	movi	r2,120
     b38:	1880231e 	bne	r3,r2,bc8 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     b3c:	d8c00017 	ldw	r3,0(sp)
     b40:	18800104 	addi	r2,r3,4
     b44:	d8800015 	stw	r2,0(sp)
     b48:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     b4c:	90000326 	beq	r18,zero,b5c <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     b50:	90bc002c 	andhi	r2,r18,61440
     b54:	10000426 	beq	r2,zero,b68 <alt_printf+0xe4>
     b58:	00003906 	br	c40 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     b5c:	01000c04 	movi	r4,48
     b60:	0000c600 	call	c60 <alt_putchar>
     b64:	00003006 	br	c28 <alt_printf+0x1a4>
                        continue;
     b68:	04000704 	movi	r16,28
     b6c:	013fff04 	movi	r4,-4
     b70:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     b74:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     b78:	1c04983a 	sll	r2,r3,r16
     b7c:	9084703a 	and	r2,r18,r2
     b80:	103ffc26 	beq	r2,zero,b74 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b84:	80002816 	blt	r16,zero,c28 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     b88:	008003c4 	movi	r2,15
     b8c:	1404983a 	sll	r2,r2,r16
     b90:	9084703a 	and	r2,r18,r2
     b94:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     b98:	00800244 	movi	r2,9
     b9c:	10c00236 	bltu	r2,r3,ba8 <alt_printf+0x124>
                            c = '0' + digit;
     ba0:	19000c04 	addi	r4,r3,48
     ba4:	00000106 	br	bac <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     ba8:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     bac:	21003fcc 	andi	r4,r4,255
     bb0:	2100201c 	xori	r4,r4,128
     bb4:	213fe004 	addi	r4,r4,-128
     bb8:	0000c600 	call	c60 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     bbc:	843fff04 	addi	r16,r16,-4
     bc0:	80001916 	blt	r16,zero,c28 <alt_printf+0x1a4>
     bc4:	003ff006 	br	b88 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     bc8:	28c03fcc 	andi	r3,r5,255
     bcc:	18c0201c 	xori	r3,r3,128
     bd0:	18ffe004 	addi	r3,r3,-128
     bd4:	00801cc4 	movi	r2,115
     bd8:	1880131e 	bne	r3,r2,c28 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     bdc:	d8800017 	ldw	r2,0(sp)
     be0:	10c00104 	addi	r3,r2,4
     be4:	d8c00015 	stw	r3,0(sp)
     be8:	14000017 	ldw	r16,0(r2)

                    while(*s)
     bec:	81000003 	ldbu	r4,0(r16)
     bf0:	20803fcc 	andi	r2,r4,255
     bf4:	1080201c 	xori	r2,r2,128
     bf8:	10bfe004 	addi	r2,r2,-128
     bfc:	10000a26 	beq	r2,zero,c28 <alt_printf+0x1a4>
                      alt_putchar(*s++);
     c00:	84000044 	addi	r16,r16,1
     c04:	21003fcc 	andi	r4,r4,255
     c08:	2100201c 	xori	r4,r4,128
     c0c:	213fe004 	addi	r4,r4,-128
     c10:	0000c600 	call	c60 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     c14:	81000003 	ldbu	r4,0(r16)
     c18:	20803fcc 	andi	r2,r4,255
     c1c:	1080201c 	xori	r2,r2,128
     c20:	10bfe004 	addi	r2,r2,-128
     c24:	103ff61e 	bne	r2,zero,c00 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     c28:	89000003 	ldbu	r4,0(r17)
     c2c:	20803fcc 	andi	r2,r4,255
     c30:	1080201c 	xori	r2,r2,128
     c34:	10bfe004 	addi	r2,r2,-128
     c38:	103f9e1e 	bne	r2,zero,ab4 <alt_printf+0x30>
     c3c:	00000206 	br	c48 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     c40:	04000704 	movi	r16,28
     c44:	003fd006 	br	b88 <alt_printf+0x104>
     c48:	dfc00417 	ldw	ra,16(sp)
     c4c:	dc800317 	ldw	r18,12(sp)
     c50:	dc400217 	ldw	r17,8(sp)
     c54:	dc000117 	ldw	r16,4(sp)
     c58:	dec00804 	addi	sp,sp,32
     c5c:	f800283a 	ret

00000c60 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     c60:	deffff04 	addi	sp,sp,-4
     c64:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     c68:	00800074 	movhi	r2,1
     c6c:	10bf9b04 	addi	r2,r2,-404
     c70:	10800017 	ldw	r2,0(r2)
     c74:	11400217 	ldw	r5,8(r2)
     c78:	00033980 	call	3398 <putc>
#endif
}
     c7c:	dfc00017 	ldw	ra,0(sp)
     c80:	dec00104 	addi	sp,sp,4
     c84:	f800283a 	ret

00000c88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     c88:	deffff04 	addi	sp,sp,-4
     c8c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
     c90:	00030e00 	call	30e0 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     c94:	00800044 	movi	r2,1
     c98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     c9c:	dfc00017 	ldw	ra,0(sp)
     ca0:	dec00104 	addi	sp,sp,4
     ca4:	f800283a 	ret

00000ca8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     ca8:	defffd04 	addi	sp,sp,-12
     cac:	dfc00215 	stw	ra,8(sp)
     cb0:	dc400115 	stw	r17,4(sp)
     cb4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     cb8:	04400204 	movi	r17,8
     cbc:	01040034 	movhi	r4,4096
     cc0:	21080004 	addi	r4,r4,8192
     cc4:	000b883a 	mov	r5,zero
     cc8:	000d883a 	mov	r6,zero
     ccc:	880f883a 	mov	r7,r17
     cd0:	000157c0 	call	157c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     cd4:	04000074 	movhi	r16,1
     cd8:	84385d04 	addi	r16,r16,-7820
     cdc:	8009883a 	mov	r4,r16
     ce0:	000b883a 	mov	r5,zero
     ce4:	880d883a 	mov	r6,r17
     ce8:	00010780 	call	1078 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     cec:	04400074 	movhi	r17,1
     cf0:	8c7f9404 	addi	r17,r17,-432
     cf4:	813ff604 	addi	r4,r16,-40
     cf8:	880b883a 	mov	r5,r17
     cfc:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d00:	01000074 	movhi	r4,1
     d04:	213c6b04 	addi	r4,r4,-3668
     d08:	880b883a 	mov	r5,r17
     d0c:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d10:	01000074 	movhi	r4,1
     d14:	213c7704 	addi	r4,r4,-3620
     d18:	880b883a 	mov	r5,r17
     d1c:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     d20:	04000074 	movhi	r16,1
     d24:	843c8304 	addi	r16,r16,-3572
     d28:	8009883a 	mov	r4,r16
     d2c:	00016b00 	call	16b0 <alt_up_character_lcd_init>
     d30:	8009883a 	mov	r4,r16
     d34:	880b883a 	mov	r5,r17
     d38:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d3c:	01000074 	movhi	r4,1
     d40:	213c8e04 	addi	r4,r4,-3528
     d44:	880b883a 	mov	r5,r17
     d48:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d4c:	01000074 	movhi	r4,1
     d50:	213c9904 	addi	r4,r4,-3484
     d54:	880b883a 	mov	r5,r17
     d58:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d5c:	01000074 	movhi	r4,1
     d60:	213ca404 	addi	r4,r4,-3440
     d64:	880b883a 	mov	r5,r17
     d68:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d6c:	01000074 	movhi	r4,1
     d70:	213caf04 	addi	r4,r4,-3396
     d74:	880b883a 	mov	r5,r17
     d78:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d7c:	01000074 	movhi	r4,1
     d80:	213cba04 	addi	r4,r4,-3352
     d84:	880b883a 	mov	r5,r17
     d88:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d8c:	01000074 	movhi	r4,1
     d90:	213cc504 	addi	r4,r4,-3308
     d94:	880b883a 	mov	r5,r17
     d98:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     d9c:	01000074 	movhi	r4,1
     da0:	213cd004 	addi	r4,r4,-3264
     da4:	880b883a 	mov	r5,r17
     da8:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     dac:	01000074 	movhi	r4,1
     db0:	213cdb04 	addi	r4,r4,-3220
     db4:	880b883a 	mov	r5,r17
     db8:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     dbc:	04000074 	movhi	r16,1
     dc0:	843ce604 	addi	r16,r16,-3176
     dc4:	8009883a 	mov	r4,r16
     dc8:	0001bd40 	call	1bd4 <alt_up_ps2_init>
     dcc:	8009883a 	mov	r4,r16
     dd0:	880b883a 	mov	r5,r17
     dd4:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
     dd8:	01000074 	movhi	r4,1
     ddc:	213cf404 	addi	r4,r4,-3120
     de0:	880b883a 	mov	r5,r17
     de4:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     de8:	01000074 	movhi	r4,1
     dec:	213cff04 	addi	r4,r4,-3076
     df0:	20800a17 	ldw	r2,40(r4)
     df4:	10800104 	addi	r2,r2,4
     df8:	10c0000b 	ldhu	r3,0(r2)
     dfc:	20c00c15 	stw	r3,48(r4)
     e00:	10800017 	ldw	r2,0(r2)
     e04:	100ad43a 	srli	r5,r2,16
     e08:	21400d15 	stw	r5,52(r4)
     e0c:	00801004 	movi	r2,64
     e10:	10c00436 	bltu	r2,r3,e24 <alt_sys_init+0x17c>
     e14:	00800fc4 	movi	r2,63
     e18:	20800f15 	stw	r2,60(r4)
     e1c:	00800184 	movi	r2,6
     e20:	20801015 	stw	r2,64(r4)
     e24:	00800804 	movi	r2,32
     e28:	11400436 	bltu	r2,r5,e3c <alt_sys_init+0x194>
     e2c:	00c007c4 	movi	r3,31
     e30:	00800074 	movhi	r2,1
     e34:	10bcff04 	addi	r2,r2,-3076
     e38:	10c01115 	stw	r3,68(r2)
     e3c:	04000074 	movhi	r16,1
     e40:	843cff04 	addi	r16,r16,-3076
     e44:	8009883a 	mov	r4,r16
     e48:	0001f8c0 	call	1f8c <alt_up_char_buffer_init>
     e4c:	8009883a 	mov	r4,r16
     e50:	01400074 	movhi	r5,1
     e54:	297f9404 	addi	r5,r5,-432
     e58:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     e5c:	01800074 	movhi	r6,1
     e60:	31bd1104 	addi	r6,r6,-3004
     e64:	30c00a17 	ldw	r3,40(r6)
     e68:	18800017 	ldw	r2,0(r3)
     e6c:	30800b15 	stw	r2,44(r6)
     e70:	18800117 	ldw	r2,4(r3)
     e74:	30800c15 	stw	r2,48(r6)
     e78:	19000204 	addi	r4,r3,8
     e7c:	2080000b 	ldhu	r2,0(r4)
     e80:	30800f15 	stw	r2,60(r6)
     e84:	20800017 	ldw	r2,0(r4)
     e88:	1004d43a 	srli	r2,r2,16
     e8c:	30801015 	stw	r2,64(r6)
     e90:	18c00304 	addi	r3,r3,12
     e94:	18800017 	ldw	r2,0(r3)
     e98:	1005d07a 	srai	r2,r2,1
     e9c:	01000044 	movi	r4,1
     ea0:	1104703a 	and	r2,r2,r4
     ea4:	30800d15 	stw	r2,52(r6)
     ea8:	18800017 	ldw	r2,0(r3)
     eac:	1005d13a 	srai	r2,r2,4
     eb0:	114003cc 	andi	r5,r2,15
     eb4:	31400e15 	stw	r5,56(r6)
     eb8:	1a000017 	ldw	r8,0(r3)
     ebc:	400ed43a 	srli	r7,r8,16
     ec0:	2900021e 	bne	r5,r4,ecc <alt_sys_init+0x224>
     ec4:	30001115 	stw	zero,68(r6)
     ec8:	00000b06 	br	ef8 <alt_sys_init+0x250>
     ecc:	00800084 	movi	r2,2
     ed0:	2880051e 	bne	r5,r2,ee8 <alt_sys_init+0x240>
     ed4:	00c00044 	movi	r3,1
     ed8:	00800074 	movhi	r2,1
     edc:	10bd1104 	addi	r2,r2,-3004
     ee0:	10c01115 	stw	r3,68(r2)
     ee4:	00000406 	br	ef8 <alt_sys_init+0x250>
     ee8:	00c00084 	movi	r3,2
     eec:	00800074 	movhi	r2,1
     ef0:	10bd1104 	addi	r2,r2,-3004
     ef4:	10c01115 	stw	r3,68(r2)
     ef8:	01000074 	movhi	r4,1
     efc:	213d1104 	addi	r4,r4,-3004
     f00:	38c03fcc 	andi	r3,r7,255
     f04:	01800804 	movi	r6,32
     f08:	30c5c83a 	sub	r2,r6,r3
     f0c:	017fffc4 	movi	r5,-1
     f10:	2884d83a 	srl	r2,r5,r2
     f14:	20801215 	stw	r2,72(r4)
     f18:	20801117 	ldw	r2,68(r4)
     f1c:	1887883a 	add	r3,r3,r2
     f20:	20c01315 	stw	r3,76(r4)
     f24:	4004d63a 	srli	r2,r8,24
     f28:	308dc83a 	sub	r6,r6,r2
     f2c:	298ad83a 	srl	r5,r5,r6
     f30:	21401415 	stw	r5,80(r4)
     f34:	01400074 	movhi	r5,1
     f38:	297f9404 	addi	r5,r5,-432
     f3c:	0002ba80 	call	2ba8 <alt_dev_llist_insert>
}
     f40:	dfc00217 	ldw	ra,8(sp)
     f44:	dc400117 	ldw	r17,4(sp)
     f48:	dc000017 	ldw	r16,0(sp)
     f4c:	dec00304 	addi	sp,sp,12
     f50:	f800283a 	ret

00000f54 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     f54:	deffff04 	addi	sp,sp,-4
     f58:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     f5c:	21000017 	ldw	r4,0(r4)
     f60:	21000a04 	addi	r4,r4,40
     f64:	00012240 	call	1224 <altera_avalon_jtag_uart_ioctl>
}
     f68:	dfc00017 	ldw	ra,0(sp)
     f6c:	dec00104 	addi	sp,sp,4
     f70:	f800283a 	ret

00000f74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     f74:	deffff04 	addi	sp,sp,-4
     f78:	dfc00015 	stw	ra,0(sp)
     f7c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     f80:	21000017 	ldw	r4,0(r4)
     f84:	21000a04 	addi	r4,r4,40
     f88:	11400217 	ldw	r5,8(r2)
     f8c:	0000fec0 	call	fec <altera_avalon_jtag_uart_close>
}
     f90:	dfc00017 	ldw	ra,0(sp)
     f94:	dec00104 	addi	sp,sp,4
     f98:	f800283a 	ret

00000f9c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     f9c:	deffff04 	addi	sp,sp,-4
     fa0:	dfc00015 	stw	ra,0(sp)
     fa4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     fa8:	21000017 	ldw	r4,0(r4)
     fac:	21000a04 	addi	r4,r4,40
     fb0:	11c00217 	ldw	r7,8(r2)
     fb4:	00014000 	call	1400 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     fb8:	dfc00017 	ldw	ra,0(sp)
     fbc:	dec00104 	addi	sp,sp,4
     fc0:	f800283a 	ret

00000fc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     fc4:	deffff04 	addi	sp,sp,-4
     fc8:	dfc00015 	stw	ra,0(sp)
     fcc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     fd0:	21000017 	ldw	r4,0(r4)
     fd4:	21000a04 	addi	r4,r4,40
     fd8:	11c00217 	ldw	r7,8(r2)
     fdc:	00012980 	call	1298 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     fe0:	dfc00017 	ldw	ra,0(sp)
     fe4:	dec00104 	addi	sp,sp,4
     fe8:	f800283a 	ret

00000fec <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     fec:	21800c17 	ldw	r6,48(r4)
     ff0:	2950000c 	andi	r5,r5,16384
     ff4:	280b003a 	cmpeq	r5,r5,zero
     ff8:	00000306 	br	1008 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     ffc:	2800021e 	bne	r5,zero,1008 <altera_avalon_jtag_uart_close+0x1c>
    1000:	00bffd44 	movi	r2,-11
    1004:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1008:	20800d17 	ldw	r2,52(r4)
    100c:	11800326 	beq	r2,r6,101c <altera_avalon_jtag_uart_close+0x30>
    1010:	20c00917 	ldw	r3,36(r4)
    1014:	20800117 	ldw	r2,4(r4)
    1018:	18bff836 	bltu	r3,r2,ffc <altera_avalon_jtag_uart_close+0x10>
    101c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    1020:	f800283a 	ret

00001024 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1024:	20800017 	ldw	r2,0(r4)
    1028:	10c00104 	addi	r3,r2,4
    102c:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1030:	01410004 	movi	r5,1024
    1034:	1144703a 	and	r2,r2,r5
    1038:	10000526 	beq	r2,zero,1050 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    103c:	20800817 	ldw	r2,32(r4)
    1040:	1144b03a 	or	r2,r2,r5
    1044:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1048:	20000915 	stw	zero,36(r4)
    104c:	00000606 	br	1068 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1050:	20c00917 	ldw	r3,36(r4)
    1054:	00a00034 	movhi	r2,32768
    1058:	10bfff04 	addi	r2,r2,-4
    105c:	10c00236 	bltu	r2,r3,1068 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    1060:	18800044 	addi	r2,r3,1
    1064:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1068:	008000b4 	movhi	r2,2
    106c:	10a85704 	addi	r2,r2,-24228
    1070:	10800017 	ldw	r2,0(r2)
    1074:	f800283a 	ret

00001078 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1078:	defffe04 	addi	sp,sp,-8
    107c:	dfc00115 	stw	ra,4(sp)
    1080:	dc000015 	stw	r16,0(sp)
    1084:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1088:	00c00044 	movi	r3,1
    108c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1090:	20800017 	ldw	r2,0(r4)
    1094:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    1098:	3009883a 	mov	r4,r6
    109c:	800b883a 	mov	r5,r16
    10a0:	01800034 	movhi	r6,0
    10a4:	31843c04 	addi	r6,r6,4336
    10a8:	0002da40 	call	2da4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    10ac:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    10b0:	81000204 	addi	r4,r16,8
    10b4:	008000b4 	movhi	r2,2
    10b8:	10a85704 	addi	r2,r2,-24228
    10bc:	11400017 	ldw	r5,0(r2)
    10c0:	01800034 	movhi	r6,0
    10c4:	31840904 	addi	r6,r6,4132
    10c8:	800f883a 	mov	r7,r16
    10cc:	0002a2c0 	call	2a2c <alt_alarm_start>
    10d0:	1000030e 	bge	r2,zero,10e0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    10d4:	00a00034 	movhi	r2,32768
    10d8:	10bfffc4 	addi	r2,r2,-1
    10dc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    10e0:	dfc00117 	ldw	ra,4(sp)
    10e4:	dc000017 	ldw	r16,0(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    10f0:	22000017 	ldw	r8,0(r4)
    10f4:	03800104 	movi	r14,4
    10f8:	4399883a 	add	r12,r8,r14
    10fc:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1100:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1104:	5880c00c 	andi	r2,r11,768
    1108:	10004526 	beq	r2,zero,1220 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    110c:	5880400c 	andi	r2,r11,256
    1110:	10002126 	beq	r2,zero,1198 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1114:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1118:	10800044 	addi	r2,r2,1
    111c:	1081ffcc 	andi	r2,r2,2047
    1120:	20c00b17 	ldw	r3,44(r4)
    1124:	10c01626 	beq	r2,r3,1180 <altera_avalon_jtag_uart_irq+0x90>
    1128:	02a00014 	movui	r10,32768
    112c:	02400e04 	movi	r9,56
    1130:	01c00044 	movi	r7,1
    1134:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1138:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    113c:	2a84703a 	and	r2,r5,r10
    1140:	10000d26 	beq	r2,zero,1178 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1144:	20800a17 	ldw	r2,40(r4)
    1148:	1105883a 	add	r2,r2,r4
    114c:	1245883a 	add	r2,r2,r9
    1150:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1154:	20800a17 	ldw	r2,40(r4)
    1158:	11c5883a 	add	r2,r2,r7
    115c:	1184703a 	and	r2,r2,r6
    1160:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1164:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1168:	11c5883a 	add	r2,r2,r7
    116c:	1184703a 	and	r2,r2,r6
    1170:	20c00b17 	ldw	r3,44(r4)
    1174:	10fff01e 	bne	r2,r3,1138 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1178:	2b44703a 	and	r2,r5,r13
    117c:	10000626 	beq	r2,zero,1198 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1180:	20800817 	ldw	r2,32(r4)
    1184:	00ffff84 	movi	r3,-2
    1188:	10c4703a 	and	r2,r2,r3
    118c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1190:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1194:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1198:	5880800c 	andi	r2,r11,512
    119c:	103fd826 	beq	r2,zero,1100 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    11a0:	5b44703a 	and	r2,r11,r13
    11a4:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    11a8:	283fd526 	beq	r5,zero,1100 <altera_avalon_jtag_uart_irq+0x10>
    11ac:	20c00d17 	ldw	r3,52(r4)
    11b0:	20800c17 	ldw	r2,48(r4)
    11b4:	18801126 	beq	r3,r2,11fc <altera_avalon_jtag_uart_irq+0x10c>
    11b8:	02420e04 	movi	r9,2104
    11bc:	01800044 	movi	r6,1
    11c0:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    11c4:	20800d17 	ldw	r2,52(r4)
    11c8:	1105883a 	add	r2,r2,r4
    11cc:	1245883a 	add	r2,r2,r9
    11d0:	10800007 	ldb	r2,0(r2)
    11d4:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11d8:	20800d17 	ldw	r2,52(r4)
    11dc:	1185883a 	add	r2,r2,r6
    11e0:	11c4703a 	and	r2,r2,r7
    11e4:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    11e8:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    11ec:	283fc426 	beq	r5,zero,1100 <altera_avalon_jtag_uart_irq+0x10>
    11f0:	20c00d17 	ldw	r3,52(r4)
    11f4:	20800c17 	ldw	r2,48(r4)
    11f8:	18bff21e 	bne	r3,r2,11c4 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    11fc:	20c00817 	ldw	r3,32(r4)
    1200:	00bfff44 	movi	r2,-3
    1204:	1886703a 	and	r3,r3,r2
    1208:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    120c:	20800017 	ldw	r2,0(r4)
    1210:	1385883a 	add	r2,r2,r14
    1214:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1218:	60800037 	ldwio	r2,0(r12)
    121c:	003fb806 	br	1100 <altera_avalon_jtag_uart_irq+0x10>
    1220:	f800283a 	ret

00001224 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    1224:	009a8044 	movi	r2,27137
    1228:	28800326 	beq	r5,r2,1238 <altera_avalon_jtag_uart_ioctl+0x14>
    122c:	009a8084 	movi	r2,27138
    1230:	2880171e 	bne	r5,r2,1290 <altera_avalon_jtag_uart_ioctl+0x6c>
    1234:	00000d06 	br	126c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1238:	20c00117 	ldw	r3,4(r4)
    123c:	00a00034 	movhi	r2,32768
    1240:	10bfffc4 	addi	r2,r2,-1
    1244:	18801226 	beq	r3,r2,1290 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1248:	31800017 	ldw	r6,0(r6)
    124c:	30ffff84 	addi	r3,r6,-2
    1250:	10bfff44 	addi	r2,r2,-3
    1254:	10c0022e 	bgeu	r2,r3,1260 <altera_avalon_jtag_uart_ioctl+0x3c>
    1258:	01a00034 	movhi	r6,32768
    125c:	31bfff84 	addi	r6,r6,-2
    1260:	21800115 	stw	r6,4(r4)
    1264:	0005883a 	mov	r2,zero
    1268:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    126c:	20c00117 	ldw	r3,4(r4)
    1270:	00a00034 	movhi	r2,32768
    1274:	10bfffc4 	addi	r2,r2,-1
    1278:	18800526 	beq	r3,r2,1290 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    127c:	20800917 	ldw	r2,36(r4)
    1280:	10c5803a 	cmpltu	r2,r2,r3
    1284:	30800015 	stw	r2,0(r6)
    1288:	0005883a 	mov	r2,zero
    128c:	f800283a 	ret
    1290:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    1294:	f800283a 	ret

00001298 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1298:	defff604 	addi	sp,sp,-40
    129c:	dfc00915 	stw	ra,36(sp)
    12a0:	df000815 	stw	fp,32(sp)
    12a4:	ddc00715 	stw	r23,28(sp)
    12a8:	dd800615 	stw	r22,24(sp)
    12ac:	dd400515 	stw	r21,20(sp)
    12b0:	dd000415 	stw	r20,16(sp)
    12b4:	dcc00315 	stw	r19,12(sp)
    12b8:	dc800215 	stw	r18,8(sp)
    12bc:	dc400115 	stw	r17,4(sp)
    12c0:	dc000015 	stw	r16,0(sp)
    12c4:	2025883a 	mov	r18,r4
    12c8:	282f883a 	mov	r23,r5
    12cc:	3027883a 	mov	r19,r6
    12d0:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    12d4:	0180220e 	bge	zero,r6,1360 <altera_avalon_jtag_uart_read+0xc8>
    12d8:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    12dc:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    12e0:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    12e4:	b4400236 	bltu	r22,r17,12f0 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    12e8:	b461c83a 	sub	r16,r22,r17
    12ec:	00000206 	br	12f8 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    12f0:	00820004 	movi	r2,2048
    12f4:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    12f8:	80000d26 	beq	r16,zero,1330 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    12fc:	9829883a 	mov	r20,r19
    1300:	9c001d36 	bltu	r19,r16,1378 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1304:	91400e04 	addi	r5,r18,56
    1308:	a809883a 	mov	r4,r21
    130c:	2c4b883a 	add	r5,r5,r17
    1310:	800d883a 	mov	r6,r16
    1314:	00032f80 	call	32f8 <memcpy>
      ptr   += n;
    1318:	ac2b883a 	add	r21,r21,r16
      space -= n;
    131c:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1320:	8445883a 	add	r2,r16,r17
    1324:	1081ffcc 	andi	r2,r2,2047
    1328:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    132c:	04ffeb16 	blt	zero,r19,12dc <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    1330:	adc01c1e 	bne	r21,r23,13a4 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1334:	e090000c 	andi	r2,fp,16384
    1338:	10000d1e 	bne	r2,zero,1370 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    133c:	90800a17 	ldw	r2,40(r18)
    1340:	b080031e 	bne	r22,r2,1350 <altera_avalon_jtag_uart_read+0xb8>
    1344:	90c00917 	ldw	r3,36(r18)
    1348:	90800117 	ldw	r2,4(r18)
    134c:	18bffb36 	bltu	r3,r2,133c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1350:	90800a17 	ldw	r2,40(r18)
    1354:	b0800426 	beq	r22,r2,1368 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1358:	04c0030e 	bge	zero,r19,1368 <altera_avalon_jtag_uart_read+0xd0>
    135c:	003fde06 	br	12d8 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1360:	3890000c 	andi	r2,r7,16384
    1364:	1000021e 	bne	r2,zero,1370 <altera_avalon_jtag_uart_read+0xd8>
    1368:	00bffec4 	movi	r2,-5
    136c:	00001806 	br	13d0 <altera_avalon_jtag_uart_read+0x138>
    1370:	00bffd44 	movi	r2,-11
    1374:	00001606 	br	13d0 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1378:	91400e04 	addi	r5,r18,56
    137c:	a809883a 	mov	r4,r21
    1380:	894b883a 	add	r5,r17,r5
    1384:	980d883a 	mov	r6,r19
    1388:	00032f80 	call	32f8 <memcpy>
      ptr   += n;
    138c:	aceb883a 	add	r21,r21,r19
      space -= n;
    1390:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1394:	a445883a 	add	r2,r20,r17
    1398:	1081ffcc 	andi	r2,r2,2047
    139c:	90800b15 	stw	r2,44(r18)
    13a0:	003fe306 	br	1330 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13a4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13a8:	00bfff84 	movi	r2,-2
    13ac:	2084703a 	and	r2,r4,r2
    13b0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    13b4:	90800817 	ldw	r2,32(r18)
    13b8:	10800054 	ori	r2,r2,1
    13bc:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    13c0:	90c00017 	ldw	r3,0(r18)
    13c4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13c8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    13cc:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    13d0:	dfc00917 	ldw	ra,36(sp)
    13d4:	df000817 	ldw	fp,32(sp)
    13d8:	ddc00717 	ldw	r23,28(sp)
    13dc:	dd800617 	ldw	r22,24(sp)
    13e0:	dd400517 	ldw	r21,20(sp)
    13e4:	dd000417 	ldw	r20,16(sp)
    13e8:	dcc00317 	ldw	r19,12(sp)
    13ec:	dc800217 	ldw	r18,8(sp)
    13f0:	dc400117 	ldw	r17,4(sp)
    13f4:	dc000017 	ldw	r16,0(sp)
    13f8:	dec00a04 	addi	sp,sp,40
    13fc:	f800283a 	ret

00001400 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1400:	defff804 	addi	sp,sp,-32
    1404:	dfc00715 	stw	ra,28(sp)
    1408:	dd800615 	stw	r22,24(sp)
    140c:	dd400515 	stw	r21,20(sp)
    1410:	dd000415 	stw	r20,16(sp)
    1414:	dcc00315 	stw	r19,12(sp)
    1418:	dc800215 	stw	r18,8(sp)
    141c:	dc400115 	stw	r17,4(sp)
    1420:	dc000015 	stw	r16,0(sp)
    1424:	2021883a 	mov	r16,r4
    1428:	282d883a 	mov	r22,r5
    142c:	3011883a 	mov	r8,r6
    1430:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1434:	01800616 	blt	zero,r6,1450 <altera_avalon_jtag_uart_write+0x50>
    1438:	2829883a 	mov	r20,r5
    143c:	00002106 	br	14c4 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1440:	a585c83a 	sub	r2,r20,r22
    1444:	00004306 	br	1554 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    1448:	00bffd44 	movi	r2,-11
    144c:	00004106 	br	1554 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1450:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1454:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    1458:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    145c:	9140032e 	bgeu	r18,r5,146c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1460:	2c85c83a 	sub	r2,r5,r18
    1464:	11bfffc4 	addi	r6,r2,-1
    1468:	00000606 	br	1484 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    146c:	28000326 	beq	r5,zero,147c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1470:	00820004 	movi	r2,2048
    1474:	148dc83a 	sub	r6,r2,r18
    1478:	00000206 	br	1484 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    147c:	0081ffc4 	movi	r2,2047
    1480:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    1484:	30002626 	beq	r6,zero,1520 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    1488:	4027883a 	mov	r19,r8
    148c:	3023883a 	mov	r17,r6
    1490:	4180012e 	bgeu	r8,r6,1498 <altera_avalon_jtag_uart_write+0x98>
    1494:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    1498:	81020e04 	addi	r4,r16,2104
    149c:	2489883a 	add	r4,r4,r18
    14a0:	a00b883a 	mov	r5,r20
    14a4:	880d883a 	mov	r6,r17
    14a8:	00032f80 	call	32f8 <memcpy>
      ptr   += n;
    14ac:	a469883a 	add	r20,r20,r17
      count -= n;
    14b0:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    14b4:	9445883a 	add	r2,r18,r17
    14b8:	1081ffcc 	andi	r2,r2,2047
    14bc:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    14c0:	023fe416 	blt	zero,r8,1454 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14c8:	00bfff84 	movi	r2,-2
    14cc:	2084703a 	and	r2,r4,r2
    14d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14d4:	80800817 	ldw	r2,32(r16)
    14d8:	10800094 	ori	r2,r2,2
    14dc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14e0:	80c00017 	ldw	r3,0(r16)
    14e4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14e8:	2001703a 	wrctl	status,r4
    14ec:	00000706 	br	150c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    14f0:	80800d17 	ldw	r2,52(r16)
    14f4:	1140031e 	bne	r2,r5,1504 <altera_avalon_jtag_uart_write+0x104>
    14f8:	80c00917 	ldw	r3,36(r16)
    14fc:	80800117 	ldw	r2,4(r16)
    1500:	18bffb36 	bltu	r3,r2,14f0 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1504:	80800d17 	ldw	r2,52(r16)
    1508:	117fed1e 	bne	r2,r5,14c0 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    150c:	b53fcc1e 	bne	r22,r20,1440 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1510:	a890000c 	andi	r2,r21,16384
    1514:	103fcc1e 	bne	r2,zero,1448 <altera_avalon_jtag_uart_write+0x48>
    1518:	00bffec4 	movi	r2,-5
    151c:	00000d06 	br	1554 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1520:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1524:	00bfff84 	movi	r2,-2
    1528:	2084703a 	and	r2,r4,r2
    152c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1530:	80800817 	ldw	r2,32(r16)
    1534:	10800094 	ori	r2,r2,2
    1538:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    153c:	80c00017 	ldw	r3,0(r16)
    1540:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1544:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1548:	a890000c 	andi	r2,r21,16384
    154c:	103fe826 	beq	r2,zero,14f0 <altera_avalon_jtag_uart_write+0xf0>
    1550:	003fee06 	br	150c <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    1554:	dfc00717 	ldw	ra,28(sp)
    1558:	dd800617 	ldw	r22,24(sp)
    155c:	dd400517 	ldw	r21,20(sp)
    1560:	dd000417 	ldw	r20,16(sp)
    1564:	dcc00317 	ldw	r19,12(sp)
    1568:	dc800217 	ldw	r18,8(sp)
    156c:	dc400117 	ldw	r17,4(sp)
    1570:	dc000017 	ldw	r16,0(sp)
    1574:	dec00804 	addi	sp,sp,32
    1578:	f800283a 	ret

0000157c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    157c:	deffff04 	addi	sp,sp,-4
    1580:	dfc00015 	stw	ra,0(sp)
    1584:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1588:	00c000b4 	movhi	r3,2
    158c:	18e85704 	addi	r3,r3,-24228
    1590:	18800017 	ldw	r2,0(r3)
    1594:	1000011e 	bne	r2,zero,159c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1598:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    159c:	008001c4 	movi	r2,7
    15a0:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    15a4:	3009883a 	mov	r4,r6
    15a8:	01800034 	movhi	r6,0
    15ac:	31857004 	addi	r6,r6,5568
    15b0:	0002da40 	call	2da4 <alt_irq_register>
#endif  
}
    15b4:	dfc00017 	ldw	ra,0(sp)
    15b8:	dec00104 	addi	sp,sp,4
    15bc:	f800283a 	ret

000015c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    15c0:	defffe04 	addi	sp,sp,-8
    15c4:	dfc00115 	stw	ra,4(sp)
    15c8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    15cc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    15d0:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15d4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15d8:	00bfff84 	movi	r2,-2
    15dc:	8084703a 	and	r2,r16,r2
    15e0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    15e4:	00030340 	call	3034 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15e8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    15ec:	dfc00117 	ldw	ra,4(sp)
    15f0:	dc000017 	ldw	r16,0(sp)
    15f4:	dec00204 	addi	sp,sp,8
    15f8:	f800283a 	ret

000015fc <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    15fc:	2800021e 	bne	r5,zero,1608 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    1600:	2005883a 	mov	r2,r4
    1604:	00000106 	br	160c <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    1608:	20801014 	ori	r2,r4,64
    160c:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    1610:	10802014 	ori	r2,r2,128
    1614:	f800283a 	ret

00001618 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1618:	28c00003 	ldbu	r3,0(r5)
    161c:	18803fcc 	andi	r2,r3,255
    1620:	1080201c 	xori	r2,r2,128
    1624:	10bfe004 	addi	r2,r2,-128
    1628:	10000d26 	beq	r2,zero,1660 <alt_up_character_lcd_string+0x48>
    162c:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1630:	20800a17 	ldw	r2,40(r4)
    1634:	1185883a 	add	r2,r2,r6
    1638:	18c03fcc 	andi	r3,r3,255
    163c:	18c0201c 	xori	r3,r3,128
    1640:	18ffe004 	addi	r3,r3,-128
    1644:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1648:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    164c:	28c00003 	ldbu	r3,0(r5)
    1650:	18803fcc 	andi	r2,r3,255
    1654:	1080201c 	xori	r2,r2,128
    1658:	10bfe004 	addi	r2,r2,-128
    165c:	103ff41e 	bne	r2,zero,1630 <alt_up_character_lcd_string+0x18>
    1660:	f800283a 	ret

00001664 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1664:	30000926 	beq	r6,zero,168c <alt_up_character_lcd_write+0x28>
    1668:	000f883a 	mov	r7,zero
    166c:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    1670:	20800a17 	ldw	r2,40(r4)
    1674:	1205883a 	add	r2,r2,r8
    1678:	3947883a 	add	r3,r7,r5
    167c:	18c00007 	ldb	r3,0(r3)
    1680:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1684:	3a0f883a 	add	r7,r7,r8
    1688:	31fff91e 	bne	r6,r7,1670 <alt_up_character_lcd_write+0xc>
    168c:	f800283a 	ret

00001690 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    1690:	deffff04 	addi	sp,sp,-4
    1694:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1698:	21000017 	ldw	r4,0(r4)
    169c:	00016640 	call	1664 <alt_up_character_lcd_write>
	return 0;
}
    16a0:	0005883a 	mov	r2,zero
    16a4:	dfc00017 	ldw	ra,0(sp)
    16a8:	dec00104 	addi	sp,sp,4
    16ac:	f800283a 	ret

000016b0 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    16b0:	20c00a17 	ldw	r3,40(r4)
    16b4:	00800044 	movi	r2,1
    16b8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    16bc:	f800283a 	ret

000016c0 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    16c0:	20800a17 	ldw	r2,40(r4)
    16c4:	29403fcc 	andi	r5,r5,255
    16c8:	11400025 	stbio	r5,0(r2)
}
    16cc:	f800283a 	ret

000016d0 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    16d0:	deffff04 	addi	sp,sp,-4
    16d4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    16d8:	014003c4 	movi	r5,15
    16dc:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
}
    16e0:	dfc00017 	ldw	ra,0(sp)
    16e4:	dec00104 	addi	sp,sp,4
    16e8:	f800283a 	ret

000016ec <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    16ec:	deffff04 	addi	sp,sp,-4
    16f0:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    16f4:	01400304 	movi	r5,12
    16f8:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
}
    16fc:	dfc00017 	ldw	ra,0(sp)
    1700:	dec00104 	addi	sp,sp,4
    1704:	f800283a 	ret

00001708 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1708:	defffd04 	addi	sp,sp,-12
    170c:	dfc00215 	stw	ra,8(sp)
    1710:	dc400115 	stw	r17,4(sp)
    1714:	dc000015 	stw	r16,0(sp)
    1718:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    171c:	008009c4 	movi	r2,39
    1720:	11400e36 	bltu	r2,r5,175c <alt_up_character_lcd_erase_pos+0x54>
    1724:	04400044 	movi	r17,1
    1728:	89800c36 	bltu	r17,r6,175c <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    172c:	2809883a 	mov	r4,r5
    1730:	300b883a 	mov	r5,r6
    1734:	00015fc0 	call	15fc <get_DDRAM_addr>
    1738:	8009883a 	mov	r4,r16
    173c:	11403fcc 	andi	r5,r2,255
    1740:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1744:	80800a17 	ldw	r2,40(r16)
    1748:	1445883a 	add	r2,r2,r17
    174c:	00c00084 	movi	r3,2
    1750:	10c00025 	stbio	r3,0(r2)
    1754:	0005883a 	mov	r2,zero
    1758:	00000106 	br	1760 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    175c:	00bfffc4 	movi	r2,-1
}
    1760:	dfc00217 	ldw	ra,8(sp)
    1764:	dc400117 	ldw	r17,4(sp)
    1768:	dc000017 	ldw	r16,0(sp)
    176c:	dec00304 	addi	sp,sp,12
    1770:	f800283a 	ret

00001774 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1774:	defffa04 	addi	sp,sp,-24
    1778:	dfc00515 	stw	ra,20(sp)
    177c:	dd000415 	stw	r20,16(sp)
    1780:	dcc00315 	stw	r19,12(sp)
    1784:	dc800215 	stw	r18,8(sp)
    1788:	dc400115 	stw	r17,4(sp)
    178c:	dc000015 	stw	r16,0(sp)
    1790:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1794:	28001326 	beq	r5,zero,17e4 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1798:	0140020e 	bge	zero,r5,17a4 <alt_up_character_lcd_shift_display+0x30>
    179c:	05000704 	movi	r20,28
    17a0:	00000106 	br	17a8 <alt_up_character_lcd_shift_display+0x34>
    17a4:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    17a8:	2800010e 	bge	r5,zero,17b0 <alt_up_character_lcd_shift_display+0x3c>
    17ac:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    17b0:	00bfffc4 	movi	r2,-1
    17b4:	28a1883a 	add	r16,r5,r2
    17b8:	80c03fcc 	andi	r3,r16,255
    17bc:	10803fcc 	andi	r2,r2,255
    17c0:	18800826 	beq	r3,r2,17e4 <alt_up_character_lcd_shift_display+0x70>
    17c4:	04bfffc4 	movi	r18,-1
    17c8:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    17cc:	9809883a 	mov	r4,r19
    17d0:	a1403fcc 	andi	r5,r20,255
    17d4:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    17d8:	84a1883a 	add	r16,r16,r18
    17dc:	80803fcc 	andi	r2,r16,255
    17e0:	147ffa1e 	bne	r2,r17,17cc <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    17e4:	dfc00517 	ldw	ra,20(sp)
    17e8:	dd000417 	ldw	r20,16(sp)
    17ec:	dcc00317 	ldw	r19,12(sp)
    17f0:	dc800217 	ldw	r18,8(sp)
    17f4:	dc400117 	ldw	r17,4(sp)
    17f8:	dc000017 	ldw	r16,0(sp)
    17fc:	dec00604 	addi	sp,sp,24
    1800:	f800283a 	ret

00001804 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1804:	defffa04 	addi	sp,sp,-24
    1808:	dfc00515 	stw	ra,20(sp)
    180c:	dd000415 	stw	r20,16(sp)
    1810:	dcc00315 	stw	r19,12(sp)
    1814:	dc800215 	stw	r18,8(sp)
    1818:	dc400115 	stw	r17,4(sp)
    181c:	dc000015 	stw	r16,0(sp)
    1820:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1824:	28001326 	beq	r5,zero,1874 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1828:	0140020e 	bge	zero,r5,1834 <alt_up_character_lcd_shift_cursor+0x30>
    182c:	05000504 	movi	r20,20
    1830:	00000106 	br	1838 <alt_up_character_lcd_shift_cursor+0x34>
    1834:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1838:	2800010e 	bge	r5,zero,1840 <alt_up_character_lcd_shift_cursor+0x3c>
    183c:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    1840:	00bfffc4 	movi	r2,-1
    1844:	28a1883a 	add	r16,r5,r2
    1848:	80c03fcc 	andi	r3,r16,255
    184c:	10803fcc 	andi	r2,r2,255
    1850:	18800826 	beq	r3,r2,1874 <alt_up_character_lcd_shift_cursor+0x70>
    1854:	04bfffc4 	movi	r18,-1
    1858:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    185c:	9809883a 	mov	r4,r19
    1860:	a1403fcc 	andi	r5,r20,255
    1864:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1868:	84a1883a 	add	r16,r16,r18
    186c:	80803fcc 	andi	r2,r16,255
    1870:	147ffa1e 	bne	r2,r17,185c <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1874:	dfc00517 	ldw	ra,20(sp)
    1878:	dd000417 	ldw	r20,16(sp)
    187c:	dcc00317 	ldw	r19,12(sp)
    1880:	dc800217 	ldw	r18,8(sp)
    1884:	dc400117 	ldw	r17,4(sp)
    1888:	dc000017 	ldw	r16,0(sp)
    188c:	dec00604 	addi	sp,sp,24
    1890:	f800283a 	ret

00001894 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    1894:	defffe04 	addi	sp,sp,-8
    1898:	dfc00115 	stw	ra,4(sp)
    189c:	dc000015 	stw	r16,0(sp)
    18a0:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    18a4:	008009c4 	movi	r2,39
    18a8:	11400a36 	bltu	r2,r5,18d4 <alt_up_character_lcd_set_cursor_pos+0x40>
    18ac:	00800044 	movi	r2,1
    18b0:	11800836 	bltu	r2,r6,18d4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    18b4:	2809883a 	mov	r4,r5
    18b8:	300b883a 	mov	r5,r6
    18bc:	00015fc0 	call	15fc <get_DDRAM_addr>
    18c0:	8009883a 	mov	r4,r16
    18c4:	11403fcc 	andi	r5,r2,255
    18c8:	00016c00 	call	16c0 <alt_up_character_lcd_send_cmd>
    18cc:	0005883a 	mov	r2,zero
    18d0:	00000106 	br	18d8 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    18d4:	00bfffc4 	movi	r2,-1
}
    18d8:	dfc00117 	ldw	ra,4(sp)
    18dc:	dc000017 	ldw	r16,0(sp)
    18e0:	dec00204 	addi	sp,sp,8
    18e4:	f800283a 	ret

000018e8 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    18e8:	deffff04 	addi	sp,sp,-4
    18ec:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    18f0:	01400074 	movhi	r5,1
    18f4:	297f9404 	addi	r5,r5,-432
    18f8:	0002c180 	call	2c18 <alt_find_dev>

  return dev;
}
    18fc:	dfc00017 	ldw	ra,0(sp)
    1900:	dec00104 	addi	sp,sp,4
    1904:	f800283a 	ret

00001908 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    1908:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    190c:	1004c03a 	cmpne	r2,r2,zero
    1910:	f800283a 	ret

00001914 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1914:	2080004c 	andi	r2,r4,1
    1918:	f800283a 	ret

0000191c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    191c:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    1920:	1004c03a 	cmpne	r2,r2,zero
    1924:	f800283a 	ret

00001928 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1928:	2004d43a 	srli	r2,r4,16
    192c:	f800283a 	ret

00001930 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    1930:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1934:	1004c03a 	cmpne	r2,r2,zero
    1938:	f800283a 	ret

0000193c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    193c:	20803fcc 	andi	r2,r4,255
    1940:	f800283a 	ret

00001944 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1944:	deffff04 	addi	sp,sp,-4
    1948:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    194c:	01400074 	movhi	r5,1
    1950:	297f9404 	addi	r5,r5,-432
    1954:	0002c180 	call	2c18 <alt_find_dev>

  return dev;
}
    1958:	dfc00017 	ldw	ra,0(sp)
    195c:	dec00104 	addi	sp,sp,4
    1960:	f800283a 	ret

00001964 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1964:	defffe04 	addi	sp,sp,-8
    1968:	dfc00115 	stw	ra,4(sp)
    196c:	dc000015 	stw	r16,0(sp)
    1970:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1974:	81000037 	ldwio	r4,0(r16)
    1978:	00019280 	call	1928 <read_num_bytes_available>
    197c:	10bfffcc 	andi	r2,r2,65535
    1980:	103ffc1e 	bne	r2,zero,1974 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1984:	dfc00117 	ldw	ra,4(sp)
    1988:	dc000017 	ldw	r16,0(sp)
    198c:	dec00204 	addi	sp,sp,8
    1990:	f800283a 	ret

00001994 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1994:	defffd04 	addi	sp,sp,-12
    1998:	dfc00215 	stw	ra,8(sp)
    199c:	dc400115 	stw	r17,4(sp)
    19a0:	dc000015 	stw	r16,0(sp)
    19a4:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    19a8:	20800a17 	ldw	r2,40(r4)
    19ac:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    19b0:	8009883a 	mov	r4,r16
    19b4:	00019300 	call	1930 <read_data_valid>
    19b8:	10803fcc 	andi	r2,r2,255
    19bc:	1000021e 	bne	r2,zero,19c8 <alt_up_ps2_read_data_byte+0x34>
    19c0:	00bfffc4 	movi	r2,-1
    19c4:	00000406 	br	19d8 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    19c8:	8009883a 	mov	r4,r16
    19cc:	000193c0 	call	193c <read_data_byte>
    19d0:	88800005 	stb	r2,0(r17)
    19d4:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    19d8:	dfc00217 	ldw	ra,8(sp)
    19dc:	dc400117 	ldw	r17,4(sp)
    19e0:	dc000017 	ldw	r16,0(sp)
    19e4:	dec00304 	addi	sp,sp,12
    19e8:	f800283a 	ret

000019ec <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    19ec:	defffb04 	addi	sp,sp,-20
    19f0:	dfc00415 	stw	ra,16(sp)
    19f4:	dcc00315 	stw	r19,12(sp)
    19f8:	dc800215 	stw	r18,8(sp)
    19fc:	dc400115 	stw	r17,4(sp)
    1a00:	dc000015 	stw	r16,0(sp)
    1a04:	2025883a 	mov	r18,r4
    1a08:	2827883a 	mov	r19,r5
    1a0c:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1a10:	90800a17 	ldw	r2,40(r18)
    1a14:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1a18:	8009883a 	mov	r4,r16
    1a1c:	00019300 	call	1930 <read_data_valid>
    1a20:	10803fcc 	andi	r2,r2,255
    1a24:	10000526 	beq	r2,zero,1a3c <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1a28:	8009883a 	mov	r4,r16
    1a2c:	000193c0 	call	193c <read_data_byte>
    1a30:	98800005 	stb	r2,0(r19)
    1a34:	0005883a 	mov	r2,zero
    1a38:	00000506 	br	1a50 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1a3c:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1a40:	90800c17 	ldw	r2,48(r18)
    1a44:	103ff226 	beq	r2,zero,1a10 <alt_up_ps2_read_data_byte_timeout+0x24>
    1a48:	147ff12e 	bgeu	r2,r17,1a10 <alt_up_ps2_read_data_byte_timeout+0x24>
    1a4c:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    1a50:	dfc00417 	ldw	ra,16(sp)
    1a54:	dcc00317 	ldw	r19,12(sp)
    1a58:	dc800217 	ldw	r18,8(sp)
    1a5c:	dc400117 	ldw	r17,4(sp)
    1a60:	dc000017 	ldw	r16,0(sp)
    1a64:	dec00504 	addi	sp,sp,20
    1a68:	f800283a 	ret

00001a6c <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1a6c:	deffff04 	addi	sp,sp,-4
    1a70:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1a74:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1a78:	0180010e 	bge	zero,r6,1a80 <alt_up_ps2_read_fd+0x14>
    1a7c:	003fff06 	br	1a7c <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    1a80:	00019ec0 	call	19ec <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1a84:	1005003a 	cmpeq	r2,r2,zero
    1a88:	dfc00017 	ldw	ra,0(sp)
    1a8c:	dec00104 	addi	sp,sp,4
    1a90:	f800283a 	ret

00001a94 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1a94:	defffc04 	addi	sp,sp,-16
    1a98:	dfc00315 	stw	ra,12(sp)
    1a9c:	dc400215 	stw	r17,8(sp)
    1aa0:	dc000115 	stw	r16,4(sp)
    1aa4:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    1aa8:	d8000005 	stb	zero,0(sp)
    1aac:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1ab0:	8009883a 	mov	r4,r16
    1ab4:	d80b883a 	mov	r5,sp
    1ab8:	00019ec0 	call	19ec <alt_up_ps2_read_data_byte_timeout>
    1abc:	1007883a 	mov	r3,r2
		if ( status == 0)
    1ac0:	10803fcc 	andi	r2,r2,255
    1ac4:	1000041e 	bne	r2,zero,1ad8 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    1ac8:	d8800003 	ldbu	r2,0(sp)
    1acc:	147ff81e 	bne	r2,r17,1ab0 <alt_up_ps2_wait_for_ack+0x1c>
    1ad0:	0005883a 	mov	r2,zero
    1ad4:	00000106 	br	1adc <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1ad8:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1adc:	dfc00317 	ldw	ra,12(sp)
    1ae0:	dc400217 	ldw	r17,8(sp)
    1ae4:	dc000117 	ldw	r16,4(sp)
    1ae8:	dec00404 	addi	sp,sp,16
    1aec:	f800283a 	ret

00001af0 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1af0:	deffff04 	addi	sp,sp,-4
    1af4:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1af8:	20800a17 	ldw	r2,40(r4)
    1afc:	29403fcc 	andi	r5,r5,255
    1b00:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1b04:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1b08:	11000137 	ldwio	r4,4(r2)
    1b0c:	000191c0 	call	191c <read_CE_bit>
    1b10:	10803fcc 	andi	r2,r2,255
    1b14:	10000226 	beq	r2,zero,1b20 <alt_up_ps2_write_data_byte+0x30>
    1b18:	00bffec4 	movi	r2,-5
    1b1c:	00000106 	br	1b24 <alt_up_ps2_write_data_byte+0x34>
    1b20:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1b24:	dfc00017 	ldw	ra,0(sp)
    1b28:	dec00104 	addi	sp,sp,4
    1b2c:	f800283a 	ret

00001b30 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1b30:	defffb04 	addi	sp,sp,-20
    1b34:	dfc00415 	stw	ra,16(sp)
    1b38:	dcc00315 	stw	r19,12(sp)
    1b3c:	dc800215 	stw	r18,8(sp)
    1b40:	dc400115 	stw	r17,4(sp)
    1b44:	dc000015 	stw	r16,0(sp)
    1b48:	2827883a 	mov	r19,r5
    1b4c:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1b50:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1b54:	01800216 	blt	zero,r6,1b60 <alt_up_ps2_write_fd+0x30>
    1b58:	0021883a 	mov	r16,zero
    1b5c:	00000806 	br	1b80 <alt_up_ps2_write_fd+0x50>
    1b60:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1b64:	9c05883a 	add	r2,r19,r16
    1b68:	8809883a 	mov	r4,r17
    1b6c:	11400003 	ldbu	r5,0(r2)
    1b70:	0001af00 	call	1af0 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1b74:	1000021e 	bne	r2,zero,1b80 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1b78:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1b7c:	943ff91e 	bne	r18,r16,1b64 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1b80:	8005883a 	mov	r2,r16
    1b84:	dfc00417 	ldw	ra,16(sp)
    1b88:	dcc00317 	ldw	r19,12(sp)
    1b8c:	dc800217 	ldw	r18,8(sp)
    1b90:	dc400117 	ldw	r17,4(sp)
    1b94:	dc000017 	ldw	r16,0(sp)
    1b98:	dec00504 	addi	sp,sp,20
    1b9c:	f800283a 	ret

00001ba0 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1ba0:	defffe04 	addi	sp,sp,-8
    1ba4:	dfc00115 	stw	ra,4(sp)
    1ba8:	dc000015 	stw	r16,0(sp)
    1bac:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1bb0:	29403fcc 	andi	r5,r5,255
    1bb4:	0001af00 	call	1af0 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1bb8:	1000021e 	bne	r2,zero,1bc4 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1bbc:	8009883a 	mov	r4,r16
    1bc0:	0001a940 	call	1a94 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1bc4:	dfc00117 	ldw	ra,4(sp)
    1bc8:	dc000017 	ldw	r16,0(sp)
    1bcc:	dec00204 	addi	sp,sp,8
    1bd0:	f800283a 	ret

00001bd4 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1bd4:	defffd04 	addi	sp,sp,-12
    1bd8:	dfc00215 	stw	ra,8(sp)
    1bdc:	dc000115 	stw	r16,4(sp)
    1be0:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1be4:	01403fc4 	movi	r5,255
    1be8:	0001ba00 	call	1ba0 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1bec:	1000171e 	bne	r2,zero,1c4c <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1bf0:	8009883a 	mov	r4,r16
    1bf4:	d80b883a 	mov	r5,sp
    1bf8:	00019ec0 	call	19ec <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1bfc:	1000131e 	bne	r2,zero,1c4c <alt_up_ps2_init+0x78>
    1c00:	d8c00003 	ldbu	r3,0(sp)
    1c04:	00802a84 	movi	r2,170
    1c08:	1880101e 	bne	r3,r2,1c4c <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1c0c:	8009883a 	mov	r4,r16
    1c10:	d80b883a 	mov	r5,sp
    1c14:	00019ec0 	call	19ec <alt_up_ps2_read_data_byte_timeout>
    1c18:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1c1c:	00bfe304 	movi	r2,-116
    1c20:	1880031e 	bne	r3,r2,1c30 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1c24:	00800044 	movi	r2,1
    1c28:	80800d15 	stw	r2,52(r16)
    1c2c:	00000706 	br	1c4c <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1c30:	1800061e 	bne	r3,zero,1c4c <alt_up_ps2_init+0x78>
    1c34:	d8800003 	ldbu	r2,0(sp)
    1c38:	1000041e 	bne	r2,zero,1c4c <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1c3c:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1c40:	8009883a 	mov	r4,r16
    1c44:	01403d04 	movi	r5,244
    1c48:	0001af00 	call	1af0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1c4c:	dfc00217 	ldw	ra,8(sp)
    1c50:	dc000117 	ldw	r16,4(sp)
    1c54:	dec00304 	addi	sp,sp,12
    1c58:	f800283a 	ret

00001c5c <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1c5c:	20800a17 	ldw	r2,40(r4)
    1c60:	10800104 	addi	r2,r2,4
    1c64:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1c68:	013fff84 	movi	r4,-2
    1c6c:	1906703a 	and	r3,r3,r4
    1c70:	10c00035 	stwio	r3,0(r2)
}
    1c74:	f800283a 	ret

00001c78 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1c78:	20c00a17 	ldw	r3,40(r4)
    1c7c:	18c00104 	addi	r3,r3,4
    1c80:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1c84:	10800054 	ori	r2,r2,1
    1c88:	18800035 	stwio	r2,0(r3)
}
    1c8c:	f800283a 	ret

00001c90 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1c90:	200495ba 	slli	r2,r4,22
}
    1c94:	1005d7fa 	srai	r2,r2,31
    1c98:	f800283a 	ret

00001c9c <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1c9c:	deffff04 	addi	sp,sp,-4
    1ca0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1ca4:	01400074 	movhi	r5,1
    1ca8:	297f9404 	addi	r5,r5,-432
    1cac:	0002c180 	call	2c18 <alt_find_dev>

  return dev;
}
    1cb0:	dfc00017 	ldw	ra,0(sp)
    1cb4:	dec00104 	addi	sp,sp,4
    1cb8:	f800283a 	ret

00001cbc <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1cbc:	defffd04 	addi	sp,sp,-12
    1cc0:	dfc00215 	stw	ra,8(sp)
    1cc4:	dc400115 	stw	r17,4(sp)
    1cc8:	dc000015 	stw	r16,0(sp)
    1ccc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1cd0:	20800a17 	ldw	r2,40(r4)
    1cd4:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1cd8:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1cdc:	8009883a 	mov	r4,r16
    1ce0:	0001c900 	call	1c90 <alt_up_rs232_check_parity>
    1ce4:	88800005 	stb	r2,0(r17)
    1ce8:	8420000c 	andi	r16,r16,32768
    1cec:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    1cf0:	80bfffc4 	addi	r2,r16,-1
    1cf4:	dfc00217 	ldw	ra,8(sp)
    1cf8:	dc400117 	ldw	r17,4(sp)
    1cfc:	dc000017 	ldw	r16,0(sp)
    1d00:	dec00304 	addi	sp,sp,12
    1d04:	f800283a 	ret

00001d08 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1d08:	defff904 	addi	sp,sp,-28
    1d0c:	dfc00615 	stw	ra,24(sp)
    1d10:	dd000515 	stw	r20,20(sp)
    1d14:	dcc00415 	stw	r19,16(sp)
    1d18:	dc800315 	stw	r18,12(sp)
    1d1c:	dc400215 	stw	r17,8(sp)
    1d20:	dc000115 	stw	r16,4(sp)
    1d24:	2821883a 	mov	r16,r5
    1d28:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1d2c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1d30:	3000021e 	bne	r6,zero,1d3c <alt_up_rs232_read_fd+0x34>
    1d34:	0025883a 	mov	r18,zero
    1d38:	00000a06 	br	1d64 <alt_up_rs232_read_fd+0x5c>
    1d3c:	0025883a 	mov	r18,zero
    1d40:	04400044 	movi	r17,1
    1d44:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1d48:	8461883a 	add	r16,r16,r17
    1d4c:	9809883a 	mov	r4,r19
    1d50:	d80d883a 	mov	r6,sp
    1d54:	0001cbc0 	call	1cbc <alt_up_rs232_read_data>
    1d58:	1000021e 	bne	r2,zero,1d64 <alt_up_rs232_read_fd+0x5c>
			count++;
    1d5c:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1d60:	a4bff81e 	bne	r20,r18,1d44 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1d64:	9005883a 	mov	r2,r18
    1d68:	dfc00617 	ldw	ra,24(sp)
    1d6c:	dd000517 	ldw	r20,20(sp)
    1d70:	dcc00417 	ldw	r19,16(sp)
    1d74:	dc800317 	ldw	r18,12(sp)
    1d78:	dc400217 	ldw	r17,8(sp)
    1d7c:	dc000117 	ldw	r16,4(sp)
    1d80:	dec00704 	addi	sp,sp,28
    1d84:	f800283a 	ret

00001d88 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1d88:	20800a17 	ldw	r2,40(r4)
    1d8c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1d90:	1004d43a 	srli	r2,r2,16
    1d94:	f800283a 	ret

00001d98 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1d98:	20800a17 	ldw	r2,40(r4)
    1d9c:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1da0:	29403fcc 	andi	r5,r5,255
    1da4:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1da8:	0005883a 	mov	r2,zero
    1dac:	f800283a 	ret

00001db0 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1db0:	defffb04 	addi	sp,sp,-20
    1db4:	dfc00415 	stw	ra,16(sp)
    1db8:	dcc00315 	stw	r19,12(sp)
    1dbc:	dc800215 	stw	r18,8(sp)
    1dc0:	dc400115 	stw	r17,4(sp)
    1dc4:	dc000015 	stw	r16,0(sp)
    1dc8:	2827883a 	mov	r19,r5
    1dcc:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1dd0:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1dd4:	3000021e 	bne	r6,zero,1de0 <alt_up_rs232_write_fd+0x30>
    1dd8:	0021883a 	mov	r16,zero
    1ddc:	00000806 	br	1e00 <alt_up_rs232_write_fd+0x50>
    1de0:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1de4:	84c5883a 	add	r2,r16,r19
    1de8:	8809883a 	mov	r4,r17
    1dec:	11400003 	ldbu	r5,0(r2)
    1df0:	0001d980 	call	1d98 <alt_up_rs232_write_data>
    1df4:	1000021e 	bne	r2,zero,1e00 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1df8:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1dfc:	943ff91e 	bne	r18,r16,1de4 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    1e00:	8005883a 	mov	r2,r16
    1e04:	dfc00417 	ldw	ra,16(sp)
    1e08:	dcc00317 	ldw	r19,12(sp)
    1e0c:	dc800217 	ldw	r18,8(sp)
    1e10:	dc400117 	ldw	r17,4(sp)
    1e14:	dc000017 	ldw	r16,0(sp)
    1e18:	dec00504 	addi	sp,sp,20
    1e1c:	f800283a 	ret

00001e20 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1e20:	20800a17 	ldw	r2,40(r4)
    1e24:	10800104 	addi	r2,r2,4
    1e28:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1e2c:	013fff84 	movi	r4,-2
    1e30:	1906703a 	and	r3,r3,r4
    1e34:	10c00035 	stwio	r3,0(r2)
}
    1e38:	f800283a 	ret

00001e3c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1e3c:	20c00a17 	ldw	r3,40(r4)
    1e40:	18c00104 	addi	r3,r3,4
    1e44:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1e48:	10800054 	ori	r2,r2,1
    1e4c:	18800035 	stwio	r2,0(r3)
}
    1e50:	f800283a 	ret

00001e54 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1e54:	20800a17 	ldw	r2,40(r4)
    1e58:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1e5c:	10bfffcc 	andi	r2,r2,65535
    1e60:	f800283a 	ret

00001e64 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1e64:	20800c17 	ldw	r2,48(r4)
    1e68:	30801c2e 	bgeu	r6,r2,1edc <alt_up_char_buffer_string+0x78>
    1e6c:	20800d17 	ldw	r2,52(r4)
    1e70:	38801a2e 	bgeu	r7,r2,1edc <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1e74:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1e78:	28c00003 	ldbu	r3,0(r5)
    1e7c:	18803fcc 	andi	r2,r3,255
    1e80:	1080201c 	xori	r2,r2,128
    1e84:	10bfe004 	addi	r2,r2,-128
    1e88:	10001626 	beq	r2,zero,1ee4 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1e8c:	3a04983a 	sll	r2,r7,r8
    1e90:	308f883a 	add	r7,r6,r2
    1e94:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1e98:	20800b17 	ldw	r2,44(r4)
    1e9c:	3885883a 	add	r2,r7,r2
    1ea0:	18c03fcc 	andi	r3,r3,255
    1ea4:	18c0201c 	xori	r3,r3,128
    1ea8:	18ffe004 	addi	r3,r3,-128
    1eac:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1eb0:	320d883a 	add	r6,r6,r8
    1eb4:	20800c17 	ldw	r2,48(r4)
    1eb8:	3080082e 	bgeu	r6,r2,1edc <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1ebc:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1ec0:	28c00003 	ldbu	r3,0(r5)
    1ec4:	18803fcc 	andi	r2,r3,255
    1ec8:	1080201c 	xori	r2,r2,128
    1ecc:	10bfe004 	addi	r2,r2,-128
    1ed0:	10000426 	beq	r2,zero,1ee4 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1ed4:	3a0f883a 	add	r7,r7,r8
    1ed8:	003fef06 	br	1e98 <alt_up_char_buffer_string+0x34>
    1edc:	00bfffc4 	movi	r2,-1
    1ee0:	f800283a 	ret
    1ee4:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1ee8:	f800283a 	ret

00001eec <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1eec:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1ef0:	20800c17 	ldw	r2,48(r4)
    1ef4:	3080112e 	bgeu	r6,r2,1f3c <alt_up_char_buffer_draw+0x50>
    1ef8:	20800d17 	ldw	r2,52(r4)
    1efc:	38800f2e 	bgeu	r7,r2,1f3c <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1f00:	20c00f17 	ldw	r3,60(r4)
    1f04:	30c6703a 	and	r3,r6,r3
    1f08:	20800e17 	ldw	r2,56(r4)
    1f0c:	1886983a 	sll	r3,r3,r2
    1f10:	20801117 	ldw	r2,68(r4)
    1f14:	3884703a 	and	r2,r7,r2
    1f18:	21001017 	ldw	r4,64(r4)
    1f1c:	1104983a 	sll	r2,r2,r4
    1f20:	1886b03a 	or	r3,r3,r2
    1f24:	40800b17 	ldw	r2,44(r8)
    1f28:	1887883a 	add	r3,r3,r2
    1f2c:	28803fcc 	andi	r2,r5,255
    1f30:	18800025 	stbio	r2,0(r3)
    1f34:	0005883a 	mov	r2,zero
    1f38:	f800283a 	ret

	return 0;
    1f3c:	00bfffc4 	movi	r2,-1
}
    1f40:	f800283a 	ret

00001f44 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1f44:	20c00a17 	ldw	r3,40(r4)
    1f48:	00800044 	movi	r2,1
    1f4c:	188000a5 	stbio	r2,2(r3)
    1f50:	20800a17 	ldw	r2,40(r4)
    1f54:	10c00084 	addi	r3,r2,2
    1f58:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1f5c:	18800023 	ldbuio	r2,0(r3)
    1f60:	1104703a 	and	r2,r2,r4
    1f64:	103ffd1e 	bne	r2,zero,1f5c <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1f68:	f800283a 	ret

00001f6c <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1f6c:	deffff04 	addi	sp,sp,-4
    1f70:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1f74:	01400074 	movhi	r5,1
    1f78:	297f9404 	addi	r5,r5,-432
    1f7c:	0002c180 	call	2c18 <alt_find_dev>

  return dev;
}
    1f80:	dfc00017 	ldw	ra,0(sp)
    1f84:	dec00104 	addi	sp,sp,4
    1f88:	f800283a 	ret

00001f8c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1f8c:	defffe04 	addi	sp,sp,-8
    1f90:	dfc00115 	stw	ra,4(sp)
    1f94:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1f98:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1f9c:	80800007 	ldb	r2,0(r16)
    1fa0:	10000a26 	beq	r2,zero,1fcc <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1fa4:	8009883a 	mov	r4,r16
    1fa8:	01400034 	movhi	r5,0
    1fac:	2956e204 	addi	r5,r5,23432
    1fb0:	00035840 	call	3584 <strcmp>
    1fb4:	1000021e 	bne	r2,zero,1fc0 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    1fb8:	80000005 	stb	zero,0(r16)
    1fbc:	00000306 	br	1fcc <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1fc0:	84000044 	addi	r16,r16,1
    1fc4:	80800007 	ldb	r2,0(r16)
    1fc8:	103ff61e 	bne	r2,zero,1fa4 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    1fcc:	dfc00117 	ldw	ra,4(sp)
    1fd0:	dc000017 	ldw	r16,0(sp)
    1fd4:	dec00204 	addi	sp,sp,8
    1fd8:	f800283a 	ret

00001fdc <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1fdc:	da000017 	ldw	r8,0(sp)
    1fe0:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    1fe4:	1800051e 	bne	r3,zero,1ffc <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    1fe8:	29c5383a 	mul	r2,r5,r7
    1fec:	3085883a 	add	r2,r6,r2
    1ff0:	1105883a 	add	r2,r2,r4
    1ff4:	12000025 	stbio	r8,0(r2)
    1ff8:	f800283a 	ret
	else if (mode == 1)
    1ffc:	00800044 	movi	r2,1
    2000:	1880061e 	bne	r3,r2,201c <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    2004:	29c5383a 	mul	r2,r5,r7
    2008:	3085883a 	add	r2,r6,r2
    200c:	1085883a 	add	r2,r2,r2
    2010:	1105883a 	add	r2,r2,r4
    2014:	1200002d 	sthio	r8,0(r2)
    2018:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    201c:	29c5383a 	mul	r2,r5,r7
    2020:	1185883a 	add	r2,r2,r6
    2024:	1085883a 	add	r2,r2,r2
    2028:	1085883a 	add	r2,r2,r2
    202c:	1105883a 	add	r2,r2,r4
    2030:	12000035 	stwio	r8,0(r2)
    2034:	f800283a 	ret

00002038 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    2038:	defff304 	addi	sp,sp,-52
    203c:	dfc00c15 	stw	ra,48(sp)
    2040:	df000b15 	stw	fp,44(sp)
    2044:	ddc00a15 	stw	r23,40(sp)
    2048:	dd800915 	stw	r22,36(sp)
    204c:	dd400815 	stw	r21,32(sp)
    2050:	dd000715 	stw	r20,28(sp)
    2054:	dcc00615 	stw	r19,24(sp)
    2058:	dc800515 	stw	r18,20(sp)
    205c:	dc400415 	stw	r17,16(sp)
    2060:	dc000315 	stw	r16,12(sp)
    2064:	3011883a 	mov	r8,r6
    2068:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    206c:	4987c83a 	sub	r3,r9,r6
    2070:	1800010e 	bge	r3,zero,2078 <alt_up_pixel_buffer_dma_draw_line+0x40>
    2074:	00c7c83a 	sub	r3,zero,r3
    2078:	3945c83a 	sub	r2,r7,r5
    207c:	1000010e 	bge	r2,zero,2084 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    2080:	0085c83a 	sub	r2,zero,r2
    2084:	10c4803a 	cmplt	r2,r2,r3
    2088:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    208c:	20c00e17 	ldw	r3,56(r4)
    2090:	00800044 	movi	r2,1
    2094:	1880021e 	bne	r3,r2,20a0 <alt_up_pixel_buffer_dma_draw_line+0x68>
    2098:	d8000215 	stw	zero,8(sp)
    209c:	00000306 	br	20ac <alt_up_pixel_buffer_dma_draw_line+0x74>
    20a0:	18c00098 	cmpnei	r3,r3,2
    20a4:	18c00044 	addi	r3,r3,1
    20a8:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    20ac:	20800d17 	ldw	r2,52(r4)
    20b0:	1000061e 	bne	r2,zero,20cc <alt_up_pixel_buffer_dma_draw_line+0x94>
    20b4:	20801317 	ldw	r2,76(r4)
    20b8:	d8c00217 	ldw	r3,8(sp)
    20bc:	10c5c83a 	sub	r2,r2,r3
    20c0:	00c00044 	movi	r3,1
    20c4:	18ae983a 	sll	r23,r3,r2
    20c8:	00000106 	br	20d0 <alt_up_pixel_buffer_dma_draw_line+0x98>
    20cc:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    20d0:	d8c00f17 	ldw	r3,60(sp)
    20d4:	00800044 	movi	r2,1
    20d8:	1880021e 	bne	r3,r2,20e4 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    20dc:	25800c17 	ldw	r22,48(r4)
    20e0:	00000106 	br	20e8 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    20e4:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    20e8:	50000326 	beq	r10,zero,20f8 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    20ec:	400d883a 	mov	r6,r8
    20f0:	4827883a 	mov	r19,r9
    20f4:	00000406 	br	2108 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    20f8:	280d883a 	mov	r6,r5
    20fc:	400b883a 	mov	r5,r8
    2100:	3827883a 	mov	r19,r7
    2104:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    2108:	9980060e 	bge	r19,r6,2124 <alt_up_pixel_buffer_dma_draw_line+0xec>
    210c:	9805883a 	mov	r2,r19
    2110:	3027883a 	mov	r19,r6
    2114:	100d883a 	mov	r6,r2
    2118:	3805883a 	mov	r2,r7
    211c:	280f883a 	mov	r7,r5
    2120:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    2124:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    2128:	3969c83a 	sub	r20,r7,r5
    212c:	a000010e 	bge	r20,zero,2134 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    2130:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    2134:	a804d7fa 	srli	r2,r21,31
    2138:	1545883a 	add	r2,r2,r21
    213c:	1005d07a 	srai	r2,r2,1
    2140:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    2144:	29c0020e 	bge	r5,r7,2150 <alt_up_pixel_buffer_dma_draw_line+0x118>
    2148:	07000044 	movi	fp,1
    214c:	00000106 	br	2154 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    2150:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    2154:	50000226 	beq	r10,zero,2160 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    2158:	9980030e 	bge	r19,r6,2168 <alt_up_pixel_buffer_dma_draw_line+0x130>
    215c:	00002506 	br	21f4 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    2160:	9980130e 	bge	r19,r6,21b0 <alt_up_pixel_buffer_dma_draw_line+0x178>
    2164:	00002306 	br	21f4 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    2168:	3021883a 	mov	r16,r6
    216c:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    2170:	d8800e17 	ldw	r2,56(sp)
    2174:	d8800015 	stw	r2,0(sp)
    2178:	d8c00217 	ldw	r3,8(sp)
    217c:	d8c00115 	stw	r3,4(sp)
    2180:	b009883a 	mov	r4,r22
    2184:	b80b883a 	mov	r5,r23
    2188:	900d883a 	mov	r6,r18
    218c:	800f883a 	mov	r7,r16
    2190:	0001fdc0 	call	1fdc <helper_plot_pixel>
			error = error + deltay;
    2194:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    2198:	0440020e 	bge	zero,r17,21a4 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    219c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    21a0:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    21a4:	84000044 	addi	r16,r16,1
    21a8:	9c001216 	blt	r19,r16,21f4 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    21ac:	003ff006 	br	2170 <alt_up_pixel_buffer_dma_draw_line+0x138>
    21b0:	3021883a 	mov	r16,r6
    21b4:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    21b8:	d8800e17 	ldw	r2,56(sp)
    21bc:	d8800015 	stw	r2,0(sp)
    21c0:	d8c00217 	ldw	r3,8(sp)
    21c4:	d8c00115 	stw	r3,4(sp)
    21c8:	b009883a 	mov	r4,r22
    21cc:	b80b883a 	mov	r5,r23
    21d0:	800d883a 	mov	r6,r16
    21d4:	900f883a 	mov	r7,r18
    21d8:	0001fdc0 	call	1fdc <helper_plot_pixel>
			error = error + deltay;
    21dc:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    21e0:	0440020e 	bge	zero,r17,21ec <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    21e4:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    21e8:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    21ec:	84000044 	addi	r16,r16,1
    21f0:	9c3ff10e 	bge	r19,r16,21b8 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    21f4:	dfc00c17 	ldw	ra,48(sp)
    21f8:	df000b17 	ldw	fp,44(sp)
    21fc:	ddc00a17 	ldw	r23,40(sp)
    2200:	dd800917 	ldw	r22,36(sp)
    2204:	dd400817 	ldw	r21,32(sp)
    2208:	dd000717 	ldw	r20,28(sp)
    220c:	dcc00617 	ldw	r19,24(sp)
    2210:	dc800517 	ldw	r18,20(sp)
    2214:	dc400417 	ldw	r17,16(sp)
    2218:	dc000317 	ldw	r16,12(sp)
    221c:	dec00d04 	addi	sp,sp,52
    2220:	f800283a 	ret

00002224 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2224:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    2228:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    222c:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    2230:	3980022e 	bgeu	r7,r6,223c <alt_up_pixel_buffer_dma_draw_vline+0x18>
    2234:	3011883a 	mov	r8,r6
    2238:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    223c:	2a405d2e 	bgeu	r5,r9,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2240:	30805c2e 	bgeu	r6,r2,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2244:	40800136 	bltu	r8,r2,224c <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    2248:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    224c:	d8c00117 	ldw	r3,4(sp)
    2250:	00800044 	movi	r2,1
    2254:	1880021e 	bne	r3,r2,2260 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    2258:	20c00c17 	ldw	r3,48(r4)
    225c:	00000106 	br	2264 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    2260:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2264:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2268:	20800d17 	ldw	r2,52(r4)
    226c:	1000281e 	bne	r2,zero,2310 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2270:	22801317 	ldw	r10,76(r4)
    2274:	3284983a 	sll	r2,r6,r10
    2278:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    227c:	21000e17 	ldw	r4,56(r4)
    2280:	00800044 	movi	r2,1
    2284:	2080091e 	bne	r4,r2,22ac <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    2288:	41804a36 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    228c:	1013883a 	mov	r9,r2
    2290:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    2294:	1945883a 	add	r2,r3,r5
    2298:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    229c:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    22a0:	324d883a 	add	r6,r6,r9
    22a4:	41804336 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22a8:	003ffa06 	br	2294 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    22ac:	00800084 	movi	r2,2
    22b0:	2080021e 	bne	r4,r2,22bc <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    22b4:	4180032e 	bgeu	r8,r6,22c4 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    22b8:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    22bc:	41800a2e 	bgeu	r8,r6,22e8 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    22c0:	f800283a 	ret
    22c4:	294b883a 	add	r5,r5,r5
    22c8:	02400044 	movi	r9,1
    22cc:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    22d0:	28c5883a 	add	r2,r5,r3
    22d4:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    22d8:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    22dc:	324d883a 	add	r6,r6,r9
    22e0:	41803436 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22e4:	003ffa06 	br	22d0 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    22e8:	2945883a 	add	r2,r5,r5
    22ec:	108b883a 	add	r5,r2,r2
    22f0:	02400044 	movi	r9,1
    22f4:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    22f8:	28c5883a 	add	r2,r5,r3
    22fc:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    2300:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2304:	324d883a 	add	r6,r6,r9
    2308:	41802a36 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    230c:	003ffa06 	br	22f8 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2310:	21000e17 	ldw	r4,56(r4)
    2314:	00800044 	movi	r2,1
    2318:	20800b1e 	bne	r4,r2,2348 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    231c:	41802536 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2320:	4809883a 	mov	r4,r9
    2324:	3245383a 	mul	r2,r6,r9
    2328:	1885883a 	add	r2,r3,r2
    232c:	1145883a 	add	r2,r2,r5
    2330:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    2334:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2338:	30cd883a 	add	r6,r6,r3
    233c:	1105883a 	add	r2,r2,r4
    2340:	41801c36 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2344:	003ffb06 	br	2334 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2348:	00800084 	movi	r2,2
    234c:	20800c1e 	bne	r4,r2,2380 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2350:	41801836 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    2354:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    2358:	3105383a 	mul	r2,r6,r4
    235c:	1887883a 	add	r3,r3,r2
    2360:	294b883a 	add	r5,r5,r5
    2364:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2368:	28c5883a 	add	r2,r5,r3
    236c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    2370:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2374:	324d883a 	add	r6,r6,r9
    2378:	41800e36 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    237c:	003ffa06 	br	2368 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2380:	41800c36 	bltu	r8,r6,23b4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    2384:	4a45883a 	add	r2,r9,r9
    2388:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    238c:	3105383a 	mul	r2,r6,r4
    2390:	1887883a 	add	r3,r3,r2
    2394:	2945883a 	add	r2,r5,r5
    2398:	108b883a 	add	r5,r2,r2
    239c:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    23a0:	28c5883a 	add	r2,r5,r3
    23a4:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    23a8:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23ac:	324d883a 	add	r6,r6,r9
    23b0:	41bffb2e 	bgeu	r8,r6,23a0 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    23b4:	f800283a 	ret

000023b8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    23b8:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    23bc:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    23c0:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    23c4:	3140022e 	bgeu	r6,r5,23d0 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    23c8:	2813883a 	mov	r9,r5
    23cc:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    23d0:	2a00552e 	bgeu	r5,r8,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    23d4:	3880542e 	bgeu	r7,r2,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    23d8:	4a000136 	bltu	r9,r8,23e0 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    23dc:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    23e0:	d8c00117 	ldw	r3,4(sp)
    23e4:	00800044 	movi	r2,1
    23e8:	1880021e 	bne	r3,r2,23f4 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    23ec:	21800c17 	ldw	r6,48(r4)
    23f0:	00000106 	br	23f8 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    23f4:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    23f8:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    23fc:	20800d17 	ldw	r2,52(r4)
    2400:	1000231e 	bne	r2,zero,2490 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    2404:	20801317 	ldw	r2,76(r4)
    2408:	3884983a 	sll	r2,r7,r2
    240c:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2410:	21000e17 	ldw	r4,56(r4)
    2414:	00800044 	movi	r2,1
    2418:	2080081e 	bne	r4,r2,243c <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    241c:	49404236 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2420:	3945883a 	add	r2,r7,r5
    2424:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    2428:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    242c:	290b883a 	add	r5,r5,r4
    2430:	1105883a 	add	r2,r2,r4
    2434:	49403c36 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2438:	003ffb06 	br	2428 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    243c:	00800084 	movi	r2,2
    2440:	2080021e 	bne	r4,r2,244c <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    2444:	4940032e 	bgeu	r9,r5,2454 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    2448:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    244c:	4940082e 	bgeu	r9,r5,2470 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    2450:	f800283a 	ret
    2454:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2458:	2945883a 	add	r2,r5,r5
    245c:	11c5883a 	add	r2,r2,r7
    2460:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2464:	290b883a 	add	r5,r5,r4
    2468:	49402f36 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    246c:	003ffa06 	br	2458 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    2470:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2474:	2945883a 	add	r2,r5,r5
    2478:	1085883a 	add	r2,r2,r2
    247c:	11c5883a 	add	r2,r2,r7
    2480:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2484:	290b883a 	add	r5,r5,r4
    2488:	49402736 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    248c:	003ff906 	br	2474 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2490:	21000e17 	ldw	r4,56(r4)
    2494:	00800044 	movi	r2,1
    2498:	20800a1e 	bne	r4,r2,24c4 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    249c:	41c5383a 	mul	r2,r8,r7
    24a0:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    24a4:	49402036 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24a8:	1145883a 	add	r2,r2,r5
    24ac:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    24b0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    24b4:	290b883a 	add	r5,r5,r4
    24b8:	1105883a 	add	r2,r2,r4
    24bc:	49401a36 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24c0:	003ffb06 	br	24b0 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    24c4:	00800084 	movi	r2,2
    24c8:	20800b1e 	bne	r4,r2,24f8 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    24cc:	4205883a 	add	r2,r8,r8
    24d0:	3885383a 	mul	r2,r7,r2
    24d4:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    24d8:	49401336 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24dc:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    24e0:	2945883a 	add	r2,r5,r5
    24e4:	11c5883a 	add	r2,r2,r7
    24e8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    24ec:	290b883a 	add	r5,r5,r4
    24f0:	49400d36 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24f4:	003ffa06 	br	24e0 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    24f8:	4205883a 	add	r2,r8,r8
    24fc:	1085883a 	add	r2,r2,r2
    2500:	3885383a 	mul	r2,r7,r2
    2504:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    2508:	49400736 	bltu	r9,r5,2528 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    250c:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2510:	2945883a 	add	r2,r5,r5
    2514:	1085883a 	add	r2,r2,r2
    2518:	11c5883a 	add	r2,r2,r7
    251c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    2520:	290b883a 	add	r5,r5,r4
    2524:	497ffa2e 	bgeu	r9,r5,2510 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    2528:	f800283a 	ret

0000252c <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    252c:	defff604 	addi	sp,sp,-40
    2530:	dfc00915 	stw	ra,36(sp)
    2534:	dd800815 	stw	r22,32(sp)
    2538:	dd400715 	stw	r21,28(sp)
    253c:	dd000615 	stw	r20,24(sp)
    2540:	dcc00515 	stw	r19,20(sp)
    2544:	dc800415 	stw	r18,16(sp)
    2548:	dc400315 	stw	r17,12(sp)
    254c:	dc000215 	stw	r16,8(sp)
    2550:	2029883a 	mov	r20,r4
    2554:	282d883a 	mov	r22,r5
    2558:	302b883a 	mov	r21,r6
    255c:	3825883a 	mov	r18,r7
    2560:	dcc00a17 	ldw	r19,40(sp)
    2564:	dc000b17 	ldw	r16,44(sp)
    2568:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    256c:	dc000015 	stw	r16,0(sp)
    2570:	dc400115 	stw	r17,4(sp)
    2574:	380d883a 	mov	r6,r7
    2578:	a80f883a 	mov	r7,r21
    257c:	00023b80 	call	23b8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    2580:	dc000015 	stw	r16,0(sp)
    2584:	dc400115 	stw	r17,4(sp)
    2588:	a009883a 	mov	r4,r20
    258c:	b00b883a 	mov	r5,r22
    2590:	900d883a 	mov	r6,r18
    2594:	980f883a 	mov	r7,r19
    2598:	00023b80 	call	23b8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    259c:	dc000015 	stw	r16,0(sp)
    25a0:	dc400115 	stw	r17,4(sp)
    25a4:	a009883a 	mov	r4,r20
    25a8:	b00b883a 	mov	r5,r22
    25ac:	a80d883a 	mov	r6,r21
    25b0:	980f883a 	mov	r7,r19
    25b4:	00022240 	call	2224 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    25b8:	dc000015 	stw	r16,0(sp)
    25bc:	dc400115 	stw	r17,4(sp)
    25c0:	a009883a 	mov	r4,r20
    25c4:	900b883a 	mov	r5,r18
    25c8:	a80d883a 	mov	r6,r21
    25cc:	980f883a 	mov	r7,r19
    25d0:	00022240 	call	2224 <alt_up_pixel_buffer_dma_draw_vline>
}
    25d4:	dfc00917 	ldw	ra,36(sp)
    25d8:	dd800817 	ldw	r22,32(sp)
    25dc:	dd400717 	ldw	r21,28(sp)
    25e0:	dd000617 	ldw	r20,24(sp)
    25e4:	dcc00517 	ldw	r19,20(sp)
    25e8:	dc800417 	ldw	r18,16(sp)
    25ec:	dc400317 	ldw	r17,12(sp)
    25f0:	dc000217 	ldw	r16,8(sp)
    25f4:	dec00a04 	addi	sp,sp,40
    25f8:	f800283a 	ret

000025fc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    25fc:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    2600:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2604:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    2608:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    260c:	3940022e 	bgeu	r7,r5,2618 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    2610:	2811883a 	mov	r8,r5
    2614:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    2618:	5980032e 	bgeu	r11,r6,2628 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    261c:	5805883a 	mov	r2,r11
    2620:	3017883a 	mov	r11,r6
    2624:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    2628:	2a80842e 	bgeu	r5,r10,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
    262c:	30c0832e 	bgeu	r6,r3,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    2630:	42800136 	bltu	r8,r10,2638 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    2634:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2638:	58c00136 	bltu	r11,r3,2640 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    263c:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2640:	d8c00217 	ldw	r3,8(sp)
    2644:	00800044 	movi	r2,1
    2648:	1880021e 	bne	r3,r2,2654 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    264c:	20c00c17 	ldw	r3,48(r4)
    2650:	00000106 	br	2658 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    2654:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2658:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    265c:	20800d17 	ldw	r2,52(r4)
    2660:	1000391e 	bne	r2,zero,2748 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2664:	22801317 	ldw	r10,76(r4)
    2668:	3284983a 	sll	r2,r6,r10
    266c:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2670:	21000e17 	ldw	r4,56(r4)
    2674:	00800044 	movi	r2,1
    2678:	2080101e 	bne	r4,r2,26bc <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    267c:	59806f36 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
    2680:	00000a06 	br	26ac <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2684:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2688:	00800044 	movi	r2,1
    268c:	1887883a 	add	r3,r3,r2
    2690:	2089883a 	add	r4,r4,r2
    2694:	40fffb2e 	bgeu	r8,r3,2684 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2698:	00800044 	movi	r2,1
    269c:	308d883a 	add	r6,r6,r2
    26a0:	59806636 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    26a4:	1284983a 	sll	r2,r2,r10
    26a8:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26ac:	417ffa36 	bltu	r8,r5,2698 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    26b0:	29c9883a 	add	r4,r5,r7
    26b4:	2807883a 	mov	r3,r5
    26b8:	003ff206 	br	2684 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    26bc:	00800084 	movi	r2,2
    26c0:	2080021e 	bne	r4,r2,26cc <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    26c4:	59805d36 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
    26c8:	00000e06 	br	2704 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    26cc:	59805b36 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
    26d0:	00001b06 	br	2740 <alt_up_pixel_buffer_dma_draw_box+0x144>
    26d4:	2807883a 	mov	r3,r5
    26d8:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    26dc:	18c5883a 	add	r2,r3,r3
    26e0:	11c5883a 	add	r2,r2,r7
    26e4:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26e8:	1907883a 	add	r3,r3,r4
    26ec:	40fffb2e 	bgeu	r8,r3,26dc <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    26f0:	00800044 	movi	r2,1
    26f4:	308d883a 	add	r6,r6,r2
    26f8:	59805036 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    26fc:	1284983a 	sll	r2,r2,r10
    2700:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2704:	417ff32e 	bgeu	r8,r5,26d4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    2708:	003ff906 	br	26f0 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    270c:	2807883a 	mov	r3,r5
    2710:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    2714:	18c5883a 	add	r2,r3,r3
    2718:	1085883a 	add	r2,r2,r2
    271c:	11c5883a 	add	r2,r2,r7
    2720:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2724:	1907883a 	add	r3,r3,r4
    2728:	40fffa2e 	bgeu	r8,r3,2714 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    272c:	00800044 	movi	r2,1
    2730:	308d883a 	add	r6,r6,r2
    2734:	59804136 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    2738:	1284983a 	sll	r2,r2,r10
    273c:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2740:	417ff22e 	bgeu	r8,r5,270c <alt_up_pixel_buffer_dma_draw_box+0x110>
    2744:	003ff906 	br	272c <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2748:	21000e17 	ldw	r4,56(r4)
    274c:	00800044 	movi	r2,1
    2750:	2080121e 	bne	r4,r2,279c <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2754:	59803936 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
    2758:	5019883a 	mov	r12,r10
    275c:	3285383a 	mul	r2,r6,r10
    2760:	1885883a 	add	r2,r3,r2
    2764:	114f883a 	add	r7,r2,r5
    2768:	00000806 	br	278c <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    276c:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2770:	00800044 	movi	r2,1
    2774:	1887883a 	add	r3,r3,r2
    2778:	2089883a 	add	r4,r4,r2
    277c:	40fffb2e 	bgeu	r8,r3,276c <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2780:	31800044 	addi	r6,r6,1
    2784:	3b0f883a 	add	r7,r7,r12
    2788:	59802c36 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    278c:	417ffc36 	bltu	r8,r5,2780 <alt_up_pixel_buffer_dma_draw_box+0x184>
    2790:	3809883a 	mov	r4,r7
    2794:	2807883a 	mov	r3,r5
    2798:	003ff406 	br	276c <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    279c:	00800084 	movi	r2,2
    27a0:	2080121e 	bne	r4,r2,27ec <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27a4:	59802536 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    27a8:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    27ac:	3285383a 	mul	r2,r6,r10
    27b0:	1889883a 	add	r4,r3,r2
    27b4:	03000044 	movi	r12,1
    27b8:	00000a06 	br	27e4 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    27bc:	2807883a 	mov	r3,r5
    27c0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    27c4:	18c5883a 	add	r2,r3,r3
    27c8:	1105883a 	add	r2,r2,r4
    27cc:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27d0:	19c7883a 	add	r3,r3,r7
    27d4:	40fffb2e 	bgeu	r8,r3,27c4 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27d8:	330d883a 	add	r6,r6,r12
    27dc:	59801736 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    27e0:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27e4:	417ff52e 	bgeu	r8,r5,27bc <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    27e8:	003ffb06 	br	27d8 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27ec:	59801336 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    27f0:	5285883a 	add	r2,r10,r10
    27f4:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    27f8:	3285383a 	mul	r2,r6,r10
    27fc:	1889883a 	add	r4,r3,r2
    2800:	03000044 	movi	r12,1
    2804:	00000b06 	br	2834 <alt_up_pixel_buffer_dma_draw_box+0x238>
    2808:	2807883a 	mov	r3,r5
    280c:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    2810:	18c5883a 	add	r2,r3,r3
    2814:	1085883a 	add	r2,r2,r2
    2818:	1105883a 	add	r2,r2,r4
    281c:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2820:	19c7883a 	add	r3,r3,r7
    2824:	40fffa2e 	bgeu	r8,r3,2810 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2828:	330d883a 	add	r6,r6,r12
    282c:	59800336 	bltu	r11,r6,283c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    2830:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2834:	417ff42e 	bgeu	r8,r5,2808 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    2838:	003ffb06 	br	2828 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    283c:	f800283a 	ret

00002840 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2840:	00800044 	movi	r2,1
    2844:	2880021e 	bne	r5,r2,2850 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2848:	21c00c17 	ldw	r7,48(r4)
    284c:	00000106 	br	2854 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    2850:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2854:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2858:	20c00e17 	ldw	r3,56(r4)
    285c:	00800084 	movi	r2,2
    2860:	1880021e 	bne	r3,r2,286c <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2864:	294d883a 	add	r6,r5,r5
    2868:	00000206 	br	2874 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    286c:	2945883a 	add	r2,r5,r5
    2870:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2874:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2878:	20800d17 	ldw	r2,52(r4)
    287c:	1000121e 	bne	r2,zero,28c8 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    2880:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2884:	48001a26 	beq	r9,zero,28f0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2888:	0011883a 	mov	r8,zero
    288c:	3014c03a 	cmpne	r10,r6,zero
    2890:	00000b06 	br	28c0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    2894:	0007883a 	mov	r3,zero
    2898:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    289c:	19c5883a 	add	r2,r3,r7
    28a0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    28a4:	1947883a 	add	r3,r3,r5
    28a8:	19bffc36 	bltu	r3,r6,289c <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    28ac:	00800044 	movi	r2,1
    28b0:	4091883a 	add	r8,r8,r2
    28b4:	4a000e26 	beq	r9,r8,28f0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    28b8:	1104983a 	sll	r2,r2,r4
    28bc:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    28c0:	503ff41e 	bne	r10,zero,2894 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    28c4:	003ff906 	br	28ac <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    28c8:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    28cc:	20000826 	beq	r4,zero,28f0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    28d0:	0007883a 	mov	r3,zero
    28d4:	0005883a 	mov	r2,zero
    28d8:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    28dc:	3885883a 	add	r2,r7,r2
    28e0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    28e4:	1945883a 	add	r2,r3,r5
    28e8:	1007883a 	mov	r3,r2
    28ec:	113ffb36 	bltu	r2,r4,28dc <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    28f0:	f800283a 	ret

000028f4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    28f4:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    28f8:	20c00a17 	ldw	r3,40(r4)
    28fc:	00800044 	movi	r2,1
    2900:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    2904:	20800b17 	ldw	r2,44(r4)
    2908:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    290c:	21400b15 	stw	r5,44(r4)
	return 0;
}
    2910:	0005883a 	mov	r2,zero
    2914:	f800283a 	ret

00002918 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    2918:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    291c:	22400f17 	ldw	r9,60(r4)
    2920:	32402a2e 	bgeu	r6,r9,29cc <alt_up_pixel_buffer_dma_draw+0xb4>
    2924:	20801017 	ldw	r2,64(r4)
    2928:	3880282e 	bgeu	r7,r2,29cc <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    292c:	20800d17 	ldw	r2,52(r4)
    2930:	10000a1e 	bne	r2,zero,295c <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    2934:	21001217 	ldw	r4,72(r4)
    2938:	3108703a 	and	r4,r6,r4
    293c:	40801117 	ldw	r2,68(r8)
    2940:	2088983a 	sll	r4,r4,r2
    2944:	40801417 	ldw	r2,80(r8)
    2948:	3884703a 	and	r2,r7,r2
    294c:	40c01317 	ldw	r3,76(r8)
    2950:	10c4983a 	sll	r2,r2,r3
    2954:	2086b03a 	or	r3,r4,r2
    2958:	00000806 	br	297c <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    295c:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    2960:	40c01217 	ldw	r3,72(r8)
    2964:	30c6703a 	and	r3,r6,r3
    2968:	40801417 	ldw	r2,80(r8)
    296c:	3884703a 	and	r2,r7,r2
    2970:	4885383a 	mul	r2,r9,r2
    2974:	10c5883a 	add	r2,r2,r3
    2978:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    297c:	42400e17 	ldw	r9,56(r8)
    2980:	00800044 	movi	r2,1
    2984:	4880051e 	bne	r9,r2,299c <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2988:	40800c17 	ldw	r2,48(r8)
    298c:	1885883a 	add	r2,r3,r2
    2990:	11400025 	stbio	r5,0(r2)
    2994:	0005883a 	mov	r2,zero
    2998:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    299c:	00800084 	movi	r2,2
    29a0:	4880051e 	bne	r9,r2,29b8 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    29a4:	40800c17 	ldw	r2,48(r8)
    29a8:	1885883a 	add	r2,r3,r2
    29ac:	1140002d 	sthio	r5,0(r2)
    29b0:	0005883a 	mov	r2,zero
    29b4:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    29b8:	40800c17 	ldw	r2,48(r8)
    29bc:	1885883a 	add	r2,r3,r2
    29c0:	11400035 	stwio	r5,0(r2)
    29c4:	0005883a 	mov	r2,zero
    29c8:	f800283a 	ret
    29cc:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    29d0:	f800283a 	ret

000029d4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    29d4:	20800a17 	ldw	r2,40(r4)
    29d8:	10800337 	ldwio	r2,12(r2)
}
    29dc:	1080004c 	andi	r2,r2,1
    29e0:	f800283a 	ret

000029e4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    29e4:	00c00104 	movi	r3,4
    29e8:	20800a17 	ldw	r2,40(r4)
    29ec:	10c5883a 	add	r2,r2,r3
    29f0:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    29f4:	20800a17 	ldw	r2,40(r4)
    29f8:	10c5883a 	add	r2,r2,r3
    29fc:	10800037 	ldwio	r2,0(r2)
    2a00:	20800c15 	stw	r2,48(r4)
	return 0;
}
    2a04:	0005883a 	mov	r2,zero
    2a08:	f800283a 	ret

00002a0c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    2a0c:	deffff04 	addi	sp,sp,-4
    2a10:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    2a14:	01400074 	movhi	r5,1
    2a18:	297f9404 	addi	r5,r5,-432
    2a1c:	0002c180 	call	2c18 <alt_find_dev>

  return dev;
}
    2a20:	dfc00017 	ldw	ra,0(sp)
    2a24:	dec00104 	addi	sp,sp,4
    2a28:	f800283a 	ret

00002a2c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2a2c:	008000b4 	movhi	r2,2
    2a30:	10a85704 	addi	r2,r2,-24228
    2a34:	10800017 	ldw	r2,0(r2)
    2a38:	1000021e 	bne	r2,zero,2a44 <alt_alarm_start+0x18>
    2a3c:	00bfde84 	movi	r2,-134
    2a40:	f800283a 	ret
  {
    if (alarm)
    2a44:	2000021e 	bne	r4,zero,2a50 <alt_alarm_start+0x24>
    2a48:	00bffa84 	movi	r2,-22
    2a4c:	f800283a 	ret
    {
      alarm->callback = callback;
    2a50:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2a54:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a58:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a5c:	00bfff84 	movi	r2,-2
    2a60:	3884703a 	and	r2,r7,r2
    2a64:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2a68:	008000b4 	movhi	r2,2
    2a6c:	10a85804 	addi	r2,r2,-24224
    2a70:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2a74:	01800044 	movi	r6,1
    2a78:	1985883a 	add	r2,r3,r6
    2a7c:	2885883a 	add	r2,r5,r2
    2a80:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2a84:	10c0022e 	bgeu	r2,r3,2a90 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2a88:	21800405 	stb	r6,16(r4)
    2a8c:	00000106 	br	2a94 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    2a90:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2a94:	00800074 	movhi	r2,1
    2a98:	10bf9904 	addi	r2,r2,-412
    2a9c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    2aa0:	10c00017 	ldw	r3,0(r2)
    2aa4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    2aa8:	10c00017 	ldw	r3,0(r2)
    2aac:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    2ab0:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ab4:	3801703a 	wrctl	status,r7
    2ab8:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    2abc:	f800283a 	ret

00002ac0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2ac0:	defffd04 	addi	sp,sp,-12
    2ac4:	dfc00215 	stw	ra,8(sp)
    2ac8:	dc400115 	stw	r17,4(sp)
    2acc:	dc000015 	stw	r16,0(sp)
    2ad0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2ad4:	20001c16 	blt	r4,zero,2b48 <close+0x88>
    2ad8:	20c00324 	muli	r3,r4,12
    2adc:	00800074 	movhi	r2,1
    2ae0:	10bd3004 	addi	r2,r2,-2880
    2ae4:	1889883a 	add	r4,r3,r2

  if (fd)
    2ae8:	20001726 	beq	r4,zero,2b48 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2aec:	20800017 	ldw	r2,0(r4)
    2af0:	10800417 	ldw	r2,16(r2)
    2af4:	10002126 	beq	r2,zero,2b7c <close+0xbc>
    2af8:	103ee83a 	callr	r2
    2afc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2b00:	8009883a 	mov	r4,r16
    2b04:	0002fdc0 	call	2fdc <alt_release_fd>
    if (rval < 0)
    2b08:	88000216 	blt	r17,zero,2b14 <close+0x54>
    2b0c:	0005883a 	mov	r2,zero
    2b10:	00001d06 	br	2b88 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2b14:	00800074 	movhi	r2,1
    2b18:	10bf9704 	addi	r2,r2,-420
    2b1c:	10800017 	ldw	r2,0(r2)
    2b20:	1000031e 	bne	r2,zero,2b30 <close+0x70>
    2b24:	00c000b4 	movhi	r3,2
    2b28:	18e85904 	addi	r3,r3,-24220
    2b2c:	00000206 	br	2b38 <close+0x78>
    2b30:	103ee83a 	callr	r2
    2b34:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2b38:	0445c83a 	sub	r2,zero,r17
    2b3c:	18800015 	stw	r2,0(r3)
    2b40:	00bfffc4 	movi	r2,-1
    2b44:	00001006 	br	2b88 <close+0xc8>
    2b48:	00800074 	movhi	r2,1
    2b4c:	10bf9704 	addi	r2,r2,-420
    2b50:	10800017 	ldw	r2,0(r2)
    2b54:	1000031e 	bne	r2,zero,2b64 <close+0xa4>
    2b58:	00c000b4 	movhi	r3,2
    2b5c:	18e85904 	addi	r3,r3,-24220
    2b60:	00000206 	br	2b6c <close+0xac>
    2b64:	103ee83a 	callr	r2
    2b68:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2b6c:	00801444 	movi	r2,81
    2b70:	18800015 	stw	r2,0(r3)
    2b74:	00bfffc4 	movi	r2,-1
    2b78:	00000306 	br	2b88 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2b7c:	8009883a 	mov	r4,r16
    2b80:	0002fdc0 	call	2fdc <alt_release_fd>
    2b84:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2b88:	dfc00217 	ldw	ra,8(sp)
    2b8c:	dc400117 	ldw	r17,4(sp)
    2b90:	dc000017 	ldw	r16,0(sp)
    2b94:	dec00304 	addi	sp,sp,12
    2b98:	f800283a 	ret

00002b9c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2b9c:	f800283a 	ret

00002ba0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2ba0:	3005883a 	mov	r2,r6
    2ba4:	f800283a 	ret

00002ba8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2ba8:	deffff04 	addi	sp,sp,-4
    2bac:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2bb0:	20000226 	beq	r4,zero,2bbc <alt_dev_llist_insert+0x14>
    2bb4:	20800217 	ldw	r2,8(r4)
    2bb8:	10000d1e 	bne	r2,zero,2bf0 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2bbc:	00800074 	movhi	r2,1
    2bc0:	10bf9704 	addi	r2,r2,-420
    2bc4:	10800017 	ldw	r2,0(r2)
    2bc8:	1000031e 	bne	r2,zero,2bd8 <alt_dev_llist_insert+0x30>
    2bcc:	00c000b4 	movhi	r3,2
    2bd0:	18e85904 	addi	r3,r3,-24220
    2bd4:	00000206 	br	2be0 <alt_dev_llist_insert+0x38>
    2bd8:	103ee83a 	callr	r2
    2bdc:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    2be0:	00800584 	movi	r2,22
    2be4:	18800015 	stw	r2,0(r3)
    2be8:	00bffa84 	movi	r2,-22
    2bec:	00000706 	br	2c0c <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2bf0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2bf4:	28800017 	ldw	r2,0(r5)
    2bf8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2bfc:	28800017 	ldw	r2,0(r5)
    2c00:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2c04:	29000015 	stw	r4,0(r5)
    2c08:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2c0c:	dfc00017 	ldw	ra,0(sp)
    2c10:	dec00104 	addi	sp,sp,4
    2c14:	f800283a 	ret

00002c18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2c18:	defffb04 	addi	sp,sp,-20
    2c1c:	dfc00415 	stw	ra,16(sp)
    2c20:	dcc00315 	stw	r19,12(sp)
    2c24:	dc800215 	stw	r18,8(sp)
    2c28:	dc400115 	stw	r17,4(sp)
    2c2c:	dc000015 	stw	r16,0(sp)
    2c30:	2027883a 	mov	r19,r4
    2c34:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2c38:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2c3c:	00036400 	call	3640 <strlen>
    2c40:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2c44:	8c000726 	beq	r17,r16,2c64 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2c48:	89000217 	ldw	r4,8(r17)
    2c4c:	980b883a 	mov	r5,r19
    2c50:	900d883a 	mov	r6,r18
    2c54:	00032840 	call	3284 <memcmp>
    2c58:	10000326 	beq	r2,zero,2c68 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2c5c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2c60:	847ff91e 	bne	r16,r17,2c48 <alt_find_dev+0x30>
    2c64:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2c68:	8805883a 	mov	r2,r17
    2c6c:	dfc00417 	ldw	ra,16(sp)
    2c70:	dcc00317 	ldw	r19,12(sp)
    2c74:	dc800217 	ldw	r18,8(sp)
    2c78:	dc400117 	ldw	r17,4(sp)
    2c7c:	dc000017 	ldw	r16,0(sp)
    2c80:	dec00504 	addi	sp,sp,20
    2c84:	f800283a 	ret

00002c88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2c88:	deffff04 	addi	sp,sp,-4
    2c8c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2c90:	0009883a 	mov	r4,zero
    2c94:	01440004 	movi	r5,4096
    2c98:	00032100 	call	3210 <alt_icache_flush>
#endif
}
    2c9c:	dfc00017 	ldw	ra,0(sp)
    2ca0:	dec00104 	addi	sp,sp,4
    2ca4:	f800283a 	ret

00002ca8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2ca8:	defffe04 	addi	sp,sp,-8
    2cac:	dfc00115 	stw	ra,4(sp)
    2cb0:	dc000015 	stw	r16,0(sp)
    2cb4:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2cb8:	2809883a 	mov	r4,r5
    2cbc:	300b883a 	mov	r5,r6
    2cc0:	380d883a 	mov	r6,r7
    2cc4:	0002e600 	call	2e60 <open>
    2cc8:	1009883a 	mov	r4,r2

  if (old >= 0)
    2ccc:	10000b16 	blt	r2,zero,2cfc <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    2cd0:	10c00324 	muli	r3,r2,12
    2cd4:	00800074 	movhi	r2,1
    2cd8:	10bd3004 	addi	r2,r2,-2880
    2cdc:	1887883a 	add	r3,r3,r2
    2ce0:	18800017 	ldw	r2,0(r3)
    2ce4:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2ce8:	18800117 	ldw	r2,4(r3)
    2cec:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2cf0:	18800217 	ldw	r2,8(r3)
    2cf4:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    2cf8:	0002fdc0 	call	2fdc <alt_release_fd>
  }
} 
    2cfc:	dfc00117 	ldw	ra,4(sp)
    2d00:	dc000017 	ldw	r16,0(sp)
    2d04:	dec00204 	addi	sp,sp,8
    2d08:	f800283a 	ret

00002d0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2d0c:	defffa04 	addi	sp,sp,-24
    2d10:	dfc00515 	stw	ra,20(sp)
    2d14:	dd000415 	stw	r20,16(sp)
    2d18:	dcc00315 	stw	r19,12(sp)
    2d1c:	dc800215 	stw	r18,8(sp)
    2d20:	dc400115 	stw	r17,4(sp)
    2d24:	dc000015 	stw	r16,0(sp)
    2d28:	2005883a 	mov	r2,r4
    2d2c:	2827883a 	mov	r19,r5
    2d30:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2d34:	04000074 	movhi	r16,1
    2d38:	843d3304 	addi	r16,r16,-2868
    2d3c:	04800044 	movi	r18,1
    2d40:	04407fc4 	movi	r17,511
    2d44:	8009883a 	mov	r4,r16
    2d48:	100b883a 	mov	r5,r2
    2d4c:	900d883a 	mov	r6,r18
    2d50:	880f883a 	mov	r7,r17
    2d54:	0002ca80 	call	2ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2d58:	843ffd04 	addi	r16,r16,-12
    2d5c:	8009883a 	mov	r4,r16
    2d60:	980b883a 	mov	r5,r19
    2d64:	000d883a 	mov	r6,zero
    2d68:	880f883a 	mov	r7,r17
    2d6c:	0002ca80 	call	2ca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2d70:	81000604 	addi	r4,r16,24
    2d74:	a00b883a 	mov	r5,r20
    2d78:	900d883a 	mov	r6,r18
    2d7c:	880f883a 	mov	r7,r17
    2d80:	0002ca80 	call	2ca8 <alt_open_fd>
}  
    2d84:	dfc00517 	ldw	ra,20(sp)
    2d88:	dd000417 	ldw	r20,16(sp)
    2d8c:	dcc00317 	ldw	r19,12(sp)
    2d90:	dc800217 	ldw	r18,8(sp)
    2d94:	dc400117 	ldw	r17,4(sp)
    2d98:	dc000017 	ldw	r16,0(sp)
    2d9c:	dec00604 	addi	sp,sp,24
    2da0:	f800283a 	ret

00002da4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2da4:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2da8:	008007c4 	movi	r2,31
    2dac:	1100022e 	bgeu	r2,r4,2db8 <alt_irq_register+0x14>
    2db0:	00bffa84 	movi	r2,-22
    2db4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2db8:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2dbc:	013fff84 	movi	r4,-2
    2dc0:	4104703a 	and	r2,r8,r4
    2dc4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2dc8:	380490fa 	slli	r2,r7,3
    2dcc:	00c000b4 	movhi	r3,2
    2dd0:	18e86704 	addi	r3,r3,-24164
    2dd4:	10c5883a 	add	r2,r2,r3
    2dd8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2ddc:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2de0:	30000e26 	beq	r6,zero,2e1c <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2de4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2de8:	2904703a 	and	r2,r5,r4
    2dec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2df0:	00c000b4 	movhi	r3,2
    2df4:	18e85604 	addi	r3,r3,-24232
    2df8:	19000017 	ldw	r4,0(r3)
    2dfc:	00800044 	movi	r2,1
    2e00:	11c4983a 	sll	r2,r2,r7
    2e04:	1104b03a 	or	r2,r2,r4
    2e08:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e0c:	18800017 	ldw	r2,0(r3)
    2e10:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e14:	2801703a 	wrctl	status,r5
    2e18:	00000e06 	br	2e54 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e1c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e20:	00bfff84 	movi	r2,-2
    2e24:	2884703a 	and	r2,r5,r2
    2e28:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2e2c:	00c000b4 	movhi	r3,2
    2e30:	18e85604 	addi	r3,r3,-24232
    2e34:	19000017 	ldw	r4,0(r3)
    2e38:	00bfff84 	movi	r2,-2
    2e3c:	11c4183a 	rol	r2,r2,r7
    2e40:	1104703a 	and	r2,r2,r4
    2e44:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e48:	18800017 	ldw	r2,0(r3)
    2e4c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e50:	2801703a 	wrctl	status,r5
    2e54:	4001703a 	wrctl	status,r8
    2e58:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2e5c:	f800283a 	ret

00002e60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2e60:	defff904 	addi	sp,sp,-28
    2e64:	dfc00615 	stw	ra,24(sp)
    2e68:	dd400515 	stw	r21,20(sp)
    2e6c:	dd000415 	stw	r20,16(sp)
    2e70:	dcc00315 	stw	r19,12(sp)
    2e74:	dc800215 	stw	r18,8(sp)
    2e78:	dc400115 	stw	r17,4(sp)
    2e7c:	dc000015 	stw	r16,0(sp)
    2e80:	2029883a 	mov	r20,r4
    2e84:	2827883a 	mov	r19,r5
    2e88:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2e8c:	01400074 	movhi	r5,1
    2e90:	297f9404 	addi	r5,r5,-432
    2e94:	0002c180 	call	2c18 <alt_find_dev>
    2e98:	1021883a 	mov	r16,r2
    2e9c:	10000226 	beq	r2,zero,2ea8 <open+0x48>
    2ea0:	0025883a 	mov	r18,zero
    2ea4:	00000a06 	br	2ed0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2ea8:	a009883a 	mov	r4,r20
    2eac:	00030e80 	call	30e8 <alt_find_file>
    2eb0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2eb4:	1000051e 	bne	r2,zero,2ecc <open+0x6c>
    2eb8:	047fffc4 	movi	r17,-1
    2ebc:	043ffb44 	movi	r16,-19
    2ec0:	00002b06 	br	2f70 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ec4:	043ffcc4 	movi	r16,-13
    2ec8:	00002906 	br	2f70 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2ecc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    2ed0:	8009883a 	mov	r4,r16
    2ed4:	00031a40 	call	31a4 <alt_get_fd>
    2ed8:	1023883a 	mov	r17,r2
    2edc:	10003316 	blt	r2,zero,2fac <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2ee0:	10800324 	muli	r2,r2,12
    2ee4:	02000074 	movhi	r8,1
    2ee8:	423d3004 	addi	r8,r8,-2880
    2eec:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2ef0:	00900034 	movhi	r2,16384
    2ef4:	10bfffc4 	addi	r2,r2,-1
    2ef8:	9886703a 	and	r3,r19,r2
    2efc:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2f00:	9004c03a 	cmpne	r2,r18,zero
    2f04:	1000121e 	bne	r2,zero,2f50 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2f08:	18900034 	orhi	r2,r3,16384
    2f0c:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2f10:	00800074 	movhi	r2,1
    2f14:	10bf9604 	addi	r2,r2,-424
    2f18:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2f1c:	21800017 	ldw	r6,0(r4)
    2f20:	000b883a 	mov	r5,zero
    2f24:	4007883a 	mov	r3,r8
    2f28:	02400044 	movi	r9,1
    2f2c:	02000304 	movi	r8,12
    2f30:	18800017 	ldw	r2,0(r3)
    2f34:	1180031e 	bne	r2,r6,2f44 <open+0xe4>
    2f38:	18800217 	ldw	r2,8(r3)
    2f3c:	1000010e 	bge	r2,zero,2f44 <open+0xe4>
    2f40:	193fe01e 	bne	r3,r4,2ec4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2f44:	2a4b883a 	add	r5,r5,r9
    2f48:	1a07883a 	add	r3,r3,r8
    2f4c:	397ff82e 	bgeu	r7,r5,2f30 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2f50:	80800317 	ldw	r2,12(r16)
    2f54:	10001726 	beq	r2,zero,2fb4 <open+0x154>
    2f58:	a00b883a 	mov	r5,r20
    2f5c:	980d883a 	mov	r6,r19
    2f60:	a80f883a 	mov	r7,r21
    2f64:	103ee83a 	callr	r2
    2f68:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2f6c:	1000110e 	bge	r2,zero,2fb4 <open+0x154>
  {
    alt_release_fd (index);  
    2f70:	8809883a 	mov	r4,r17
    2f74:	0002fdc0 	call	2fdc <alt_release_fd>
    2f78:	00800074 	movhi	r2,1
    2f7c:	10bf9704 	addi	r2,r2,-420
    2f80:	10800017 	ldw	r2,0(r2)
    2f84:	1000031e 	bne	r2,zero,2f94 <open+0x134>
    2f88:	00c000b4 	movhi	r3,2
    2f8c:	18e85904 	addi	r3,r3,-24220
    2f90:	00000206 	br	2f9c <open+0x13c>
    2f94:	103ee83a 	callr	r2
    2f98:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2f9c:	0405c83a 	sub	r2,zero,r16
    2fa0:	18800015 	stw	r2,0(r3)
    2fa4:	047fffc4 	movi	r17,-1
    2fa8:	00000206 	br	2fb4 <open+0x154>
    2fac:	1021883a 	mov	r16,r2
    2fb0:	003fef06 	br	2f70 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2fb4:	8805883a 	mov	r2,r17
    2fb8:	dfc00617 	ldw	ra,24(sp)
    2fbc:	dd400517 	ldw	r21,20(sp)
    2fc0:	dd000417 	ldw	r20,16(sp)
    2fc4:	dcc00317 	ldw	r19,12(sp)
    2fc8:	dc800217 	ldw	r18,8(sp)
    2fcc:	dc400117 	ldw	r17,4(sp)
    2fd0:	dc000017 	ldw	r16,0(sp)
    2fd4:	dec00704 	addi	sp,sp,28
    2fd8:	f800283a 	ret

00002fdc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2fdc:	00800084 	movi	r2,2
    2fe0:	1100060e 	bge	r2,r4,2ffc <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2fe4:	20800324 	muli	r2,r4,12
    2fe8:	00c00074 	movhi	r3,1
    2fec:	18fd3004 	addi	r3,r3,-2880
    2ff0:	10c5883a 	add	r2,r2,r3
    2ff4:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    2ff8:	10000015 	stw	zero,0(r2)
    2ffc:	f800283a 	ret

00003000 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3000:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3004:	00bfff84 	movi	r2,-2
    3008:	2884703a 	and	r2,r5,r2
    300c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3010:	20c00017 	ldw	r3,0(r4)
    3014:	20800117 	ldw	r2,4(r4)
    3018:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    301c:	20800117 	ldw	r2,4(r4)
    3020:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3024:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    3028:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    302c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    3030:	f800283a 	ret

00003034 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3034:	defffd04 	addi	sp,sp,-12
    3038:	dfc00215 	stw	ra,8(sp)
    303c:	dc400115 	stw	r17,4(sp)
    3040:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3044:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3048:	d088c617 	ldw	r2,8984(gp)
    304c:	10800044 	addi	r2,r2,1
    3050:	d088c615 	stw	r2,8984(gp)
    3054:	00001b06 	br	30c4 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    3058:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    305c:	80800403 	ldbu	r2,16(r16)
    3060:	10000326 	beq	r2,zero,3070 <alt_tick+0x3c>
    3064:	d088c617 	ldw	r2,8984(gp)
    3068:	1000011e 	bne	r2,zero,3070 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    306c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3070:	d0c8c617 	ldw	r3,8984(gp)
    3074:	80800217 	ldw	r2,8(r16)
    3078:	18801136 	bltu	r3,r2,30c0 <alt_tick+0x8c>
    307c:	80800403 	ldbu	r2,16(r16)
    3080:	10000f1e 	bne	r2,zero,30c0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    3084:	80800317 	ldw	r2,12(r16)
    3088:	81000517 	ldw	r4,20(r16)
    308c:	103ee83a 	callr	r2
    3090:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3094:	1000031e 	bne	r2,zero,30a4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    3098:	8009883a 	mov	r4,r16
    309c:	00030000 	call	3000 <alt_alarm_stop>
    30a0:	00000706 	br	30c0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    30a4:	80800217 	ldw	r2,8(r16)
    30a8:	1885883a 	add	r2,r3,r2
    30ac:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    30b0:	d0c8c617 	ldw	r3,8984(gp)
    30b4:	10c0022e 	bgeu	r2,r3,30c0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    30b8:	00800044 	movi	r2,1
    30bc:	80800405 	stb	r2,16(r16)
    30c0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    30c4:	d0a00704 	addi	r2,gp,-32740
    30c8:	80bfe31e 	bne	r16,r2,3058 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    30cc:	dfc00217 	ldw	ra,8(sp)
    30d0:	dc400117 	ldw	r17,4(sp)
    30d4:	dc000017 	ldw	r16,0(sp)
    30d8:	dec00304 	addi	sp,sp,12
    30dc:	f800283a 	ret

000030e0 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    30e0:	000170fa 	wrctl	ienable,zero
}
    30e4:	f800283a 	ret

000030e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    30e8:	defff904 	addi	sp,sp,-28
    30ec:	dfc00615 	stw	ra,24(sp)
    30f0:	dd400515 	stw	r21,20(sp)
    30f4:	dd000415 	stw	r20,16(sp)
    30f8:	dcc00315 	stw	r19,12(sp)
    30fc:	dc800215 	stw	r18,8(sp)
    3100:	dc400115 	stw	r17,4(sp)
    3104:	dc000015 	stw	r16,0(sp)
    3108:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    310c:	00800074 	movhi	r2,1
    3110:	10bf9204 	addi	r2,r2,-440
    3114:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3118:	102b883a 	mov	r21,r2
    311c:	88801626 	beq	r17,r2,3178 <alt_find_file+0x90>
    3120:	053fffc4 	movi	r20,-1
    3124:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    3128:	8c000217 	ldw	r16,8(r17)
    312c:	8009883a 	mov	r4,r16
    3130:	00036400 	call	3640 <strlen>
    3134:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    3138:	8085883a 	add	r2,r16,r2
    313c:	1505883a 	add	r2,r2,r20
    3140:	10800007 	ldb	r2,0(r2)
    3144:	14c0011e 	bne	r2,r19,314c <alt_find_file+0x64>
    {
      len -= 1;
    3148:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    314c:	1c85883a 	add	r2,r3,r18
    3150:	10800007 	ldb	r2,0(r2)
    3154:	14c00126 	beq	r2,r19,315c <alt_find_file+0x74>
    3158:	1000051e 	bne	r2,zero,3170 <alt_find_file+0x88>
    315c:	8009883a 	mov	r4,r16
    3160:	900b883a 	mov	r5,r18
    3164:	180d883a 	mov	r6,r3
    3168:	00032840 	call	3284 <memcmp>
    316c:	10000326 	beq	r2,zero,317c <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    3170:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3174:	8d7fec1e 	bne	r17,r21,3128 <alt_find_file+0x40>
    3178:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    317c:	8805883a 	mov	r2,r17
    3180:	dfc00617 	ldw	ra,24(sp)
    3184:	dd400517 	ldw	r21,20(sp)
    3188:	dd000417 	ldw	r20,16(sp)
    318c:	dcc00317 	ldw	r19,12(sp)
    3190:	dc800217 	ldw	r18,8(sp)
    3194:	dc400117 	ldw	r17,4(sp)
    3198:	dc000017 	ldw	r16,0(sp)
    319c:	dec00704 	addi	sp,sp,28
    31a0:	f800283a 	ret

000031a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    31a4:	000b883a 	mov	r5,zero
    31a8:	00c00074 	movhi	r3,1
    31ac:	18fd3004 	addi	r3,r3,-2880
    31b0:	02000304 	movi	r8,12
    31b4:	02400074 	movhi	r9,1
    31b8:	4a7f9604 	addi	r9,r9,-424
    31bc:	01c00044 	movi	r7,1
    31c0:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    31c4:	18800017 	ldw	r2,0(r3)
    31c8:	10000c1e 	bne	r2,zero,31fc <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    31cc:	2a05383a 	mul	r2,r5,r8
    31d0:	00c00074 	movhi	r3,1
    31d4:	18fd3004 	addi	r3,r3,-2880
    31d8:	10c5883a 	add	r2,r2,r3
    31dc:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    31e0:	48800017 	ldw	r2,0(r9)
    31e4:	11400216 	blt	r2,r5,31f0 <alt_get_fd+0x4c>
    31e8:	2805883a 	mov	r2,r5
    31ec:	f800283a 	ret
      {
        alt_max_fd = i;
    31f0:	49400015 	stw	r5,0(r9)
    31f4:	2805883a 	mov	r2,r5
    31f8:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    31fc:	29cb883a 	add	r5,r5,r7
    3200:	1a07883a 	add	r3,r3,r8
    3204:	29bfef1e 	bne	r5,r6,31c4 <alt_get_fd+0x20>
    3208:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    320c:	f800283a 	ret

00003210 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    3210:	2007883a 	mov	r3,r4
    3214:	00840004 	movi	r2,4096
    3218:	1140012e 	bgeu	r2,r5,3220 <alt_icache_flush+0x10>
    321c:	100b883a 	mov	r5,r2
    3220:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3224:	1940042e 	bgeu	r3,r5,3238 <alt_icache_flush+0x28>
    3228:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    322c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3230:	1887883a 	add	r3,r3,r2
    3234:	197ffd36 	bltu	r3,r5,322c <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3238:	208007cc 	andi	r2,r4,31
    323c:	10000126 	beq	r2,zero,3244 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3240:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3244:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3248:	f800283a 	ret

0000324c <exit>:
    324c:	defffe04 	addi	sp,sp,-8
    3250:	000b883a 	mov	r5,zero
    3254:	dc000015 	stw	r16,0(sp)
    3258:	dfc00115 	stw	ra,4(sp)
    325c:	2021883a 	mov	r16,r4
    3260:	00039400 	call	3940 <__call_exitprocs>
    3264:	00800074 	movhi	r2,1
    3268:	10bf9c04 	addi	r2,r2,-400
    326c:	11000017 	ldw	r4,0(r2)
    3270:	20800f17 	ldw	r2,60(r4)
    3274:	10000126 	beq	r2,zero,327c <exit+0x30>
    3278:	103ee83a 	callr	r2
    327c:	8009883a 	mov	r4,r16
    3280:	00054a80 	call	54a8 <_exit>

00003284 <memcmp>:
    3284:	00c000c4 	movi	r3,3
    3288:	1980032e 	bgeu	r3,r6,3298 <memcmp+0x14>
    328c:	2144b03a 	or	r2,r4,r5
    3290:	10c4703a 	and	r2,r2,r3
    3294:	10000f26 	beq	r2,zero,32d4 <memcmp+0x50>
    3298:	31ffffc4 	addi	r7,r6,-1
    329c:	3000061e 	bne	r6,zero,32b8 <memcmp+0x34>
    32a0:	00000a06 	br	32cc <memcmp+0x48>
    32a4:	39ffffc4 	addi	r7,r7,-1
    32a8:	00bfffc4 	movi	r2,-1
    32ac:	21000044 	addi	r4,r4,1
    32b0:	29400044 	addi	r5,r5,1
    32b4:	38800526 	beq	r7,r2,32cc <memcmp+0x48>
    32b8:	20c00003 	ldbu	r3,0(r4)
    32bc:	28800003 	ldbu	r2,0(r5)
    32c0:	18bff826 	beq	r3,r2,32a4 <memcmp+0x20>
    32c4:	1885c83a 	sub	r2,r3,r2
    32c8:	f800283a 	ret
    32cc:	0005883a 	mov	r2,zero
    32d0:	f800283a 	ret
    32d4:	180f883a 	mov	r7,r3
    32d8:	20c00017 	ldw	r3,0(r4)
    32dc:	28800017 	ldw	r2,0(r5)
    32e0:	18bfed1e 	bne	r3,r2,3298 <memcmp+0x14>
    32e4:	31bfff04 	addi	r6,r6,-4
    32e8:	21000104 	addi	r4,r4,4
    32ec:	29400104 	addi	r5,r5,4
    32f0:	39bff936 	bltu	r7,r6,32d8 <memcmp+0x54>
    32f4:	003fe806 	br	3298 <memcmp+0x14>

000032f8 <memcpy>:
    32f8:	01c003c4 	movi	r7,15
    32fc:	2007883a 	mov	r3,r4
    3300:	3980032e 	bgeu	r7,r6,3310 <memcpy+0x18>
    3304:	2904b03a 	or	r2,r5,r4
    3308:	108000cc 	andi	r2,r2,3
    330c:	10000926 	beq	r2,zero,3334 <memcpy+0x3c>
    3310:	30000626 	beq	r6,zero,332c <memcpy+0x34>
    3314:	30cd883a 	add	r6,r6,r3
    3318:	28800003 	ldbu	r2,0(r5)
    331c:	29400044 	addi	r5,r5,1
    3320:	18800005 	stb	r2,0(r3)
    3324:	18c00044 	addi	r3,r3,1
    3328:	30fffb1e 	bne	r6,r3,3318 <memcpy+0x20>
    332c:	2005883a 	mov	r2,r4
    3330:	f800283a 	ret
    3334:	3811883a 	mov	r8,r7
    3338:	200f883a 	mov	r7,r4
    333c:	28c00017 	ldw	r3,0(r5)
    3340:	31bffc04 	addi	r6,r6,-16
    3344:	38c00015 	stw	r3,0(r7)
    3348:	28800117 	ldw	r2,4(r5)
    334c:	38800115 	stw	r2,4(r7)
    3350:	28c00217 	ldw	r3,8(r5)
    3354:	38c00215 	stw	r3,8(r7)
    3358:	28800317 	ldw	r2,12(r5)
    335c:	29400404 	addi	r5,r5,16
    3360:	38800315 	stw	r2,12(r7)
    3364:	39c00404 	addi	r7,r7,16
    3368:	41bff436 	bltu	r8,r6,333c <memcpy+0x44>
    336c:	008000c4 	movi	r2,3
    3370:	1180072e 	bgeu	r2,r6,3390 <memcpy+0x98>
    3374:	1007883a 	mov	r3,r2
    3378:	28800017 	ldw	r2,0(r5)
    337c:	31bfff04 	addi	r6,r6,-4
    3380:	29400104 	addi	r5,r5,4
    3384:	38800015 	stw	r2,0(r7)
    3388:	39c00104 	addi	r7,r7,4
    338c:	19bffa36 	bltu	r3,r6,3378 <memcpy+0x80>
    3390:	3807883a 	mov	r3,r7
    3394:	003fde06 	br	3310 <memcpy+0x18>

00003398 <putc>:
    3398:	defffc04 	addi	sp,sp,-16
    339c:	dc800215 	stw	r18,8(sp)
    33a0:	04800074 	movhi	r18,1
    33a4:	94bf9b04 	addi	r18,r18,-404
    33a8:	90c00017 	ldw	r3,0(r18)
    33ac:	dc400115 	stw	r17,4(sp)
    33b0:	dc000015 	stw	r16,0(sp)
    33b4:	dfc00315 	stw	ra,12(sp)
    33b8:	2023883a 	mov	r17,r4
    33bc:	2821883a 	mov	r16,r5
    33c0:	18000226 	beq	r3,zero,33cc <putc+0x34>
    33c4:	18800e17 	ldw	r2,56(r3)
    33c8:	10001126 	beq	r2,zero,3410 <putc+0x78>
    33cc:	80800217 	ldw	r2,8(r16)
    33d0:	10ffffc4 	addi	r3,r2,-1
    33d4:	80c00215 	stw	r3,8(r16)
    33d8:	18001316 	blt	r3,zero,3428 <putc+0x90>
    33dc:	80800017 	ldw	r2,0(r16)
    33e0:	14400005 	stb	r17,0(r2)
    33e4:	80c00017 	ldw	r3,0(r16)
    33e8:	18800044 	addi	r2,r3,1
    33ec:	18c00003 	ldbu	r3,0(r3)
    33f0:	80800015 	stw	r2,0(r16)
    33f4:	1805883a 	mov	r2,r3
    33f8:	dfc00317 	ldw	ra,12(sp)
    33fc:	dc800217 	ldw	r18,8(sp)
    3400:	dc400117 	ldw	r17,4(sp)
    3404:	dc000017 	ldw	r16,0(sp)
    3408:	dec00404 	addi	sp,sp,16
    340c:	f800283a 	ret
    3410:	1809883a 	mov	r4,r3
    3414:	0003d880 	call	3d88 <__sinit>
    3418:	80800217 	ldw	r2,8(r16)
    341c:	10ffffc4 	addi	r3,r2,-1
    3420:	80c00215 	stw	r3,8(r16)
    3424:	183fed0e 	bge	r3,zero,33dc <putc+0x44>
    3428:	80800617 	ldw	r2,24(r16)
    342c:	18800f16 	blt	r3,r2,346c <putc+0xd4>
    3430:	80800017 	ldw	r2,0(r16)
    3434:	14400005 	stb	r17,0(r2)
    3438:	81000017 	ldw	r4,0(r16)
    343c:	00800284 	movi	r2,10
    3440:	20c00003 	ldbu	r3,0(r4)
    3444:	18801226 	beq	r3,r2,3490 <putc+0xf8>
    3448:	20800044 	addi	r2,r4,1
    344c:	80800015 	stw	r2,0(r16)
    3450:	1805883a 	mov	r2,r3
    3454:	dfc00317 	ldw	ra,12(sp)
    3458:	dc800217 	ldw	r18,8(sp)
    345c:	dc400117 	ldw	r17,4(sp)
    3460:	dc000017 	ldw	r16,0(sp)
    3464:	dec00404 	addi	sp,sp,16
    3468:	f800283a 	ret
    346c:	91000017 	ldw	r4,0(r18)
    3470:	880b883a 	mov	r5,r17
    3474:	800d883a 	mov	r6,r16
    3478:	dfc00317 	ldw	ra,12(sp)
    347c:	dc800217 	ldw	r18,8(sp)
    3480:	dc400117 	ldw	r17,4(sp)
    3484:	dc000017 	ldw	r16,0(sp)
    3488:	dec00404 	addi	sp,sp,16
    348c:	00036b41 	jmpi	36b4 <__swbuf_r>
    3490:	91000017 	ldw	r4,0(r18)
    3494:	180b883a 	mov	r5,r3
    3498:	003ff606 	br	3474 <putc+0xdc>

0000349c <_putc_r>:
    349c:	defffc04 	addi	sp,sp,-16
    34a0:	dc400215 	stw	r17,8(sp)
    34a4:	dc000115 	stw	r16,4(sp)
    34a8:	dfc00315 	stw	ra,12(sp)
    34ac:	2021883a 	mov	r16,r4
    34b0:	2823883a 	mov	r17,r5
    34b4:	20000226 	beq	r4,zero,34c0 <_putc_r+0x24>
    34b8:	20800e17 	ldw	r2,56(r4)
    34bc:	10001026 	beq	r2,zero,3500 <_putc_r+0x64>
    34c0:	30800217 	ldw	r2,8(r6)
    34c4:	10ffffc4 	addi	r3,r2,-1
    34c8:	30c00215 	stw	r3,8(r6)
    34cc:	18001316 	blt	r3,zero,351c <_putc_r+0x80>
    34d0:	30800017 	ldw	r2,0(r6)
    34d4:	14400005 	stb	r17,0(r2)
    34d8:	30c00017 	ldw	r3,0(r6)
    34dc:	18800044 	addi	r2,r3,1
    34e0:	18c00003 	ldbu	r3,0(r3)
    34e4:	30800015 	stw	r2,0(r6)
    34e8:	1805883a 	mov	r2,r3
    34ec:	dfc00317 	ldw	ra,12(sp)
    34f0:	dc400217 	ldw	r17,8(sp)
    34f4:	dc000117 	ldw	r16,4(sp)
    34f8:	dec00404 	addi	sp,sp,16
    34fc:	f800283a 	ret
    3500:	d9800015 	stw	r6,0(sp)
    3504:	0003d880 	call	3d88 <__sinit>
    3508:	d9800017 	ldw	r6,0(sp)
    350c:	30800217 	ldw	r2,8(r6)
    3510:	10ffffc4 	addi	r3,r2,-1
    3514:	30c00215 	stw	r3,8(r6)
    3518:	183fed0e 	bge	r3,zero,34d0 <_putc_r+0x34>
    351c:	30800617 	ldw	r2,24(r6)
    3520:	18800e16 	blt	r3,r2,355c <_putc_r+0xc0>
    3524:	30800017 	ldw	r2,0(r6)
    3528:	14400005 	stb	r17,0(r2)
    352c:	31000017 	ldw	r4,0(r6)
    3530:	00800284 	movi	r2,10
    3534:	20c00003 	ldbu	r3,0(r4)
    3538:	18800f26 	beq	r3,r2,3578 <_putc_r+0xdc>
    353c:	20800044 	addi	r2,r4,1
    3540:	30800015 	stw	r2,0(r6)
    3544:	1805883a 	mov	r2,r3
    3548:	dfc00317 	ldw	ra,12(sp)
    354c:	dc400217 	ldw	r17,8(sp)
    3550:	dc000117 	ldw	r16,4(sp)
    3554:	dec00404 	addi	sp,sp,16
    3558:	f800283a 	ret
    355c:	8009883a 	mov	r4,r16
    3560:	880b883a 	mov	r5,r17
    3564:	dfc00317 	ldw	ra,12(sp)
    3568:	dc400217 	ldw	r17,8(sp)
    356c:	dc000117 	ldw	r16,4(sp)
    3570:	dec00404 	addi	sp,sp,16
    3574:	00036b41 	jmpi	36b4 <__swbuf_r>
    3578:	8009883a 	mov	r4,r16
    357c:	180b883a 	mov	r5,r3
    3580:	003ff806 	br	3564 <_putc_r+0xc8>

00003584 <strcmp>:
    3584:	2144b03a 	or	r2,r4,r5
    3588:	108000cc 	andi	r2,r2,3
    358c:	10001d1e 	bne	r2,zero,3604 <strcmp+0x80>
    3590:	200f883a 	mov	r7,r4
    3594:	28800017 	ldw	r2,0(r5)
    3598:	21000017 	ldw	r4,0(r4)
    359c:	280d883a 	mov	r6,r5
    35a0:	2080161e 	bne	r4,r2,35fc <strcmp+0x78>
    35a4:	023fbff4 	movhi	r8,65279
    35a8:	423fbfc4 	addi	r8,r8,-257
    35ac:	2207883a 	add	r3,r4,r8
    35b0:	01602074 	movhi	r5,32897
    35b4:	29602004 	addi	r5,r5,-32640
    35b8:	1946703a 	and	r3,r3,r5
    35bc:	0104303a 	nor	r2,zero,r4
    35c0:	10c4703a 	and	r2,r2,r3
    35c4:	10001c1e 	bne	r2,zero,3638 <strcmp+0xb4>
    35c8:	4013883a 	mov	r9,r8
    35cc:	2811883a 	mov	r8,r5
    35d0:	00000106 	br	35d8 <strcmp+0x54>
    35d4:	1800181e 	bne	r3,zero,3638 <strcmp+0xb4>
    35d8:	39c00104 	addi	r7,r7,4
    35dc:	39000017 	ldw	r4,0(r7)
    35e0:	31800104 	addi	r6,r6,4
    35e4:	31400017 	ldw	r5,0(r6)
    35e8:	2245883a 	add	r2,r4,r9
    35ec:	1204703a 	and	r2,r2,r8
    35f0:	0106303a 	nor	r3,zero,r4
    35f4:	1886703a 	and	r3,r3,r2
    35f8:	217ff626 	beq	r4,r5,35d4 <strcmp+0x50>
    35fc:	3809883a 	mov	r4,r7
    3600:	300b883a 	mov	r5,r6
    3604:	20c00007 	ldb	r3,0(r4)
    3608:	1800051e 	bne	r3,zero,3620 <strcmp+0x9c>
    360c:	00000606 	br	3628 <strcmp+0xa4>
    3610:	21000044 	addi	r4,r4,1
    3614:	20c00007 	ldb	r3,0(r4)
    3618:	29400044 	addi	r5,r5,1
    361c:	18000226 	beq	r3,zero,3628 <strcmp+0xa4>
    3620:	28800007 	ldb	r2,0(r5)
    3624:	18bffa26 	beq	r3,r2,3610 <strcmp+0x8c>
    3628:	20c00003 	ldbu	r3,0(r4)
    362c:	28800003 	ldbu	r2,0(r5)
    3630:	1885c83a 	sub	r2,r3,r2
    3634:	f800283a 	ret
    3638:	0005883a 	mov	r2,zero
    363c:	f800283a 	ret

00003640 <strlen>:
    3640:	208000cc 	andi	r2,r4,3
    3644:	2011883a 	mov	r8,r4
    3648:	1000161e 	bne	r2,zero,36a4 <strlen+0x64>
    364c:	20c00017 	ldw	r3,0(r4)
    3650:	017fbff4 	movhi	r5,65279
    3654:	297fbfc4 	addi	r5,r5,-257
    3658:	01e02074 	movhi	r7,32897
    365c:	39e02004 	addi	r7,r7,-32640
    3660:	1945883a 	add	r2,r3,r5
    3664:	11c4703a 	and	r2,r2,r7
    3668:	00c6303a 	nor	r3,zero,r3
    366c:	1886703a 	and	r3,r3,r2
    3670:	18000c1e 	bne	r3,zero,36a4 <strlen+0x64>
    3674:	280d883a 	mov	r6,r5
    3678:	380b883a 	mov	r5,r7
    367c:	21000104 	addi	r4,r4,4
    3680:	20800017 	ldw	r2,0(r4)
    3684:	1187883a 	add	r3,r2,r6
    3688:	1946703a 	and	r3,r3,r5
    368c:	0084303a 	nor	r2,zero,r2
    3690:	10c4703a 	and	r2,r2,r3
    3694:	103ff926 	beq	r2,zero,367c <strlen+0x3c>
    3698:	20800007 	ldb	r2,0(r4)
    369c:	10000326 	beq	r2,zero,36ac <strlen+0x6c>
    36a0:	21000044 	addi	r4,r4,1
    36a4:	20800007 	ldb	r2,0(r4)
    36a8:	103ffd1e 	bne	r2,zero,36a0 <strlen+0x60>
    36ac:	2205c83a 	sub	r2,r4,r8
    36b0:	f800283a 	ret

000036b4 <__swbuf_r>:
    36b4:	defffc04 	addi	sp,sp,-16
    36b8:	dc400215 	stw	r17,8(sp)
    36bc:	dc000115 	stw	r16,4(sp)
    36c0:	dfc00315 	stw	ra,12(sp)
    36c4:	2023883a 	mov	r17,r4
    36c8:	2821883a 	mov	r16,r5
    36cc:	20000226 	beq	r4,zero,36d8 <__swbuf_r+0x24>
    36d0:	20800e17 	ldw	r2,56(r4)
    36d4:	10002f26 	beq	r2,zero,3794 <__swbuf_r+0xe0>
    36d8:	3080030b 	ldhu	r2,12(r6)
    36dc:	30c00617 	ldw	r3,24(r6)
    36e0:	1080020c 	andi	r2,r2,8
    36e4:	30c00215 	stw	r3,8(r6)
    36e8:	10002226 	beq	r2,zero,3774 <__swbuf_r+0xc0>
    36ec:	30c00417 	ldw	r3,16(r6)
    36f0:	18002026 	beq	r3,zero,3774 <__swbuf_r+0xc0>
    36f4:	31000017 	ldw	r4,0(r6)
    36f8:	30800517 	ldw	r2,20(r6)
    36fc:	20c7c83a 	sub	r3,r4,r3
    3700:	18802f0e 	bge	r3,r2,37c0 <__swbuf_r+0x10c>
    3704:	19400044 	addi	r5,r3,1
    3708:	30800217 	ldw	r2,8(r6)
    370c:	84003fcc 	andi	r16,r16,255
    3710:	20c00044 	addi	r3,r4,1
    3714:	10bfffc4 	addi	r2,r2,-1
    3718:	30800215 	stw	r2,8(r6)
    371c:	24000005 	stb	r16,0(r4)
    3720:	30800517 	ldw	r2,20(r6)
    3724:	30c00015 	stw	r3,0(r6)
    3728:	11400c26 	beq	r2,r5,375c <__swbuf_r+0xa8>
    372c:	3080030b 	ldhu	r2,12(r6)
    3730:	1080004c 	andi	r2,r2,1
    3734:	1005003a 	cmpeq	r2,r2,zero
    3738:	10000626 	beq	r2,zero,3754 <__swbuf_r+0xa0>
    373c:	8005883a 	mov	r2,r16
    3740:	dfc00317 	ldw	ra,12(sp)
    3744:	dc400217 	ldw	r17,8(sp)
    3748:	dc000117 	ldw	r16,4(sp)
    374c:	dec00404 	addi	sp,sp,16
    3750:	f800283a 	ret
    3754:	00800284 	movi	r2,10
    3758:	80bff81e 	bne	r16,r2,373c <__swbuf_r+0x88>
    375c:	8809883a 	mov	r4,r17
    3760:	300b883a 	mov	r5,r6
    3764:	0003af00 	call	3af0 <_fflush_r>
    3768:	103ff426 	beq	r2,zero,373c <__swbuf_r+0x88>
    376c:	043fffc4 	movi	r16,-1
    3770:	003ff206 	br	373c <__swbuf_r+0x88>
    3774:	300b883a 	mov	r5,r6
    3778:	8809883a 	mov	r4,r17
    377c:	d9800015 	stw	r6,0(sp)
    3780:	00038000 	call	3800 <__swsetup_r>
    3784:	d9800017 	ldw	r6,0(sp)
    3788:	1000061e 	bne	r2,zero,37a4 <__swbuf_r+0xf0>
    378c:	30c00417 	ldw	r3,16(r6)
    3790:	003fd806 	br	36f4 <__swbuf_r+0x40>
    3794:	d9800015 	stw	r6,0(sp)
    3798:	0003d880 	call	3d88 <__sinit>
    379c:	d9800017 	ldw	r6,0(sp)
    37a0:	003fcd06 	br	36d8 <__swbuf_r+0x24>
    37a4:	3080030b 	ldhu	r2,12(r6)
    37a8:	00c00244 	movi	r3,9
    37ac:	043fffc4 	movi	r16,-1
    37b0:	10801014 	ori	r2,r2,64
    37b4:	3080030d 	sth	r2,12(r6)
    37b8:	88c00015 	stw	r3,0(r17)
    37bc:	003fdf06 	br	373c <__swbuf_r+0x88>
    37c0:	300b883a 	mov	r5,r6
    37c4:	8809883a 	mov	r4,r17
    37c8:	d9800015 	stw	r6,0(sp)
    37cc:	0003af00 	call	3af0 <_fflush_r>
    37d0:	d9800017 	ldw	r6,0(sp)
    37d4:	103fe51e 	bne	r2,zero,376c <__swbuf_r+0xb8>
    37d8:	31000017 	ldw	r4,0(r6)
    37dc:	01400044 	movi	r5,1
    37e0:	003fc906 	br	3708 <__swbuf_r+0x54>

000037e4 <__swbuf>:
    37e4:	01800074 	movhi	r6,1
    37e8:	31bf9b04 	addi	r6,r6,-404
    37ec:	2007883a 	mov	r3,r4
    37f0:	31000017 	ldw	r4,0(r6)
    37f4:	280d883a 	mov	r6,r5
    37f8:	180b883a 	mov	r5,r3
    37fc:	00036b41 	jmpi	36b4 <__swbuf_r>

00003800 <__swsetup_r>:
    3800:	00800074 	movhi	r2,1
    3804:	10bf9b04 	addi	r2,r2,-404
    3808:	10c00017 	ldw	r3,0(r2)
    380c:	defffd04 	addi	sp,sp,-12
    3810:	dc400115 	stw	r17,4(sp)
    3814:	dc000015 	stw	r16,0(sp)
    3818:	dfc00215 	stw	ra,8(sp)
    381c:	2023883a 	mov	r17,r4
    3820:	2821883a 	mov	r16,r5
    3824:	18000226 	beq	r3,zero,3830 <__swsetup_r+0x30>
    3828:	18800e17 	ldw	r2,56(r3)
    382c:	10001f26 	beq	r2,zero,38ac <__swsetup_r+0xac>
    3830:	8100030b 	ldhu	r4,12(r16)
    3834:	2080020c 	andi	r2,r4,8
    3838:	10002826 	beq	r2,zero,38dc <__swsetup_r+0xdc>
    383c:	81400417 	ldw	r5,16(r16)
    3840:	28001d26 	beq	r5,zero,38b8 <__swsetup_r+0xb8>
    3844:	2080004c 	andi	r2,r4,1
    3848:	1005003a 	cmpeq	r2,r2,zero
    384c:	10000b26 	beq	r2,zero,387c <__swsetup_r+0x7c>
    3850:	2080008c 	andi	r2,r4,2
    3854:	10001226 	beq	r2,zero,38a0 <__swsetup_r+0xa0>
    3858:	0005883a 	mov	r2,zero
    385c:	80800215 	stw	r2,8(r16)
    3860:	28000b26 	beq	r5,zero,3890 <__swsetup_r+0x90>
    3864:	0005883a 	mov	r2,zero
    3868:	dfc00217 	ldw	ra,8(sp)
    386c:	dc400117 	ldw	r17,4(sp)
    3870:	dc000017 	ldw	r16,0(sp)
    3874:	dec00304 	addi	sp,sp,12
    3878:	f800283a 	ret
    387c:	80800517 	ldw	r2,20(r16)
    3880:	80000215 	stw	zero,8(r16)
    3884:	0085c83a 	sub	r2,zero,r2
    3888:	80800615 	stw	r2,24(r16)
    388c:	283ff51e 	bne	r5,zero,3864 <__swsetup_r+0x64>
    3890:	2080200c 	andi	r2,r4,128
    3894:	103ff326 	beq	r2,zero,3864 <__swsetup_r+0x64>
    3898:	00bfffc4 	movi	r2,-1
    389c:	003ff206 	br	3868 <__swsetup_r+0x68>
    38a0:	80800517 	ldw	r2,20(r16)
    38a4:	80800215 	stw	r2,8(r16)
    38a8:	003fed06 	br	3860 <__swsetup_r+0x60>
    38ac:	1809883a 	mov	r4,r3
    38b0:	0003d880 	call	3d88 <__sinit>
    38b4:	003fde06 	br	3830 <__swsetup_r+0x30>
    38b8:	20c0a00c 	andi	r3,r4,640
    38bc:	00808004 	movi	r2,512
    38c0:	18bfe026 	beq	r3,r2,3844 <__swsetup_r+0x44>
    38c4:	8809883a 	mov	r4,r17
    38c8:	800b883a 	mov	r5,r16
    38cc:	00045a00 	call	45a0 <__smakebuf_r>
    38d0:	8100030b 	ldhu	r4,12(r16)
    38d4:	81400417 	ldw	r5,16(r16)
    38d8:	003fda06 	br	3844 <__swsetup_r+0x44>
    38dc:	2080040c 	andi	r2,r4,16
    38e0:	103fed26 	beq	r2,zero,3898 <__swsetup_r+0x98>
    38e4:	2080010c 	andi	r2,r4,4
    38e8:	10001226 	beq	r2,zero,3934 <__swsetup_r+0x134>
    38ec:	81400c17 	ldw	r5,48(r16)
    38f0:	28000526 	beq	r5,zero,3908 <__swsetup_r+0x108>
    38f4:	80801004 	addi	r2,r16,64
    38f8:	28800226 	beq	r5,r2,3904 <__swsetup_r+0x104>
    38fc:	8809883a 	mov	r4,r17
    3900:	000410c0 	call	410c <_free_r>
    3904:	80000c15 	stw	zero,48(r16)
    3908:	8080030b 	ldhu	r2,12(r16)
    390c:	81400417 	ldw	r5,16(r16)
    3910:	80000115 	stw	zero,4(r16)
    3914:	10bff6cc 	andi	r2,r2,65499
    3918:	8080030d 	sth	r2,12(r16)
    391c:	81400015 	stw	r5,0(r16)
    3920:	8080030b 	ldhu	r2,12(r16)
    3924:	10800214 	ori	r2,r2,8
    3928:	113fffcc 	andi	r4,r2,65535
    392c:	8080030d 	sth	r2,12(r16)
    3930:	003fc306 	br	3840 <__swsetup_r+0x40>
    3934:	81400417 	ldw	r5,16(r16)
    3938:	003ff906 	br	3920 <__swsetup_r+0x120>

0000393c <register_fini>:
    393c:	f800283a 	ret

00003940 <__call_exitprocs>:
    3940:	00800074 	movhi	r2,1
    3944:	10bf9c04 	addi	r2,r2,-400
    3948:	10800017 	ldw	r2,0(r2)
    394c:	defff304 	addi	sp,sp,-52
    3950:	df000b15 	stw	fp,44(sp)
    3954:	d8800115 	stw	r2,4(sp)
    3958:	00800034 	movhi	r2,0
    395c:	10800004 	addi	r2,r2,0
    3960:	1005003a 	cmpeq	r2,r2,zero
    3964:	d8800215 	stw	r2,8(sp)
    3968:	d8800117 	ldw	r2,4(sp)
    396c:	dd400815 	stw	r21,32(sp)
    3970:	dd000715 	stw	r20,28(sp)
    3974:	10805204 	addi	r2,r2,328
    3978:	dfc00c15 	stw	ra,48(sp)
    397c:	ddc00a15 	stw	r23,40(sp)
    3980:	dd800915 	stw	r22,36(sp)
    3984:	dcc00615 	stw	r19,24(sp)
    3988:	dc800515 	stw	r18,20(sp)
    398c:	dc400415 	stw	r17,16(sp)
    3990:	dc000315 	stw	r16,12(sp)
    3994:	282b883a 	mov	r21,r5
    3998:	2039883a 	mov	fp,r4
    399c:	d8800015 	stw	r2,0(sp)
    39a0:	2829003a 	cmpeq	r20,r5,zero
    39a4:	d8800117 	ldw	r2,4(sp)
    39a8:	14405217 	ldw	r17,328(r2)
    39ac:	88001026 	beq	r17,zero,39f0 <__call_exitprocs+0xb0>
    39b0:	ddc00017 	ldw	r23,0(sp)
    39b4:	88800117 	ldw	r2,4(r17)
    39b8:	8c802204 	addi	r18,r17,136
    39bc:	143fffc4 	addi	r16,r2,-1
    39c0:	80000916 	blt	r16,zero,39e8 <__call_exitprocs+0xa8>
    39c4:	05bfffc4 	movi	r22,-1
    39c8:	a000151e 	bne	r20,zero,3a20 <__call_exitprocs+0xe0>
    39cc:	8409883a 	add	r4,r16,r16
    39d0:	2105883a 	add	r2,r4,r4
    39d4:	1485883a 	add	r2,r2,r18
    39d8:	10c02017 	ldw	r3,128(r2)
    39dc:	a8c01126 	beq	r21,r3,3a24 <__call_exitprocs+0xe4>
    39e0:	843fffc4 	addi	r16,r16,-1
    39e4:	85bff81e 	bne	r16,r22,39c8 <__call_exitprocs+0x88>
    39e8:	d8800217 	ldw	r2,8(sp)
    39ec:	10003126 	beq	r2,zero,3ab4 <__call_exitprocs+0x174>
    39f0:	dfc00c17 	ldw	ra,48(sp)
    39f4:	df000b17 	ldw	fp,44(sp)
    39f8:	ddc00a17 	ldw	r23,40(sp)
    39fc:	dd800917 	ldw	r22,36(sp)
    3a00:	dd400817 	ldw	r21,32(sp)
    3a04:	dd000717 	ldw	r20,28(sp)
    3a08:	dcc00617 	ldw	r19,24(sp)
    3a0c:	dc800517 	ldw	r18,20(sp)
    3a10:	dc400417 	ldw	r17,16(sp)
    3a14:	dc000317 	ldw	r16,12(sp)
    3a18:	dec00d04 	addi	sp,sp,52
    3a1c:	f800283a 	ret
    3a20:	8409883a 	add	r4,r16,r16
    3a24:	88c00117 	ldw	r3,4(r17)
    3a28:	2105883a 	add	r2,r4,r4
    3a2c:	1445883a 	add	r2,r2,r17
    3a30:	18ffffc4 	addi	r3,r3,-1
    3a34:	11800217 	ldw	r6,8(r2)
    3a38:	1c001526 	beq	r3,r16,3a90 <__call_exitprocs+0x150>
    3a3c:	10000215 	stw	zero,8(r2)
    3a40:	303fe726 	beq	r6,zero,39e0 <__call_exitprocs+0xa0>
    3a44:	00c00044 	movi	r3,1
    3a48:	1c06983a 	sll	r3,r3,r16
    3a4c:	90804017 	ldw	r2,256(r18)
    3a50:	8cc00117 	ldw	r19,4(r17)
    3a54:	1884703a 	and	r2,r3,r2
    3a58:	10001426 	beq	r2,zero,3aac <__call_exitprocs+0x16c>
    3a5c:	90804117 	ldw	r2,260(r18)
    3a60:	1884703a 	and	r2,r3,r2
    3a64:	10000c1e 	bne	r2,zero,3a98 <__call_exitprocs+0x158>
    3a68:	2105883a 	add	r2,r4,r4
    3a6c:	1485883a 	add	r2,r2,r18
    3a70:	11400017 	ldw	r5,0(r2)
    3a74:	e009883a 	mov	r4,fp
    3a78:	303ee83a 	callr	r6
    3a7c:	88800117 	ldw	r2,4(r17)
    3a80:	98bfc81e 	bne	r19,r2,39a4 <__call_exitprocs+0x64>
    3a84:	b8800017 	ldw	r2,0(r23)
    3a88:	147fd526 	beq	r2,r17,39e0 <__call_exitprocs+0xa0>
    3a8c:	003fc506 	br	39a4 <__call_exitprocs+0x64>
    3a90:	8c000115 	stw	r16,4(r17)
    3a94:	003fea06 	br	3a40 <__call_exitprocs+0x100>
    3a98:	2105883a 	add	r2,r4,r4
    3a9c:	1485883a 	add	r2,r2,r18
    3aa0:	11000017 	ldw	r4,0(r2)
    3aa4:	303ee83a 	callr	r6
    3aa8:	003ff406 	br	3a7c <__call_exitprocs+0x13c>
    3aac:	303ee83a 	callr	r6
    3ab0:	003ff206 	br	3a7c <__call_exitprocs+0x13c>
    3ab4:	88800117 	ldw	r2,4(r17)
    3ab8:	1000081e 	bne	r2,zero,3adc <__call_exitprocs+0x19c>
    3abc:	89000017 	ldw	r4,0(r17)
    3ac0:	20000726 	beq	r4,zero,3ae0 <__call_exitprocs+0x1a0>
    3ac4:	b9000015 	stw	r4,0(r23)
    3ac8:	8809883a 	mov	r4,r17
    3acc:	00000000 	call	0 <__reset>
    3ad0:	bc400017 	ldw	r17,0(r23)
    3ad4:	883fb71e 	bne	r17,zero,39b4 <__call_exitprocs+0x74>
    3ad8:	003fc506 	br	39f0 <__call_exitprocs+0xb0>
    3adc:	89000017 	ldw	r4,0(r17)
    3ae0:	882f883a 	mov	r23,r17
    3ae4:	2023883a 	mov	r17,r4
    3ae8:	883fb21e 	bne	r17,zero,39b4 <__call_exitprocs+0x74>
    3aec:	003fc006 	br	39f0 <__call_exitprocs+0xb0>

00003af0 <_fflush_r>:
    3af0:	defffb04 	addi	sp,sp,-20
    3af4:	dcc00315 	stw	r19,12(sp)
    3af8:	dc800215 	stw	r18,8(sp)
    3afc:	dfc00415 	stw	ra,16(sp)
    3b00:	dc400115 	stw	r17,4(sp)
    3b04:	dc000015 	stw	r16,0(sp)
    3b08:	2027883a 	mov	r19,r4
    3b0c:	2825883a 	mov	r18,r5
    3b10:	20000226 	beq	r4,zero,3b1c <_fflush_r+0x2c>
    3b14:	20800e17 	ldw	r2,56(r4)
    3b18:	10005626 	beq	r2,zero,3c74 <_fflush_r+0x184>
    3b1c:	9100030b 	ldhu	r4,12(r18)
    3b20:	20ffffcc 	andi	r3,r4,65535
    3b24:	18e0001c 	xori	r3,r3,32768
    3b28:	18e00004 	addi	r3,r3,-32768
    3b2c:	1880020c 	andi	r2,r3,8
    3b30:	1000261e 	bne	r2,zero,3bcc <_fflush_r+0xdc>
    3b34:	90c00117 	ldw	r3,4(r18)
    3b38:	20820014 	ori	r2,r4,2048
    3b3c:	9080030d 	sth	r2,12(r18)
    3b40:	1009883a 	mov	r4,r2
    3b44:	00c0400e 	bge	zero,r3,3c48 <_fflush_r+0x158>
    3b48:	92000a17 	ldw	r8,40(r18)
    3b4c:	40004026 	beq	r8,zero,3c50 <_fflush_r+0x160>
    3b50:	2084000c 	andi	r2,r4,4096
    3b54:	10005326 	beq	r2,zero,3ca4 <_fflush_r+0x1b4>
    3b58:	94001417 	ldw	r16,80(r18)
    3b5c:	9080030b 	ldhu	r2,12(r18)
    3b60:	1080010c 	andi	r2,r2,4
    3b64:	1000481e 	bne	r2,zero,3c88 <_fflush_r+0x198>
    3b68:	91400717 	ldw	r5,28(r18)
    3b6c:	9809883a 	mov	r4,r19
    3b70:	800d883a 	mov	r6,r16
    3b74:	000f883a 	mov	r7,zero
    3b78:	403ee83a 	callr	r8
    3b7c:	8080261e 	bne	r16,r2,3c18 <_fflush_r+0x128>
    3b80:	9080030b 	ldhu	r2,12(r18)
    3b84:	91000417 	ldw	r4,16(r18)
    3b88:	90000115 	stw	zero,4(r18)
    3b8c:	10bdffcc 	andi	r2,r2,63487
    3b90:	10ffffcc 	andi	r3,r2,65535
    3b94:	18c4000c 	andi	r3,r3,4096
    3b98:	9080030d 	sth	r2,12(r18)
    3b9c:	91000015 	stw	r4,0(r18)
    3ba0:	18002b26 	beq	r3,zero,3c50 <_fflush_r+0x160>
    3ba4:	0007883a 	mov	r3,zero
    3ba8:	1805883a 	mov	r2,r3
    3bac:	94001415 	stw	r16,80(r18)
    3bb0:	dfc00417 	ldw	ra,16(sp)
    3bb4:	dcc00317 	ldw	r19,12(sp)
    3bb8:	dc800217 	ldw	r18,8(sp)
    3bbc:	dc400117 	ldw	r17,4(sp)
    3bc0:	dc000017 	ldw	r16,0(sp)
    3bc4:	dec00504 	addi	sp,sp,20
    3bc8:	f800283a 	ret
    3bcc:	94400417 	ldw	r17,16(r18)
    3bd0:	88001f26 	beq	r17,zero,3c50 <_fflush_r+0x160>
    3bd4:	90800017 	ldw	r2,0(r18)
    3bd8:	18c000cc 	andi	r3,r3,3
    3bdc:	94400015 	stw	r17,0(r18)
    3be0:	1461c83a 	sub	r16,r2,r17
    3be4:	18002526 	beq	r3,zero,3c7c <_fflush_r+0x18c>
    3be8:	0005883a 	mov	r2,zero
    3bec:	90800215 	stw	r2,8(r18)
    3bf0:	0400170e 	bge	zero,r16,3c50 <_fflush_r+0x160>
    3bf4:	90c00917 	ldw	r3,36(r18)
    3bf8:	91400717 	ldw	r5,28(r18)
    3bfc:	880d883a 	mov	r6,r17
    3c00:	800f883a 	mov	r7,r16
    3c04:	9809883a 	mov	r4,r19
    3c08:	183ee83a 	callr	r3
    3c0c:	88a3883a 	add	r17,r17,r2
    3c10:	80a1c83a 	sub	r16,r16,r2
    3c14:	00bff616 	blt	zero,r2,3bf0 <_fflush_r+0x100>
    3c18:	9080030b 	ldhu	r2,12(r18)
    3c1c:	00ffffc4 	movi	r3,-1
    3c20:	10801014 	ori	r2,r2,64
    3c24:	9080030d 	sth	r2,12(r18)
    3c28:	1805883a 	mov	r2,r3
    3c2c:	dfc00417 	ldw	ra,16(sp)
    3c30:	dcc00317 	ldw	r19,12(sp)
    3c34:	dc800217 	ldw	r18,8(sp)
    3c38:	dc400117 	ldw	r17,4(sp)
    3c3c:	dc000017 	ldw	r16,0(sp)
    3c40:	dec00504 	addi	sp,sp,20
    3c44:	f800283a 	ret
    3c48:	90800f17 	ldw	r2,60(r18)
    3c4c:	00bfbe16 	blt	zero,r2,3b48 <_fflush_r+0x58>
    3c50:	0007883a 	mov	r3,zero
    3c54:	1805883a 	mov	r2,r3
    3c58:	dfc00417 	ldw	ra,16(sp)
    3c5c:	dcc00317 	ldw	r19,12(sp)
    3c60:	dc800217 	ldw	r18,8(sp)
    3c64:	dc400117 	ldw	r17,4(sp)
    3c68:	dc000017 	ldw	r16,0(sp)
    3c6c:	dec00504 	addi	sp,sp,20
    3c70:	f800283a 	ret
    3c74:	0003d880 	call	3d88 <__sinit>
    3c78:	003fa806 	br	3b1c <_fflush_r+0x2c>
    3c7c:	90800517 	ldw	r2,20(r18)
    3c80:	90800215 	stw	r2,8(r18)
    3c84:	003fda06 	br	3bf0 <_fflush_r+0x100>
    3c88:	90800117 	ldw	r2,4(r18)
    3c8c:	90c00c17 	ldw	r3,48(r18)
    3c90:	80a1c83a 	sub	r16,r16,r2
    3c94:	183fb426 	beq	r3,zero,3b68 <_fflush_r+0x78>
    3c98:	90800f17 	ldw	r2,60(r18)
    3c9c:	80a1c83a 	sub	r16,r16,r2
    3ca0:	003fb106 	br	3b68 <_fflush_r+0x78>
    3ca4:	91400717 	ldw	r5,28(r18)
    3ca8:	9809883a 	mov	r4,r19
    3cac:	000d883a 	mov	r6,zero
    3cb0:	01c00044 	movi	r7,1
    3cb4:	403ee83a 	callr	r8
    3cb8:	1021883a 	mov	r16,r2
    3cbc:	00bfffc4 	movi	r2,-1
    3cc0:	80800226 	beq	r16,r2,3ccc <_fflush_r+0x1dc>
    3cc4:	92000a17 	ldw	r8,40(r18)
    3cc8:	003fa406 	br	3b5c <_fflush_r+0x6c>
    3ccc:	98c00017 	ldw	r3,0(r19)
    3cd0:	00800744 	movi	r2,29
    3cd4:	18bfde26 	beq	r3,r2,3c50 <_fflush_r+0x160>
    3cd8:	9080030b 	ldhu	r2,12(r18)
    3cdc:	8007883a 	mov	r3,r16
    3ce0:	10801014 	ori	r2,r2,64
    3ce4:	9080030d 	sth	r2,12(r18)
    3ce8:	003fcf06 	br	3c28 <_fflush_r+0x138>

00003cec <fflush>:
    3cec:	01400034 	movhi	r5,0
    3cf0:	294ebc04 	addi	r5,r5,15088
    3cf4:	2007883a 	mov	r3,r4
    3cf8:	20000526 	beq	r4,zero,3d10 <fflush+0x24>
    3cfc:	00800074 	movhi	r2,1
    3d00:	10bf9b04 	addi	r2,r2,-404
    3d04:	11000017 	ldw	r4,0(r2)
    3d08:	180b883a 	mov	r5,r3
    3d0c:	0003af01 	jmpi	3af0 <_fflush_r>
    3d10:	00800074 	movhi	r2,1
    3d14:	10bf9c04 	addi	r2,r2,-400
    3d18:	11000017 	ldw	r4,0(r2)
    3d1c:	00044201 	jmpi	4420 <_fwalk_reent>

00003d20 <std>:
    3d20:	00800034 	movhi	r2,0
    3d24:	1093df04 	addi	r2,r2,20348
    3d28:	20800b15 	stw	r2,44(r4)
    3d2c:	00800034 	movhi	r2,0
    3d30:	10941a04 	addi	r2,r2,20584
    3d34:	20800815 	stw	r2,32(r4)
    3d38:	00c00034 	movhi	r3,0
    3d3c:	18d3fb04 	addi	r3,r3,20460
    3d40:	00800034 	movhi	r2,0
    3d44:	1093e104 	addi	r2,r2,20356
    3d48:	2140030d 	sth	r5,12(r4)
    3d4c:	2180038d 	sth	r6,14(r4)
    3d50:	20c00915 	stw	r3,36(r4)
    3d54:	20800a15 	stw	r2,40(r4)
    3d58:	20000015 	stw	zero,0(r4)
    3d5c:	20000115 	stw	zero,4(r4)
    3d60:	20000215 	stw	zero,8(r4)
    3d64:	20000415 	stw	zero,16(r4)
    3d68:	20000515 	stw	zero,20(r4)
    3d6c:	20000615 	stw	zero,24(r4)
    3d70:	21000715 	stw	r4,28(r4)
    3d74:	f800283a 	ret

00003d78 <__sfp_lock_acquire>:
    3d78:	f800283a 	ret

00003d7c <__sfp_lock_release>:
    3d7c:	f800283a 	ret

00003d80 <__sinit_lock_acquire>:
    3d80:	f800283a 	ret

00003d84 <__sinit_lock_release>:
    3d84:	f800283a 	ret

00003d88 <__sinit>:
    3d88:	20800e17 	ldw	r2,56(r4)
    3d8c:	defffd04 	addi	sp,sp,-12
    3d90:	dc400115 	stw	r17,4(sp)
    3d94:	dc000015 	stw	r16,0(sp)
    3d98:	dfc00215 	stw	ra,8(sp)
    3d9c:	04400044 	movi	r17,1
    3da0:	01400104 	movi	r5,4
    3da4:	000d883a 	mov	r6,zero
    3da8:	2021883a 	mov	r16,r4
    3dac:	2200bb04 	addi	r8,r4,748
    3db0:	200f883a 	mov	r7,r4
    3db4:	10000526 	beq	r2,zero,3dcc <__sinit+0x44>
    3db8:	dfc00217 	ldw	ra,8(sp)
    3dbc:	dc400117 	ldw	r17,4(sp)
    3dc0:	dc000017 	ldw	r16,0(sp)
    3dc4:	dec00304 	addi	sp,sp,12
    3dc8:	f800283a 	ret
    3dcc:	21000117 	ldw	r4,4(r4)
    3dd0:	00800034 	movhi	r2,0
    3dd4:	108f9b04 	addi	r2,r2,15980
    3dd8:	00c000c4 	movi	r3,3
    3ddc:	80800f15 	stw	r2,60(r16)
    3de0:	80c0b915 	stw	r3,740(r16)
    3de4:	8200ba15 	stw	r8,744(r16)
    3de8:	84400e15 	stw	r17,56(r16)
    3dec:	8000b815 	stw	zero,736(r16)
    3df0:	0003d200 	call	3d20 <std>
    3df4:	81000217 	ldw	r4,8(r16)
    3df8:	880d883a 	mov	r6,r17
    3dfc:	800f883a 	mov	r7,r16
    3e00:	01400284 	movi	r5,10
    3e04:	0003d200 	call	3d20 <std>
    3e08:	81000317 	ldw	r4,12(r16)
    3e0c:	800f883a 	mov	r7,r16
    3e10:	01400484 	movi	r5,18
    3e14:	01800084 	movi	r6,2
    3e18:	dfc00217 	ldw	ra,8(sp)
    3e1c:	dc400117 	ldw	r17,4(sp)
    3e20:	dc000017 	ldw	r16,0(sp)
    3e24:	dec00304 	addi	sp,sp,12
    3e28:	0003d201 	jmpi	3d20 <std>

00003e2c <__fp_lock>:
    3e2c:	0005883a 	mov	r2,zero
    3e30:	f800283a 	ret

00003e34 <__fp_unlock>:
    3e34:	0005883a 	mov	r2,zero
    3e38:	f800283a 	ret

00003e3c <__fp_unlock_all>:
    3e3c:	00800074 	movhi	r2,1
    3e40:	10bf9b04 	addi	r2,r2,-404
    3e44:	11000017 	ldw	r4,0(r2)
    3e48:	01400034 	movhi	r5,0
    3e4c:	294f8d04 	addi	r5,r5,15924
    3e50:	00044e81 	jmpi	44e8 <_fwalk>

00003e54 <__fp_lock_all>:
    3e54:	00800074 	movhi	r2,1
    3e58:	10bf9b04 	addi	r2,r2,-404
    3e5c:	11000017 	ldw	r4,0(r2)
    3e60:	01400034 	movhi	r5,0
    3e64:	294f8b04 	addi	r5,r5,15916
    3e68:	00044e81 	jmpi	44e8 <_fwalk>

00003e6c <_cleanup_r>:
    3e6c:	01400034 	movhi	r5,0
    3e70:	2954b004 	addi	r5,r5,21184
    3e74:	00044e81 	jmpi	44e8 <_fwalk>

00003e78 <_cleanup>:
    3e78:	00800074 	movhi	r2,1
    3e7c:	10bf9c04 	addi	r2,r2,-400
    3e80:	11000017 	ldw	r4,0(r2)
    3e84:	0003e6c1 	jmpi	3e6c <_cleanup_r>

00003e88 <__sfmoreglue>:
    3e88:	defffc04 	addi	sp,sp,-16
    3e8c:	dc400115 	stw	r17,4(sp)
    3e90:	2c401724 	muli	r17,r5,92
    3e94:	dc800215 	stw	r18,8(sp)
    3e98:	2825883a 	mov	r18,r5
    3e9c:	89400304 	addi	r5,r17,12
    3ea0:	dc000015 	stw	r16,0(sp)
    3ea4:	dfc00315 	stw	ra,12(sp)
    3ea8:	00047340 	call	4734 <_malloc_r>
    3eac:	0021883a 	mov	r16,zero
    3eb0:	880d883a 	mov	r6,r17
    3eb4:	000b883a 	mov	r5,zero
    3eb8:	10000626 	beq	r2,zero,3ed4 <__sfmoreglue+0x4c>
    3ebc:	11000304 	addi	r4,r2,12
    3ec0:	14800115 	stw	r18,4(r2)
    3ec4:	10000015 	stw	zero,0(r2)
    3ec8:	11000215 	stw	r4,8(r2)
    3ecc:	1021883a 	mov	r16,r2
    3ed0:	0004e740 	call	4e74 <memset>
    3ed4:	8005883a 	mov	r2,r16
    3ed8:	dfc00317 	ldw	ra,12(sp)
    3edc:	dc800217 	ldw	r18,8(sp)
    3ee0:	dc400117 	ldw	r17,4(sp)
    3ee4:	dc000017 	ldw	r16,0(sp)
    3ee8:	dec00404 	addi	sp,sp,16
    3eec:	f800283a 	ret

00003ef0 <__sfp>:
    3ef0:	defffd04 	addi	sp,sp,-12
    3ef4:	00800074 	movhi	r2,1
    3ef8:	10bf9c04 	addi	r2,r2,-400
    3efc:	dc000015 	stw	r16,0(sp)
    3f00:	14000017 	ldw	r16,0(r2)
    3f04:	dc400115 	stw	r17,4(sp)
    3f08:	dfc00215 	stw	ra,8(sp)
    3f0c:	80800e17 	ldw	r2,56(r16)
    3f10:	2023883a 	mov	r17,r4
    3f14:	10002626 	beq	r2,zero,3fb0 <__sfp+0xc0>
    3f18:	8400b804 	addi	r16,r16,736
    3f1c:	80800117 	ldw	r2,4(r16)
    3f20:	81000217 	ldw	r4,8(r16)
    3f24:	10ffffc4 	addi	r3,r2,-1
    3f28:	18000916 	blt	r3,zero,3f50 <__sfp+0x60>
    3f2c:	2080030f 	ldh	r2,12(r4)
    3f30:	10000b26 	beq	r2,zero,3f60 <__sfp+0x70>
    3f34:	017fffc4 	movi	r5,-1
    3f38:	00000206 	br	3f44 <__sfp+0x54>
    3f3c:	2080030f 	ldh	r2,12(r4)
    3f40:	10000726 	beq	r2,zero,3f60 <__sfp+0x70>
    3f44:	18ffffc4 	addi	r3,r3,-1
    3f48:	21001704 	addi	r4,r4,92
    3f4c:	197ffb1e 	bne	r3,r5,3f3c <__sfp+0x4c>
    3f50:	80800017 	ldw	r2,0(r16)
    3f54:	10001926 	beq	r2,zero,3fbc <__sfp+0xcc>
    3f58:	1021883a 	mov	r16,r2
    3f5c:	003fef06 	br	3f1c <__sfp+0x2c>
    3f60:	00bfffc4 	movi	r2,-1
    3f64:	00c00044 	movi	r3,1
    3f68:	2080038d 	sth	r2,14(r4)
    3f6c:	20c0030d 	sth	r3,12(r4)
    3f70:	20000015 	stw	zero,0(r4)
    3f74:	20000215 	stw	zero,8(r4)
    3f78:	20000115 	stw	zero,4(r4)
    3f7c:	20000415 	stw	zero,16(r4)
    3f80:	20000515 	stw	zero,20(r4)
    3f84:	20000615 	stw	zero,24(r4)
    3f88:	20000c15 	stw	zero,48(r4)
    3f8c:	20000d15 	stw	zero,52(r4)
    3f90:	20001115 	stw	zero,68(r4)
    3f94:	20001215 	stw	zero,72(r4)
    3f98:	2005883a 	mov	r2,r4
    3f9c:	dfc00217 	ldw	ra,8(sp)
    3fa0:	dc400117 	ldw	r17,4(sp)
    3fa4:	dc000017 	ldw	r16,0(sp)
    3fa8:	dec00304 	addi	sp,sp,12
    3fac:	f800283a 	ret
    3fb0:	8009883a 	mov	r4,r16
    3fb4:	0003d880 	call	3d88 <__sinit>
    3fb8:	003fd706 	br	3f18 <__sfp+0x28>
    3fbc:	8809883a 	mov	r4,r17
    3fc0:	01400104 	movi	r5,4
    3fc4:	0003e880 	call	3e88 <__sfmoreglue>
    3fc8:	80800015 	stw	r2,0(r16)
    3fcc:	103fe21e 	bne	r2,zero,3f58 <__sfp+0x68>
    3fd0:	00800304 	movi	r2,12
    3fd4:	0009883a 	mov	r4,zero
    3fd8:	88800015 	stw	r2,0(r17)
    3fdc:	003fee06 	br	3f98 <__sfp+0xa8>

00003fe0 <_malloc_trim_r>:
    3fe0:	defffb04 	addi	sp,sp,-20
    3fe4:	dcc00315 	stw	r19,12(sp)
    3fe8:	04c00074 	movhi	r19,1
    3fec:	9cfe9004 	addi	r19,r19,-1472
    3ff0:	dc800215 	stw	r18,8(sp)
    3ff4:	dc400115 	stw	r17,4(sp)
    3ff8:	dc000015 	stw	r16,0(sp)
    3ffc:	2823883a 	mov	r17,r5
    4000:	2025883a 	mov	r18,r4
    4004:	dfc00415 	stw	ra,16(sp)
    4008:	00056580 	call	5658 <__malloc_lock>
    400c:	98800217 	ldw	r2,8(r19)
    4010:	9009883a 	mov	r4,r18
    4014:	000b883a 	mov	r5,zero
    4018:	10c00117 	ldw	r3,4(r2)
    401c:	00bfff04 	movi	r2,-4
    4020:	18a0703a 	and	r16,r3,r2
    4024:	8463c83a 	sub	r17,r16,r17
    4028:	8c43fbc4 	addi	r17,r17,4079
    402c:	8822d33a 	srli	r17,r17,12
    4030:	0083ffc4 	movi	r2,4095
    4034:	8c7fffc4 	addi	r17,r17,-1
    4038:	8822933a 	slli	r17,r17,12
    403c:	1440060e 	bge	r2,r17,4058 <_malloc_trim_r+0x78>
    4040:	0004f0c0 	call	4f0c <_sbrk_r>
    4044:	98c00217 	ldw	r3,8(r19)
    4048:	9009883a 	mov	r4,r18
    404c:	044bc83a 	sub	r5,zero,r17
    4050:	80c7883a 	add	r3,r16,r3
    4054:	10c00926 	beq	r2,r3,407c <_malloc_trim_r+0x9c>
    4058:	000565c0 	call	565c <__malloc_unlock>
    405c:	0005883a 	mov	r2,zero
    4060:	dfc00417 	ldw	ra,16(sp)
    4064:	dcc00317 	ldw	r19,12(sp)
    4068:	dc800217 	ldw	r18,8(sp)
    406c:	dc400117 	ldw	r17,4(sp)
    4070:	dc000017 	ldw	r16,0(sp)
    4074:	dec00504 	addi	sp,sp,20
    4078:	f800283a 	ret
    407c:	9009883a 	mov	r4,r18
    4080:	0004f0c0 	call	4f0c <_sbrk_r>
    4084:	844dc83a 	sub	r6,r16,r17
    4088:	00ffffc4 	movi	r3,-1
    408c:	9009883a 	mov	r4,r18
    4090:	000b883a 	mov	r5,zero
    4094:	01c000b4 	movhi	r7,2
    4098:	39e85d04 	addi	r7,r7,-24204
    409c:	31800054 	ori	r6,r6,1
    40a0:	10c00926 	beq	r2,r3,40c8 <_malloc_trim_r+0xe8>
    40a4:	38800017 	ldw	r2,0(r7)
    40a8:	98c00217 	ldw	r3,8(r19)
    40ac:	9009883a 	mov	r4,r18
    40b0:	1445c83a 	sub	r2,r2,r17
    40b4:	38800015 	stw	r2,0(r7)
    40b8:	19800115 	stw	r6,4(r3)
    40bc:	000565c0 	call	565c <__malloc_unlock>
    40c0:	00800044 	movi	r2,1
    40c4:	003fe606 	br	4060 <_malloc_trim_r+0x80>
    40c8:	0004f0c0 	call	4f0c <_sbrk_r>
    40cc:	99800217 	ldw	r6,8(r19)
    40d0:	100f883a 	mov	r7,r2
    40d4:	9009883a 	mov	r4,r18
    40d8:	1187c83a 	sub	r3,r2,r6
    40dc:	008003c4 	movi	r2,15
    40e0:	19400054 	ori	r5,r3,1
    40e4:	10ffdc0e 	bge	r2,r3,4058 <_malloc_trim_r+0x78>
    40e8:	00800074 	movhi	r2,1
    40ec:	10bf9e04 	addi	r2,r2,-392
    40f0:	10c00017 	ldw	r3,0(r2)
    40f4:	008000b4 	movhi	r2,2
    40f8:	10a85d04 	addi	r2,r2,-24204
    40fc:	31400115 	stw	r5,4(r6)
    4100:	38c7c83a 	sub	r3,r7,r3
    4104:	10c00015 	stw	r3,0(r2)
    4108:	003fd306 	br	4058 <_malloc_trim_r+0x78>

0000410c <_free_r>:
    410c:	defffd04 	addi	sp,sp,-12
    4110:	dc400115 	stw	r17,4(sp)
    4114:	dc000015 	stw	r16,0(sp)
    4118:	dfc00215 	stw	ra,8(sp)
    411c:	2821883a 	mov	r16,r5
    4120:	2023883a 	mov	r17,r4
    4124:	28005a26 	beq	r5,zero,4290 <_free_r+0x184>
    4128:	00056580 	call	5658 <__malloc_lock>
    412c:	823ffe04 	addi	r8,r16,-8
    4130:	41400117 	ldw	r5,4(r8)
    4134:	00bfff84 	movi	r2,-2
    4138:	02800074 	movhi	r10,1
    413c:	52be9004 	addi	r10,r10,-1472
    4140:	288e703a 	and	r7,r5,r2
    4144:	41cd883a 	add	r6,r8,r7
    4148:	30c00117 	ldw	r3,4(r6)
    414c:	51000217 	ldw	r4,8(r10)
    4150:	00bfff04 	movi	r2,-4
    4154:	1892703a 	and	r9,r3,r2
    4158:	5017883a 	mov	r11,r10
    415c:	31006726 	beq	r6,r4,42fc <_free_r+0x1f0>
    4160:	2880004c 	andi	r2,r5,1
    4164:	1005003a 	cmpeq	r2,r2,zero
    4168:	32400115 	stw	r9,4(r6)
    416c:	10001a1e 	bne	r2,zero,41d8 <_free_r+0xcc>
    4170:	000b883a 	mov	r5,zero
    4174:	3247883a 	add	r3,r6,r9
    4178:	18800117 	ldw	r2,4(r3)
    417c:	1080004c 	andi	r2,r2,1
    4180:	1000231e 	bne	r2,zero,4210 <_free_r+0x104>
    4184:	280ac03a 	cmpne	r5,r5,zero
    4188:	3a4f883a 	add	r7,r7,r9
    418c:	2800451e 	bne	r5,zero,42a4 <_free_r+0x198>
    4190:	31000217 	ldw	r4,8(r6)
    4194:	00800074 	movhi	r2,1
    4198:	10be9204 	addi	r2,r2,-1464
    419c:	20807b26 	beq	r4,r2,438c <_free_r+0x280>
    41a0:	30800317 	ldw	r2,12(r6)
    41a4:	3a07883a 	add	r3,r7,r8
    41a8:	19c00015 	stw	r7,0(r3)
    41ac:	11000215 	stw	r4,8(r2)
    41b0:	20800315 	stw	r2,12(r4)
    41b4:	38800054 	ori	r2,r7,1
    41b8:	40800115 	stw	r2,4(r8)
    41bc:	28001a26 	beq	r5,zero,4228 <_free_r+0x11c>
    41c0:	8809883a 	mov	r4,r17
    41c4:	dfc00217 	ldw	ra,8(sp)
    41c8:	dc400117 	ldw	r17,4(sp)
    41cc:	dc000017 	ldw	r16,0(sp)
    41d0:	dec00304 	addi	sp,sp,12
    41d4:	000565c1 	jmpi	565c <__malloc_unlock>
    41d8:	80bffe17 	ldw	r2,-8(r16)
    41dc:	50c00204 	addi	r3,r10,8
    41e0:	4091c83a 	sub	r8,r8,r2
    41e4:	41000217 	ldw	r4,8(r8)
    41e8:	388f883a 	add	r7,r7,r2
    41ec:	20c06126 	beq	r4,r3,4374 <_free_r+0x268>
    41f0:	40800317 	ldw	r2,12(r8)
    41f4:	3247883a 	add	r3,r6,r9
    41f8:	000b883a 	mov	r5,zero
    41fc:	11000215 	stw	r4,8(r2)
    4200:	20800315 	stw	r2,12(r4)
    4204:	18800117 	ldw	r2,4(r3)
    4208:	1080004c 	andi	r2,r2,1
    420c:	103fdd26 	beq	r2,zero,4184 <_free_r+0x78>
    4210:	38800054 	ori	r2,r7,1
    4214:	3a07883a 	add	r3,r7,r8
    4218:	280ac03a 	cmpne	r5,r5,zero
    421c:	40800115 	stw	r2,4(r8)
    4220:	19c00015 	stw	r7,0(r3)
    4224:	283fe61e 	bne	r5,zero,41c0 <_free_r+0xb4>
    4228:	00807fc4 	movi	r2,511
    422c:	11c01f2e 	bgeu	r2,r7,42ac <_free_r+0x1a0>
    4230:	3806d27a 	srli	r3,r7,9
    4234:	1800481e 	bne	r3,zero,4358 <_free_r+0x24c>
    4238:	3804d0fa 	srli	r2,r7,3
    423c:	100690fa 	slli	r3,r2,3
    4240:	1acd883a 	add	r6,r3,r11
    4244:	31400217 	ldw	r5,8(r6)
    4248:	31405926 	beq	r6,r5,43b0 <_free_r+0x2a4>
    424c:	28800117 	ldw	r2,4(r5)
    4250:	00ffff04 	movi	r3,-4
    4254:	10c4703a 	and	r2,r2,r3
    4258:	3880022e 	bgeu	r7,r2,4264 <_free_r+0x158>
    425c:	29400217 	ldw	r5,8(r5)
    4260:	317ffa1e 	bne	r6,r5,424c <_free_r+0x140>
    4264:	29800317 	ldw	r6,12(r5)
    4268:	41800315 	stw	r6,12(r8)
    426c:	41400215 	stw	r5,8(r8)
    4270:	8809883a 	mov	r4,r17
    4274:	2a000315 	stw	r8,12(r5)
    4278:	32000215 	stw	r8,8(r6)
    427c:	dfc00217 	ldw	ra,8(sp)
    4280:	dc400117 	ldw	r17,4(sp)
    4284:	dc000017 	ldw	r16,0(sp)
    4288:	dec00304 	addi	sp,sp,12
    428c:	000565c1 	jmpi	565c <__malloc_unlock>
    4290:	dfc00217 	ldw	ra,8(sp)
    4294:	dc400117 	ldw	r17,4(sp)
    4298:	dc000017 	ldw	r16,0(sp)
    429c:	dec00304 	addi	sp,sp,12
    42a0:	f800283a 	ret
    42a4:	31000217 	ldw	r4,8(r6)
    42a8:	003fbd06 	br	41a0 <_free_r+0x94>
    42ac:	3806d0fa 	srli	r3,r7,3
    42b0:	00800044 	movi	r2,1
    42b4:	51400117 	ldw	r5,4(r10)
    42b8:	180890fa 	slli	r4,r3,3
    42bc:	1807d0ba 	srai	r3,r3,2
    42c0:	22c9883a 	add	r4,r4,r11
    42c4:	21800217 	ldw	r6,8(r4)
    42c8:	10c4983a 	sll	r2,r2,r3
    42cc:	41000315 	stw	r4,12(r8)
    42d0:	41800215 	stw	r6,8(r8)
    42d4:	288ab03a 	or	r5,r5,r2
    42d8:	22000215 	stw	r8,8(r4)
    42dc:	8809883a 	mov	r4,r17
    42e0:	51400115 	stw	r5,4(r10)
    42e4:	32000315 	stw	r8,12(r6)
    42e8:	dfc00217 	ldw	ra,8(sp)
    42ec:	dc400117 	ldw	r17,4(sp)
    42f0:	dc000017 	ldw	r16,0(sp)
    42f4:	dec00304 	addi	sp,sp,12
    42f8:	000565c1 	jmpi	565c <__malloc_unlock>
    42fc:	2880004c 	andi	r2,r5,1
    4300:	3a4d883a 	add	r6,r7,r9
    4304:	1000071e 	bne	r2,zero,4324 <_free_r+0x218>
    4308:	80bffe17 	ldw	r2,-8(r16)
    430c:	4091c83a 	sub	r8,r8,r2
    4310:	41000317 	ldw	r4,12(r8)
    4314:	40c00217 	ldw	r3,8(r8)
    4318:	308d883a 	add	r6,r6,r2
    431c:	20c00215 	stw	r3,8(r4)
    4320:	19000315 	stw	r4,12(r3)
    4324:	00800074 	movhi	r2,1
    4328:	10bf9d04 	addi	r2,r2,-396
    432c:	11000017 	ldw	r4,0(r2)
    4330:	30c00054 	ori	r3,r6,1
    4334:	52000215 	stw	r8,8(r10)
    4338:	40c00115 	stw	r3,4(r8)
    433c:	313fa036 	bltu	r6,r4,41c0 <_free_r+0xb4>
    4340:	008000b4 	movhi	r2,2
    4344:	10a85a04 	addi	r2,r2,-24216
    4348:	11400017 	ldw	r5,0(r2)
    434c:	8809883a 	mov	r4,r17
    4350:	0003fe00 	call	3fe0 <_malloc_trim_r>
    4354:	003f9a06 	br	41c0 <_free_r+0xb4>
    4358:	00800104 	movi	r2,4
    435c:	10c0072e 	bgeu	r2,r3,437c <_free_r+0x270>
    4360:	00800504 	movi	r2,20
    4364:	10c01936 	bltu	r2,r3,43cc <_free_r+0x2c0>
    4368:	188016c4 	addi	r2,r3,91
    436c:	100690fa 	slli	r3,r2,3
    4370:	003fb306 	br	4240 <_free_r+0x134>
    4374:	01400044 	movi	r5,1
    4378:	003f7e06 	br	4174 <_free_r+0x68>
    437c:	3804d1ba 	srli	r2,r7,6
    4380:	10800e04 	addi	r2,r2,56
    4384:	100690fa 	slli	r3,r2,3
    4388:	003fad06 	br	4240 <_free_r+0x134>
    438c:	22000315 	stw	r8,12(r4)
    4390:	22000215 	stw	r8,8(r4)
    4394:	3a05883a 	add	r2,r7,r8
    4398:	38c00054 	ori	r3,r7,1
    439c:	11c00015 	stw	r7,0(r2)
    43a0:	41000215 	stw	r4,8(r8)
    43a4:	40c00115 	stw	r3,4(r8)
    43a8:	41000315 	stw	r4,12(r8)
    43ac:	003f8406 	br	41c0 <_free_r+0xb4>
    43b0:	1005d0ba 	srai	r2,r2,2
    43b4:	00c00044 	movi	r3,1
    43b8:	51000117 	ldw	r4,4(r10)
    43bc:	1886983a 	sll	r3,r3,r2
    43c0:	20c8b03a 	or	r4,r4,r3
    43c4:	51000115 	stw	r4,4(r10)
    43c8:	003fa706 	br	4268 <_free_r+0x15c>
    43cc:	00801504 	movi	r2,84
    43d0:	10c00436 	bltu	r2,r3,43e4 <_free_r+0x2d8>
    43d4:	3804d33a 	srli	r2,r7,12
    43d8:	10801b84 	addi	r2,r2,110
    43dc:	100690fa 	slli	r3,r2,3
    43e0:	003f9706 	br	4240 <_free_r+0x134>
    43e4:	00805504 	movi	r2,340
    43e8:	10c00436 	bltu	r2,r3,43fc <_free_r+0x2f0>
    43ec:	3804d3fa 	srli	r2,r7,15
    43f0:	10801dc4 	addi	r2,r2,119
    43f4:	100690fa 	slli	r3,r2,3
    43f8:	003f9106 	br	4240 <_free_r+0x134>
    43fc:	00815504 	movi	r2,1364
    4400:	10c0032e 	bgeu	r2,r3,4410 <_free_r+0x304>
    4404:	00801f84 	movi	r2,126
    4408:	00c0fc04 	movi	r3,1008
    440c:	003f8c06 	br	4240 <_free_r+0x134>
    4410:	3804d4ba 	srli	r2,r7,18
    4414:	10801f04 	addi	r2,r2,124
    4418:	100690fa 	slli	r3,r2,3
    441c:	003f8806 	br	4240 <_free_r+0x134>

00004420 <_fwalk_reent>:
    4420:	defff704 	addi	sp,sp,-36
    4424:	dcc00315 	stw	r19,12(sp)
    4428:	24c0b804 	addi	r19,r4,736
    442c:	dd800615 	stw	r22,24(sp)
    4430:	dd400515 	stw	r21,20(sp)
    4434:	dfc00815 	stw	ra,32(sp)
    4438:	ddc00715 	stw	r23,28(sp)
    443c:	dd000415 	stw	r20,16(sp)
    4440:	dc800215 	stw	r18,8(sp)
    4444:	dc400115 	stw	r17,4(sp)
    4448:	dc000015 	stw	r16,0(sp)
    444c:	202b883a 	mov	r21,r4
    4450:	282d883a 	mov	r22,r5
    4454:	0003d780 	call	3d78 <__sfp_lock_acquire>
    4458:	98002126 	beq	r19,zero,44e0 <_fwalk_reent+0xc0>
    445c:	002f883a 	mov	r23,zero
    4460:	9c800117 	ldw	r18,4(r19)
    4464:	9c000217 	ldw	r16,8(r19)
    4468:	90bfffc4 	addi	r2,r18,-1
    446c:	10000d16 	blt	r2,zero,44a4 <_fwalk_reent+0x84>
    4470:	0023883a 	mov	r17,zero
    4474:	053fffc4 	movi	r20,-1
    4478:	8080030f 	ldh	r2,12(r16)
    447c:	8c400044 	addi	r17,r17,1
    4480:	10000626 	beq	r2,zero,449c <_fwalk_reent+0x7c>
    4484:	8080038f 	ldh	r2,14(r16)
    4488:	800b883a 	mov	r5,r16
    448c:	a809883a 	mov	r4,r21
    4490:	15000226 	beq	r2,r20,449c <_fwalk_reent+0x7c>
    4494:	b03ee83a 	callr	r22
    4498:	b8aeb03a 	or	r23,r23,r2
    449c:	84001704 	addi	r16,r16,92
    44a0:	947ff51e 	bne	r18,r17,4478 <_fwalk_reent+0x58>
    44a4:	9cc00017 	ldw	r19,0(r19)
    44a8:	983fed1e 	bne	r19,zero,4460 <_fwalk_reent+0x40>
    44ac:	0003d7c0 	call	3d7c <__sfp_lock_release>
    44b0:	b805883a 	mov	r2,r23
    44b4:	dfc00817 	ldw	ra,32(sp)
    44b8:	ddc00717 	ldw	r23,28(sp)
    44bc:	dd800617 	ldw	r22,24(sp)
    44c0:	dd400517 	ldw	r21,20(sp)
    44c4:	dd000417 	ldw	r20,16(sp)
    44c8:	dcc00317 	ldw	r19,12(sp)
    44cc:	dc800217 	ldw	r18,8(sp)
    44d0:	dc400117 	ldw	r17,4(sp)
    44d4:	dc000017 	ldw	r16,0(sp)
    44d8:	dec00904 	addi	sp,sp,36
    44dc:	f800283a 	ret
    44e0:	002f883a 	mov	r23,zero
    44e4:	003ff106 	br	44ac <_fwalk_reent+0x8c>

000044e8 <_fwalk>:
    44e8:	defff804 	addi	sp,sp,-32
    44ec:	dcc00315 	stw	r19,12(sp)
    44f0:	24c0b804 	addi	r19,r4,736
    44f4:	dd400515 	stw	r21,20(sp)
    44f8:	dfc00715 	stw	ra,28(sp)
    44fc:	dd800615 	stw	r22,24(sp)
    4500:	dd000415 	stw	r20,16(sp)
    4504:	dc800215 	stw	r18,8(sp)
    4508:	dc400115 	stw	r17,4(sp)
    450c:	dc000015 	stw	r16,0(sp)
    4510:	282b883a 	mov	r21,r5
    4514:	0003d780 	call	3d78 <__sfp_lock_acquire>
    4518:	98001f26 	beq	r19,zero,4598 <_fwalk+0xb0>
    451c:	002d883a 	mov	r22,zero
    4520:	9c800117 	ldw	r18,4(r19)
    4524:	9c000217 	ldw	r16,8(r19)
    4528:	90bfffc4 	addi	r2,r18,-1
    452c:	10000c16 	blt	r2,zero,4560 <_fwalk+0x78>
    4530:	0023883a 	mov	r17,zero
    4534:	053fffc4 	movi	r20,-1
    4538:	8080030f 	ldh	r2,12(r16)
    453c:	8c400044 	addi	r17,r17,1
    4540:	10000526 	beq	r2,zero,4558 <_fwalk+0x70>
    4544:	8080038f 	ldh	r2,14(r16)
    4548:	8009883a 	mov	r4,r16
    454c:	15000226 	beq	r2,r20,4558 <_fwalk+0x70>
    4550:	a83ee83a 	callr	r21
    4554:	b0acb03a 	or	r22,r22,r2
    4558:	84001704 	addi	r16,r16,92
    455c:	947ff61e 	bne	r18,r17,4538 <_fwalk+0x50>
    4560:	9cc00017 	ldw	r19,0(r19)
    4564:	983fee1e 	bne	r19,zero,4520 <_fwalk+0x38>
    4568:	0003d7c0 	call	3d7c <__sfp_lock_release>
    456c:	b005883a 	mov	r2,r22
    4570:	dfc00717 	ldw	ra,28(sp)
    4574:	dd800617 	ldw	r22,24(sp)
    4578:	dd400517 	ldw	r21,20(sp)
    457c:	dd000417 	ldw	r20,16(sp)
    4580:	dcc00317 	ldw	r19,12(sp)
    4584:	dc800217 	ldw	r18,8(sp)
    4588:	dc400117 	ldw	r17,4(sp)
    458c:	dc000017 	ldw	r16,0(sp)
    4590:	dec00804 	addi	sp,sp,32
    4594:	f800283a 	ret
    4598:	002d883a 	mov	r22,zero
    459c:	003ff206 	br	4568 <_fwalk+0x80>

000045a0 <__smakebuf_r>:
    45a0:	2880030b 	ldhu	r2,12(r5)
    45a4:	deffed04 	addi	sp,sp,-76
    45a8:	dc401015 	stw	r17,64(sp)
    45ac:	1080008c 	andi	r2,r2,2
    45b0:	dc000f15 	stw	r16,60(sp)
    45b4:	dfc01215 	stw	ra,72(sp)
    45b8:	dc801115 	stw	r18,68(sp)
    45bc:	2821883a 	mov	r16,r5
    45c0:	2023883a 	mov	r17,r4
    45c4:	10000b26 	beq	r2,zero,45f4 <__smakebuf_r+0x54>
    45c8:	28c010c4 	addi	r3,r5,67
    45cc:	00800044 	movi	r2,1
    45d0:	28800515 	stw	r2,20(r5)
    45d4:	28c00415 	stw	r3,16(r5)
    45d8:	28c00015 	stw	r3,0(r5)
    45dc:	dfc01217 	ldw	ra,72(sp)
    45e0:	dc801117 	ldw	r18,68(sp)
    45e4:	dc401017 	ldw	r17,64(sp)
    45e8:	dc000f17 	ldw	r16,60(sp)
    45ec:	dec01304 	addi	sp,sp,76
    45f0:	f800283a 	ret
    45f4:	2940038f 	ldh	r5,14(r5)
    45f8:	28002116 	blt	r5,zero,4680 <__smakebuf_r+0xe0>
    45fc:	d80d883a 	mov	r6,sp
    4600:	00052d40 	call	52d4 <_fstat_r>
    4604:	10001e16 	blt	r2,zero,4680 <__smakebuf_r+0xe0>
    4608:	d8800117 	ldw	r2,4(sp)
    460c:	00e00014 	movui	r3,32768
    4610:	113c000c 	andi	r4,r2,61440
    4614:	20c03126 	beq	r4,r3,46dc <__smakebuf_r+0x13c>
    4618:	8080030b 	ldhu	r2,12(r16)
    461c:	00c80004 	movi	r3,8192
    4620:	10820014 	ori	r2,r2,2048
    4624:	8080030d 	sth	r2,12(r16)
    4628:	20c01e26 	beq	r4,r3,46a4 <__smakebuf_r+0x104>
    462c:	04810004 	movi	r18,1024
    4630:	8809883a 	mov	r4,r17
    4634:	900b883a 	mov	r5,r18
    4638:	00047340 	call	4734 <_malloc_r>
    463c:	1009883a 	mov	r4,r2
    4640:	10003126 	beq	r2,zero,4708 <__smakebuf_r+0x168>
    4644:	80c0030b 	ldhu	r3,12(r16)
    4648:	00800034 	movhi	r2,0
    464c:	108f9b04 	addi	r2,r2,15980
    4650:	88800f15 	stw	r2,60(r17)
    4654:	18c02014 	ori	r3,r3,128
    4658:	84800515 	stw	r18,20(r16)
    465c:	80c0030d 	sth	r3,12(r16)
    4660:	81000415 	stw	r4,16(r16)
    4664:	81000015 	stw	r4,0(r16)
    4668:	dfc01217 	ldw	ra,72(sp)
    466c:	dc801117 	ldw	r18,68(sp)
    4670:	dc401017 	ldw	r17,64(sp)
    4674:	dc000f17 	ldw	r16,60(sp)
    4678:	dec01304 	addi	sp,sp,76
    467c:	f800283a 	ret
    4680:	80c0030b 	ldhu	r3,12(r16)
    4684:	1880200c 	andi	r2,r3,128
    4688:	10000426 	beq	r2,zero,469c <__smakebuf_r+0xfc>
    468c:	04801004 	movi	r18,64
    4690:	18820014 	ori	r2,r3,2048
    4694:	8080030d 	sth	r2,12(r16)
    4698:	003fe506 	br	4630 <__smakebuf_r+0x90>
    469c:	04810004 	movi	r18,1024
    46a0:	003ffb06 	br	4690 <__smakebuf_r+0xf0>
    46a4:	8140038f 	ldh	r5,14(r16)
    46a8:	8809883a 	mov	r4,r17
    46ac:	00053480 	call	5348 <_isatty_r>
    46b0:	103fde26 	beq	r2,zero,462c <__smakebuf_r+0x8c>
    46b4:	8080030b 	ldhu	r2,12(r16)
    46b8:	80c010c4 	addi	r3,r16,67
    46bc:	04810004 	movi	r18,1024
    46c0:	10800054 	ori	r2,r2,1
    46c4:	8080030d 	sth	r2,12(r16)
    46c8:	00800044 	movi	r2,1
    46cc:	80c00415 	stw	r3,16(r16)
    46d0:	80800515 	stw	r2,20(r16)
    46d4:	80c00015 	stw	r3,0(r16)
    46d8:	003fd506 	br	4630 <__smakebuf_r+0x90>
    46dc:	80c00a17 	ldw	r3,40(r16)
    46e0:	00800034 	movhi	r2,0
    46e4:	1093e104 	addi	r2,r2,20356
    46e8:	18bfcb1e 	bne	r3,r2,4618 <__smakebuf_r+0x78>
    46ec:	8080030b 	ldhu	r2,12(r16)
    46f0:	00c10004 	movi	r3,1024
    46f4:	1825883a 	mov	r18,r3
    46f8:	10c4b03a 	or	r2,r2,r3
    46fc:	8080030d 	sth	r2,12(r16)
    4700:	80c01315 	stw	r3,76(r16)
    4704:	003fca06 	br	4630 <__smakebuf_r+0x90>
    4708:	8100030b 	ldhu	r4,12(r16)
    470c:	2080800c 	andi	r2,r4,512
    4710:	103fb21e 	bne	r2,zero,45dc <__smakebuf_r+0x3c>
    4714:	80c010c4 	addi	r3,r16,67
    4718:	21000094 	ori	r4,r4,2
    471c:	00800044 	movi	r2,1
    4720:	80800515 	stw	r2,20(r16)
    4724:	8100030d 	sth	r4,12(r16)
    4728:	80c00415 	stw	r3,16(r16)
    472c:	80c00015 	stw	r3,0(r16)
    4730:	003faa06 	br	45dc <__smakebuf_r+0x3c>

00004734 <_malloc_r>:
    4734:	defff604 	addi	sp,sp,-40
    4738:	28c002c4 	addi	r3,r5,11
    473c:	00800584 	movi	r2,22
    4740:	dc800215 	stw	r18,8(sp)
    4744:	dfc00915 	stw	ra,36(sp)
    4748:	df000815 	stw	fp,32(sp)
    474c:	ddc00715 	stw	r23,28(sp)
    4750:	dd800615 	stw	r22,24(sp)
    4754:	dd400515 	stw	r21,20(sp)
    4758:	dd000415 	stw	r20,16(sp)
    475c:	dcc00315 	stw	r19,12(sp)
    4760:	dc400115 	stw	r17,4(sp)
    4764:	dc000015 	stw	r16,0(sp)
    4768:	2025883a 	mov	r18,r4
    476c:	10c01236 	bltu	r2,r3,47b8 <_malloc_r+0x84>
    4770:	04400404 	movi	r17,16
    4774:	8940142e 	bgeu	r17,r5,47c8 <_malloc_r+0x94>
    4778:	00800304 	movi	r2,12
    477c:	0007883a 	mov	r3,zero
    4780:	90800015 	stw	r2,0(r18)
    4784:	1805883a 	mov	r2,r3
    4788:	dfc00917 	ldw	ra,36(sp)
    478c:	df000817 	ldw	fp,32(sp)
    4790:	ddc00717 	ldw	r23,28(sp)
    4794:	dd800617 	ldw	r22,24(sp)
    4798:	dd400517 	ldw	r21,20(sp)
    479c:	dd000417 	ldw	r20,16(sp)
    47a0:	dcc00317 	ldw	r19,12(sp)
    47a4:	dc800217 	ldw	r18,8(sp)
    47a8:	dc400117 	ldw	r17,4(sp)
    47ac:	dc000017 	ldw	r16,0(sp)
    47b0:	dec00a04 	addi	sp,sp,40
    47b4:	f800283a 	ret
    47b8:	00bffe04 	movi	r2,-8
    47bc:	18a2703a 	and	r17,r3,r2
    47c0:	883fed16 	blt	r17,zero,4778 <_malloc_r+0x44>
    47c4:	897fec36 	bltu	r17,r5,4778 <_malloc_r+0x44>
    47c8:	9009883a 	mov	r4,r18
    47cc:	00056580 	call	5658 <__malloc_lock>
    47d0:	00807dc4 	movi	r2,503
    47d4:	14402b2e 	bgeu	r2,r17,4884 <_malloc_r+0x150>
    47d8:	8806d27a 	srli	r3,r17,9
    47dc:	18003f1e 	bne	r3,zero,48dc <_malloc_r+0x1a8>
    47e0:	880cd0fa 	srli	r6,r17,3
    47e4:	300490fa 	slli	r2,r6,3
    47e8:	02c00074 	movhi	r11,1
    47ec:	5afe9004 	addi	r11,r11,-1472
    47f0:	12cb883a 	add	r5,r2,r11
    47f4:	2c000317 	ldw	r16,12(r5)
    47f8:	580f883a 	mov	r7,r11
    47fc:	2c00041e 	bne	r5,r16,4810 <_malloc_r+0xdc>
    4800:	00000a06 	br	482c <_malloc_r+0xf8>
    4804:	1800860e 	bge	r3,zero,4a20 <_malloc_r+0x2ec>
    4808:	84000317 	ldw	r16,12(r16)
    480c:	2c000726 	beq	r5,r16,482c <_malloc_r+0xf8>
    4810:	80800117 	ldw	r2,4(r16)
    4814:	00ffff04 	movi	r3,-4
    4818:	10c8703a 	and	r4,r2,r3
    481c:	2447c83a 	sub	r3,r4,r17
    4820:	008003c4 	movi	r2,15
    4824:	10fff70e 	bge	r2,r3,4804 <_malloc_r+0xd0>
    4828:	31bfffc4 	addi	r6,r6,-1
    482c:	32400044 	addi	r9,r6,1
    4830:	02800074 	movhi	r10,1
    4834:	52be9204 	addi	r10,r10,-1464
    4838:	54000217 	ldw	r16,8(r10)
    483c:	8280a026 	beq	r16,r10,4ac0 <_malloc_r+0x38c>
    4840:	80800117 	ldw	r2,4(r16)
    4844:	00ffff04 	movi	r3,-4
    4848:	10ca703a 	and	r5,r2,r3
    484c:	2c4dc83a 	sub	r6,r5,r17
    4850:	008003c4 	movi	r2,15
    4854:	11808316 	blt	r2,r6,4a64 <_malloc_r+0x330>
    4858:	52800315 	stw	r10,12(r10)
    485c:	52800215 	stw	r10,8(r10)
    4860:	30002916 	blt	r6,zero,4908 <_malloc_r+0x1d4>
    4864:	8147883a 	add	r3,r16,r5
    4868:	18800117 	ldw	r2,4(r3)
    486c:	9009883a 	mov	r4,r18
    4870:	10800054 	ori	r2,r2,1
    4874:	18800115 	stw	r2,4(r3)
    4878:	000565c0 	call	565c <__malloc_unlock>
    487c:	80c00204 	addi	r3,r16,8
    4880:	003fc006 	br	4784 <_malloc_r+0x50>
    4884:	02c00074 	movhi	r11,1
    4888:	5afe9004 	addi	r11,r11,-1472
    488c:	8ac5883a 	add	r2,r17,r11
    4890:	14000317 	ldw	r16,12(r2)
    4894:	580f883a 	mov	r7,r11
    4898:	8806d0fa 	srli	r3,r17,3
    489c:	14006c26 	beq	r2,r16,4a50 <_malloc_r+0x31c>
    48a0:	80c00117 	ldw	r3,4(r16)
    48a4:	00bfff04 	movi	r2,-4
    48a8:	81800317 	ldw	r6,12(r16)
    48ac:	1886703a 	and	r3,r3,r2
    48b0:	80c7883a 	add	r3,r16,r3
    48b4:	18800117 	ldw	r2,4(r3)
    48b8:	81400217 	ldw	r5,8(r16)
    48bc:	9009883a 	mov	r4,r18
    48c0:	10800054 	ori	r2,r2,1
    48c4:	18800115 	stw	r2,4(r3)
    48c8:	31400215 	stw	r5,8(r6)
    48cc:	29800315 	stw	r6,12(r5)
    48d0:	000565c0 	call	565c <__malloc_unlock>
    48d4:	80c00204 	addi	r3,r16,8
    48d8:	003faa06 	br	4784 <_malloc_r+0x50>
    48dc:	00800104 	movi	r2,4
    48e0:	10c0052e 	bgeu	r2,r3,48f8 <_malloc_r+0x1c4>
    48e4:	00800504 	movi	r2,20
    48e8:	10c07836 	bltu	r2,r3,4acc <_malloc_r+0x398>
    48ec:	198016c4 	addi	r6,r3,91
    48f0:	300490fa 	slli	r2,r6,3
    48f4:	003fbc06 	br	47e8 <_malloc_r+0xb4>
    48f8:	8804d1ba 	srli	r2,r17,6
    48fc:	11800e04 	addi	r6,r2,56
    4900:	300490fa 	slli	r2,r6,3
    4904:	003fb806 	br	47e8 <_malloc_r+0xb4>
    4908:	00807fc4 	movi	r2,511
    490c:	1140bb36 	bltu	r2,r5,4bfc <_malloc_r+0x4c8>
    4910:	2806d0fa 	srli	r3,r5,3
    4914:	573ffe04 	addi	fp,r10,-8
    4918:	00800044 	movi	r2,1
    491c:	180890fa 	slli	r4,r3,3
    4920:	1807d0ba 	srai	r3,r3,2
    4924:	e1c00117 	ldw	r7,4(fp)
    4928:	5909883a 	add	r4,r11,r4
    492c:	21400217 	ldw	r5,8(r4)
    4930:	10c4983a 	sll	r2,r2,r3
    4934:	81000315 	stw	r4,12(r16)
    4938:	81400215 	stw	r5,8(r16)
    493c:	388eb03a 	or	r7,r7,r2
    4940:	2c000315 	stw	r16,12(r5)
    4944:	24000215 	stw	r16,8(r4)
    4948:	e1c00115 	stw	r7,4(fp)
    494c:	4807883a 	mov	r3,r9
    4950:	4800cd16 	blt	r9,zero,4c88 <_malloc_r+0x554>
    4954:	1807d0ba 	srai	r3,r3,2
    4958:	00800044 	movi	r2,1
    495c:	10c8983a 	sll	r4,r2,r3
    4960:	39004436 	bltu	r7,r4,4a74 <_malloc_r+0x340>
    4964:	21c4703a 	and	r2,r4,r7
    4968:	10000a1e 	bne	r2,zero,4994 <_malloc_r+0x260>
    496c:	2109883a 	add	r4,r4,r4
    4970:	00bfff04 	movi	r2,-4
    4974:	4884703a 	and	r2,r9,r2
    4978:	3906703a 	and	r3,r7,r4
    497c:	12400104 	addi	r9,r2,4
    4980:	1800041e 	bne	r3,zero,4994 <_malloc_r+0x260>
    4984:	2109883a 	add	r4,r4,r4
    4988:	3904703a 	and	r2,r7,r4
    498c:	4a400104 	addi	r9,r9,4
    4990:	103ffc26 	beq	r2,zero,4984 <_malloc_r+0x250>
    4994:	480490fa 	slli	r2,r9,3
    4998:	4819883a 	mov	r12,r9
    499c:	023fff04 	movi	r8,-4
    49a0:	589b883a 	add	r13,r11,r2
    49a4:	6807883a 	mov	r3,r13
    49a8:	014003c4 	movi	r5,15
    49ac:	1c000317 	ldw	r16,12(r3)
    49b0:	1c00041e 	bne	r3,r16,49c4 <_malloc_r+0x290>
    49b4:	0000a706 	br	4c54 <_malloc_r+0x520>
    49b8:	3000ab0e 	bge	r6,zero,4c68 <_malloc_r+0x534>
    49bc:	84000317 	ldw	r16,12(r16)
    49c0:	1c00a426 	beq	r3,r16,4c54 <_malloc_r+0x520>
    49c4:	80800117 	ldw	r2,4(r16)
    49c8:	1204703a 	and	r2,r2,r8
    49cc:	144dc83a 	sub	r6,r2,r17
    49d0:	29bff90e 	bge	r5,r6,49b8 <_malloc_r+0x284>
    49d4:	81000317 	ldw	r4,12(r16)
    49d8:	80c00217 	ldw	r3,8(r16)
    49dc:	89400054 	ori	r5,r17,1
    49e0:	8445883a 	add	r2,r16,r17
    49e4:	20c00215 	stw	r3,8(r4)
    49e8:	19000315 	stw	r4,12(r3)
    49ec:	81400115 	stw	r5,4(r16)
    49f0:	1187883a 	add	r3,r2,r6
    49f4:	31000054 	ori	r4,r6,1
    49f8:	50800315 	stw	r2,12(r10)
    49fc:	50800215 	stw	r2,8(r10)
    4a00:	19800015 	stw	r6,0(r3)
    4a04:	11000115 	stw	r4,4(r2)
    4a08:	12800215 	stw	r10,8(r2)
    4a0c:	12800315 	stw	r10,12(r2)
    4a10:	9009883a 	mov	r4,r18
    4a14:	000565c0 	call	565c <__malloc_unlock>
    4a18:	80c00204 	addi	r3,r16,8
    4a1c:	003f5906 	br	4784 <_malloc_r+0x50>
    4a20:	8109883a 	add	r4,r16,r4
    4a24:	20800117 	ldw	r2,4(r4)
    4a28:	80c00217 	ldw	r3,8(r16)
    4a2c:	81400317 	ldw	r5,12(r16)
    4a30:	10800054 	ori	r2,r2,1
    4a34:	20800115 	stw	r2,4(r4)
    4a38:	28c00215 	stw	r3,8(r5)
    4a3c:	19400315 	stw	r5,12(r3)
    4a40:	9009883a 	mov	r4,r18
    4a44:	000565c0 	call	565c <__malloc_unlock>
    4a48:	80c00204 	addi	r3,r16,8
    4a4c:	003f4d06 	br	4784 <_malloc_r+0x50>
    4a50:	80800204 	addi	r2,r16,8
    4a54:	14000317 	ldw	r16,12(r2)
    4a58:	143f911e 	bne	r2,r16,48a0 <_malloc_r+0x16c>
    4a5c:	1a400084 	addi	r9,r3,2
    4a60:	003f7306 	br	4830 <_malloc_r+0xfc>
    4a64:	88c00054 	ori	r3,r17,1
    4a68:	8445883a 	add	r2,r16,r17
    4a6c:	80c00115 	stw	r3,4(r16)
    4a70:	003fdf06 	br	49f0 <_malloc_r+0x2bc>
    4a74:	e4000217 	ldw	r16,8(fp)
    4a78:	00bfff04 	movi	r2,-4
    4a7c:	80c00117 	ldw	r3,4(r16)
    4a80:	802d883a 	mov	r22,r16
    4a84:	18aa703a 	and	r21,r3,r2
    4a88:	ac401636 	bltu	r21,r17,4ae4 <_malloc_r+0x3b0>
    4a8c:	ac49c83a 	sub	r4,r21,r17
    4a90:	008003c4 	movi	r2,15
    4a94:	1100130e 	bge	r2,r4,4ae4 <_malloc_r+0x3b0>
    4a98:	88800054 	ori	r2,r17,1
    4a9c:	8447883a 	add	r3,r16,r17
    4aa0:	80800115 	stw	r2,4(r16)
    4aa4:	20800054 	ori	r2,r4,1
    4aa8:	18800115 	stw	r2,4(r3)
    4aac:	e0c00215 	stw	r3,8(fp)
    4ab0:	9009883a 	mov	r4,r18
    4ab4:	000565c0 	call	565c <__malloc_unlock>
    4ab8:	80c00204 	addi	r3,r16,8
    4abc:	003f3106 	br	4784 <_malloc_r+0x50>
    4ac0:	39c00117 	ldw	r7,4(r7)
    4ac4:	573ffe04 	addi	fp,r10,-8
    4ac8:	003fa006 	br	494c <_malloc_r+0x218>
    4acc:	00801504 	movi	r2,84
    4ad0:	10c06736 	bltu	r2,r3,4c70 <_malloc_r+0x53c>
    4ad4:	8804d33a 	srli	r2,r17,12
    4ad8:	11801b84 	addi	r6,r2,110
    4adc:	300490fa 	slli	r2,r6,3
    4ae0:	003f4106 	br	47e8 <_malloc_r+0xb4>
    4ae4:	d088c817 	ldw	r2,8992(gp)
    4ae8:	d0e00c17 	ldw	r3,-32720(gp)
    4aec:	053fffc4 	movi	r20,-1
    4af0:	10800404 	addi	r2,r2,16
    4af4:	88a7883a 	add	r19,r17,r2
    4af8:	1d000326 	beq	r3,r20,4b08 <_malloc_r+0x3d4>
    4afc:	98c3ffc4 	addi	r3,r19,4095
    4b00:	00bc0004 	movi	r2,-4096
    4b04:	18a6703a 	and	r19,r3,r2
    4b08:	9009883a 	mov	r4,r18
    4b0c:	980b883a 	mov	r5,r19
    4b10:	0004f0c0 	call	4f0c <_sbrk_r>
    4b14:	1009883a 	mov	r4,r2
    4b18:	15000426 	beq	r2,r20,4b2c <_malloc_r+0x3f8>
    4b1c:	854b883a 	add	r5,r16,r21
    4b20:	1029883a 	mov	r20,r2
    4b24:	11405a2e 	bgeu	r2,r5,4c90 <_malloc_r+0x55c>
    4b28:	87000c26 	beq	r16,fp,4b5c <_malloc_r+0x428>
    4b2c:	e4000217 	ldw	r16,8(fp)
    4b30:	80c00117 	ldw	r3,4(r16)
    4b34:	00bfff04 	movi	r2,-4
    4b38:	1884703a 	and	r2,r3,r2
    4b3c:	14400336 	bltu	r2,r17,4b4c <_malloc_r+0x418>
    4b40:	1449c83a 	sub	r4,r2,r17
    4b44:	008003c4 	movi	r2,15
    4b48:	113fd316 	blt	r2,r4,4a98 <_malloc_r+0x364>
    4b4c:	9009883a 	mov	r4,r18
    4b50:	000565c0 	call	565c <__malloc_unlock>
    4b54:	0007883a 	mov	r3,zero
    4b58:	003f0a06 	br	4784 <_malloc_r+0x50>
    4b5c:	05c000b4 	movhi	r23,2
    4b60:	bde85d04 	addi	r23,r23,-24204
    4b64:	b8800017 	ldw	r2,0(r23)
    4b68:	988d883a 	add	r6,r19,r2
    4b6c:	b9800015 	stw	r6,0(r23)
    4b70:	d0e00c17 	ldw	r3,-32720(gp)
    4b74:	00bfffc4 	movi	r2,-1
    4b78:	18808e26 	beq	r3,r2,4db4 <_malloc_r+0x680>
    4b7c:	2145c83a 	sub	r2,r4,r5
    4b80:	3085883a 	add	r2,r6,r2
    4b84:	b8800015 	stw	r2,0(r23)
    4b88:	20c001cc 	andi	r3,r4,7
    4b8c:	18005f1e 	bne	r3,zero,4d0c <_malloc_r+0x5d8>
    4b90:	000b883a 	mov	r5,zero
    4b94:	a4c5883a 	add	r2,r20,r19
    4b98:	1083ffcc 	andi	r2,r2,4095
    4b9c:	00c40004 	movi	r3,4096
    4ba0:	1887c83a 	sub	r3,r3,r2
    4ba4:	28e7883a 	add	r19,r5,r3
    4ba8:	9009883a 	mov	r4,r18
    4bac:	980b883a 	mov	r5,r19
    4bb0:	0004f0c0 	call	4f0c <_sbrk_r>
    4bb4:	1007883a 	mov	r3,r2
    4bb8:	00bfffc4 	movi	r2,-1
    4bbc:	18807a26 	beq	r3,r2,4da8 <_malloc_r+0x674>
    4bc0:	1d05c83a 	sub	r2,r3,r20
    4bc4:	9885883a 	add	r2,r19,r2
    4bc8:	10c00054 	ori	r3,r2,1
    4bcc:	b8800017 	ldw	r2,0(r23)
    4bd0:	a021883a 	mov	r16,r20
    4bd4:	a0c00115 	stw	r3,4(r20)
    4bd8:	9885883a 	add	r2,r19,r2
    4bdc:	b8800015 	stw	r2,0(r23)
    4be0:	e5000215 	stw	r20,8(fp)
    4be4:	b7003626 	beq	r22,fp,4cc0 <_malloc_r+0x58c>
    4be8:	018003c4 	movi	r6,15
    4bec:	35404b36 	bltu	r6,r21,4d1c <_malloc_r+0x5e8>
    4bf0:	00800044 	movi	r2,1
    4bf4:	a0800115 	stw	r2,4(r20)
    4bf8:	003fcd06 	br	4b30 <_malloc_r+0x3fc>
    4bfc:	2808d27a 	srli	r4,r5,9
    4c00:	2000371e 	bne	r4,zero,4ce0 <_malloc_r+0x5ac>
    4c04:	2808d0fa 	srli	r4,r5,3
    4c08:	200690fa 	slli	r3,r4,3
    4c0c:	1ad1883a 	add	r8,r3,r11
    4c10:	41800217 	ldw	r6,8(r8)
    4c14:	41805b26 	beq	r8,r6,4d84 <_malloc_r+0x650>
    4c18:	30800117 	ldw	r2,4(r6)
    4c1c:	00ffff04 	movi	r3,-4
    4c20:	10c4703a 	and	r2,r2,r3
    4c24:	2880022e 	bgeu	r5,r2,4c30 <_malloc_r+0x4fc>
    4c28:	31800217 	ldw	r6,8(r6)
    4c2c:	41bffa1e 	bne	r8,r6,4c18 <_malloc_r+0x4e4>
    4c30:	32000317 	ldw	r8,12(r6)
    4c34:	39c00117 	ldw	r7,4(r7)
    4c38:	82000315 	stw	r8,12(r16)
    4c3c:	81800215 	stw	r6,8(r16)
    4c40:	07000074 	movhi	fp,1
    4c44:	e73e9004 	addi	fp,fp,-1472
    4c48:	34000315 	stw	r16,12(r6)
    4c4c:	44000215 	stw	r16,8(r8)
    4c50:	003f3e06 	br	494c <_malloc_r+0x218>
    4c54:	63000044 	addi	r12,r12,1
    4c58:	608000cc 	andi	r2,r12,3
    4c5c:	10005d26 	beq	r2,zero,4dd4 <_malloc_r+0x6a0>
    4c60:	18c00204 	addi	r3,r3,8
    4c64:	003f5106 	br	49ac <_malloc_r+0x278>
    4c68:	8089883a 	add	r4,r16,r2
    4c6c:	003f6d06 	br	4a24 <_malloc_r+0x2f0>
    4c70:	00805504 	movi	r2,340
    4c74:	10c02036 	bltu	r2,r3,4cf8 <_malloc_r+0x5c4>
    4c78:	8804d3fa 	srli	r2,r17,15
    4c7c:	11801dc4 	addi	r6,r2,119
    4c80:	300490fa 	slli	r2,r6,3
    4c84:	003ed806 	br	47e8 <_malloc_r+0xb4>
    4c88:	48c000c4 	addi	r3,r9,3
    4c8c:	003f3106 	br	4954 <_malloc_r+0x220>
    4c90:	05c000b4 	movhi	r23,2
    4c94:	bde85d04 	addi	r23,r23,-24204
    4c98:	b8800017 	ldw	r2,0(r23)
    4c9c:	988d883a 	add	r6,r19,r2
    4ca0:	b9800015 	stw	r6,0(r23)
    4ca4:	293fb21e 	bne	r5,r4,4b70 <_malloc_r+0x43c>
    4ca8:	2083ffcc 	andi	r2,r4,4095
    4cac:	103fb01e 	bne	r2,zero,4b70 <_malloc_r+0x43c>
    4cb0:	e4000217 	ldw	r16,8(fp)
    4cb4:	9d45883a 	add	r2,r19,r21
    4cb8:	10800054 	ori	r2,r2,1
    4cbc:	80800115 	stw	r2,4(r16)
    4cc0:	b8c00017 	ldw	r3,0(r23)
    4cc4:	d088c917 	ldw	r2,8996(gp)
    4cc8:	10c0012e 	bgeu	r2,r3,4cd0 <_malloc_r+0x59c>
    4ccc:	d0c8c915 	stw	r3,8996(gp)
    4cd0:	d088ca17 	ldw	r2,9000(gp)
    4cd4:	10ff962e 	bgeu	r2,r3,4b30 <_malloc_r+0x3fc>
    4cd8:	d0c8ca15 	stw	r3,9000(gp)
    4cdc:	003f9406 	br	4b30 <_malloc_r+0x3fc>
    4ce0:	00800104 	movi	r2,4
    4ce4:	11001e36 	bltu	r2,r4,4d60 <_malloc_r+0x62c>
    4ce8:	2804d1ba 	srli	r2,r5,6
    4cec:	11000e04 	addi	r4,r2,56
    4cf0:	200690fa 	slli	r3,r4,3
    4cf4:	003fc506 	br	4c0c <_malloc_r+0x4d8>
    4cf8:	00815504 	movi	r2,1364
    4cfc:	10c01d2e 	bgeu	r2,r3,4d74 <_malloc_r+0x640>
    4d00:	01801f84 	movi	r6,126
    4d04:	0080fc04 	movi	r2,1008
    4d08:	003eb706 	br	47e8 <_malloc_r+0xb4>
    4d0c:	00800204 	movi	r2,8
    4d10:	10cbc83a 	sub	r5,r2,r3
    4d14:	2169883a 	add	r20,r4,r5
    4d18:	003f9e06 	br	4b94 <_malloc_r+0x460>
    4d1c:	00bffe04 	movi	r2,-8
    4d20:	a93ffd04 	addi	r4,r21,-12
    4d24:	2088703a 	and	r4,r4,r2
    4d28:	b10b883a 	add	r5,r22,r4
    4d2c:	00c00144 	movi	r3,5
    4d30:	28c00215 	stw	r3,8(r5)
    4d34:	28c00115 	stw	r3,4(r5)
    4d38:	b0800117 	ldw	r2,4(r22)
    4d3c:	1080004c 	andi	r2,r2,1
    4d40:	2084b03a 	or	r2,r4,r2
    4d44:	b0800115 	stw	r2,4(r22)
    4d48:	313fdd2e 	bgeu	r6,r4,4cc0 <_malloc_r+0x58c>
    4d4c:	b1400204 	addi	r5,r22,8
    4d50:	9009883a 	mov	r4,r18
    4d54:	000410c0 	call	410c <_free_r>
    4d58:	e4000217 	ldw	r16,8(fp)
    4d5c:	003fd806 	br	4cc0 <_malloc_r+0x58c>
    4d60:	00800504 	movi	r2,20
    4d64:	11001536 	bltu	r2,r4,4dbc <_malloc_r+0x688>
    4d68:	210016c4 	addi	r4,r4,91
    4d6c:	200690fa 	slli	r3,r4,3
    4d70:	003fa606 	br	4c0c <_malloc_r+0x4d8>
    4d74:	8804d4ba 	srli	r2,r17,18
    4d78:	11801f04 	addi	r6,r2,124
    4d7c:	300490fa 	slli	r2,r6,3
    4d80:	003e9906 	br	47e8 <_malloc_r+0xb4>
    4d84:	2009d0ba 	srai	r4,r4,2
    4d88:	01400074 	movhi	r5,1
    4d8c:	297e9004 	addi	r5,r5,-1472
    4d90:	00c00044 	movi	r3,1
    4d94:	28800117 	ldw	r2,4(r5)
    4d98:	1906983a 	sll	r3,r3,r4
    4d9c:	10c4b03a 	or	r2,r2,r3
    4da0:	28800115 	stw	r2,4(r5)
    4da4:	003fa306 	br	4c34 <_malloc_r+0x500>
    4da8:	0027883a 	mov	r19,zero
    4dac:	00c00044 	movi	r3,1
    4db0:	003f8606 	br	4bcc <_malloc_r+0x498>
    4db4:	d1200c15 	stw	r4,-32720(gp)
    4db8:	003f7306 	br	4b88 <_malloc_r+0x454>
    4dbc:	00801504 	movi	r2,84
    4dc0:	11001936 	bltu	r2,r4,4e28 <_malloc_r+0x6f4>
    4dc4:	2804d33a 	srli	r2,r5,12
    4dc8:	11001b84 	addi	r4,r2,110
    4dcc:	200690fa 	slli	r3,r4,3
    4dd0:	003f8e06 	br	4c0c <_malloc_r+0x4d8>
    4dd4:	480b883a 	mov	r5,r9
    4dd8:	6807883a 	mov	r3,r13
    4ddc:	288000cc 	andi	r2,r5,3
    4de0:	18fffe04 	addi	r3,r3,-8
    4de4:	297fffc4 	addi	r5,r5,-1
    4de8:	10001526 	beq	r2,zero,4e40 <_malloc_r+0x70c>
    4dec:	18800217 	ldw	r2,8(r3)
    4df0:	10fffa26 	beq	r2,r3,4ddc <_malloc_r+0x6a8>
    4df4:	2109883a 	add	r4,r4,r4
    4df8:	393f1e36 	bltu	r7,r4,4a74 <_malloc_r+0x340>
    4dfc:	203f1d26 	beq	r4,zero,4a74 <_malloc_r+0x340>
    4e00:	21c4703a 	and	r2,r4,r7
    4e04:	10000226 	beq	r2,zero,4e10 <_malloc_r+0x6dc>
    4e08:	6013883a 	mov	r9,r12
    4e0c:	003ee106 	br	4994 <_malloc_r+0x260>
    4e10:	2109883a 	add	r4,r4,r4
    4e14:	3904703a 	and	r2,r7,r4
    4e18:	63000104 	addi	r12,r12,4
    4e1c:	103ffc26 	beq	r2,zero,4e10 <_malloc_r+0x6dc>
    4e20:	6013883a 	mov	r9,r12
    4e24:	003edb06 	br	4994 <_malloc_r+0x260>
    4e28:	00805504 	movi	r2,340
    4e2c:	11000836 	bltu	r2,r4,4e50 <_malloc_r+0x71c>
    4e30:	2804d3fa 	srli	r2,r5,15
    4e34:	11001dc4 	addi	r4,r2,119
    4e38:	200690fa 	slli	r3,r4,3
    4e3c:	003f7306 	br	4c0c <_malloc_r+0x4d8>
    4e40:	0104303a 	nor	r2,zero,r4
    4e44:	388e703a 	and	r7,r7,r2
    4e48:	e1c00115 	stw	r7,4(fp)
    4e4c:	003fe906 	br	4df4 <_malloc_r+0x6c0>
    4e50:	00815504 	movi	r2,1364
    4e54:	1100032e 	bgeu	r2,r4,4e64 <_malloc_r+0x730>
    4e58:	01001f84 	movi	r4,126
    4e5c:	00c0fc04 	movi	r3,1008
    4e60:	003f6a06 	br	4c0c <_malloc_r+0x4d8>
    4e64:	2804d4ba 	srli	r2,r5,18
    4e68:	11001f04 	addi	r4,r2,124
    4e6c:	200690fa 	slli	r3,r4,3
    4e70:	003f6606 	br	4c0c <_malloc_r+0x4d8>

00004e74 <memset>:
    4e74:	008000c4 	movi	r2,3
    4e78:	29403fcc 	andi	r5,r5,255
    4e7c:	2007883a 	mov	r3,r4
    4e80:	1180022e 	bgeu	r2,r6,4e8c <memset+0x18>
    4e84:	2084703a 	and	r2,r4,r2
    4e88:	10000826 	beq	r2,zero,4eac <memset+0x38>
    4e8c:	30000526 	beq	r6,zero,4ea4 <memset+0x30>
    4e90:	2805883a 	mov	r2,r5
    4e94:	30cd883a 	add	r6,r6,r3
    4e98:	18800005 	stb	r2,0(r3)
    4e9c:	18c00044 	addi	r3,r3,1
    4ea0:	19bffd1e 	bne	r3,r6,4e98 <memset+0x24>
    4ea4:	2005883a 	mov	r2,r4
    4ea8:	f800283a 	ret
    4eac:	2804923a 	slli	r2,r5,8
    4eb0:	020003c4 	movi	r8,15
    4eb4:	200f883a 	mov	r7,r4
    4eb8:	2884b03a 	or	r2,r5,r2
    4ebc:	1006943a 	slli	r3,r2,16
    4ec0:	10c6b03a 	or	r3,r2,r3
    4ec4:	41800a2e 	bgeu	r8,r6,4ef0 <memset+0x7c>
    4ec8:	4005883a 	mov	r2,r8
    4ecc:	31bffc04 	addi	r6,r6,-16
    4ed0:	38c00015 	stw	r3,0(r7)
    4ed4:	38c00115 	stw	r3,4(r7)
    4ed8:	38c00215 	stw	r3,8(r7)
    4edc:	38c00315 	stw	r3,12(r7)
    4ee0:	39c00404 	addi	r7,r7,16
    4ee4:	11bff936 	bltu	r2,r6,4ecc <memset+0x58>
    4ee8:	008000c4 	movi	r2,3
    4eec:	1180052e 	bgeu	r2,r6,4f04 <memset+0x90>
    4ef0:	31bfff04 	addi	r6,r6,-4
    4ef4:	008000c4 	movi	r2,3
    4ef8:	38c00015 	stw	r3,0(r7)
    4efc:	39c00104 	addi	r7,r7,4
    4f00:	11bffb36 	bltu	r2,r6,4ef0 <memset+0x7c>
    4f04:	3807883a 	mov	r3,r7
    4f08:	003fe006 	br	4e8c <memset+0x18>

00004f0c <_sbrk_r>:
    4f0c:	defffd04 	addi	sp,sp,-12
    4f10:	dc000015 	stw	r16,0(sp)
    4f14:	040000b4 	movhi	r16,2
    4f18:	84285904 	addi	r16,r16,-24220
    4f1c:	dc400115 	stw	r17,4(sp)
    4f20:	80000015 	stw	zero,0(r16)
    4f24:	2023883a 	mov	r17,r4
    4f28:	2809883a 	mov	r4,r5
    4f2c:	dfc00215 	stw	ra,8(sp)
    4f30:	00057580 	call	5758 <sbrk>
    4f34:	1007883a 	mov	r3,r2
    4f38:	00bfffc4 	movi	r2,-1
    4f3c:	18800626 	beq	r3,r2,4f58 <_sbrk_r+0x4c>
    4f40:	1805883a 	mov	r2,r3
    4f44:	dfc00217 	ldw	ra,8(sp)
    4f48:	dc400117 	ldw	r17,4(sp)
    4f4c:	dc000017 	ldw	r16,0(sp)
    4f50:	dec00304 	addi	sp,sp,12
    4f54:	f800283a 	ret
    4f58:	80800017 	ldw	r2,0(r16)
    4f5c:	103ff826 	beq	r2,zero,4f40 <_sbrk_r+0x34>
    4f60:	88800015 	stw	r2,0(r17)
    4f64:	1805883a 	mov	r2,r3
    4f68:	dfc00217 	ldw	ra,8(sp)
    4f6c:	dc400117 	ldw	r17,4(sp)
    4f70:	dc000017 	ldw	r16,0(sp)
    4f74:	dec00304 	addi	sp,sp,12
    4f78:	f800283a 	ret

00004f7c <__sclose>:
    4f7c:	2940038f 	ldh	r5,14(r5)
    4f80:	00051401 	jmpi	5140 <_close_r>

00004f84 <__sseek>:
    4f84:	defffe04 	addi	sp,sp,-8
    4f88:	dc000015 	stw	r16,0(sp)
    4f8c:	2821883a 	mov	r16,r5
    4f90:	2940038f 	ldh	r5,14(r5)
    4f94:	dfc00115 	stw	ra,4(sp)
    4f98:	00053b80 	call	53b8 <_lseek_r>
    4f9c:	1007883a 	mov	r3,r2
    4fa0:	00bfffc4 	movi	r2,-1
    4fa4:	18800926 	beq	r3,r2,4fcc <__sseek+0x48>
    4fa8:	8080030b 	ldhu	r2,12(r16)
    4fac:	80c01415 	stw	r3,80(r16)
    4fb0:	10840014 	ori	r2,r2,4096
    4fb4:	8080030d 	sth	r2,12(r16)
    4fb8:	1805883a 	mov	r2,r3
    4fbc:	dfc00117 	ldw	ra,4(sp)
    4fc0:	dc000017 	ldw	r16,0(sp)
    4fc4:	dec00204 	addi	sp,sp,8
    4fc8:	f800283a 	ret
    4fcc:	8080030b 	ldhu	r2,12(r16)
    4fd0:	10bbffcc 	andi	r2,r2,61439
    4fd4:	8080030d 	sth	r2,12(r16)
    4fd8:	1805883a 	mov	r2,r3
    4fdc:	dfc00117 	ldw	ra,4(sp)
    4fe0:	dc000017 	ldw	r16,0(sp)
    4fe4:	dec00204 	addi	sp,sp,8
    4fe8:	f800283a 	ret

00004fec <__swrite>:
    4fec:	2880030b 	ldhu	r2,12(r5)
    4ff0:	defffb04 	addi	sp,sp,-20
    4ff4:	dcc00315 	stw	r19,12(sp)
    4ff8:	1080400c 	andi	r2,r2,256
    4ffc:	dc800215 	stw	r18,8(sp)
    5000:	dc400115 	stw	r17,4(sp)
    5004:	dc000015 	stw	r16,0(sp)
    5008:	3027883a 	mov	r19,r6
    500c:	3825883a 	mov	r18,r7
    5010:	dfc00415 	stw	ra,16(sp)
    5014:	2821883a 	mov	r16,r5
    5018:	000d883a 	mov	r6,zero
    501c:	01c00084 	movi	r7,2
    5020:	2023883a 	mov	r17,r4
    5024:	10000226 	beq	r2,zero,5030 <__swrite+0x44>
    5028:	2940038f 	ldh	r5,14(r5)
    502c:	00053b80 	call	53b8 <_lseek_r>
    5030:	8080030b 	ldhu	r2,12(r16)
    5034:	8140038f 	ldh	r5,14(r16)
    5038:	8809883a 	mov	r4,r17
    503c:	10bbffcc 	andi	r2,r2,61439
    5040:	980d883a 	mov	r6,r19
    5044:	900f883a 	mov	r7,r18
    5048:	8080030d 	sth	r2,12(r16)
    504c:	dfc00417 	ldw	ra,16(sp)
    5050:	dcc00317 	ldw	r19,12(sp)
    5054:	dc800217 	ldw	r18,8(sp)
    5058:	dc400117 	ldw	r17,4(sp)
    505c:	dc000017 	ldw	r16,0(sp)
    5060:	dec00504 	addi	sp,sp,20
    5064:	00050c81 	jmpi	50c8 <_write_r>

00005068 <__sread>:
    5068:	defffe04 	addi	sp,sp,-8
    506c:	dc000015 	stw	r16,0(sp)
    5070:	2821883a 	mov	r16,r5
    5074:	2940038f 	ldh	r5,14(r5)
    5078:	dfc00115 	stw	ra,4(sp)
    507c:	00054300 	call	5430 <_read_r>
    5080:	1007883a 	mov	r3,r2
    5084:	10000816 	blt	r2,zero,50a8 <__sread+0x40>
    5088:	80801417 	ldw	r2,80(r16)
    508c:	10c5883a 	add	r2,r2,r3
    5090:	80801415 	stw	r2,80(r16)
    5094:	1805883a 	mov	r2,r3
    5098:	dfc00117 	ldw	ra,4(sp)
    509c:	dc000017 	ldw	r16,0(sp)
    50a0:	dec00204 	addi	sp,sp,8
    50a4:	f800283a 	ret
    50a8:	8080030b 	ldhu	r2,12(r16)
    50ac:	10bbffcc 	andi	r2,r2,61439
    50b0:	8080030d 	sth	r2,12(r16)
    50b4:	1805883a 	mov	r2,r3
    50b8:	dfc00117 	ldw	ra,4(sp)
    50bc:	dc000017 	ldw	r16,0(sp)
    50c0:	dec00204 	addi	sp,sp,8
    50c4:	f800283a 	ret

000050c8 <_write_r>:
    50c8:	defffd04 	addi	sp,sp,-12
    50cc:	dc000015 	stw	r16,0(sp)
    50d0:	040000b4 	movhi	r16,2
    50d4:	84285904 	addi	r16,r16,-24220
    50d8:	dc400115 	stw	r17,4(sp)
    50dc:	80000015 	stw	zero,0(r16)
    50e0:	2023883a 	mov	r17,r4
    50e4:	2809883a 	mov	r4,r5
    50e8:	300b883a 	mov	r5,r6
    50ec:	380d883a 	mov	r6,r7
    50f0:	dfc00215 	stw	ra,8(sp)
    50f4:	00057a80 	call	57a8 <write>
    50f8:	1007883a 	mov	r3,r2
    50fc:	00bfffc4 	movi	r2,-1
    5100:	18800626 	beq	r3,r2,511c <_write_r+0x54>
    5104:	1805883a 	mov	r2,r3
    5108:	dfc00217 	ldw	ra,8(sp)
    510c:	dc400117 	ldw	r17,4(sp)
    5110:	dc000017 	ldw	r16,0(sp)
    5114:	dec00304 	addi	sp,sp,12
    5118:	f800283a 	ret
    511c:	80800017 	ldw	r2,0(r16)
    5120:	103ff826 	beq	r2,zero,5104 <_write_r+0x3c>
    5124:	88800015 	stw	r2,0(r17)
    5128:	1805883a 	mov	r2,r3
    512c:	dfc00217 	ldw	ra,8(sp)
    5130:	dc400117 	ldw	r17,4(sp)
    5134:	dc000017 	ldw	r16,0(sp)
    5138:	dec00304 	addi	sp,sp,12
    513c:	f800283a 	ret

00005140 <_close_r>:
    5140:	defffd04 	addi	sp,sp,-12
    5144:	dc000015 	stw	r16,0(sp)
    5148:	040000b4 	movhi	r16,2
    514c:	84285904 	addi	r16,r16,-24220
    5150:	dc400115 	stw	r17,4(sp)
    5154:	80000015 	stw	zero,0(r16)
    5158:	2023883a 	mov	r17,r4
    515c:	2809883a 	mov	r4,r5
    5160:	dfc00215 	stw	ra,8(sp)
    5164:	0002ac00 	call	2ac0 <close>
    5168:	1007883a 	mov	r3,r2
    516c:	00bfffc4 	movi	r2,-1
    5170:	18800626 	beq	r3,r2,518c <_close_r+0x4c>
    5174:	1805883a 	mov	r2,r3
    5178:	dfc00217 	ldw	ra,8(sp)
    517c:	dc400117 	ldw	r17,4(sp)
    5180:	dc000017 	ldw	r16,0(sp)
    5184:	dec00304 	addi	sp,sp,12
    5188:	f800283a 	ret
    518c:	80800017 	ldw	r2,0(r16)
    5190:	103ff826 	beq	r2,zero,5174 <_close_r+0x34>
    5194:	88800015 	stw	r2,0(r17)
    5198:	1805883a 	mov	r2,r3
    519c:	dfc00217 	ldw	ra,8(sp)
    51a0:	dc400117 	ldw	r17,4(sp)
    51a4:	dc000017 	ldw	r16,0(sp)
    51a8:	dec00304 	addi	sp,sp,12
    51ac:	f800283a 	ret

000051b0 <_fclose_r>:
    51b0:	defffc04 	addi	sp,sp,-16
    51b4:	dc400115 	stw	r17,4(sp)
    51b8:	dc000015 	stw	r16,0(sp)
    51bc:	dfc00315 	stw	ra,12(sp)
    51c0:	dc800215 	stw	r18,8(sp)
    51c4:	2821883a 	mov	r16,r5
    51c8:	2023883a 	mov	r17,r4
    51cc:	28002926 	beq	r5,zero,5274 <_fclose_r+0xc4>
    51d0:	0003d780 	call	3d78 <__sfp_lock_acquire>
    51d4:	88000226 	beq	r17,zero,51e0 <_fclose_r+0x30>
    51d8:	88800e17 	ldw	r2,56(r17)
    51dc:	10002d26 	beq	r2,zero,5294 <_fclose_r+0xe4>
    51e0:	8080030f 	ldh	r2,12(r16)
    51e4:	10002226 	beq	r2,zero,5270 <_fclose_r+0xc0>
    51e8:	8809883a 	mov	r4,r17
    51ec:	800b883a 	mov	r5,r16
    51f0:	0003af00 	call	3af0 <_fflush_r>
    51f4:	1025883a 	mov	r18,r2
    51f8:	80800b17 	ldw	r2,44(r16)
    51fc:	10000426 	beq	r2,zero,5210 <_fclose_r+0x60>
    5200:	81400717 	ldw	r5,28(r16)
    5204:	8809883a 	mov	r4,r17
    5208:	103ee83a 	callr	r2
    520c:	10002a16 	blt	r2,zero,52b8 <_fclose_r+0x108>
    5210:	8080030b 	ldhu	r2,12(r16)
    5214:	1080200c 	andi	r2,r2,128
    5218:	1000231e 	bne	r2,zero,52a8 <_fclose_r+0xf8>
    521c:	81400c17 	ldw	r5,48(r16)
    5220:	28000526 	beq	r5,zero,5238 <_fclose_r+0x88>
    5224:	80801004 	addi	r2,r16,64
    5228:	28800226 	beq	r5,r2,5234 <_fclose_r+0x84>
    522c:	8809883a 	mov	r4,r17
    5230:	000410c0 	call	410c <_free_r>
    5234:	80000c15 	stw	zero,48(r16)
    5238:	81401117 	ldw	r5,68(r16)
    523c:	28000326 	beq	r5,zero,524c <_fclose_r+0x9c>
    5240:	8809883a 	mov	r4,r17
    5244:	000410c0 	call	410c <_free_r>
    5248:	80001115 	stw	zero,68(r16)
    524c:	8000030d 	sth	zero,12(r16)
    5250:	0003d7c0 	call	3d7c <__sfp_lock_release>
    5254:	9005883a 	mov	r2,r18
    5258:	dfc00317 	ldw	ra,12(sp)
    525c:	dc800217 	ldw	r18,8(sp)
    5260:	dc400117 	ldw	r17,4(sp)
    5264:	dc000017 	ldw	r16,0(sp)
    5268:	dec00404 	addi	sp,sp,16
    526c:	f800283a 	ret
    5270:	0003d7c0 	call	3d7c <__sfp_lock_release>
    5274:	0025883a 	mov	r18,zero
    5278:	9005883a 	mov	r2,r18
    527c:	dfc00317 	ldw	ra,12(sp)
    5280:	dc800217 	ldw	r18,8(sp)
    5284:	dc400117 	ldw	r17,4(sp)
    5288:	dc000017 	ldw	r16,0(sp)
    528c:	dec00404 	addi	sp,sp,16
    5290:	f800283a 	ret
    5294:	8809883a 	mov	r4,r17
    5298:	0003d880 	call	3d88 <__sinit>
    529c:	8080030f 	ldh	r2,12(r16)
    52a0:	103fd11e 	bne	r2,zero,51e8 <_fclose_r+0x38>
    52a4:	003ff206 	br	5270 <_fclose_r+0xc0>
    52a8:	81400417 	ldw	r5,16(r16)
    52ac:	8809883a 	mov	r4,r17
    52b0:	000410c0 	call	410c <_free_r>
    52b4:	003fd906 	br	521c <_fclose_r+0x6c>
    52b8:	04bfffc4 	movi	r18,-1
    52bc:	003fd406 	br	5210 <_fclose_r+0x60>

000052c0 <fclose>:
    52c0:	00800074 	movhi	r2,1
    52c4:	10bf9b04 	addi	r2,r2,-404
    52c8:	200b883a 	mov	r5,r4
    52cc:	11000017 	ldw	r4,0(r2)
    52d0:	00051b01 	jmpi	51b0 <_fclose_r>

000052d4 <_fstat_r>:
    52d4:	defffd04 	addi	sp,sp,-12
    52d8:	dc000015 	stw	r16,0(sp)
    52dc:	040000b4 	movhi	r16,2
    52e0:	84285904 	addi	r16,r16,-24220
    52e4:	dc400115 	stw	r17,4(sp)
    52e8:	80000015 	stw	zero,0(r16)
    52ec:	2023883a 	mov	r17,r4
    52f0:	2809883a 	mov	r4,r5
    52f4:	300b883a 	mov	r5,r6
    52f8:	dfc00215 	stw	ra,8(sp)
    52fc:	00054bc0 	call	54bc <fstat>
    5300:	1007883a 	mov	r3,r2
    5304:	00bfffc4 	movi	r2,-1
    5308:	18800626 	beq	r3,r2,5324 <_fstat_r+0x50>
    530c:	1805883a 	mov	r2,r3
    5310:	dfc00217 	ldw	ra,8(sp)
    5314:	dc400117 	ldw	r17,4(sp)
    5318:	dc000017 	ldw	r16,0(sp)
    531c:	dec00304 	addi	sp,sp,12
    5320:	f800283a 	ret
    5324:	80800017 	ldw	r2,0(r16)
    5328:	103ff826 	beq	r2,zero,530c <_fstat_r+0x38>
    532c:	88800015 	stw	r2,0(r17)
    5330:	1805883a 	mov	r2,r3
    5334:	dfc00217 	ldw	ra,8(sp)
    5338:	dc400117 	ldw	r17,4(sp)
    533c:	dc000017 	ldw	r16,0(sp)
    5340:	dec00304 	addi	sp,sp,12
    5344:	f800283a 	ret

00005348 <_isatty_r>:
    5348:	defffd04 	addi	sp,sp,-12
    534c:	dc000015 	stw	r16,0(sp)
    5350:	040000b4 	movhi	r16,2
    5354:	84285904 	addi	r16,r16,-24220
    5358:	dc400115 	stw	r17,4(sp)
    535c:	80000015 	stw	zero,0(r16)
    5360:	2023883a 	mov	r17,r4
    5364:	2809883a 	mov	r4,r5
    5368:	dfc00215 	stw	ra,8(sp)
    536c:	000553c0 	call	553c <isatty>
    5370:	1007883a 	mov	r3,r2
    5374:	00bfffc4 	movi	r2,-1
    5378:	18800626 	beq	r3,r2,5394 <_isatty_r+0x4c>
    537c:	1805883a 	mov	r2,r3
    5380:	dfc00217 	ldw	ra,8(sp)
    5384:	dc400117 	ldw	r17,4(sp)
    5388:	dc000017 	ldw	r16,0(sp)
    538c:	dec00304 	addi	sp,sp,12
    5390:	f800283a 	ret
    5394:	80800017 	ldw	r2,0(r16)
    5398:	103ff826 	beq	r2,zero,537c <_isatty_r+0x34>
    539c:	88800015 	stw	r2,0(r17)
    53a0:	1805883a 	mov	r2,r3
    53a4:	dfc00217 	ldw	ra,8(sp)
    53a8:	dc400117 	ldw	r17,4(sp)
    53ac:	dc000017 	ldw	r16,0(sp)
    53b0:	dec00304 	addi	sp,sp,12
    53b4:	f800283a 	ret

000053b8 <_lseek_r>:
    53b8:	defffd04 	addi	sp,sp,-12
    53bc:	dc000015 	stw	r16,0(sp)
    53c0:	040000b4 	movhi	r16,2
    53c4:	84285904 	addi	r16,r16,-24220
    53c8:	dc400115 	stw	r17,4(sp)
    53cc:	80000015 	stw	zero,0(r16)
    53d0:	2023883a 	mov	r17,r4
    53d4:	2809883a 	mov	r4,r5
    53d8:	300b883a 	mov	r5,r6
    53dc:	380d883a 	mov	r6,r7
    53e0:	dfc00215 	stw	ra,8(sp)
    53e4:	00055c00 	call	55c0 <lseek>
    53e8:	1007883a 	mov	r3,r2
    53ec:	00bfffc4 	movi	r2,-1
    53f0:	18800626 	beq	r3,r2,540c <_lseek_r+0x54>
    53f4:	1805883a 	mov	r2,r3
    53f8:	dfc00217 	ldw	ra,8(sp)
    53fc:	dc400117 	ldw	r17,4(sp)
    5400:	dc000017 	ldw	r16,0(sp)
    5404:	dec00304 	addi	sp,sp,12
    5408:	f800283a 	ret
    540c:	80800017 	ldw	r2,0(r16)
    5410:	103ff826 	beq	r2,zero,53f4 <_lseek_r+0x3c>
    5414:	88800015 	stw	r2,0(r17)
    5418:	1805883a 	mov	r2,r3
    541c:	dfc00217 	ldw	ra,8(sp)
    5420:	dc400117 	ldw	r17,4(sp)
    5424:	dc000017 	ldw	r16,0(sp)
    5428:	dec00304 	addi	sp,sp,12
    542c:	f800283a 	ret

00005430 <_read_r>:
    5430:	defffd04 	addi	sp,sp,-12
    5434:	dc000015 	stw	r16,0(sp)
    5438:	040000b4 	movhi	r16,2
    543c:	84285904 	addi	r16,r16,-24220
    5440:	dc400115 	stw	r17,4(sp)
    5444:	80000015 	stw	zero,0(r16)
    5448:	2023883a 	mov	r17,r4
    544c:	2809883a 	mov	r4,r5
    5450:	300b883a 	mov	r5,r6
    5454:	380d883a 	mov	r6,r7
    5458:	dfc00215 	stw	ra,8(sp)
    545c:	00056600 	call	5660 <read>
    5460:	1007883a 	mov	r3,r2
    5464:	00bfffc4 	movi	r2,-1
    5468:	18800626 	beq	r3,r2,5484 <_read_r+0x54>
    546c:	1805883a 	mov	r2,r3
    5470:	dfc00217 	ldw	ra,8(sp)
    5474:	dc400117 	ldw	r17,4(sp)
    5478:	dc000017 	ldw	r16,0(sp)
    547c:	dec00304 	addi	sp,sp,12
    5480:	f800283a 	ret
    5484:	80800017 	ldw	r2,0(r16)
    5488:	103ff826 	beq	r2,zero,546c <_read_r+0x3c>
    548c:	88800015 	stw	r2,0(r17)
    5490:	1805883a 	mov	r2,r3
    5494:	dfc00217 	ldw	ra,8(sp)
    5498:	dc400117 	ldw	r17,4(sp)
    549c:	dc000017 	ldw	r16,0(sp)
    54a0:	dec00304 	addi	sp,sp,12
    54a4:	f800283a 	ret

000054a8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    54a8:	20000226 	beq	r4,zero,54b4 <_exit+0xc>
    ALT_SIM_FAIL();
    54ac:	002af070 	cmpltui	zero,zero,43969
    54b0:	00000106 	br	54b8 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    54b4:	002af0b0 	cmpltui	zero,zero,43970
    54b8:	003fff06 	br	54b8 <_exit+0x10>

000054bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    54bc:	deffff04 	addi	sp,sp,-4
    54c0:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    54c4:	20000e16 	blt	r4,zero,5500 <fstat+0x44>
    54c8:	20c00324 	muli	r3,r4,12
    54cc:	00800074 	movhi	r2,1
    54d0:	10bd3004 	addi	r2,r2,-2880
    54d4:	1889883a 	add	r4,r3,r2
  
  if (fd)
    54d8:	20000926 	beq	r4,zero,5500 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    54dc:	20800017 	ldw	r2,0(r4)
    54e0:	10800817 	ldw	r2,32(r2)
    54e4:	10000226 	beq	r2,zero,54f0 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    54e8:	103ee83a 	callr	r2
    54ec:	00001006 	br	5530 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    54f0:	00880004 	movi	r2,8192
    54f4:	28800115 	stw	r2,4(r5)
    54f8:	0005883a 	mov	r2,zero
    54fc:	00000c06 	br	5530 <fstat+0x74>
    5500:	00800074 	movhi	r2,1
    5504:	10bf9704 	addi	r2,r2,-420
    5508:	10800017 	ldw	r2,0(r2)
    550c:	1000031e 	bne	r2,zero,551c <fstat+0x60>
    5510:	00c000b4 	movhi	r3,2
    5514:	18e85904 	addi	r3,r3,-24220
    5518:	00000206 	br	5524 <fstat+0x68>
    551c:	103ee83a 	callr	r2
    5520:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5524:	00801444 	movi	r2,81
    5528:	18800015 	stw	r2,0(r3)
    552c:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    5530:	dfc00017 	ldw	ra,0(sp)
    5534:	dec00104 	addi	sp,sp,4
    5538:	f800283a 	ret

0000553c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    553c:	defff004 	addi	sp,sp,-64
    5540:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5544:	20000f16 	blt	r4,zero,5584 <isatty+0x48>
    5548:	20c00324 	muli	r3,r4,12
    554c:	00800074 	movhi	r2,1
    5550:	10bd3004 	addi	r2,r2,-2880
    5554:	1885883a 	add	r2,r3,r2
  
  if (fd)
    5558:	10000a26 	beq	r2,zero,5584 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    555c:	10800017 	ldw	r2,0(r2)
    5560:	10800817 	ldw	r2,32(r2)
    5564:	1000021e 	bne	r2,zero,5570 <isatty+0x34>
    5568:	00800044 	movi	r2,1
    556c:	00001106 	br	55b4 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5570:	d80b883a 	mov	r5,sp
    5574:	00054bc0 	call	54bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5578:	d8800117 	ldw	r2,4(sp)
    557c:	10880020 	cmpeqi	r2,r2,8192
    5580:	00000c06 	br	55b4 <isatty+0x78>
    5584:	00800074 	movhi	r2,1
    5588:	10bf9704 	addi	r2,r2,-420
    558c:	10800017 	ldw	r2,0(r2)
    5590:	1000031e 	bne	r2,zero,55a0 <isatty+0x64>
    5594:	00c000b4 	movhi	r3,2
    5598:	18e85904 	addi	r3,r3,-24220
    559c:	00000206 	br	55a8 <isatty+0x6c>
    55a0:	103ee83a 	callr	r2
    55a4:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    55a8:	00801444 	movi	r2,81
    55ac:	18800015 	stw	r2,0(r3)
    55b0:	0005883a 	mov	r2,zero
    return 0;
  }
}
    55b4:	dfc00f17 	ldw	ra,60(sp)
    55b8:	dec01004 	addi	sp,sp,64
    55bc:	f800283a 	ret

000055c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    55c0:	defffe04 	addi	sp,sp,-8
    55c4:	dfc00115 	stw	ra,4(sp)
    55c8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    55cc:	2000020e 	bge	r4,zero,55d8 <lseek+0x18>
    55d0:	043febc4 	movi	r16,-81
    55d4:	00000d06 	br	560c <lseek+0x4c>
    55d8:	20c00324 	muli	r3,r4,12
    55dc:	00800074 	movhi	r2,1
    55e0:	10bd3004 	addi	r2,r2,-2880
    55e4:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    55e8:	20001526 	beq	r4,zero,5640 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    55ec:	20800017 	ldw	r2,0(r4)
    55f0:	10800717 	ldw	r2,28(r2)
    55f4:	1000021e 	bne	r2,zero,5600 <lseek+0x40>
    55f8:	043fde84 	movi	r16,-134
    55fc:	00000306 	br	560c <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5600:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    5604:	1000100e 	bge	r2,zero,5648 <lseek+0x88>
    5608:	1021883a 	mov	r16,r2
    560c:	00800074 	movhi	r2,1
    5610:	10bf9704 	addi	r2,r2,-420
    5614:	10800017 	ldw	r2,0(r2)
    5618:	1000031e 	bne	r2,zero,5628 <lseek+0x68>
    561c:	00c000b4 	movhi	r3,2
    5620:	18e85904 	addi	r3,r3,-24220
    5624:	00000206 	br	5630 <lseek+0x70>
    5628:	103ee83a 	callr	r2
    562c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    5630:	0405c83a 	sub	r2,zero,r16
    5634:	18800015 	stw	r2,0(r3)
    5638:	00bfffc4 	movi	r2,-1
    563c:	00000206 	br	5648 <lseek+0x88>
    5640:	043febc4 	movi	r16,-81
    5644:	003ff106 	br	560c <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    5648:	dfc00117 	ldw	ra,4(sp)
    564c:	dc000017 	ldw	r16,0(sp)
    5650:	dec00204 	addi	sp,sp,8
    5654:	f800283a 	ret

00005658 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    5658:	f800283a 	ret

0000565c <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    565c:	f800283a 	ret

00005660 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5660:	defffe04 	addi	sp,sp,-8
    5664:	dfc00115 	stw	ra,4(sp)
    5668:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    566c:	20002916 	blt	r4,zero,5714 <read+0xb4>
    5670:	20c00324 	muli	r3,r4,12
    5674:	00800074 	movhi	r2,1
    5678:	10bd3004 	addi	r2,r2,-2880
    567c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5680:	20002426 	beq	r4,zero,5714 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5684:	20800217 	ldw	r2,8(r4)
    5688:	108000cc 	andi	r2,r2,3
    568c:	00c00044 	movi	r3,1
    5690:	10c01326 	beq	r2,r3,56e0 <read+0x80>
    5694:	20800017 	ldw	r2,0(r4)
    5698:	10800517 	ldw	r2,20(r2)
    569c:	10001026 	beq	r2,zero,56e0 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    56a0:	103ee83a 	callr	r2
    56a4:	1021883a 	mov	r16,r2
    56a8:	1000260e 	bge	r2,zero,5744 <read+0xe4>
    56ac:	00800074 	movhi	r2,1
    56b0:	10bf9704 	addi	r2,r2,-420
    56b4:	10800017 	ldw	r2,0(r2)
    56b8:	1000031e 	bne	r2,zero,56c8 <read+0x68>
    56bc:	00c000b4 	movhi	r3,2
    56c0:	18e85904 	addi	r3,r3,-24220
    56c4:	00000206 	br	56d0 <read+0x70>
    56c8:	103ee83a 	callr	r2
    56cc:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    56d0:	0405c83a 	sub	r2,zero,r16
    56d4:	18800015 	stw	r2,0(r3)
    56d8:	043fffc4 	movi	r16,-1
    56dc:	00001906 	br	5744 <read+0xe4>
    56e0:	00800074 	movhi	r2,1
    56e4:	10bf9704 	addi	r2,r2,-420
    56e8:	10800017 	ldw	r2,0(r2)
    56ec:	1000031e 	bne	r2,zero,56fc <read+0x9c>
    56f0:	00c000b4 	movhi	r3,2
    56f4:	18e85904 	addi	r3,r3,-24220
    56f8:	00000206 	br	5704 <read+0xa4>
    56fc:	103ee83a 	callr	r2
    5700:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    5704:	00800344 	movi	r2,13
    5708:	18800015 	stw	r2,0(r3)
    570c:	043fffc4 	movi	r16,-1
    5710:	00000c06 	br	5744 <read+0xe4>
    5714:	00800074 	movhi	r2,1
    5718:	10bf9704 	addi	r2,r2,-420
    571c:	10800017 	ldw	r2,0(r2)
    5720:	1000031e 	bne	r2,zero,5730 <read+0xd0>
    5724:	00c000b4 	movhi	r3,2
    5728:	18e85904 	addi	r3,r3,-24220
    572c:	00000206 	br	5738 <read+0xd8>
    5730:	103ee83a 	callr	r2
    5734:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5738:	00801444 	movi	r2,81
    573c:	18800015 	stw	r2,0(r3)
    5740:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5744:	8005883a 	mov	r2,r16
    5748:	dfc00117 	ldw	ra,4(sp)
    574c:	dc000017 	ldw	r16,0(sp)
    5750:	dec00204 	addi	sp,sp,8
    5754:	f800283a 	ret

00005758 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5758:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    575c:	00bfff84 	movi	r2,-2
    5760:	2884703a 	and	r2,r5,r2
    5764:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5768:	d0a00d17 	ldw	r2,-32716(gp)
    576c:	108000c4 	addi	r2,r2,3
    5770:	00ffff04 	movi	r3,-4
    5774:	10c6703a 	and	r3,r2,r3
    5778:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    577c:	1909883a 	add	r4,r3,r4
    5780:	00802034 	movhi	r2,128
    5784:	10800004 	addi	r2,r2,0
    5788:	1100032e 	bgeu	r2,r4,5798 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    578c:	2801703a 	wrctl	status,r5
    5790:	00ffffc4 	movi	r3,-1
    5794:	00000206 	br	57a0 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    5798:	d1200d15 	stw	r4,-32716(gp)
    579c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    57a0:	1805883a 	mov	r2,r3
    57a4:	f800283a 	ret

000057a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    57a8:	defffe04 	addi	sp,sp,-8
    57ac:	dfc00115 	stw	ra,4(sp)
    57b0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    57b4:	20002816 	blt	r4,zero,5858 <write+0xb0>
    57b8:	20c00324 	muli	r3,r4,12
    57bc:	00800074 	movhi	r2,1
    57c0:	10bd3004 	addi	r2,r2,-2880
    57c4:	1889883a 	add	r4,r3,r2
  
  if (fd)
    57c8:	20002326 	beq	r4,zero,5858 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    57cc:	20800217 	ldw	r2,8(r4)
    57d0:	108000cc 	andi	r2,r2,3
    57d4:	10001326 	beq	r2,zero,5824 <write+0x7c>
    57d8:	20800017 	ldw	r2,0(r4)
    57dc:	10800617 	ldw	r2,24(r2)
    57e0:	10001026 	beq	r2,zero,5824 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    57e4:	103ee83a 	callr	r2
    57e8:	1021883a 	mov	r16,r2
    57ec:	1000260e 	bge	r2,zero,5888 <write+0xe0>
    57f0:	00800074 	movhi	r2,1
    57f4:	10bf9704 	addi	r2,r2,-420
    57f8:	10800017 	ldw	r2,0(r2)
    57fc:	1000031e 	bne	r2,zero,580c <write+0x64>
    5800:	00c000b4 	movhi	r3,2
    5804:	18e85904 	addi	r3,r3,-24220
    5808:	00000206 	br	5814 <write+0x6c>
    580c:	103ee83a 	callr	r2
    5810:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5814:	0405c83a 	sub	r2,zero,r16
    5818:	18800015 	stw	r2,0(r3)
    581c:	043fffc4 	movi	r16,-1
    5820:	00001906 	br	5888 <write+0xe0>
    5824:	00800074 	movhi	r2,1
    5828:	10bf9704 	addi	r2,r2,-420
    582c:	10800017 	ldw	r2,0(r2)
    5830:	1000031e 	bne	r2,zero,5840 <write+0x98>
    5834:	00c000b4 	movhi	r3,2
    5838:	18e85904 	addi	r3,r3,-24220
    583c:	00000206 	br	5848 <write+0xa0>
    5840:	103ee83a 	callr	r2
    5844:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5848:	00800344 	movi	r2,13
    584c:	18800015 	stw	r2,0(r3)
    5850:	043fffc4 	movi	r16,-1
    5854:	00000c06 	br	5888 <write+0xe0>
    5858:	00800074 	movhi	r2,1
    585c:	10bf9704 	addi	r2,r2,-420
    5860:	10800017 	ldw	r2,0(r2)
    5864:	1000031e 	bne	r2,zero,5874 <write+0xcc>
    5868:	00c000b4 	movhi	r3,2
    586c:	18e85904 	addi	r3,r3,-24220
    5870:	00000206 	br	587c <write+0xd4>
    5874:	103ee83a 	callr	r2
    5878:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    587c:	00801444 	movi	r2,81
    5880:	18800015 	stw	r2,0(r3)
    5884:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5888:	8005883a 	mov	r2,r16
    588c:	dfc00117 	ldw	ra,4(sp)
    5890:	dc000017 	ldw	r16,0(sp)
    5894:	dec00204 	addi	sp,sp,8
    5898:	f800283a 	ret
    589c:	0000393c 	xorhi	zero,zero,228
