
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012820 memsz 0x00012820 flags r-x
    LOAD off    0x00013840 vaddr 0x00012840 paddr 0x00014470 align 2**12
         filesz 0x00001c30 memsz 0x00001c30 flags rw-
    LOAD off    0x000160a0 vaddr 0x000160a0 paddr 0x000160a0 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e88  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000850  00011ff0  00011ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c30  00012840  00014470  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  000160a0  000160a0  000160a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015470  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00015498  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b59  00000000  00000000  00016510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d839  00000000  00000000  00018069  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ae73  00000000  00000000  000458a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001aca4  00000000  00000000  00050715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ec8  00000000  00000000  0006b3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a96  00000000  00000000  0006d284  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013d7c  00000000  00000000  00070d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00084a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c38  00000000  00000000  00084ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000891b7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000891ba  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000891bf  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000891c0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000891c4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000891c8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000891cc  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000891d7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000891e2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000891ed  2**0
                  CONTENTS, READONLY
 27 .jdi          000041b1  00000000  00000000  000891f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00011ff0 l    d  .rodata	00000000 .rodata
00012840 l    d  .rwdata	00000000 .rwdata
000160a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001b0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001130 l     F .text	00000058 __sprint_r
000122e2 l     O .rodata	00000010 blanks.3452
000122d2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
000122fa l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0001241d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00004914 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006310 l     F .text	00000058 std
0000641c l     F .text	00000008 __fp_lock
00006424 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012840 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0001443c l     O .rwdata	00000004 charset
000125c4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001270c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
000097d4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
00009ce8 l     F .text	00000048 match
00013068 l     O .rwdata	00000014 fpi.1950
00012728 l     O .rodata	00000028 tinytens
00013054 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000c3e0 l     F .text	00000024 htinit
0000c46c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ccd4 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000de80 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000f0a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000f4fc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014460 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013224 l     O .rwdata	00001060 JTAG_UART_0
00014284 l     O .rwdata	00000030 AV_Config
000142b4 l     O .rwdata	0000002c Green_LEDs
000142e0 l     O .rwdata	0000002c Pushbuttons
0001430c l     O .rwdata	0000002c Red_LEDs
00014338 l     O .rwdata	0000002c Slider_Switches
00014364 l     O .rwdata	0000002c Serial_Port
00014390 l     O .rwdata	00000048 VGA_Char_Buffer
000143d8 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ff30 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000fffc l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000104cc l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011454 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011db8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00008434 g     F .text	00000094 _mprec_log10
00008520 g     F .text	00000088 __any_on
0000cf68 g     F .text	00000070 _isatty_r
000126e4 g     O .rodata	00000028 __mprec_tinytens
0000f764 g     F .text	00000050 alt_main
00010a9c g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
000161fc g     O .bss	00000100 alt_irq
0000cfd8 g     F .text	00000078 _lseek_r
00014470 g       *ABS*	00000000 __flash_rwdata_start
0000e9a0 g     F .text	00000088 __eqdf2
000162fc g       *ABS*	00000000 __alt_heap_start
0000103c g     F .text	00000044 printf
00009a74 g     F .text	00000068 __sseek
00006378 g     F .text	000000a4 __sinit
00011c6c g     F .text	00000130 __swbuf_r
000106dc g     F .text	00000088 alt_up_char_buffer_string
000072b8 g     F .text	00000084 _setlocale_r
00006478 g     F .text	00000068 __sfmoreglue
0000c090 g     F .text	0000001c ungetc
0000f7b8 g     F .text	00000004 __malloc_unlock
00010580 g     F .text	00000080 alt_up_rs232_read_fd
00009d30 g     F .text	000014e4 _strtod_r
00010764 g     F .text	00000058 alt_up_char_buffer_draw
00007eb0 g     F .text	000000e0 memmove
00006468 g     F .text	00000010 _cleanup
000085a8 g     F .text	000000bc _Balloc
00011190 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
0000eab0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00011284 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c36c g     F .text	00000074 _fstat_r
000160b8 g     O .bss	00000004 errno
000009a0 g     F .text	00000038 __make_dp
000046d8 g     F .text	00000024 __svfscanf
0000f1f4 g     F .text	0000002c __make_fp
000160c0 g     O .bss	00000004 alt_argv
0001c42c g       *ABS*	00000000 _gp
0001125c g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
000130a4 g     O .rwdata	00000180 alt_fd_list
000113c4 g     F .text	00000070 alt_find_dev
00007e10 g     F .text	000000a0 memcpy
0000cd20 g     F .text	00000248 __hexnan
000107bc g     F .text	00000028 alt_up_char_buffer_clear
0000645c g     F .text	0000000c _cleanup_r
0000ecd0 g     F .text	000000f8 __floatsidf
000114b8 g     F .text	00000098 alt_io_redirect
0000ebc0 g     F .text	00000088 __ltdf2
00010534 g     F .text	0000004c alt_up_rs232_read_data
00007cac g     F .text	00000040 mbrtowc
00011868 g     F .text	00000008 altera_nios2_irq_init
000046fc g     F .text	00000068 _vfscanf_r
00008384 g     F .text	000000b0 __ratio
0001124c g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
000101a4 g     F .text	00000168 altera_avalon_jtag_uart_read
00001080 g     F .text	00000034 _printf_r
0000f1e4 g     F .text	00000008 __udivsi3
0000f584 g     F .text	00000084 isatty
00007268 g     F .text	0000002c iswspace
000125f4 g     O .rodata	000000c8 __mprec_tens
00010c30 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00007294 g     F .text	00000008 __locale_charset
0000d160 g     F .text	000000a4 __fixunsdfsi
00011998 g     F .text	0000003c alt_icache_flush
000160ac g     O .bss	00000004 __malloc_top_pad
0000bb04 g     F .text	00000024 strtoul
00014438 g     O .rwdata	00000004 __mb_cur_max
0000729c g     F .text	0000000c _localeconv_r
0000bb28 g     F .text	000002f0 _strtoull_r
00008ca0 g     F .text	0000003c __i2b
00006c4c g     F .text	0000049c __sfvwrite_r
00009860 g     F .text	00000070 _sbrk_r
00010854 g     F .text	0000005c helper_plot_pixel
0000d050 g     F .text	00000078 _read_r
00012c40 g     O .rwdata	0000000c __lc_ctype
00014458 g     O .rwdata	00000004 alt_max_fd
00010508 g     F .text	0000000c alt_up_rs232_check_parity
0000f220 g     F .text	00000138 __unpack_d
0000c248 g     F .text	00000110 _fclose_r
000062dc g     F .text	00000034 fflush
000160b0 g     O .bss	00000004 __malloc_max_sbrked_mem
00011550 g     F .text	000000bc alt_irq_register
0000094c g     F .text	00000054 __extendsfdf2
0000e310 g     F .text	00000074 __adddf3
0000dd90 g     F .text	00000078 __nesf2
00008264 g     F .text	00000120 __b2d
000110b8 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
0000d7e0 g     F .text	000005b0 __umoddi3
0000f6cc g     F .text	00000098 lseek
00014434 g     O .rwdata	00000004 _global_impure_ptr
0000901c g     F .text	000005f4 _realloc_r
000162fc g       *ABS*	00000000 __bss_end
00010e74 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
000117bc g     F .text	000000ac alt_tick
000160fc g     O .bss	00000100 __hexdig
0000d204 g     F .text	000005dc __udivdi3
000126bc g     O .rodata	00000028 __mprec_bigtens
00008efc g     F .text	00000120 __s2b
0000ef14 g     F .text	00000194 __floatunsidf
00008184 g     F .text	00000060 __mcmp
0001442c g     O .rwdata	00000004 __ctype_ptr
00006444 g     F .text	00000018 __fp_lock_all
00011788 g     F .text	00000034 alt_alarm_stop
0000b598 g     F .text	00000024 strtol
000160c8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
0001307c g     O .rwdata	00000028 alt_dev_null
00000bb8 g     F .text	000000c8 __unpack_f
00011338 g     F .text	0000001c alt_dcache_flush_all
00008050 g     F .text	00000070 __hi0bits
00010da4 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000edc8 g     F .text	000000d8 __fixdfsi
0000b338 g     F .text	0000001c strtod
00014470 g       *ABS*	00000000 __ram_rwdata_end
00014450 g     O .rwdata	00000008 alt_dev_list
0000fb2c g     F .text	000000f4 write
00011b84 g     F .text	000000e8 _putc_r
000108b0 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000de08 g     F .text	00000078 __gtsf2
00012840 g       *ABS*	00000000 __ram_rodata_end
0000f504 g     F .text	00000080 fstat
00010628 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ec48 g     F .text	00000088 __ledf2
00008ddc g     F .text	00000120 __pow5mult
000160a0 g     O .bss	00000004 __nlocale_changed
0000f1ec g     F .text	00000008 __umodsi3
000010b4 g     F .text	00000034 _scanf_r
000162fc g       *ABS*	00000000 end
00000a58 g     F .text	00000160 __pack_f
00010804 g     F .text	00000050 alt_up_char_buffer_init
0000ff84 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
00010488 g     F .text	00000044 alt_avalon_timer_sc_init
000009d8 g     F .text	00000080 __clzsi2
0001030c g     F .text	0000017c altera_avalon_jtag_uart_write
00006368 g     F .text	00000004 __sfp_lock_acquire
00007d2c g     F .text	000000e4 memchr
00001188 g     F .text	00001eac ___vfprintf_internal_r
00009a0c g     F .text	00000060 _sprintf_r
00006938 g     F .text	00000314 _free_r
0000f7bc g     F .text	000001dc alt_printf
00011dbc g     F .text	000001b0 __call_exitprocs
000160a4 g     O .bss	00000004 __mlocale_changed
00014444 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000004c _start
000160cc g     O .bss	00000004 _alt_tick_rate
0000b5bc g     F .text	00000318 _strtoll_r
0000896c g     F .text	0000014c __lshift
000160d0 g     O .bss	00000004 _alt_nticks
0000f9c0 g     F .text	000000f8 read
0000fc40 g     F .text	00000220 alt_sys_init
000008b4 g     F .text	00000098 __floatsisf
00010600 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00008ab8 g     F .text	000001e8 __multiply
0000fef8 g     F .text	00000038 altera_avalon_jtag_uart_close
00012840 g       *ABS*	00000000 __ram_rwdata_start
00011ff0 g       *ABS*	00000000 __ram_rodata_start
000160d4 g     O .bss	00000028 __malloc_current_mallinfo
00008664 g     F .text	0000017c __d2b
0000fed0 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000b8d4 g     F .text	00000230 _strtoul_r
0001192c g     F .text	0000006c alt_get_fd
0000f358 g     F .text	000000c8 __fpcmp_parts_d
0000c1d8 g     F .text	00000070 _close_r
00011a0c g     F .text	00000074 memcmp
0000fe80 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000162fc g       *ABS*	00000000 __alt_stack_base
0000fe60 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000047d8 g     F .text	0000013c __swsetup_r
0000e748 g     F .text	00000258 __divdf3
000064e0 g     F .text	000000f0 __sfp
000084c8 g     F .text	00000058 __copybits
00012c4c g     O .rwdata	00000408 __malloc_av_
00006374 g     F .text	00000004 __sinit_lock_release
0000e384 g     F .text	000003c4 __muldf3
00009b58 g     F .text	00000060 __sread
000067cc g     F .text	00000040 fread
00010698 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00011870 g     F .text	000000bc alt_find_file
00011354 g     F .text	00000070 alt_dev_llist_insert
0000f7b4 g     F .text	00000004 __malloc_lock
0000fadc g     F .text	00000050 sbrk
000060e0 g     F .text	000001fc _fflush_r
0000c124 g     F .text	000000b4 _calloc_r
000160a0 g       *ABS*	00000000 __bss_start
00007f90 g     F .text	00000098 memset
000001b4 g     F .text	00000688 main
000160c4 g     O .bss	00000004 alt_envp
000160b4 g     O .bss	00000004 __malloc_max_total_mem
0001116c g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
000107e4 g     F .text	00000020 alt_up_char_buffer_open_dev
0000fea8 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00011d9c g     F .text	0000001c __swbuf
0000083c g     F .text	00000078 __ltsf2
000065d0 g     F .text	000001fc _fread_r
00009a6c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000c358 g     F .text	00000014 fclose
0000b354 g     F .text	00000244 _strtol_r
0000eea0 g     F .text	00000074 __truncdfsf2
00004b2c g     F .text	000015b4 _dtoa_r
000074ec g     F .text	00000740 _malloc_r
0001445c g     O .rwdata	00000004 alt_errno
0000be18 g     F .text	000000dc __submore
000071b0 g     F .text	000000b8 _fwalk
00007cec g     F .text	00000040 _mbtowc_r
00011a80 g     F .text	00000104 putc
0000f124 g     F .text	00000060 __divsi3
0001276c g     O .rodata	00000014 __thenan_df
0000680c g     F .text	0000012c _malloc_trim_r
00009bb8 g     F .text	000000bc strcmp
00011ff0 g       *ABS*	00000000 __flash_rodata_start
00010514 g     F .text	00000020 alt_up_rs232_open_dev
0000ea28 g     F .text	00000088 __nedf2
0000fc20 g     F .text	00000020 alt_irq_init
0000fab8 g     F .text	00000024 alt_release_fd
00009998 g     F .text	00000074 sprintf
00012174 g     O .rodata	00000100 __clz_tab
000160a8 g     O .bss	00000004 _PathLocale
0000b214 g     F .text	00000124 strtof
0000c0ac g     F .text	00000078 _write_r
0000733c g     F .text	0000001c setlocale
000010e8 g     F .text	00000048 scanf
00009990 g     F .text	00000008 nanf
00014430 g     O .rwdata	00000004 _impure_ptr
000160bc g     O .bss	00000004 alt_argc
00007c2c g     F .text	00000080 _mbrtowc_r
00009610 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
000081e4 g     F .text	00000080 __ulp
000097f0 g     F .text	00000040 __isinfd
0000642c g     F .text	00000018 __fp_unlock_all
00014448 g     O .rwdata	00000008 alt_fs_list
000106b4 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00010610 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000072a8 g     F .text	00000010 localeconv
0000c404 g     F .text	00000068 __hexdig_init
00014470 g       *ABS*	00000000 _edata
000162fc g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00004764 g     F .text	00000074 vfscanf
00010130 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00009adc g     F .text	0000007c __swrite
00014440 g     O .rwdata	00000004 __malloc_trim_threshold
000119d4 g     F .text	00000038 exit
000070e8 g     F .text	000000c8 _fwalk_reent
000087e0 g     F .text	0000018c __mdiff
0000f184 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000636c g     F .text	00000004 __sfp_lock_release
000098d0 g     F .text	000000c0 __sccl
0001231c g     O .rodata	00000101 _ctype_
00000c80 g     F .text	000000a8 __fpcmp_parts_f
00011f6c g     F .text	00000014 _exit
00009830 g     F .text	00000030 __isnand
000112a4 g     F .text	00000094 alt_alarm_start
0000d0c8 g     F .text	00000098 __muldi3
00007358 g     F .text	00000194 __smakebuf_r
00009c74 g     F .text	00000074 strlen
0001160c g     F .text	0000017c open
0000eb38 g     F .text	00000088 __gedf2
0000f998 g     F .text	00000028 alt_putchar
0000c51c g     F .text	000007b8 __gethex
00011434 g     F .text	00000020 alt_icache_flush_all
00014464 g     O .rwdata	00000004 alt_priority_mask
00003034 g     F .text	00000024 __vfprintf_internal
0000e290 g     F .text	00000080 __subdf3
000080c0 g     F .text	000000c4 __lo0bits
00003058 g     F .text	00001680 __svfscanf_r
00014468 g     O .rwdata	00000008 alt_alarm_list
0000bef4 g     F .text	0000019c _ungetc_r
000106cc g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000f420 g     F .text	000000dc close
0000f608 g     F .text	000000c4 alt_load
00000d28 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006370 g     F .text	00000004 __sinit_lock_acquire
00008cdc g     F .text	00000100 __multadd
00008028 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84187f04 	addi	r16,r16,25084
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     168:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     16c:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     170:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
     174:	00bffd16 	blt	zero,r2,16c <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     178:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     17c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     180:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     184:	d6b10b14 	ori	gp,gp,50220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     188:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     18c:	10982814 	ori	r2,r2,24736

    movhi r3, %hi(__bss_end)
     190:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     194:	18d8bf14 	ori	r3,r3,25340

    beq r2, r3, 1f
     198:	10c00326 	beq	r2,r3,1a8 <_start+0x40>

0:
    stw zero, (r2)
     19c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1a4:	10fffd36 	bltu	r2,r3,19c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1a8:	000f6080 	call	f608 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ac:	000f7640 	call	f764 <alt_main>

000001b0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b0:	003fff06 	br	1b0 <alt_after_alt_main>

000001b4 <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     1b4:	defff604 	addi	sp,sp,-40
     1b8:	dfc00915 	stw	ra,36(sp)
     1bc:	df000815 	stw	fp,32(sp)
     1c0:	ddc00715 	stw	r23,28(sp)
     1c4:	dd800615 	stw	r22,24(sp)
     1c8:	dd400515 	stw	r21,20(sp)
     1cc:	dd000415 	stw	r20,16(sp)
     1d0:	dcc00315 	stw	r19,12(sp)
     1d4:	dc800215 	stw	r18,8(sp)
     1d8:	dc400115 	stw	r17,4(sp)
     1dc:	dc000015 	stw	r16,0(sp)
     1e0:	023ff6b4 	movhi	r8,65498
     1e4:	421ff104 	addi	r8,r8,32708
     1e8:	da37883a 	add	sp,sp,r8
	float zr[640][480];
	float zi[640][480];
	
	float xoff;
	float yoff;
	float xscale = 0.005;
     1ec:	008009b4 	movhi	r2,38
     1f0:	10a00004 	addi	r2,r2,-32768
     1f4:	d887883a 	add	r3,sp,r2
     1f8:	008ee934 	movhi	r2,15268
     1fc:	10b5c284 	addi	r2,r2,-10486
     200:	18800015 	stw	r2,0(r3)
	//Good values for initial (centered) set
	xoff = -1.0*2.0*640.0*xscale/3.0;
	yoff = -1.0*480.0*yscale/2.0;

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     204:	01000074 	movhi	r4,1
     208:	2107fc04 	addi	r4,r4,8176
     20c:	00112840 	call	11284 <alt_up_pixel_buffer_dma_open_dev>
     210:	00c009b4 	movhi	r3,38
     214:	18e00a04 	addi	r3,r3,-32728
     218:	1ec7883a 	add	r3,r3,sp
     21c:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     220:	1000041e 	bne	r2,zero,234 <main+0x80>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     224:	01000074 	movhi	r4,1
     228:	21080204 	addi	r4,r4,8200
     22c:	000f7bc0 	call	f7bc <alt_printf>
     230:	00000306 	br	240 <main+0x8c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     234:	01000074 	movhi	r4,1
     238:	21080e04 	addi	r4,r4,8248
     23c:	000f7bc0 	call	f7bc <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     240:	014009b4 	movhi	r5,38
     244:	29600a04 	addi	r5,r5,-32728
     248:	2ecb883a 	add	r5,r5,sp
     24c:	29000017 	ldw	r4,0(r5)
     250:	000b883a 	mov	r5,zero
     254:	00110b80 	call	110b8 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     258:	01000074 	movhi	r4,1
     25c:	21081904 	addi	r4,r4,8292
     260:	00107e40 	call	107e4 <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     264:	10016226 	beq	r2,zero,7f0 <main+0x63c>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     268:	01000074 	movhi	r4,1
     26c:	21082b04 	addi	r4,r4,8364
     270:	000f7bc0 	call	f7bc <alt_printf>
	//0 - Hold at Zero
	//1 - Reset to Zero
	//2 - Stop Incremeting and Hold
	//3 - Actively Incrementing
	
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
     274:	00802034 	movhi	r2,128
     278:	10000035 	stwio	zero,0(r2)
     27c:	00f00274 	movhi	r3,49161
     280:	18e22204 	addi	r3,r3,-30584
     284:	008009b4 	movhi	r2,38
     288:	10a00804 	addi	r2,r2,-32736
     28c:	16c5883a 	add	r2,r2,sp
     290:	10c00015 	stw	r3,0(r2)
     294:	016fe6b4 	movhi	r5,49050
     298:	29666644 	addi	r5,r5,-26215
     29c:	010009b4 	movhi	r4,38
     2a0:	21200704 	addi	r4,r4,-32740
     2a4:	26c9883a 	add	r4,r4,sp
     2a8:	21400015 	stw	r5,0(r4)
     2ac:	00cee934 	movhi	r3,15268
     2b0:	18f5c284 	addi	r3,r3,-10486
     2b4:	008009b4 	movhi	r2,38
     2b8:	10a00604 	addi	r2,r2,-32744
     2bc:	16c5883a 	add	r2,r2,sp
     2c0:	10c00015 	stw	r3,0(r2)
     2c4:	008009b4 	movhi	r2,38
     2c8:	10a00004 	addi	r2,r2,-32768
     2cc:	d88b883a 	add	r5,sp,r2
     2d0:	010009b4 	movhi	r4,38
     2d4:	21200c04 	addi	r4,r4,-32720
     2d8:	26c9883a 	add	r4,r4,sp
     2dc:	21400015 	stw	r5,0(r4)
     2e0:	10800204 	addi	r2,r2,8
     2e4:	d889883a 	add	r4,sp,r2
     2e8:	00c009b4 	movhi	r3,38
     2ec:	18e00d04 	addi	r3,r3,-32716
     2f0:	1ec7883a 	add	r3,r3,sp
     2f4:	19000015 	stw	r4,0(r3)
     2f8:	10bfff04 	addi	r2,r2,-4
     2fc:	d887883a 	add	r3,sp,r2
     300:	014009b4 	movhi	r5,38
     304:	29600e04 	addi	r5,r5,-32712
     308:	2ecb883a 	add	r5,r5,sp
     30c:	28c00015 	stw	r3,0(r5)
     310:	00001206 	br	35c <main+0x1a8>
		alt_printf ("Cool. Get ready for some crazy zooming action.\n");
		
		xscale = xscale/2;
		yscale = yscale/2;
		
		xoff = -1.0*xoff_n*640.0*xscale;
     314:	00b10834 	movhi	r2,50208
     318:	8085ff32 	custom	252,r2,r16,r2
     31c:	888bff32 	custom	252,r5,r17,r2
     320:	010009b4 	movhi	r4,38
     324:	21200804 	addi	r4,r4,-32736
     328:	26c9883a 	add	r4,r4,sp
     32c:	21400015 	stw	r5,0(r4)
		yoff = -1.0*yoff_n*480.0*yscale;
     330:	00b0fc34 	movhi	r2,50160
     334:	9085ff32 	custom	252,r2,r18,r2
     338:	00c009b4 	movhi	r3,38
     33c:	18e00604 	addi	r3,r3,-32744
     340:	1ec7883a 	add	r3,r3,sp
     344:	18c00017 	ldw	r3,0(r3)
     348:	1889ff32 	custom	252,r4,r3,r2
     34c:	00c009b4 	movhi	r3,38
     350:	18e00704 	addi	r3,r3,-32740
     354:	1ec7883a 	add	r3,r3,sp
     358:	19000015 	stw	r4,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);

	while(1)
	{
	
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 1);
     35c:	00800044 	movi	r2,1
     360:	01002034 	movhi	r4,128
     364:	20800035 	stwio	r2,0(r4)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 3);
     368:	008000c4 	movi	r2,3
     36c:	20800035 	stwio	r2,0(r4)
     370:	014009b4 	movhi	r5,38
     374:	29600904 	addi	r5,r5,-32732
     378:	2ecb883a 	add	r5,r5,sp
     37c:	28000015 	stw	zero,0(r5)
     380:	00010706 	br	7a0 <main+0x5ec>
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
     384:	008009b4 	movhi	r2,38
     388:	10a00904 	addi	r2,r2,-32732
     38c:	16c5883a 	add	r2,r2,sp
     390:	11000017 	ldw	r4,0(r2)
     394:	00008b40 	call	8b4 <__floatsisf>
     398:	00c009b4 	movhi	r3,38
     39c:	18e00b04 	addi	r3,r3,-32724
     3a0:	1ec7883a 	add	r3,r3,sp
     3a4:	18800015 	stw	r2,0(r3)
				float yc = (float)(y*yscale + yoff);
     3a8:	b809883a 	mov	r4,r23
     3ac:	00008b40 	call	8b4 <__floatsisf>
     3b0:	010009b4 	movhi	r4,38
     3b4:	21200604 	addi	r4,r4,-32744
     3b8:	26c9883a 	add	r4,r4,sp
     3bc:	21000017 	ldw	r4,0(r4)
     3c0:	2085ff32 	custom	252,r2,r4,r2
     3c4:	014009b4 	movhi	r5,38
     3c8:	29600704 	addi	r5,r5,-32740
     3cc:	2ecb883a 	add	r5,r5,sp
     3d0:	29400017 	ldw	r5,0(r5)
     3d4:	28a9ff72 	custom	253,r20,r5,r2
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     3d8:	008009b4 	movhi	r2,38
     3dc:	10a00504 	addi	r2,r2,-32748
     3e0:	16c5883a 	add	r2,r2,sp
     3e4:	10c00017 	ldw	r3,0(r2)
     3e8:	008009b4 	movhi	r2,38
     3ec:	10a00304 	addi	r2,r2,-32756
     3f0:	16c5883a 	add	r2,r2,sp
     3f4:	10c00015 	stw	r3,0(r2)
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
				float yc = (float)(y*yscale + yoff);
				zr[x][y] = xc;
     3f8:	010009b4 	movhi	r4,38
     3fc:	21200c04 	addi	r4,r4,-32720
     400:	26c9883a 	add	r4,r4,sp
     404:	21000017 	ldw	r4,0(r4)
     408:	20800017 	ldw	r2,0(r4)
     40c:	014009b4 	movhi	r5,38
     410:	29600b04 	addi	r5,r5,-32724
     414:	2ecb883a 	add	r5,r5,sp
     418:	29400017 	ldw	r5,0(r5)
     41c:	2885ff32 	custom	252,r2,r5,r2
     420:	00c009b4 	movhi	r3,38
     424:	18e00804 	addi	r3,r3,-32736
     428:	1ec7883a 	add	r3,r3,sp
     42c:	18c00017 	ldw	r3,0(r3)
     430:	1885ff72 	custom	253,r2,r3,r2
     434:	010009b4 	movhi	r4,38
     438:	21200504 	addi	r4,r4,-32748
     43c:	26c9883a 	add	r4,r4,sp
     440:	21000017 	ldw	r4,0(r4)
     444:	20800015 	stw	r2,0(r4)
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     448:	014009b4 	movhi	r5,38
     44c:	29600404 	addi	r5,r5,-32752
     450:	2ecb883a 	add	r5,r5,sp
     454:	2f000017 	ldw	fp,0(r5)
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
				float yc = (float)(y*yscale + yoff);
				zr[x][y] = xc;
				zi[x][y] = yc;
     458:	e5000015 	stw	r20,0(fp)
     45c:	a025883a 	mov	r18,r20
     460:	1021883a 	mov	r16,r2
     464:	002b883a 	mov	r21,zero
     468:	008009b4 	movhi	r2,38
     46c:	10a00004 	addi	r2,r2,-32768
     470:	d8ad883a 	add	r22,sp,r2
				//float q = pow((xc - 0.25), 2) + pow(yc, 2);
				//if (q*(q+(xc-0.25)) >= 0.25*pow(yc, 2)) {
					while (t<50){
						float zr_xy = zr[x][y];
						float zi_xy = zi[x][y];
						float zr_n = zr_xy*zr_xy - zi_xy*zi_xy + (float)(x*xscale + xoff);
     474:	8407ff32 	custom	252,r3,r16,r16
     478:	9485ff32 	custom	252,r2,r18,r18
     47c:	1887ffb2 	custom	254,r3,r3,r2
     480:	b0800017 	ldw	r2,0(r22)
     484:	010009b4 	movhi	r4,38
     488:	21200b04 	addi	r4,r4,-32724
     48c:	26c9883a 	add	r4,r4,sp
     490:	21000017 	ldw	r4,0(r4)
     494:	2085ff32 	custom	252,r2,r4,r2
     498:	014009b4 	movhi	r5,38
     49c:	29600804 	addi	r5,r5,-32736
     4a0:	2ecb883a 	add	r5,r5,sp
     4a4:	29400017 	ldw	r5,0(r5)
     4a8:	2885ff72 	custom	253,r2,r5,r2
     4ac:	18a7ff72 	custom	253,r19,r3,r2
						float zi_n = 2.0*zr_xy*zi_xy + (float)(y*yscale + yoff);
     4b0:	8405ff72 	custom	253,r2,r16,r16
     4b4:	9085ff32 	custom	252,r2,r18,r2
     4b8:	a0a3ff72 	custom	253,r17,r20,r2
						if (zr_n*zi_n < 4.0) {
     4bc:	9c49ff32 	custom	252,r4,r19,r17
     4c0:	01502034 	movhi	r5,16512
     4c4:	000083c0 	call	83c <__ltsf2>
     4c8:	1000030e 	bge	r2,zero,4d8 <main+0x324>
							zi[x][y] = zi_n;
						}else{
							alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
							t = 50;
						}
						if (t == 49)
     4cc:	00800c44 	movi	r2,49
     4d0:	a880251e 	bne	r21,r2,568 <main+0x3b4>
     4d4:	00001206 	br	520 <main+0x36c>
     4d8:	e4800015 	stw	r18,0(fp)
     4dc:	008009b4 	movhi	r2,38
     4e0:	10a00304 	addi	r2,r2,-32756
     4e4:	16c5883a 	add	r2,r2,sp
     4e8:	10800017 	ldw	r2,0(r2)
     4ec:	14000015 	stw	r16,0(r2)
						if (zr_n*zi_n < 4.0) {
							
							zr[x][y] = zr_n;
							zi[x][y] = zi_n;
						}else{
							alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
     4f0:	00c009b4 	movhi	r3,38
     4f4:	18e00a04 	addi	r3,r3,-32728
     4f8:	1ec7883a 	add	r3,r3,sp
     4fc:	19000017 	ldw	r4,0(r3)
     500:	a80b883a 	mov	r5,r21
     504:	008009b4 	movhi	r2,38
     508:	10a00904 	addi	r2,r2,-32732
     50c:	16c5883a 	add	r2,r2,sp
     510:	11800017 	ldw	r6,0(r2)
     514:	b80f883a 	mov	r7,r23
     518:	00111900 	call	11190 <alt_up_pixel_buffer_dma_draw>
     51c:	00001e06 	br	598 <main+0x3e4>
     520:	e4400015 	stw	r17,0(fp)
     524:	00c009b4 	movhi	r3,38
     528:	18e00304 	addi	r3,r3,-32756
     52c:	1ec7883a 	add	r3,r3,sp
     530:	18c00017 	ldw	r3,0(r3)
     534:	1cc00015 	stw	r19,0(r3)
							t = 50;
						}
						if (t == 49)
						{
							alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, 0, x, y);
     538:	014009b4 	movhi	r5,38
     53c:	29600a04 	addi	r5,r5,-32728
     540:	2ecb883a 	add	r5,r5,sp
     544:	29000017 	ldw	r4,0(r5)
     548:	000b883a 	mov	r5,zero
     54c:	008009b4 	movhi	r2,38
     550:	10a00904 	addi	r2,r2,-32732
     554:	16c5883a 	add	r2,r2,sp
     558:	11800017 	ldw	r6,0(r2)
     55c:	b80f883a 	mov	r7,r23
     560:	00111900 	call	11190 <alt_up_pixel_buffer_dma_draw>
     564:	00000c06 	br	598 <main+0x3e4>
						}
						t = t +1;
     568:	ad400044 	addi	r21,r21,1
				zr[x][y] = xc;
				zi[x][y] = yc;
				t = 0;
				//float q = pow((xc - 0.25), 2) + pow(yc, 2);
				//if (q*(q+(xc-0.25)) >= 0.25*pow(yc, 2)) {
					while (t<50){
     56c:	00800c84 	movi	r2,50
     570:	a8800326 	beq	r21,r2,580 <main+0x3cc>
     574:	8825883a 	mov	r18,r17
     578:	9821883a 	mov	r16,r19
     57c:	003fbd06 	br	474 <main+0x2c0>
     580:	e4400015 	stw	r17,0(fp)
     584:	00c009b4 	movhi	r3,38
     588:	18e00304 	addi	r3,r3,-32756
     58c:	1ec7883a 	add	r3,r3,sp
     590:	18c00017 	ldw	r3,0(r3)
     594:	1cc00015 	stw	r19,0(r3)
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
     598:	00c00044 	movi	r3,1
     59c:	b8ef883a 	add	r23,r23,r3
     5a0:	00800104 	movi	r2,4
     5a4:	010009b4 	movhi	r4,38
     5a8:	21200504 	addi	r4,r4,-32748
     5ac:	26c9883a 	add	r4,r4,sp
     5b0:	21000017 	ldw	r4,0(r4)
     5b4:	208b883a 	add	r5,r4,r2
     5b8:	010009b4 	movhi	r4,38
     5bc:	21200504 	addi	r4,r4,-32748
     5c0:	26c9883a 	add	r4,r4,sp
     5c4:	21400015 	stw	r5,0(r4)
     5c8:	014009b4 	movhi	r5,38
     5cc:	29600404 	addi	r5,r5,-32752
     5d0:	2ecb883a 	add	r5,r5,sp
     5d4:	29400017 	ldw	r5,0(r5)
     5d8:	2889883a 	add	r4,r5,r2
     5dc:	014009b4 	movhi	r5,38
     5e0:	29600404 	addi	r5,r5,-32752
     5e4:	2ecb883a 	add	r5,r5,sp
     5e8:	29000015 	stw	r4,0(r5)
     5ec:	00807804 	movi	r2,480
     5f0:	b8bf641e 	bne	r23,r2,384 <main+0x1d0>
	
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
     5f4:	008009b4 	movhi	r2,38
     5f8:	10a00904 	addi	r2,r2,-32732
     5fc:	16c5883a 	add	r2,r2,sp
     600:	10800017 	ldw	r2,0(r2)
     604:	10c9883a 	add	r4,r2,r3
     608:	008009b4 	movhi	r2,38
     60c:	10a00904 	addi	r2,r2,-32732
     610:	16c5883a 	add	r2,r2,sp
     614:	11000015 	stw	r4,0(r2)
     618:	0080a004 	movi	r2,640
     61c:	2080601e 	bne	r4,r2,7a0 <main+0x5ec>
				//}
				//
			}
		}
		
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 2);
     620:	00800084 	movi	r2,2
     624:	01002034 	movhi	r4,128
     628:	20800035 	stwio	r2,0(r4)
	
		//Permit user input for zooming.
		//We only allow zooming by a factor of two, so only neeed input is the center to zoom to.
		printf ("\nCurrent X Offset=%f\n",xoff);
     62c:	014009b4 	movhi	r5,38
     630:	29600804 	addi	r5,r5,-32736
     634:	2ecb883a 	add	r5,r5,sp
     638:	29000017 	ldw	r4,0(r5)
     63c:	000094c0 	call	94c <__extendsfdf2>
     640:	01000074 	movhi	r4,1
     644:	21083304 	addi	r4,r4,8396
     648:	100b883a 	mov	r5,r2
     64c:	180d883a 	mov	r6,r3
     650:	000103c0 	call	103c <printf>
		printf ("Current Y Offset=%f\n",yoff);
     654:	008009b4 	movhi	r2,38
     658:	10a00704 	addi	r2,r2,-32740
     65c:	16c5883a 	add	r2,r2,sp
     660:	11000017 	ldw	r4,0(r2)
     664:	000094c0 	call	94c <__extendsfdf2>
     668:	01000074 	movhi	r4,1
     66c:	21083904 	addi	r4,r4,8420
     670:	100b883a 	mov	r5,r2
     674:	180d883a 	mov	r6,r3
     678:	000103c0 	call	103c <printf>
		float xoff_n;
		float yoff_n;
		alt_printf ("What is the new X Offset? ");
     67c:	01000074 	movhi	r4,1
     680:	21083f04 	addi	r4,r4,8444
     684:	000f7bc0 	call	f7bc <alt_printf>
		scanf ("%f",&xoff_n);
     688:	01000074 	movhi	r4,1
     68c:	21084604 	addi	r4,r4,8472
     690:	00c009b4 	movhi	r3,38
     694:	18e00d04 	addi	r3,r3,-32716
     698:	1ec7883a 	add	r3,r3,sp
     69c:	19400017 	ldw	r5,0(r3)
     6a0:	00010e80 	call	10e8 <scanf>
		alt_printf ("What is the new Y Offset? ");
     6a4:	01000074 	movhi	r4,1
     6a8:	21084704 	addi	r4,r4,8476
     6ac:	000f7bc0 	call	f7bc <alt_printf>
		scanf ("%f",&yoff_n);
     6b0:	01000074 	movhi	r4,1
     6b4:	21084604 	addi	r4,r4,8472
     6b8:	008009b4 	movhi	r2,38
     6bc:	10a00e04 	addi	r2,r2,-32712
     6c0:	16c5883a 	add	r2,r2,sp
     6c4:	11400017 	ldw	r5,0(r2)
     6c8:	00010e80 	call	10e8 <scanf>
		alt_printf ("Scaling ");
     6cc:	01000074 	movhi	r4,1
     6d0:	21084e04 	addi	r4,r4,8504
     6d4:	000f7bc0 	call	f7bc <alt_printf>
		scanf ("%f",&xscale);
     6d8:	01000074 	movhi	r4,1
     6dc:	21084604 	addi	r4,r4,8472
     6e0:	00c009b4 	movhi	r3,38
     6e4:	18e00c04 	addi	r3,r3,-32720
     6e8:	1ec7883a 	add	r3,r3,sp
     6ec:	19400017 	ldw	r5,0(r3)
     6f0:	00010e80 	call	10e8 <scanf>
		yscale = xscale;
     6f4:	010009b4 	movhi	r4,38
     6f8:	21200c04 	addi	r4,r4,-32720
     6fc:	26c9883a 	add	r4,r4,sp
     700:	21000017 	ldw	r4,0(r4)
     704:	24000017 	ldw	r16,0(r4)
		alt_printf ("Cool. Get ready for some crazy zooming action.\n");
     708:	01000074 	movhi	r4,1
     70c:	21085104 	addi	r4,r4,8516
     710:	000f7bc0 	call	f7bc <alt_printf>
		
		xscale = xscale/2;
     714:	00cfc034 	movhi	r3,16128
     718:	014009b4 	movhi	r5,38
     71c:	29600c04 	addi	r5,r5,-32720
     720:	2ecb883a 	add	r5,r5,sp
     724:	29400017 	ldw	r5,0(r5)
     728:	28800017 	ldw	r2,0(r5)
     72c:	10e3ff32 	custom	252,r17,r2,r3
     730:	2c400015 	stw	r17,0(r5)
		yscale = yscale/2;
     734:	80cbff32 	custom	252,r5,r16,r3
     738:	010009b4 	movhi	r4,38
     73c:	21200604 	addi	r4,r4,-32744
     740:	26c9883a 	add	r4,r4,sp
     744:	21400015 	stw	r5,0(r4)
		
		xoff = -1.0*xoff_n*640.0*xscale;
     748:	008009b4 	movhi	r2,38
     74c:	10a00d04 	addi	r2,r2,-32716
     750:	16c5883a 	add	r2,r2,sp
     754:	10800017 	ldw	r2,0(r2)
     758:	14000017 	ldw	r16,0(r2)
		yoff = -1.0*yoff_n*480.0*yscale;
     75c:	00c009b4 	movhi	r3,38
     760:	18e00e04 	addi	r3,r3,-32712
     764:	1ec7883a 	add	r3,r3,sp
     768:	18c00017 	ldw	r3,0(r3)
     76c:	1c800017 	ldw	r18,0(r3)
	
		t=0;

		
		
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     770:	014009b4 	movhi	r5,38
     774:	29600a04 	addi	r5,r5,-32728
     778:	2ecb883a 	add	r5,r5,sp
     77c:	29000017 	ldw	r4,0(r5)
     780:	001124c0 	call	1124c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     784:	103ee31e 	bne	r2,zero,314 <main+0x160>
				
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     788:	008009b4 	movhi	r2,38
     78c:	10a00a04 	addi	r2,r2,-32728
     790:	16c5883a 	add	r2,r2,sp
     794:	11000017 	ldw	r4,0(r2)
     798:	001116c0 	call	1116c <alt_up_pixel_buffer_dma_swap_buffers>
     79c:	003edd06 	br	314 <main+0x160>
     7a0:	00c009b4 	movhi	r3,38
     7a4:	18e00904 	addi	r3,r3,-32732
     7a8:	1ec7883a 	add	r3,r3,sp
     7ac:	18c00017 	ldw	r3,0(r3)
     7b0:	1881e024 	muli	r2,r3,1920
     7b4:	d88b883a 	add	r5,sp,r2
     7b8:	010009b4 	movhi	r4,38
     7bc:	21200504 	addi	r4,r4,-32748
     7c0:	26c9883a 	add	r4,r4,sp
     7c4:	21400015 	stw	r5,0(r4)
     7c8:	00c004f4 	movhi	r3,19
     7cc:	18f00004 	addi	r3,r3,-16384
     7d0:	d8c7883a 	add	r3,sp,r3
     7d4:	188b883a 	add	r5,r3,r2
     7d8:	010009b4 	movhi	r4,38
     7dc:	21200404 	addi	r4,r4,-32752
     7e0:	26c9883a 	add	r4,r4,sp
     7e4:	21400015 	stw	r5,0(r4)
     7e8:	002f883a 	mov	r23,zero
     7ec:	003ee506 	br	384 <main+0x1d0>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     7f0:	01000074 	movhi	r4,1
     7f4:	21081f04 	addi	r4,r4,8316
     7f8:	000f7bc0 	call	f7bc <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     7fc:	00bfffc4 	movi	r2,-1
     800:	020009b4 	movhi	r8,38
     804:	42200f04 	addi	r8,r8,-32708
     808:	da37883a 	add	sp,sp,r8
     80c:	dfc00917 	ldw	ra,36(sp)
     810:	df000817 	ldw	fp,32(sp)
     814:	ddc00717 	ldw	r23,28(sp)
     818:	dd800617 	ldw	r22,24(sp)
     81c:	dd400517 	ldw	r21,20(sp)
     820:	dd000417 	ldw	r20,16(sp)
     824:	dcc00317 	ldw	r19,12(sp)
     828:	dc800217 	ldw	r18,8(sp)
     82c:	dc400117 	ldw	r17,4(sp)
     830:	dc000017 	ldw	r16,0(sp)
     834:	dec00a04 	addi	sp,sp,40
     838:	f800283a 	ret

0000083c <__ltsf2>:
     83c:	defff304 	addi	sp,sp,-52
     840:	dc400b15 	stw	r17,44(sp)
     844:	dc400204 	addi	r17,sp,8
     848:	dc000a15 	stw	r16,40(sp)
     84c:	d9000015 	stw	r4,0(sp)
     850:	d9400115 	stw	r5,4(sp)
     854:	d809883a 	mov	r4,sp
     858:	880b883a 	mov	r5,r17
     85c:	dc000604 	addi	r16,sp,24
     860:	dfc00c15 	stw	ra,48(sp)
     864:	0000bb80 	call	bb8 <__unpack_f>
     868:	d9000104 	addi	r4,sp,4
     86c:	800b883a 	mov	r5,r16
     870:	0000bb80 	call	bb8 <__unpack_f>
     874:	d8800217 	ldw	r2,8(sp)
     878:	00c00044 	movi	r3,1
     87c:	180d883a 	mov	r6,r3
     880:	1880062e 	bgeu	r3,r2,89c <__ltsf2+0x60>
     884:	d8800617 	ldw	r2,24(sp)
     888:	8809883a 	mov	r4,r17
     88c:	800b883a 	mov	r5,r16
     890:	1880022e 	bgeu	r3,r2,89c <__ltsf2+0x60>
     894:	0000c800 	call	c80 <__fpcmp_parts_f>
     898:	100d883a 	mov	r6,r2
     89c:	3005883a 	mov	r2,r6
     8a0:	dfc00c17 	ldw	ra,48(sp)
     8a4:	dc400b17 	ldw	r17,44(sp)
     8a8:	dc000a17 	ldw	r16,40(sp)
     8ac:	dec00d04 	addi	sp,sp,52
     8b0:	f800283a 	ret

000008b4 <__floatsisf>:
     8b4:	2006d7fa 	srli	r3,r4,31
     8b8:	defffa04 	addi	sp,sp,-24
     8bc:	008000c4 	movi	r2,3
     8c0:	dfc00515 	stw	ra,20(sp)
     8c4:	dc000415 	stw	r16,16(sp)
     8c8:	d8800015 	stw	r2,0(sp)
     8cc:	d8c00115 	stw	r3,4(sp)
     8d0:	2000081e 	bne	r4,zero,8f4 <__floatsisf+0x40>
     8d4:	00800084 	movi	r2,2
     8d8:	d8800015 	stw	r2,0(sp)
     8dc:	d809883a 	mov	r4,sp
     8e0:	0000a580 	call	a58 <__pack_f>
     8e4:	dfc00517 	ldw	ra,20(sp)
     8e8:	dc000417 	ldw	r16,16(sp)
     8ec:	dec00604 	addi	sp,sp,24
     8f0:	f800283a 	ret
     8f4:	00800784 	movi	r2,30
     8f8:	1807003a 	cmpeq	r3,r3,zero
     8fc:	d8800215 	stw	r2,8(sp)
     900:	18000e1e 	bne	r3,zero,93c <__floatsisf+0x88>
     904:	00a00034 	movhi	r2,32768
     908:	20800e26 	beq	r4,r2,944 <__floatsisf+0x90>
     90c:	0121c83a 	sub	r16,zero,r4
     910:	8009883a 	mov	r4,r16
     914:	dc000315 	stw	r16,12(sp)
     918:	00009d80 	call	9d8 <__clzsi2>
     91c:	117fffc4 	addi	r5,r2,-1
     920:	017fee0e 	bge	zero,r5,8dc <__floatsisf+0x28>
     924:	d8800217 	ldw	r2,8(sp)
     928:	8146983a 	sll	r3,r16,r5
     92c:	1145c83a 	sub	r2,r2,r5
     930:	d8c00315 	stw	r3,12(sp)
     934:	d8800215 	stw	r2,8(sp)
     938:	003fe806 	br	8dc <__floatsisf+0x28>
     93c:	2021883a 	mov	r16,r4
     940:	003ff306 	br	910 <__floatsisf+0x5c>
     944:	00b3c034 	movhi	r2,52992
     948:	003fe606 	br	8e4 <__floatsisf+0x30>

0000094c <__extendsfdf2>:
     94c:	defff904 	addi	sp,sp,-28
     950:	d9000115 	stw	r4,4(sp)
     954:	d9400204 	addi	r5,sp,8
     958:	d9000104 	addi	r4,sp,4
     95c:	dfc00615 	stw	ra,24(sp)
     960:	0000bb80 	call	bb8 <__unpack_f>
     964:	d9c00517 	ldw	r7,20(sp)
     968:	0011883a 	mov	r8,zero
     96c:	400697ba 	slli	r3,r8,30
     970:	3812d0ba 	srli	r9,r7,2
     974:	380497ba 	slli	r2,r7,30
     978:	d9000217 	ldw	r4,8(sp)
     97c:	d9400317 	ldw	r5,12(sp)
     980:	d9800417 	ldw	r6,16(sp)
     984:	48c6b03a 	or	r3,r9,r3
     988:	100f883a 	mov	r7,r2
     98c:	d8c00015 	stw	r3,0(sp)
     990:	00009a00 	call	9a0 <__make_dp>
     994:	dfc00617 	ldw	ra,24(sp)
     998:	dec00704 	addi	sp,sp,28
     99c:	f800283a 	ret

000009a0 <__make_dp>:
     9a0:	defff904 	addi	sp,sp,-28
     9a4:	d8c00717 	ldw	r3,28(sp)
     9a8:	d9000015 	stw	r4,0(sp)
     9ac:	d809883a 	mov	r4,sp
     9b0:	dfc00515 	stw	ra,20(sp)
     9b4:	d9c00615 	stw	r7,24(sp)
     9b8:	d9400115 	stw	r5,4(sp)
     9bc:	d9800215 	stw	r6,8(sp)
     9c0:	d8c00415 	stw	r3,16(sp)
     9c4:	d9c00315 	stw	r7,12(sp)
     9c8:	0000d280 	call	d28 <__pack_d>
     9cc:	dfc00517 	ldw	ra,20(sp)
     9d0:	dec00704 	addi	sp,sp,28
     9d4:	f800283a 	ret

000009d8 <__clzsi2>:
     9d8:	00bfffd4 	movui	r2,65535
     9dc:	11000e36 	bltu	r2,r4,a18 <__clzsi2+0x40>
     9e0:	00803fc4 	movi	r2,255
     9e4:	01400204 	movi	r5,8
     9e8:	0007883a 	mov	r3,zero
     9ec:	11001036 	bltu	r2,r4,a30 <__clzsi2+0x58>
     9f0:	000b883a 	mov	r5,zero
     9f4:	20c6d83a 	srl	r3,r4,r3
     9f8:	00800074 	movhi	r2,1
     9fc:	10885d04 	addi	r2,r2,8564
     a00:	1887883a 	add	r3,r3,r2
     a04:	18800003 	ldbu	r2,0(r3)
     a08:	00c00804 	movi	r3,32
     a0c:	2885883a 	add	r2,r5,r2
     a10:	1885c83a 	sub	r2,r3,r2
     a14:	f800283a 	ret
     a18:	01400404 	movi	r5,16
     a1c:	00804034 	movhi	r2,256
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	2807883a 	mov	r3,r5
     a28:	113ff22e 	bgeu	r2,r4,9f4 <__clzsi2+0x1c>
     a2c:	01400604 	movi	r5,24
     a30:	2807883a 	mov	r3,r5
     a34:	20c6d83a 	srl	r3,r4,r3
     a38:	00800074 	movhi	r2,1
     a3c:	10885d04 	addi	r2,r2,8564
     a40:	1887883a 	add	r3,r3,r2
     a44:	18800003 	ldbu	r2,0(r3)
     a48:	00c00804 	movi	r3,32
     a4c:	2885883a 	add	r2,r5,r2
     a50:	1885c83a 	sub	r2,r3,r2
     a54:	f800283a 	ret

00000a58 <__pack_f>:
     a58:	20c00017 	ldw	r3,0(r4)
     a5c:	01c00044 	movi	r7,1
     a60:	21800317 	ldw	r6,12(r4)
     a64:	21400117 	ldw	r5,4(r4)
     a68:	38c02d2e 	bgeu	r7,r3,b20 <__pack_f+0xc8>
     a6c:	00800104 	movi	r2,4
     a70:	18802826 	beq	r3,r2,b14 <__pack_f+0xbc>
     a74:	00800084 	movi	r2,2
     a78:	18800126 	beq	r3,r2,a80 <__pack_f+0x28>
     a7c:	3000101e 	bne	r6,zero,ac0 <__pack_f+0x68>
     a80:	000d883a 	mov	r6,zero
     a84:	0007883a 	mov	r3,zero
     a88:	19003fcc 	andi	r4,r3,255
     a8c:	200895fa 	slli	r4,r4,23
     a90:	00c02034 	movhi	r3,128
     a94:	18ffffc4 	addi	r3,r3,-1
     a98:	30c6703a 	and	r3,r6,r3
     a9c:	10a0002c 	andhi	r2,r2,32768
     aa0:	10c4b03a 	or	r2,r2,r3
     aa4:	280a97fa 	slli	r5,r5,31
     aa8:	1104b03a 	or	r2,r2,r4
     aac:	00e00034 	movhi	r3,32768
     ab0:	18ffffc4 	addi	r3,r3,-1
     ab4:	10c4703a 	and	r2,r2,r3
     ab8:	1144b03a 	or	r2,r2,r5
     abc:	f800283a 	ret
     ac0:	21000217 	ldw	r4,8(r4)
     ac4:	00bfe084 	movi	r2,-126
     ac8:	20801b16 	blt	r4,r2,b38 <__pack_f+0xe0>
     acc:	00801fc4 	movi	r2,127
     ad0:	11001016 	blt	r2,r4,b14 <__pack_f+0xbc>
     ad4:	308e703a 	and	r7,r6,r2
     ad8:	2087883a 	add	r3,r4,r2
     adc:	00801004 	movi	r2,64
     ae0:	38800526 	beq	r7,r2,af8 <__pack_f+0xa0>
     ae4:	31800fc4 	addi	r6,r6,63
     ae8:	30000716 	blt	r6,zero,b08 <__pack_f+0xb0>
     aec:	300490ba 	slli	r2,r6,2
     af0:	100cd27a 	srli	r6,r2,9
     af4:	003fe406 	br	a88 <__pack_f+0x30>
     af8:	3080200c 	andi	r2,r6,128
     afc:	103ffa26 	beq	r2,zero,ae8 <__pack_f+0x90>
     b00:	31cd883a 	add	r6,r6,r7
     b04:	003ff806 	br	ae8 <__pack_f+0x90>
     b08:	300cd07a 	srli	r6,r6,1
     b0c:	18c00044 	addi	r3,r3,1
     b10:	003ff606 	br	aec <__pack_f+0x94>
     b14:	000d883a 	mov	r6,zero
     b18:	00ffffc4 	movi	r3,-1
     b1c:	003fda06 	br	a88 <__pack_f+0x30>
     b20:	31800434 	orhi	r6,r6,16
     b24:	00802034 	movhi	r2,128
     b28:	10bfffc4 	addi	r2,r2,-1
     b2c:	308c703a 	and	r6,r6,r2
     b30:	00ffffc4 	movi	r3,-1
     b34:	003fd406 	br	a88 <__pack_f+0x30>
     b38:	1109c83a 	sub	r4,r2,r4
     b3c:	00800644 	movi	r2,25
     b40:	11001216 	blt	r2,r4,b8c <__pack_f+0x134>
     b44:	3904983a 	sll	r2,r7,r4
     b48:	3106d83a 	srl	r3,r6,r4
     b4c:	10bfffc4 	addi	r2,r2,-1
     b50:	3084703a 	and	r2,r6,r2
     b54:	1004c03a 	cmpne	r2,r2,zero
     b58:	1886b03a 	or	r3,r3,r2
     b5c:	19001fcc 	andi	r4,r3,127
     b60:	00801004 	movi	r2,64
     b64:	20800c26 	beq	r4,r2,b98 <__pack_f+0x140>
     b68:	18c00fc4 	addi	r3,r3,63
     b6c:	00900034 	movhi	r2,16384
     b70:	10bfffc4 	addi	r2,r2,-1
     b74:	180cd1fa 	srli	r6,r3,7
     b78:	10c7803a 	cmpltu	r3,r2,r3
     b7c:	00802034 	movhi	r2,128
     b80:	10bfffc4 	addi	r2,r2,-1
     b84:	308c703a 	and	r6,r6,r2
     b88:	003fbf06 	br	a88 <__pack_f+0x30>
     b8c:	0007883a 	mov	r3,zero
     b90:	000d883a 	mov	r6,zero
     b94:	003ff906 	br	b7c <__pack_f+0x124>
     b98:	1880200c 	andi	r2,r3,128
     b9c:	10000126 	beq	r2,zero,ba4 <__pack_f+0x14c>
     ba0:	1907883a 	add	r3,r3,r4
     ba4:	180cd1fa 	srli	r6,r3,7
     ba8:	00900034 	movhi	r2,16384
     bac:	10bfffc4 	addi	r2,r2,-1
     bb0:	10c7803a 	cmpltu	r3,r2,r3
     bb4:	003ff106 	br	b7c <__pack_f+0x124>

00000bb8 <__unpack_f>:
     bb8:	21800017 	ldw	r6,0(r4)
     bbc:	00c02034 	movhi	r3,128
     bc0:	18ffffc4 	addi	r3,r3,-1
     bc4:	3004d5fa 	srli	r2,r6,23
     bc8:	3008d7fa 	srli	r4,r6,31
     bcc:	30ce703a 	and	r7,r6,r3
     bd0:	10c03fcc 	andi	r3,r2,255
     bd4:	29000115 	stw	r4,4(r5)
     bd8:	1800131e 	bne	r3,zero,c28 <__unpack_f+0x70>
     bdc:	38000f26 	beq	r7,zero,c1c <__unpack_f+0x64>
     be0:	380691fa 	slli	r3,r7,7
     be4:	01bfe084 	movi	r6,-126
     be8:	008000c4 	movi	r2,3
     bec:	01100034 	movhi	r4,16384
     bf0:	213fffc4 	addi	r4,r4,-1
     bf4:	28800015 	stw	r2,0(r5)
     bf8:	29800215 	stw	r6,8(r5)
     bfc:	20c00536 	bltu	r4,r3,c14 <__unpack_f+0x5c>
     c00:	3005883a 	mov	r2,r6
     c04:	18c7883a 	add	r3,r3,r3
     c08:	10bfffc4 	addi	r2,r2,-1
     c0c:	20fffd2e 	bgeu	r4,r3,c04 <__unpack_f+0x4c>
     c10:	28800215 	stw	r2,8(r5)
     c14:	28c00315 	stw	r3,12(r5)
     c18:	f800283a 	ret
     c1c:	00800084 	movi	r2,2
     c20:	28800015 	stw	r2,0(r5)
     c24:	f800283a 	ret
     c28:	00803fc4 	movi	r2,255
     c2c:	18800826 	beq	r3,r2,c50 <__unpack_f+0x98>
     c30:	380491fa 	slli	r2,r7,7
     c34:	18ffe044 	addi	r3,r3,-127
     c38:	28c00215 	stw	r3,8(r5)
     c3c:	10900034 	orhi	r2,r2,16384
     c40:	28800315 	stw	r2,12(r5)
     c44:	008000c4 	movi	r2,3
     c48:	28800015 	stw	r2,0(r5)
     c4c:	f800283a 	ret
     c50:	3800031e 	bne	r7,zero,c60 <__unpack_f+0xa8>
     c54:	00800104 	movi	r2,4
     c58:	28800015 	stw	r2,0(r5)
     c5c:	f800283a 	ret
     c60:	3080042c 	andhi	r2,r6,16
     c64:	10000426 	beq	r2,zero,c78 <__unpack_f+0xc0>
     c68:	00800044 	movi	r2,1
     c6c:	28800015 	stw	r2,0(r5)
     c70:	29c00315 	stw	r7,12(r5)
     c74:	f800283a 	ret
     c78:	28000015 	stw	zero,0(r5)
     c7c:	003ffc06 	br	c70 <__unpack_f+0xb8>

00000c80 <__fpcmp_parts_f>:
     c80:	21800017 	ldw	r6,0(r4)
     c84:	00c00044 	movi	r3,1
     c88:	19800a2e 	bgeu	r3,r6,cb4 <__fpcmp_parts_f+0x34>
     c8c:	28800017 	ldw	r2,0(r5)
     c90:	1880082e 	bgeu	r3,r2,cb4 <__fpcmp_parts_f+0x34>
     c94:	00c00104 	movi	r3,4
     c98:	30c01e26 	beq	r6,r3,d14 <__fpcmp_parts_f+0x94>
     c9c:	10c01a26 	beq	r2,r3,d08 <__fpcmp_parts_f+0x88>
     ca0:	00c00084 	movi	r3,2
     ca4:	30c00526 	beq	r6,r3,cbc <__fpcmp_parts_f+0x3c>
     ca8:	10c0071e 	bne	r2,r3,cc8 <__fpcmp_parts_f+0x48>
     cac:	20800117 	ldw	r2,4(r4)
     cb0:	1000091e 	bne	r2,zero,cd8 <__fpcmp_parts_f+0x58>
     cb4:	00800044 	movi	r2,1
     cb8:	f800283a 	ret
     cbc:	10c0121e 	bne	r2,r3,d08 <__fpcmp_parts_f+0x88>
     cc0:	0005883a 	mov	r2,zero
     cc4:	f800283a 	ret
     cc8:	20c00117 	ldw	r3,4(r4)
     ccc:	28800117 	ldw	r2,4(r5)
     cd0:	18800326 	beq	r3,r2,ce0 <__fpcmp_parts_f+0x60>
     cd4:	183ff726 	beq	r3,zero,cb4 <__fpcmp_parts_f+0x34>
     cd8:	00bfffc4 	movi	r2,-1
     cdc:	f800283a 	ret
     ce0:	21800217 	ldw	r6,8(r4)
     ce4:	28800217 	ldw	r2,8(r5)
     ce8:	11bffa16 	blt	r2,r6,cd4 <__fpcmp_parts_f+0x54>
     cec:	30800416 	blt	r6,r2,d00 <__fpcmp_parts_f+0x80>
     cf0:	21000317 	ldw	r4,12(r4)
     cf4:	29400317 	ldw	r5,12(r5)
     cf8:	293ff636 	bltu	r5,r4,cd4 <__fpcmp_parts_f+0x54>
     cfc:	217ff02e 	bgeu	r4,r5,cc0 <__fpcmp_parts_f+0x40>
     d00:	183fec1e 	bne	r3,zero,cb4 <__fpcmp_parts_f+0x34>
     d04:	003ff406 	br	cd8 <__fpcmp_parts_f+0x58>
     d08:	28800117 	ldw	r2,4(r5)
     d0c:	103fe91e 	bne	r2,zero,cb4 <__fpcmp_parts_f+0x34>
     d10:	003ff106 	br	cd8 <__fpcmp_parts_f+0x58>
     d14:	11bfe51e 	bne	r2,r6,cac <__fpcmp_parts_f+0x2c>
     d18:	28c00117 	ldw	r3,4(r5)
     d1c:	20800117 	ldw	r2,4(r4)
     d20:	1885c83a 	sub	r2,r3,r2
     d24:	f800283a 	ret

00000d28 <__pack_d>:
     d28:	20c00017 	ldw	r3,0(r4)
     d2c:	defffd04 	addi	sp,sp,-12
     d30:	dc000015 	stw	r16,0(sp)
     d34:	dc800215 	stw	r18,8(sp)
     d38:	dc400115 	stw	r17,4(sp)
     d3c:	00800044 	movi	r2,1
     d40:	22000317 	ldw	r8,12(r4)
     d44:	001f883a 	mov	r15,zero
     d48:	22400417 	ldw	r9,16(r4)
     d4c:	24000117 	ldw	r16,4(r4)
     d50:	10c0552e 	bgeu	r2,r3,ea8 <__pack_d+0x180>
     d54:	00800104 	movi	r2,4
     d58:	18804f26 	beq	r3,r2,e98 <__pack_d+0x170>
     d5c:	00800084 	movi	r2,2
     d60:	18800226 	beq	r3,r2,d6c <__pack_d+0x44>
     d64:	4244b03a 	or	r2,r8,r9
     d68:	10001a1e 	bne	r2,zero,dd4 <__pack_d+0xac>
     d6c:	000d883a 	mov	r6,zero
     d70:	000f883a 	mov	r7,zero
     d74:	0011883a 	mov	r8,zero
     d78:	00800434 	movhi	r2,16
     d7c:	10bfffc4 	addi	r2,r2,-1
     d80:	301d883a 	mov	r14,r6
     d84:	3884703a 	and	r2,r7,r2
     d88:	400a953a 	slli	r5,r8,20
     d8c:	79bffc2c 	andhi	r6,r15,65520
     d90:	308cb03a 	or	r6,r6,r2
     d94:	00e00434 	movhi	r3,32784
     d98:	18ffffc4 	addi	r3,r3,-1
     d9c:	800497fa 	slli	r2,r16,31
     da0:	30c6703a 	and	r3,r6,r3
     da4:	1946b03a 	or	r3,r3,r5
     da8:	01600034 	movhi	r5,32768
     dac:	297fffc4 	addi	r5,r5,-1
     db0:	194a703a 	and	r5,r3,r5
     db4:	288ab03a 	or	r5,r5,r2
     db8:	2807883a 	mov	r3,r5
     dbc:	7005883a 	mov	r2,r14
     dc0:	dc800217 	ldw	r18,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00304 	addi	sp,sp,12
     dd0:	f800283a 	ret
     dd4:	21000217 	ldw	r4,8(r4)
     dd8:	00bf0084 	movi	r2,-1022
     ddc:	20803f16 	blt	r4,r2,edc <__pack_d+0x1b4>
     de0:	0080ffc4 	movi	r2,1023
     de4:	11002c16 	blt	r2,r4,e98 <__pack_d+0x170>
     de8:	00803fc4 	movi	r2,255
     dec:	408c703a 	and	r6,r8,r2
     df0:	00802004 	movi	r2,128
     df4:	0007883a 	mov	r3,zero
     df8:	000f883a 	mov	r7,zero
     dfc:	2280ffc4 	addi	r10,r4,1023
     e00:	30801e26 	beq	r6,r2,e7c <__pack_d+0x154>
     e04:	00801fc4 	movi	r2,127
     e08:	4089883a 	add	r4,r8,r2
     e0c:	220d803a 	cmpltu	r6,r4,r8
     e10:	324d883a 	add	r6,r6,r9
     e14:	2011883a 	mov	r8,r4
     e18:	3013883a 	mov	r9,r6
     e1c:	00880034 	movhi	r2,8192
     e20:	10bfffc4 	addi	r2,r2,-1
     e24:	12400d36 	bltu	r2,r9,e5c <__pack_d+0x134>
     e28:	4804963a 	slli	r2,r9,24
     e2c:	400cd23a 	srli	r6,r8,8
     e30:	480ed23a 	srli	r7,r9,8
     e34:	013fffc4 	movi	r4,-1
     e38:	118cb03a 	or	r6,r2,r6
     e3c:	01400434 	movhi	r5,16
     e40:	297fffc4 	addi	r5,r5,-1
     e44:	3104703a 	and	r2,r6,r4
     e48:	3946703a 	and	r3,r7,r5
     e4c:	5201ffcc 	andi	r8,r10,2047
     e50:	100d883a 	mov	r6,r2
     e54:	180f883a 	mov	r7,r3
     e58:	003fc706 	br	d78 <__pack_d+0x50>
     e5c:	480897fa 	slli	r4,r9,31
     e60:	4004d07a 	srli	r2,r8,1
     e64:	4806d07a 	srli	r3,r9,1
     e68:	52800044 	addi	r10,r10,1
     e6c:	2084b03a 	or	r2,r4,r2
     e70:	1011883a 	mov	r8,r2
     e74:	1813883a 	mov	r9,r3
     e78:	003feb06 	br	e28 <__pack_d+0x100>
     e7c:	383fe11e 	bne	r7,zero,e04 <__pack_d+0xdc>
     e80:	01004004 	movi	r4,256
     e84:	4104703a 	and	r2,r8,r4
     e88:	10c4b03a 	or	r2,r2,r3
     e8c:	103fe326 	beq	r2,zero,e1c <__pack_d+0xf4>
     e90:	3005883a 	mov	r2,r6
     e94:	003fdc06 	br	e08 <__pack_d+0xe0>
     e98:	000d883a 	mov	r6,zero
     e9c:	000f883a 	mov	r7,zero
     ea0:	0201ffc4 	movi	r8,2047
     ea4:	003fb406 	br	d78 <__pack_d+0x50>
     ea8:	0005883a 	mov	r2,zero
     eac:	00c00234 	movhi	r3,8
     eb0:	408cb03a 	or	r6,r8,r2
     eb4:	48ceb03a 	or	r7,r9,r3
     eb8:	013fffc4 	movi	r4,-1
     ebc:	01400434 	movhi	r5,16
     ec0:	297fffc4 	addi	r5,r5,-1
     ec4:	3104703a 	and	r2,r6,r4
     ec8:	3946703a 	and	r3,r7,r5
     ecc:	100d883a 	mov	r6,r2
     ed0:	180f883a 	mov	r7,r3
     ed4:	0201ffc4 	movi	r8,2047
     ed8:	003fa706 	br	d78 <__pack_d+0x50>
     edc:	1109c83a 	sub	r4,r2,r4
     ee0:	00800e04 	movi	r2,56
     ee4:	11004316 	blt	r2,r4,ff4 <__pack_d+0x2cc>
     ee8:	21fff804 	addi	r7,r4,-32
     eec:	38004516 	blt	r7,zero,1004 <__pack_d+0x2dc>
     ef0:	49d8d83a 	srl	r12,r9,r7
     ef4:	001b883a 	mov	r13,zero
     ef8:	0023883a 	mov	r17,zero
     efc:	01400044 	movi	r5,1
     f00:	0025883a 	mov	r18,zero
     f04:	38004716 	blt	r7,zero,1024 <__pack_d+0x2fc>
     f08:	29d6983a 	sll	r11,r5,r7
     f0c:	0015883a 	mov	r10,zero
     f10:	00bfffc4 	movi	r2,-1
     f14:	5089883a 	add	r4,r10,r2
     f18:	588b883a 	add	r5,r11,r2
     f1c:	228d803a 	cmpltu	r6,r4,r10
     f20:	314b883a 	add	r5,r6,r5
     f24:	4104703a 	and	r2,r8,r4
     f28:	4946703a 	and	r3,r9,r5
     f2c:	10c4b03a 	or	r2,r2,r3
     f30:	10000226 	beq	r2,zero,f3c <__pack_d+0x214>
     f34:	04400044 	movi	r17,1
     f38:	0025883a 	mov	r18,zero
     f3c:	00803fc4 	movi	r2,255
     f40:	644eb03a 	or	r7,r12,r17
     f44:	3892703a 	and	r9,r7,r2
     f48:	00802004 	movi	r2,128
     f4c:	6c90b03a 	or	r8,r13,r18
     f50:	0015883a 	mov	r10,zero
     f54:	48801626 	beq	r9,r2,fb0 <__pack_d+0x288>
     f58:	01001fc4 	movi	r4,127
     f5c:	3905883a 	add	r2,r7,r4
     f60:	11cd803a 	cmpltu	r6,r2,r7
     f64:	320d883a 	add	r6,r6,r8
     f68:	100f883a 	mov	r7,r2
     f6c:	00840034 	movhi	r2,4096
     f70:	10bfffc4 	addi	r2,r2,-1
     f74:	3011883a 	mov	r8,r6
     f78:	0007883a 	mov	r3,zero
     f7c:	11801b36 	bltu	r2,r6,fec <__pack_d+0x2c4>
     f80:	4004963a 	slli	r2,r8,24
     f84:	3808d23a 	srli	r4,r7,8
     f88:	400ad23a 	srli	r5,r8,8
     f8c:	1813883a 	mov	r9,r3
     f90:	1108b03a 	or	r4,r2,r4
     f94:	00bfffc4 	movi	r2,-1
     f98:	00c00434 	movhi	r3,16
     f9c:	18ffffc4 	addi	r3,r3,-1
     fa0:	208c703a 	and	r6,r4,r2
     fa4:	28ce703a 	and	r7,r5,r3
     fa8:	4a01ffcc 	andi	r8,r9,2047
     fac:	003f7206 	br	d78 <__pack_d+0x50>
     fb0:	503fe91e 	bne	r10,zero,f58 <__pack_d+0x230>
     fb4:	01004004 	movi	r4,256
     fb8:	3904703a 	and	r2,r7,r4
     fbc:	0007883a 	mov	r3,zero
     fc0:	10c4b03a 	or	r2,r2,r3
     fc4:	10000626 	beq	r2,zero,fe0 <__pack_d+0x2b8>
     fc8:	3a45883a 	add	r2,r7,r9
     fcc:	11cd803a 	cmpltu	r6,r2,r7
     fd0:	320d883a 	add	r6,r6,r8
     fd4:	100f883a 	mov	r7,r2
     fd8:	3011883a 	mov	r8,r6
     fdc:	0007883a 	mov	r3,zero
     fe0:	00840034 	movhi	r2,4096
     fe4:	10bfffc4 	addi	r2,r2,-1
     fe8:	123fe52e 	bgeu	r2,r8,f80 <__pack_d+0x258>
     fec:	00c00044 	movi	r3,1
     ff0:	003fe306 	br	f80 <__pack_d+0x258>
     ff4:	0009883a 	mov	r4,zero
     ff8:	0013883a 	mov	r9,zero
     ffc:	000b883a 	mov	r5,zero
    1000:	003fe406 	br	f94 <__pack_d+0x26c>
    1004:	4a47883a 	add	r3,r9,r9
    1008:	008007c4 	movi	r2,31
    100c:	1105c83a 	sub	r2,r2,r4
    1010:	1886983a 	sll	r3,r3,r2
    1014:	4118d83a 	srl	r12,r8,r4
    1018:	491ad83a 	srl	r13,r9,r4
    101c:	1b18b03a 	or	r12,r3,r12
    1020:	003fb506 	br	ef8 <__pack_d+0x1d0>
    1024:	2806d07a 	srli	r3,r5,1
    1028:	008007c4 	movi	r2,31
    102c:	1105c83a 	sub	r2,r2,r4
    1030:	1896d83a 	srl	r11,r3,r2
    1034:	2914983a 	sll	r10,r5,r4
    1038:	003fb506 	br	f10 <__pack_d+0x1e8>

0000103c <printf>:
    103c:	defffb04 	addi	sp,sp,-20
    1040:	dfc00115 	stw	ra,4(sp)
    1044:	d9400215 	stw	r5,8(sp)
    1048:	d9800315 	stw	r6,12(sp)
    104c:	d9c00415 	stw	r7,16(sp)
    1050:	00800074 	movhi	r2,1
    1054:	10910c04 	addi	r2,r2,17456
    1058:	10c00017 	ldw	r3,0(r2)
    105c:	200b883a 	mov	r5,r4
    1060:	d8800204 	addi	r2,sp,8
    1064:	19000217 	ldw	r4,8(r3)
    1068:	100d883a 	mov	r6,r2
    106c:	d8800015 	stw	r2,0(sp)
    1070:	00030340 	call	3034 <__vfprintf_internal>
    1074:	dfc00117 	ldw	ra,4(sp)
    1078:	dec00504 	addi	sp,sp,20
    107c:	f800283a 	ret

00001080 <_printf_r>:
    1080:	defffc04 	addi	sp,sp,-16
    1084:	dfc00115 	stw	ra,4(sp)
    1088:	d9800215 	stw	r6,8(sp)
    108c:	d9c00315 	stw	r7,12(sp)
    1090:	280d883a 	mov	r6,r5
    1094:	21400217 	ldw	r5,8(r4)
    1098:	d8c00204 	addi	r3,sp,8
    109c:	180f883a 	mov	r7,r3
    10a0:	d8c00015 	stw	r3,0(sp)
    10a4:	00011880 	call	1188 <___vfprintf_internal_r>
    10a8:	dfc00117 	ldw	ra,4(sp)
    10ac:	dec00404 	addi	sp,sp,16
    10b0:	f800283a 	ret

000010b4 <_scanf_r>:
    10b4:	defffc04 	addi	sp,sp,-16
    10b8:	dfc00115 	stw	ra,4(sp)
    10bc:	d9800215 	stw	r6,8(sp)
    10c0:	d9c00315 	stw	r7,12(sp)
    10c4:	280d883a 	mov	r6,r5
    10c8:	21400117 	ldw	r5,4(r4)
    10cc:	d8c00204 	addi	r3,sp,8
    10d0:	180f883a 	mov	r7,r3
    10d4:	d8c00015 	stw	r3,0(sp)
    10d8:	00030580 	call	3058 <__svfscanf_r>
    10dc:	dfc00117 	ldw	ra,4(sp)
    10e0:	dec00404 	addi	sp,sp,16
    10e4:	f800283a 	ret

000010e8 <scanf>:
    10e8:	defffb04 	addi	sp,sp,-20
    10ec:	dfc00115 	stw	ra,4(sp)
    10f0:	d9400215 	stw	r5,8(sp)
    10f4:	d9800315 	stw	r6,12(sp)
    10f8:	d9c00415 	stw	r7,16(sp)
    10fc:	00800074 	movhi	r2,1
    1100:	10910c04 	addi	r2,r2,17456
    1104:	11400017 	ldw	r5,0(r2)
    1108:	200d883a 	mov	r6,r4
    110c:	d8800204 	addi	r2,sp,8
    1110:	2809883a 	mov	r4,r5
    1114:	29400117 	ldw	r5,4(r5)
    1118:	100f883a 	mov	r7,r2
    111c:	d8800015 	stw	r2,0(sp)
    1120:	00030580 	call	3058 <__svfscanf_r>
    1124:	dfc00117 	ldw	ra,4(sp)
    1128:	dec00504 	addi	sp,sp,20
    112c:	f800283a 	ret

00001130 <__sprint_r>:
    1130:	30800217 	ldw	r2,8(r6)
    1134:	defffe04 	addi	sp,sp,-8
    1138:	dc000015 	stw	r16,0(sp)
    113c:	dfc00115 	stw	ra,4(sp)
    1140:	3021883a 	mov	r16,r6
    1144:	0007883a 	mov	r3,zero
    1148:	1000061e 	bne	r2,zero,1164 <__sprint_r+0x34>
    114c:	1805883a 	mov	r2,r3
    1150:	30000115 	stw	zero,4(r6)
    1154:	dfc00117 	ldw	ra,4(sp)
    1158:	dc000017 	ldw	r16,0(sp)
    115c:	dec00204 	addi	sp,sp,8
    1160:	f800283a 	ret
    1164:	0006c4c0 	call	6c4c <__sfvwrite_r>
    1168:	1007883a 	mov	r3,r2
    116c:	1805883a 	mov	r2,r3
    1170:	80000115 	stw	zero,4(r16)
    1174:	80000215 	stw	zero,8(r16)
    1178:	dfc00117 	ldw	ra,4(sp)
    117c:	dc000017 	ldw	r16,0(sp)
    1180:	dec00204 	addi	sp,sp,8
    1184:	f800283a 	ret

00001188 <___vfprintf_internal_r>:
    1188:	defea404 	addi	sp,sp,-1392
    118c:	dd815815 	stw	r22,1376(sp)
    1190:	dc015215 	stw	r16,1352(sp)
    1194:	d9c15115 	stw	r7,1348(sp)
    1198:	dfc15b15 	stw	ra,1388(sp)
    119c:	df015a15 	stw	fp,1384(sp)
    11a0:	ddc15915 	stw	r23,1380(sp)
    11a4:	dd415715 	stw	r21,1372(sp)
    11a8:	dd015615 	stw	r20,1368(sp)
    11ac:	dcc15515 	stw	r19,1364(sp)
    11b0:	dc815415 	stw	r18,1360(sp)
    11b4:	dc415315 	stw	r17,1356(sp)
    11b8:	282d883a 	mov	r22,r5
    11bc:	3021883a 	mov	r16,r6
    11c0:	d9014f15 	stw	r4,1340(sp)
    11c4:	000729c0 	call	729c <_localeconv_r>
    11c8:	10800017 	ldw	r2,0(r2)
    11cc:	d9c15117 	ldw	r7,1348(sp)
    11d0:	d8814915 	stw	r2,1316(sp)
    11d4:	d8814f17 	ldw	r2,1340(sp)
    11d8:	10000226 	beq	r2,zero,11e4 <___vfprintf_internal_r+0x5c>
    11dc:	10800e17 	ldw	r2,56(r2)
    11e0:	10020d26 	beq	r2,zero,1a18 <___vfprintf_internal_r+0x890>
    11e4:	b080030b 	ldhu	r2,12(r22)
    11e8:	1080020c 	andi	r2,r2,8
    11ec:	10020e26 	beq	r2,zero,1a28 <___vfprintf_internal_r+0x8a0>
    11f0:	b0800417 	ldw	r2,16(r22)
    11f4:	10020c26 	beq	r2,zero,1a28 <___vfprintf_internal_r+0x8a0>
    11f8:	b200030b 	ldhu	r8,12(r22)
    11fc:	00800284 	movi	r2,10
    1200:	40c0068c 	andi	r3,r8,26
    1204:	18802f1e 	bne	r3,r2,12c4 <___vfprintf_internal_r+0x13c>
    1208:	b080038f 	ldh	r2,14(r22)
    120c:	10002d16 	blt	r2,zero,12c4 <___vfprintf_internal_r+0x13c>
    1210:	b240038b 	ldhu	r9,14(r22)
    1214:	b2800717 	ldw	r10,28(r22)
    1218:	b2c00917 	ldw	r11,36(r22)
    121c:	d9014f17 	ldw	r4,1340(sp)
    1220:	dc402904 	addi	r17,sp,164
    1224:	d8804004 	addi	r2,sp,256
    1228:	00c10004 	movi	r3,1024
    122c:	423fff4c 	andi	r8,r8,65533
    1230:	800d883a 	mov	r6,r16
    1234:	880b883a 	mov	r5,r17
    1238:	da002c0d 	sth	r8,176(sp)
    123c:	da402c8d 	sth	r9,178(sp)
    1240:	da803015 	stw	r10,192(sp)
    1244:	dac03215 	stw	r11,200(sp)
    1248:	d8802d15 	stw	r2,180(sp)
    124c:	d8c02e15 	stw	r3,184(sp)
    1250:	d8802915 	stw	r2,164(sp)
    1254:	d8c02b15 	stw	r3,172(sp)
    1258:	d8002f15 	stw	zero,188(sp)
    125c:	00011880 	call	1188 <___vfprintf_internal_r>
    1260:	d8814b15 	stw	r2,1324(sp)
    1264:	10000416 	blt	r2,zero,1278 <___vfprintf_internal_r+0xf0>
    1268:	d9014f17 	ldw	r4,1340(sp)
    126c:	880b883a 	mov	r5,r17
    1270:	00060e00 	call	60e0 <_fflush_r>
    1274:	1002321e 	bne	r2,zero,1b40 <___vfprintf_internal_r+0x9b8>
    1278:	d8802c0b 	ldhu	r2,176(sp)
    127c:	1080100c 	andi	r2,r2,64
    1280:	10000326 	beq	r2,zero,1290 <___vfprintf_internal_r+0x108>
    1284:	b080030b 	ldhu	r2,12(r22)
    1288:	10801014 	ori	r2,r2,64
    128c:	b080030d 	sth	r2,12(r22)
    1290:	d8814b17 	ldw	r2,1324(sp)
    1294:	dfc15b17 	ldw	ra,1388(sp)
    1298:	df015a17 	ldw	fp,1384(sp)
    129c:	ddc15917 	ldw	r23,1380(sp)
    12a0:	dd815817 	ldw	r22,1376(sp)
    12a4:	dd415717 	ldw	r21,1372(sp)
    12a8:	dd015617 	ldw	r20,1368(sp)
    12ac:	dcc15517 	ldw	r19,1364(sp)
    12b0:	dc815417 	ldw	r18,1360(sp)
    12b4:	dc415317 	ldw	r17,1356(sp)
    12b8:	dc015217 	ldw	r16,1352(sp)
    12bc:	dec15c04 	addi	sp,sp,1392
    12c0:	f800283a 	ret
    12c4:	0005883a 	mov	r2,zero
    12c8:	0007883a 	mov	r3,zero
    12cc:	dd401904 	addi	r21,sp,100
    12d0:	d8814215 	stw	r2,1288(sp)
    12d4:	802f883a 	mov	r23,r16
    12d8:	d8c14315 	stw	r3,1292(sp)
    12dc:	d8014b15 	stw	zero,1324(sp)
    12e0:	d8014815 	stw	zero,1312(sp)
    12e4:	d8014415 	stw	zero,1296(sp)
    12e8:	d8014715 	stw	zero,1308(sp)
    12ec:	dd400c15 	stw	r21,48(sp)
    12f0:	d8000e15 	stw	zero,56(sp)
    12f4:	d8000d15 	stw	zero,52(sp)
    12f8:	b8800007 	ldb	r2,0(r23)
    12fc:	10001926 	beq	r2,zero,1364 <___vfprintf_internal_r+0x1dc>
    1300:	00c00944 	movi	r3,37
    1304:	10c01726 	beq	r2,r3,1364 <___vfprintf_internal_r+0x1dc>
    1308:	b821883a 	mov	r16,r23
    130c:	00000106 	br	1314 <___vfprintf_internal_r+0x18c>
    1310:	10c00326 	beq	r2,r3,1320 <___vfprintf_internal_r+0x198>
    1314:	84000044 	addi	r16,r16,1
    1318:	80800007 	ldb	r2,0(r16)
    131c:	103ffc1e 	bne	r2,zero,1310 <___vfprintf_internal_r+0x188>
    1320:	85e7c83a 	sub	r19,r16,r23
    1324:	98000e26 	beq	r19,zero,1360 <___vfprintf_internal_r+0x1d8>
    1328:	dc800e17 	ldw	r18,56(sp)
    132c:	dc400d17 	ldw	r17,52(sp)
    1330:	008001c4 	movi	r2,7
    1334:	94e5883a 	add	r18,r18,r19
    1338:	8c400044 	addi	r17,r17,1
    133c:	adc00015 	stw	r23,0(r21)
    1340:	dc800e15 	stw	r18,56(sp)
    1344:	acc00115 	stw	r19,4(r21)
    1348:	dc400d15 	stw	r17,52(sp)
    134c:	14428b16 	blt	r2,r17,1d7c <___vfprintf_internal_r+0xbf4>
    1350:	ad400204 	addi	r21,r21,8
    1354:	d9014b17 	ldw	r4,1324(sp)
    1358:	24c9883a 	add	r4,r4,r19
    135c:	d9014b15 	stw	r4,1324(sp)
    1360:	802f883a 	mov	r23,r16
    1364:	b8800007 	ldb	r2,0(r23)
    1368:	10013c26 	beq	r2,zero,185c <___vfprintf_internal_r+0x6d4>
    136c:	bdc00044 	addi	r23,r23,1
    1370:	d8000405 	stb	zero,16(sp)
    1374:	b8c00007 	ldb	r3,0(r23)
    1378:	04ffffc4 	movi	r19,-1
    137c:	d8014c15 	stw	zero,1328(sp)
    1380:	d8014a15 	stw	zero,1320(sp)
    1384:	d8c14d15 	stw	r3,1332(sp)
    1388:	bdc00044 	addi	r23,r23,1
    138c:	d9414d17 	ldw	r5,1332(sp)
    1390:	00801604 	movi	r2,88
    1394:	28fff804 	addi	r3,r5,-32
    1398:	10c06036 	bltu	r2,r3,151c <___vfprintf_internal_r+0x394>
    139c:	18c5883a 	add	r2,r3,r3
    13a0:	1085883a 	add	r2,r2,r2
    13a4:	00c00034 	movhi	r3,0
    13a8:	18c4ee04 	addi	r3,r3,5048
    13ac:	10c5883a 	add	r2,r2,r3
    13b0:	11000017 	ldw	r4,0(r2)
    13b4:	2000683a 	jmp	r4
    13b8:	0000232c 	andhi	zero,zero,140
    13bc:	0000151c 	xori	zero,zero,84
    13c0:	0000151c 	xori	zero,zero,84
    13c4:	00002318 	cmpnei	zero,zero,140
    13c8:	0000151c 	xori	zero,zero,84
    13cc:	0000151c 	xori	zero,zero,84
    13d0:	0000151c 	xori	zero,zero,84
    13d4:	0000151c 	xori	zero,zero,84
    13d8:	0000151c 	xori	zero,zero,84
    13dc:	0000151c 	xori	zero,zero,84
    13e0:	000020f8 	rdprs	zero,zero,131
    13e4:	00002308 	cmpgei	zero,zero,140
    13e8:	0000151c 	xori	zero,zero,84
    13ec:	00002110 	cmplti	zero,zero,132
    13f0:	000023a4 	muli	zero,zero,142
    13f4:	0000151c 	xori	zero,zero,84
    13f8:	00002390 	cmplti	zero,zero,142
    13fc:	00002358 	cmpnei	zero,zero,141
    1400:	00002358 	cmpnei	zero,zero,141
    1404:	00002358 	cmpnei	zero,zero,141
    1408:	00002358 	cmpnei	zero,zero,141
    140c:	00002358 	cmpnei	zero,zero,141
    1410:	00002358 	cmpnei	zero,zero,141
    1414:	00002358 	cmpnei	zero,zero,141
    1418:	00002358 	cmpnei	zero,zero,141
    141c:	00002358 	cmpnei	zero,zero,141
    1420:	0000151c 	xori	zero,zero,84
    1424:	0000151c 	xori	zero,zero,84
    1428:	0000151c 	xori	zero,zero,84
    142c:	0000151c 	xori	zero,zero,84
    1430:	0000151c 	xori	zero,zero,84
    1434:	0000151c 	xori	zero,zero,84
    1438:	0000151c 	xori	zero,zero,84
    143c:	0000151c 	xori	zero,zero,84
    1440:	0000151c 	xori	zero,zero,84
    1444:	0000151c 	xori	zero,zero,84
    1448:	00001b74 	movhi	zero,109
    144c:	000021e0 	cmpeqi	zero,zero,135
    1450:	0000151c 	xori	zero,zero,84
    1454:	000021e0 	cmpeqi	zero,zero,135
    1458:	0000151c 	xori	zero,zero,84
    145c:	0000151c 	xori	zero,zero,84
    1460:	0000151c 	xori	zero,zero,84
    1464:	0000151c 	xori	zero,zero,84
    1468:	00002344 	movi	zero,141
    146c:	0000151c 	xori	zero,zero,84
    1470:	0000151c 	xori	zero,zero,84
    1474:	00001c28 	cmpgeui	zero,zero,112
    1478:	0000151c 	xori	zero,zero,84
    147c:	0000151c 	xori	zero,zero,84
    1480:	0000151c 	xori	zero,zero,84
    1484:	0000151c 	xori	zero,zero,84
    1488:	0000151c 	xori	zero,zero,84
    148c:	00001c74 	movhi	zero,113
    1490:	0000151c 	xori	zero,zero,84
    1494:	0000151c 	xori	zero,zero,84
    1498:	00002294 	movui	zero,138
    149c:	0000151c 	xori	zero,zero,84
    14a0:	0000151c 	xori	zero,zero,84
    14a4:	0000151c 	xori	zero,zero,84
    14a8:	0000151c 	xori	zero,zero,84
    14ac:	0000151c 	xori	zero,zero,84
    14b0:	0000151c 	xori	zero,zero,84
    14b4:	0000151c 	xori	zero,zero,84
    14b8:	0000151c 	xori	zero,zero,84
    14bc:	0000151c 	xori	zero,zero,84
    14c0:	0000151c 	xori	zero,zero,84
    14c4:	00002268 	cmpgeui	zero,zero,137
    14c8:	00001b80 	call	1b8 <main+0x4>
    14cc:	000021e0 	cmpeqi	zero,zero,135
    14d0:	000021e0 	cmpeqi	zero,zero,135
    14d4:	000021e0 	cmpeqi	zero,zero,135
    14d8:	000021cc 	andi	zero,zero,135
    14dc:	00001b80 	call	1b8 <main+0x4>
    14e0:	0000151c 	xori	zero,zero,84
    14e4:	0000151c 	xori	zero,zero,84
    14e8:	00002154 	movui	zero,133
    14ec:	0000151c 	xori	zero,zero,84
    14f0:	00002124 	muli	zero,zero,132
    14f4:	00001c34 	movhi	zero,112
    14f8:	00002184 	movi	zero,134
    14fc:	00002170 	cmpltui	zero,zero,133
    1500:	0000151c 	xori	zero,zero,84
    1504:	00002400 	call	240 <main+0x8c>
    1508:	0000151c 	xori	zero,zero,84
    150c:	00001c80 	call	1c8 <main+0x14>
    1510:	0000151c 	xori	zero,zero,84
    1514:	0000151c 	xori	zero,zero,84
    1518:	000022f8 	rdprs	zero,zero,139
    151c:	d9014d17 	ldw	r4,1332(sp)
    1520:	2000ce26 	beq	r4,zero,185c <___vfprintf_internal_r+0x6d4>
    1524:	01400044 	movi	r5,1
    1528:	d9800f04 	addi	r6,sp,60
    152c:	d9c14015 	stw	r7,1280(sp)
    1530:	d9414515 	stw	r5,1300(sp)
    1534:	d9814115 	stw	r6,1284(sp)
    1538:	280f883a 	mov	r7,r5
    153c:	d9000f05 	stb	r4,60(sp)
    1540:	d8000405 	stb	zero,16(sp)
    1544:	d8014615 	stw	zero,1304(sp)
    1548:	d8c14c17 	ldw	r3,1328(sp)
    154c:	1880008c 	andi	r2,r3,2
    1550:	1005003a 	cmpeq	r2,r2,zero
    1554:	d8815015 	stw	r2,1344(sp)
    1558:	1000031e 	bne	r2,zero,1568 <___vfprintf_internal_r+0x3e0>
    155c:	d9014517 	ldw	r4,1300(sp)
    1560:	21000084 	addi	r4,r4,2
    1564:	d9014515 	stw	r4,1300(sp)
    1568:	d9414c17 	ldw	r5,1328(sp)
    156c:	2940210c 	andi	r5,r5,132
    1570:	d9414e15 	stw	r5,1336(sp)
    1574:	28002d1e 	bne	r5,zero,162c <___vfprintf_internal_r+0x4a4>
    1578:	d9814a17 	ldw	r6,1320(sp)
    157c:	d8814517 	ldw	r2,1300(sp)
    1580:	30a1c83a 	sub	r16,r6,r2
    1584:	0400290e 	bge	zero,r16,162c <___vfprintf_internal_r+0x4a4>
    1588:	00800404 	movi	r2,16
    158c:	1404580e 	bge	r2,r16,26f0 <___vfprintf_internal_r+0x1568>
    1590:	dc800e17 	ldw	r18,56(sp)
    1594:	dc400d17 	ldw	r17,52(sp)
    1598:	1027883a 	mov	r19,r2
    159c:	07000074 	movhi	fp,1
    15a0:	e708b884 	addi	fp,fp,8930
    15a4:	050001c4 	movi	r20,7
    15a8:	00000306 	br	15b8 <___vfprintf_internal_r+0x430>
    15ac:	843ffc04 	addi	r16,r16,-16
    15b0:	ad400204 	addi	r21,r21,8
    15b4:	9c00130e 	bge	r19,r16,1604 <___vfprintf_internal_r+0x47c>
    15b8:	94800404 	addi	r18,r18,16
    15bc:	8c400044 	addi	r17,r17,1
    15c0:	af000015 	stw	fp,0(r21)
    15c4:	acc00115 	stw	r19,4(r21)
    15c8:	dc800e15 	stw	r18,56(sp)
    15cc:	dc400d15 	stw	r17,52(sp)
    15d0:	a47ff60e 	bge	r20,r17,15ac <___vfprintf_internal_r+0x424>
    15d4:	d9014f17 	ldw	r4,1340(sp)
    15d8:	b00b883a 	mov	r5,r22
    15dc:	d9800c04 	addi	r6,sp,48
    15e0:	d9c15115 	stw	r7,1348(sp)
    15e4:	00011300 	call	1130 <__sprint_r>
    15e8:	d9c15117 	ldw	r7,1348(sp)
    15ec:	10009e1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    15f0:	843ffc04 	addi	r16,r16,-16
    15f4:	dc800e17 	ldw	r18,56(sp)
    15f8:	dc400d17 	ldw	r17,52(sp)
    15fc:	dd401904 	addi	r21,sp,100
    1600:	9c3fed16 	blt	r19,r16,15b8 <___vfprintf_internal_r+0x430>
    1604:	9425883a 	add	r18,r18,r16
    1608:	8c400044 	addi	r17,r17,1
    160c:	008001c4 	movi	r2,7
    1610:	af000015 	stw	fp,0(r21)
    1614:	ac000115 	stw	r16,4(r21)
    1618:	dc800e15 	stw	r18,56(sp)
    161c:	dc400d15 	stw	r17,52(sp)
    1620:	1441f516 	blt	r2,r17,1df8 <___vfprintf_internal_r+0xc70>
    1624:	ad400204 	addi	r21,r21,8
    1628:	00000206 	br	1634 <___vfprintf_internal_r+0x4ac>
    162c:	dc800e17 	ldw	r18,56(sp)
    1630:	dc400d17 	ldw	r17,52(sp)
    1634:	d8800407 	ldb	r2,16(sp)
    1638:	10000b26 	beq	r2,zero,1668 <___vfprintf_internal_r+0x4e0>
    163c:	00800044 	movi	r2,1
    1640:	94800044 	addi	r18,r18,1
    1644:	8c400044 	addi	r17,r17,1
    1648:	a8800115 	stw	r2,4(r21)
    164c:	d8c00404 	addi	r3,sp,16
    1650:	008001c4 	movi	r2,7
    1654:	a8c00015 	stw	r3,0(r21)
    1658:	dc800e15 	stw	r18,56(sp)
    165c:	dc400d15 	stw	r17,52(sp)
    1660:	1441da16 	blt	r2,r17,1dcc <___vfprintf_internal_r+0xc44>
    1664:	ad400204 	addi	r21,r21,8
    1668:	d9015017 	ldw	r4,1344(sp)
    166c:	20000b1e 	bne	r4,zero,169c <___vfprintf_internal_r+0x514>
    1670:	d8800444 	addi	r2,sp,17
    1674:	94800084 	addi	r18,r18,2
    1678:	8c400044 	addi	r17,r17,1
    167c:	a8800015 	stw	r2,0(r21)
    1680:	00c00084 	movi	r3,2
    1684:	008001c4 	movi	r2,7
    1688:	a8c00115 	stw	r3,4(r21)
    168c:	dc800e15 	stw	r18,56(sp)
    1690:	dc400d15 	stw	r17,52(sp)
    1694:	1441c216 	blt	r2,r17,1da0 <___vfprintf_internal_r+0xc18>
    1698:	ad400204 	addi	r21,r21,8
    169c:	d9414e17 	ldw	r5,1336(sp)
    16a0:	00802004 	movi	r2,128
    16a4:	2880b126 	beq	r5,r2,196c <___vfprintf_internal_r+0x7e4>
    16a8:	d8c14617 	ldw	r3,1304(sp)
    16ac:	19e1c83a 	sub	r16,r3,r7
    16b0:	0400260e 	bge	zero,r16,174c <___vfprintf_internal_r+0x5c4>
    16b4:	00800404 	movi	r2,16
    16b8:	1403c90e 	bge	r2,r16,25e0 <___vfprintf_internal_r+0x1458>
    16bc:	1027883a 	mov	r19,r2
    16c0:	07000074 	movhi	fp,1
    16c4:	e708b484 	addi	fp,fp,8914
    16c8:	050001c4 	movi	r20,7
    16cc:	00000306 	br	16dc <___vfprintf_internal_r+0x554>
    16d0:	843ffc04 	addi	r16,r16,-16
    16d4:	ad400204 	addi	r21,r21,8
    16d8:	9c00130e 	bge	r19,r16,1728 <___vfprintf_internal_r+0x5a0>
    16dc:	94800404 	addi	r18,r18,16
    16e0:	8c400044 	addi	r17,r17,1
    16e4:	af000015 	stw	fp,0(r21)
    16e8:	acc00115 	stw	r19,4(r21)
    16ec:	dc800e15 	stw	r18,56(sp)
    16f0:	dc400d15 	stw	r17,52(sp)
    16f4:	a47ff60e 	bge	r20,r17,16d0 <___vfprintf_internal_r+0x548>
    16f8:	d9014f17 	ldw	r4,1340(sp)
    16fc:	b00b883a 	mov	r5,r22
    1700:	d9800c04 	addi	r6,sp,48
    1704:	d9c15115 	stw	r7,1348(sp)
    1708:	00011300 	call	1130 <__sprint_r>
    170c:	d9c15117 	ldw	r7,1348(sp)
    1710:	1000551e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1714:	843ffc04 	addi	r16,r16,-16
    1718:	dc800e17 	ldw	r18,56(sp)
    171c:	dc400d17 	ldw	r17,52(sp)
    1720:	dd401904 	addi	r21,sp,100
    1724:	9c3fed16 	blt	r19,r16,16dc <___vfprintf_internal_r+0x554>
    1728:	9425883a 	add	r18,r18,r16
    172c:	8c400044 	addi	r17,r17,1
    1730:	008001c4 	movi	r2,7
    1734:	af000015 	stw	fp,0(r21)
    1738:	ac000115 	stw	r16,4(r21)
    173c:	dc800e15 	stw	r18,56(sp)
    1740:	dc400d15 	stw	r17,52(sp)
    1744:	14418216 	blt	r2,r17,1d50 <___vfprintf_internal_r+0xbc8>
    1748:	ad400204 	addi	r21,r21,8
    174c:	d9014c17 	ldw	r4,1328(sp)
    1750:	2080400c 	andi	r2,r4,256
    1754:	10004a1e 	bne	r2,zero,1880 <___vfprintf_internal_r+0x6f8>
    1758:	d9414117 	ldw	r5,1284(sp)
    175c:	91e5883a 	add	r18,r18,r7
    1760:	8c400044 	addi	r17,r17,1
    1764:	008001c4 	movi	r2,7
    1768:	a9400015 	stw	r5,0(r21)
    176c:	a9c00115 	stw	r7,4(r21)
    1770:	dc800e15 	stw	r18,56(sp)
    1774:	dc400d15 	stw	r17,52(sp)
    1778:	14416716 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb90>
    177c:	a8c00204 	addi	r3,r21,8
    1780:	d9814c17 	ldw	r6,1328(sp)
    1784:	3080010c 	andi	r2,r6,4
    1788:	10002826 	beq	r2,zero,182c <___vfprintf_internal_r+0x6a4>
    178c:	d8814a17 	ldw	r2,1320(sp)
    1790:	d9014517 	ldw	r4,1300(sp)
    1794:	1121c83a 	sub	r16,r2,r4
    1798:	0400240e 	bge	zero,r16,182c <___vfprintf_internal_r+0x6a4>
    179c:	00800404 	movi	r2,16
    17a0:	14044f0e 	bge	r2,r16,28e0 <___vfprintf_internal_r+0x1758>
    17a4:	dc400d17 	ldw	r17,52(sp)
    17a8:	1027883a 	mov	r19,r2
    17ac:	07000074 	movhi	fp,1
    17b0:	e708b884 	addi	fp,fp,8930
    17b4:	050001c4 	movi	r20,7
    17b8:	00000306 	br	17c8 <___vfprintf_internal_r+0x640>
    17bc:	843ffc04 	addi	r16,r16,-16
    17c0:	18c00204 	addi	r3,r3,8
    17c4:	9c00110e 	bge	r19,r16,180c <___vfprintf_internal_r+0x684>
    17c8:	94800404 	addi	r18,r18,16
    17cc:	8c400044 	addi	r17,r17,1
    17d0:	1f000015 	stw	fp,0(r3)
    17d4:	1cc00115 	stw	r19,4(r3)
    17d8:	dc800e15 	stw	r18,56(sp)
    17dc:	dc400d15 	stw	r17,52(sp)
    17e0:	a47ff60e 	bge	r20,r17,17bc <___vfprintf_internal_r+0x634>
    17e4:	d9014f17 	ldw	r4,1340(sp)
    17e8:	b00b883a 	mov	r5,r22
    17ec:	d9800c04 	addi	r6,sp,48
    17f0:	00011300 	call	1130 <__sprint_r>
    17f4:	10001c1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    17f8:	843ffc04 	addi	r16,r16,-16
    17fc:	dc800e17 	ldw	r18,56(sp)
    1800:	dc400d17 	ldw	r17,52(sp)
    1804:	d8c01904 	addi	r3,sp,100
    1808:	9c3fef16 	blt	r19,r16,17c8 <___vfprintf_internal_r+0x640>
    180c:	9425883a 	add	r18,r18,r16
    1810:	8c400044 	addi	r17,r17,1
    1814:	008001c4 	movi	r2,7
    1818:	1f000015 	stw	fp,0(r3)
    181c:	1c000115 	stw	r16,4(r3)
    1820:	dc800e15 	stw	r18,56(sp)
    1824:	dc400d15 	stw	r17,52(sp)
    1828:	1440cb16 	blt	r2,r17,1b58 <___vfprintf_internal_r+0x9d0>
    182c:	d8814a17 	ldw	r2,1320(sp)
    1830:	d9414517 	ldw	r5,1300(sp)
    1834:	1140010e 	bge	r2,r5,183c <___vfprintf_internal_r+0x6b4>
    1838:	2805883a 	mov	r2,r5
    183c:	d9814b17 	ldw	r6,1324(sp)
    1840:	308d883a 	add	r6,r6,r2
    1844:	d9814b15 	stw	r6,1324(sp)
    1848:	90013b1e 	bne	r18,zero,1d38 <___vfprintf_internal_r+0xbb0>
    184c:	d9c14017 	ldw	r7,1280(sp)
    1850:	dd401904 	addi	r21,sp,100
    1854:	d8000d15 	stw	zero,52(sp)
    1858:	003ea706 	br	12f8 <___vfprintf_internal_r+0x170>
    185c:	d8800e17 	ldw	r2,56(sp)
    1860:	10053f1e 	bne	r2,zero,2d60 <___vfprintf_internal_r+0x1bd8>
    1864:	d8000d15 	stw	zero,52(sp)
    1868:	b080030b 	ldhu	r2,12(r22)
    186c:	1080100c 	andi	r2,r2,64
    1870:	103e8726 	beq	r2,zero,1290 <___vfprintf_internal_r+0x108>
    1874:	00bfffc4 	movi	r2,-1
    1878:	d8814b15 	stw	r2,1324(sp)
    187c:	003e8406 	br	1290 <___vfprintf_internal_r+0x108>
    1880:	d9814d17 	ldw	r6,1332(sp)
    1884:	00801944 	movi	r2,101
    1888:	11806e16 	blt	r2,r6,1a44 <___vfprintf_internal_r+0x8bc>
    188c:	d9414717 	ldw	r5,1308(sp)
    1890:	00c00044 	movi	r3,1
    1894:	1943430e 	bge	r3,r5,25a4 <___vfprintf_internal_r+0x141c>
    1898:	d8814117 	ldw	r2,1284(sp)
    189c:	94800044 	addi	r18,r18,1
    18a0:	8c400044 	addi	r17,r17,1
    18a4:	a8800015 	stw	r2,0(r21)
    18a8:	008001c4 	movi	r2,7
    18ac:	a8c00115 	stw	r3,4(r21)
    18b0:	dc800e15 	stw	r18,56(sp)
    18b4:	dc400d15 	stw	r17,52(sp)
    18b8:	1441ca16 	blt	r2,r17,1fe4 <___vfprintf_internal_r+0xe5c>
    18bc:	a8c00204 	addi	r3,r21,8
    18c0:	d9014917 	ldw	r4,1316(sp)
    18c4:	00800044 	movi	r2,1
    18c8:	94800044 	addi	r18,r18,1
    18cc:	8c400044 	addi	r17,r17,1
    18d0:	18800115 	stw	r2,4(r3)
    18d4:	008001c4 	movi	r2,7
    18d8:	19000015 	stw	r4,0(r3)
    18dc:	dc800e15 	stw	r18,56(sp)
    18e0:	dc400d15 	stw	r17,52(sp)
    18e4:	1441b616 	blt	r2,r17,1fc0 <___vfprintf_internal_r+0xe38>
    18e8:	1cc00204 	addi	r19,r3,8
    18ec:	d9014217 	ldw	r4,1288(sp)
    18f0:	d9414317 	ldw	r5,1292(sp)
    18f4:	000d883a 	mov	r6,zero
    18f8:	000f883a 	mov	r7,zero
    18fc:	000ea280 	call	ea28 <__nedf2>
    1900:	10017426 	beq	r2,zero,1ed4 <___vfprintf_internal_r+0xd4c>
    1904:	d9414717 	ldw	r5,1308(sp)
    1908:	d9814117 	ldw	r6,1284(sp)
    190c:	8c400044 	addi	r17,r17,1
    1910:	2c85883a 	add	r2,r5,r18
    1914:	14bfffc4 	addi	r18,r2,-1
    1918:	28bfffc4 	addi	r2,r5,-1
    191c:	30c00044 	addi	r3,r6,1
    1920:	98800115 	stw	r2,4(r19)
    1924:	008001c4 	movi	r2,7
    1928:	98c00015 	stw	r3,0(r19)
    192c:	dc800e15 	stw	r18,56(sp)
    1930:	dc400d15 	stw	r17,52(sp)
    1934:	14418e16 	blt	r2,r17,1f70 <___vfprintf_internal_r+0xde8>
    1938:	9cc00204 	addi	r19,r19,8
    193c:	d9414817 	ldw	r5,1312(sp)
    1940:	d8800804 	addi	r2,sp,32
    1944:	8c400044 	addi	r17,r17,1
    1948:	9165883a 	add	r18,r18,r5
    194c:	98800015 	stw	r2,0(r19)
    1950:	008001c4 	movi	r2,7
    1954:	99400115 	stw	r5,4(r19)
    1958:	dc800e15 	stw	r18,56(sp)
    195c:	dc400d15 	stw	r17,52(sp)
    1960:	1440ed16 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb90>
    1964:	98c00204 	addi	r3,r19,8
    1968:	003f8506 	br	1780 <___vfprintf_internal_r+0x5f8>
    196c:	d9814a17 	ldw	r6,1320(sp)
    1970:	d8814517 	ldw	r2,1300(sp)
    1974:	30a1c83a 	sub	r16,r6,r2
    1978:	043f4b0e 	bge	zero,r16,16a8 <___vfprintf_internal_r+0x520>
    197c:	00800404 	movi	r2,16
    1980:	1404340e 	bge	r2,r16,2a54 <___vfprintf_internal_r+0x18cc>
    1984:	1027883a 	mov	r19,r2
    1988:	07000074 	movhi	fp,1
    198c:	e708b484 	addi	fp,fp,8914
    1990:	050001c4 	movi	r20,7
    1994:	00000306 	br	19a4 <___vfprintf_internal_r+0x81c>
    1998:	843ffc04 	addi	r16,r16,-16
    199c:	ad400204 	addi	r21,r21,8
    19a0:	9c00130e 	bge	r19,r16,19f0 <___vfprintf_internal_r+0x868>
    19a4:	94800404 	addi	r18,r18,16
    19a8:	8c400044 	addi	r17,r17,1
    19ac:	af000015 	stw	fp,0(r21)
    19b0:	acc00115 	stw	r19,4(r21)
    19b4:	dc800e15 	stw	r18,56(sp)
    19b8:	dc400d15 	stw	r17,52(sp)
    19bc:	a47ff60e 	bge	r20,r17,1998 <___vfprintf_internal_r+0x810>
    19c0:	d9014f17 	ldw	r4,1340(sp)
    19c4:	b00b883a 	mov	r5,r22
    19c8:	d9800c04 	addi	r6,sp,48
    19cc:	d9c15115 	stw	r7,1348(sp)
    19d0:	00011300 	call	1130 <__sprint_r>
    19d4:	d9c15117 	ldw	r7,1348(sp)
    19d8:	103fa31e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    19dc:	843ffc04 	addi	r16,r16,-16
    19e0:	dc800e17 	ldw	r18,56(sp)
    19e4:	dc400d17 	ldw	r17,52(sp)
    19e8:	dd401904 	addi	r21,sp,100
    19ec:	9c3fed16 	blt	r19,r16,19a4 <___vfprintf_internal_r+0x81c>
    19f0:	9425883a 	add	r18,r18,r16
    19f4:	8c400044 	addi	r17,r17,1
    19f8:	008001c4 	movi	r2,7
    19fc:	af000015 	stw	fp,0(r21)
    1a00:	ac000115 	stw	r16,4(r21)
    1a04:	dc800e15 	stw	r18,56(sp)
    1a08:	dc400d15 	stw	r17,52(sp)
    1a0c:	14416116 	blt	r2,r17,1f94 <___vfprintf_internal_r+0xe0c>
    1a10:	ad400204 	addi	r21,r21,8
    1a14:	003f2406 	br	16a8 <___vfprintf_internal_r+0x520>
    1a18:	d9014f17 	ldw	r4,1340(sp)
    1a1c:	00063780 	call	6378 <__sinit>
    1a20:	d9c15117 	ldw	r7,1348(sp)
    1a24:	003def06 	br	11e4 <___vfprintf_internal_r+0x5c>
    1a28:	d9014f17 	ldw	r4,1340(sp)
    1a2c:	b00b883a 	mov	r5,r22
    1a30:	d9c15115 	stw	r7,1348(sp)
    1a34:	00047d80 	call	47d8 <__swsetup_r>
    1a38:	d9c15117 	ldw	r7,1348(sp)
    1a3c:	103dee26 	beq	r2,zero,11f8 <___vfprintf_internal_r+0x70>
    1a40:	003f8c06 	br	1874 <___vfprintf_internal_r+0x6ec>
    1a44:	d9014217 	ldw	r4,1288(sp)
    1a48:	d9414317 	ldw	r5,1292(sp)
    1a4c:	000d883a 	mov	r6,zero
    1a50:	000f883a 	mov	r7,zero
    1a54:	000e9a00 	call	e9a0 <__eqdf2>
    1a58:	1000f21e 	bne	r2,zero,1e24 <___vfprintf_internal_r+0xc9c>
    1a5c:	00800074 	movhi	r2,1
    1a60:	1088b404 	addi	r2,r2,8912
    1a64:	94800044 	addi	r18,r18,1
    1a68:	8c400044 	addi	r17,r17,1
    1a6c:	a8800015 	stw	r2,0(r21)
    1a70:	00c00044 	movi	r3,1
    1a74:	008001c4 	movi	r2,7
    1a78:	a8c00115 	stw	r3,4(r21)
    1a7c:	dc800e15 	stw	r18,56(sp)
    1a80:	dc400d15 	stw	r17,52(sp)
    1a84:	1442fa16 	blt	r2,r17,2670 <___vfprintf_internal_r+0x14e8>
    1a88:	a8c00204 	addi	r3,r21,8
    1a8c:	d8800517 	ldw	r2,20(sp)
    1a90:	d9014717 	ldw	r4,1308(sp)
    1a94:	11015c0e 	bge	r2,r4,2008 <___vfprintf_internal_r+0xe80>
    1a98:	dc400d17 	ldw	r17,52(sp)
    1a9c:	d9814917 	ldw	r6,1316(sp)
    1aa0:	00800044 	movi	r2,1
    1aa4:	94800044 	addi	r18,r18,1
    1aa8:	8c400044 	addi	r17,r17,1
    1aac:	18800115 	stw	r2,4(r3)
    1ab0:	008001c4 	movi	r2,7
    1ab4:	19800015 	stw	r6,0(r3)
    1ab8:	dc800e15 	stw	r18,56(sp)
    1abc:	dc400d15 	stw	r17,52(sp)
    1ac0:	14431016 	blt	r2,r17,2704 <___vfprintf_internal_r+0x157c>
    1ac4:	18c00204 	addi	r3,r3,8
    1ac8:	d8814717 	ldw	r2,1308(sp)
    1acc:	143fffc4 	addi	r16,r2,-1
    1ad0:	043f2b0e 	bge	zero,r16,1780 <___vfprintf_internal_r+0x5f8>
    1ad4:	00800404 	movi	r2,16
    1ad8:	1402a20e 	bge	r2,r16,2564 <___vfprintf_internal_r+0x13dc>
    1adc:	dc400d17 	ldw	r17,52(sp)
    1ae0:	1027883a 	mov	r19,r2
    1ae4:	07000074 	movhi	fp,1
    1ae8:	e708b484 	addi	fp,fp,8914
    1aec:	050001c4 	movi	r20,7
    1af0:	00000306 	br	1b00 <___vfprintf_internal_r+0x978>
    1af4:	18c00204 	addi	r3,r3,8
    1af8:	843ffc04 	addi	r16,r16,-16
    1afc:	9c029c0e 	bge	r19,r16,2570 <___vfprintf_internal_r+0x13e8>
    1b00:	94800404 	addi	r18,r18,16
    1b04:	8c400044 	addi	r17,r17,1
    1b08:	1f000015 	stw	fp,0(r3)
    1b0c:	1cc00115 	stw	r19,4(r3)
    1b10:	dc800e15 	stw	r18,56(sp)
    1b14:	dc400d15 	stw	r17,52(sp)
    1b18:	a47ff60e 	bge	r20,r17,1af4 <___vfprintf_internal_r+0x96c>
    1b1c:	d9014f17 	ldw	r4,1340(sp)
    1b20:	b00b883a 	mov	r5,r22
    1b24:	d9800c04 	addi	r6,sp,48
    1b28:	00011300 	call	1130 <__sprint_r>
    1b2c:	103f4e1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1b30:	dc800e17 	ldw	r18,56(sp)
    1b34:	dc400d17 	ldw	r17,52(sp)
    1b38:	d8c01904 	addi	r3,sp,100
    1b3c:	003fee06 	br	1af8 <___vfprintf_internal_r+0x970>
    1b40:	d8802c0b 	ldhu	r2,176(sp)
    1b44:	00ffffc4 	movi	r3,-1
    1b48:	d8c14b15 	stw	r3,1324(sp)
    1b4c:	1080100c 	andi	r2,r2,64
    1b50:	103dcc1e 	bne	r2,zero,1284 <___vfprintf_internal_r+0xfc>
    1b54:	003dce06 	br	1290 <___vfprintf_internal_r+0x108>
    1b58:	d9014f17 	ldw	r4,1340(sp)
    1b5c:	b00b883a 	mov	r5,r22
    1b60:	d9800c04 	addi	r6,sp,48
    1b64:	00011300 	call	1130 <__sprint_r>
    1b68:	103f3f1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1b6c:	dc800e17 	ldw	r18,56(sp)
    1b70:	003f2e06 	br	182c <___vfprintf_internal_r+0x6a4>
    1b74:	d9414c17 	ldw	r5,1328(sp)
    1b78:	29400414 	ori	r5,r5,16
    1b7c:	d9414c15 	stw	r5,1328(sp)
    1b80:	d9814c17 	ldw	r6,1328(sp)
    1b84:	3080080c 	andi	r2,r6,32
    1b88:	10014f1e 	bne	r2,zero,20c8 <___vfprintf_internal_r+0xf40>
    1b8c:	d8c14c17 	ldw	r3,1328(sp)
    1b90:	1880040c 	andi	r2,r3,16
    1b94:	1002ea1e 	bne	r2,zero,2740 <___vfprintf_internal_r+0x15b8>
    1b98:	d9014c17 	ldw	r4,1328(sp)
    1b9c:	2080100c 	andi	r2,r4,64
    1ba0:	1002e726 	beq	r2,zero,2740 <___vfprintf_internal_r+0x15b8>
    1ba4:	3880000f 	ldh	r2,0(r7)
    1ba8:	39c00104 	addi	r7,r7,4
    1bac:	d9c14015 	stw	r7,1280(sp)
    1bb0:	1023d7fa 	srai	r17,r2,31
    1bb4:	1021883a 	mov	r16,r2
    1bb8:	88037216 	blt	r17,zero,2984 <___vfprintf_internal_r+0x17fc>
    1bbc:	01000044 	movi	r4,1
    1bc0:	98000416 	blt	r19,zero,1bd4 <___vfprintf_internal_r+0xa4c>
    1bc4:	d8c14c17 	ldw	r3,1328(sp)
    1bc8:	00bfdfc4 	movi	r2,-129
    1bcc:	1886703a 	and	r3,r3,r2
    1bd0:	d8c14c15 	stw	r3,1328(sp)
    1bd4:	8444b03a 	or	r2,r16,r17
    1bd8:	1002261e 	bne	r2,zero,2474 <___vfprintf_internal_r+0x12ec>
    1bdc:	9802251e 	bne	r19,zero,2474 <___vfprintf_internal_r+0x12ec>
    1be0:	20803fcc 	andi	r2,r4,255
    1be4:	10029b26 	beq	r2,zero,2654 <___vfprintf_internal_r+0x14cc>
    1be8:	d8c01904 	addi	r3,sp,100
    1bec:	dd000f04 	addi	r20,sp,60
    1bf0:	d8c14115 	stw	r3,1284(sp)
    1bf4:	d8c14117 	ldw	r3,1284(sp)
    1bf8:	dcc14515 	stw	r19,1300(sp)
    1bfc:	a0c5c83a 	sub	r2,r20,r3
    1c00:	11c00a04 	addi	r7,r2,40
    1c04:	99c0010e 	bge	r19,r7,1c0c <___vfprintf_internal_r+0xa84>
    1c08:	d9c14515 	stw	r7,1300(sp)
    1c0c:	dcc14615 	stw	r19,1304(sp)
    1c10:	d8800407 	ldb	r2,16(sp)
    1c14:	103e4c26 	beq	r2,zero,1548 <___vfprintf_internal_r+0x3c0>
    1c18:	d8814517 	ldw	r2,1300(sp)
    1c1c:	10800044 	addi	r2,r2,1
    1c20:	d8814515 	stw	r2,1300(sp)
    1c24:	003e4806 	br	1548 <___vfprintf_internal_r+0x3c0>
    1c28:	d9814c17 	ldw	r6,1328(sp)
    1c2c:	31800414 	ori	r6,r6,16
    1c30:	d9814c15 	stw	r6,1328(sp)
    1c34:	d8c14c17 	ldw	r3,1328(sp)
    1c38:	1880080c 	andi	r2,r3,32
    1c3c:	1001271e 	bne	r2,zero,20dc <___vfprintf_internal_r+0xf54>
    1c40:	d9414c17 	ldw	r5,1328(sp)
    1c44:	2880040c 	andi	r2,r5,16
    1c48:	1002b61e 	bne	r2,zero,2724 <___vfprintf_internal_r+0x159c>
    1c4c:	d9814c17 	ldw	r6,1328(sp)
    1c50:	3080100c 	andi	r2,r6,64
    1c54:	1002b326 	beq	r2,zero,2724 <___vfprintf_internal_r+0x159c>
    1c58:	3c00000b 	ldhu	r16,0(r7)
    1c5c:	0009883a 	mov	r4,zero
    1c60:	39c00104 	addi	r7,r7,4
    1c64:	0023883a 	mov	r17,zero
    1c68:	d9c14015 	stw	r7,1280(sp)
    1c6c:	d8000405 	stb	zero,16(sp)
    1c70:	003fd306 	br	1bc0 <___vfprintf_internal_r+0xa38>
    1c74:	d9014c17 	ldw	r4,1328(sp)
    1c78:	21000414 	ori	r4,r4,16
    1c7c:	d9014c15 	stw	r4,1328(sp)
    1c80:	d9414c17 	ldw	r5,1328(sp)
    1c84:	2880080c 	andi	r2,r5,32
    1c88:	1001081e 	bne	r2,zero,20ac <___vfprintf_internal_r+0xf24>
    1c8c:	d8c14c17 	ldw	r3,1328(sp)
    1c90:	1880040c 	andi	r2,r3,16
    1c94:	1002b01e 	bne	r2,zero,2758 <___vfprintf_internal_r+0x15d0>
    1c98:	d9014c17 	ldw	r4,1328(sp)
    1c9c:	2080100c 	andi	r2,r4,64
    1ca0:	1002ad26 	beq	r2,zero,2758 <___vfprintf_internal_r+0x15d0>
    1ca4:	3c00000b 	ldhu	r16,0(r7)
    1ca8:	01000044 	movi	r4,1
    1cac:	39c00104 	addi	r7,r7,4
    1cb0:	0023883a 	mov	r17,zero
    1cb4:	d9c14015 	stw	r7,1280(sp)
    1cb8:	d8000405 	stb	zero,16(sp)
    1cbc:	003fc006 	br	1bc0 <___vfprintf_internal_r+0xa38>
    1cc0:	d9014f17 	ldw	r4,1340(sp)
    1cc4:	b00b883a 	mov	r5,r22
    1cc8:	d9800c04 	addi	r6,sp,48
    1ccc:	00011300 	call	1130 <__sprint_r>
    1cd0:	103ee51e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1cd4:	dc800e17 	ldw	r18,56(sp)
    1cd8:	d8c01904 	addi	r3,sp,100
    1cdc:	d9814c17 	ldw	r6,1328(sp)
    1ce0:	3080004c 	andi	r2,r6,1
    1ce4:	1005003a 	cmpeq	r2,r2,zero
    1ce8:	103ea51e 	bne	r2,zero,1780 <___vfprintf_internal_r+0x5f8>
    1cec:	00800044 	movi	r2,1
    1cf0:	dc400d17 	ldw	r17,52(sp)
    1cf4:	18800115 	stw	r2,4(r3)
    1cf8:	d8814917 	ldw	r2,1316(sp)
    1cfc:	94800044 	addi	r18,r18,1
    1d00:	8c400044 	addi	r17,r17,1
    1d04:	18800015 	stw	r2,0(r3)
    1d08:	008001c4 	movi	r2,7
    1d0c:	dc800e15 	stw	r18,56(sp)
    1d10:	dc400d15 	stw	r17,52(sp)
    1d14:	14421e0e 	bge	r2,r17,2590 <___vfprintf_internal_r+0x1408>
    1d18:	d9014f17 	ldw	r4,1340(sp)
    1d1c:	b00b883a 	mov	r5,r22
    1d20:	d9800c04 	addi	r6,sp,48
    1d24:	00011300 	call	1130 <__sprint_r>
    1d28:	103ecf1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1d2c:	dc800e17 	ldw	r18,56(sp)
    1d30:	d8c01904 	addi	r3,sp,100
    1d34:	003e9206 	br	1780 <___vfprintf_internal_r+0x5f8>
    1d38:	d9014f17 	ldw	r4,1340(sp)
    1d3c:	b00b883a 	mov	r5,r22
    1d40:	d9800c04 	addi	r6,sp,48
    1d44:	00011300 	call	1130 <__sprint_r>
    1d48:	103ec026 	beq	r2,zero,184c <___vfprintf_internal_r+0x6c4>
    1d4c:	003ec606 	br	1868 <___vfprintf_internal_r+0x6e0>
    1d50:	d9014f17 	ldw	r4,1340(sp)
    1d54:	b00b883a 	mov	r5,r22
    1d58:	d9800c04 	addi	r6,sp,48
    1d5c:	d9c15115 	stw	r7,1348(sp)
    1d60:	00011300 	call	1130 <__sprint_r>
    1d64:	d9c15117 	ldw	r7,1348(sp)
    1d68:	103ebf1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1d6c:	dc800e17 	ldw	r18,56(sp)
    1d70:	dc400d17 	ldw	r17,52(sp)
    1d74:	dd401904 	addi	r21,sp,100
    1d78:	003e7406 	br	174c <___vfprintf_internal_r+0x5c4>
    1d7c:	d9014f17 	ldw	r4,1340(sp)
    1d80:	b00b883a 	mov	r5,r22
    1d84:	d9800c04 	addi	r6,sp,48
    1d88:	d9c15115 	stw	r7,1348(sp)
    1d8c:	00011300 	call	1130 <__sprint_r>
    1d90:	d9c15117 	ldw	r7,1348(sp)
    1d94:	103eb41e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1d98:	dd401904 	addi	r21,sp,100
    1d9c:	003d6d06 	br	1354 <___vfprintf_internal_r+0x1cc>
    1da0:	d9014f17 	ldw	r4,1340(sp)
    1da4:	b00b883a 	mov	r5,r22
    1da8:	d9800c04 	addi	r6,sp,48
    1dac:	d9c15115 	stw	r7,1348(sp)
    1db0:	00011300 	call	1130 <__sprint_r>
    1db4:	d9c15117 	ldw	r7,1348(sp)
    1db8:	103eab1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1dbc:	dc800e17 	ldw	r18,56(sp)
    1dc0:	dc400d17 	ldw	r17,52(sp)
    1dc4:	dd401904 	addi	r21,sp,100
    1dc8:	003e3406 	br	169c <___vfprintf_internal_r+0x514>
    1dcc:	d9014f17 	ldw	r4,1340(sp)
    1dd0:	b00b883a 	mov	r5,r22
    1dd4:	d9800c04 	addi	r6,sp,48
    1dd8:	d9c15115 	stw	r7,1348(sp)
    1ddc:	00011300 	call	1130 <__sprint_r>
    1de0:	d9c15117 	ldw	r7,1348(sp)
    1de4:	103ea01e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1de8:	dc800e17 	ldw	r18,56(sp)
    1dec:	dc400d17 	ldw	r17,52(sp)
    1df0:	dd401904 	addi	r21,sp,100
    1df4:	003e1c06 	br	1668 <___vfprintf_internal_r+0x4e0>
    1df8:	d9014f17 	ldw	r4,1340(sp)
    1dfc:	b00b883a 	mov	r5,r22
    1e00:	d9800c04 	addi	r6,sp,48
    1e04:	d9c15115 	stw	r7,1348(sp)
    1e08:	00011300 	call	1130 <__sprint_r>
    1e0c:	d9c15117 	ldw	r7,1348(sp)
    1e10:	103e951e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1e14:	dc800e17 	ldw	r18,56(sp)
    1e18:	dc400d17 	ldw	r17,52(sp)
    1e1c:	dd401904 	addi	r21,sp,100
    1e20:	003e0406 	br	1634 <___vfprintf_internal_r+0x4ac>
    1e24:	d9000517 	ldw	r4,20(sp)
    1e28:	0102520e 	bge	zero,r4,2774 <___vfprintf_internal_r+0x15ec>
    1e2c:	d9814717 	ldw	r6,1308(sp)
    1e30:	21807a16 	blt	r4,r6,201c <___vfprintf_internal_r+0xe94>
    1e34:	d8814117 	ldw	r2,1284(sp)
    1e38:	91a5883a 	add	r18,r18,r6
    1e3c:	8c400044 	addi	r17,r17,1
    1e40:	a8800015 	stw	r2,0(r21)
    1e44:	008001c4 	movi	r2,7
    1e48:	a9800115 	stw	r6,4(r21)
    1e4c:	dc800e15 	stw	r18,56(sp)
    1e50:	dc400d15 	stw	r17,52(sp)
    1e54:	1442f616 	blt	r2,r17,2a30 <___vfprintf_internal_r+0x18a8>
    1e58:	a8c00204 	addi	r3,r21,8
    1e5c:	d9414717 	ldw	r5,1308(sp)
    1e60:	2161c83a 	sub	r16,r4,r5
    1e64:	043f9d0e 	bge	zero,r16,1cdc <___vfprintf_internal_r+0xb54>
    1e68:	00800404 	movi	r2,16
    1e6c:	1402130e 	bge	r2,r16,26bc <___vfprintf_internal_r+0x1534>
    1e70:	dc400d17 	ldw	r17,52(sp)
    1e74:	1027883a 	mov	r19,r2
    1e78:	07000074 	movhi	fp,1
    1e7c:	e708b484 	addi	fp,fp,8914
    1e80:	050001c4 	movi	r20,7
    1e84:	00000306 	br	1e94 <___vfprintf_internal_r+0xd0c>
    1e88:	18c00204 	addi	r3,r3,8
    1e8c:	843ffc04 	addi	r16,r16,-16
    1e90:	9c020d0e 	bge	r19,r16,26c8 <___vfprintf_internal_r+0x1540>
    1e94:	94800404 	addi	r18,r18,16
    1e98:	8c400044 	addi	r17,r17,1
    1e9c:	1f000015 	stw	fp,0(r3)
    1ea0:	1cc00115 	stw	r19,4(r3)
    1ea4:	dc800e15 	stw	r18,56(sp)
    1ea8:	dc400d15 	stw	r17,52(sp)
    1eac:	a47ff60e 	bge	r20,r17,1e88 <___vfprintf_internal_r+0xd00>
    1eb0:	d9014f17 	ldw	r4,1340(sp)
    1eb4:	b00b883a 	mov	r5,r22
    1eb8:	d9800c04 	addi	r6,sp,48
    1ebc:	00011300 	call	1130 <__sprint_r>
    1ec0:	103e691e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1ec4:	dc800e17 	ldw	r18,56(sp)
    1ec8:	dc400d17 	ldw	r17,52(sp)
    1ecc:	d8c01904 	addi	r3,sp,100
    1ed0:	003fee06 	br	1e8c <___vfprintf_internal_r+0xd04>
    1ed4:	d8814717 	ldw	r2,1308(sp)
    1ed8:	143fffc4 	addi	r16,r2,-1
    1edc:	043e970e 	bge	zero,r16,193c <___vfprintf_internal_r+0x7b4>
    1ee0:	00800404 	movi	r2,16
    1ee4:	1400180e 	bge	r2,r16,1f48 <___vfprintf_internal_r+0xdc0>
    1ee8:	1029883a 	mov	r20,r2
    1eec:	07000074 	movhi	fp,1
    1ef0:	e708b484 	addi	fp,fp,8914
    1ef4:	054001c4 	movi	r21,7
    1ef8:	00000306 	br	1f08 <___vfprintf_internal_r+0xd80>
    1efc:	9cc00204 	addi	r19,r19,8
    1f00:	843ffc04 	addi	r16,r16,-16
    1f04:	a400120e 	bge	r20,r16,1f50 <___vfprintf_internal_r+0xdc8>
    1f08:	94800404 	addi	r18,r18,16
    1f0c:	8c400044 	addi	r17,r17,1
    1f10:	9f000015 	stw	fp,0(r19)
    1f14:	9d000115 	stw	r20,4(r19)
    1f18:	dc800e15 	stw	r18,56(sp)
    1f1c:	dc400d15 	stw	r17,52(sp)
    1f20:	ac7ff60e 	bge	r21,r17,1efc <___vfprintf_internal_r+0xd74>
    1f24:	d9014f17 	ldw	r4,1340(sp)
    1f28:	b00b883a 	mov	r5,r22
    1f2c:	d9800c04 	addi	r6,sp,48
    1f30:	00011300 	call	1130 <__sprint_r>
    1f34:	103e4c1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1f38:	dc800e17 	ldw	r18,56(sp)
    1f3c:	dc400d17 	ldw	r17,52(sp)
    1f40:	dcc01904 	addi	r19,sp,100
    1f44:	003fee06 	br	1f00 <___vfprintf_internal_r+0xd78>
    1f48:	07000074 	movhi	fp,1
    1f4c:	e708b484 	addi	fp,fp,8914
    1f50:	9425883a 	add	r18,r18,r16
    1f54:	8c400044 	addi	r17,r17,1
    1f58:	008001c4 	movi	r2,7
    1f5c:	9f000015 	stw	fp,0(r19)
    1f60:	9c000115 	stw	r16,4(r19)
    1f64:	dc800e15 	stw	r18,56(sp)
    1f68:	dc400d15 	stw	r17,52(sp)
    1f6c:	147e720e 	bge	r2,r17,1938 <___vfprintf_internal_r+0x7b0>
    1f70:	d9014f17 	ldw	r4,1340(sp)
    1f74:	b00b883a 	mov	r5,r22
    1f78:	d9800c04 	addi	r6,sp,48
    1f7c:	00011300 	call	1130 <__sprint_r>
    1f80:	103e391e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1f84:	dc800e17 	ldw	r18,56(sp)
    1f88:	dc400d17 	ldw	r17,52(sp)
    1f8c:	dcc01904 	addi	r19,sp,100
    1f90:	003e6a06 	br	193c <___vfprintf_internal_r+0x7b4>
    1f94:	d9014f17 	ldw	r4,1340(sp)
    1f98:	b00b883a 	mov	r5,r22
    1f9c:	d9800c04 	addi	r6,sp,48
    1fa0:	d9c15115 	stw	r7,1348(sp)
    1fa4:	00011300 	call	1130 <__sprint_r>
    1fa8:	d9c15117 	ldw	r7,1348(sp)
    1fac:	103e2e1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1fb0:	dc800e17 	ldw	r18,56(sp)
    1fb4:	dc400d17 	ldw	r17,52(sp)
    1fb8:	dd401904 	addi	r21,sp,100
    1fbc:	003dba06 	br	16a8 <___vfprintf_internal_r+0x520>
    1fc0:	d9014f17 	ldw	r4,1340(sp)
    1fc4:	b00b883a 	mov	r5,r22
    1fc8:	d9800c04 	addi	r6,sp,48
    1fcc:	00011300 	call	1130 <__sprint_r>
    1fd0:	103e251e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1fd4:	dc800e17 	ldw	r18,56(sp)
    1fd8:	dc400d17 	ldw	r17,52(sp)
    1fdc:	dcc01904 	addi	r19,sp,100
    1fe0:	003e4206 	br	18ec <___vfprintf_internal_r+0x764>
    1fe4:	d9014f17 	ldw	r4,1340(sp)
    1fe8:	b00b883a 	mov	r5,r22
    1fec:	d9800c04 	addi	r6,sp,48
    1ff0:	00011300 	call	1130 <__sprint_r>
    1ff4:	103e1c1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    1ff8:	dc800e17 	ldw	r18,56(sp)
    1ffc:	dc400d17 	ldw	r17,52(sp)
    2000:	d8c01904 	addi	r3,sp,100
    2004:	003e2e06 	br	18c0 <___vfprintf_internal_r+0x738>
    2008:	d9414c17 	ldw	r5,1328(sp)
    200c:	2880004c 	andi	r2,r5,1
    2010:	1005003a 	cmpeq	r2,r2,zero
    2014:	103dda1e 	bne	r2,zero,1780 <___vfprintf_internal_r+0x5f8>
    2018:	003e9f06 	br	1a98 <___vfprintf_internal_r+0x910>
    201c:	d8c14117 	ldw	r3,1284(sp)
    2020:	9125883a 	add	r18,r18,r4
    2024:	8c400044 	addi	r17,r17,1
    2028:	008001c4 	movi	r2,7
    202c:	a8c00015 	stw	r3,0(r21)
    2030:	a9000115 	stw	r4,4(r21)
    2034:	dc800e15 	stw	r18,56(sp)
    2038:	dc400d15 	stw	r17,52(sp)
    203c:	14426616 	blt	r2,r17,29d8 <___vfprintf_internal_r+0x1850>
    2040:	a8c00204 	addi	r3,r21,8
    2044:	d9414917 	ldw	r5,1316(sp)
    2048:	00800044 	movi	r2,1
    204c:	94800044 	addi	r18,r18,1
    2050:	8c400044 	addi	r17,r17,1
    2054:	18800115 	stw	r2,4(r3)
    2058:	008001c4 	movi	r2,7
    205c:	19400015 	stw	r5,0(r3)
    2060:	dc800e15 	stw	r18,56(sp)
    2064:	dc400d15 	stw	r17,52(sp)
    2068:	2021883a 	mov	r16,r4
    206c:	14425016 	blt	r2,r17,29b0 <___vfprintf_internal_r+0x1828>
    2070:	19400204 	addi	r5,r3,8
    2074:	d9814717 	ldw	r6,1308(sp)
    2078:	8c400044 	addi	r17,r17,1
    207c:	dc400d15 	stw	r17,52(sp)
    2080:	3107c83a 	sub	r3,r6,r4
    2084:	d9014117 	ldw	r4,1284(sp)
    2088:	90e5883a 	add	r18,r18,r3
    208c:	28c00115 	stw	r3,4(r5)
    2090:	8105883a 	add	r2,r16,r4
    2094:	28800015 	stw	r2,0(r5)
    2098:	008001c4 	movi	r2,7
    209c:	dc800e15 	stw	r18,56(sp)
    20a0:	147f1d16 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb90>
    20a4:	28c00204 	addi	r3,r5,8
    20a8:	003db506 	br	1780 <___vfprintf_internal_r+0x5f8>
    20ac:	3c000017 	ldw	r16,0(r7)
    20b0:	3c400117 	ldw	r17,4(r7)
    20b4:	39800204 	addi	r6,r7,8
    20b8:	01000044 	movi	r4,1
    20bc:	d9814015 	stw	r6,1280(sp)
    20c0:	d8000405 	stb	zero,16(sp)
    20c4:	003ebe06 	br	1bc0 <___vfprintf_internal_r+0xa38>
    20c8:	3c000017 	ldw	r16,0(r7)
    20cc:	3c400117 	ldw	r17,4(r7)
    20d0:	38800204 	addi	r2,r7,8
    20d4:	d8814015 	stw	r2,1280(sp)
    20d8:	003eb706 	br	1bb8 <___vfprintf_internal_r+0xa30>
    20dc:	3c000017 	ldw	r16,0(r7)
    20e0:	3c400117 	ldw	r17,4(r7)
    20e4:	39000204 	addi	r4,r7,8
    20e8:	d9014015 	stw	r4,1280(sp)
    20ec:	0009883a 	mov	r4,zero
    20f0:	d8000405 	stb	zero,16(sp)
    20f4:	003eb206 	br	1bc0 <___vfprintf_internal_r+0xa38>
    20f8:	38c00017 	ldw	r3,0(r7)
    20fc:	39c00104 	addi	r7,r7,4
    2100:	d8c14a15 	stw	r3,1320(sp)
    2104:	1800d10e 	bge	r3,zero,244c <___vfprintf_internal_r+0x12c4>
    2108:	00c7c83a 	sub	r3,zero,r3
    210c:	d8c14a15 	stw	r3,1320(sp)
    2110:	d9014c17 	ldw	r4,1328(sp)
    2114:	b8c00007 	ldb	r3,0(r23)
    2118:	21000114 	ori	r4,r4,4
    211c:	d9014c15 	stw	r4,1328(sp)
    2120:	003c9806 	br	1384 <___vfprintf_internal_r+0x1fc>
    2124:	d9814c17 	ldw	r6,1328(sp)
    2128:	3080080c 	andi	r2,r6,32
    212c:	1001f026 	beq	r2,zero,28f0 <___vfprintf_internal_r+0x1768>
    2130:	d9014b17 	ldw	r4,1324(sp)
    2134:	38800017 	ldw	r2,0(r7)
    2138:	39c00104 	addi	r7,r7,4
    213c:	d9c14015 	stw	r7,1280(sp)
    2140:	2007d7fa 	srai	r3,r4,31
    2144:	d9c14017 	ldw	r7,1280(sp)
    2148:	11000015 	stw	r4,0(r2)
    214c:	10c00115 	stw	r3,4(r2)
    2150:	003c6906 	br	12f8 <___vfprintf_internal_r+0x170>
    2154:	b8c00007 	ldb	r3,0(r23)
    2158:	00801b04 	movi	r2,108
    215c:	18824f26 	beq	r3,r2,2a9c <___vfprintf_internal_r+0x1914>
    2160:	d9414c17 	ldw	r5,1328(sp)
    2164:	29400414 	ori	r5,r5,16
    2168:	d9414c15 	stw	r5,1328(sp)
    216c:	003c8506 	br	1384 <___vfprintf_internal_r+0x1fc>
    2170:	d9814c17 	ldw	r6,1328(sp)
    2174:	b8c00007 	ldb	r3,0(r23)
    2178:	31800814 	ori	r6,r6,32
    217c:	d9814c15 	stw	r6,1328(sp)
    2180:	003c8006 	br	1384 <___vfprintf_internal_r+0x1fc>
    2184:	d8814c17 	ldw	r2,1328(sp)
    2188:	3c000017 	ldw	r16,0(r7)
    218c:	00c01e04 	movi	r3,120
    2190:	10800094 	ori	r2,r2,2
    2194:	d8814c15 	stw	r2,1328(sp)
    2198:	39c00104 	addi	r7,r7,4
    219c:	01400074 	movhi	r5,1
    21a0:	29489d04 	addi	r5,r5,8820
    21a4:	00800c04 	movi	r2,48
    21a8:	0023883a 	mov	r17,zero
    21ac:	01000084 	movi	r4,2
    21b0:	d9c14015 	stw	r7,1280(sp)
    21b4:	d8c14d15 	stw	r3,1332(sp)
    21b8:	d9414415 	stw	r5,1296(sp)
    21bc:	d8800445 	stb	r2,17(sp)
    21c0:	d8c00485 	stb	r3,18(sp)
    21c4:	d8000405 	stb	zero,16(sp)
    21c8:	003e7d06 	br	1bc0 <___vfprintf_internal_r+0xa38>
    21cc:	d8814c17 	ldw	r2,1328(sp)
    21d0:	b8c00007 	ldb	r3,0(r23)
    21d4:	10801014 	ori	r2,r2,64
    21d8:	d8814c15 	stw	r2,1328(sp)
    21dc:	003c6906 	br	1384 <___vfprintf_internal_r+0x1fc>
    21e0:	d9414c17 	ldw	r5,1328(sp)
    21e4:	2880020c 	andi	r2,r5,8
    21e8:	1001df26 	beq	r2,zero,2968 <___vfprintf_internal_r+0x17e0>
    21ec:	39800017 	ldw	r6,0(r7)
    21f0:	38800204 	addi	r2,r7,8
    21f4:	d8814015 	stw	r2,1280(sp)
    21f8:	d9814215 	stw	r6,1288(sp)
    21fc:	39c00117 	ldw	r7,4(r7)
    2200:	d9c14315 	stw	r7,1292(sp)
    2204:	d9014217 	ldw	r4,1288(sp)
    2208:	d9414317 	ldw	r5,1292(sp)
    220c:	00097f00 	call	97f0 <__isinfd>
    2210:	10021726 	beq	r2,zero,2a70 <___vfprintf_internal_r+0x18e8>
    2214:	d9014217 	ldw	r4,1288(sp)
    2218:	d9414317 	ldw	r5,1292(sp)
    221c:	000d883a 	mov	r6,zero
    2220:	000f883a 	mov	r7,zero
    2224:	000ebc00 	call	ebc0 <__ltdf2>
    2228:	1002ca16 	blt	r2,zero,2d54 <___vfprintf_internal_r+0x1bcc>
    222c:	d9414d17 	ldw	r5,1332(sp)
    2230:	008011c4 	movi	r2,71
    2234:	11420a16 	blt	r2,r5,2a60 <___vfprintf_internal_r+0x18d8>
    2238:	01800074 	movhi	r6,1
    223c:	3188a204 	addi	r6,r6,8840
    2240:	d9814115 	stw	r6,1284(sp)
    2244:	d9014c17 	ldw	r4,1328(sp)
    2248:	00c000c4 	movi	r3,3
    224c:	00bfdfc4 	movi	r2,-129
    2250:	2088703a 	and	r4,r4,r2
    2254:	180f883a 	mov	r7,r3
    2258:	d8c14515 	stw	r3,1300(sp)
    225c:	d9014c15 	stw	r4,1328(sp)
    2260:	d8014615 	stw	zero,1304(sp)
    2264:	003e6a06 	br	1c10 <___vfprintf_internal_r+0xa88>
    2268:	38800017 	ldw	r2,0(r7)
    226c:	00c00044 	movi	r3,1
    2270:	39c00104 	addi	r7,r7,4
    2274:	d9c14015 	stw	r7,1280(sp)
    2278:	d9000f04 	addi	r4,sp,60
    227c:	180f883a 	mov	r7,r3
    2280:	d8c14515 	stw	r3,1300(sp)
    2284:	d9014115 	stw	r4,1284(sp)
    2288:	d8800f05 	stb	r2,60(sp)
    228c:	d8000405 	stb	zero,16(sp)
    2290:	003cac06 	br	1544 <___vfprintf_internal_r+0x3bc>
    2294:	01400074 	movhi	r5,1
    2298:	2948a804 	addi	r5,r5,8864
    229c:	d9414415 	stw	r5,1296(sp)
    22a0:	d9814c17 	ldw	r6,1328(sp)
    22a4:	3080080c 	andi	r2,r6,32
    22a8:	1000f926 	beq	r2,zero,2690 <___vfprintf_internal_r+0x1508>
    22ac:	3c000017 	ldw	r16,0(r7)
    22b0:	3c400117 	ldw	r17,4(r7)
    22b4:	38800204 	addi	r2,r7,8
    22b8:	d8814015 	stw	r2,1280(sp)
    22bc:	d9414c17 	ldw	r5,1328(sp)
    22c0:	2880004c 	andi	r2,r5,1
    22c4:	1005003a 	cmpeq	r2,r2,zero
    22c8:	1000b31e 	bne	r2,zero,2598 <___vfprintf_internal_r+0x1410>
    22cc:	8444b03a 	or	r2,r16,r17
    22d0:	1000b126 	beq	r2,zero,2598 <___vfprintf_internal_r+0x1410>
    22d4:	d9814d17 	ldw	r6,1332(sp)
    22d8:	29400094 	ori	r5,r5,2
    22dc:	00800c04 	movi	r2,48
    22e0:	01000084 	movi	r4,2
    22e4:	d9414c15 	stw	r5,1328(sp)
    22e8:	d8800445 	stb	r2,17(sp)
    22ec:	d9800485 	stb	r6,18(sp)
    22f0:	d8000405 	stb	zero,16(sp)
    22f4:	003e3206 	br	1bc0 <___vfprintf_internal_r+0xa38>
    22f8:	01800074 	movhi	r6,1
    22fc:	31889d04 	addi	r6,r6,8820
    2300:	d9814415 	stw	r6,1296(sp)
    2304:	003fe606 	br	22a0 <___vfprintf_internal_r+0x1118>
    2308:	00800ac4 	movi	r2,43
    230c:	d8800405 	stb	r2,16(sp)
    2310:	b8c00007 	ldb	r3,0(r23)
    2314:	003c1b06 	br	1384 <___vfprintf_internal_r+0x1fc>
    2318:	d8814c17 	ldw	r2,1328(sp)
    231c:	b8c00007 	ldb	r3,0(r23)
    2320:	10800054 	ori	r2,r2,1
    2324:	d8814c15 	stw	r2,1328(sp)
    2328:	003c1606 	br	1384 <___vfprintf_internal_r+0x1fc>
    232c:	d8800407 	ldb	r2,16(sp)
    2330:	1000461e 	bne	r2,zero,244c <___vfprintf_internal_r+0x12c4>
    2334:	00800804 	movi	r2,32
    2338:	d8800405 	stb	r2,16(sp)
    233c:	b8c00007 	ldb	r3,0(r23)
    2340:	003c1006 	br	1384 <___vfprintf_internal_r+0x1fc>
    2344:	d9814c17 	ldw	r6,1328(sp)
    2348:	b8c00007 	ldb	r3,0(r23)
    234c:	31800214 	ori	r6,r6,8
    2350:	d9814c15 	stw	r6,1328(sp)
    2354:	003c0b06 	br	1384 <___vfprintf_internal_r+0x1fc>
    2358:	0007883a 	mov	r3,zero
    235c:	01000244 	movi	r4,9
    2360:	188002a4 	muli	r2,r3,10
    2364:	b8c00007 	ldb	r3,0(r23)
    2368:	d9814d17 	ldw	r6,1332(sp)
    236c:	bdc00044 	addi	r23,r23,1
    2370:	d8c14d15 	stw	r3,1332(sp)
    2374:	d9414d17 	ldw	r5,1332(sp)
    2378:	3085883a 	add	r2,r6,r2
    237c:	10fff404 	addi	r3,r2,-48
    2380:	28bff404 	addi	r2,r5,-48
    2384:	20bff62e 	bgeu	r4,r2,2360 <___vfprintf_internal_r+0x11d8>
    2388:	d8c14a15 	stw	r3,1320(sp)
    238c:	003bff06 	br	138c <___vfprintf_internal_r+0x204>
    2390:	d9414c17 	ldw	r5,1328(sp)
    2394:	b8c00007 	ldb	r3,0(r23)
    2398:	29402014 	ori	r5,r5,128
    239c:	d9414c15 	stw	r5,1328(sp)
    23a0:	003bf806 	br	1384 <___vfprintf_internal_r+0x1fc>
    23a4:	b8c00007 	ldb	r3,0(r23)
    23a8:	00800a84 	movi	r2,42
    23ac:	bdc00044 	addi	r23,r23,1
    23b0:	18831526 	beq	r3,r2,3008 <___vfprintf_internal_r+0x1e80>
    23b4:	d8c14d15 	stw	r3,1332(sp)
    23b8:	18bff404 	addi	r2,r3,-48
    23bc:	00c00244 	movi	r3,9
    23c0:	18827836 	bltu	r3,r2,2da4 <___vfprintf_internal_r+0x1c1c>
    23c4:	000d883a 	mov	r6,zero
    23c8:	308002a4 	muli	r2,r6,10
    23cc:	b9800007 	ldb	r6,0(r23)
    23d0:	d9414d17 	ldw	r5,1332(sp)
    23d4:	bdc00044 	addi	r23,r23,1
    23d8:	d9814d15 	stw	r6,1332(sp)
    23dc:	d9014d17 	ldw	r4,1332(sp)
    23e0:	1145883a 	add	r2,r2,r5
    23e4:	11bff404 	addi	r6,r2,-48
    23e8:	20bff404 	addi	r2,r4,-48
    23ec:	18bff62e 	bgeu	r3,r2,23c8 <___vfprintf_internal_r+0x1240>
    23f0:	3027883a 	mov	r19,r6
    23f4:	303be50e 	bge	r6,zero,138c <___vfprintf_internal_r+0x204>
    23f8:	04ffffc4 	movi	r19,-1
    23fc:	003be306 	br	138c <___vfprintf_internal_r+0x204>
    2400:	d8000405 	stb	zero,16(sp)
    2404:	39800017 	ldw	r6,0(r7)
    2408:	39c00104 	addi	r7,r7,4
    240c:	d9c14015 	stw	r7,1280(sp)
    2410:	d9814115 	stw	r6,1284(sp)
    2414:	3001c926 	beq	r6,zero,2b3c <___vfprintf_internal_r+0x19b4>
    2418:	98000e16 	blt	r19,zero,2454 <___vfprintf_internal_r+0x12cc>
    241c:	d9014117 	ldw	r4,1284(sp)
    2420:	000b883a 	mov	r5,zero
    2424:	980d883a 	mov	r6,r19
    2428:	0007d2c0 	call	7d2c <memchr>
    242c:	10025926 	beq	r2,zero,2d94 <___vfprintf_internal_r+0x1c0c>
    2430:	d8c14117 	ldw	r3,1284(sp)
    2434:	10cfc83a 	sub	r7,r2,r3
    2438:	99c19e16 	blt	r19,r7,2ab4 <___vfprintf_internal_r+0x192c>
    243c:	d9c14515 	stw	r7,1300(sp)
    2440:	38000916 	blt	r7,zero,2468 <___vfprintf_internal_r+0x12e0>
    2444:	d8014615 	stw	zero,1304(sp)
    2448:	003df106 	br	1c10 <___vfprintf_internal_r+0xa88>
    244c:	b8c00007 	ldb	r3,0(r23)
    2450:	003bcc06 	br	1384 <___vfprintf_internal_r+0x1fc>
    2454:	d9014117 	ldw	r4,1284(sp)
    2458:	0009c740 	call	9c74 <strlen>
    245c:	d8814515 	stw	r2,1300(sp)
    2460:	100f883a 	mov	r7,r2
    2464:	103ff70e 	bge	r2,zero,2444 <___vfprintf_internal_r+0x12bc>
    2468:	d8014515 	stw	zero,1300(sp)
    246c:	d8014615 	stw	zero,1304(sp)
    2470:	003de706 	br	1c10 <___vfprintf_internal_r+0xa88>
    2474:	20c03fcc 	andi	r3,r4,255
    2478:	00800044 	movi	r2,1
    247c:	18802d26 	beq	r3,r2,2534 <___vfprintf_internal_r+0x13ac>
    2480:	18800e36 	bltu	r3,r2,24bc <___vfprintf_internal_r+0x1334>
    2484:	00800084 	movi	r2,2
    2488:	1880fa26 	beq	r3,r2,2874 <___vfprintf_internal_r+0x16ec>
    248c:	01000074 	movhi	r4,1
    2490:	2108ad04 	addi	r4,r4,8884
    2494:	0009c740 	call	9c74 <strlen>
    2498:	100f883a 	mov	r7,r2
    249c:	dcc14515 	stw	r19,1300(sp)
    24a0:	9880010e 	bge	r19,r2,24a8 <___vfprintf_internal_r+0x1320>
    24a4:	d8814515 	stw	r2,1300(sp)
    24a8:	00800074 	movhi	r2,1
    24ac:	1088ad04 	addi	r2,r2,8884
    24b0:	dcc14615 	stw	r19,1304(sp)
    24b4:	d8814115 	stw	r2,1284(sp)
    24b8:	003dd506 	br	1c10 <___vfprintf_internal_r+0xa88>
    24bc:	d9401904 	addi	r5,sp,100
    24c0:	dd000f04 	addi	r20,sp,60
    24c4:	d9414115 	stw	r5,1284(sp)
    24c8:	880a977a 	slli	r5,r17,29
    24cc:	d9814117 	ldw	r6,1284(sp)
    24d0:	8004d0fa 	srli	r2,r16,3
    24d4:	8806d0fa 	srli	r3,r17,3
    24d8:	810001cc 	andi	r4,r16,7
    24dc:	2884b03a 	or	r2,r5,r2
    24e0:	31bfffc4 	addi	r6,r6,-1
    24e4:	21000c04 	addi	r4,r4,48
    24e8:	d9814115 	stw	r6,1284(sp)
    24ec:	10cab03a 	or	r5,r2,r3
    24f0:	31000005 	stb	r4,0(r6)
    24f4:	1021883a 	mov	r16,r2
    24f8:	1823883a 	mov	r17,r3
    24fc:	283ff21e 	bne	r5,zero,24c8 <___vfprintf_internal_r+0x1340>
    2500:	d8c14c17 	ldw	r3,1328(sp)
    2504:	1880004c 	andi	r2,r3,1
    2508:	1005003a 	cmpeq	r2,r2,zero
    250c:	103db91e 	bne	r2,zero,1bf4 <___vfprintf_internal_r+0xa6c>
    2510:	20803fcc 	andi	r2,r4,255
    2514:	1080201c 	xori	r2,r2,128
    2518:	10bfe004 	addi	r2,r2,-128
    251c:	00c00c04 	movi	r3,48
    2520:	10fdb426 	beq	r2,r3,1bf4 <___vfprintf_internal_r+0xa6c>
    2524:	31bfffc4 	addi	r6,r6,-1
    2528:	d9814115 	stw	r6,1284(sp)
    252c:	30c00005 	stb	r3,0(r6)
    2530:	003db006 	br	1bf4 <___vfprintf_internal_r+0xa6c>
    2534:	88800068 	cmpgeui	r2,r17,1
    2538:	10002c1e 	bne	r2,zero,25ec <___vfprintf_internal_r+0x1464>
    253c:	8800021e 	bne	r17,zero,2548 <___vfprintf_internal_r+0x13c0>
    2540:	00800244 	movi	r2,9
    2544:	14002936 	bltu	r2,r16,25ec <___vfprintf_internal_r+0x1464>
    2548:	d90018c4 	addi	r4,sp,99
    254c:	dd000f04 	addi	r20,sp,60
    2550:	d9014115 	stw	r4,1284(sp)
    2554:	d9014117 	ldw	r4,1284(sp)
    2558:	80800c04 	addi	r2,r16,48
    255c:	20800005 	stb	r2,0(r4)
    2560:	003da406 	br	1bf4 <___vfprintf_internal_r+0xa6c>
    2564:	dc400d17 	ldw	r17,52(sp)
    2568:	07000074 	movhi	fp,1
    256c:	e708b484 	addi	fp,fp,8914
    2570:	9425883a 	add	r18,r18,r16
    2574:	8c400044 	addi	r17,r17,1
    2578:	008001c4 	movi	r2,7
    257c:	1f000015 	stw	fp,0(r3)
    2580:	1c000115 	stw	r16,4(r3)
    2584:	dc800e15 	stw	r18,56(sp)
    2588:	dc400d15 	stw	r17,52(sp)
    258c:	147de216 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb90>
    2590:	18c00204 	addi	r3,r3,8
    2594:	003c7a06 	br	1780 <___vfprintf_internal_r+0x5f8>
    2598:	01000084 	movi	r4,2
    259c:	d8000405 	stb	zero,16(sp)
    25a0:	003d8706 	br	1bc0 <___vfprintf_internal_r+0xa38>
    25a4:	d9814c17 	ldw	r6,1328(sp)
    25a8:	30c4703a 	and	r2,r6,r3
    25ac:	1005003a 	cmpeq	r2,r2,zero
    25b0:	103cb926 	beq	r2,zero,1898 <___vfprintf_internal_r+0x710>
    25b4:	d9014117 	ldw	r4,1284(sp)
    25b8:	94800044 	addi	r18,r18,1
    25bc:	8c400044 	addi	r17,r17,1
    25c0:	008001c4 	movi	r2,7
    25c4:	a9000015 	stw	r4,0(r21)
    25c8:	a8c00115 	stw	r3,4(r21)
    25cc:	dc800e15 	stw	r18,56(sp)
    25d0:	dc400d15 	stw	r17,52(sp)
    25d4:	147e6616 	blt	r2,r17,1f70 <___vfprintf_internal_r+0xde8>
    25d8:	acc00204 	addi	r19,r21,8
    25dc:	003cd706 	br	193c <___vfprintf_internal_r+0x7b4>
    25e0:	07000074 	movhi	fp,1
    25e4:	e708b484 	addi	fp,fp,8914
    25e8:	003c4f06 	br	1728 <___vfprintf_internal_r+0x5a0>
    25ec:	dd000f04 	addi	r20,sp,60
    25f0:	dc801904 	addi	r18,sp,100
    25f4:	8009883a 	mov	r4,r16
    25f8:	880b883a 	mov	r5,r17
    25fc:	01800284 	movi	r6,10
    2600:	000f883a 	mov	r7,zero
    2604:	000d7e00 	call	d7e0 <__umoddi3>
    2608:	12000c04 	addi	r8,r2,48
    260c:	94bfffc4 	addi	r18,r18,-1
    2610:	8009883a 	mov	r4,r16
    2614:	880b883a 	mov	r5,r17
    2618:	01800284 	movi	r6,10
    261c:	000f883a 	mov	r7,zero
    2620:	92000005 	stb	r8,0(r18)
    2624:	000d2040 	call	d204 <__udivdi3>
    2628:	1009883a 	mov	r4,r2
    262c:	1021883a 	mov	r16,r2
    2630:	18800068 	cmpgeui	r2,r3,1
    2634:	1823883a 	mov	r17,r3
    2638:	103fee1e 	bne	r2,zero,25f4 <___vfprintf_internal_r+0x146c>
    263c:	1800021e 	bne	r3,zero,2648 <___vfprintf_internal_r+0x14c0>
    2640:	00800244 	movi	r2,9
    2644:	113feb36 	bltu	r2,r4,25f4 <___vfprintf_internal_r+0x146c>
    2648:	94bfffc4 	addi	r18,r18,-1
    264c:	dc814115 	stw	r18,1284(sp)
    2650:	003fc006 	br	2554 <___vfprintf_internal_r+0x13cc>
    2654:	d9014c17 	ldw	r4,1328(sp)
    2658:	2080004c 	andi	r2,r4,1
    265c:	10009a1e 	bne	r2,zero,28c8 <___vfprintf_internal_r+0x1740>
    2660:	d9401904 	addi	r5,sp,100
    2664:	dd000f04 	addi	r20,sp,60
    2668:	d9414115 	stw	r5,1284(sp)
    266c:	003d6106 	br	1bf4 <___vfprintf_internal_r+0xa6c>
    2670:	d9014f17 	ldw	r4,1340(sp)
    2674:	b00b883a 	mov	r5,r22
    2678:	d9800c04 	addi	r6,sp,48
    267c:	00011300 	call	1130 <__sprint_r>
    2680:	103c791e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2684:	dc800e17 	ldw	r18,56(sp)
    2688:	d8c01904 	addi	r3,sp,100
    268c:	003cff06 	br	1a8c <___vfprintf_internal_r+0x904>
    2690:	d8c14c17 	ldw	r3,1328(sp)
    2694:	1880040c 	andi	r2,r3,16
    2698:	1000711e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x16d8>
    269c:	d9014c17 	ldw	r4,1328(sp)
    26a0:	2080100c 	andi	r2,r4,64
    26a4:	10006e26 	beq	r2,zero,2860 <___vfprintf_internal_r+0x16d8>
    26a8:	3c00000b 	ldhu	r16,0(r7)
    26ac:	0023883a 	mov	r17,zero
    26b0:	39c00104 	addi	r7,r7,4
    26b4:	d9c14015 	stw	r7,1280(sp)
    26b8:	003f0006 	br	22bc <___vfprintf_internal_r+0x1134>
    26bc:	dc400d17 	ldw	r17,52(sp)
    26c0:	07000074 	movhi	fp,1
    26c4:	e708b484 	addi	fp,fp,8914
    26c8:	9425883a 	add	r18,r18,r16
    26cc:	8c400044 	addi	r17,r17,1
    26d0:	008001c4 	movi	r2,7
    26d4:	1f000015 	stw	fp,0(r3)
    26d8:	1c000115 	stw	r16,4(r3)
    26dc:	dc800e15 	stw	r18,56(sp)
    26e0:	dc400d15 	stw	r17,52(sp)
    26e4:	147d7616 	blt	r2,r17,1cc0 <___vfprintf_internal_r+0xb38>
    26e8:	18c00204 	addi	r3,r3,8
    26ec:	003d7b06 	br	1cdc <___vfprintf_internal_r+0xb54>
    26f0:	dc800e17 	ldw	r18,56(sp)
    26f4:	dc400d17 	ldw	r17,52(sp)
    26f8:	07000074 	movhi	fp,1
    26fc:	e708b884 	addi	fp,fp,8930
    2700:	003bc006 	br	1604 <___vfprintf_internal_r+0x47c>
    2704:	d9014f17 	ldw	r4,1340(sp)
    2708:	b00b883a 	mov	r5,r22
    270c:	d9800c04 	addi	r6,sp,48
    2710:	00011300 	call	1130 <__sprint_r>
    2714:	103c541e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2718:	dc800e17 	ldw	r18,56(sp)
    271c:	d8c01904 	addi	r3,sp,100
    2720:	003ce906 	br	1ac8 <___vfprintf_internal_r+0x940>
    2724:	3c000017 	ldw	r16,0(r7)
    2728:	0009883a 	mov	r4,zero
    272c:	39c00104 	addi	r7,r7,4
    2730:	0023883a 	mov	r17,zero
    2734:	d9c14015 	stw	r7,1280(sp)
    2738:	d8000405 	stb	zero,16(sp)
    273c:	003d2006 	br	1bc0 <___vfprintf_internal_r+0xa38>
    2740:	38800017 	ldw	r2,0(r7)
    2744:	39c00104 	addi	r7,r7,4
    2748:	d9c14015 	stw	r7,1280(sp)
    274c:	1023d7fa 	srai	r17,r2,31
    2750:	1021883a 	mov	r16,r2
    2754:	003d1806 	br	1bb8 <___vfprintf_internal_r+0xa30>
    2758:	3c000017 	ldw	r16,0(r7)
    275c:	01000044 	movi	r4,1
    2760:	39c00104 	addi	r7,r7,4
    2764:	0023883a 	mov	r17,zero
    2768:	d9c14015 	stw	r7,1280(sp)
    276c:	d8000405 	stb	zero,16(sp)
    2770:	003d1306 	br	1bc0 <___vfprintf_internal_r+0xa38>
    2774:	00800074 	movhi	r2,1
    2778:	1088b404 	addi	r2,r2,8912
    277c:	94800044 	addi	r18,r18,1
    2780:	8c400044 	addi	r17,r17,1
    2784:	a8800015 	stw	r2,0(r21)
    2788:	00c00044 	movi	r3,1
    278c:	008001c4 	movi	r2,7
    2790:	a8c00115 	stw	r3,4(r21)
    2794:	dc800e15 	stw	r18,56(sp)
    2798:	dc400d15 	stw	r17,52(sp)
    279c:	1440ca16 	blt	r2,r17,2ac8 <___vfprintf_internal_r+0x1940>
    27a0:	a8c00204 	addi	r3,r21,8
    27a4:	2000061e 	bne	r4,zero,27c0 <___vfprintf_internal_r+0x1638>
    27a8:	d9414717 	ldw	r5,1308(sp)
    27ac:	2800041e 	bne	r5,zero,27c0 <___vfprintf_internal_r+0x1638>
    27b0:	d9814c17 	ldw	r6,1328(sp)
    27b4:	3080004c 	andi	r2,r6,1
    27b8:	1005003a 	cmpeq	r2,r2,zero
    27bc:	103bf01e 	bne	r2,zero,1780 <___vfprintf_internal_r+0x5f8>
    27c0:	00800044 	movi	r2,1
    27c4:	dc400d17 	ldw	r17,52(sp)
    27c8:	18800115 	stw	r2,4(r3)
    27cc:	d8814917 	ldw	r2,1316(sp)
    27d0:	94800044 	addi	r18,r18,1
    27d4:	8c400044 	addi	r17,r17,1
    27d8:	18800015 	stw	r2,0(r3)
    27dc:	008001c4 	movi	r2,7
    27e0:	dc800e15 	stw	r18,56(sp)
    27e4:	dc400d15 	stw	r17,52(sp)
    27e8:	1440ca16 	blt	r2,r17,2b14 <___vfprintf_internal_r+0x198c>
    27ec:	18c00204 	addi	r3,r3,8
    27f0:	0121c83a 	sub	r16,zero,r4
    27f4:	0400500e 	bge	zero,r16,2938 <___vfprintf_internal_r+0x17b0>
    27f8:	00800404 	movi	r2,16
    27fc:	1400800e 	bge	r2,r16,2a00 <___vfprintf_internal_r+0x1878>
    2800:	1027883a 	mov	r19,r2
    2804:	07000074 	movhi	fp,1
    2808:	e708b484 	addi	fp,fp,8914
    280c:	050001c4 	movi	r20,7
    2810:	00000306 	br	2820 <___vfprintf_internal_r+0x1698>
    2814:	18c00204 	addi	r3,r3,8
    2818:	843ffc04 	addi	r16,r16,-16
    281c:	9c007a0e 	bge	r19,r16,2a08 <___vfprintf_internal_r+0x1880>
    2820:	94800404 	addi	r18,r18,16
    2824:	8c400044 	addi	r17,r17,1
    2828:	1f000015 	stw	fp,0(r3)
    282c:	1cc00115 	stw	r19,4(r3)
    2830:	dc800e15 	stw	r18,56(sp)
    2834:	dc400d15 	stw	r17,52(sp)
    2838:	a47ff60e 	bge	r20,r17,2814 <___vfprintf_internal_r+0x168c>
    283c:	d9014f17 	ldw	r4,1340(sp)
    2840:	b00b883a 	mov	r5,r22
    2844:	d9800c04 	addi	r6,sp,48
    2848:	00011300 	call	1130 <__sprint_r>
    284c:	103c061e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2850:	dc800e17 	ldw	r18,56(sp)
    2854:	dc400d17 	ldw	r17,52(sp)
    2858:	d8c01904 	addi	r3,sp,100
    285c:	003fee06 	br	2818 <___vfprintf_internal_r+0x1690>
    2860:	3c000017 	ldw	r16,0(r7)
    2864:	0023883a 	mov	r17,zero
    2868:	39c00104 	addi	r7,r7,4
    286c:	d9c14015 	stw	r7,1280(sp)
    2870:	003e9206 	br	22bc <___vfprintf_internal_r+0x1134>
    2874:	d9401904 	addi	r5,sp,100
    2878:	dd000f04 	addi	r20,sp,60
    287c:	d9414115 	stw	r5,1284(sp)
    2880:	d9814417 	ldw	r6,1296(sp)
    2884:	880a973a 	slli	r5,r17,28
    2888:	8004d13a 	srli	r2,r16,4
    288c:	810003cc 	andi	r4,r16,15
    2890:	3109883a 	add	r4,r6,r4
    2894:	2884b03a 	or	r2,r5,r2
    2898:	21400003 	ldbu	r5,0(r4)
    289c:	d9014117 	ldw	r4,1284(sp)
    28a0:	8806d13a 	srli	r3,r17,4
    28a4:	1021883a 	mov	r16,r2
    28a8:	213fffc4 	addi	r4,r4,-1
    28ac:	d9014115 	stw	r4,1284(sp)
    28b0:	d9814117 	ldw	r6,1284(sp)
    28b4:	10c8b03a 	or	r4,r2,r3
    28b8:	1823883a 	mov	r17,r3
    28bc:	31400005 	stb	r5,0(r6)
    28c0:	203fef1e 	bne	r4,zero,2880 <___vfprintf_internal_r+0x16f8>
    28c4:	003ccb06 	br	1bf4 <___vfprintf_internal_r+0xa6c>
    28c8:	00800c04 	movi	r2,48
    28cc:	d98018c4 	addi	r6,sp,99
    28d0:	dd000f04 	addi	r20,sp,60
    28d4:	d88018c5 	stb	r2,99(sp)
    28d8:	d9814115 	stw	r6,1284(sp)
    28dc:	003cc506 	br	1bf4 <___vfprintf_internal_r+0xa6c>
    28e0:	dc400d17 	ldw	r17,52(sp)
    28e4:	07000074 	movhi	fp,1
    28e8:	e708b884 	addi	fp,fp,8930
    28ec:	003bc706 	br	180c <___vfprintf_internal_r+0x684>
    28f0:	d9414c17 	ldw	r5,1328(sp)
    28f4:	2880040c 	andi	r2,r5,16
    28f8:	10007c26 	beq	r2,zero,2aec <___vfprintf_internal_r+0x1964>
    28fc:	38800017 	ldw	r2,0(r7)
    2900:	39c00104 	addi	r7,r7,4
    2904:	d9c14015 	stw	r7,1280(sp)
    2908:	d9814b17 	ldw	r6,1324(sp)
    290c:	d9c14017 	ldw	r7,1280(sp)
    2910:	11800015 	stw	r6,0(r2)
    2914:	003a7806 	br	12f8 <___vfprintf_internal_r+0x170>
    2918:	d9014f17 	ldw	r4,1340(sp)
    291c:	b00b883a 	mov	r5,r22
    2920:	d9800c04 	addi	r6,sp,48
    2924:	00011300 	call	1130 <__sprint_r>
    2928:	103bcf1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    292c:	dc800e17 	ldw	r18,56(sp)
    2930:	dc400d17 	ldw	r17,52(sp)
    2934:	d8c01904 	addi	r3,sp,100
    2938:	d9014717 	ldw	r4,1308(sp)
    293c:	d9414117 	ldw	r5,1284(sp)
    2940:	8c400044 	addi	r17,r17,1
    2944:	9125883a 	add	r18,r18,r4
    2948:	008001c4 	movi	r2,7
    294c:	19400015 	stw	r5,0(r3)
    2950:	19000115 	stw	r4,4(r3)
    2954:	dc800e15 	stw	r18,56(sp)
    2958:	dc400d15 	stw	r17,52(sp)
    295c:	147cee16 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb90>
    2960:	18c00204 	addi	r3,r3,8
    2964:	003b8606 	br	1780 <___vfprintf_internal_r+0x5f8>
    2968:	38c00017 	ldw	r3,0(r7)
    296c:	39000204 	addi	r4,r7,8
    2970:	d9014015 	stw	r4,1280(sp)
    2974:	d8c14215 	stw	r3,1288(sp)
    2978:	39c00117 	ldw	r7,4(r7)
    297c:	d9c14315 	stw	r7,1292(sp)
    2980:	003e2006 	br	2204 <___vfprintf_internal_r+0x107c>
    2984:	0005883a 	mov	r2,zero
    2988:	1409c83a 	sub	r4,r2,r16
    298c:	1105803a 	cmpltu	r2,r2,r4
    2990:	044bc83a 	sub	r5,zero,r17
    2994:	2885c83a 	sub	r2,r5,r2
    2998:	2021883a 	mov	r16,r4
    299c:	1023883a 	mov	r17,r2
    29a0:	01000044 	movi	r4,1
    29a4:	00800b44 	movi	r2,45
    29a8:	d8800405 	stb	r2,16(sp)
    29ac:	003c8406 	br	1bc0 <___vfprintf_internal_r+0xa38>
    29b0:	d9014f17 	ldw	r4,1340(sp)
    29b4:	b00b883a 	mov	r5,r22
    29b8:	d9800c04 	addi	r6,sp,48
    29bc:	00011300 	call	1130 <__sprint_r>
    29c0:	103ba91e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    29c4:	dc800e17 	ldw	r18,56(sp)
    29c8:	dc400d17 	ldw	r17,52(sp)
    29cc:	d9000517 	ldw	r4,20(sp)
    29d0:	d9401904 	addi	r5,sp,100
    29d4:	003da706 	br	2074 <___vfprintf_internal_r+0xeec>
    29d8:	d9014f17 	ldw	r4,1340(sp)
    29dc:	b00b883a 	mov	r5,r22
    29e0:	d9800c04 	addi	r6,sp,48
    29e4:	00011300 	call	1130 <__sprint_r>
    29e8:	103b9f1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    29ec:	dc800e17 	ldw	r18,56(sp)
    29f0:	dc400d17 	ldw	r17,52(sp)
    29f4:	d9000517 	ldw	r4,20(sp)
    29f8:	d8c01904 	addi	r3,sp,100
    29fc:	003d9106 	br	2044 <___vfprintf_internal_r+0xebc>
    2a00:	07000074 	movhi	fp,1
    2a04:	e708b484 	addi	fp,fp,8914
    2a08:	9425883a 	add	r18,r18,r16
    2a0c:	8c400044 	addi	r17,r17,1
    2a10:	008001c4 	movi	r2,7
    2a14:	1f000015 	stw	fp,0(r3)
    2a18:	1c000115 	stw	r16,4(r3)
    2a1c:	dc800e15 	stw	r18,56(sp)
    2a20:	dc400d15 	stw	r17,52(sp)
    2a24:	147fbc16 	blt	r2,r17,2918 <___vfprintf_internal_r+0x1790>
    2a28:	18c00204 	addi	r3,r3,8
    2a2c:	003fc206 	br	2938 <___vfprintf_internal_r+0x17b0>
    2a30:	d9014f17 	ldw	r4,1340(sp)
    2a34:	b00b883a 	mov	r5,r22
    2a38:	d9800c04 	addi	r6,sp,48
    2a3c:	00011300 	call	1130 <__sprint_r>
    2a40:	103b891e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2a44:	dc800e17 	ldw	r18,56(sp)
    2a48:	d9000517 	ldw	r4,20(sp)
    2a4c:	d8c01904 	addi	r3,sp,100
    2a50:	003d0206 	br	1e5c <___vfprintf_internal_r+0xcd4>
    2a54:	07000074 	movhi	fp,1
    2a58:	e708b484 	addi	fp,fp,8914
    2a5c:	003be406 	br	19f0 <___vfprintf_internal_r+0x868>
    2a60:	00800074 	movhi	r2,1
    2a64:	1088a304 	addi	r2,r2,8844
    2a68:	d8814115 	stw	r2,1284(sp)
    2a6c:	003df506 	br	2244 <___vfprintf_internal_r+0x10bc>
    2a70:	d9014217 	ldw	r4,1288(sp)
    2a74:	d9414317 	ldw	r5,1292(sp)
    2a78:	00098300 	call	9830 <__isnand>
    2a7c:	10003926 	beq	r2,zero,2b64 <___vfprintf_internal_r+0x19dc>
    2a80:	d9414d17 	ldw	r5,1332(sp)
    2a84:	008011c4 	movi	r2,71
    2a88:	1140ce16 	blt	r2,r5,2dc4 <___vfprintf_internal_r+0x1c3c>
    2a8c:	01800074 	movhi	r6,1
    2a90:	3188a404 	addi	r6,r6,8848
    2a94:	d9814115 	stw	r6,1284(sp)
    2a98:	003dea06 	br	2244 <___vfprintf_internal_r+0x10bc>
    2a9c:	d9014c17 	ldw	r4,1328(sp)
    2aa0:	bdc00044 	addi	r23,r23,1
    2aa4:	b8c00007 	ldb	r3,0(r23)
    2aa8:	21000814 	ori	r4,r4,32
    2aac:	d9014c15 	stw	r4,1328(sp)
    2ab0:	003a3406 	br	1384 <___vfprintf_internal_r+0x1fc>
    2ab4:	dcc14515 	stw	r19,1300(sp)
    2ab8:	98011016 	blt	r19,zero,2efc <___vfprintf_internal_r+0x1d74>
    2abc:	980f883a 	mov	r7,r19
    2ac0:	d8014615 	stw	zero,1304(sp)
    2ac4:	003c5206 	br	1c10 <___vfprintf_internal_r+0xa88>
    2ac8:	d9014f17 	ldw	r4,1340(sp)
    2acc:	b00b883a 	mov	r5,r22
    2ad0:	d9800c04 	addi	r6,sp,48
    2ad4:	00011300 	call	1130 <__sprint_r>
    2ad8:	103b631e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2adc:	dc800e17 	ldw	r18,56(sp)
    2ae0:	d9000517 	ldw	r4,20(sp)
    2ae4:	d8c01904 	addi	r3,sp,100
    2ae8:	003f2e06 	br	27a4 <___vfprintf_internal_r+0x161c>
    2aec:	d8c14c17 	ldw	r3,1328(sp)
    2af0:	1880100c 	andi	r2,r3,64
    2af4:	1000a026 	beq	r2,zero,2d78 <___vfprintf_internal_r+0x1bf0>
    2af8:	38800017 	ldw	r2,0(r7)
    2afc:	39c00104 	addi	r7,r7,4
    2b00:	d9c14015 	stw	r7,1280(sp)
    2b04:	d9014b17 	ldw	r4,1324(sp)
    2b08:	d9c14017 	ldw	r7,1280(sp)
    2b0c:	1100000d 	sth	r4,0(r2)
    2b10:	0039f906 	br	12f8 <___vfprintf_internal_r+0x170>
    2b14:	d9014f17 	ldw	r4,1340(sp)
    2b18:	b00b883a 	mov	r5,r22
    2b1c:	d9800c04 	addi	r6,sp,48
    2b20:	00011300 	call	1130 <__sprint_r>
    2b24:	103b501e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2b28:	dc800e17 	ldw	r18,56(sp)
    2b2c:	dc400d17 	ldw	r17,52(sp)
    2b30:	d9000517 	ldw	r4,20(sp)
    2b34:	d8c01904 	addi	r3,sp,100
    2b38:	003f2d06 	br	27f0 <___vfprintf_internal_r+0x1668>
    2b3c:	00800184 	movi	r2,6
    2b40:	14c09a36 	bltu	r2,r19,2dac <___vfprintf_internal_r+0x1c24>
    2b44:	dcc14515 	stw	r19,1300(sp)
    2b48:	9800010e 	bge	r19,zero,2b50 <___vfprintf_internal_r+0x19c8>
    2b4c:	d8014515 	stw	zero,1300(sp)
    2b50:	00800074 	movhi	r2,1
    2b54:	1088a604 	addi	r2,r2,8856
    2b58:	980f883a 	mov	r7,r19
    2b5c:	d8814115 	stw	r2,1284(sp)
    2b60:	003a7806 	br	1544 <___vfprintf_internal_r+0x3bc>
    2b64:	00bfffc4 	movi	r2,-1
    2b68:	9880e226 	beq	r19,r2,2ef4 <___vfprintf_internal_r+0x1d6c>
    2b6c:	d9414d17 	ldw	r5,1332(sp)
    2b70:	008019c4 	movi	r2,103
    2b74:	2880dc26 	beq	r5,r2,2ee8 <___vfprintf_internal_r+0x1d60>
    2b78:	008011c4 	movi	r2,71
    2b7c:	2880da26 	beq	r5,r2,2ee8 <___vfprintf_internal_r+0x1d60>
    2b80:	d9414c17 	ldw	r5,1328(sp)
    2b84:	d9014317 	ldw	r4,1292(sp)
    2b88:	d9814217 	ldw	r6,1288(sp)
    2b8c:	29404014 	ori	r5,r5,256
    2b90:	d9414c15 	stw	r5,1328(sp)
    2b94:	2000cc16 	blt	r4,zero,2ec8 <___vfprintf_internal_r+0x1d40>
    2b98:	3021883a 	mov	r16,r6
    2b9c:	2023883a 	mov	r17,r4
    2ba0:	0039883a 	mov	fp,zero
    2ba4:	d9414d17 	ldw	r5,1332(sp)
    2ba8:	00801984 	movi	r2,102
    2bac:	2880b726 	beq	r5,r2,2e8c <___vfprintf_internal_r+0x1d04>
    2bb0:	00801184 	movi	r2,70
    2bb4:	2880b526 	beq	r5,r2,2e8c <___vfprintf_internal_r+0x1d04>
    2bb8:	00801944 	movi	r2,101
    2bbc:	2880c826 	beq	r5,r2,2ee0 <___vfprintf_internal_r+0x1d58>
    2bc0:	00801144 	movi	r2,69
    2bc4:	2880c626 	beq	r5,r2,2ee0 <___vfprintf_internal_r+0x1d58>
    2bc8:	9829883a 	mov	r20,r19
    2bcc:	d9014f17 	ldw	r4,1340(sp)
    2bd0:	d8800504 	addi	r2,sp,20
    2bd4:	880d883a 	mov	r6,r17
    2bd8:	d8800115 	stw	r2,4(sp)
    2bdc:	d8c00604 	addi	r3,sp,24
    2be0:	d8800704 	addi	r2,sp,28
    2be4:	800b883a 	mov	r5,r16
    2be8:	01c00084 	movi	r7,2
    2bec:	d8c00215 	stw	r3,8(sp)
    2bf0:	d8800315 	stw	r2,12(sp)
    2bf4:	dd000015 	stw	r20,0(sp)
    2bf8:	0004b2c0 	call	4b2c <_dtoa_r>
    2bfc:	d9814d17 	ldw	r6,1332(sp)
    2c00:	d8814115 	stw	r2,1284(sp)
    2c04:	008019c4 	movi	r2,103
    2c08:	30809526 	beq	r6,r2,2e60 <___vfprintf_internal_r+0x1cd8>
    2c0c:	d8c14d17 	ldw	r3,1332(sp)
    2c10:	008011c4 	movi	r2,71
    2c14:	18809226 	beq	r3,r2,2e60 <___vfprintf_internal_r+0x1cd8>
    2c18:	d9414117 	ldw	r5,1284(sp)
    2c1c:	d9814d17 	ldw	r6,1332(sp)
    2c20:	00801984 	movi	r2,102
    2c24:	2d25883a 	add	r18,r5,r20
    2c28:	30808626 	beq	r6,r2,2e44 <___vfprintf_internal_r+0x1cbc>
    2c2c:	00801184 	movi	r2,70
    2c30:	30808426 	beq	r6,r2,2e44 <___vfprintf_internal_r+0x1cbc>
    2c34:	000d883a 	mov	r6,zero
    2c38:	000f883a 	mov	r7,zero
    2c3c:	880b883a 	mov	r5,r17
    2c40:	8009883a 	mov	r4,r16
    2c44:	000e9a00 	call	e9a0 <__eqdf2>
    2c48:	1000751e 	bne	r2,zero,2e20 <___vfprintf_internal_r+0x1c98>
    2c4c:	9005883a 	mov	r2,r18
    2c50:	dc800715 	stw	r18,28(sp)
    2c54:	d9014117 	ldw	r4,1284(sp)
    2c58:	d9414d17 	ldw	r5,1332(sp)
    2c5c:	00c019c4 	movi	r3,103
    2c60:	1125c83a 	sub	r18,r2,r4
    2c64:	28c06826 	beq	r5,r3,2e08 <___vfprintf_internal_r+0x1c80>
    2c68:	008011c4 	movi	r2,71
    2c6c:	28806626 	beq	r5,r2,2e08 <___vfprintf_internal_r+0x1c80>
    2c70:	d9000517 	ldw	r4,20(sp)
    2c74:	d8c14d17 	ldw	r3,1332(sp)
    2c78:	00801944 	movi	r2,101
    2c7c:	10c05516 	blt	r2,r3,2dd4 <___vfprintf_internal_r+0x1c4c>
    2c80:	213fffc4 	addi	r4,r4,-1
    2c84:	d9000515 	stw	r4,20(sp)
    2c88:	d8c00805 	stb	r3,32(sp)
    2c8c:	2021883a 	mov	r16,r4
    2c90:	2000c116 	blt	r4,zero,2f98 <___vfprintf_internal_r+0x1e10>
    2c94:	00800ac4 	movi	r2,43
    2c98:	d8800845 	stb	r2,33(sp)
    2c9c:	00800244 	movi	r2,9
    2ca0:	1400af0e 	bge	r2,r16,2f60 <___vfprintf_internal_r+0x1dd8>
    2ca4:	1027883a 	mov	r19,r2
    2ca8:	dc400b84 	addi	r17,sp,46
    2cac:	8009883a 	mov	r4,r16
    2cb0:	01400284 	movi	r5,10
    2cb4:	000f1840 	call	f184 <__modsi3>
    2cb8:	10800c04 	addi	r2,r2,48
    2cbc:	8c7fffc4 	addi	r17,r17,-1
    2cc0:	8009883a 	mov	r4,r16
    2cc4:	01400284 	movi	r5,10
    2cc8:	88800005 	stb	r2,0(r17)
    2ccc:	000f1240 	call	f124 <__divsi3>
    2cd0:	1021883a 	mov	r16,r2
    2cd4:	98bff516 	blt	r19,r2,2cac <___vfprintf_internal_r+0x1b24>
    2cd8:	10c00c04 	addi	r3,r2,48
    2cdc:	d88009c4 	addi	r2,sp,39
    2ce0:	108001c4 	addi	r2,r2,7
    2ce4:	897fffc4 	addi	r5,r17,-1
    2ce8:	88ffffc5 	stb	r3,-1(r17)
    2cec:	2880a72e 	bgeu	r5,r2,2f8c <___vfprintf_internal_r+0x1e04>
    2cf0:	1009883a 	mov	r4,r2
    2cf4:	d9800804 	addi	r6,sp,32
    2cf8:	d8c00884 	addi	r3,sp,34
    2cfc:	28800003 	ldbu	r2,0(r5)
    2d00:	29400044 	addi	r5,r5,1
    2d04:	18800005 	stb	r2,0(r3)
    2d08:	18c00044 	addi	r3,r3,1
    2d0c:	293ffb36 	bltu	r5,r4,2cfc <___vfprintf_internal_r+0x1b74>
    2d10:	1987c83a 	sub	r3,r3,r6
    2d14:	00800044 	movi	r2,1
    2d18:	d8c14815 	stw	r3,1312(sp)
    2d1c:	90cf883a 	add	r7,r18,r3
    2d20:	1480960e 	bge	r2,r18,2f7c <___vfprintf_internal_r+0x1df4>
    2d24:	39c00044 	addi	r7,r7,1
    2d28:	d9c14515 	stw	r7,1300(sp)
    2d2c:	38003416 	blt	r7,zero,2e00 <___vfprintf_internal_r+0x1c78>
    2d30:	e0803fcc 	andi	r2,fp,255
    2d34:	1080201c 	xori	r2,r2,128
    2d38:	10bfe004 	addi	r2,r2,-128
    2d3c:	10004e26 	beq	r2,zero,2e78 <___vfprintf_internal_r+0x1cf0>
    2d40:	00800b44 	movi	r2,45
    2d44:	dc814715 	stw	r18,1308(sp)
    2d48:	d8014615 	stw	zero,1304(sp)
    2d4c:	d8800405 	stb	r2,16(sp)
    2d50:	003bb106 	br	1c18 <___vfprintf_internal_r+0xa90>
    2d54:	00800b44 	movi	r2,45
    2d58:	d8800405 	stb	r2,16(sp)
    2d5c:	003d3306 	br	222c <___vfprintf_internal_r+0x10a4>
    2d60:	d9014f17 	ldw	r4,1340(sp)
    2d64:	b00b883a 	mov	r5,r22
    2d68:	d9800c04 	addi	r6,sp,48
    2d6c:	00011300 	call	1130 <__sprint_r>
    2d70:	103abd1e 	bne	r2,zero,1868 <___vfprintf_internal_r+0x6e0>
    2d74:	003abb06 	br	1864 <___vfprintf_internal_r+0x6dc>
    2d78:	38800017 	ldw	r2,0(r7)
    2d7c:	39c00104 	addi	r7,r7,4
    2d80:	d9c14015 	stw	r7,1280(sp)
    2d84:	d9414b17 	ldw	r5,1324(sp)
    2d88:	d9c14017 	ldw	r7,1280(sp)
    2d8c:	11400015 	stw	r5,0(r2)
    2d90:	00395906 	br	12f8 <___vfprintf_internal_r+0x170>
    2d94:	980f883a 	mov	r7,r19
    2d98:	dcc14515 	stw	r19,1300(sp)
    2d9c:	d8014615 	stw	zero,1304(sp)
    2da0:	003b9b06 	br	1c10 <___vfprintf_internal_r+0xa88>
    2da4:	0027883a 	mov	r19,zero
    2da8:	00397806 	br	138c <___vfprintf_internal_r+0x204>
    2dac:	00c00074 	movhi	r3,1
    2db0:	18c8a604 	addi	r3,r3,8856
    2db4:	100f883a 	mov	r7,r2
    2db8:	d8814515 	stw	r2,1300(sp)
    2dbc:	d8c14115 	stw	r3,1284(sp)
    2dc0:	0039e006 	br	1544 <___vfprintf_internal_r+0x3bc>
    2dc4:	00800074 	movhi	r2,1
    2dc8:	1088a504 	addi	r2,r2,8852
    2dcc:	d8814115 	stw	r2,1284(sp)
    2dd0:	003d1c06 	br	2244 <___vfprintf_internal_r+0x10bc>
    2dd4:	d9414d17 	ldw	r5,1332(sp)
    2dd8:	00801984 	movi	r2,102
    2ddc:	28804926 	beq	r5,r2,2f04 <___vfprintf_internal_r+0x1d7c>
    2de0:	200f883a 	mov	r7,r4
    2de4:	24805716 	blt	r4,r18,2f44 <___vfprintf_internal_r+0x1dbc>
    2de8:	d9414c17 	ldw	r5,1328(sp)
    2dec:	2880004c 	andi	r2,r5,1
    2df0:	10000126 	beq	r2,zero,2df8 <___vfprintf_internal_r+0x1c70>
    2df4:	21c00044 	addi	r7,r4,1
    2df8:	d9c14515 	stw	r7,1300(sp)
    2dfc:	383fcc0e 	bge	r7,zero,2d30 <___vfprintf_internal_r+0x1ba8>
    2e00:	d8014515 	stw	zero,1300(sp)
    2e04:	003fca06 	br	2d30 <___vfprintf_internal_r+0x1ba8>
    2e08:	d9000517 	ldw	r4,20(sp)
    2e0c:	00bfff04 	movi	r2,-4
    2e10:	1100480e 	bge	r2,r4,2f34 <___vfprintf_internal_r+0x1dac>
    2e14:	99004716 	blt	r19,r4,2f34 <___vfprintf_internal_r+0x1dac>
    2e18:	d8c14d15 	stw	r3,1332(sp)
    2e1c:	003ff006 	br	2de0 <___vfprintf_internal_r+0x1c58>
    2e20:	d8800717 	ldw	r2,28(sp)
    2e24:	14bf8b2e 	bgeu	r2,r18,2c54 <___vfprintf_internal_r+0x1acc>
    2e28:	9007883a 	mov	r3,r18
    2e2c:	01000c04 	movi	r4,48
    2e30:	11000005 	stb	r4,0(r2)
    2e34:	10800044 	addi	r2,r2,1
    2e38:	d8800715 	stw	r2,28(sp)
    2e3c:	18bffc1e 	bne	r3,r2,2e30 <___vfprintf_internal_r+0x1ca8>
    2e40:	003f8406 	br	2c54 <___vfprintf_internal_r+0x1acc>
    2e44:	d8814117 	ldw	r2,1284(sp)
    2e48:	10c00007 	ldb	r3,0(r2)
    2e4c:	00800c04 	movi	r2,48
    2e50:	18805b26 	beq	r3,r2,2fc0 <___vfprintf_internal_r+0x1e38>
    2e54:	d9000517 	ldw	r4,20(sp)
    2e58:	9125883a 	add	r18,r18,r4
    2e5c:	003f7506 	br	2c34 <___vfprintf_internal_r+0x1aac>
    2e60:	d9014c17 	ldw	r4,1328(sp)
    2e64:	2080004c 	andi	r2,r4,1
    2e68:	1005003a 	cmpeq	r2,r2,zero
    2e6c:	103f6a26 	beq	r2,zero,2c18 <___vfprintf_internal_r+0x1a90>
    2e70:	d8800717 	ldw	r2,28(sp)
    2e74:	003f7706 	br	2c54 <___vfprintf_internal_r+0x1acc>
    2e78:	d9c14515 	stw	r7,1300(sp)
    2e7c:	38004d16 	blt	r7,zero,2fb4 <___vfprintf_internal_r+0x1e2c>
    2e80:	dc814715 	stw	r18,1308(sp)
    2e84:	d8014615 	stw	zero,1304(sp)
    2e88:	003b6106 	br	1c10 <___vfprintf_internal_r+0xa88>
    2e8c:	d9014f17 	ldw	r4,1340(sp)
    2e90:	d8800504 	addi	r2,sp,20
    2e94:	d8800115 	stw	r2,4(sp)
    2e98:	d8c00604 	addi	r3,sp,24
    2e9c:	d8800704 	addi	r2,sp,28
    2ea0:	800b883a 	mov	r5,r16
    2ea4:	880d883a 	mov	r6,r17
    2ea8:	01c000c4 	movi	r7,3
    2eac:	d8c00215 	stw	r3,8(sp)
    2eb0:	d8800315 	stw	r2,12(sp)
    2eb4:	dcc00015 	stw	r19,0(sp)
    2eb8:	9829883a 	mov	r20,r19
    2ebc:	0004b2c0 	call	4b2c <_dtoa_r>
    2ec0:	d8814115 	stw	r2,1284(sp)
    2ec4:	003f5106 	br	2c0c <___vfprintf_internal_r+0x1a84>
    2ec8:	d8c14217 	ldw	r3,1288(sp)
    2ecc:	d9014317 	ldw	r4,1292(sp)
    2ed0:	07000b44 	movi	fp,45
    2ed4:	1821883a 	mov	r16,r3
    2ed8:	2460003c 	xorhi	r17,r4,32768
    2edc:	003f3106 	br	2ba4 <___vfprintf_internal_r+0x1a1c>
    2ee0:	9d000044 	addi	r20,r19,1
    2ee4:	003f3906 	br	2bcc <___vfprintf_internal_r+0x1a44>
    2ee8:	983f251e 	bne	r19,zero,2b80 <___vfprintf_internal_r+0x19f8>
    2eec:	04c00044 	movi	r19,1
    2ef0:	003f2306 	br	2b80 <___vfprintf_internal_r+0x19f8>
    2ef4:	04c00184 	movi	r19,6
    2ef8:	003f2106 	br	2b80 <___vfprintf_internal_r+0x19f8>
    2efc:	d8014515 	stw	zero,1300(sp)
    2f00:	003eee06 	br	2abc <___vfprintf_internal_r+0x1934>
    2f04:	200f883a 	mov	r7,r4
    2f08:	0100370e 	bge	zero,r4,2fe8 <___vfprintf_internal_r+0x1e60>
    2f0c:	9800031e 	bne	r19,zero,2f1c <___vfprintf_internal_r+0x1d94>
    2f10:	d9814c17 	ldw	r6,1328(sp)
    2f14:	3080004c 	andi	r2,r6,1
    2f18:	103fb726 	beq	r2,zero,2df8 <___vfprintf_internal_r+0x1c70>
    2f1c:	20800044 	addi	r2,r4,1
    2f20:	98a7883a 	add	r19,r19,r2
    2f24:	dcc14515 	stw	r19,1300(sp)
    2f28:	980f883a 	mov	r7,r19
    2f2c:	983f800e 	bge	r19,zero,2d30 <___vfprintf_internal_r+0x1ba8>
    2f30:	003fb306 	br	2e00 <___vfprintf_internal_r+0x1c78>
    2f34:	d9814d17 	ldw	r6,1332(sp)
    2f38:	31bfff84 	addi	r6,r6,-2
    2f3c:	d9814d15 	stw	r6,1332(sp)
    2f40:	003f4c06 	br	2c74 <___vfprintf_internal_r+0x1aec>
    2f44:	0100180e 	bge	zero,r4,2fa8 <___vfprintf_internal_r+0x1e20>
    2f48:	00800044 	movi	r2,1
    2f4c:	1485883a 	add	r2,r2,r18
    2f50:	d8814515 	stw	r2,1300(sp)
    2f54:	100f883a 	mov	r7,r2
    2f58:	103f750e 	bge	r2,zero,2d30 <___vfprintf_internal_r+0x1ba8>
    2f5c:	003fa806 	br	2e00 <___vfprintf_internal_r+0x1c78>
    2f60:	80c00c04 	addi	r3,r16,48
    2f64:	00800c04 	movi	r2,48
    2f68:	d8c008c5 	stb	r3,35(sp)
    2f6c:	d9800804 	addi	r6,sp,32
    2f70:	d8c00904 	addi	r3,sp,36
    2f74:	d8800885 	stb	r2,34(sp)
    2f78:	003f6506 	br	2d10 <___vfprintf_internal_r+0x1b88>
    2f7c:	d9014c17 	ldw	r4,1328(sp)
    2f80:	2084703a 	and	r2,r4,r2
    2f84:	103f9c26 	beq	r2,zero,2df8 <___vfprintf_internal_r+0x1c70>
    2f88:	003f6606 	br	2d24 <___vfprintf_internal_r+0x1b9c>
    2f8c:	d9800804 	addi	r6,sp,32
    2f90:	d8c00884 	addi	r3,sp,34
    2f94:	003f5e06 	br	2d10 <___vfprintf_internal_r+0x1b88>
    2f98:	00800b44 	movi	r2,45
    2f9c:	0121c83a 	sub	r16,zero,r4
    2fa0:	d8800845 	stb	r2,33(sp)
    2fa4:	003f3d06 	br	2c9c <___vfprintf_internal_r+0x1b14>
    2fa8:	00800084 	movi	r2,2
    2fac:	1105c83a 	sub	r2,r2,r4
    2fb0:	003fe606 	br	2f4c <___vfprintf_internal_r+0x1dc4>
    2fb4:	d8014515 	stw	zero,1300(sp)
    2fb8:	dc814715 	stw	r18,1308(sp)
    2fbc:	003fb106 	br	2e84 <___vfprintf_internal_r+0x1cfc>
    2fc0:	000d883a 	mov	r6,zero
    2fc4:	000f883a 	mov	r7,zero
    2fc8:	8009883a 	mov	r4,r16
    2fcc:	880b883a 	mov	r5,r17
    2fd0:	000ea280 	call	ea28 <__nedf2>
    2fd4:	103f9f26 	beq	r2,zero,2e54 <___vfprintf_internal_r+0x1ccc>
    2fd8:	00800044 	movi	r2,1
    2fdc:	1509c83a 	sub	r4,r2,r20
    2fe0:	d9000515 	stw	r4,20(sp)
    2fe4:	003f9b06 	br	2e54 <___vfprintf_internal_r+0x1ccc>
    2fe8:	98000d1e 	bne	r19,zero,3020 <___vfprintf_internal_r+0x1e98>
    2fec:	d8c14c17 	ldw	r3,1328(sp)
    2ff0:	1880004c 	andi	r2,r3,1
    2ff4:	10000a1e 	bne	r2,zero,3020 <___vfprintf_internal_r+0x1e98>
    2ff8:	01000044 	movi	r4,1
    2ffc:	200f883a 	mov	r7,r4
    3000:	d9014515 	stw	r4,1300(sp)
    3004:	003f4a06 	br	2d30 <___vfprintf_internal_r+0x1ba8>
    3008:	3cc00017 	ldw	r19,0(r7)
    300c:	39c00104 	addi	r7,r7,4
    3010:	983d0e0e 	bge	r19,zero,244c <___vfprintf_internal_r+0x12c4>
    3014:	b8c00007 	ldb	r3,0(r23)
    3018:	04ffffc4 	movi	r19,-1
    301c:	0038d906 	br	1384 <___vfprintf_internal_r+0x1fc>
    3020:	9cc00084 	addi	r19,r19,2
    3024:	dcc14515 	stw	r19,1300(sp)
    3028:	980f883a 	mov	r7,r19
    302c:	983f400e 	bge	r19,zero,2d30 <___vfprintf_internal_r+0x1ba8>
    3030:	003f7306 	br	2e00 <___vfprintf_internal_r+0x1c78>

00003034 <__vfprintf_internal>:
    3034:	00800074 	movhi	r2,1
    3038:	10910c04 	addi	r2,r2,17456
    303c:	2013883a 	mov	r9,r4
    3040:	11000017 	ldw	r4,0(r2)
    3044:	2805883a 	mov	r2,r5
    3048:	300f883a 	mov	r7,r6
    304c:	480b883a 	mov	r5,r9
    3050:	100d883a 	mov	r6,r2
    3054:	00011881 	jmpi	1188 <___vfprintf_internal_r>

00003058 <__svfscanf_r>:
    3058:	deff4e04 	addi	sp,sp,-712
    305c:	dd80ae15 	stw	r22,696(sp)
    3060:	dd00ac15 	stw	r20,688(sp)
    3064:	dc40a915 	stw	r17,676(sp)
    3068:	dc00a815 	stw	r16,672(sp)
    306c:	dfc0b115 	stw	ra,708(sp)
    3070:	df00b015 	stw	fp,704(sp)
    3074:	ddc0af15 	stw	r23,700(sp)
    3078:	dd40ad15 	stw	r21,692(sp)
    307c:	dcc0ab15 	stw	r19,684(sp)
    3080:	dc80aa15 	stw	r18,680(sp)
    3084:	202d883a 	mov	r22,r4
    3088:	2821883a 	mov	r16,r5
    308c:	d9c0a415 	stw	r7,656(sp)
    3090:	3029883a 	mov	r20,r6
    3094:	d800a215 	stw	zero,648(sp)
    3098:	0023883a 	mov	r17,zero
    309c:	d800a115 	stw	zero,644(sp)
    30a0:	d800a015 	stw	zero,640(sp)
    30a4:	a1000007 	ldb	r4,0(r20)
    30a8:	d9000115 	stw	r4,4(sp)
    30ac:	20001f26 	beq	r4,zero,312c <__svfscanf_r+0xd4>
    30b0:	04800074 	movhi	r18,1
    30b4:	94910b04 	addi	r18,r18,17452
    30b8:	91800017 	ldw	r6,0(r18)
    30bc:	a5000044 	addi	r20,r20,1
    30c0:	3107883a 	add	r3,r6,r4
    30c4:	18800003 	ldbu	r2,0(r3)
    30c8:	1080020c 	andi	r2,r2,8
    30cc:	10002426 	beq	r2,zero,3160 <__svfscanf_r+0x108>
    30d0:	80c00117 	ldw	r3,4(r16)
    30d4:	00c00e0e 	bge	zero,r3,3110 <__svfscanf_r+0xb8>
    30d8:	81400017 	ldw	r5,0(r16)
    30dc:	90800017 	ldw	r2,0(r18)
    30e0:	28c00003 	ldbu	r3,0(r5)
    30e4:	1887883a 	add	r3,r3,r2
    30e8:	19000003 	ldbu	r4,0(r3)
    30ec:	2100020c 	andi	r4,r4,8
    30f0:	203fec26 	beq	r4,zero,30a4 <__svfscanf_r+0x4c>
    30f4:	80c00117 	ldw	r3,4(r16)
    30f8:	29800044 	addi	r6,r5,1
    30fc:	8c400044 	addi	r17,r17,1
    3100:	18ffffc4 	addi	r3,r3,-1
    3104:	81800015 	stw	r6,0(r16)
    3108:	80c00115 	stw	r3,4(r16)
    310c:	00fff216 	blt	zero,r3,30d8 <__svfscanf_r+0x80>
    3110:	b009883a 	mov	r4,r22
    3114:	800b883a 	mov	r5,r16
    3118:	00096100 	call	9610 <__srefill_r>
    311c:	103fee26 	beq	r2,zero,30d8 <__svfscanf_r+0x80>
    3120:	a1000007 	ldb	r4,0(r20)
    3124:	d9000115 	stw	r4,4(sp)
    3128:	203fe11e 	bne	r4,zero,30b0 <__svfscanf_r+0x58>
    312c:	d880a217 	ldw	r2,648(sp)
    3130:	dfc0b117 	ldw	ra,708(sp)
    3134:	df00b017 	ldw	fp,704(sp)
    3138:	ddc0af17 	ldw	r23,700(sp)
    313c:	dd80ae17 	ldw	r22,696(sp)
    3140:	dd40ad17 	ldw	r21,692(sp)
    3144:	dd00ac17 	ldw	r20,688(sp)
    3148:	dcc0ab17 	ldw	r19,684(sp)
    314c:	dc80aa17 	ldw	r18,680(sp)
    3150:	dc40a917 	ldw	r17,676(sp)
    3154:	dc00a817 	ldw	r16,672(sp)
    3158:	dec0b204 	addi	sp,sp,712
    315c:	f800283a 	ret
    3160:	00800944 	movi	r2,37
    3164:	20801626 	beq	r4,r2,31c0 <__svfscanf_r+0x168>
    3168:	80800117 	ldw	r2,4(r16)
    316c:	00800b0e 	bge	zero,r2,319c <__svfscanf_r+0x144>
    3170:	81000017 	ldw	r4,0(r16)
    3174:	a0ffffc7 	ldb	r3,-1(r20)
    3178:	20800003 	ldbu	r2,0(r4)
    317c:	10ffeb1e 	bne	r2,r3,312c <__svfscanf_r+0xd4>
    3180:	80c00117 	ldw	r3,4(r16)
    3184:	21800044 	addi	r6,r4,1
    3188:	8c400044 	addi	r17,r17,1
    318c:	18ffffc4 	addi	r3,r3,-1
    3190:	80c00115 	stw	r3,4(r16)
    3194:	81800015 	stw	r6,0(r16)
    3198:	003fc206 	br	30a4 <__svfscanf_r+0x4c>
    319c:	b009883a 	mov	r4,r22
    31a0:	800b883a 	mov	r5,r16
    31a4:	00096100 	call	9610 <__srefill_r>
    31a8:	103ff126 	beq	r2,zero,3170 <__svfscanf_r+0x118>
    31ac:	d900a217 	ldw	r4,648(sp)
    31b0:	2004c91e 	bne	r4,zero,44d8 <__svfscanf_r+0x1480>
    31b4:	00bfffc4 	movi	r2,-1
    31b8:	d880a215 	stw	r2,648(sp)
    31bc:	003fdb06 	br	312c <__svfscanf_r+0xd4>
    31c0:	d800a315 	stw	zero,652(sp)
    31c4:	0027883a 	mov	r19,zero
    31c8:	a0c00003 	ldbu	r3,0(r20)
    31cc:	00801e04 	movi	r2,120
    31d0:	a5000044 	addi	r20,r20,1
    31d4:	19403fcc 	andi	r5,r3,255
    31d8:	2940201c 	xori	r5,r5,128
    31dc:	297fe004 	addi	r5,r5,-128
    31e0:	10c08036 	bltu	r2,r3,33e4 <__svfscanf_r+0x38c>
    31e4:	18c5883a 	add	r2,r3,r3
    31e8:	1085883a 	add	r2,r2,r2
    31ec:	00c00034 	movhi	r3,0
    31f0:	18cc8004 	addi	r3,r3,12800
    31f4:	10c5883a 	add	r2,r2,r3
    31f8:	11000017 	ldw	r4,0(r2)
    31fc:	2000683a 	jmp	r4
    3200:	000031b4 	movhi	zero,198
    3204:	000033e4 	muli	zero,zero,207
    3208:	000033e4 	muli	zero,zero,207
    320c:	000033e4 	muli	zero,zero,207
    3210:	000033e4 	muli	zero,zero,207
    3214:	000033e4 	muli	zero,zero,207
    3218:	000033e4 	muli	zero,zero,207
    321c:	000033e4 	muli	zero,zero,207
    3220:	000033e4 	muli	zero,zero,207
    3224:	000033e4 	muli	zero,zero,207
    3228:	000033e4 	muli	zero,zero,207
    322c:	000033e4 	muli	zero,zero,207
    3230:	000033e4 	muli	zero,zero,207
    3234:	000033e4 	muli	zero,zero,207
    3238:	000033e4 	muli	zero,zero,207
    323c:	000033e4 	muli	zero,zero,207
    3240:	000033e4 	muli	zero,zero,207
    3244:	000033e4 	muli	zero,zero,207
    3248:	000033e4 	muli	zero,zero,207
    324c:	000033e4 	muli	zero,zero,207
    3250:	000033e4 	muli	zero,zero,207
    3254:	000033e4 	muli	zero,zero,207
    3258:	000033e4 	muli	zero,zero,207
    325c:	000033e4 	muli	zero,zero,207
    3260:	000033e4 	muli	zero,zero,207
    3264:	000033e4 	muli	zero,zero,207
    3268:	000033e4 	muli	zero,zero,207
    326c:	000033e4 	muli	zero,zero,207
    3270:	000033e4 	muli	zero,zero,207
    3274:	000033e4 	muli	zero,zero,207
    3278:	000033e4 	muli	zero,zero,207
    327c:	000033e4 	muli	zero,zero,207
    3280:	000033e4 	muli	zero,zero,207
    3284:	000033e4 	muli	zero,zero,207
    3288:	000033e4 	muli	zero,zero,207
    328c:	000033e4 	muli	zero,zero,207
    3290:	000033e4 	muli	zero,zero,207
    3294:	00003168 	cmpgeui	zero,zero,197
    3298:	000033e4 	muli	zero,zero,207
    329c:	000033e4 	muli	zero,zero,207
    32a0:	000033e4 	muli	zero,zero,207
    32a4:	000033e4 	muli	zero,zero,207
    32a8:	00004408 	cmpgei	zero,zero,272
    32ac:	000033e4 	muli	zero,zero,207
    32b0:	000033e4 	muli	zero,zero,207
    32b4:	000033e4 	muli	zero,zero,207
    32b8:	000033e4 	muli	zero,zero,207
    32bc:	000033e4 	muli	zero,zero,207
    32c0:	00003e04 	movi	zero,248
    32c4:	00003e04 	movi	zero,248
    32c8:	00003e04 	movi	zero,248
    32cc:	00003e04 	movi	zero,248
    32d0:	00003e04 	movi	zero,248
    32d4:	00003e04 	movi	zero,248
    32d8:	00003e04 	movi	zero,248
    32dc:	00003e04 	movi	zero,248
    32e0:	00003e04 	movi	zero,248
    32e4:	00003e04 	movi	zero,248
    32e8:	000033e4 	muli	zero,zero,207
    32ec:	000033e4 	muli	zero,zero,207
    32f0:	000033e4 	muli	zero,zero,207
    32f4:	000033e4 	muli	zero,zero,207
    32f8:	000033e4 	muli	zero,zero,207
    32fc:	000033e4 	muli	zero,zero,207
    3300:	000033e4 	muli	zero,zero,207
    3304:	000033e4 	muli	zero,zero,207
    3308:	000033e4 	muli	zero,zero,207
    330c:	000033e4 	muli	zero,zero,207
    3310:	00004584 	movi	zero,278
    3314:	0000457c 	xorhi	zero,zero,277
    3318:	000033e4 	muli	zero,zero,207
    331c:	0000457c 	xorhi	zero,zero,277
    3320:	000033e4 	muli	zero,zero,207
    3324:	000033e4 	muli	zero,zero,207
    3328:	000033e4 	muli	zero,zero,207
    332c:	000033e4 	muli	zero,zero,207
    3330:	00004614 	movui	zero,280
    3334:	000033e4 	muli	zero,zero,207
    3338:	000033e4 	muli	zero,zero,207
    333c:	000045cc 	andi	zero,zero,279
    3340:	000033e4 	muli	zero,zero,207
    3344:	000033e4 	muli	zero,zero,207
    3348:	000033e4 	muli	zero,zero,207
    334c:	000033e4 	muli	zero,zero,207
    3350:	000033e4 	muli	zero,zero,207
    3354:	000033e4 	muli	zero,zero,207
    3358:	000033e4 	muli	zero,zero,207
    335c:	000033e4 	muli	zero,zero,207
    3360:	00004410 	cmplti	zero,zero,272
    3364:	000033e4 	muli	zero,zero,207
    3368:	000033e4 	muli	zero,zero,207
    336c:	000045b0 	cmpltui	zero,zero,278
    3370:	000033e4 	muli	zero,zero,207
    3374:	000033e4 	muli	zero,zero,207
    3378:	000033e4 	muli	zero,zero,207
    337c:	000033e4 	muli	zero,zero,207
    3380:	000033e4 	muli	zero,zero,207
    3384:	000033e4 	muli	zero,zero,207
    3388:	000033e4 	muli	zero,zero,207
    338c:	000045a4 	muli	zero,zero,278
    3390:	00004588 	cmpgei	zero,zero,278
    3394:	0000457c 	xorhi	zero,zero,277
    3398:	0000457c 	xorhi	zero,zero,277
    339c:	0000457c 	xorhi	zero,zero,277
    33a0:	00004574 	movhi	zero,277
    33a4:	00004668 	cmpgeui	zero,zero,281
    33a8:	000033e4 	muli	zero,zero,207
    33ac:	000033e4 	muli	zero,zero,207
    33b0:	00004654 	movui	zero,281
    33b4:	000033e4 	muli	zero,zero,207
    33b8:	000045ec 	andhi	zero,zero,279
    33bc:	000045d0 	cmplti	zero,zero,279
    33c0:	00004624 	muli	zero,zero,280
    33c4:	000033e4 	muli	zero,zero,207
    33c8:	000033e4 	muli	zero,zero,207
    33cc:	0000461c 	xori	zero,zero,280
    33d0:	000033e4 	muli	zero,zero,207
    33d4:	00003954 	movui	zero,229
    33d8:	000033e4 	muli	zero,zero,207
    33dc:	000033e4 	muli	zero,zero,207
    33e0:	00004410 	cmplti	zero,zero,272
    33e4:	2987883a 	add	r3,r5,r6
    33e8:	18800003 	ldbu	r2,0(r3)
    33ec:	1080004c 	andi	r2,r2,1
    33f0:	1005003a 	cmpeq	r2,r2,zero
    33f4:	10002c26 	beq	r2,zero,34a8 <__svfscanf_r+0x450>
    33f8:	01000074 	movhi	r4,1
    33fc:	212cd504 	addi	r4,r4,-19628
    3400:	00800284 	movi	r2,10
    3404:	d900a015 	stw	r4,640(sp)
    3408:	054000c4 	movi	r21,3
    340c:	d880a115 	stw	r2,644(sp)
    3410:	80c00117 	ldw	r3,4(r16)
    3414:	00c14a0e 	bge	zero,r3,3940 <__svfscanf_r+0x8e8>
    3418:	9880100c 	andi	r2,r19,64
    341c:	10001326 	beq	r2,zero,346c <__svfscanf_r+0x414>
    3420:	00800104 	movi	r2,4
    3424:	157f1f36 	bltu	r2,r21,30a4 <__svfscanf_r+0x4c>
    3428:	ad45883a 	add	r2,r21,r21
    342c:	1085883a 	add	r2,r2,r2
    3430:	00c00034 	movhi	r3,0
    3434:	18cd1104 	addi	r3,r3,13380
    3438:	10c5883a 	add	r2,r2,r3
    343c:	11000017 	ldw	r4,0(r2)
    3440:	2000683a 	jmp	r4
    3444:	000034b0 	cmpltui	zero,zero,210
    3448:	000035bc 	xorhi	zero,zero,214
    344c:	00003630 	cmpltui	zero,zero,216
    3450:	0000391c 	xori	zero,zero,228
    3454:	00003768 	cmpgeui	zero,zero,221
    3458:	b009883a 	mov	r4,r22
    345c:	800b883a 	mov	r5,r16
    3460:	00096100 	call	9610 <__srefill_r>
    3464:	103f511e 	bne	r2,zero,31ac <__svfscanf_r+0x154>
    3468:	8c400044 	addi	r17,r17,1
    346c:	81400017 	ldw	r5,0(r16)
    3470:	90800017 	ldw	r2,0(r18)
    3474:	28c00003 	ldbu	r3,0(r5)
    3478:	1887883a 	add	r3,r3,r2
    347c:	19000003 	ldbu	r4,0(r3)
    3480:	2100020c 	andi	r4,r4,8
    3484:	203fe626 	beq	r4,zero,3420 <__svfscanf_r+0x3c8>
    3488:	80c00117 	ldw	r3,4(r16)
    348c:	18ffffc4 	addi	r3,r3,-1
    3490:	80c00115 	stw	r3,4(r16)
    3494:	00fff00e 	bge	zero,r3,3458 <__svfscanf_r+0x400>
    3498:	29800044 	addi	r6,r5,1
    349c:	8c400044 	addi	r17,r17,1
    34a0:	81800015 	stw	r6,0(r16)
    34a4:	003ff106 	br	346c <__svfscanf_r+0x414>
    34a8:	9cc00054 	ori	r19,r19,1
    34ac:	003fd206 	br	33f8 <__svfscanf_r+0x3a0>
    34b0:	d8c0a317 	ldw	r3,652(sp)
    34b4:	1800021e 	bne	r3,zero,34c0 <__svfscanf_r+0x468>
    34b8:	01000044 	movi	r4,1
    34bc:	d900a315 	stw	r4,652(sp)
    34c0:	9880004c 	andi	r2,r19,1
    34c4:	1005003a 	cmpeq	r2,r2,zero
    34c8:	1003d91e 	bne	r2,zero,4430 <__svfscanf_r+0x13d8>
    34cc:	9d40040c 	andi	r21,r19,16
    34d0:	a839003a 	cmpeq	fp,r21,zero
    34d4:	e0042526 	beq	fp,zero,456c <__svfscanf_r+0x1514>
    34d8:	d880a417 	ldw	r2,656(sp)
    34dc:	14c00017 	ldw	r19,0(r2)
    34e0:	10800104 	addi	r2,r2,4
    34e4:	d880a415 	stw	r2,656(sp)
    34e8:	d8c0a317 	ldw	r3,652(sp)
    34ec:	18041a26 	beq	r3,zero,4558 <__svfscanf_r+0x1500>
    34f0:	01000074 	movhi	r4,1
    34f4:	21110e04 	addi	r4,r4,17464
    34f8:	20800017 	ldw	r2,0(r4)
    34fc:	103f2b26 	beq	r2,zero,31ac <__svfscanf_r+0x154>
    3500:	d8804404 	addi	r2,sp,272
    3504:	0025883a 	mov	r18,zero
    3508:	d880a615 	stw	r2,664(sp)
    350c:	05ffffc4 	movi	r23,-1
    3510:	80800017 	ldw	r2,0(r16)
    3514:	80c00117 	ldw	r3,4(r16)
    3518:	d900a617 	ldw	r4,664(sp)
    351c:	12000003 	ldbu	r8,0(r2)
    3520:	18ffffc4 	addi	r3,r3,-1
    3524:	11800044 	addi	r6,r2,1
    3528:	248f883a 	add	r7,r4,r18
    352c:	80c00115 	stw	r3,4(r16)
    3530:	81800015 	stw	r6,0(r16)
    3534:	3a000005 	stb	r8,0(r7)
    3538:	d9000204 	addi	r4,sp,8
    353c:	000b883a 	mov	r5,zero
    3540:	01800204 	movi	r6,8
    3544:	0007f900 	call	7f90 <memset>
    3548:	d980a617 	ldw	r6,664(sp)
    354c:	94800044 	addi	r18,r18,1
    3550:	d8800204 	addi	r2,sp,8
    3554:	b009883a 	mov	r4,r22
    3558:	980b883a 	mov	r5,r19
    355c:	900f883a 	mov	r7,r18
    3560:	d8800015 	stw	r2,0(sp)
    3564:	0007c2c0 	call	7c2c <_mbrtowc_r>
    3568:	1007883a 	mov	r3,r2
    356c:	15ff0f26 	beq	r2,r23,31ac <__svfscanf_r+0x154>
    3570:	1003f11e 	bne	r2,zero,4538 <__svfscanf_r+0x14e0>
    3574:	a800011e 	bne	r21,zero,357c <__svfscanf_r+0x524>
    3578:	98000015 	stw	zero,0(r19)
    357c:	d8c0a317 	ldw	r3,652(sp)
    3580:	8ca3883a 	add	r17,r17,r18
    3584:	18ffffc4 	addi	r3,r3,-1
    3588:	d8c0a315 	stw	r3,652(sp)
    358c:	e0000126 	beq	fp,zero,3594 <__svfscanf_r+0x53c>
    3590:	9cc00104 	addi	r19,r19,4
    3594:	0025883a 	mov	r18,zero
    3598:	80c00117 	ldw	r3,4(r16)
    359c:	00c3e90e 	bge	zero,r3,4544 <__svfscanf_r+0x14ec>
    35a0:	d900a317 	ldw	r4,652(sp)
    35a4:	2003ec26 	beq	r4,zero,4558 <__svfscanf_r+0x1500>
    35a8:	00c00074 	movhi	r3,1
    35ac:	18d10e04 	addi	r3,r3,17464
    35b0:	18800017 	ldw	r2,0(r3)
    35b4:	90bfd61e 	bne	r18,r2,3510 <__svfscanf_r+0x4b8>
    35b8:	003efc06 	br	31ac <__svfscanf_r+0x154>
    35bc:	d880a317 	ldw	r2,652(sp)
    35c0:	1000021e 	bne	r2,zero,35cc <__svfscanf_r+0x574>
    35c4:	00ffffc4 	movi	r3,-1
    35c8:	d8c0a315 	stw	r3,652(sp)
    35cc:	9880040c 	andi	r2,r19,16
    35d0:	10036526 	beq	r2,zero,4368 <__svfscanf_r+0x1310>
    35d4:	0027883a 	mov	r19,zero
    35d8:	dd400404 	addi	r21,sp,16
    35dc:	81000017 	ldw	r4,0(r16)
    35e0:	20800003 	ldbu	r2,0(r4)
    35e4:	a885883a 	add	r2,r21,r2
    35e8:	10c00007 	ldb	r3,0(r2)
    35ec:	1803be26 	beq	r3,zero,44e8 <__svfscanf_r+0x1490>
    35f0:	80c00117 	ldw	r3,4(r16)
    35f4:	21800044 	addi	r6,r4,1
    35f8:	d900a317 	ldw	r4,652(sp)
    35fc:	18ffffc4 	addi	r3,r3,-1
    3600:	9cc00044 	addi	r19,r19,1
    3604:	81800015 	stw	r6,0(r16)
    3608:	80c00115 	stw	r3,4(r16)
    360c:	24c3b626 	beq	r4,r19,44e8 <__svfscanf_r+0x1490>
    3610:	00fff216 	blt	zero,r3,35dc <__svfscanf_r+0x584>
    3614:	b009883a 	mov	r4,r22
    3618:	800b883a 	mov	r5,r16
    361c:	00096100 	call	9610 <__srefill_r>
    3620:	103fee26 	beq	r2,zero,35dc <__svfscanf_r+0x584>
    3624:	983ee126 	beq	r19,zero,31ac <__svfscanf_r+0x154>
    3628:	8ce3883a 	add	r17,r17,r19
    362c:	003e9d06 	br	30a4 <__svfscanf_r+0x4c>
    3630:	d900a317 	ldw	r4,652(sp)
    3634:	2000021e 	bne	r4,zero,3640 <__svfscanf_r+0x5e8>
    3638:	00bfffc4 	movi	r2,-1
    363c:	d880a315 	stw	r2,652(sp)
    3640:	9880004c 	andi	r2,r19,1
    3644:	1005003a 	cmpeq	r2,r2,zero
    3648:	1001f41e 	bne	r2,zero,3e1c <__svfscanf_r+0xdc4>
    364c:	9dc0040c 	andi	r23,r19,16
    3650:	b807003a 	cmpeq	r3,r23,zero
    3654:	d8c0a515 	stw	r3,660(sp)
    3658:	1803b21e 	bne	r3,zero,4524 <__svfscanf_r+0x14cc>
    365c:	dd400104 	addi	r21,sp,4
    3660:	0027883a 	mov	r19,zero
    3664:	073fffc4 	movi	fp,-1
    3668:	81400017 	ldw	r5,0(r16)
    366c:	90800017 	ldw	r2,0(r18)
    3670:	29c00003 	ldbu	r7,0(r5)
    3674:	38c03fcc 	andi	r3,r7,255
    3678:	1887883a 	add	r3,r3,r2
    367c:	19000003 	ldbu	r4,0(r3)
    3680:	2100020c 	andi	r4,r4,8
    3684:	2000321e 	bne	r4,zero,3750 <__svfscanf_r+0x6f8>
    3688:	d8c0a317 	ldw	r3,652(sp)
    368c:	18003026 	beq	r3,zero,3750 <__svfscanf_r+0x6f8>
    3690:	00800074 	movhi	r2,1
    3694:	10910e04 	addi	r2,r2,17464
    3698:	10c00017 	ldw	r3,0(r2)
    369c:	98fec326 	beq	r19,r3,31ac <__svfscanf_r+0x154>
    36a0:	d8c04404 	addi	r3,sp,272
    36a4:	80800117 	ldw	r2,4(r16)
    36a8:	d8c0a615 	stw	r3,664(sp)
    36ac:	d900a617 	ldw	r4,664(sp)
    36b0:	10ffffc4 	addi	r3,r2,-1
    36b4:	29800044 	addi	r6,r5,1
    36b8:	80c00115 	stw	r3,4(r16)
    36bc:	24c5883a 	add	r2,r4,r19
    36c0:	81800015 	stw	r6,0(r16)
    36c4:	d9000204 	addi	r4,sp,8
    36c8:	000b883a 	mov	r5,zero
    36cc:	01800204 	movi	r6,8
    36d0:	11c00005 	stb	r7,0(r2)
    36d4:	0007f900 	call	7f90 <memset>
    36d8:	d980a617 	ldw	r6,664(sp)
    36dc:	9cc00044 	addi	r19,r19,1
    36e0:	d8800204 	addi	r2,sp,8
    36e4:	b009883a 	mov	r4,r22
    36e8:	a80b883a 	mov	r5,r21
    36ec:	980f883a 	mov	r7,r19
    36f0:	d8800015 	stw	r2,0(sp)
    36f4:	0007c2c0 	call	7c2c <_mbrtowc_r>
    36f8:	1007883a 	mov	r3,r2
    36fc:	173eab26 	beq	r2,fp,31ac <__svfscanf_r+0x154>
    3700:	1003851e 	bne	r2,zero,4518 <__svfscanf_r+0x14c0>
    3704:	a8000015 	stw	zero,0(r21)
    3708:	a9000017 	ldw	r4,0(r21)
    370c:	00072680 	call	7268 <iswspace>
    3710:	1003781e 	bne	r2,zero,44f4 <__svfscanf_r+0x149c>
    3714:	d900a317 	ldw	r4,652(sp)
    3718:	d880a517 	ldw	r2,660(sp)
    371c:	8ce3883a 	add	r17,r17,r19
    3720:	213fffc4 	addi	r4,r4,-1
    3724:	d900a315 	stw	r4,652(sp)
    3728:	10000126 	beq	r2,zero,3730 <__svfscanf_r+0x6d8>
    372c:	ad400104 	addi	r21,r21,4
    3730:	0027883a 	mov	r19,zero
    3734:	80c00117 	ldw	r3,4(r16)
    3738:	00ffcb16 	blt	zero,r3,3668 <__svfscanf_r+0x610>
    373c:	b009883a 	mov	r4,r22
    3740:	800b883a 	mov	r5,r16
    3744:	00096100 	call	9610 <__srefill_r>
    3748:	103fc726 	beq	r2,zero,3668 <__svfscanf_r+0x610>
    374c:	983e971e 	bne	r19,zero,31ac <__svfscanf_r+0x154>
    3750:	b83e541e 	bne	r23,zero,30a4 <__svfscanf_r+0x4c>
    3754:	d900a217 	ldw	r4,648(sp)
    3758:	a8000015 	stw	zero,0(r21)
    375c:	21000044 	addi	r4,r4,1
    3760:	d900a215 	stw	r4,648(sp)
    3764:	003e4f06 	br	30a4 <__svfscanf_r+0x4c>
    3768:	d900a317 	ldw	r4,652(sp)
    376c:	00805704 	movi	r2,348
    3770:	20ffffc4 	addi	r3,r4,-1
    3774:	10c1ed2e 	bgeu	r2,r3,3f2c <__svfscanf_r+0xed4>
    3778:	00805744 	movi	r2,349
    377c:	21bfa8c4 	addi	r6,r4,-349
    3780:	9d41e014 	ori	r21,r19,1920
    3784:	d880a315 	stw	r2,652(sp)
    3788:	d8c04404 	addi	r3,sp,272
    378c:	d8c0a615 	stw	r3,664(sp)
    3790:	182f883a 	mov	r23,r3
    3794:	d8009f15 	stw	zero,636(sp)
    3798:	d8009e15 	stw	zero,632(sp)
    379c:	d8009d15 	stw	zero,628(sp)
    37a0:	d8009c15 	stw	zero,624(sp)
    37a4:	0039883a 	mov	fp,zero
    37a8:	0025883a 	mov	r18,zero
    37ac:	80800017 	ldw	r2,0(r16)
    37b0:	11400003 	ldbu	r5,0(r2)
    37b4:	00801384 	movi	r2,78
    37b8:	28fff544 	addi	r3,r5,-43
    37bc:	18c03fcc 	andi	r3,r3,255
    37c0:	10c07d36 	bltu	r2,r3,39b8 <__svfscanf_r+0x960>
    37c4:	18c5883a 	add	r2,r3,r3
    37c8:	1085883a 	add	r2,r2,r2
    37cc:	00c00034 	movhi	r3,0
    37d0:	18cdf804 	addi	r3,r3,14304
    37d4:	10c5883a 	add	r2,r2,r3
    37d8:	11000017 	ldw	r4,0(r2)
    37dc:	2000683a 	jmp	r4
    37e0:	00003970 	cmpltui	zero,zero,229
    37e4:	000039b8 	rdprs	zero,zero,230
    37e8:	00003970 	cmpltui	zero,zero,229
    37ec:	00003b04 	movi	zero,236
    37f0:	000039b8 	rdprs	zero,zero,230
    37f4:	00003b3c 	xorhi	zero,zero,236
    37f8:	00003b70 	cmpltui	zero,zero,237
    37fc:	00003b70 	cmpltui	zero,zero,237
    3800:	00003b70 	cmpltui	zero,zero,237
    3804:	00003b70 	cmpltui	zero,zero,237
    3808:	00003b70 	cmpltui	zero,zero,237
    380c:	00003b70 	cmpltui	zero,zero,237
    3810:	00003b70 	cmpltui	zero,zero,237
    3814:	00003b70 	cmpltui	zero,zero,237
    3818:	00003b70 	cmpltui	zero,zero,237
    381c:	000039b8 	rdprs	zero,zero,230
    3820:	000039b8 	rdprs	zero,zero,230
    3824:	000039b8 	rdprs	zero,zero,230
    3828:	000039b8 	rdprs	zero,zero,230
    382c:	000039b8 	rdprs	zero,zero,230
    3830:	000039b8 	rdprs	zero,zero,230
    3834:	000039b8 	rdprs	zero,zero,230
    3838:	00003b90 	cmplti	zero,zero,238
    383c:	000039b8 	rdprs	zero,zero,230
    3840:	000039b8 	rdprs	zero,zero,230
    3844:	000039b8 	rdprs	zero,zero,230
    3848:	00003ba0 	cmpeqi	zero,zero,238
    384c:	00003c3c 	xorhi	zero,zero,240
    3850:	000039b8 	rdprs	zero,zero,230
    3854:	000039b8 	rdprs	zero,zero,230
    3858:	00003c58 	cmpnei	zero,zero,241
    385c:	000039b8 	rdprs	zero,zero,230
    3860:	000039b8 	rdprs	zero,zero,230
    3864:	000039b8 	rdprs	zero,zero,230
    3868:	000039b8 	rdprs	zero,zero,230
    386c:	00003c84 	movi	zero,242
    3870:	000039b8 	rdprs	zero,zero,230
    3874:	000039b8 	rdprs	zero,zero,230
    3878:	000039b8 	rdprs	zero,zero,230
    387c:	000039b8 	rdprs	zero,zero,230
    3880:	000039b8 	rdprs	zero,zero,230
    3884:	00003cd8 	cmpnei	zero,zero,243
    3888:	000039b8 	rdprs	zero,zero,230
    388c:	000039b8 	rdprs	zero,zero,230
    3890:	000039b8 	rdprs	zero,zero,230
    3894:	000039b8 	rdprs	zero,zero,230
    3898:	00003de8 	cmpgeui	zero,zero,247
    389c:	000039b8 	rdprs	zero,zero,230
    38a0:	000039b8 	rdprs	zero,zero,230
    38a4:	000039b8 	rdprs	zero,zero,230
    38a8:	000039b8 	rdprs	zero,zero,230
    38ac:	000039b8 	rdprs	zero,zero,230
    38b0:	000039b8 	rdprs	zero,zero,230
    38b4:	000039b8 	rdprs	zero,zero,230
    38b8:	00003b90 	cmplti	zero,zero,238
    38bc:	000039b8 	rdprs	zero,zero,230
    38c0:	000039b8 	rdprs	zero,zero,230
    38c4:	000039b8 	rdprs	zero,zero,230
    38c8:	00003ba0 	cmpeqi	zero,zero,238
    38cc:	00003c3c 	xorhi	zero,zero,240
    38d0:	000039b8 	rdprs	zero,zero,230
    38d4:	000039b8 	rdprs	zero,zero,230
    38d8:	00003c58 	cmpnei	zero,zero,241
    38dc:	000039b8 	rdprs	zero,zero,230
    38e0:	000039b8 	rdprs	zero,zero,230
    38e4:	000039b8 	rdprs	zero,zero,230
    38e8:	000039b8 	rdprs	zero,zero,230
    38ec:	00003c84 	movi	zero,242
    38f0:	000039b8 	rdprs	zero,zero,230
    38f4:	000039b8 	rdprs	zero,zero,230
    38f8:	000039b8 	rdprs	zero,zero,230
    38fc:	000039b8 	rdprs	zero,zero,230
    3900:	000039b8 	rdprs	zero,zero,230
    3904:	00003cd8 	cmpnei	zero,zero,243
    3908:	000039b8 	rdprs	zero,zero,230
    390c:	000039b8 	rdprs	zero,zero,230
    3910:	000039b8 	rdprs	zero,zero,230
    3914:	000039b8 	rdprs	zero,zero,230
    3918:	00003de8 	cmpgeui	zero,zero,247
    391c:	d900a317 	ldw	r4,652(sp)
    3920:	00805704 	movi	r2,348
    3924:	20ffffc4 	addi	r3,r4,-1
    3928:	10c18c2e 	bgeu	r2,r3,3f5c <__svfscanf_r+0xf04>
    392c:	00805744 	movi	r2,349
    3930:	257fa8c4 	addi	r21,r4,-349
    3934:	9c836014 	ori	r18,r19,3456
    3938:	d880a315 	stw	r2,652(sp)
    393c:	0001a106 	br	3fc4 <__svfscanf_r+0xf6c>
    3940:	b009883a 	mov	r4,r22
    3944:	800b883a 	mov	r5,r16
    3948:	00096100 	call	9610 <__srefill_r>
    394c:	103eb226 	beq	r2,zero,3418 <__svfscanf_r+0x3c0>
    3950:	003e1606 	br	31ac <__svfscanf_r+0x154>
    3954:	01000284 	movi	r4,10
    3958:	00800074 	movhi	r2,1
    395c:	10ae3504 	addi	r2,r2,-18220
    3960:	054000c4 	movi	r21,3
    3964:	d900a115 	stw	r4,644(sp)
    3968:	d880a015 	stw	r2,640(sp)
    396c:	003ea806 	br	3410 <__svfscanf_r+0x3b8>
    3970:	a880200c 	andi	r2,r21,128
    3974:	10001026 	beq	r2,zero,39b8 <__svfscanf_r+0x960>
    3978:	00bfdfc4 	movi	r2,-129
    397c:	a8aa703a 	and	r21,r21,r2
    3980:	b9400005 	stb	r5,0(r23)
    3984:	bdc00044 	addi	r23,r23,1
    3988:	80c00117 	ldw	r3,4(r16)
    398c:	8c400044 	addi	r17,r17,1
    3990:	18bfffc4 	addi	r2,r3,-1
    3994:	80800115 	stw	r2,4(r16)
    3998:	0080610e 	bge	zero,r2,3b20 <__svfscanf_r+0xac8>
    399c:	80800017 	ldw	r2,0(r16)
    39a0:	10800044 	addi	r2,r2,1
    39a4:	80800015 	stw	r2,0(r16)
    39a8:	d880a317 	ldw	r2,652(sp)
    39ac:	10bfffc4 	addi	r2,r2,-1
    39b0:	d880a315 	stw	r2,652(sp)
    39b4:	103f7d1e 	bne	r2,zero,37ac <__svfscanf_r+0x754>
    39b8:	d8c09e17 	ldw	r3,632(sp)
    39bc:	18000226 	beq	r3,zero,39c8 <__svfscanf_r+0x970>
    39c0:	00bfbfc4 	movi	r2,-257
    39c4:	a8aa703a 	and	r21,r21,r2
    39c8:	90ffffc4 	addi	r3,r18,-1
    39cc:	00800044 	movi	r2,1
    39d0:	10c0cd2e 	bgeu	r2,r3,3d08 <__svfscanf_r+0xcb0>
    39d4:	e1003fcc 	andi	r4,fp,255
    39d8:	2100201c 	xori	r4,r4,128
    39dc:	213fe004 	addi	r4,r4,-128
    39e0:	20ffffc4 	addi	r3,r4,-1
    39e4:	00800184 	movi	r2,6
    39e8:	10c01736 	bltu	r2,r3,3a48 <__svfscanf_r+0x9f0>
    39ec:	00c00084 	movi	r3,2
    39f0:	1900880e 	bge	r3,r4,3c14 <__svfscanf_r+0xbbc>
    39f4:	008000c4 	movi	r2,3
    39f8:	1100130e 	bge	r2,r4,3a48 <__svfscanf_r+0x9f0>
    39fc:	e4ffffc4 	addi	r19,fp,-1
    3a00:	b825883a 	mov	r18,r23
    3a04:	94bfffc4 	addi	r18,r18,-1
    3a08:	91400007 	ldb	r5,0(r18)
    3a0c:	b009883a 	mov	r4,r22
    3a10:	800d883a 	mov	r6,r16
    3a14:	000bef40 	call	bef4 <_ungetc_r>
    3a18:	9cffffc4 	addi	r19,r19,-1
    3a1c:	98c03fcc 	andi	r3,r19,255
    3a20:	18c0201c 	xori	r3,r3,128
    3a24:	18ffe004 	addi	r3,r3,-128
    3a28:	00800084 	movi	r2,2
    3a2c:	18bff51e 	bne	r3,r2,3a04 <__svfscanf_r+0x9ac>
    3a30:	e0bfff04 	addi	r2,fp,-4
    3a34:	10803fcc 	andi	r2,r2,255
    3a38:	b887c83a 	sub	r3,r23,r2
    3a3c:	8885c83a 	sub	r2,r17,r2
    3a40:	147fffc4 	addi	r17,r2,-1
    3a44:	1dffffc4 	addi	r23,r3,-1
    3a48:	a880400c 	andi	r2,r21,256
    3a4c:	10001226 	beq	r2,zero,3a98 <__svfscanf_r+0xa40>
    3a50:	a881000c 	andi	r2,r21,1024
    3a54:	1000651e 	bne	r2,zero,3bec <__svfscanf_r+0xb94>
    3a58:	bdffffc4 	addi	r23,r23,-1
    3a5c:	b9400007 	ldb	r5,0(r23)
    3a60:	00801944 	movi	r2,101
    3a64:	8c7fffc4 	addi	r17,r17,-1
    3a68:	28800826 	beq	r5,r2,3a8c <__svfscanf_r+0xa34>
    3a6c:	00801144 	movi	r2,69
    3a70:	28800626 	beq	r5,r2,3a8c <__svfscanf_r+0xa34>
    3a74:	bdffffc4 	addi	r23,r23,-1
    3a78:	b009883a 	mov	r4,r22
    3a7c:	800d883a 	mov	r6,r16
    3a80:	000bef40 	call	bef4 <_ungetc_r>
    3a84:	b9400007 	ldb	r5,0(r23)
    3a88:	8c7fffc4 	addi	r17,r17,-1
    3a8c:	b009883a 	mov	r4,r22
    3a90:	800d883a 	mov	r6,r16
    3a94:	000bef40 	call	bef4 <_ungetc_r>
    3a98:	a880040c 	andi	r2,r21,16
    3a9c:	103d811e 	bne	r2,zero,30a4 <__svfscanf_r+0x4c>
    3aa0:	a8c1800c 	andi	r3,r21,1536
    3aa4:	00810004 	movi	r2,1024
    3aa8:	b8000005 	stb	zero,0(r23)
    3aac:	1880bb26 	beq	r3,r2,3d9c <__svfscanf_r+0xd44>
    3ab0:	d8809d17 	ldw	r2,628(sp)
    3ab4:	1000a61e 	bne	r2,zero,3d50 <__svfscanf_r+0xcf8>
    3ab8:	d940a617 	ldw	r5,664(sp)
    3abc:	b009883a 	mov	r4,r22
    3ac0:	000d883a 	mov	r6,zero
    3ac4:	0009d300 	call	9d30 <_strtod_r>
    3ac8:	a900004c 	andi	r4,r21,1
    3acc:	2009003a 	cmpeq	r4,r4,zero
    3ad0:	1025883a 	mov	r18,r2
    3ad4:	1827883a 	mov	r19,r3
    3ad8:	2000951e 	bne	r4,zero,3d30 <__svfscanf_r+0xcd8>
    3adc:	d8c0a417 	ldw	r3,656(sp)
    3ae0:	18800017 	ldw	r2,0(r3)
    3ae4:	1d400104 	addi	r21,r3,4
    3ae8:	14c00115 	stw	r19,4(r2)
    3aec:	14800015 	stw	r18,0(r2)
    3af0:	d8c0a217 	ldw	r3,648(sp)
    3af4:	dd40a415 	stw	r21,656(sp)
    3af8:	18c00044 	addi	r3,r3,1
    3afc:	d8c0a215 	stw	r3,648(sp)
    3b00:	003d6806 	br	30a4 <__svfscanf_r+0x4c>
    3b04:	a880800c 	andi	r2,r21,512
    3b08:	103fab26 	beq	r2,zero,39b8 <__svfscanf_r+0x960>
    3b0c:	d9009e17 	ldw	r4,632(sp)
    3b10:	00bf5fc4 	movi	r2,-641
    3b14:	a8aa703a 	and	r21,r21,r2
    3b18:	d9009f15 	stw	r4,636(sp)
    3b1c:	003f9806 	br	3980 <__svfscanf_r+0x928>
    3b20:	b009883a 	mov	r4,r22
    3b24:	800b883a 	mov	r5,r16
    3b28:	d980a715 	stw	r6,668(sp)
    3b2c:	00096100 	call	9610 <__srefill_r>
    3b30:	d980a717 	ldw	r6,668(sp)
    3b34:	103f9c26 	beq	r2,zero,39a8 <__svfscanf_r+0x950>
    3b38:	003f9f06 	br	39b8 <__svfscanf_r+0x960>
    3b3c:	a880400c 	andi	r2,r21,256
    3b40:	10000b26 	beq	r2,zero,3b70 <__svfscanf_r+0xb18>
    3b44:	00bfdfc4 	movi	r2,-129
    3b48:	a8aa703a 	and	r21,r21,r2
    3b4c:	d8809e17 	ldw	r2,632(sp)
    3b50:	10800044 	addi	r2,r2,1
    3b54:	d8809e15 	stw	r2,632(sp)
    3b58:	303f8b26 	beq	r6,zero,3988 <__svfscanf_r+0x930>
    3b5c:	d8c0a317 	ldw	r3,652(sp)
    3b60:	31bfffc4 	addi	r6,r6,-1
    3b64:	18c00044 	addi	r3,r3,1
    3b68:	d8c0a315 	stw	r3,652(sp)
    3b6c:	003f8606 	br	3988 <__svfscanf_r+0x930>
    3b70:	e0803fcc 	andi	r2,fp,255
    3b74:	1080201c 	xori	r2,r2,128
    3b78:	10bfe004 	addi	r2,r2,-128
    3b7c:	9085883a 	add	r2,r18,r2
    3b80:	103f8d1e 	bne	r2,zero,39b8 <__svfscanf_r+0x960>
    3b84:	00bf9fc4 	movi	r2,-385
    3b88:	a8aa703a 	and	r21,r21,r2
    3b8c:	003f7c06 	br	3980 <__svfscanf_r+0x928>
    3b90:	00800044 	movi	r2,1
    3b94:	90bf881e 	bne	r18,r2,39b8 <__svfscanf_r+0x960>
    3b98:	04800084 	movi	r18,2
    3b9c:	003f7806 	br	3980 <__svfscanf_r+0x928>
    3ba0:	a8c1400c 	andi	r3,r21,1280
    3ba4:	00810004 	movi	r2,1024
    3ba8:	18800426 	beq	r3,r2,3bbc <__svfscanf_r+0xb64>
    3bac:	a884703a 	and	r2,r21,r2
    3bb0:	103f8126 	beq	r2,zero,39b8 <__svfscanf_r+0x960>
    3bb4:	d8809e17 	ldw	r2,632(sp)
    3bb8:	103f8326 	beq	r2,zero,39c8 <__svfscanf_r+0x970>
    3bbc:	a880800c 	andi	r2,r21,512
    3bc0:	1000051e 	bne	r2,zero,3bd8 <__svfscanf_r+0xb80>
    3bc4:	d8c09e17 	ldw	r3,632(sp)
    3bc8:	d9009f17 	ldw	r4,636(sp)
    3bcc:	ddc09c15 	stw	r23,624(sp)
    3bd0:	1907c83a 	sub	r3,r3,r4
    3bd4:	d8c09d15 	stw	r3,628(sp)
    3bd8:	00be7fc4 	movi	r2,-1537
    3bdc:	a884703a 	and	r2,r21,r2
    3be0:	15406014 	ori	r21,r2,384
    3be4:	d8009e15 	stw	zero,632(sp)
    3be8:	003f6506 	br	3980 <__svfscanf_r+0x928>
    3bec:	d900a617 	ldw	r4,664(sp)
    3bf0:	25fd4e2e 	bgeu	r4,r23,312c <__svfscanf_r+0xd4>
    3bf4:	bdffffc4 	addi	r23,r23,-1
    3bf8:	b9400007 	ldb	r5,0(r23)
    3bfc:	b009883a 	mov	r4,r22
    3c00:	800d883a 	mov	r6,r16
    3c04:	000bef40 	call	bef4 <_ungetc_r>
    3c08:	d880a617 	ldw	r2,664(sp)
    3c0c:	15fff936 	bltu	r2,r23,3bf4 <__svfscanf_r+0xb9c>
    3c10:	003d4606 	br	312c <__svfscanf_r+0xd4>
    3c14:	d900a617 	ldw	r4,664(sp)
    3c18:	25fd442e 	bgeu	r4,r23,312c <__svfscanf_r+0xd4>
    3c1c:	bdffffc4 	addi	r23,r23,-1
    3c20:	b9400007 	ldb	r5,0(r23)
    3c24:	b009883a 	mov	r4,r22
    3c28:	800d883a 	mov	r6,r16
    3c2c:	000bef40 	call	bef4 <_ungetc_r>
    3c30:	d8c0a617 	ldw	r3,664(sp)
    3c34:	1dfff936 	bltu	r3,r23,3c1c <__svfscanf_r+0xbc4>
    3c38:	003d3c06 	br	312c <__svfscanf_r+0xd4>
    3c3c:	e0c03fcc 	andi	r3,fp,255
    3c40:	18c0201c 	xori	r3,r3,128
    3c44:	18ffe004 	addi	r3,r3,-128
    3c48:	00800084 	movi	r2,2
    3c4c:	18bf5a1e 	bne	r3,r2,39b8 <__svfscanf_r+0x960>
    3c50:	070000c4 	movi	fp,3
    3c54:	003f4a06 	br	3980 <__svfscanf_r+0x928>
    3c58:	e0c03fcc 	andi	r3,fp,255
    3c5c:	18c0201c 	xori	r3,r3,128
    3c60:	18ffe004 	addi	r3,r3,-128
    3c64:	1800231e 	bne	r3,zero,3cf4 <__svfscanf_r+0xc9c>
    3c68:	a8c1c00c 	andi	r3,r21,1792
    3c6c:	0081c004 	movi	r2,1792
    3c70:	18bf511e 	bne	r3,r2,39b8 <__svfscanf_r+0x960>
    3c74:	00be1fc4 	movi	r2,-1921
    3c78:	a8aa703a 	and	r21,r21,r2
    3c7c:	07000044 	movi	fp,1
    3c80:	003f3f06 	br	3980 <__svfscanf_r+0x928>
    3c84:	9000101e 	bne	r18,zero,3cc8 <__svfscanf_r+0xc70>
    3c88:	a8c1c00c 	andi	r3,r21,1792
    3c8c:	0081c004 	movi	r2,1792
    3c90:	18800926 	beq	r3,r2,3cb8 <__svfscanf_r+0xc60>
    3c94:	e0c03fcc 	andi	r3,fp,255
    3c98:	18c0201c 	xori	r3,r3,128
    3c9c:	18ffe004 	addi	r3,r3,-128
    3ca0:	00800044 	movi	r2,1
    3ca4:	18800226 	beq	r3,r2,3cb0 <__svfscanf_r+0xc58>
    3ca8:	00800104 	movi	r2,4
    3cac:	18bf421e 	bne	r3,r2,39b8 <__svfscanf_r+0x960>
    3cb0:	e7000044 	addi	fp,fp,1
    3cb4:	003f3206 	br	3980 <__svfscanf_r+0x928>
    3cb8:	00be1fc4 	movi	r2,-1921
    3cbc:	a8aa703a 	and	r21,r21,r2
    3cc0:	04800044 	movi	r18,1
    3cc4:	003f2e06 	br	3980 <__svfscanf_r+0x928>
    3cc8:	00800084 	movi	r2,2
    3ccc:	90bff11e 	bne	r18,r2,3c94 <__svfscanf_r+0xc3c>
    3cd0:	048000c4 	movi	r18,3
    3cd4:	003f2a06 	br	3980 <__svfscanf_r+0x928>
    3cd8:	e0c03fcc 	andi	r3,fp,255
    3cdc:	18c0201c 	xori	r3,r3,128
    3ce0:	18ffe004 	addi	r3,r3,-128
    3ce4:	00800184 	movi	r2,6
    3ce8:	18bf331e 	bne	r3,r2,39b8 <__svfscanf_r+0x960>
    3cec:	070001c4 	movi	fp,7
    3cf0:	003f2306 	br	3980 <__svfscanf_r+0x928>
    3cf4:	008000c4 	movi	r2,3
    3cf8:	18bfed26 	beq	r3,r2,3cb0 <__svfscanf_r+0xc58>
    3cfc:	00800144 	movi	r2,5
    3d00:	18bfeb26 	beq	r3,r2,3cb0 <__svfscanf_r+0xc58>
    3d04:	003f2c06 	br	39b8 <__svfscanf_r+0x960>
    3d08:	d900a617 	ldw	r4,664(sp)
    3d0c:	25fd072e 	bgeu	r4,r23,312c <__svfscanf_r+0xd4>
    3d10:	bdffffc4 	addi	r23,r23,-1
    3d14:	b9400007 	ldb	r5,0(r23)
    3d18:	b009883a 	mov	r4,r22
    3d1c:	800d883a 	mov	r6,r16
    3d20:	000bef40 	call	bef4 <_ungetc_r>
    3d24:	d880a617 	ldw	r2,664(sp)
    3d28:	15fff936 	bltu	r2,r23,3d10 <__svfscanf_r+0xcb8>
    3d2c:	003cff06 	br	312c <__svfscanf_r+0xd4>
    3d30:	a880008c 	andi	r2,r21,2
    3d34:	10002026 	beq	r2,zero,3db8 <__svfscanf_r+0xd60>
    3d38:	d900a417 	ldw	r4,656(sp)
    3d3c:	20800017 	ldw	r2,0(r4)
    3d40:	25400104 	addi	r21,r4,4
    3d44:	10c00115 	stw	r3,4(r2)
    3d48:	14800015 	stw	r18,0(r2)
    3d4c:	003f6806 	br	3af0 <__svfscanf_r+0xa98>
    3d50:	d8c09c17 	ldw	r3,624(sp)
    3d54:	b009883a 	mov	r4,r22
    3d58:	000d883a 	mov	r6,zero
    3d5c:	19400044 	addi	r5,r3,1
    3d60:	01c00284 	movi	r7,10
    3d64:	000b3540 	call	b354 <_strtol_r>
    3d68:	d9009d17 	ldw	r4,628(sp)
    3d6c:	110dc83a 	sub	r6,r2,r4
    3d70:	d8c0a617 	ldw	r3,664(sp)
    3d74:	d9009c17 	ldw	r4,624(sp)
    3d78:	188054c4 	addi	r2,r3,339
    3d7c:	20800236 	bltu	r4,r2,3d88 <__svfscanf_r+0xd30>
    3d80:	18805484 	addi	r2,r3,338
    3d84:	d8809c15 	stw	r2,624(sp)
    3d88:	d9009c17 	ldw	r4,624(sp)
    3d8c:	01400074 	movhi	r5,1
    3d90:	2948bd04 	addi	r5,r5,8948
    3d94:	00099980 	call	9998 <sprintf>
    3d98:	003f4706 	br	3ab8 <__svfscanf_r+0xa60>
    3d9c:	d8c09e17 	ldw	r3,632(sp)
    3da0:	d9009f17 	ldw	r4,636(sp)
    3da4:	1905c83a 	sub	r2,r3,r4
    3da8:	103f4326 	beq	r2,zero,3ab8 <__svfscanf_r+0xa60>
    3dac:	008dc83a 	sub	r6,zero,r2
    3db0:	ddc09c15 	stw	r23,624(sp)
    3db4:	003fee06 	br	3d70 <__svfscanf_r+0xd18>
    3db8:	d880a417 	ldw	r2,656(sp)
    3dbc:	9009883a 	mov	r4,r18
    3dc0:	180b883a 	mov	r5,r3
    3dc4:	15c00017 	ldw	r23,0(r2)
    3dc8:	15400104 	addi	r21,r2,4
    3dcc:	00098300 	call	9830 <__isnand>
    3dd0:	10021c1e 	bne	r2,zero,4644 <__svfscanf_r+0x15ec>
    3dd4:	980b883a 	mov	r5,r19
    3dd8:	9009883a 	mov	r4,r18
    3ddc:	000eea00 	call	eea0 <__truncdfsf2>
    3de0:	b8800015 	stw	r2,0(r23)
    3de4:	003f4206 	br	3af0 <__svfscanf_r+0xa98>
    3de8:	e0c03fcc 	andi	r3,fp,255
    3dec:	18c0201c 	xori	r3,r3,128
    3df0:	18ffe004 	addi	r3,r3,-128
    3df4:	008001c4 	movi	r2,7
    3df8:	18beef1e 	bne	r3,r2,39b8 <__svfscanf_r+0x960>
    3dfc:	07000204 	movi	fp,8
    3e00:	003edf06 	br	3980 <__svfscanf_r+0x928>
    3e04:	d900a317 	ldw	r4,652(sp)
    3e08:	208002a4 	muli	r2,r4,10
    3e0c:	1145883a 	add	r2,r2,r5
    3e10:	10bff404 	addi	r2,r2,-48
    3e14:	d880a315 	stw	r2,652(sp)
    3e18:	003ceb06 	br	31c8 <__svfscanf_r+0x170>
    3e1c:	9880040c 	andi	r2,r19,16
    3e20:	10001426 	beq	r2,zero,3e74 <__svfscanf_r+0xe1c>
    3e24:	0027883a 	mov	r19,zero
    3e28:	00000906 	br	3e50 <__svfscanf_r+0xdf8>
    3e2c:	80c00117 	ldw	r3,4(r16)
    3e30:	d880a317 	ldw	r2,652(sp)
    3e34:	29800044 	addi	r6,r5,1
    3e38:	18ffffc4 	addi	r3,r3,-1
    3e3c:	9cc00044 	addi	r19,r19,1
    3e40:	81800015 	stw	r6,0(r16)
    3e44:	80c00115 	stw	r3,4(r16)
    3e48:	14fdf726 	beq	r2,r19,3628 <__svfscanf_r+0x5d0>
    3e4c:	00c02c0e 	bge	zero,r3,3f00 <__svfscanf_r+0xea8>
    3e50:	81400017 	ldw	r5,0(r16)
    3e54:	90800017 	ldw	r2,0(r18)
    3e58:	28c00003 	ldbu	r3,0(r5)
    3e5c:	1887883a 	add	r3,r3,r2
    3e60:	19000003 	ldbu	r4,0(r3)
    3e64:	2100020c 	andi	r4,r4,8
    3e68:	203ff026 	beq	r4,zero,3e2c <__svfscanf_r+0xdd4>
    3e6c:	8ce3883a 	add	r17,r17,r19
    3e70:	003c8c06 	br	30a4 <__svfscanf_r+0x4c>
    3e74:	d8c0a417 	ldw	r3,656(sp)
    3e78:	1d400017 	ldw	r21,0(r3)
    3e7c:	a827883a 	mov	r19,r21
    3e80:	00000e06 	br	3ebc <__svfscanf_r+0xe64>
    3e84:	80800117 	ldw	r2,4(r16)
    3e88:	d900a317 	ldw	r4,652(sp)
    3e8c:	29800044 	addi	r6,r5,1
    3e90:	10ffffc4 	addi	r3,r2,-1
    3e94:	213fffc4 	addi	r4,r4,-1
    3e98:	d900a315 	stw	r4,652(sp)
    3e9c:	80c00115 	stw	r3,4(r16)
    3ea0:	28800003 	ldbu	r2,0(r5)
    3ea4:	98800005 	stb	r2,0(r19)
    3ea8:	81800015 	stw	r6,0(r16)
    3eac:	9cc00044 	addi	r19,r19,1
    3eb0:	20000926 	beq	r4,zero,3ed8 <__svfscanf_r+0xe80>
    3eb4:	80800117 	ldw	r2,4(r16)
    3eb8:	0080170e 	bge	zero,r2,3f18 <__svfscanf_r+0xec0>
    3ebc:	81400017 	ldw	r5,0(r16)
    3ec0:	90800017 	ldw	r2,0(r18)
    3ec4:	28c00003 	ldbu	r3,0(r5)
    3ec8:	1887883a 	add	r3,r3,r2
    3ecc:	19000003 	ldbu	r4,0(r3)
    3ed0:	2100020c 	andi	r4,r4,8
    3ed4:	203feb26 	beq	r4,zero,3e84 <__svfscanf_r+0xe2c>
    3ed8:	9d45c83a 	sub	r2,r19,r21
    3edc:	d8c0a217 	ldw	r3,648(sp)
    3ee0:	88a3883a 	add	r17,r17,r2
    3ee4:	d880a417 	ldw	r2,656(sp)
    3ee8:	18c00044 	addi	r3,r3,1
    3eec:	d8c0a215 	stw	r3,648(sp)
    3ef0:	10800104 	addi	r2,r2,4
    3ef4:	d880a415 	stw	r2,656(sp)
    3ef8:	98000005 	stb	zero,0(r19)
    3efc:	003c6906 	br	30a4 <__svfscanf_r+0x4c>
    3f00:	b009883a 	mov	r4,r22
    3f04:	800b883a 	mov	r5,r16
    3f08:	00096100 	call	9610 <__srefill_r>
    3f0c:	103fd026 	beq	r2,zero,3e50 <__svfscanf_r+0xdf8>
    3f10:	8ce3883a 	add	r17,r17,r19
    3f14:	003c6306 	br	30a4 <__svfscanf_r+0x4c>
    3f18:	b009883a 	mov	r4,r22
    3f1c:	800b883a 	mov	r5,r16
    3f20:	00096100 	call	9610 <__srefill_r>
    3f24:	103fe526 	beq	r2,zero,3ebc <__svfscanf_r+0xe64>
    3f28:	003feb06 	br	3ed8 <__svfscanf_r+0xe80>
    3f2c:	d900a317 	ldw	r4,652(sp)
    3f30:	9d41e014 	ori	r21,r19,1920
    3f34:	2000821e 	bne	r4,zero,4140 <__svfscanf_r+0x10e8>
    3f38:	d8c04404 	addi	r3,sp,272
    3f3c:	182f883a 	mov	r23,r3
    3f40:	0039883a 	mov	fp,zero
    3f44:	d8c0a615 	stw	r3,664(sp)
    3f48:	d8009c15 	stw	zero,624(sp)
    3f4c:	d8009d15 	stw	zero,628(sp)
    3f50:	d8009f15 	stw	zero,636(sp)
    3f54:	d8009e15 	stw	zero,632(sp)
    3f58:	003e9e06 	br	39d4 <__svfscanf_r+0x97c>
    3f5c:	d900a317 	ldw	r4,652(sp)
    3f60:	9c836014 	ori	r18,r19,3456
    3f64:	2000161e 	bne	r4,zero,3fc0 <__svfscanf_r+0xf68>
    3f68:	d8804404 	addi	r2,sp,272
    3f6c:	d880a615 	stw	r2,664(sp)
    3f70:	002f883a 	mov	r23,zero
    3f74:	1027883a 	mov	r19,r2
    3f78:	9080400c 	andi	r2,r18,256
    3f7c:	10000926 	beq	r2,zero,3fa4 <__svfscanf_r+0xf4c>
    3f80:	d8c0a617 	ldw	r3,664(sp)
    3f84:	1cc0052e 	bgeu	r3,r19,3f9c <__svfscanf_r+0xf44>
    3f88:	9cffffc4 	addi	r19,r19,-1
    3f8c:	99400007 	ldb	r5,0(r19)
    3f90:	b009883a 	mov	r4,r22
    3f94:	800d883a 	mov	r6,r16
    3f98:	000bef40 	call	bef4 <_ungetc_r>
    3f9c:	d900a617 	ldw	r4,664(sp)
    3fa0:	24fc6226 	beq	r4,r19,312c <__svfscanf_r+0xd4>
    3fa4:	9080040c 	andi	r2,r18,16
    3fa8:	10006726 	beq	r2,zero,4148 <__svfscanf_r+0x10f0>
    3fac:	d8c0a617 	ldw	r3,664(sp)
    3fb0:	98c5c83a 	sub	r2,r19,r3
    3fb4:	b885883a 	add	r2,r23,r2
    3fb8:	88a3883a 	add	r17,r17,r2
    3fbc:	003c3906 	br	30a4 <__svfscanf_r+0x4c>
    3fc0:	002b883a 	mov	r21,zero
    3fc4:	d8c04404 	addi	r3,sp,272
    3fc8:	d8c0a615 	stw	r3,664(sp)
    3fcc:	002f883a 	mov	r23,zero
    3fd0:	1827883a 	mov	r19,r3
    3fd4:	81800017 	ldw	r6,0(r16)
    3fd8:	00c01344 	movi	r3,77
    3fdc:	31400003 	ldbu	r5,0(r6)
    3fe0:	28bff544 	addi	r2,r5,-43
    3fe4:	10803fcc 	andi	r2,r2,255
    3fe8:	18bfe336 	bltu	r3,r2,3f78 <__svfscanf_r+0xf20>
    3fec:	1085883a 	add	r2,r2,r2
    3ff0:	1085883a 	add	r2,r2,r2
    3ff4:	00c00034 	movhi	r3,0
    3ff8:	18d00204 	addi	r3,r3,16392
    3ffc:	10c5883a 	add	r2,r2,r3
    4000:	11000017 	ldw	r4,0(r2)
    4004:	2000683a 	jmp	r4
    4008:	0000419c 	xori	zero,zero,262
    400c:	00003f78 	rdprs	zero,zero,253
    4010:	0000419c 	xori	zero,zero,262
    4014:	00003f78 	rdprs	zero,zero,253
    4018:	00003f78 	rdprs	zero,zero,253
    401c:	000041e0 	cmpeqi	zero,zero,263
    4020:	000042dc 	xori	zero,zero,267
    4024:	000042dc 	xori	zero,zero,267
    4028:	000042dc 	xori	zero,zero,267
    402c:	000042dc 	xori	zero,zero,267
    4030:	000042dc 	xori	zero,zero,267
    4034:	000042dc 	xori	zero,zero,267
    4038:	000042dc 	xori	zero,zero,267
    403c:	00004304 	movi	zero,268
    4040:	00004304 	movi	zero,268
    4044:	00003f78 	rdprs	zero,zero,253
    4048:	00003f78 	rdprs	zero,zero,253
    404c:	00003f78 	rdprs	zero,zero,253
    4050:	00003f78 	rdprs	zero,zero,253
    4054:	00003f78 	rdprs	zero,zero,253
    4058:	00003f78 	rdprs	zero,zero,253
    405c:	00003f78 	rdprs	zero,zero,253
    4060:	00004334 	movhi	zero,268
    4064:	00004334 	movhi	zero,268
    4068:	00004334 	movhi	zero,268
    406c:	00004334 	movhi	zero,268
    4070:	00004334 	movhi	zero,268
    4074:	00004334 	movhi	zero,268
    4078:	00003f78 	rdprs	zero,zero,253
    407c:	00003f78 	rdprs	zero,zero,253
    4080:	00003f78 	rdprs	zero,zero,253
    4084:	00003f78 	rdprs	zero,zero,253
    4088:	00003f78 	rdprs	zero,zero,253
    408c:	00003f78 	rdprs	zero,zero,253
    4090:	00003f78 	rdprs	zero,zero,253
    4094:	00003f78 	rdprs	zero,zero,253
    4098:	00003f78 	rdprs	zero,zero,253
    409c:	00003f78 	rdprs	zero,zero,253
    40a0:	00003f78 	rdprs	zero,zero,253
    40a4:	00003f78 	rdprs	zero,zero,253
    40a8:	00003f78 	rdprs	zero,zero,253
    40ac:	00003f78 	rdprs	zero,zero,253
    40b0:	00003f78 	rdprs	zero,zero,253
    40b4:	00003f78 	rdprs	zero,zero,253
    40b8:	00003f78 	rdprs	zero,zero,253
    40bc:	00004344 	movi	zero,269
    40c0:	00003f78 	rdprs	zero,zero,253
    40c4:	00003f78 	rdprs	zero,zero,253
    40c8:	00003f78 	rdprs	zero,zero,253
    40cc:	00003f78 	rdprs	zero,zero,253
    40d0:	00003f78 	rdprs	zero,zero,253
    40d4:	00003f78 	rdprs	zero,zero,253
    40d8:	00003f78 	rdprs	zero,zero,253
    40dc:	00003f78 	rdprs	zero,zero,253
    40e0:	00004334 	movhi	zero,268
    40e4:	00004334 	movhi	zero,268
    40e8:	00004334 	movhi	zero,268
    40ec:	00004334 	movhi	zero,268
    40f0:	00004334 	movhi	zero,268
    40f4:	00004334 	movhi	zero,268
    40f8:	00003f78 	rdprs	zero,zero,253
    40fc:	00003f78 	rdprs	zero,zero,253
    4100:	00003f78 	rdprs	zero,zero,253
    4104:	00003f78 	rdprs	zero,zero,253
    4108:	00003f78 	rdprs	zero,zero,253
    410c:	00003f78 	rdprs	zero,zero,253
    4110:	00003f78 	rdprs	zero,zero,253
    4114:	00003f78 	rdprs	zero,zero,253
    4118:	00003f78 	rdprs	zero,zero,253
    411c:	00003f78 	rdprs	zero,zero,253
    4120:	00003f78 	rdprs	zero,zero,253
    4124:	00003f78 	rdprs	zero,zero,253
    4128:	00003f78 	rdprs	zero,zero,253
    412c:	00003f78 	rdprs	zero,zero,253
    4130:	00003f78 	rdprs	zero,zero,253
    4134:	00003f78 	rdprs	zero,zero,253
    4138:	00003f78 	rdprs	zero,zero,253
    413c:	00004344 	movi	zero,269
    4140:	000d883a 	mov	r6,zero
    4144:	003d9006 	br	3788 <__svfscanf_r+0x730>
    4148:	98000005 	stb	zero,0(r19)
    414c:	d8c0a017 	ldw	r3,640(sp)
    4150:	d940a617 	ldw	r5,664(sp)
    4154:	d9c0a117 	ldw	r7,644(sp)
    4158:	b009883a 	mov	r4,r22
    415c:	000d883a 	mov	r6,zero
    4160:	183ee83a 	callr	r3
    4164:	1007883a 	mov	r3,r2
    4168:	9080080c 	andi	r2,r18,32
    416c:	10004d1e 	bne	r2,zero,42a4 <__svfscanf_r+0x124c>
    4170:	9080010c 	andi	r2,r18,4
    4174:	10003426 	beq	r2,zero,4248 <__svfscanf_r+0x11f0>
    4178:	d900a417 	ldw	r4,656(sp)
    417c:	20800017 	ldw	r2,0(r4)
    4180:	21000104 	addi	r4,r4,4
    4184:	d900a415 	stw	r4,656(sp)
    4188:	10c0000d 	sth	r3,0(r2)
    418c:	d880a217 	ldw	r2,648(sp)
    4190:	10800044 	addi	r2,r2,1
    4194:	d880a215 	stw	r2,648(sp)
    4198:	003f8406 	br	3fac <__svfscanf_r+0xf54>
    419c:	9080200c 	andi	r2,r18,128
    41a0:	103f7526 	beq	r2,zero,3f78 <__svfscanf_r+0xf20>
    41a4:	00bfdfc4 	movi	r2,-129
    41a8:	90a4703a 	and	r18,r18,r2
    41ac:	99400005 	stb	r5,0(r19)
    41b0:	9cc00044 	addi	r19,r19,1
    41b4:	80c00117 	ldw	r3,4(r16)
    41b8:	18ffffc4 	addi	r3,r3,-1
    41bc:	80c00115 	stw	r3,4(r16)
    41c0:	00c0130e 	bge	zero,r3,4210 <__svfscanf_r+0x11b8>
    41c4:	31800044 	addi	r6,r6,1
    41c8:	81800015 	stw	r6,0(r16)
    41cc:	d880a317 	ldw	r2,652(sp)
    41d0:	10bfffc4 	addi	r2,r2,-1
    41d4:	d880a315 	stw	r2,652(sp)
    41d8:	103f7e1e 	bne	r2,zero,3fd4 <__svfscanf_r+0xf7c>
    41dc:	003f6606 	br	3f78 <__svfscanf_r+0xf20>
    41e0:	9082000c 	andi	r2,r18,2048
    41e4:	103ff126 	beq	r2,zero,41ac <__svfscanf_r+0x1154>
    41e8:	d8c0a117 	ldw	r3,644(sp)
    41ec:	1800031e 	bne	r3,zero,41fc <__svfscanf_r+0x11a4>
    41f0:	01000204 	movi	r4,8
    41f4:	94808014 	ori	r18,r18,512
    41f8:	d900a115 	stw	r4,644(sp)
    41fc:	9081000c 	andi	r2,r18,1024
    4200:	10000826 	beq	r2,zero,4224 <__svfscanf_r+0x11cc>
    4204:	00be9fc4 	movi	r2,-1409
    4208:	90a4703a 	and	r18,r18,r2
    420c:	003fe706 	br	41ac <__svfscanf_r+0x1154>
    4210:	b009883a 	mov	r4,r22
    4214:	800b883a 	mov	r5,r16
    4218:	00096100 	call	9610 <__srefill_r>
    421c:	103feb26 	beq	r2,zero,41cc <__svfscanf_r+0x1174>
    4220:	003f5506 	br	3f78 <__svfscanf_r+0xf20>
    4224:	a8000426 	beq	r21,zero,4238 <__svfscanf_r+0x11e0>
    4228:	d880a317 	ldw	r2,652(sp)
    422c:	ad7fffc4 	addi	r21,r21,-1
    4230:	10800044 	addi	r2,r2,1
    4234:	d880a315 	stw	r2,652(sp)
    4238:	00bf1fc4 	movi	r2,-897
    423c:	90a4703a 	and	r18,r18,r2
    4240:	bdc00044 	addi	r23,r23,1
    4244:	003fdb06 	br	41b4 <__svfscanf_r+0x115c>
    4248:	9080004c 	andi	r2,r18,1
    424c:	1005003a 	cmpeq	r2,r2,zero
    4250:	10001426 	beq	r2,zero,42a4 <__svfscanf_r+0x124c>
    4254:	9080008c 	andi	r2,r18,2
    4258:	10001226 	beq	r2,zero,42a4 <__svfscanf_r+0x124c>
    425c:	d8c0a017 	ldw	r3,640(sp)
    4260:	00800074 	movhi	r2,1
    4264:	10ae3504 	addi	r2,r2,-18220
    4268:	18801426 	beq	r3,r2,42bc <__svfscanf_r+0x1264>
    426c:	d9c0a117 	ldw	r7,644(sp)
    4270:	d940a617 	ldw	r5,664(sp)
    4274:	000d883a 	mov	r6,zero
    4278:	b009883a 	mov	r4,r22
    427c:	000b5bc0 	call	b5bc <_strtoll_r>
    4280:	100d883a 	mov	r6,r2
    4284:	180f883a 	mov	r7,r3
    4288:	d900a417 	ldw	r4,656(sp)
    428c:	20800017 	ldw	r2,0(r4)
    4290:	21000104 	addi	r4,r4,4
    4294:	d900a415 	stw	r4,656(sp)
    4298:	11c00115 	stw	r7,4(r2)
    429c:	11800015 	stw	r6,0(r2)
    42a0:	003fba06 	br	418c <__svfscanf_r+0x1134>
    42a4:	d900a417 	ldw	r4,656(sp)
    42a8:	20800017 	ldw	r2,0(r4)
    42ac:	21000104 	addi	r4,r4,4
    42b0:	d900a415 	stw	r4,656(sp)
    42b4:	10c00015 	stw	r3,0(r2)
    42b8:	003fb406 	br	418c <__svfscanf_r+0x1134>
    42bc:	d9c0a117 	ldw	r7,644(sp)
    42c0:	d940a617 	ldw	r5,664(sp)
    42c4:	000d883a 	mov	r6,zero
    42c8:	b009883a 	mov	r4,r22
    42cc:	000bb280 	call	bb28 <_strtoull_r>
    42d0:	100d883a 	mov	r6,r2
    42d4:	180f883a 	mov	r7,r3
    42d8:	003feb06 	br	4288 <__svfscanf_r+0x1230>
    42dc:	d8c0a117 	ldw	r3,644(sp)
    42e0:	18c5883a 	add	r2,r3,r3
    42e4:	00c00074 	movhi	r3,1
    42e8:	18c8be84 	addi	r3,r3,8954
    42ec:	10c5883a 	add	r2,r2,r3
    42f0:	1080000f 	ldh	r2,0(r2)
    42f4:	00fd1fc4 	movi	r3,-2945
    42f8:	90e4703a 	and	r18,r18,r3
    42fc:	d880a115 	stw	r2,644(sp)
    4300:	003faa06 	br	41ac <__svfscanf_r+0x1154>
    4304:	d900a117 	ldw	r4,644(sp)
    4308:	00c00074 	movhi	r3,1
    430c:	18c8be84 	addi	r3,r3,8954
    4310:	2105883a 	add	r2,r4,r4
    4314:	10c5883a 	add	r2,r2,r3
    4318:	1080000f 	ldh	r2,0(r2)
    431c:	00c00204 	movi	r3,8
    4320:	d880a115 	stw	r2,644(sp)
    4324:	18bf140e 	bge	r3,r2,3f78 <__svfscanf_r+0xf20>
    4328:	00bd1fc4 	movi	r2,-2945
    432c:	90a4703a 	and	r18,r18,r2
    4330:	003f9e06 	br	41ac <__svfscanf_r+0x1154>
    4334:	d8c0a117 	ldw	r3,644(sp)
    4338:	00800284 	movi	r2,10
    433c:	10fffa16 	blt	r2,r3,4328 <__svfscanf_r+0x12d0>
    4340:	003f0d06 	br	3f78 <__svfscanf_r+0xf20>
    4344:	90c1800c 	andi	r3,r18,1536
    4348:	00808004 	movi	r2,512
    434c:	18bf0a1e 	bne	r3,r2,3f78 <__svfscanf_r+0xf20>
    4350:	00bf7fc4 	movi	r2,-513
    4354:	9084703a 	and	r2,r18,r2
    4358:	01000404 	movi	r4,16
    435c:	14814014 	ori	r18,r2,1280
    4360:	d900a115 	stw	r4,644(sp)
    4364:	003f9106 	br	41ac <__svfscanf_r+0x1154>
    4368:	d880a417 	ldw	r2,656(sp)
    436c:	dd400404 	addi	r21,sp,16
    4370:	14800017 	ldw	r18,0(r2)
    4374:	9027883a 	mov	r19,r18
    4378:	81000017 	ldw	r4,0(r16)
    437c:	20800003 	ldbu	r2,0(r4)
    4380:	a885883a 	add	r2,r21,r2
    4384:	10c00007 	ldb	r3,0(r2)
    4388:	18001426 	beq	r3,zero,43dc <__svfscanf_r+0x1384>
    438c:	d8c0a317 	ldw	r3,652(sp)
    4390:	80800117 	ldw	r2,4(r16)
    4394:	21800044 	addi	r6,r4,1
    4398:	18ffffc4 	addi	r3,r3,-1
    439c:	d8c0a315 	stw	r3,652(sp)
    43a0:	10ffffc4 	addi	r3,r2,-1
    43a4:	80c00115 	stw	r3,4(r16)
    43a8:	20800003 	ldbu	r2,0(r4)
    43ac:	90800005 	stb	r2,0(r18)
    43b0:	d900a317 	ldw	r4,652(sp)
    43b4:	81800015 	stw	r6,0(r16)
    43b8:	94800044 	addi	r18,r18,1
    43bc:	20000726 	beq	r4,zero,43dc <__svfscanf_r+0x1384>
    43c0:	80800117 	ldw	r2,4(r16)
    43c4:	00bfec16 	blt	zero,r2,4378 <__svfscanf_r+0x1320>
    43c8:	b009883a 	mov	r4,r22
    43cc:	800b883a 	mov	r5,r16
    43d0:	00096100 	call	9610 <__srefill_r>
    43d4:	103fe826 	beq	r2,zero,4378 <__svfscanf_r+0x1320>
    43d8:	9cbb7426 	beq	r19,r18,31ac <__svfscanf_r+0x154>
    43dc:	94e7c83a 	sub	r19,r18,r19
    43e0:	983b5226 	beq	r19,zero,312c <__svfscanf_r+0xd4>
    43e4:	90000005 	stb	zero,0(r18)
    43e8:	d880a417 	ldw	r2,656(sp)
    43ec:	d8c0a217 	ldw	r3,648(sp)
    43f0:	8ce3883a 	add	r17,r17,r19
    43f4:	10800104 	addi	r2,r2,4
    43f8:	18c00044 	addi	r3,r3,1
    43fc:	d880a415 	stw	r2,656(sp)
    4400:	d8c0a215 	stw	r3,648(sp)
    4404:	003b2706 	br	30a4 <__svfscanf_r+0x4c>
    4408:	9cc00414 	ori	r19,r19,16
    440c:	003b6e06 	br	31c8 <__svfscanf_r+0x170>
    4410:	00c00404 	movi	r3,16
    4414:	01000074 	movhi	r4,1
    4418:	212e3504 	addi	r4,r4,-18220
    441c:	9cc08014 	ori	r19,r19,512
    4420:	054000c4 	movi	r21,3
    4424:	d8c0a115 	stw	r3,644(sp)
    4428:	d900a015 	stw	r4,640(sp)
    442c:	003bf806 	br	3410 <__svfscanf_r+0x3b8>
    4430:	9880040c 	andi	r2,r19,16
    4434:	10001926 	beq	r2,zero,449c <__svfscanf_r+0x1444>
    4438:	0027883a 	mov	r19,zero
    443c:	00000b06 	br	446c <__svfscanf_r+0x1414>
    4440:	80800017 	ldw	r2,0(r16)
    4444:	b009883a 	mov	r4,r22
    4448:	800b883a 	mov	r5,r16
    444c:	148d883a 	add	r6,r2,r18
    4450:	81800015 	stw	r6,0(r16)
    4454:	9ca7883a 	add	r19,r19,r18
    4458:	00096100 	call	9610 <__srefill_r>
    445c:	103c711e 	bne	r2,zero,3624 <__svfscanf_r+0x5cc>
    4460:	d900a317 	ldw	r4,652(sp)
    4464:	2489c83a 	sub	r4,r4,r18
    4468:	d900a315 	stw	r4,652(sp)
    446c:	84800117 	ldw	r18,4(r16)
    4470:	d8c0a317 	ldw	r3,652(sp)
    4474:	90fff216 	blt	r18,r3,4440 <__svfscanf_r+0x13e8>
    4478:	d900a317 	ldw	r4,652(sp)
    447c:	80800017 	ldw	r2,0(r16)
    4480:	9927883a 	add	r19,r19,r4
    4484:	9107c83a 	sub	r3,r18,r4
    4488:	110d883a 	add	r6,r2,r4
    448c:	8ce3883a 	add	r17,r17,r19
    4490:	80c00115 	stw	r3,4(r16)
    4494:	81800015 	stw	r6,0(r16)
    4498:	003b0206 	br	30a4 <__svfscanf_r+0x4c>
    449c:	d880a417 	ldw	r2,656(sp)
    44a0:	d980a317 	ldw	r6,652(sp)
    44a4:	01400044 	movi	r5,1
    44a8:	11000017 	ldw	r4,0(r2)
    44ac:	800f883a 	mov	r7,r16
    44b0:	00067cc0 	call	67cc <fread>
    44b4:	103b3d26 	beq	r2,zero,31ac <__svfscanf_r+0x154>
    44b8:	d8c0a417 	ldw	r3,656(sp)
    44bc:	d900a217 	ldw	r4,648(sp)
    44c0:	88a3883a 	add	r17,r17,r2
    44c4:	18c00104 	addi	r3,r3,4
    44c8:	21000044 	addi	r4,r4,1
    44cc:	d8c0a415 	stw	r3,656(sp)
    44d0:	d900a215 	stw	r4,648(sp)
    44d4:	003af306 	br	30a4 <__svfscanf_r+0x4c>
    44d8:	8080030b 	ldhu	r2,12(r16)
    44dc:	1080100c 	andi	r2,r2,64
    44e0:	103b1226 	beq	r2,zero,312c <__svfscanf_r+0xd4>
    44e4:	003b3306 	br	31b4 <__svfscanf_r+0x15c>
    44e8:	983b1026 	beq	r19,zero,312c <__svfscanf_r+0xd4>
    44ec:	8ce3883a 	add	r17,r17,r19
    44f0:	003aec06 	br	30a4 <__svfscanf_r+0x4c>
    44f4:	983c9626 	beq	r19,zero,3750 <__svfscanf_r+0x6f8>
    44f8:	9cffffc4 	addi	r19,r19,-1
    44fc:	d8c04404 	addi	r3,sp,272
    4500:	1cc5883a 	add	r2,r3,r19
    4504:	11400003 	ldbu	r5,0(r2)
    4508:	b009883a 	mov	r4,r22
    450c:	800d883a 	mov	r6,r16
    4510:	000bef40 	call	bef4 <_ungetc_r>
    4514:	003ff706 	br	44f4 <__svfscanf_r+0x149c>
    4518:	00bfff84 	movi	r2,-2
    451c:	18bc7a1e 	bne	r3,r2,3708 <__svfscanf_r+0x6b0>
    4520:	003c8406 	br	3734 <__svfscanf_r+0x6dc>
    4524:	d900a417 	ldw	r4,656(sp)
    4528:	25400017 	ldw	r21,0(r4)
    452c:	21000104 	addi	r4,r4,4
    4530:	d900a415 	stw	r4,656(sp)
    4534:	003c4a06 	br	3660 <__svfscanf_r+0x608>
    4538:	00bfff84 	movi	r2,-2
    453c:	18bc0f1e 	bne	r3,r2,357c <__svfscanf_r+0x524>
    4540:	003c1506 	br	3598 <__svfscanf_r+0x540>
    4544:	b009883a 	mov	r4,r22
    4548:	800b883a 	mov	r5,r16
    454c:	00096100 	call	9610 <__srefill_r>
    4550:	103c1326 	beq	r2,zero,35a0 <__svfscanf_r+0x548>
    4554:	903b151e 	bne	r18,zero,31ac <__svfscanf_r+0x154>
    4558:	a83ad21e 	bne	r21,zero,30a4 <__svfscanf_r+0x4c>
    455c:	d880a217 	ldw	r2,648(sp)
    4560:	10800044 	addi	r2,r2,1
    4564:	d880a215 	stw	r2,648(sp)
    4568:	003ace06 	br	30a4 <__svfscanf_r+0x4c>
    456c:	0027883a 	mov	r19,zero
    4570:	003bdd06 	br	34e8 <__svfscanf_r+0x490>
    4574:	9cc00114 	ori	r19,r19,4
    4578:	003b1306 	br	31c8 <__svfscanf_r+0x170>
    457c:	05400104 	movi	r21,4
    4580:	003ba306 	br	3410 <__svfscanf_r+0x3b8>
    4584:	9cc00054 	ori	r19,r19,1
    4588:	00800074 	movhi	r2,1
    458c:	10acd504 	addi	r2,r2,-19628
    4590:	00c00284 	movi	r3,10
    4594:	054000c4 	movi	r21,3
    4598:	d880a015 	stw	r2,640(sp)
    459c:	d8c0a115 	stw	r3,644(sp)
    45a0:	003b9b06 	br	3410 <__svfscanf_r+0x3b8>
    45a4:	9cc01014 	ori	r19,r19,64
    45a8:	002b883a 	mov	r21,zero
    45ac:	003b9806 	br	3410 <__svfscanf_r+0x3b8>
    45b0:	a00b883a 	mov	r5,r20
    45b4:	d9000404 	addi	r4,sp,16
    45b8:	00098d00 	call	98d0 <__sccl>
    45bc:	1029883a 	mov	r20,r2
    45c0:	9cc01014 	ori	r19,r19,64
    45c4:	05400044 	movi	r21,1
    45c8:	003b9106 	br	3410 <__svfscanf_r+0x3b8>
    45cc:	9cc00054 	ori	r19,r19,1
    45d0:	00800204 	movi	r2,8
    45d4:	00c00074 	movhi	r3,1
    45d8:	18ee3504 	addi	r3,r3,-18220
    45dc:	054000c4 	movi	r21,3
    45e0:	d880a115 	stw	r2,644(sp)
    45e4:	d8c0a015 	stw	r3,640(sp)
    45e8:	003b8906 	br	3410 <__svfscanf_r+0x3b8>
    45ec:	9880040c 	andi	r2,r19,16
    45f0:	103aac1e 	bne	r2,zero,30a4 <__svfscanf_r+0x4c>
    45f4:	9880010c 	andi	r2,r19,4
    45f8:	10002426 	beq	r2,zero,468c <__svfscanf_r+0x1634>
    45fc:	d900a417 	ldw	r4,656(sp)
    4600:	20800017 	ldw	r2,0(r4)
    4604:	21000104 	addi	r4,r4,4
    4608:	d900a415 	stw	r4,656(sp)
    460c:	1440000d 	sth	r17,0(r2)
    4610:	003aa406 	br	30a4 <__svfscanf_r+0x4c>
    4614:	9cc00094 	ori	r19,r19,2
    4618:	003aeb06 	br	31c8 <__svfscanf_r+0x170>
    461c:	05400084 	movi	r21,2
    4620:	003b7b06 	br	3410 <__svfscanf_r+0x3b8>
    4624:	00800404 	movi	r2,16
    4628:	00c00074 	movhi	r3,1
    462c:	18ee3504 	addi	r3,r3,-18220
    4630:	9cc08814 	ori	r19,r19,544
    4634:	054000c4 	movi	r21,3
    4638:	d880a115 	stw	r2,644(sp)
    463c:	d8c0a015 	stw	r3,640(sp)
    4640:	003b7306 	br	3410 <__svfscanf_r+0x3b8>
    4644:	0009883a 	mov	r4,zero
    4648:	00099900 	call	9990 <nanf>
    464c:	b8800015 	stw	r2,0(r23)
    4650:	003d2706 	br	3af0 <__svfscanf_r+0xa98>
    4654:	a0c00007 	ldb	r3,0(r20)
    4658:	00801b04 	movi	r2,108
    465c:	18800826 	beq	r3,r2,4680 <__svfscanf_r+0x1628>
    4660:	9cc00054 	ori	r19,r19,1
    4664:	003ad806 	br	31c8 <__svfscanf_r+0x170>
    4668:	01000074 	movhi	r4,1
    466c:	212cd504 	addi	r4,r4,-19628
    4670:	054000c4 	movi	r21,3
    4674:	d900a015 	stw	r4,640(sp)
    4678:	d800a115 	stw	zero,644(sp)
    467c:	003b6406 	br	3410 <__svfscanf_r+0x3b8>
    4680:	a5000044 	addi	r20,r20,1
    4684:	9cc00094 	ori	r19,r19,2
    4688:	003acf06 	br	31c8 <__svfscanf_r+0x170>
    468c:	9880004c 	andi	r2,r19,1
    4690:	1005003a 	cmpeq	r2,r2,zero
    4694:	10000a26 	beq	r2,zero,46c0 <__svfscanf_r+0x1668>
    4698:	9880008c 	andi	r2,r19,2
    469c:	10000826 	beq	r2,zero,46c0 <__svfscanf_r+0x1668>
    46a0:	d900a417 	ldw	r4,656(sp)
    46a4:	8807d7fa 	srai	r3,r17,31
    46a8:	20800017 	ldw	r2,0(r4)
    46ac:	21000104 	addi	r4,r4,4
    46b0:	d900a415 	stw	r4,656(sp)
    46b4:	14400015 	stw	r17,0(r2)
    46b8:	10c00115 	stw	r3,4(r2)
    46bc:	003a7906 	br	30a4 <__svfscanf_r+0x4c>
    46c0:	d8c0a417 	ldw	r3,656(sp)
    46c4:	18800017 	ldw	r2,0(r3)
    46c8:	18c00104 	addi	r3,r3,4
    46cc:	d8c0a415 	stw	r3,656(sp)
    46d0:	14400015 	stw	r17,0(r2)
    46d4:	003a7306 	br	30a4 <__svfscanf_r+0x4c>

000046d8 <__svfscanf>:
    46d8:	00800074 	movhi	r2,1
    46dc:	10910c04 	addi	r2,r2,17456
    46e0:	2013883a 	mov	r9,r4
    46e4:	11000017 	ldw	r4,0(r2)
    46e8:	2805883a 	mov	r2,r5
    46ec:	300f883a 	mov	r7,r6
    46f0:	480b883a 	mov	r5,r9
    46f4:	100d883a 	mov	r6,r2
    46f8:	00030581 	jmpi	3058 <__svfscanf_r>

000046fc <_vfscanf_r>:
    46fc:	defffb04 	addi	sp,sp,-20
    4700:	dcc00315 	stw	r19,12(sp)
    4704:	dc800215 	stw	r18,8(sp)
    4708:	dc400115 	stw	r17,4(sp)
    470c:	dc000015 	stw	r16,0(sp)
    4710:	dfc00415 	stw	ra,16(sp)
    4714:	2021883a 	mov	r16,r4
    4718:	2823883a 	mov	r17,r5
    471c:	3025883a 	mov	r18,r6
    4720:	3827883a 	mov	r19,r7
    4724:	20000226 	beq	r4,zero,4730 <_vfscanf_r+0x34>
    4728:	20800e17 	ldw	r2,56(r4)
    472c:	10000b26 	beq	r2,zero,475c <_vfscanf_r+0x60>
    4730:	8009883a 	mov	r4,r16
    4734:	880b883a 	mov	r5,r17
    4738:	900d883a 	mov	r6,r18
    473c:	980f883a 	mov	r7,r19
    4740:	dfc00417 	ldw	ra,16(sp)
    4744:	dcc00317 	ldw	r19,12(sp)
    4748:	dc800217 	ldw	r18,8(sp)
    474c:	dc400117 	ldw	r17,4(sp)
    4750:	dc000017 	ldw	r16,0(sp)
    4754:	dec00504 	addi	sp,sp,20
    4758:	00030581 	jmpi	3058 <__svfscanf_r>
    475c:	00063780 	call	6378 <__sinit>
    4760:	003ff306 	br	4730 <_vfscanf_r+0x34>

00004764 <vfscanf>:
    4764:	defffb04 	addi	sp,sp,-20
    4768:	dcc00315 	stw	r19,12(sp)
    476c:	04c00074 	movhi	r19,1
    4770:	9cd10c04 	addi	r19,r19,17456
    4774:	98c00017 	ldw	r3,0(r19)
    4778:	dc800215 	stw	r18,8(sp)
    477c:	dc400115 	stw	r17,4(sp)
    4780:	dc000015 	stw	r16,0(sp)
    4784:	dfc00415 	stw	ra,16(sp)
    4788:	2021883a 	mov	r16,r4
    478c:	2823883a 	mov	r17,r5
    4790:	3025883a 	mov	r18,r6
    4794:	18000326 	beq	r3,zero,47a4 <vfscanf+0x40>
    4798:	18800e17 	ldw	r2,56(r3)
    479c:	1809883a 	mov	r4,r3
    47a0:	10000b26 	beq	r2,zero,47d0 <vfscanf+0x6c>
    47a4:	99000017 	ldw	r4,0(r19)
    47a8:	800b883a 	mov	r5,r16
    47ac:	880d883a 	mov	r6,r17
    47b0:	900f883a 	mov	r7,r18
    47b4:	dfc00417 	ldw	ra,16(sp)
    47b8:	dcc00317 	ldw	r19,12(sp)
    47bc:	dc800217 	ldw	r18,8(sp)
    47c0:	dc400117 	ldw	r17,4(sp)
    47c4:	dc000017 	ldw	r16,0(sp)
    47c8:	dec00504 	addi	sp,sp,20
    47cc:	00030581 	jmpi	3058 <__svfscanf_r>
    47d0:	00063780 	call	6378 <__sinit>
    47d4:	003ff306 	br	47a4 <vfscanf+0x40>

000047d8 <__swsetup_r>:
    47d8:	00800074 	movhi	r2,1
    47dc:	10910c04 	addi	r2,r2,17456
    47e0:	10c00017 	ldw	r3,0(r2)
    47e4:	defffd04 	addi	sp,sp,-12
    47e8:	dc400115 	stw	r17,4(sp)
    47ec:	dc000015 	stw	r16,0(sp)
    47f0:	dfc00215 	stw	ra,8(sp)
    47f4:	2023883a 	mov	r17,r4
    47f8:	2821883a 	mov	r16,r5
    47fc:	18000226 	beq	r3,zero,4808 <__swsetup_r+0x30>
    4800:	18800e17 	ldw	r2,56(r3)
    4804:	10001f26 	beq	r2,zero,4884 <__swsetup_r+0xac>
    4808:	8100030b 	ldhu	r4,12(r16)
    480c:	2080020c 	andi	r2,r4,8
    4810:	10002826 	beq	r2,zero,48b4 <__swsetup_r+0xdc>
    4814:	81400417 	ldw	r5,16(r16)
    4818:	28001d26 	beq	r5,zero,4890 <__swsetup_r+0xb8>
    481c:	2080004c 	andi	r2,r4,1
    4820:	1005003a 	cmpeq	r2,r2,zero
    4824:	10000b26 	beq	r2,zero,4854 <__swsetup_r+0x7c>
    4828:	2080008c 	andi	r2,r4,2
    482c:	10001226 	beq	r2,zero,4878 <__swsetup_r+0xa0>
    4830:	0005883a 	mov	r2,zero
    4834:	80800215 	stw	r2,8(r16)
    4838:	28000b26 	beq	r5,zero,4868 <__swsetup_r+0x90>
    483c:	0005883a 	mov	r2,zero
    4840:	dfc00217 	ldw	ra,8(sp)
    4844:	dc400117 	ldw	r17,4(sp)
    4848:	dc000017 	ldw	r16,0(sp)
    484c:	dec00304 	addi	sp,sp,12
    4850:	f800283a 	ret
    4854:	80800517 	ldw	r2,20(r16)
    4858:	80000215 	stw	zero,8(r16)
    485c:	0085c83a 	sub	r2,zero,r2
    4860:	80800615 	stw	r2,24(r16)
    4864:	283ff51e 	bne	r5,zero,483c <__swsetup_r+0x64>
    4868:	2080200c 	andi	r2,r4,128
    486c:	103ff326 	beq	r2,zero,483c <__swsetup_r+0x64>
    4870:	00bfffc4 	movi	r2,-1
    4874:	003ff206 	br	4840 <__swsetup_r+0x68>
    4878:	80800517 	ldw	r2,20(r16)
    487c:	80800215 	stw	r2,8(r16)
    4880:	003fed06 	br	4838 <__swsetup_r+0x60>
    4884:	1809883a 	mov	r4,r3
    4888:	00063780 	call	6378 <__sinit>
    488c:	003fde06 	br	4808 <__swsetup_r+0x30>
    4890:	20c0a00c 	andi	r3,r4,640
    4894:	00808004 	movi	r2,512
    4898:	18bfe026 	beq	r3,r2,481c <__swsetup_r+0x44>
    489c:	8809883a 	mov	r4,r17
    48a0:	800b883a 	mov	r5,r16
    48a4:	00073580 	call	7358 <__smakebuf_r>
    48a8:	8100030b 	ldhu	r4,12(r16)
    48ac:	81400417 	ldw	r5,16(r16)
    48b0:	003fda06 	br	481c <__swsetup_r+0x44>
    48b4:	2080040c 	andi	r2,r4,16
    48b8:	103fed26 	beq	r2,zero,4870 <__swsetup_r+0x98>
    48bc:	2080010c 	andi	r2,r4,4
    48c0:	10001226 	beq	r2,zero,490c <__swsetup_r+0x134>
    48c4:	81400c17 	ldw	r5,48(r16)
    48c8:	28000526 	beq	r5,zero,48e0 <__swsetup_r+0x108>
    48cc:	80801004 	addi	r2,r16,64
    48d0:	28800226 	beq	r5,r2,48dc <__swsetup_r+0x104>
    48d4:	8809883a 	mov	r4,r17
    48d8:	00069380 	call	6938 <_free_r>
    48dc:	80000c15 	stw	zero,48(r16)
    48e0:	8080030b 	ldhu	r2,12(r16)
    48e4:	81400417 	ldw	r5,16(r16)
    48e8:	80000115 	stw	zero,4(r16)
    48ec:	10bff6cc 	andi	r2,r2,65499
    48f0:	8080030d 	sth	r2,12(r16)
    48f4:	81400015 	stw	r5,0(r16)
    48f8:	8080030b 	ldhu	r2,12(r16)
    48fc:	10800214 	ori	r2,r2,8
    4900:	113fffcc 	andi	r4,r2,65535
    4904:	8080030d 	sth	r2,12(r16)
    4908:	003fc306 	br	4818 <__swsetup_r+0x40>
    490c:	81400417 	ldw	r5,16(r16)
    4910:	003ff906 	br	48f8 <__swsetup_r+0x120>

00004914 <quorem>:
    4914:	28c00417 	ldw	r3,16(r5)
    4918:	20800417 	ldw	r2,16(r4)
    491c:	defff604 	addi	sp,sp,-40
    4920:	ddc00715 	stw	r23,28(sp)
    4924:	dd400515 	stw	r21,20(sp)
    4928:	dfc00915 	stw	ra,36(sp)
    492c:	df000815 	stw	fp,32(sp)
    4930:	dd800615 	stw	r22,24(sp)
    4934:	dd000415 	stw	r20,16(sp)
    4938:	dcc00315 	stw	r19,12(sp)
    493c:	dc800215 	stw	r18,8(sp)
    4940:	dc400115 	stw	r17,4(sp)
    4944:	dc000015 	stw	r16,0(sp)
    4948:	202f883a 	mov	r23,r4
    494c:	282b883a 	mov	r21,r5
    4950:	10c07416 	blt	r2,r3,4b24 <quorem+0x210>
    4954:	1c7fffc4 	addi	r17,r3,-1
    4958:	8c45883a 	add	r2,r17,r17
    495c:	1085883a 	add	r2,r2,r2
    4960:	2c000504 	addi	r16,r5,20
    4964:	24c00504 	addi	r19,r4,20
    4968:	14ed883a 	add	r22,r2,r19
    496c:	80a5883a 	add	r18,r16,r2
    4970:	b7000017 	ldw	fp,0(r22)
    4974:	91400017 	ldw	r5,0(r18)
    4978:	e009883a 	mov	r4,fp
    497c:	29400044 	addi	r5,r5,1
    4980:	000f1e40 	call	f1e4 <__udivsi3>
    4984:	1029883a 	mov	r20,r2
    4988:	10003c1e 	bne	r2,zero,4a7c <quorem+0x168>
    498c:	a80b883a 	mov	r5,r21
    4990:	b809883a 	mov	r4,r23
    4994:	00081840 	call	8184 <__mcmp>
    4998:	10002b16 	blt	r2,zero,4a48 <quorem+0x134>
    499c:	a5000044 	addi	r20,r20,1
    49a0:	980f883a 	mov	r7,r19
    49a4:	0011883a 	mov	r8,zero
    49a8:	0009883a 	mov	r4,zero
    49ac:	81400017 	ldw	r5,0(r16)
    49b0:	38c00017 	ldw	r3,0(r7)
    49b4:	84000104 	addi	r16,r16,4
    49b8:	28bfffcc 	andi	r2,r5,65535
    49bc:	2085883a 	add	r2,r4,r2
    49c0:	11bfffcc 	andi	r6,r2,65535
    49c4:	193fffcc 	andi	r4,r3,65535
    49c8:	1004d43a 	srli	r2,r2,16
    49cc:	280ad43a 	srli	r5,r5,16
    49d0:	2189c83a 	sub	r4,r4,r6
    49d4:	2209883a 	add	r4,r4,r8
    49d8:	1806d43a 	srli	r3,r3,16
    49dc:	288b883a 	add	r5,r5,r2
    49e0:	200dd43a 	srai	r6,r4,16
    49e4:	28bfffcc 	andi	r2,r5,65535
    49e8:	1887c83a 	sub	r3,r3,r2
    49ec:	1987883a 	add	r3,r3,r6
    49f0:	3900000d 	sth	r4,0(r7)
    49f4:	38c0008d 	sth	r3,2(r7)
    49f8:	2808d43a 	srli	r4,r5,16
    49fc:	39c00104 	addi	r7,r7,4
    4a00:	1811d43a 	srai	r8,r3,16
    4a04:	943fe92e 	bgeu	r18,r16,49ac <quorem+0x98>
    4a08:	8c45883a 	add	r2,r17,r17
    4a0c:	1085883a 	add	r2,r2,r2
    4a10:	9885883a 	add	r2,r19,r2
    4a14:	10c00017 	ldw	r3,0(r2)
    4a18:	18000b1e 	bne	r3,zero,4a48 <quorem+0x134>
    4a1c:	113fff04 	addi	r4,r2,-4
    4a20:	9900082e 	bgeu	r19,r4,4a44 <quorem+0x130>
    4a24:	10bfff17 	ldw	r2,-4(r2)
    4a28:	10000326 	beq	r2,zero,4a38 <quorem+0x124>
    4a2c:	00000506 	br	4a44 <quorem+0x130>
    4a30:	20800017 	ldw	r2,0(r4)
    4a34:	1000031e 	bne	r2,zero,4a44 <quorem+0x130>
    4a38:	213fff04 	addi	r4,r4,-4
    4a3c:	8c7fffc4 	addi	r17,r17,-1
    4a40:	993ffb36 	bltu	r19,r4,4a30 <quorem+0x11c>
    4a44:	bc400415 	stw	r17,16(r23)
    4a48:	a005883a 	mov	r2,r20
    4a4c:	dfc00917 	ldw	ra,36(sp)
    4a50:	df000817 	ldw	fp,32(sp)
    4a54:	ddc00717 	ldw	r23,28(sp)
    4a58:	dd800617 	ldw	r22,24(sp)
    4a5c:	dd400517 	ldw	r21,20(sp)
    4a60:	dd000417 	ldw	r20,16(sp)
    4a64:	dcc00317 	ldw	r19,12(sp)
    4a68:	dc800217 	ldw	r18,8(sp)
    4a6c:	dc400117 	ldw	r17,4(sp)
    4a70:	dc000017 	ldw	r16,0(sp)
    4a74:	dec00a04 	addi	sp,sp,40
    4a78:	f800283a 	ret
    4a7c:	980f883a 	mov	r7,r19
    4a80:	8011883a 	mov	r8,r16
    4a84:	0013883a 	mov	r9,zero
    4a88:	000d883a 	mov	r6,zero
    4a8c:	40c00017 	ldw	r3,0(r8)
    4a90:	39000017 	ldw	r4,0(r7)
    4a94:	42000104 	addi	r8,r8,4
    4a98:	18bfffcc 	andi	r2,r3,65535
    4a9c:	a085383a 	mul	r2,r20,r2
    4aa0:	1806d43a 	srli	r3,r3,16
    4aa4:	217fffcc 	andi	r5,r4,65535
    4aa8:	3085883a 	add	r2,r6,r2
    4aac:	11bfffcc 	andi	r6,r2,65535
    4ab0:	a0c7383a 	mul	r3,r20,r3
    4ab4:	1004d43a 	srli	r2,r2,16
    4ab8:	298bc83a 	sub	r5,r5,r6
    4abc:	2a4b883a 	add	r5,r5,r9
    4ac0:	2008d43a 	srli	r4,r4,16
    4ac4:	1887883a 	add	r3,r3,r2
    4ac8:	280dd43a 	srai	r6,r5,16
    4acc:	18bfffcc 	andi	r2,r3,65535
    4ad0:	2089c83a 	sub	r4,r4,r2
    4ad4:	2189883a 	add	r4,r4,r6
    4ad8:	3900008d 	sth	r4,2(r7)
    4adc:	3940000d 	sth	r5,0(r7)
    4ae0:	180cd43a 	srli	r6,r3,16
    4ae4:	39c00104 	addi	r7,r7,4
    4ae8:	2013d43a 	srai	r9,r4,16
    4aec:	923fe72e 	bgeu	r18,r8,4a8c <quorem+0x178>
    4af0:	e03fa61e 	bne	fp,zero,498c <quorem+0x78>
    4af4:	b0ffff04 	addi	r3,r22,-4
    4af8:	98c0082e 	bgeu	r19,r3,4b1c <quorem+0x208>
    4afc:	b0bfff17 	ldw	r2,-4(r22)
    4b00:	10000326 	beq	r2,zero,4b10 <quorem+0x1fc>
    4b04:	00000506 	br	4b1c <quorem+0x208>
    4b08:	18800017 	ldw	r2,0(r3)
    4b0c:	1000031e 	bne	r2,zero,4b1c <quorem+0x208>
    4b10:	18ffff04 	addi	r3,r3,-4
    4b14:	8c7fffc4 	addi	r17,r17,-1
    4b18:	98fffb36 	bltu	r19,r3,4b08 <quorem+0x1f4>
    4b1c:	bc400415 	stw	r17,16(r23)
    4b20:	003f9a06 	br	498c <quorem+0x78>
    4b24:	0005883a 	mov	r2,zero
    4b28:	003fc806 	br	4a4c <quorem+0x138>

00004b2c <_dtoa_r>:
    4b2c:	22001017 	ldw	r8,64(r4)
    4b30:	deffda04 	addi	sp,sp,-152
    4b34:	dd402115 	stw	r21,132(sp)
    4b38:	dd002015 	stw	r20,128(sp)
    4b3c:	dc801e15 	stw	r18,120(sp)
    4b40:	dc401d15 	stw	r17,116(sp)
    4b44:	dfc02515 	stw	ra,148(sp)
    4b48:	df002415 	stw	fp,144(sp)
    4b4c:	ddc02315 	stw	r23,140(sp)
    4b50:	dd802215 	stw	r22,136(sp)
    4b54:	dcc01f15 	stw	r19,124(sp)
    4b58:	dc001c15 	stw	r16,112(sp)
    4b5c:	d9001615 	stw	r4,88(sp)
    4b60:	3023883a 	mov	r17,r6
    4b64:	2829883a 	mov	r20,r5
    4b68:	d9c01715 	stw	r7,92(sp)
    4b6c:	dc802817 	ldw	r18,160(sp)
    4b70:	302b883a 	mov	r21,r6
    4b74:	40000a26 	beq	r8,zero,4ba0 <_dtoa_r+0x74>
    4b78:	20801117 	ldw	r2,68(r4)
    4b7c:	400b883a 	mov	r5,r8
    4b80:	40800115 	stw	r2,4(r8)
    4b84:	20c01117 	ldw	r3,68(r4)
    4b88:	00800044 	movi	r2,1
    4b8c:	10c4983a 	sll	r2,r2,r3
    4b90:	40800215 	stw	r2,8(r8)
    4b94:	00080280 	call	8028 <_Bfree>
    4b98:	d8c01617 	ldw	r3,88(sp)
    4b9c:	18001015 	stw	zero,64(r3)
    4ba0:	8800a316 	blt	r17,zero,4e30 <_dtoa_r+0x304>
    4ba4:	90000015 	stw	zero,0(r18)
    4ba8:	a8dffc2c 	andhi	r3,r21,32752
    4bac:	009ffc34 	movhi	r2,32752
    4bb0:	18809126 	beq	r3,r2,4df8 <_dtoa_r+0x2cc>
    4bb4:	000d883a 	mov	r6,zero
    4bb8:	000f883a 	mov	r7,zero
    4bbc:	a009883a 	mov	r4,r20
    4bc0:	a80b883a 	mov	r5,r21
    4bc4:	dd001215 	stw	r20,72(sp)
    4bc8:	dd401315 	stw	r21,76(sp)
    4bcc:	000ea280 	call	ea28 <__nedf2>
    4bd0:	1000171e 	bne	r2,zero,4c30 <_dtoa_r+0x104>
    4bd4:	d9802717 	ldw	r6,156(sp)
    4bd8:	00800044 	movi	r2,1
    4bdc:	30800015 	stw	r2,0(r6)
    4be0:	d8802917 	ldw	r2,164(sp)
    4be4:	10029b26 	beq	r2,zero,5654 <_dtoa_r+0xb28>
    4be8:	d9002917 	ldw	r4,164(sp)
    4bec:	00800074 	movhi	r2,1
    4bf0:	1088b444 	addi	r2,r2,8913
    4bf4:	10ffffc4 	addi	r3,r2,-1
    4bf8:	20800015 	stw	r2,0(r4)
    4bfc:	1805883a 	mov	r2,r3
    4c00:	dfc02517 	ldw	ra,148(sp)
    4c04:	df002417 	ldw	fp,144(sp)
    4c08:	ddc02317 	ldw	r23,140(sp)
    4c0c:	dd802217 	ldw	r22,136(sp)
    4c10:	dd402117 	ldw	r21,132(sp)
    4c14:	dd002017 	ldw	r20,128(sp)
    4c18:	dcc01f17 	ldw	r19,124(sp)
    4c1c:	dc801e17 	ldw	r18,120(sp)
    4c20:	dc401d17 	ldw	r17,116(sp)
    4c24:	dc001c17 	ldw	r16,112(sp)
    4c28:	dec02604 	addi	sp,sp,152
    4c2c:	f800283a 	ret
    4c30:	d9001617 	ldw	r4,88(sp)
    4c34:	d9401217 	ldw	r5,72(sp)
    4c38:	d8800104 	addi	r2,sp,4
    4c3c:	a80d883a 	mov	r6,r21
    4c40:	d9c00204 	addi	r7,sp,8
    4c44:	d8800015 	stw	r2,0(sp)
    4c48:	00086640 	call	8664 <__d2b>
    4c4c:	d8800715 	stw	r2,28(sp)
    4c50:	a804d53a 	srli	r2,r21,20
    4c54:	1101ffcc 	andi	r4,r2,2047
    4c58:	20008626 	beq	r4,zero,4e74 <_dtoa_r+0x348>
    4c5c:	d8c01217 	ldw	r3,72(sp)
    4c60:	00800434 	movhi	r2,16
    4c64:	10bfffc4 	addi	r2,r2,-1
    4c68:	ddc00117 	ldw	r23,4(sp)
    4c6c:	a884703a 	and	r2,r21,r2
    4c70:	1811883a 	mov	r8,r3
    4c74:	124ffc34 	orhi	r9,r2,16368
    4c78:	25bf0044 	addi	r22,r4,-1023
    4c7c:	d8000815 	stw	zero,32(sp)
    4c80:	0005883a 	mov	r2,zero
    4c84:	00cffe34 	movhi	r3,16376
    4c88:	480b883a 	mov	r5,r9
    4c8c:	4009883a 	mov	r4,r8
    4c90:	180f883a 	mov	r7,r3
    4c94:	100d883a 	mov	r6,r2
    4c98:	000e2900 	call	e290 <__subdf3>
    4c9c:	0218dbf4 	movhi	r8,25455
    4ca0:	4210d844 	addi	r8,r8,17249
    4ca4:	024ff4f4 	movhi	r9,16339
    4ca8:	4a61e9c4 	addi	r9,r9,-30809
    4cac:	480f883a 	mov	r7,r9
    4cb0:	400d883a 	mov	r6,r8
    4cb4:	180b883a 	mov	r5,r3
    4cb8:	1009883a 	mov	r4,r2
    4cbc:	000e3840 	call	e384 <__muldf3>
    4cc0:	0222d874 	movhi	r8,35681
    4cc4:	42322cc4 	addi	r8,r8,-14157
    4cc8:	024ff1f4 	movhi	r9,16327
    4ccc:	4a628a04 	addi	r9,r9,-30168
    4cd0:	480f883a 	mov	r7,r9
    4cd4:	400d883a 	mov	r6,r8
    4cd8:	180b883a 	mov	r5,r3
    4cdc:	1009883a 	mov	r4,r2
    4ce0:	000e3100 	call	e310 <__adddf3>
    4ce4:	b009883a 	mov	r4,r22
    4ce8:	1021883a 	mov	r16,r2
    4cec:	1823883a 	mov	r17,r3
    4cf0:	000ecd00 	call	ecd0 <__floatsidf>
    4cf4:	021427f4 	movhi	r8,20639
    4cf8:	421e7ec4 	addi	r8,r8,31227
    4cfc:	024ff4f4 	movhi	r9,16339
    4d00:	4a5104c4 	addi	r9,r9,17427
    4d04:	480f883a 	mov	r7,r9
    4d08:	400d883a 	mov	r6,r8
    4d0c:	180b883a 	mov	r5,r3
    4d10:	1009883a 	mov	r4,r2
    4d14:	000e3840 	call	e384 <__muldf3>
    4d18:	180f883a 	mov	r7,r3
    4d1c:	880b883a 	mov	r5,r17
    4d20:	100d883a 	mov	r6,r2
    4d24:	8009883a 	mov	r4,r16
    4d28:	000e3100 	call	e310 <__adddf3>
    4d2c:	1009883a 	mov	r4,r2
    4d30:	180b883a 	mov	r5,r3
    4d34:	1021883a 	mov	r16,r2
    4d38:	1823883a 	mov	r17,r3
    4d3c:	000edc80 	call	edc8 <__fixdfsi>
    4d40:	000d883a 	mov	r6,zero
    4d44:	000f883a 	mov	r7,zero
    4d48:	8009883a 	mov	r4,r16
    4d4c:	880b883a 	mov	r5,r17
    4d50:	d8800d15 	stw	r2,52(sp)
    4d54:	000ebc00 	call	ebc0 <__ltdf2>
    4d58:	10031716 	blt	r2,zero,59b8 <_dtoa_r+0xe8c>
    4d5c:	d8c00d17 	ldw	r3,52(sp)
    4d60:	00800584 	movi	r2,22
    4d64:	10c1482e 	bgeu	r2,r3,5288 <_dtoa_r+0x75c>
    4d68:	01000044 	movi	r4,1
    4d6c:	d9000c15 	stw	r4,48(sp)
    4d70:	bd85c83a 	sub	r2,r23,r22
    4d74:	11bfffc4 	addi	r6,r2,-1
    4d78:	30030b16 	blt	r6,zero,59a8 <_dtoa_r+0xe7c>
    4d7c:	d9800a15 	stw	r6,40(sp)
    4d80:	d8001115 	stw	zero,68(sp)
    4d84:	d8c00d17 	ldw	r3,52(sp)
    4d88:	1802ff16 	blt	r3,zero,5988 <_dtoa_r+0xe5c>
    4d8c:	d9000a17 	ldw	r4,40(sp)
    4d90:	d8c00915 	stw	r3,36(sp)
    4d94:	d8001015 	stw	zero,64(sp)
    4d98:	20c9883a 	add	r4,r4,r3
    4d9c:	d9000a15 	stw	r4,40(sp)
    4da0:	d9001717 	ldw	r4,92(sp)
    4da4:	00800244 	movi	r2,9
    4da8:	11004636 	bltu	r2,r4,4ec4 <_dtoa_r+0x398>
    4dac:	00800144 	movi	r2,5
    4db0:	11020416 	blt	r2,r4,55c4 <_dtoa_r+0xa98>
    4db4:	04400044 	movi	r17,1
    4db8:	d8c01717 	ldw	r3,92(sp)
    4dbc:	00800144 	movi	r2,5
    4dc0:	10c1ed36 	bltu	r2,r3,5578 <_dtoa_r+0xa4c>
    4dc4:	18c5883a 	add	r2,r3,r3
    4dc8:	1085883a 	add	r2,r2,r2
    4dcc:	00c00034 	movhi	r3,0
    4dd0:	18d37804 	addi	r3,r3,19936
    4dd4:	10c5883a 	add	r2,r2,r3
    4dd8:	11000017 	ldw	r4,0(r2)
    4ddc:	2000683a 	jmp	r4
    4de0:	00004ecc 	andi	zero,zero,315
    4de4:	00004ecc 	andi	zero,zero,315
    4de8:	000058cc 	andi	zero,zero,355
    4dec:	000058a4 	muli	zero,zero,354
    4df0:	000058e8 	cmpgeui	zero,zero,355
    4df4:	000058f4 	movhi	zero,355
    4df8:	d9002717 	ldw	r4,156(sp)
    4dfc:	0089c3c4 	movi	r2,9999
    4e00:	20800015 	stw	r2,0(r4)
    4e04:	a0001026 	beq	r20,zero,4e48 <_dtoa_r+0x31c>
    4e08:	00c00074 	movhi	r3,1
    4e0c:	18c96b04 	addi	r3,r3,9644
    4e10:	d9802917 	ldw	r6,164(sp)
    4e14:	303f7926 	beq	r6,zero,4bfc <_dtoa_r+0xd0>
    4e18:	188000c7 	ldb	r2,3(r3)
    4e1c:	190000c4 	addi	r4,r3,3
    4e20:	1000101e 	bne	r2,zero,4e64 <_dtoa_r+0x338>
    4e24:	d8802917 	ldw	r2,164(sp)
    4e28:	11000015 	stw	r4,0(r2)
    4e2c:	003f7306 	br	4bfc <_dtoa_r+0xd0>
    4e30:	00a00034 	movhi	r2,32768
    4e34:	10bfffc4 	addi	r2,r2,-1
    4e38:	00c00044 	movi	r3,1
    4e3c:	88aa703a 	and	r21,r17,r2
    4e40:	90c00015 	stw	r3,0(r18)
    4e44:	003f5806 	br	4ba8 <_dtoa_r+0x7c>
    4e48:	00800434 	movhi	r2,16
    4e4c:	10bfffc4 	addi	r2,r2,-1
    4e50:	a884703a 	and	r2,r21,r2
    4e54:	103fec1e 	bne	r2,zero,4e08 <_dtoa_r+0x2dc>
    4e58:	00c00074 	movhi	r3,1
    4e5c:	18c96804 	addi	r3,r3,9632
    4e60:	003feb06 	br	4e10 <_dtoa_r+0x2e4>
    4e64:	d8802917 	ldw	r2,164(sp)
    4e68:	19000204 	addi	r4,r3,8
    4e6c:	11000015 	stw	r4,0(r2)
    4e70:	003f6206 	br	4bfc <_dtoa_r+0xd0>
    4e74:	ddc00117 	ldw	r23,4(sp)
    4e78:	d8800217 	ldw	r2,8(sp)
    4e7c:	01000804 	movi	r4,32
    4e80:	b8c10c84 	addi	r3,r23,1074
    4e84:	18a3883a 	add	r17,r3,r2
    4e88:	2441b80e 	bge	r4,r17,556c <_dtoa_r+0xa40>
    4e8c:	00c01004 	movi	r3,64
    4e90:	1c47c83a 	sub	r3,r3,r17
    4e94:	88bff804 	addi	r2,r17,-32
    4e98:	a8c6983a 	sll	r3,r21,r3
    4e9c:	a084d83a 	srl	r2,r20,r2
    4ea0:	1888b03a 	or	r4,r3,r2
    4ea4:	000ef140 	call	ef14 <__floatunsidf>
    4ea8:	1011883a 	mov	r8,r2
    4eac:	00bf8434 	movhi	r2,65040
    4eb0:	01000044 	movi	r4,1
    4eb4:	10d3883a 	add	r9,r2,r3
    4eb8:	8dbef344 	addi	r22,r17,-1075
    4ebc:	d9000815 	stw	r4,32(sp)
    4ec0:	003f6f06 	br	4c80 <_dtoa_r+0x154>
    4ec4:	d8001715 	stw	zero,92(sp)
    4ec8:	04400044 	movi	r17,1
    4ecc:	00bfffc4 	movi	r2,-1
    4ed0:	00c00044 	movi	r3,1
    4ed4:	d8800e15 	stw	r2,56(sp)
    4ed8:	d8002615 	stw	zero,152(sp)
    4edc:	d8800f15 	stw	r2,60(sp)
    4ee0:	d8c00b15 	stw	r3,44(sp)
    4ee4:	1021883a 	mov	r16,r2
    4ee8:	d8801617 	ldw	r2,88(sp)
    4eec:	10001115 	stw	zero,68(r2)
    4ef0:	d8801617 	ldw	r2,88(sp)
    4ef4:	11401117 	ldw	r5,68(r2)
    4ef8:	1009883a 	mov	r4,r2
    4efc:	00085a80 	call	85a8 <_Balloc>
    4f00:	d8c01617 	ldw	r3,88(sp)
    4f04:	d8800515 	stw	r2,20(sp)
    4f08:	18801015 	stw	r2,64(r3)
    4f0c:	00800384 	movi	r2,14
    4f10:	14006836 	bltu	r2,r16,50b4 <_dtoa_r+0x588>
    4f14:	8805003a 	cmpeq	r2,r17,zero
    4f18:	1000661e 	bne	r2,zero,50b4 <_dtoa_r+0x588>
    4f1c:	d9000d17 	ldw	r4,52(sp)
    4f20:	0102300e 	bge	zero,r4,57e4 <_dtoa_r+0xcb8>
    4f24:	208003cc 	andi	r2,r4,15
    4f28:	100490fa 	slli	r2,r2,3
    4f2c:	2025d13a 	srai	r18,r4,4
    4f30:	00c00074 	movhi	r3,1
    4f34:	18c97d04 	addi	r3,r3,9716
    4f38:	10c5883a 	add	r2,r2,r3
    4f3c:	90c0040c 	andi	r3,r18,16
    4f40:	14000017 	ldw	r16,0(r2)
    4f44:	14400117 	ldw	r17,4(r2)
    4f48:	18036a1e 	bne	r3,zero,5cf4 <_dtoa_r+0x11c8>
    4f4c:	05800084 	movi	r22,2
    4f50:	90001026 	beq	r18,zero,4f94 <_dtoa_r+0x468>
    4f54:	04c00074 	movhi	r19,1
    4f58:	9cc9af04 	addi	r19,r19,9916
    4f5c:	9080004c 	andi	r2,r18,1
    4f60:	1005003a 	cmpeq	r2,r2,zero
    4f64:	1000081e 	bne	r2,zero,4f88 <_dtoa_r+0x45c>
    4f68:	99800017 	ldw	r6,0(r19)
    4f6c:	99c00117 	ldw	r7,4(r19)
    4f70:	880b883a 	mov	r5,r17
    4f74:	8009883a 	mov	r4,r16
    4f78:	000e3840 	call	e384 <__muldf3>
    4f7c:	1021883a 	mov	r16,r2
    4f80:	b5800044 	addi	r22,r22,1
    4f84:	1823883a 	mov	r17,r3
    4f88:	9025d07a 	srai	r18,r18,1
    4f8c:	9cc00204 	addi	r19,r19,8
    4f90:	903ff21e 	bne	r18,zero,4f5c <_dtoa_r+0x430>
    4f94:	a80b883a 	mov	r5,r21
    4f98:	a009883a 	mov	r4,r20
    4f9c:	880f883a 	mov	r7,r17
    4fa0:	800d883a 	mov	r6,r16
    4fa4:	000e7480 	call	e748 <__divdf3>
    4fa8:	1029883a 	mov	r20,r2
    4fac:	182b883a 	mov	r21,r3
    4fb0:	d8c00c17 	ldw	r3,48(sp)
    4fb4:	1805003a 	cmpeq	r2,r3,zero
    4fb8:	1000081e 	bne	r2,zero,4fdc <_dtoa_r+0x4b0>
    4fbc:	0005883a 	mov	r2,zero
    4fc0:	00cffc34 	movhi	r3,16368
    4fc4:	180f883a 	mov	r7,r3
    4fc8:	a009883a 	mov	r4,r20
    4fcc:	a80b883a 	mov	r5,r21
    4fd0:	100d883a 	mov	r6,r2
    4fd4:	000ebc00 	call	ebc0 <__ltdf2>
    4fd8:	1003fe16 	blt	r2,zero,5fd4 <_dtoa_r+0x14a8>
    4fdc:	b009883a 	mov	r4,r22
    4fe0:	000ecd00 	call	ecd0 <__floatsidf>
    4fe4:	180b883a 	mov	r5,r3
    4fe8:	1009883a 	mov	r4,r2
    4fec:	a00d883a 	mov	r6,r20
    4ff0:	a80f883a 	mov	r7,r21
    4ff4:	000e3840 	call	e384 <__muldf3>
    4ff8:	0011883a 	mov	r8,zero
    4ffc:	02500734 	movhi	r9,16412
    5000:	1009883a 	mov	r4,r2
    5004:	180b883a 	mov	r5,r3
    5008:	480f883a 	mov	r7,r9
    500c:	400d883a 	mov	r6,r8
    5010:	000e3100 	call	e310 <__adddf3>
    5014:	d9000f17 	ldw	r4,60(sp)
    5018:	102d883a 	mov	r22,r2
    501c:	00bf3034 	movhi	r2,64704
    5020:	18b9883a 	add	fp,r3,r2
    5024:	e02f883a 	mov	r23,fp
    5028:	20028f1e 	bne	r4,zero,5a68 <_dtoa_r+0xf3c>
    502c:	0005883a 	mov	r2,zero
    5030:	00d00534 	movhi	r3,16404
    5034:	a009883a 	mov	r4,r20
    5038:	a80b883a 	mov	r5,r21
    503c:	180f883a 	mov	r7,r3
    5040:	100d883a 	mov	r6,r2
    5044:	000e2900 	call	e290 <__subdf3>
    5048:	1009883a 	mov	r4,r2
    504c:	e00f883a 	mov	r7,fp
    5050:	180b883a 	mov	r5,r3
    5054:	b00d883a 	mov	r6,r22
    5058:	1025883a 	mov	r18,r2
    505c:	1827883a 	mov	r19,r3
    5060:	000eab00 	call	eab0 <__gtdf2>
    5064:	00834f16 	blt	zero,r2,5da4 <_dtoa_r+0x1278>
    5068:	e0e0003c 	xorhi	r3,fp,32768
    506c:	9009883a 	mov	r4,r18
    5070:	980b883a 	mov	r5,r19
    5074:	180f883a 	mov	r7,r3
    5078:	b00d883a 	mov	r6,r22
    507c:	000ebc00 	call	ebc0 <__ltdf2>
    5080:	1000080e 	bge	r2,zero,50a4 <_dtoa_r+0x578>
    5084:	0027883a 	mov	r19,zero
    5088:	0025883a 	mov	r18,zero
    508c:	d8802617 	ldw	r2,152(sp)
    5090:	df000517 	ldw	fp,20(sp)
    5094:	d8000615 	stw	zero,24(sp)
    5098:	0084303a 	nor	r2,zero,r2
    509c:	d8800d15 	stw	r2,52(sp)
    50a0:	00019b06 	br	5710 <_dtoa_r+0xbe4>
    50a4:	d9801217 	ldw	r6,72(sp)
    50a8:	d8801317 	ldw	r2,76(sp)
    50ac:	3029883a 	mov	r20,r6
    50b0:	102b883a 	mov	r21,r2
    50b4:	d8c00217 	ldw	r3,8(sp)
    50b8:	18008516 	blt	r3,zero,52d0 <_dtoa_r+0x7a4>
    50bc:	d9000d17 	ldw	r4,52(sp)
    50c0:	00800384 	movi	r2,14
    50c4:	11008216 	blt	r2,r4,52d0 <_dtoa_r+0x7a4>
    50c8:	200490fa 	slli	r2,r4,3
    50cc:	d9802617 	ldw	r6,152(sp)
    50d0:	00c00074 	movhi	r3,1
    50d4:	18c97d04 	addi	r3,r3,9716
    50d8:	10c5883a 	add	r2,r2,r3
    50dc:	14800017 	ldw	r18,0(r2)
    50e0:	14c00117 	ldw	r19,4(r2)
    50e4:	30031e16 	blt	r6,zero,5d60 <_dtoa_r+0x1234>
    50e8:	d9000517 	ldw	r4,20(sp)
    50ec:	d8c00f17 	ldw	r3,60(sp)
    50f0:	a823883a 	mov	r17,r21
    50f4:	a021883a 	mov	r16,r20
    50f8:	192b883a 	add	r21,r3,r4
    50fc:	2039883a 	mov	fp,r4
    5100:	00000f06 	br	5140 <_dtoa_r+0x614>
    5104:	0005883a 	mov	r2,zero
    5108:	00d00934 	movhi	r3,16420
    510c:	5009883a 	mov	r4,r10
    5110:	580b883a 	mov	r5,r11
    5114:	180f883a 	mov	r7,r3
    5118:	100d883a 	mov	r6,r2
    511c:	000e3840 	call	e384 <__muldf3>
    5120:	180b883a 	mov	r5,r3
    5124:	000d883a 	mov	r6,zero
    5128:	000f883a 	mov	r7,zero
    512c:	1009883a 	mov	r4,r2
    5130:	1021883a 	mov	r16,r2
    5134:	1823883a 	mov	r17,r3
    5138:	000ea280 	call	ea28 <__nedf2>
    513c:	10004526 	beq	r2,zero,5254 <_dtoa_r+0x728>
    5140:	900d883a 	mov	r6,r18
    5144:	980f883a 	mov	r7,r19
    5148:	8009883a 	mov	r4,r16
    514c:	880b883a 	mov	r5,r17
    5150:	000e7480 	call	e748 <__divdf3>
    5154:	180b883a 	mov	r5,r3
    5158:	1009883a 	mov	r4,r2
    515c:	000edc80 	call	edc8 <__fixdfsi>
    5160:	1009883a 	mov	r4,r2
    5164:	1029883a 	mov	r20,r2
    5168:	000ecd00 	call	ecd0 <__floatsidf>
    516c:	180f883a 	mov	r7,r3
    5170:	9009883a 	mov	r4,r18
    5174:	980b883a 	mov	r5,r19
    5178:	100d883a 	mov	r6,r2
    517c:	000e3840 	call	e384 <__muldf3>
    5180:	180f883a 	mov	r7,r3
    5184:	880b883a 	mov	r5,r17
    5188:	8009883a 	mov	r4,r16
    518c:	100d883a 	mov	r6,r2
    5190:	000e2900 	call	e290 <__subdf3>
    5194:	1015883a 	mov	r10,r2
    5198:	a0800c04 	addi	r2,r20,48
    519c:	e0800005 	stb	r2,0(fp)
    51a0:	e7000044 	addi	fp,fp,1
    51a4:	1817883a 	mov	r11,r3
    51a8:	e57fd61e 	bne	fp,r21,5104 <_dtoa_r+0x5d8>
    51ac:	500d883a 	mov	r6,r10
    51b0:	180f883a 	mov	r7,r3
    51b4:	5009883a 	mov	r4,r10
    51b8:	180b883a 	mov	r5,r3
    51bc:	000e3100 	call	e310 <__adddf3>
    51c0:	100d883a 	mov	r6,r2
    51c4:	9009883a 	mov	r4,r18
    51c8:	980b883a 	mov	r5,r19
    51cc:	180f883a 	mov	r7,r3
    51d0:	1021883a 	mov	r16,r2
    51d4:	1823883a 	mov	r17,r3
    51d8:	000ebc00 	call	ebc0 <__ltdf2>
    51dc:	10000816 	blt	r2,zero,5200 <_dtoa_r+0x6d4>
    51e0:	980b883a 	mov	r5,r19
    51e4:	800d883a 	mov	r6,r16
    51e8:	880f883a 	mov	r7,r17
    51ec:	9009883a 	mov	r4,r18
    51f0:	000e9a00 	call	e9a0 <__eqdf2>
    51f4:	1000171e 	bne	r2,zero,5254 <_dtoa_r+0x728>
    51f8:	a080004c 	andi	r2,r20,1
    51fc:	10001526 	beq	r2,zero,5254 <_dtoa_r+0x728>
    5200:	d8800d17 	ldw	r2,52(sp)
    5204:	d8800415 	stw	r2,16(sp)
    5208:	e009883a 	mov	r4,fp
    520c:	213fffc4 	addi	r4,r4,-1
    5210:	20c00007 	ldb	r3,0(r4)
    5214:	00800e44 	movi	r2,57
    5218:	1880081e 	bne	r3,r2,523c <_dtoa_r+0x710>
    521c:	d8800517 	ldw	r2,20(sp)
    5220:	113ffa1e 	bne	r2,r4,520c <_dtoa_r+0x6e0>
    5224:	d8c00417 	ldw	r3,16(sp)
    5228:	d9800517 	ldw	r6,20(sp)
    522c:	00800c04 	movi	r2,48
    5230:	18c00044 	addi	r3,r3,1
    5234:	d8c00415 	stw	r3,16(sp)
    5238:	30800005 	stb	r2,0(r6)
    523c:	20800003 	ldbu	r2,0(r4)
    5240:	d8c00417 	ldw	r3,16(sp)
    5244:	27000044 	addi	fp,r4,1
    5248:	10800044 	addi	r2,r2,1
    524c:	d8c00d15 	stw	r3,52(sp)
    5250:	20800005 	stb	r2,0(r4)
    5254:	d9001617 	ldw	r4,88(sp)
    5258:	d9400717 	ldw	r5,28(sp)
    525c:	00080280 	call	8028 <_Bfree>
    5260:	e0000005 	stb	zero,0(fp)
    5264:	d9800d17 	ldw	r6,52(sp)
    5268:	d8c02717 	ldw	r3,156(sp)
    526c:	d9002917 	ldw	r4,164(sp)
    5270:	30800044 	addi	r2,r6,1
    5274:	18800015 	stw	r2,0(r3)
    5278:	20029c26 	beq	r4,zero,5cec <_dtoa_r+0x11c0>
    527c:	d8c00517 	ldw	r3,20(sp)
    5280:	27000015 	stw	fp,0(r4)
    5284:	003e5d06 	br	4bfc <_dtoa_r+0xd0>
    5288:	d9800d17 	ldw	r6,52(sp)
    528c:	00c00074 	movhi	r3,1
    5290:	18c97d04 	addi	r3,r3,9716
    5294:	d9001217 	ldw	r4,72(sp)
    5298:	300490fa 	slli	r2,r6,3
    529c:	d9401317 	ldw	r5,76(sp)
    52a0:	10c5883a 	add	r2,r2,r3
    52a4:	12000017 	ldw	r8,0(r2)
    52a8:	12400117 	ldw	r9,4(r2)
    52ac:	400d883a 	mov	r6,r8
    52b0:	480f883a 	mov	r7,r9
    52b4:	000ebc00 	call	ebc0 <__ltdf2>
    52b8:	1000030e 	bge	r2,zero,52c8 <_dtoa_r+0x79c>
    52bc:	d8800d17 	ldw	r2,52(sp)
    52c0:	10bfffc4 	addi	r2,r2,-1
    52c4:	d8800d15 	stw	r2,52(sp)
    52c8:	d8000c15 	stw	zero,48(sp)
    52cc:	003ea806 	br	4d70 <_dtoa_r+0x244>
    52d0:	d9000b17 	ldw	r4,44(sp)
    52d4:	202cc03a 	cmpne	r22,r4,zero
    52d8:	b000c71e 	bne	r22,zero,55f8 <_dtoa_r+0xacc>
    52dc:	dc001117 	ldw	r16,68(sp)
    52e0:	dc801017 	ldw	r18,64(sp)
    52e4:	0027883a 	mov	r19,zero
    52e8:	04000b0e 	bge	zero,r16,5318 <_dtoa_r+0x7ec>
    52ec:	d8c00a17 	ldw	r3,40(sp)
    52f0:	00c0090e 	bge	zero,r3,5318 <_dtoa_r+0x7ec>
    52f4:	8005883a 	mov	r2,r16
    52f8:	1c011316 	blt	r3,r16,5748 <_dtoa_r+0xc1c>
    52fc:	d9000a17 	ldw	r4,40(sp)
    5300:	d9801117 	ldw	r6,68(sp)
    5304:	80a1c83a 	sub	r16,r16,r2
    5308:	2089c83a 	sub	r4,r4,r2
    530c:	308dc83a 	sub	r6,r6,r2
    5310:	d9000a15 	stw	r4,40(sp)
    5314:	d9801115 	stw	r6,68(sp)
    5318:	d8801017 	ldw	r2,64(sp)
    531c:	0080150e 	bge	zero,r2,5374 <_dtoa_r+0x848>
    5320:	d8c00b17 	ldw	r3,44(sp)
    5324:	1805003a 	cmpeq	r2,r3,zero
    5328:	1001c91e 	bne	r2,zero,5a50 <_dtoa_r+0xf24>
    532c:	04800e0e 	bge	zero,r18,5368 <_dtoa_r+0x83c>
    5330:	d9001617 	ldw	r4,88(sp)
    5334:	980b883a 	mov	r5,r19
    5338:	900d883a 	mov	r6,r18
    533c:	0008ddc0 	call	8ddc <__pow5mult>
    5340:	d9001617 	ldw	r4,88(sp)
    5344:	d9800717 	ldw	r6,28(sp)
    5348:	100b883a 	mov	r5,r2
    534c:	1027883a 	mov	r19,r2
    5350:	0008ab80 	call	8ab8 <__multiply>
    5354:	d9001617 	ldw	r4,88(sp)
    5358:	d9400717 	ldw	r5,28(sp)
    535c:	1023883a 	mov	r17,r2
    5360:	00080280 	call	8028 <_Bfree>
    5364:	dc400715 	stw	r17,28(sp)
    5368:	d9001017 	ldw	r4,64(sp)
    536c:	248dc83a 	sub	r6,r4,r18
    5370:	30010e1e 	bne	r6,zero,57ac <_dtoa_r+0xc80>
    5374:	d9001617 	ldw	r4,88(sp)
    5378:	04400044 	movi	r17,1
    537c:	880b883a 	mov	r5,r17
    5380:	0008ca00 	call	8ca0 <__i2b>
    5384:	d9800917 	ldw	r6,36(sp)
    5388:	1025883a 	mov	r18,r2
    538c:	0180040e 	bge	zero,r6,53a0 <_dtoa_r+0x874>
    5390:	d9001617 	ldw	r4,88(sp)
    5394:	100b883a 	mov	r5,r2
    5398:	0008ddc0 	call	8ddc <__pow5mult>
    539c:	1025883a 	mov	r18,r2
    53a0:	d8801717 	ldw	r2,92(sp)
    53a4:	8880f30e 	bge	r17,r2,5774 <_dtoa_r+0xc48>
    53a8:	0023883a 	mov	r17,zero
    53ac:	d9800917 	ldw	r6,36(sp)
    53b0:	30019e1e 	bne	r6,zero,5a2c <_dtoa_r+0xf00>
    53b4:	00c00044 	movi	r3,1
    53b8:	d9000a17 	ldw	r4,40(sp)
    53bc:	20c5883a 	add	r2,r4,r3
    53c0:	10c007cc 	andi	r3,r2,31
    53c4:	1800841e 	bne	r3,zero,55d8 <_dtoa_r+0xaac>
    53c8:	00800704 	movi	r2,28
    53cc:	d9000a17 	ldw	r4,40(sp)
    53d0:	d9801117 	ldw	r6,68(sp)
    53d4:	80a1883a 	add	r16,r16,r2
    53d8:	2089883a 	add	r4,r4,r2
    53dc:	308d883a 	add	r6,r6,r2
    53e0:	d9000a15 	stw	r4,40(sp)
    53e4:	d9801115 	stw	r6,68(sp)
    53e8:	d8801117 	ldw	r2,68(sp)
    53ec:	0080050e 	bge	zero,r2,5404 <_dtoa_r+0x8d8>
    53f0:	d9400717 	ldw	r5,28(sp)
    53f4:	d9001617 	ldw	r4,88(sp)
    53f8:	100d883a 	mov	r6,r2
    53fc:	000896c0 	call	896c <__lshift>
    5400:	d8800715 	stw	r2,28(sp)
    5404:	d8c00a17 	ldw	r3,40(sp)
    5408:	00c0050e 	bge	zero,r3,5420 <_dtoa_r+0x8f4>
    540c:	d9001617 	ldw	r4,88(sp)
    5410:	900b883a 	mov	r5,r18
    5414:	180d883a 	mov	r6,r3
    5418:	000896c0 	call	896c <__lshift>
    541c:	1025883a 	mov	r18,r2
    5420:	d9000c17 	ldw	r4,48(sp)
    5424:	2005003a 	cmpeq	r2,r4,zero
    5428:	10016f26 	beq	r2,zero,59e8 <_dtoa_r+0xebc>
    542c:	d9000f17 	ldw	r4,60(sp)
    5430:	0102170e 	bge	zero,r4,5c90 <_dtoa_r+0x1164>
    5434:	d9800b17 	ldw	r6,44(sp)
    5438:	3005003a 	cmpeq	r2,r6,zero
    543c:	1000881e 	bne	r2,zero,5660 <_dtoa_r+0xb34>
    5440:	0400050e 	bge	zero,r16,5458 <_dtoa_r+0x92c>
    5444:	d9001617 	ldw	r4,88(sp)
    5448:	980b883a 	mov	r5,r19
    544c:	800d883a 	mov	r6,r16
    5450:	000896c0 	call	896c <__lshift>
    5454:	1027883a 	mov	r19,r2
    5458:	8804c03a 	cmpne	r2,r17,zero
    545c:	1002541e 	bne	r2,zero,5db0 <_dtoa_r+0x1284>
    5460:	980b883a 	mov	r5,r19
    5464:	dd800517 	ldw	r22,20(sp)
    5468:	dcc00615 	stw	r19,24(sp)
    546c:	a700004c 	andi	fp,r20,1
    5470:	2827883a 	mov	r19,r5
    5474:	d9000717 	ldw	r4,28(sp)
    5478:	900b883a 	mov	r5,r18
    547c:	00049140 	call	4914 <quorem>
    5480:	d9000717 	ldw	r4,28(sp)
    5484:	d9400617 	ldw	r5,24(sp)
    5488:	1023883a 	mov	r17,r2
    548c:	8dc00c04 	addi	r23,r17,48
    5490:	00081840 	call	8184 <__mcmp>
    5494:	d9001617 	ldw	r4,88(sp)
    5498:	900b883a 	mov	r5,r18
    549c:	980d883a 	mov	r6,r19
    54a0:	1029883a 	mov	r20,r2
    54a4:	00087e00 	call	87e0 <__mdiff>
    54a8:	102b883a 	mov	r21,r2
    54ac:	10800317 	ldw	r2,12(r2)
    54b0:	1001281e 	bne	r2,zero,5954 <_dtoa_r+0xe28>
    54b4:	d9000717 	ldw	r4,28(sp)
    54b8:	a80b883a 	mov	r5,r21
    54bc:	00081840 	call	8184 <__mcmp>
    54c0:	d9001617 	ldw	r4,88(sp)
    54c4:	1021883a 	mov	r16,r2
    54c8:	a80b883a 	mov	r5,r21
    54cc:	00080280 	call	8028 <_Bfree>
    54d0:	8000041e 	bne	r16,zero,54e4 <_dtoa_r+0x9b8>
    54d4:	d8801717 	ldw	r2,92(sp)
    54d8:	1000021e 	bne	r2,zero,54e4 <_dtoa_r+0x9b8>
    54dc:	e004c03a 	cmpne	r2,fp,zero
    54e0:	10011726 	beq	r2,zero,5940 <_dtoa_r+0xe14>
    54e4:	a0010616 	blt	r20,zero,5900 <_dtoa_r+0xdd4>
    54e8:	a000041e 	bne	r20,zero,54fc <_dtoa_r+0x9d0>
    54ec:	d8c01717 	ldw	r3,92(sp)
    54f0:	1800021e 	bne	r3,zero,54fc <_dtoa_r+0x9d0>
    54f4:	e004c03a 	cmpne	r2,fp,zero
    54f8:	10010126 	beq	r2,zero,5900 <_dtoa_r+0xdd4>
    54fc:	04023d16 	blt	zero,r16,5df4 <_dtoa_r+0x12c8>
    5500:	b5c00005 	stb	r23,0(r22)
    5504:	d9800517 	ldw	r6,20(sp)
    5508:	d9000f17 	ldw	r4,60(sp)
    550c:	b5800044 	addi	r22,r22,1
    5510:	3105883a 	add	r2,r6,r4
    5514:	b0806526 	beq	r22,r2,56ac <_dtoa_r+0xb80>
    5518:	d9400717 	ldw	r5,28(sp)
    551c:	d9001617 	ldw	r4,88(sp)
    5520:	01800284 	movi	r6,10
    5524:	000f883a 	mov	r7,zero
    5528:	0008cdc0 	call	8cdc <__multadd>
    552c:	d8800715 	stw	r2,28(sp)
    5530:	d8800617 	ldw	r2,24(sp)
    5534:	14c10c26 	beq	r2,r19,5968 <_dtoa_r+0xe3c>
    5538:	d9400617 	ldw	r5,24(sp)
    553c:	d9001617 	ldw	r4,88(sp)
    5540:	01800284 	movi	r6,10
    5544:	000f883a 	mov	r7,zero
    5548:	0008cdc0 	call	8cdc <__multadd>
    554c:	d9001617 	ldw	r4,88(sp)
    5550:	980b883a 	mov	r5,r19
    5554:	01800284 	movi	r6,10
    5558:	000f883a 	mov	r7,zero
    555c:	d8800615 	stw	r2,24(sp)
    5560:	0008cdc0 	call	8cdc <__multadd>
    5564:	1027883a 	mov	r19,r2
    5568:	003fc206 	br	5474 <_dtoa_r+0x948>
    556c:	2445c83a 	sub	r2,r4,r17
    5570:	a088983a 	sll	r4,r20,r2
    5574:	003e4b06 	br	4ea4 <_dtoa_r+0x378>
    5578:	01bfffc4 	movi	r6,-1
    557c:	00800044 	movi	r2,1
    5580:	d9800e15 	stw	r6,56(sp)
    5584:	d9800f15 	stw	r6,60(sp)
    5588:	d8800b15 	stw	r2,44(sp)
    558c:	d8c01617 	ldw	r3,88(sp)
    5590:	008005c4 	movi	r2,23
    5594:	18001115 	stw	zero,68(r3)
    5598:	1580082e 	bgeu	r2,r22,55bc <_dtoa_r+0xa90>
    559c:	00c00104 	movi	r3,4
    55a0:	0009883a 	mov	r4,zero
    55a4:	18c7883a 	add	r3,r3,r3
    55a8:	18800504 	addi	r2,r3,20
    55ac:	21000044 	addi	r4,r4,1
    55b0:	b0bffc2e 	bgeu	r22,r2,55a4 <_dtoa_r+0xa78>
    55b4:	d9801617 	ldw	r6,88(sp)
    55b8:	31001115 	stw	r4,68(r6)
    55bc:	dc000f17 	ldw	r16,60(sp)
    55c0:	003e4b06 	br	4ef0 <_dtoa_r+0x3c4>
    55c4:	d9801717 	ldw	r6,92(sp)
    55c8:	0023883a 	mov	r17,zero
    55cc:	31bfff04 	addi	r6,r6,-4
    55d0:	d9801715 	stw	r6,92(sp)
    55d4:	003df806 	br	4db8 <_dtoa_r+0x28c>
    55d8:	00800804 	movi	r2,32
    55dc:	10c9c83a 	sub	r4,r2,r3
    55e0:	00c00104 	movi	r3,4
    55e4:	19005a16 	blt	r3,r4,5750 <_dtoa_r+0xc24>
    55e8:	008000c4 	movi	r2,3
    55ec:	113f7e16 	blt	r2,r4,53e8 <_dtoa_r+0x8bc>
    55f0:	20800704 	addi	r2,r4,28
    55f4:	003f7506 	br	53cc <_dtoa_r+0x8a0>
    55f8:	d9801717 	ldw	r6,92(sp)
    55fc:	00800044 	movi	r2,1
    5600:	1180a10e 	bge	r2,r6,5888 <_dtoa_r+0xd5c>
    5604:	d9800f17 	ldw	r6,60(sp)
    5608:	d8c01017 	ldw	r3,64(sp)
    560c:	30bfffc4 	addi	r2,r6,-1
    5610:	1881c616 	blt	r3,r2,5d2c <_dtoa_r+0x1200>
    5614:	18a5c83a 	sub	r18,r3,r2
    5618:	d8800f17 	ldw	r2,60(sp)
    561c:	10026216 	blt	r2,zero,5fa8 <_dtoa_r+0x147c>
    5620:	dc001117 	ldw	r16,68(sp)
    5624:	1007883a 	mov	r3,r2
    5628:	d9800a17 	ldw	r6,40(sp)
    562c:	d8801117 	ldw	r2,68(sp)
    5630:	d9001617 	ldw	r4,88(sp)
    5634:	30cd883a 	add	r6,r6,r3
    5638:	10c5883a 	add	r2,r2,r3
    563c:	01400044 	movi	r5,1
    5640:	d9800a15 	stw	r6,40(sp)
    5644:	d8801115 	stw	r2,68(sp)
    5648:	0008ca00 	call	8ca0 <__i2b>
    564c:	1027883a 	mov	r19,r2
    5650:	003f2506 	br	52e8 <_dtoa_r+0x7bc>
    5654:	00c00074 	movhi	r3,1
    5658:	18c8b404 	addi	r3,r3,8912
    565c:	003d6706 	br	4bfc <_dtoa_r+0xd0>
    5660:	dd800517 	ldw	r22,20(sp)
    5664:	04000044 	movi	r16,1
    5668:	00000706 	br	5688 <_dtoa_r+0xb5c>
    566c:	d9400717 	ldw	r5,28(sp)
    5670:	d9001617 	ldw	r4,88(sp)
    5674:	01800284 	movi	r6,10
    5678:	000f883a 	mov	r7,zero
    567c:	0008cdc0 	call	8cdc <__multadd>
    5680:	d8800715 	stw	r2,28(sp)
    5684:	84000044 	addi	r16,r16,1
    5688:	d9000717 	ldw	r4,28(sp)
    568c:	900b883a 	mov	r5,r18
    5690:	00049140 	call	4914 <quorem>
    5694:	15c00c04 	addi	r23,r2,48
    5698:	b5c00005 	stb	r23,0(r22)
    569c:	d8c00f17 	ldw	r3,60(sp)
    56a0:	b5800044 	addi	r22,r22,1
    56a4:	80fff116 	blt	r16,r3,566c <_dtoa_r+0xb40>
    56a8:	d8000615 	stw	zero,24(sp)
    56ac:	d9400717 	ldw	r5,28(sp)
    56b0:	d9001617 	ldw	r4,88(sp)
    56b4:	01800044 	movi	r6,1
    56b8:	000896c0 	call	896c <__lshift>
    56bc:	1009883a 	mov	r4,r2
    56c0:	900b883a 	mov	r5,r18
    56c4:	d8800715 	stw	r2,28(sp)
    56c8:	00081840 	call	8184 <__mcmp>
    56cc:	00803c0e 	bge	zero,r2,57c0 <_dtoa_r+0xc94>
    56d0:	b009883a 	mov	r4,r22
    56d4:	213fffc4 	addi	r4,r4,-1
    56d8:	21400003 	ldbu	r5,0(r4)
    56dc:	00800e44 	movi	r2,57
    56e0:	28c03fcc 	andi	r3,r5,255
    56e4:	18c0201c 	xori	r3,r3,128
    56e8:	18ffe004 	addi	r3,r3,-128
    56ec:	1881981e 	bne	r3,r2,5d50 <_dtoa_r+0x1224>
    56f0:	d9800517 	ldw	r6,20(sp)
    56f4:	21bff71e 	bne	r4,r6,56d4 <_dtoa_r+0xba8>
    56f8:	d8800d17 	ldw	r2,52(sp)
    56fc:	37000044 	addi	fp,r6,1
    5700:	10800044 	addi	r2,r2,1
    5704:	d8800d15 	stw	r2,52(sp)
    5708:	00800c44 	movi	r2,49
    570c:	30800005 	stb	r2,0(r6)
    5710:	d9001617 	ldw	r4,88(sp)
    5714:	900b883a 	mov	r5,r18
    5718:	00080280 	call	8028 <_Bfree>
    571c:	983ecd26 	beq	r19,zero,5254 <_dtoa_r+0x728>
    5720:	d8c00617 	ldw	r3,24(sp)
    5724:	18000426 	beq	r3,zero,5738 <_dtoa_r+0xc0c>
    5728:	1cc00326 	beq	r3,r19,5738 <_dtoa_r+0xc0c>
    572c:	d9001617 	ldw	r4,88(sp)
    5730:	180b883a 	mov	r5,r3
    5734:	00080280 	call	8028 <_Bfree>
    5738:	d9001617 	ldw	r4,88(sp)
    573c:	980b883a 	mov	r5,r19
    5740:	00080280 	call	8028 <_Bfree>
    5744:	003ec306 	br	5254 <_dtoa_r+0x728>
    5748:	1805883a 	mov	r2,r3
    574c:	003eeb06 	br	52fc <_dtoa_r+0x7d0>
    5750:	d9800a17 	ldw	r6,40(sp)
    5754:	d8c01117 	ldw	r3,68(sp)
    5758:	20bfff04 	addi	r2,r4,-4
    575c:	308d883a 	add	r6,r6,r2
    5760:	1887883a 	add	r3,r3,r2
    5764:	80a1883a 	add	r16,r16,r2
    5768:	d9800a15 	stw	r6,40(sp)
    576c:	d8c01115 	stw	r3,68(sp)
    5770:	003f1d06 	br	53e8 <_dtoa_r+0x8bc>
    5774:	a03f0c1e 	bne	r20,zero,53a8 <_dtoa_r+0x87c>
    5778:	00800434 	movhi	r2,16
    577c:	10bfffc4 	addi	r2,r2,-1
    5780:	a884703a 	and	r2,r21,r2
    5784:	103f081e 	bne	r2,zero,53a8 <_dtoa_r+0x87c>
    5788:	a89ffc2c 	andhi	r2,r21,32752
    578c:	103f0626 	beq	r2,zero,53a8 <_dtoa_r+0x87c>
    5790:	d8c01117 	ldw	r3,68(sp)
    5794:	d9000a17 	ldw	r4,40(sp)
    5798:	18c00044 	addi	r3,r3,1
    579c:	21000044 	addi	r4,r4,1
    57a0:	d8c01115 	stw	r3,68(sp)
    57a4:	d9000a15 	stw	r4,40(sp)
    57a8:	003f0006 	br	53ac <_dtoa_r+0x880>
    57ac:	d9400717 	ldw	r5,28(sp)
    57b0:	d9001617 	ldw	r4,88(sp)
    57b4:	0008ddc0 	call	8ddc <__pow5mult>
    57b8:	d8800715 	stw	r2,28(sp)
    57bc:	003eed06 	br	5374 <_dtoa_r+0x848>
    57c0:	1000021e 	bne	r2,zero,57cc <_dtoa_r+0xca0>
    57c4:	b880004c 	andi	r2,r23,1
    57c8:	103fc11e 	bne	r2,zero,56d0 <_dtoa_r+0xba4>
    57cc:	b5bfffc4 	addi	r22,r22,-1
    57d0:	b0c00007 	ldb	r3,0(r22)
    57d4:	00800c04 	movi	r2,48
    57d8:	18bffc26 	beq	r3,r2,57cc <_dtoa_r+0xca0>
    57dc:	b7000044 	addi	fp,r22,1
    57e0:	003fcb06 	br	5710 <_dtoa_r+0xbe4>
    57e4:	d9800d17 	ldw	r6,52(sp)
    57e8:	018fc83a 	sub	r7,zero,r6
    57ec:	3801f726 	beq	r7,zero,5fcc <_dtoa_r+0x14a0>
    57f0:	398003cc 	andi	r6,r7,15
    57f4:	300c90fa 	slli	r6,r6,3
    57f8:	01400074 	movhi	r5,1
    57fc:	29497d04 	addi	r5,r5,9716
    5800:	d9001217 	ldw	r4,72(sp)
    5804:	314d883a 	add	r6,r6,r5
    5808:	30c00117 	ldw	r3,4(r6)
    580c:	30800017 	ldw	r2,0(r6)
    5810:	d9401317 	ldw	r5,76(sp)
    5814:	3821d13a 	srai	r16,r7,4
    5818:	100d883a 	mov	r6,r2
    581c:	180f883a 	mov	r7,r3
    5820:	000e3840 	call	e384 <__muldf3>
    5824:	1011883a 	mov	r8,r2
    5828:	1813883a 	mov	r9,r3
    582c:	1029883a 	mov	r20,r2
    5830:	182b883a 	mov	r21,r3
    5834:	8001e526 	beq	r16,zero,5fcc <_dtoa_r+0x14a0>
    5838:	05800084 	movi	r22,2
    583c:	04400074 	movhi	r17,1
    5840:	8c49af04 	addi	r17,r17,9916
    5844:	8080004c 	andi	r2,r16,1
    5848:	1005003a 	cmpeq	r2,r2,zero
    584c:	1000081e 	bne	r2,zero,5870 <_dtoa_r+0xd44>
    5850:	89800017 	ldw	r6,0(r17)
    5854:	89c00117 	ldw	r7,4(r17)
    5858:	480b883a 	mov	r5,r9
    585c:	4009883a 	mov	r4,r8
    5860:	000e3840 	call	e384 <__muldf3>
    5864:	1011883a 	mov	r8,r2
    5868:	b5800044 	addi	r22,r22,1
    586c:	1813883a 	mov	r9,r3
    5870:	8021d07a 	srai	r16,r16,1
    5874:	8c400204 	addi	r17,r17,8
    5878:	803ff21e 	bne	r16,zero,5844 <_dtoa_r+0xd18>
    587c:	4029883a 	mov	r20,r8
    5880:	482b883a 	mov	r21,r9
    5884:	003dca06 	br	4fb0 <_dtoa_r+0x484>
    5888:	d9000817 	ldw	r4,32(sp)
    588c:	2005003a 	cmpeq	r2,r4,zero
    5890:	1001f61e 	bne	r2,zero,606c <_dtoa_r+0x1540>
    5894:	dc001117 	ldw	r16,68(sp)
    5898:	dc801017 	ldw	r18,64(sp)
    589c:	18c10cc4 	addi	r3,r3,1075
    58a0:	003f6106 	br	5628 <_dtoa_r+0xafc>
    58a4:	d8000b15 	stw	zero,44(sp)
    58a8:	d9802617 	ldw	r6,152(sp)
    58ac:	d8c00d17 	ldw	r3,52(sp)
    58b0:	30800044 	addi	r2,r6,1
    58b4:	18ad883a 	add	r22,r3,r2
    58b8:	b13fffc4 	addi	r4,r22,-1
    58bc:	d9000e15 	stw	r4,56(sp)
    58c0:	0581f60e 	bge	zero,r22,609c <_dtoa_r+0x1570>
    58c4:	dd800f15 	stw	r22,60(sp)
    58c8:	003f3006 	br	558c <_dtoa_r+0xa60>
    58cc:	d8000b15 	stw	zero,44(sp)
    58d0:	d9002617 	ldw	r4,152(sp)
    58d4:	0101eb0e 	bge	zero,r4,6084 <_dtoa_r+0x1558>
    58d8:	202d883a 	mov	r22,r4
    58dc:	d9000e15 	stw	r4,56(sp)
    58e0:	d9000f15 	stw	r4,60(sp)
    58e4:	003f2906 	br	558c <_dtoa_r+0xa60>
    58e8:	01800044 	movi	r6,1
    58ec:	d9800b15 	stw	r6,44(sp)
    58f0:	003ff706 	br	58d0 <_dtoa_r+0xda4>
    58f4:	01000044 	movi	r4,1
    58f8:	d9000b15 	stw	r4,44(sp)
    58fc:	003fea06 	br	58a8 <_dtoa_r+0xd7c>
    5900:	04000c0e 	bge	zero,r16,5934 <_dtoa_r+0xe08>
    5904:	d9400717 	ldw	r5,28(sp)
    5908:	d9001617 	ldw	r4,88(sp)
    590c:	01800044 	movi	r6,1
    5910:	000896c0 	call	896c <__lshift>
    5914:	1009883a 	mov	r4,r2
    5918:	900b883a 	mov	r5,r18
    591c:	d8800715 	stw	r2,28(sp)
    5920:	00081840 	call	8184 <__mcmp>
    5924:	0081e00e 	bge	zero,r2,60a8 <_dtoa_r+0x157c>
    5928:	bdc00044 	addi	r23,r23,1
    592c:	00800e84 	movi	r2,58
    5930:	b881a226 	beq	r23,r2,5fbc <_dtoa_r+0x1490>
    5934:	b7000044 	addi	fp,r22,1
    5938:	b5c00005 	stb	r23,0(r22)
    593c:	003f7406 	br	5710 <_dtoa_r+0xbe4>
    5940:	00800e44 	movi	r2,57
    5944:	b8819d26 	beq	r23,r2,5fbc <_dtoa_r+0x1490>
    5948:	053ffa0e 	bge	zero,r20,5934 <_dtoa_r+0xe08>
    594c:	8dc00c44 	addi	r23,r17,49
    5950:	003ff806 	br	5934 <_dtoa_r+0xe08>
    5954:	d9001617 	ldw	r4,88(sp)
    5958:	a80b883a 	mov	r5,r21
    595c:	04000044 	movi	r16,1
    5960:	00080280 	call	8028 <_Bfree>
    5964:	003edf06 	br	54e4 <_dtoa_r+0x9b8>
    5968:	d9001617 	ldw	r4,88(sp)
    596c:	980b883a 	mov	r5,r19
    5970:	01800284 	movi	r6,10
    5974:	000f883a 	mov	r7,zero
    5978:	0008cdc0 	call	8cdc <__multadd>
    597c:	1027883a 	mov	r19,r2
    5980:	d8800615 	stw	r2,24(sp)
    5984:	003ebb06 	br	5474 <_dtoa_r+0x948>
    5988:	d9801117 	ldw	r6,68(sp)
    598c:	d8800d17 	ldw	r2,52(sp)
    5990:	d8000915 	stw	zero,36(sp)
    5994:	308dc83a 	sub	r6,r6,r2
    5998:	0087c83a 	sub	r3,zero,r2
    599c:	d9801115 	stw	r6,68(sp)
    59a0:	d8c01015 	stw	r3,64(sp)
    59a4:	003cfe06 	br	4da0 <_dtoa_r+0x274>
    59a8:	018dc83a 	sub	r6,zero,r6
    59ac:	d9801115 	stw	r6,68(sp)
    59b0:	d8000a15 	stw	zero,40(sp)
    59b4:	003cf306 	br	4d84 <_dtoa_r+0x258>
    59b8:	d9000d17 	ldw	r4,52(sp)
    59bc:	000ecd00 	call	ecd0 <__floatsidf>
    59c0:	880b883a 	mov	r5,r17
    59c4:	8009883a 	mov	r4,r16
    59c8:	180f883a 	mov	r7,r3
    59cc:	100d883a 	mov	r6,r2
    59d0:	000ea280 	call	ea28 <__nedf2>
    59d4:	103ce126 	beq	r2,zero,4d5c <_dtoa_r+0x230>
    59d8:	d9800d17 	ldw	r6,52(sp)
    59dc:	31bfffc4 	addi	r6,r6,-1
    59e0:	d9800d15 	stw	r6,52(sp)
    59e4:	003cdd06 	br	4d5c <_dtoa_r+0x230>
    59e8:	d9000717 	ldw	r4,28(sp)
    59ec:	900b883a 	mov	r5,r18
    59f0:	00081840 	call	8184 <__mcmp>
    59f4:	103e8d0e 	bge	r2,zero,542c <_dtoa_r+0x900>
    59f8:	d9400717 	ldw	r5,28(sp)
    59fc:	d9001617 	ldw	r4,88(sp)
    5a00:	01800284 	movi	r6,10
    5a04:	000f883a 	mov	r7,zero
    5a08:	0008cdc0 	call	8cdc <__multadd>
    5a0c:	d9800d17 	ldw	r6,52(sp)
    5a10:	d8800715 	stw	r2,28(sp)
    5a14:	31bfffc4 	addi	r6,r6,-1
    5a18:	d9800d15 	stw	r6,52(sp)
    5a1c:	b001a71e 	bne	r22,zero,60bc <_dtoa_r+0x1590>
    5a20:	d8800e17 	ldw	r2,56(sp)
    5a24:	d8800f15 	stw	r2,60(sp)
    5a28:	003e8006 	br	542c <_dtoa_r+0x900>
    5a2c:	90800417 	ldw	r2,16(r18)
    5a30:	1085883a 	add	r2,r2,r2
    5a34:	1085883a 	add	r2,r2,r2
    5a38:	1485883a 	add	r2,r2,r18
    5a3c:	11000417 	ldw	r4,16(r2)
    5a40:	00080500 	call	8050 <__hi0bits>
    5a44:	00c00804 	movi	r3,32
    5a48:	1887c83a 	sub	r3,r3,r2
    5a4c:	003e5a06 	br	53b8 <_dtoa_r+0x88c>
    5a50:	d9400717 	ldw	r5,28(sp)
    5a54:	d9801017 	ldw	r6,64(sp)
    5a58:	d9001617 	ldw	r4,88(sp)
    5a5c:	0008ddc0 	call	8ddc <__pow5mult>
    5a60:	d8800715 	stw	r2,28(sp)
    5a64:	003e4306 	br	5374 <_dtoa_r+0x848>
    5a68:	d9800f17 	ldw	r6,60(sp)
    5a6c:	d8800d17 	ldw	r2,52(sp)
    5a70:	d9800315 	stw	r6,12(sp)
    5a74:	d8800415 	stw	r2,16(sp)
    5a78:	d8c00b17 	ldw	r3,44(sp)
    5a7c:	1805003a 	cmpeq	r2,r3,zero
    5a80:	1000e21e 	bne	r2,zero,5e0c <_dtoa_r+0x12e0>
    5a84:	d9000317 	ldw	r4,12(sp)
    5a88:	0005883a 	mov	r2,zero
    5a8c:	00cff834 	movhi	r3,16352
    5a90:	200c90fa 	slli	r6,r4,3
    5a94:	01000074 	movhi	r4,1
    5a98:	21097d04 	addi	r4,r4,9716
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	310d883a 	add	r6,r6,r4
    5aa4:	327fff17 	ldw	r9,-4(r6)
    5aa8:	323ffe17 	ldw	r8,-8(r6)
    5aac:	1009883a 	mov	r4,r2
    5ab0:	480f883a 	mov	r7,r9
    5ab4:	400d883a 	mov	r6,r8
    5ab8:	000e7480 	call	e748 <__divdf3>
    5abc:	180b883a 	mov	r5,r3
    5ac0:	b00d883a 	mov	r6,r22
    5ac4:	b80f883a 	mov	r7,r23
    5ac8:	1009883a 	mov	r4,r2
    5acc:	000e2900 	call	e290 <__subdf3>
    5ad0:	a80b883a 	mov	r5,r21
    5ad4:	a009883a 	mov	r4,r20
    5ad8:	d8c01915 	stw	r3,100(sp)
    5adc:	d8801815 	stw	r2,96(sp)
    5ae0:	000edc80 	call	edc8 <__fixdfsi>
    5ae4:	1009883a 	mov	r4,r2
    5ae8:	1027883a 	mov	r19,r2
    5aec:	000ecd00 	call	ecd0 <__floatsidf>
    5af0:	a80b883a 	mov	r5,r21
    5af4:	a009883a 	mov	r4,r20
    5af8:	180f883a 	mov	r7,r3
    5afc:	100d883a 	mov	r6,r2
    5b00:	000e2900 	call	e290 <__subdf3>
    5b04:	d9801817 	ldw	r6,96(sp)
    5b08:	1823883a 	mov	r17,r3
    5b0c:	d8801415 	stw	r2,80(sp)
    5b10:	302d883a 	mov	r22,r6
    5b14:	d9800517 	ldw	r6,20(sp)
    5b18:	9cc00c04 	addi	r19,r19,48
    5b1c:	dc401515 	stw	r17,84(sp)
    5b20:	d8c01917 	ldw	r3,100(sp)
    5b24:	34c00005 	stb	r19,0(r6)
    5b28:	d8800517 	ldw	r2,20(sp)
    5b2c:	d9401917 	ldw	r5,100(sp)
    5b30:	d9801417 	ldw	r6,80(sp)
    5b34:	b009883a 	mov	r4,r22
    5b38:	880f883a 	mov	r7,r17
    5b3c:	182f883a 	mov	r23,r3
    5b40:	17000044 	addi	fp,r2,1
    5b44:	000eab00 	call	eab0 <__gtdf2>
    5b48:	00804e16 	blt	zero,r2,5c84 <_dtoa_r+0x1158>
    5b4c:	d9801417 	ldw	r6,80(sp)
    5b50:	0005883a 	mov	r2,zero
    5b54:	00cffc34 	movhi	r3,16368
    5b58:	180b883a 	mov	r5,r3
    5b5c:	880f883a 	mov	r7,r17
    5b60:	1009883a 	mov	r4,r2
    5b64:	000e2900 	call	e290 <__subdf3>
    5b68:	d9401917 	ldw	r5,100(sp)
    5b6c:	180f883a 	mov	r7,r3
    5b70:	b009883a 	mov	r4,r22
    5b74:	100d883a 	mov	r6,r2
    5b78:	000eab00 	call	eab0 <__gtdf2>
    5b7c:	00bda216 	blt	zero,r2,5208 <_dtoa_r+0x6dc>
    5b80:	d8c00317 	ldw	r3,12(sp)
    5b84:	00800044 	movi	r2,1
    5b88:	10c01216 	blt	r2,r3,5bd4 <_dtoa_r+0x10a8>
    5b8c:	003d4506 	br	50a4 <_dtoa_r+0x578>
    5b90:	d9801417 	ldw	r6,80(sp)
    5b94:	0005883a 	mov	r2,zero
    5b98:	00cffc34 	movhi	r3,16368
    5b9c:	180b883a 	mov	r5,r3
    5ba0:	880f883a 	mov	r7,r17
    5ba4:	1009883a 	mov	r4,r2
    5ba8:	000e2900 	call	e290 <__subdf3>
    5bac:	d9c01b17 	ldw	r7,108(sp)
    5bb0:	180b883a 	mov	r5,r3
    5bb4:	1009883a 	mov	r4,r2
    5bb8:	b00d883a 	mov	r6,r22
    5bbc:	000ebc00 	call	ebc0 <__ltdf2>
    5bc0:	103d9116 	blt	r2,zero,5208 <_dtoa_r+0x6dc>
    5bc4:	d9800517 	ldw	r6,20(sp)
    5bc8:	d9000317 	ldw	r4,12(sp)
    5bcc:	3105883a 	add	r2,r6,r4
    5bd0:	e0bd3426 	beq	fp,r2,50a4 <_dtoa_r+0x578>
    5bd4:	04500934 	movhi	r17,16420
    5bd8:	0021883a 	mov	r16,zero
    5bdc:	b80b883a 	mov	r5,r23
    5be0:	b009883a 	mov	r4,r22
    5be4:	800d883a 	mov	r6,r16
    5be8:	880f883a 	mov	r7,r17
    5bec:	000e3840 	call	e384 <__muldf3>
    5bf0:	d9401517 	ldw	r5,84(sp)
    5bf4:	d9001417 	ldw	r4,80(sp)
    5bf8:	880f883a 	mov	r7,r17
    5bfc:	000d883a 	mov	r6,zero
    5c00:	d8801a15 	stw	r2,104(sp)
    5c04:	d8c01b15 	stw	r3,108(sp)
    5c08:	000e3840 	call	e384 <__muldf3>
    5c0c:	180b883a 	mov	r5,r3
    5c10:	1009883a 	mov	r4,r2
    5c14:	1823883a 	mov	r17,r3
    5c18:	1021883a 	mov	r16,r2
    5c1c:	000edc80 	call	edc8 <__fixdfsi>
    5c20:	1009883a 	mov	r4,r2
    5c24:	102b883a 	mov	r21,r2
    5c28:	000ecd00 	call	ecd0 <__floatsidf>
    5c2c:	880b883a 	mov	r5,r17
    5c30:	8009883a 	mov	r4,r16
    5c34:	180f883a 	mov	r7,r3
    5c38:	100d883a 	mov	r6,r2
    5c3c:	000e2900 	call	e290 <__subdf3>
    5c40:	1021883a 	mov	r16,r2
    5c44:	d9001b17 	ldw	r4,108(sp)
    5c48:	1823883a 	mov	r17,r3
    5c4c:	dc001415 	stw	r16,80(sp)
    5c50:	ad400c04 	addi	r21,r21,48
    5c54:	dc401515 	stw	r17,84(sp)
    5c58:	d8801a17 	ldw	r2,104(sp)
    5c5c:	e5400005 	stb	r21,0(fp)
    5c60:	202f883a 	mov	r23,r4
    5c64:	d9c01b17 	ldw	r7,108(sp)
    5c68:	d9001417 	ldw	r4,80(sp)
    5c6c:	880b883a 	mov	r5,r17
    5c70:	100d883a 	mov	r6,r2
    5c74:	102d883a 	mov	r22,r2
    5c78:	e7000044 	addi	fp,fp,1
    5c7c:	000ebc00 	call	ebc0 <__ltdf2>
    5c80:	103fc30e 	bge	r2,zero,5b90 <_dtoa_r+0x1064>
    5c84:	d9000417 	ldw	r4,16(sp)
    5c88:	d9000d15 	stw	r4,52(sp)
    5c8c:	003d7106 	br	5254 <_dtoa_r+0x728>
    5c90:	d9801717 	ldw	r6,92(sp)
    5c94:	00800084 	movi	r2,2
    5c98:	11bde60e 	bge	r2,r6,5434 <_dtoa_r+0x908>
    5c9c:	203cfb1e 	bne	r4,zero,508c <_dtoa_r+0x560>
    5ca0:	d9001617 	ldw	r4,88(sp)
    5ca4:	900b883a 	mov	r5,r18
    5ca8:	01800144 	movi	r6,5
    5cac:	000f883a 	mov	r7,zero
    5cb0:	0008cdc0 	call	8cdc <__multadd>
    5cb4:	d9000717 	ldw	r4,28(sp)
    5cb8:	100b883a 	mov	r5,r2
    5cbc:	1025883a 	mov	r18,r2
    5cc0:	00081840 	call	8184 <__mcmp>
    5cc4:	00bcf10e 	bge	zero,r2,508c <_dtoa_r+0x560>
    5cc8:	d8c00d17 	ldw	r3,52(sp)
    5ccc:	d9000517 	ldw	r4,20(sp)
    5cd0:	d8000615 	stw	zero,24(sp)
    5cd4:	18c00044 	addi	r3,r3,1
    5cd8:	d8c00d15 	stw	r3,52(sp)
    5cdc:	00800c44 	movi	r2,49
    5ce0:	27000044 	addi	fp,r4,1
    5ce4:	20800005 	stb	r2,0(r4)
    5ce8:	003e8906 	br	5710 <_dtoa_r+0xbe4>
    5cec:	d8c00517 	ldw	r3,20(sp)
    5cf0:	003bc206 	br	4bfc <_dtoa_r+0xd0>
    5cf4:	01800074 	movhi	r6,1
    5cf8:	3189af04 	addi	r6,r6,9916
    5cfc:	30c00917 	ldw	r3,36(r6)
    5d00:	30800817 	ldw	r2,32(r6)
    5d04:	d9001217 	ldw	r4,72(sp)
    5d08:	d9401317 	ldw	r5,76(sp)
    5d0c:	180f883a 	mov	r7,r3
    5d10:	100d883a 	mov	r6,r2
    5d14:	000e7480 	call	e748 <__divdf3>
    5d18:	948003cc 	andi	r18,r18,15
    5d1c:	058000c4 	movi	r22,3
    5d20:	1029883a 	mov	r20,r2
    5d24:	182b883a 	mov	r21,r3
    5d28:	003c8906 	br	4f50 <_dtoa_r+0x424>
    5d2c:	d9001017 	ldw	r4,64(sp)
    5d30:	d9800917 	ldw	r6,36(sp)
    5d34:	0025883a 	mov	r18,zero
    5d38:	1105c83a 	sub	r2,r2,r4
    5d3c:	2089883a 	add	r4,r4,r2
    5d40:	308d883a 	add	r6,r6,r2
    5d44:	d9001015 	stw	r4,64(sp)
    5d48:	d9800915 	stw	r6,36(sp)
    5d4c:	003e3206 	br	5618 <_dtoa_r+0xaec>
    5d50:	28800044 	addi	r2,r5,1
    5d54:	27000044 	addi	fp,r4,1
    5d58:	20800005 	stb	r2,0(r4)
    5d5c:	003e6c06 	br	5710 <_dtoa_r+0xbe4>
    5d60:	d8800f17 	ldw	r2,60(sp)
    5d64:	00bce016 	blt	zero,r2,50e8 <_dtoa_r+0x5bc>
    5d68:	d9800f17 	ldw	r6,60(sp)
    5d6c:	303cc51e 	bne	r6,zero,5084 <_dtoa_r+0x558>
    5d70:	0005883a 	mov	r2,zero
    5d74:	00d00534 	movhi	r3,16404
    5d78:	980b883a 	mov	r5,r19
    5d7c:	180f883a 	mov	r7,r3
    5d80:	9009883a 	mov	r4,r18
    5d84:	100d883a 	mov	r6,r2
    5d88:	000e3840 	call	e384 <__muldf3>
    5d8c:	180b883a 	mov	r5,r3
    5d90:	a80f883a 	mov	r7,r21
    5d94:	1009883a 	mov	r4,r2
    5d98:	a00d883a 	mov	r6,r20
    5d9c:	000eb380 	call	eb38 <__gedf2>
    5da0:	103cb80e 	bge	r2,zero,5084 <_dtoa_r+0x558>
    5da4:	0027883a 	mov	r19,zero
    5da8:	0025883a 	mov	r18,zero
    5dac:	003fc606 	br	5cc8 <_dtoa_r+0x119c>
    5db0:	99400117 	ldw	r5,4(r19)
    5db4:	d9001617 	ldw	r4,88(sp)
    5db8:	00085a80 	call	85a8 <_Balloc>
    5dbc:	99800417 	ldw	r6,16(r19)
    5dc0:	11000304 	addi	r4,r2,12
    5dc4:	99400304 	addi	r5,r19,12
    5dc8:	318d883a 	add	r6,r6,r6
    5dcc:	318d883a 	add	r6,r6,r6
    5dd0:	31800204 	addi	r6,r6,8
    5dd4:	1023883a 	mov	r17,r2
    5dd8:	0007e100 	call	7e10 <memcpy>
    5ddc:	d9001617 	ldw	r4,88(sp)
    5de0:	880b883a 	mov	r5,r17
    5de4:	01800044 	movi	r6,1
    5de8:	000896c0 	call	896c <__lshift>
    5dec:	100b883a 	mov	r5,r2
    5df0:	003d9c06 	br	5464 <_dtoa_r+0x938>
    5df4:	00800e44 	movi	r2,57
    5df8:	b8807026 	beq	r23,r2,5fbc <_dtoa_r+0x1490>
    5dfc:	b8800044 	addi	r2,r23,1
    5e00:	b7000044 	addi	fp,r22,1
    5e04:	b0800005 	stb	r2,0(r22)
    5e08:	003e4106 	br	5710 <_dtoa_r+0xbe4>
    5e0c:	d8800317 	ldw	r2,12(sp)
    5e10:	01800074 	movhi	r6,1
    5e14:	31897d04 	addi	r6,r6,9716
    5e18:	b009883a 	mov	r4,r22
    5e1c:	100e90fa 	slli	r7,r2,3
    5e20:	b80b883a 	mov	r5,r23
    5e24:	398f883a 	add	r7,r7,r6
    5e28:	38bffe17 	ldw	r2,-8(r7)
    5e2c:	d9800517 	ldw	r6,20(sp)
    5e30:	38ffff17 	ldw	r3,-4(r7)
    5e34:	37000044 	addi	fp,r6,1
    5e38:	180f883a 	mov	r7,r3
    5e3c:	100d883a 	mov	r6,r2
    5e40:	000e3840 	call	e384 <__muldf3>
    5e44:	a80b883a 	mov	r5,r21
    5e48:	a009883a 	mov	r4,r20
    5e4c:	182f883a 	mov	r23,r3
    5e50:	102d883a 	mov	r22,r2
    5e54:	000edc80 	call	edc8 <__fixdfsi>
    5e58:	1009883a 	mov	r4,r2
    5e5c:	1027883a 	mov	r19,r2
    5e60:	000ecd00 	call	ecd0 <__floatsidf>
    5e64:	a80b883a 	mov	r5,r21
    5e68:	a009883a 	mov	r4,r20
    5e6c:	180f883a 	mov	r7,r3
    5e70:	100d883a 	mov	r6,r2
    5e74:	000e2900 	call	e290 <__subdf3>
    5e78:	180b883a 	mov	r5,r3
    5e7c:	d8c00517 	ldw	r3,20(sp)
    5e80:	9cc00c04 	addi	r19,r19,48
    5e84:	1009883a 	mov	r4,r2
    5e88:	1cc00005 	stb	r19,0(r3)
    5e8c:	2021883a 	mov	r16,r4
    5e90:	d9000317 	ldw	r4,12(sp)
    5e94:	00800044 	movi	r2,1
    5e98:	2823883a 	mov	r17,r5
    5e9c:	20802226 	beq	r4,r2,5f28 <_dtoa_r+0x13fc>
    5ea0:	1029883a 	mov	r20,r2
    5ea4:	0005883a 	mov	r2,zero
    5ea8:	00d00934 	movhi	r3,16420
    5eac:	180f883a 	mov	r7,r3
    5eb0:	100d883a 	mov	r6,r2
    5eb4:	880b883a 	mov	r5,r17
    5eb8:	8009883a 	mov	r4,r16
    5ebc:	000e3840 	call	e384 <__muldf3>
    5ec0:	180b883a 	mov	r5,r3
    5ec4:	1009883a 	mov	r4,r2
    5ec8:	1823883a 	mov	r17,r3
    5ecc:	1021883a 	mov	r16,r2
    5ed0:	000edc80 	call	edc8 <__fixdfsi>
    5ed4:	1009883a 	mov	r4,r2
    5ed8:	102b883a 	mov	r21,r2
    5edc:	000ecd00 	call	ecd0 <__floatsidf>
    5ee0:	880b883a 	mov	r5,r17
    5ee4:	8009883a 	mov	r4,r16
    5ee8:	180f883a 	mov	r7,r3
    5eec:	100d883a 	mov	r6,r2
    5ef0:	000e2900 	call	e290 <__subdf3>
    5ef4:	180b883a 	mov	r5,r3
    5ef8:	d8c00517 	ldw	r3,20(sp)
    5efc:	1009883a 	mov	r4,r2
    5f00:	ad400c04 	addi	r21,r21,48
    5f04:	1d05883a 	add	r2,r3,r20
    5f08:	15400005 	stb	r21,0(r2)
    5f0c:	2021883a 	mov	r16,r4
    5f10:	d9000317 	ldw	r4,12(sp)
    5f14:	a5000044 	addi	r20,r20,1
    5f18:	2823883a 	mov	r17,r5
    5f1c:	a13fe11e 	bne	r20,r4,5ea4 <_dtoa_r+0x1378>
    5f20:	e505883a 	add	r2,fp,r20
    5f24:	173fffc4 	addi	fp,r2,-1
    5f28:	0025883a 	mov	r18,zero
    5f2c:	04cff834 	movhi	r19,16352
    5f30:	b009883a 	mov	r4,r22
    5f34:	b80b883a 	mov	r5,r23
    5f38:	900d883a 	mov	r6,r18
    5f3c:	980f883a 	mov	r7,r19
    5f40:	000e3100 	call	e310 <__adddf3>
    5f44:	180b883a 	mov	r5,r3
    5f48:	1009883a 	mov	r4,r2
    5f4c:	800d883a 	mov	r6,r16
    5f50:	880f883a 	mov	r7,r17
    5f54:	000ebc00 	call	ebc0 <__ltdf2>
    5f58:	103cab16 	blt	r2,zero,5208 <_dtoa_r+0x6dc>
    5f5c:	0009883a 	mov	r4,zero
    5f60:	980b883a 	mov	r5,r19
    5f64:	b80f883a 	mov	r7,r23
    5f68:	b00d883a 	mov	r6,r22
    5f6c:	000e2900 	call	e290 <__subdf3>
    5f70:	180b883a 	mov	r5,r3
    5f74:	880f883a 	mov	r7,r17
    5f78:	1009883a 	mov	r4,r2
    5f7c:	800d883a 	mov	r6,r16
    5f80:	000eab00 	call	eab0 <__gtdf2>
    5f84:	00bc470e 	bge	zero,r2,50a4 <_dtoa_r+0x578>
    5f88:	00c00c04 	movi	r3,48
    5f8c:	e73fffc4 	addi	fp,fp,-1
    5f90:	e0800007 	ldb	r2,0(fp)
    5f94:	10fffd26 	beq	r2,r3,5f8c <_dtoa_r+0x1460>
    5f98:	d9800417 	ldw	r6,16(sp)
    5f9c:	e7000044 	addi	fp,fp,1
    5fa0:	d9800d15 	stw	r6,52(sp)
    5fa4:	003cab06 	br	5254 <_dtoa_r+0x728>
    5fa8:	d8c00f17 	ldw	r3,60(sp)
    5fac:	d9001117 	ldw	r4,68(sp)
    5fb0:	20e1c83a 	sub	r16,r4,r3
    5fb4:	0007883a 	mov	r3,zero
    5fb8:	003d9b06 	br	5628 <_dtoa_r+0xafc>
    5fbc:	00800e44 	movi	r2,57
    5fc0:	b0800005 	stb	r2,0(r22)
    5fc4:	b5800044 	addi	r22,r22,1
    5fc8:	003dc106 	br	56d0 <_dtoa_r+0xba4>
    5fcc:	05800084 	movi	r22,2
    5fd0:	003bf706 	br	4fb0 <_dtoa_r+0x484>
    5fd4:	d9000f17 	ldw	r4,60(sp)
    5fd8:	013c000e 	bge	zero,r4,4fdc <_dtoa_r+0x4b0>
    5fdc:	d9800e17 	ldw	r6,56(sp)
    5fe0:	01bc300e 	bge	zero,r6,50a4 <_dtoa_r+0x578>
    5fe4:	0005883a 	mov	r2,zero
    5fe8:	00d00934 	movhi	r3,16420
    5fec:	a80b883a 	mov	r5,r21
    5ff0:	180f883a 	mov	r7,r3
    5ff4:	a009883a 	mov	r4,r20
    5ff8:	100d883a 	mov	r6,r2
    5ffc:	000e3840 	call	e384 <__muldf3>
    6000:	b1000044 	addi	r4,r22,1
    6004:	1021883a 	mov	r16,r2
    6008:	1823883a 	mov	r17,r3
    600c:	000ecd00 	call	ecd0 <__floatsidf>
    6010:	880b883a 	mov	r5,r17
    6014:	8009883a 	mov	r4,r16
    6018:	180f883a 	mov	r7,r3
    601c:	100d883a 	mov	r6,r2
    6020:	000e3840 	call	e384 <__muldf3>
    6024:	0011883a 	mov	r8,zero
    6028:	02500734 	movhi	r9,16412
    602c:	180b883a 	mov	r5,r3
    6030:	480f883a 	mov	r7,r9
    6034:	1009883a 	mov	r4,r2
    6038:	400d883a 	mov	r6,r8
    603c:	000e3100 	call	e310 <__adddf3>
    6040:	102d883a 	mov	r22,r2
    6044:	00bf3034 	movhi	r2,64704
    6048:	10ef883a 	add	r23,r2,r3
    604c:	d8800d17 	ldw	r2,52(sp)
    6050:	d8c00e17 	ldw	r3,56(sp)
    6054:	8029883a 	mov	r20,r16
    6058:	10bfffc4 	addi	r2,r2,-1
    605c:	882b883a 	mov	r21,r17
    6060:	d8800415 	stw	r2,16(sp)
    6064:	d8c00315 	stw	r3,12(sp)
    6068:	003e8306 	br	5a78 <_dtoa_r+0xf4c>
    606c:	d8800117 	ldw	r2,4(sp)
    6070:	dc001117 	ldw	r16,68(sp)
    6074:	dc801017 	ldw	r18,64(sp)
    6078:	00c00d84 	movi	r3,54
    607c:	1887c83a 	sub	r3,r3,r2
    6080:	003d6906 	br	5628 <_dtoa_r+0xafc>
    6084:	01800044 	movi	r6,1
    6088:	3021883a 	mov	r16,r6
    608c:	d9800f15 	stw	r6,60(sp)
    6090:	d9802615 	stw	r6,152(sp)
    6094:	d9800e15 	stw	r6,56(sp)
    6098:	003b9306 	br	4ee8 <_dtoa_r+0x3bc>
    609c:	b021883a 	mov	r16,r22
    60a0:	dd800f15 	stw	r22,60(sp)
    60a4:	003b9006 	br	4ee8 <_dtoa_r+0x3bc>
    60a8:	103e221e 	bne	r2,zero,5934 <_dtoa_r+0xe08>
    60ac:	b880004c 	andi	r2,r23,1
    60b0:	1005003a 	cmpeq	r2,r2,zero
    60b4:	103e1f1e 	bne	r2,zero,5934 <_dtoa_r+0xe08>
    60b8:	003e1b06 	br	5928 <_dtoa_r+0xdfc>
    60bc:	d9001617 	ldw	r4,88(sp)
    60c0:	980b883a 	mov	r5,r19
    60c4:	01800284 	movi	r6,10
    60c8:	000f883a 	mov	r7,zero
    60cc:	0008cdc0 	call	8cdc <__multadd>
    60d0:	d8c00e17 	ldw	r3,56(sp)
    60d4:	1027883a 	mov	r19,r2
    60d8:	d8c00f15 	stw	r3,60(sp)
    60dc:	003cd306 	br	542c <_dtoa_r+0x900>

000060e0 <_fflush_r>:
    60e0:	defffb04 	addi	sp,sp,-20
    60e4:	dcc00315 	stw	r19,12(sp)
    60e8:	dc800215 	stw	r18,8(sp)
    60ec:	dfc00415 	stw	ra,16(sp)
    60f0:	dc400115 	stw	r17,4(sp)
    60f4:	dc000015 	stw	r16,0(sp)
    60f8:	2027883a 	mov	r19,r4
    60fc:	2825883a 	mov	r18,r5
    6100:	20000226 	beq	r4,zero,610c <_fflush_r+0x2c>
    6104:	20800e17 	ldw	r2,56(r4)
    6108:	10005626 	beq	r2,zero,6264 <_fflush_r+0x184>
    610c:	9100030b 	ldhu	r4,12(r18)
    6110:	20ffffcc 	andi	r3,r4,65535
    6114:	18e0001c 	xori	r3,r3,32768
    6118:	18e00004 	addi	r3,r3,-32768
    611c:	1880020c 	andi	r2,r3,8
    6120:	1000261e 	bne	r2,zero,61bc <_fflush_r+0xdc>
    6124:	90c00117 	ldw	r3,4(r18)
    6128:	20820014 	ori	r2,r4,2048
    612c:	9080030d 	sth	r2,12(r18)
    6130:	1009883a 	mov	r4,r2
    6134:	00c0400e 	bge	zero,r3,6238 <_fflush_r+0x158>
    6138:	92000a17 	ldw	r8,40(r18)
    613c:	40004026 	beq	r8,zero,6240 <_fflush_r+0x160>
    6140:	2084000c 	andi	r2,r4,4096
    6144:	10005326 	beq	r2,zero,6294 <_fflush_r+0x1b4>
    6148:	94001417 	ldw	r16,80(r18)
    614c:	9080030b 	ldhu	r2,12(r18)
    6150:	1080010c 	andi	r2,r2,4
    6154:	1000481e 	bne	r2,zero,6278 <_fflush_r+0x198>
    6158:	91400717 	ldw	r5,28(r18)
    615c:	9809883a 	mov	r4,r19
    6160:	800d883a 	mov	r6,r16
    6164:	000f883a 	mov	r7,zero
    6168:	403ee83a 	callr	r8
    616c:	8080261e 	bne	r16,r2,6208 <_fflush_r+0x128>
    6170:	9080030b 	ldhu	r2,12(r18)
    6174:	91000417 	ldw	r4,16(r18)
    6178:	90000115 	stw	zero,4(r18)
    617c:	10bdffcc 	andi	r2,r2,63487
    6180:	10ffffcc 	andi	r3,r2,65535
    6184:	18c4000c 	andi	r3,r3,4096
    6188:	9080030d 	sth	r2,12(r18)
    618c:	91000015 	stw	r4,0(r18)
    6190:	18002b26 	beq	r3,zero,6240 <_fflush_r+0x160>
    6194:	0007883a 	mov	r3,zero
    6198:	1805883a 	mov	r2,r3
    619c:	94001415 	stw	r16,80(r18)
    61a0:	dfc00417 	ldw	ra,16(sp)
    61a4:	dcc00317 	ldw	r19,12(sp)
    61a8:	dc800217 	ldw	r18,8(sp)
    61ac:	dc400117 	ldw	r17,4(sp)
    61b0:	dc000017 	ldw	r16,0(sp)
    61b4:	dec00504 	addi	sp,sp,20
    61b8:	f800283a 	ret
    61bc:	94400417 	ldw	r17,16(r18)
    61c0:	88001f26 	beq	r17,zero,6240 <_fflush_r+0x160>
    61c4:	90800017 	ldw	r2,0(r18)
    61c8:	18c000cc 	andi	r3,r3,3
    61cc:	94400015 	stw	r17,0(r18)
    61d0:	1461c83a 	sub	r16,r2,r17
    61d4:	18002526 	beq	r3,zero,626c <_fflush_r+0x18c>
    61d8:	0005883a 	mov	r2,zero
    61dc:	90800215 	stw	r2,8(r18)
    61e0:	0400170e 	bge	zero,r16,6240 <_fflush_r+0x160>
    61e4:	90c00917 	ldw	r3,36(r18)
    61e8:	91400717 	ldw	r5,28(r18)
    61ec:	880d883a 	mov	r6,r17
    61f0:	800f883a 	mov	r7,r16
    61f4:	9809883a 	mov	r4,r19
    61f8:	183ee83a 	callr	r3
    61fc:	88a3883a 	add	r17,r17,r2
    6200:	80a1c83a 	sub	r16,r16,r2
    6204:	00bff616 	blt	zero,r2,61e0 <_fflush_r+0x100>
    6208:	9080030b 	ldhu	r2,12(r18)
    620c:	00ffffc4 	movi	r3,-1
    6210:	10801014 	ori	r2,r2,64
    6214:	9080030d 	sth	r2,12(r18)
    6218:	1805883a 	mov	r2,r3
    621c:	dfc00417 	ldw	ra,16(sp)
    6220:	dcc00317 	ldw	r19,12(sp)
    6224:	dc800217 	ldw	r18,8(sp)
    6228:	dc400117 	ldw	r17,4(sp)
    622c:	dc000017 	ldw	r16,0(sp)
    6230:	dec00504 	addi	sp,sp,20
    6234:	f800283a 	ret
    6238:	90800f17 	ldw	r2,60(r18)
    623c:	00bfbe16 	blt	zero,r2,6138 <_fflush_r+0x58>
    6240:	0007883a 	mov	r3,zero
    6244:	1805883a 	mov	r2,r3
    6248:	dfc00417 	ldw	ra,16(sp)
    624c:	dcc00317 	ldw	r19,12(sp)
    6250:	dc800217 	ldw	r18,8(sp)
    6254:	dc400117 	ldw	r17,4(sp)
    6258:	dc000017 	ldw	r16,0(sp)
    625c:	dec00504 	addi	sp,sp,20
    6260:	f800283a 	ret
    6264:	00063780 	call	6378 <__sinit>
    6268:	003fa806 	br	610c <_fflush_r+0x2c>
    626c:	90800517 	ldw	r2,20(r18)
    6270:	90800215 	stw	r2,8(r18)
    6274:	003fda06 	br	61e0 <_fflush_r+0x100>
    6278:	90800117 	ldw	r2,4(r18)
    627c:	90c00c17 	ldw	r3,48(r18)
    6280:	80a1c83a 	sub	r16,r16,r2
    6284:	183fb426 	beq	r3,zero,6158 <_fflush_r+0x78>
    6288:	90800f17 	ldw	r2,60(r18)
    628c:	80a1c83a 	sub	r16,r16,r2
    6290:	003fb106 	br	6158 <_fflush_r+0x78>
    6294:	91400717 	ldw	r5,28(r18)
    6298:	9809883a 	mov	r4,r19
    629c:	000d883a 	mov	r6,zero
    62a0:	01c00044 	movi	r7,1
    62a4:	403ee83a 	callr	r8
    62a8:	1021883a 	mov	r16,r2
    62ac:	00bfffc4 	movi	r2,-1
    62b0:	80800226 	beq	r16,r2,62bc <_fflush_r+0x1dc>
    62b4:	92000a17 	ldw	r8,40(r18)
    62b8:	003fa406 	br	614c <_fflush_r+0x6c>
    62bc:	98c00017 	ldw	r3,0(r19)
    62c0:	00800744 	movi	r2,29
    62c4:	18bfde26 	beq	r3,r2,6240 <_fflush_r+0x160>
    62c8:	9080030b 	ldhu	r2,12(r18)
    62cc:	8007883a 	mov	r3,r16
    62d0:	10801014 	ori	r2,r2,64
    62d4:	9080030d 	sth	r2,12(r18)
    62d8:	003fcf06 	br	6218 <_fflush_r+0x138>

000062dc <fflush>:
    62dc:	01400034 	movhi	r5,0
    62e0:	29583804 	addi	r5,r5,24800
    62e4:	2007883a 	mov	r3,r4
    62e8:	20000526 	beq	r4,zero,6300 <fflush+0x24>
    62ec:	00800074 	movhi	r2,1
    62f0:	10910c04 	addi	r2,r2,17456
    62f4:	11000017 	ldw	r4,0(r2)
    62f8:	180b883a 	mov	r5,r3
    62fc:	00060e01 	jmpi	60e0 <_fflush_r>
    6300:	00800074 	movhi	r2,1
    6304:	10910d04 	addi	r2,r2,17460
    6308:	11000017 	ldw	r4,0(r2)
    630c:	00070e81 	jmpi	70e8 <_fwalk_reent>

00006310 <std>:
    6310:	00800074 	movhi	r2,1
    6314:	10a69b04 	addi	r2,r2,-26004
    6318:	20800b15 	stw	r2,44(r4)
    631c:	00800074 	movhi	r2,1
    6320:	10a6d604 	addi	r2,r2,-25768
    6324:	20800815 	stw	r2,32(r4)
    6328:	00c00074 	movhi	r3,1
    632c:	18e6b704 	addi	r3,r3,-25892
    6330:	00800074 	movhi	r2,1
    6334:	10a69d04 	addi	r2,r2,-25996
    6338:	2140030d 	sth	r5,12(r4)
    633c:	2180038d 	sth	r6,14(r4)
    6340:	20c00915 	stw	r3,36(r4)
    6344:	20800a15 	stw	r2,40(r4)
    6348:	20000015 	stw	zero,0(r4)
    634c:	20000115 	stw	zero,4(r4)
    6350:	20000215 	stw	zero,8(r4)
    6354:	20000415 	stw	zero,16(r4)
    6358:	20000515 	stw	zero,20(r4)
    635c:	20000615 	stw	zero,24(r4)
    6360:	21000715 	stw	r4,28(r4)
    6364:	f800283a 	ret

00006368 <__sfp_lock_acquire>:
    6368:	f800283a 	ret

0000636c <__sfp_lock_release>:
    636c:	f800283a 	ret

00006370 <__sinit_lock_acquire>:
    6370:	f800283a 	ret

00006374 <__sinit_lock_release>:
    6374:	f800283a 	ret

00006378 <__sinit>:
    6378:	20800e17 	ldw	r2,56(r4)
    637c:	defffd04 	addi	sp,sp,-12
    6380:	dc400115 	stw	r17,4(sp)
    6384:	dc000015 	stw	r16,0(sp)
    6388:	dfc00215 	stw	ra,8(sp)
    638c:	04400044 	movi	r17,1
    6390:	01400104 	movi	r5,4
    6394:	000d883a 	mov	r6,zero
    6398:	2021883a 	mov	r16,r4
    639c:	2200bb04 	addi	r8,r4,748
    63a0:	200f883a 	mov	r7,r4
    63a4:	10000526 	beq	r2,zero,63bc <__sinit+0x44>
    63a8:	dfc00217 	ldw	ra,8(sp)
    63ac:	dc400117 	ldw	r17,4(sp)
    63b0:	dc000017 	ldw	r16,0(sp)
    63b4:	dec00304 	addi	sp,sp,12
    63b8:	f800283a 	ret
    63bc:	21000117 	ldw	r4,4(r4)
    63c0:	00800034 	movhi	r2,0
    63c4:	10991704 	addi	r2,r2,25692
    63c8:	00c000c4 	movi	r3,3
    63cc:	80800f15 	stw	r2,60(r16)
    63d0:	80c0b915 	stw	r3,740(r16)
    63d4:	8200ba15 	stw	r8,744(r16)
    63d8:	84400e15 	stw	r17,56(r16)
    63dc:	8000b815 	stw	zero,736(r16)
    63e0:	00063100 	call	6310 <std>
    63e4:	81000217 	ldw	r4,8(r16)
    63e8:	880d883a 	mov	r6,r17
    63ec:	800f883a 	mov	r7,r16
    63f0:	01400284 	movi	r5,10
    63f4:	00063100 	call	6310 <std>
    63f8:	81000317 	ldw	r4,12(r16)
    63fc:	800f883a 	mov	r7,r16
    6400:	01400484 	movi	r5,18
    6404:	01800084 	movi	r6,2
    6408:	dfc00217 	ldw	ra,8(sp)
    640c:	dc400117 	ldw	r17,4(sp)
    6410:	dc000017 	ldw	r16,0(sp)
    6414:	dec00304 	addi	sp,sp,12
    6418:	00063101 	jmpi	6310 <std>

0000641c <__fp_lock>:
    641c:	0005883a 	mov	r2,zero
    6420:	f800283a 	ret

00006424 <__fp_unlock>:
    6424:	0005883a 	mov	r2,zero
    6428:	f800283a 	ret

0000642c <__fp_unlock_all>:
    642c:	00800074 	movhi	r2,1
    6430:	10910c04 	addi	r2,r2,17456
    6434:	11000017 	ldw	r4,0(r2)
    6438:	01400034 	movhi	r5,0
    643c:	29590904 	addi	r5,r5,25636
    6440:	00071b01 	jmpi	71b0 <_fwalk>

00006444 <__fp_lock_all>:
    6444:	00800074 	movhi	r2,1
    6448:	10910c04 	addi	r2,r2,17456
    644c:	11000017 	ldw	r4,0(r2)
    6450:	01400034 	movhi	r5,0
    6454:	29590704 	addi	r5,r5,25628
    6458:	00071b01 	jmpi	71b0 <_fwalk>

0000645c <_cleanup_r>:
    645c:	01400074 	movhi	r5,1
    6460:	2970d604 	addi	r5,r5,-15528
    6464:	00071b01 	jmpi	71b0 <_fwalk>

00006468 <_cleanup>:
    6468:	00800074 	movhi	r2,1
    646c:	10910d04 	addi	r2,r2,17460
    6470:	11000017 	ldw	r4,0(r2)
    6474:	000645c1 	jmpi	645c <_cleanup_r>

00006478 <__sfmoreglue>:
    6478:	defffc04 	addi	sp,sp,-16
    647c:	dc400115 	stw	r17,4(sp)
    6480:	2c401724 	muli	r17,r5,92
    6484:	dc800215 	stw	r18,8(sp)
    6488:	2825883a 	mov	r18,r5
    648c:	89400304 	addi	r5,r17,12
    6490:	dc000015 	stw	r16,0(sp)
    6494:	dfc00315 	stw	ra,12(sp)
    6498:	00074ec0 	call	74ec <_malloc_r>
    649c:	0021883a 	mov	r16,zero
    64a0:	880d883a 	mov	r6,r17
    64a4:	000b883a 	mov	r5,zero
    64a8:	10000626 	beq	r2,zero,64c4 <__sfmoreglue+0x4c>
    64ac:	11000304 	addi	r4,r2,12
    64b0:	14800115 	stw	r18,4(r2)
    64b4:	10000015 	stw	zero,0(r2)
    64b8:	11000215 	stw	r4,8(r2)
    64bc:	1021883a 	mov	r16,r2
    64c0:	0007f900 	call	7f90 <memset>
    64c4:	8005883a 	mov	r2,r16
    64c8:	dfc00317 	ldw	ra,12(sp)
    64cc:	dc800217 	ldw	r18,8(sp)
    64d0:	dc400117 	ldw	r17,4(sp)
    64d4:	dc000017 	ldw	r16,0(sp)
    64d8:	dec00404 	addi	sp,sp,16
    64dc:	f800283a 	ret

000064e0 <__sfp>:
    64e0:	defffd04 	addi	sp,sp,-12
    64e4:	00800074 	movhi	r2,1
    64e8:	10910d04 	addi	r2,r2,17460
    64ec:	dc000015 	stw	r16,0(sp)
    64f0:	14000017 	ldw	r16,0(r2)
    64f4:	dc400115 	stw	r17,4(sp)
    64f8:	dfc00215 	stw	ra,8(sp)
    64fc:	80800e17 	ldw	r2,56(r16)
    6500:	2023883a 	mov	r17,r4
    6504:	10002626 	beq	r2,zero,65a0 <__sfp+0xc0>
    6508:	8400b804 	addi	r16,r16,736
    650c:	80800117 	ldw	r2,4(r16)
    6510:	81000217 	ldw	r4,8(r16)
    6514:	10ffffc4 	addi	r3,r2,-1
    6518:	18000916 	blt	r3,zero,6540 <__sfp+0x60>
    651c:	2080030f 	ldh	r2,12(r4)
    6520:	10000b26 	beq	r2,zero,6550 <__sfp+0x70>
    6524:	017fffc4 	movi	r5,-1
    6528:	00000206 	br	6534 <__sfp+0x54>
    652c:	2080030f 	ldh	r2,12(r4)
    6530:	10000726 	beq	r2,zero,6550 <__sfp+0x70>
    6534:	18ffffc4 	addi	r3,r3,-1
    6538:	21001704 	addi	r4,r4,92
    653c:	197ffb1e 	bne	r3,r5,652c <__sfp+0x4c>
    6540:	80800017 	ldw	r2,0(r16)
    6544:	10001926 	beq	r2,zero,65ac <__sfp+0xcc>
    6548:	1021883a 	mov	r16,r2
    654c:	003fef06 	br	650c <__sfp+0x2c>
    6550:	00bfffc4 	movi	r2,-1
    6554:	00c00044 	movi	r3,1
    6558:	2080038d 	sth	r2,14(r4)
    655c:	20c0030d 	sth	r3,12(r4)
    6560:	20000015 	stw	zero,0(r4)
    6564:	20000215 	stw	zero,8(r4)
    6568:	20000115 	stw	zero,4(r4)
    656c:	20000415 	stw	zero,16(r4)
    6570:	20000515 	stw	zero,20(r4)
    6574:	20000615 	stw	zero,24(r4)
    6578:	20000c15 	stw	zero,48(r4)
    657c:	20000d15 	stw	zero,52(r4)
    6580:	20001115 	stw	zero,68(r4)
    6584:	20001215 	stw	zero,72(r4)
    6588:	2005883a 	mov	r2,r4
    658c:	dfc00217 	ldw	ra,8(sp)
    6590:	dc400117 	ldw	r17,4(sp)
    6594:	dc000017 	ldw	r16,0(sp)
    6598:	dec00304 	addi	sp,sp,12
    659c:	f800283a 	ret
    65a0:	8009883a 	mov	r4,r16
    65a4:	00063780 	call	6378 <__sinit>
    65a8:	003fd706 	br	6508 <__sfp+0x28>
    65ac:	8809883a 	mov	r4,r17
    65b0:	01400104 	movi	r5,4
    65b4:	00064780 	call	6478 <__sfmoreglue>
    65b8:	80800015 	stw	r2,0(r16)
    65bc:	103fe21e 	bne	r2,zero,6548 <__sfp+0x68>
    65c0:	00800304 	movi	r2,12
    65c4:	0009883a 	mov	r4,zero
    65c8:	88800015 	stw	r2,0(r17)
    65cc:	003fee06 	br	6588 <__sfp+0xa8>

000065d0 <_fread_r>:
    65d0:	defff504 	addi	sp,sp,-44
    65d4:	ddc00815 	stw	r23,32(sp)
    65d8:	39af383a 	mul	r23,r7,r6
    65dc:	df000915 	stw	fp,36(sp)
    65e0:	dd800715 	stw	r22,28(sp)
    65e4:	dcc00415 	stw	r19,16(sp)
    65e8:	dc000115 	stw	r16,4(sp)
    65ec:	dfc00a15 	stw	ra,40(sp)
    65f0:	dd400615 	stw	r21,24(sp)
    65f4:	dd000515 	stw	r20,20(sp)
    65f8:	dc800315 	stw	r18,12(sp)
    65fc:	dc400215 	stw	r17,8(sp)
    6600:	d9800015 	stw	r6,0(sp)
    6604:	3839883a 	mov	fp,r7
    6608:	2821883a 	mov	r16,r5
    660c:	202d883a 	mov	r22,r4
    6610:	dcc00b17 	ldw	r19,44(sp)
    6614:	b8005926 	beq	r23,zero,677c <_fread_r+0x1ac>
    6618:	20000226 	beq	r4,zero,6624 <_fread_r+0x54>
    661c:	20800e17 	ldw	r2,56(r4)
    6620:	10005826 	beq	r2,zero,6784 <_fread_r+0x1b4>
    6624:	9c400117 	ldw	r17,4(r19)
    6628:	88005916 	blt	r17,zero,6790 <_fread_r+0x1c0>
    662c:	9880030b 	ldhu	r2,12(r19)
    6630:	8029883a 	mov	r20,r16
    6634:	1080008c 	andi	r2,r2,2
    6638:	1000221e 	bne	r2,zero,66c4 <_fread_r+0xf4>
    663c:	b825883a 	mov	r18,r23
    6640:	00000106 	br	6648 <_fread_r+0x78>
    6644:	9c400117 	ldw	r17,4(r19)
    6648:	a009883a 	mov	r4,r20
    664c:	880d883a 	mov	r6,r17
    6650:	8c80542e 	bgeu	r17,r18,67a4 <_fread_r+0x1d4>
    6654:	99400017 	ldw	r5,0(r19)
    6658:	a469883a 	add	r20,r20,r17
    665c:	9465c83a 	sub	r18,r18,r17
    6660:	0007e100 	call	7e10 <memcpy>
    6664:	98800017 	ldw	r2,0(r19)
    6668:	b009883a 	mov	r4,r22
    666c:	980b883a 	mov	r5,r19
    6670:	1461883a 	add	r16,r2,r17
    6674:	9c000015 	stw	r16,0(r19)
    6678:	00096100 	call	9610 <__srefill_r>
    667c:	103ff126 	beq	r2,zero,6644 <_fread_r+0x74>
    6680:	d9400017 	ldw	r5,0(sp)
    6684:	bc89c83a 	sub	r4,r23,r18
    6688:	000f1e40 	call	f1e4 <__udivsi3>
    668c:	1039883a 	mov	fp,r2
    6690:	e005883a 	mov	r2,fp
    6694:	dfc00a17 	ldw	ra,40(sp)
    6698:	df000917 	ldw	fp,36(sp)
    669c:	ddc00817 	ldw	r23,32(sp)
    66a0:	dd800717 	ldw	r22,28(sp)
    66a4:	dd400617 	ldw	r21,24(sp)
    66a8:	dd000517 	ldw	r20,20(sp)
    66ac:	dcc00417 	ldw	r19,16(sp)
    66b0:	dc800317 	ldw	r18,12(sp)
    66b4:	dc400217 	ldw	r17,8(sp)
    66b8:	dc000117 	ldw	r16,4(sp)
    66bc:	dec00b04 	addi	sp,sp,44
    66c0:	f800283a 	ret
    66c4:	b825883a 	mov	r18,r23
    66c8:	8dc03436 	bltu	r17,r23,679c <_fread_r+0x1cc>
    66cc:	99400017 	ldw	r5,0(r19)
    66d0:	a009883a 	mov	r4,r20
    66d4:	900d883a 	mov	r6,r18
    66d8:	0007e100 	call	7e10 <memcpy>
    66dc:	9c000017 	ldw	r16,0(r19)
    66e0:	98800117 	ldw	r2,4(r19)
    66e4:	99400c17 	ldw	r5,48(r19)
    66e8:	84a1883a 	add	r16,r16,r18
    66ec:	14a3c83a 	sub	r17,r2,r18
    66f0:	a4ab883a 	add	r21,r20,r18
    66f4:	9c400115 	stw	r17,4(r19)
    66f8:	9c000015 	stw	r16,0(r19)
    66fc:	bca9c83a 	sub	r20,r23,r18
    6700:	28000826 	beq	r5,zero,6724 <_fread_r+0x154>
    6704:	a03fe226 	beq	r20,zero,6690 <_fread_r+0xc0>
    6708:	98801004 	addi	r2,r19,64
    670c:	28800326 	beq	r5,r2,671c <_fread_r+0x14c>
    6710:	b009883a 	mov	r4,r22
    6714:	00069380 	call	6938 <_free_r>
    6718:	9c000017 	ldw	r16,0(r19)
    671c:	98000c15 	stw	zero,48(r19)
    6720:	00000106 	br	6728 <_fread_r+0x158>
    6724:	a03fda26 	beq	r20,zero,6690 <_fread_r+0xc0>
    6728:	9c800417 	ldw	r18,16(r19)
    672c:	9c400517 	ldw	r17,20(r19)
    6730:	9d400015 	stw	r21,0(r19)
    6734:	9d400415 	stw	r21,16(r19)
    6738:	9d000515 	stw	r20,20(r19)
    673c:	b009883a 	mov	r4,r22
    6740:	980b883a 	mov	r5,r19
    6744:	00096100 	call	9610 <__srefill_r>
    6748:	98c00117 	ldw	r3,4(r19)
    674c:	9c800415 	stw	r18,16(r19)
    6750:	9c400515 	stw	r17,20(r19)
    6754:	a8eb883a 	add	r21,r21,r3
    6758:	9c000015 	stw	r16,0(r19)
    675c:	a0e9c83a 	sub	r20,r20,r3
    6760:	98000115 	stw	zero,4(r19)
    6764:	103fef26 	beq	r2,zero,6724 <_fread_r+0x154>
    6768:	d9400017 	ldw	r5,0(sp)
    676c:	bd09c83a 	sub	r4,r23,r20
    6770:	000f1e40 	call	f1e4 <__udivsi3>
    6774:	1039883a 	mov	fp,r2
    6778:	003fc506 	br	6690 <_fread_r+0xc0>
    677c:	0039883a 	mov	fp,zero
    6780:	003fc306 	br	6690 <_fread_r+0xc0>
    6784:	00063780 	call	6378 <__sinit>
    6788:	9c400117 	ldw	r17,4(r19)
    678c:	883fa70e 	bge	r17,zero,662c <_fread_r+0x5c>
    6790:	0023883a 	mov	r17,zero
    6794:	98000115 	stw	zero,4(r19)
    6798:	003fa406 	br	662c <_fread_r+0x5c>
    679c:	8825883a 	mov	r18,r17
    67a0:	003fca06 	br	66cc <_fread_r+0xfc>
    67a4:	99400017 	ldw	r5,0(r19)
    67a8:	900d883a 	mov	r6,r18
    67ac:	0007e100 	call	7e10 <memcpy>
    67b0:	98c00117 	ldw	r3,4(r19)
    67b4:	98800017 	ldw	r2,0(r19)
    67b8:	1c87c83a 	sub	r3,r3,r18
    67bc:	1485883a 	add	r2,r2,r18
    67c0:	98800015 	stw	r2,0(r19)
    67c4:	98c00115 	stw	r3,4(r19)
    67c8:	003fb106 	br	6690 <_fread_r+0xc0>

000067cc <fread>:
    67cc:	00800074 	movhi	r2,1
    67d0:	10910c04 	addi	r2,r2,17456
    67d4:	2017883a 	mov	r11,r4
    67d8:	11000017 	ldw	r4,0(r2)
    67dc:	defffe04 	addi	sp,sp,-8
    67e0:	3013883a 	mov	r9,r6
    67e4:	2805883a 	mov	r2,r5
    67e8:	d9c00015 	stw	r7,0(sp)
    67ec:	580b883a 	mov	r5,r11
    67f0:	100d883a 	mov	r6,r2
    67f4:	480f883a 	mov	r7,r9
    67f8:	dfc00115 	stw	ra,4(sp)
    67fc:	00065d00 	call	65d0 <_fread_r>
    6800:	dfc00117 	ldw	ra,4(sp)
    6804:	dec00204 	addi	sp,sp,8
    6808:	f800283a 	ret

0000680c <_malloc_trim_r>:
    680c:	defffb04 	addi	sp,sp,-20
    6810:	dcc00315 	stw	r19,12(sp)
    6814:	04c00074 	movhi	r19,1
    6818:	9ccb1304 	addi	r19,r19,11340
    681c:	dc800215 	stw	r18,8(sp)
    6820:	dc400115 	stw	r17,4(sp)
    6824:	dc000015 	stw	r16,0(sp)
    6828:	2823883a 	mov	r17,r5
    682c:	2025883a 	mov	r18,r4
    6830:	dfc00415 	stw	ra,16(sp)
    6834:	000f7b40 	call	f7b4 <__malloc_lock>
    6838:	98800217 	ldw	r2,8(r19)
    683c:	9009883a 	mov	r4,r18
    6840:	000b883a 	mov	r5,zero
    6844:	10c00117 	ldw	r3,4(r2)
    6848:	00bfff04 	movi	r2,-4
    684c:	18a0703a 	and	r16,r3,r2
    6850:	8463c83a 	sub	r17,r16,r17
    6854:	8c43fbc4 	addi	r17,r17,4079
    6858:	8822d33a 	srli	r17,r17,12
    685c:	0083ffc4 	movi	r2,4095
    6860:	8c7fffc4 	addi	r17,r17,-1
    6864:	8822933a 	slli	r17,r17,12
    6868:	1440060e 	bge	r2,r17,6884 <_malloc_trim_r+0x78>
    686c:	00098600 	call	9860 <_sbrk_r>
    6870:	98c00217 	ldw	r3,8(r19)
    6874:	9009883a 	mov	r4,r18
    6878:	044bc83a 	sub	r5,zero,r17
    687c:	80c7883a 	add	r3,r16,r3
    6880:	10c00926 	beq	r2,r3,68a8 <_malloc_trim_r+0x9c>
    6884:	000f7b80 	call	f7b8 <__malloc_unlock>
    6888:	0005883a 	mov	r2,zero
    688c:	dfc00417 	ldw	ra,16(sp)
    6890:	dcc00317 	ldw	r19,12(sp)
    6894:	dc800217 	ldw	r18,8(sp)
    6898:	dc400117 	ldw	r17,4(sp)
    689c:	dc000017 	ldw	r16,0(sp)
    68a0:	dec00504 	addi	sp,sp,20
    68a4:	f800283a 	ret
    68a8:	9009883a 	mov	r4,r18
    68ac:	00098600 	call	9860 <_sbrk_r>
    68b0:	844dc83a 	sub	r6,r16,r17
    68b4:	00ffffc4 	movi	r3,-1
    68b8:	9009883a 	mov	r4,r18
    68bc:	000b883a 	mov	r5,zero
    68c0:	01c00074 	movhi	r7,1
    68c4:	39d83504 	addi	r7,r7,24788
    68c8:	31800054 	ori	r6,r6,1
    68cc:	10c00926 	beq	r2,r3,68f4 <_malloc_trim_r+0xe8>
    68d0:	38800017 	ldw	r2,0(r7)
    68d4:	98c00217 	ldw	r3,8(r19)
    68d8:	9009883a 	mov	r4,r18
    68dc:	1445c83a 	sub	r2,r2,r17
    68e0:	38800015 	stw	r2,0(r7)
    68e4:	19800115 	stw	r6,4(r3)
    68e8:	000f7b80 	call	f7b8 <__malloc_unlock>
    68ec:	00800044 	movi	r2,1
    68f0:	003fe606 	br	688c <_malloc_trim_r+0x80>
    68f4:	00098600 	call	9860 <_sbrk_r>
    68f8:	99800217 	ldw	r6,8(r19)
    68fc:	100f883a 	mov	r7,r2
    6900:	9009883a 	mov	r4,r18
    6904:	1187c83a 	sub	r3,r2,r6
    6908:	008003c4 	movi	r2,15
    690c:	19400054 	ori	r5,r3,1
    6910:	10ffdc0e 	bge	r2,r3,6884 <_malloc_trim_r+0x78>
    6914:	00800074 	movhi	r2,1
    6918:	10911104 	addi	r2,r2,17476
    691c:	10c00017 	ldw	r3,0(r2)
    6920:	00800074 	movhi	r2,1
    6924:	10983504 	addi	r2,r2,24788
    6928:	31400115 	stw	r5,4(r6)
    692c:	38c7c83a 	sub	r3,r7,r3
    6930:	10c00015 	stw	r3,0(r2)
    6934:	003fd306 	br	6884 <_malloc_trim_r+0x78>

00006938 <_free_r>:
    6938:	defffd04 	addi	sp,sp,-12
    693c:	dc400115 	stw	r17,4(sp)
    6940:	dc000015 	stw	r16,0(sp)
    6944:	dfc00215 	stw	ra,8(sp)
    6948:	2821883a 	mov	r16,r5
    694c:	2023883a 	mov	r17,r4
    6950:	28005a26 	beq	r5,zero,6abc <_free_r+0x184>
    6954:	000f7b40 	call	f7b4 <__malloc_lock>
    6958:	823ffe04 	addi	r8,r16,-8
    695c:	41400117 	ldw	r5,4(r8)
    6960:	00bfff84 	movi	r2,-2
    6964:	02800074 	movhi	r10,1
    6968:	528b1304 	addi	r10,r10,11340
    696c:	288e703a 	and	r7,r5,r2
    6970:	41cd883a 	add	r6,r8,r7
    6974:	30c00117 	ldw	r3,4(r6)
    6978:	51000217 	ldw	r4,8(r10)
    697c:	00bfff04 	movi	r2,-4
    6980:	1892703a 	and	r9,r3,r2
    6984:	5017883a 	mov	r11,r10
    6988:	31006726 	beq	r6,r4,6b28 <_free_r+0x1f0>
    698c:	2880004c 	andi	r2,r5,1
    6990:	1005003a 	cmpeq	r2,r2,zero
    6994:	32400115 	stw	r9,4(r6)
    6998:	10001a1e 	bne	r2,zero,6a04 <_free_r+0xcc>
    699c:	000b883a 	mov	r5,zero
    69a0:	3247883a 	add	r3,r6,r9
    69a4:	18800117 	ldw	r2,4(r3)
    69a8:	1080004c 	andi	r2,r2,1
    69ac:	1000231e 	bne	r2,zero,6a3c <_free_r+0x104>
    69b0:	280ac03a 	cmpne	r5,r5,zero
    69b4:	3a4f883a 	add	r7,r7,r9
    69b8:	2800451e 	bne	r5,zero,6ad0 <_free_r+0x198>
    69bc:	31000217 	ldw	r4,8(r6)
    69c0:	00800074 	movhi	r2,1
    69c4:	108b1504 	addi	r2,r2,11348
    69c8:	20807b26 	beq	r4,r2,6bb8 <_free_r+0x280>
    69cc:	30800317 	ldw	r2,12(r6)
    69d0:	3a07883a 	add	r3,r7,r8
    69d4:	19c00015 	stw	r7,0(r3)
    69d8:	11000215 	stw	r4,8(r2)
    69dc:	20800315 	stw	r2,12(r4)
    69e0:	38800054 	ori	r2,r7,1
    69e4:	40800115 	stw	r2,4(r8)
    69e8:	28001a26 	beq	r5,zero,6a54 <_free_r+0x11c>
    69ec:	8809883a 	mov	r4,r17
    69f0:	dfc00217 	ldw	ra,8(sp)
    69f4:	dc400117 	ldw	r17,4(sp)
    69f8:	dc000017 	ldw	r16,0(sp)
    69fc:	dec00304 	addi	sp,sp,12
    6a00:	000f7b81 	jmpi	f7b8 <__malloc_unlock>
    6a04:	80bffe17 	ldw	r2,-8(r16)
    6a08:	50c00204 	addi	r3,r10,8
    6a0c:	4091c83a 	sub	r8,r8,r2
    6a10:	41000217 	ldw	r4,8(r8)
    6a14:	388f883a 	add	r7,r7,r2
    6a18:	20c06126 	beq	r4,r3,6ba0 <_free_r+0x268>
    6a1c:	40800317 	ldw	r2,12(r8)
    6a20:	3247883a 	add	r3,r6,r9
    6a24:	000b883a 	mov	r5,zero
    6a28:	11000215 	stw	r4,8(r2)
    6a2c:	20800315 	stw	r2,12(r4)
    6a30:	18800117 	ldw	r2,4(r3)
    6a34:	1080004c 	andi	r2,r2,1
    6a38:	103fdd26 	beq	r2,zero,69b0 <_free_r+0x78>
    6a3c:	38800054 	ori	r2,r7,1
    6a40:	3a07883a 	add	r3,r7,r8
    6a44:	280ac03a 	cmpne	r5,r5,zero
    6a48:	40800115 	stw	r2,4(r8)
    6a4c:	19c00015 	stw	r7,0(r3)
    6a50:	283fe61e 	bne	r5,zero,69ec <_free_r+0xb4>
    6a54:	00807fc4 	movi	r2,511
    6a58:	11c01f2e 	bgeu	r2,r7,6ad8 <_free_r+0x1a0>
    6a5c:	3806d27a 	srli	r3,r7,9
    6a60:	1800481e 	bne	r3,zero,6b84 <_free_r+0x24c>
    6a64:	3804d0fa 	srli	r2,r7,3
    6a68:	100690fa 	slli	r3,r2,3
    6a6c:	1acd883a 	add	r6,r3,r11
    6a70:	31400217 	ldw	r5,8(r6)
    6a74:	31405926 	beq	r6,r5,6bdc <_free_r+0x2a4>
    6a78:	28800117 	ldw	r2,4(r5)
    6a7c:	00ffff04 	movi	r3,-4
    6a80:	10c4703a 	and	r2,r2,r3
    6a84:	3880022e 	bgeu	r7,r2,6a90 <_free_r+0x158>
    6a88:	29400217 	ldw	r5,8(r5)
    6a8c:	317ffa1e 	bne	r6,r5,6a78 <_free_r+0x140>
    6a90:	29800317 	ldw	r6,12(r5)
    6a94:	41800315 	stw	r6,12(r8)
    6a98:	41400215 	stw	r5,8(r8)
    6a9c:	8809883a 	mov	r4,r17
    6aa0:	2a000315 	stw	r8,12(r5)
    6aa4:	32000215 	stw	r8,8(r6)
    6aa8:	dfc00217 	ldw	ra,8(sp)
    6aac:	dc400117 	ldw	r17,4(sp)
    6ab0:	dc000017 	ldw	r16,0(sp)
    6ab4:	dec00304 	addi	sp,sp,12
    6ab8:	000f7b81 	jmpi	f7b8 <__malloc_unlock>
    6abc:	dfc00217 	ldw	ra,8(sp)
    6ac0:	dc400117 	ldw	r17,4(sp)
    6ac4:	dc000017 	ldw	r16,0(sp)
    6ac8:	dec00304 	addi	sp,sp,12
    6acc:	f800283a 	ret
    6ad0:	31000217 	ldw	r4,8(r6)
    6ad4:	003fbd06 	br	69cc <_free_r+0x94>
    6ad8:	3806d0fa 	srli	r3,r7,3
    6adc:	00800044 	movi	r2,1
    6ae0:	51400117 	ldw	r5,4(r10)
    6ae4:	180890fa 	slli	r4,r3,3
    6ae8:	1807d0ba 	srai	r3,r3,2
    6aec:	22c9883a 	add	r4,r4,r11
    6af0:	21800217 	ldw	r6,8(r4)
    6af4:	10c4983a 	sll	r2,r2,r3
    6af8:	41000315 	stw	r4,12(r8)
    6afc:	41800215 	stw	r6,8(r8)
    6b00:	288ab03a 	or	r5,r5,r2
    6b04:	22000215 	stw	r8,8(r4)
    6b08:	8809883a 	mov	r4,r17
    6b0c:	51400115 	stw	r5,4(r10)
    6b10:	32000315 	stw	r8,12(r6)
    6b14:	dfc00217 	ldw	ra,8(sp)
    6b18:	dc400117 	ldw	r17,4(sp)
    6b1c:	dc000017 	ldw	r16,0(sp)
    6b20:	dec00304 	addi	sp,sp,12
    6b24:	000f7b81 	jmpi	f7b8 <__malloc_unlock>
    6b28:	2880004c 	andi	r2,r5,1
    6b2c:	3a4d883a 	add	r6,r7,r9
    6b30:	1000071e 	bne	r2,zero,6b50 <_free_r+0x218>
    6b34:	80bffe17 	ldw	r2,-8(r16)
    6b38:	4091c83a 	sub	r8,r8,r2
    6b3c:	41000317 	ldw	r4,12(r8)
    6b40:	40c00217 	ldw	r3,8(r8)
    6b44:	308d883a 	add	r6,r6,r2
    6b48:	20c00215 	stw	r3,8(r4)
    6b4c:	19000315 	stw	r4,12(r3)
    6b50:	00800074 	movhi	r2,1
    6b54:	10911004 	addi	r2,r2,17472
    6b58:	11000017 	ldw	r4,0(r2)
    6b5c:	30c00054 	ori	r3,r6,1
    6b60:	52000215 	stw	r8,8(r10)
    6b64:	40c00115 	stw	r3,4(r8)
    6b68:	313fa036 	bltu	r6,r4,69ec <_free_r+0xb4>
    6b6c:	00800074 	movhi	r2,1
    6b70:	10982b04 	addi	r2,r2,24748
    6b74:	11400017 	ldw	r5,0(r2)
    6b78:	8809883a 	mov	r4,r17
    6b7c:	000680c0 	call	680c <_malloc_trim_r>
    6b80:	003f9a06 	br	69ec <_free_r+0xb4>
    6b84:	00800104 	movi	r2,4
    6b88:	10c0072e 	bgeu	r2,r3,6ba8 <_free_r+0x270>
    6b8c:	00800504 	movi	r2,20
    6b90:	10c01936 	bltu	r2,r3,6bf8 <_free_r+0x2c0>
    6b94:	188016c4 	addi	r2,r3,91
    6b98:	100690fa 	slli	r3,r2,3
    6b9c:	003fb306 	br	6a6c <_free_r+0x134>
    6ba0:	01400044 	movi	r5,1
    6ba4:	003f7e06 	br	69a0 <_free_r+0x68>
    6ba8:	3804d1ba 	srli	r2,r7,6
    6bac:	10800e04 	addi	r2,r2,56
    6bb0:	100690fa 	slli	r3,r2,3
    6bb4:	003fad06 	br	6a6c <_free_r+0x134>
    6bb8:	22000315 	stw	r8,12(r4)
    6bbc:	22000215 	stw	r8,8(r4)
    6bc0:	3a05883a 	add	r2,r7,r8
    6bc4:	38c00054 	ori	r3,r7,1
    6bc8:	11c00015 	stw	r7,0(r2)
    6bcc:	41000215 	stw	r4,8(r8)
    6bd0:	40c00115 	stw	r3,4(r8)
    6bd4:	41000315 	stw	r4,12(r8)
    6bd8:	003f8406 	br	69ec <_free_r+0xb4>
    6bdc:	1005d0ba 	srai	r2,r2,2
    6be0:	00c00044 	movi	r3,1
    6be4:	51000117 	ldw	r4,4(r10)
    6be8:	1886983a 	sll	r3,r3,r2
    6bec:	20c8b03a 	or	r4,r4,r3
    6bf0:	51000115 	stw	r4,4(r10)
    6bf4:	003fa706 	br	6a94 <_free_r+0x15c>
    6bf8:	00801504 	movi	r2,84
    6bfc:	10c00436 	bltu	r2,r3,6c10 <_free_r+0x2d8>
    6c00:	3804d33a 	srli	r2,r7,12
    6c04:	10801b84 	addi	r2,r2,110
    6c08:	100690fa 	slli	r3,r2,3
    6c0c:	003f9706 	br	6a6c <_free_r+0x134>
    6c10:	00805504 	movi	r2,340
    6c14:	10c00436 	bltu	r2,r3,6c28 <_free_r+0x2f0>
    6c18:	3804d3fa 	srli	r2,r7,15
    6c1c:	10801dc4 	addi	r2,r2,119
    6c20:	100690fa 	slli	r3,r2,3
    6c24:	003f9106 	br	6a6c <_free_r+0x134>
    6c28:	00815504 	movi	r2,1364
    6c2c:	10c0032e 	bgeu	r2,r3,6c3c <_free_r+0x304>
    6c30:	00801f84 	movi	r2,126
    6c34:	00c0fc04 	movi	r3,1008
    6c38:	003f8c06 	br	6a6c <_free_r+0x134>
    6c3c:	3804d4ba 	srli	r2,r7,18
    6c40:	10801f04 	addi	r2,r2,124
    6c44:	100690fa 	slli	r3,r2,3
    6c48:	003f8806 	br	6a6c <_free_r+0x134>

00006c4c <__sfvwrite_r>:
    6c4c:	30800217 	ldw	r2,8(r6)
    6c50:	defff504 	addi	sp,sp,-44
    6c54:	df000915 	stw	fp,36(sp)
    6c58:	dd800715 	stw	r22,28(sp)
    6c5c:	dc800315 	stw	r18,12(sp)
    6c60:	dfc00a15 	stw	ra,40(sp)
    6c64:	ddc00815 	stw	r23,32(sp)
    6c68:	dd400615 	stw	r21,24(sp)
    6c6c:	dd000515 	stw	r20,20(sp)
    6c70:	dcc00415 	stw	r19,16(sp)
    6c74:	dc400215 	stw	r17,8(sp)
    6c78:	dc000115 	stw	r16,4(sp)
    6c7c:	302d883a 	mov	r22,r6
    6c80:	2039883a 	mov	fp,r4
    6c84:	2825883a 	mov	r18,r5
    6c88:	10001c26 	beq	r2,zero,6cfc <__sfvwrite_r+0xb0>
    6c8c:	29c0030b 	ldhu	r7,12(r5)
    6c90:	3880020c 	andi	r2,r7,8
    6c94:	10002726 	beq	r2,zero,6d34 <__sfvwrite_r+0xe8>
    6c98:	28800417 	ldw	r2,16(r5)
    6c9c:	10002526 	beq	r2,zero,6d34 <__sfvwrite_r+0xe8>
    6ca0:	3880008c 	andi	r2,r7,2
    6ca4:	b5400017 	ldw	r21,0(r22)
    6ca8:	10002826 	beq	r2,zero,6d4c <__sfvwrite_r+0x100>
    6cac:	0021883a 	mov	r16,zero
    6cb0:	0023883a 	mov	r17,zero
    6cb4:	880d883a 	mov	r6,r17
    6cb8:	e009883a 	mov	r4,fp
    6cbc:	00810004 	movi	r2,1024
    6cc0:	80006e26 	beq	r16,zero,6e7c <__sfvwrite_r+0x230>
    6cc4:	800f883a 	mov	r7,r16
    6cc8:	91400717 	ldw	r5,28(r18)
    6ccc:	1400012e 	bgeu	r2,r16,6cd4 <__sfvwrite_r+0x88>
    6cd0:	100f883a 	mov	r7,r2
    6cd4:	90c00917 	ldw	r3,36(r18)
    6cd8:	183ee83a 	callr	r3
    6cdc:	1007883a 	mov	r3,r2
    6ce0:	80a1c83a 	sub	r16,r16,r2
    6ce4:	88a3883a 	add	r17,r17,r2
    6ce8:	00806d0e 	bge	zero,r2,6ea0 <__sfvwrite_r+0x254>
    6cec:	b0800217 	ldw	r2,8(r22)
    6cf0:	10c5c83a 	sub	r2,r2,r3
    6cf4:	b0800215 	stw	r2,8(r22)
    6cf8:	103fee1e 	bne	r2,zero,6cb4 <__sfvwrite_r+0x68>
    6cfc:	0009883a 	mov	r4,zero
    6d00:	2005883a 	mov	r2,r4
    6d04:	dfc00a17 	ldw	ra,40(sp)
    6d08:	df000917 	ldw	fp,36(sp)
    6d0c:	ddc00817 	ldw	r23,32(sp)
    6d10:	dd800717 	ldw	r22,28(sp)
    6d14:	dd400617 	ldw	r21,24(sp)
    6d18:	dd000517 	ldw	r20,20(sp)
    6d1c:	dcc00417 	ldw	r19,16(sp)
    6d20:	dc800317 	ldw	r18,12(sp)
    6d24:	dc400217 	ldw	r17,8(sp)
    6d28:	dc000117 	ldw	r16,4(sp)
    6d2c:	dec00b04 	addi	sp,sp,44
    6d30:	f800283a 	ret
    6d34:	00047d80 	call	47d8 <__swsetup_r>
    6d38:	1000e41e 	bne	r2,zero,70cc <__sfvwrite_r+0x480>
    6d3c:	91c0030b 	ldhu	r7,12(r18)
    6d40:	b5400017 	ldw	r21,0(r22)
    6d44:	3880008c 	andi	r2,r7,2
    6d48:	103fd81e 	bne	r2,zero,6cac <__sfvwrite_r+0x60>
    6d4c:	3880004c 	andi	r2,r7,1
    6d50:	1005003a 	cmpeq	r2,r2,zero
    6d54:	10005726 	beq	r2,zero,6eb4 <__sfvwrite_r+0x268>
    6d58:	0029883a 	mov	r20,zero
    6d5c:	002f883a 	mov	r23,zero
    6d60:	a0004226 	beq	r20,zero,6e6c <__sfvwrite_r+0x220>
    6d64:	3880800c 	andi	r2,r7,512
    6d68:	94000217 	ldw	r16,8(r18)
    6d6c:	10008b26 	beq	r2,zero,6f9c <__sfvwrite_r+0x350>
    6d70:	800d883a 	mov	r6,r16
    6d74:	a400a536 	bltu	r20,r16,700c <__sfvwrite_r+0x3c0>
    6d78:	3881200c 	andi	r2,r7,1152
    6d7c:	10002726 	beq	r2,zero,6e1c <__sfvwrite_r+0x1d0>
    6d80:	90800517 	ldw	r2,20(r18)
    6d84:	92000417 	ldw	r8,16(r18)
    6d88:	91400017 	ldw	r5,0(r18)
    6d8c:	1087883a 	add	r3,r2,r2
    6d90:	1887883a 	add	r3,r3,r2
    6d94:	1808d7fa 	srli	r4,r3,31
    6d98:	2a21c83a 	sub	r16,r5,r8
    6d9c:	80800044 	addi	r2,r16,1
    6da0:	20c9883a 	add	r4,r4,r3
    6da4:	2027d07a 	srai	r19,r4,1
    6da8:	a085883a 	add	r2,r20,r2
    6dac:	980d883a 	mov	r6,r19
    6db0:	9880022e 	bgeu	r19,r2,6dbc <__sfvwrite_r+0x170>
    6db4:	1027883a 	mov	r19,r2
    6db8:	100d883a 	mov	r6,r2
    6dbc:	3881000c 	andi	r2,r7,1024
    6dc0:	1000b826 	beq	r2,zero,70a4 <__sfvwrite_r+0x458>
    6dc4:	300b883a 	mov	r5,r6
    6dc8:	e009883a 	mov	r4,fp
    6dcc:	00074ec0 	call	74ec <_malloc_r>
    6dd0:	10003126 	beq	r2,zero,6e98 <__sfvwrite_r+0x24c>
    6dd4:	91400417 	ldw	r5,16(r18)
    6dd8:	1009883a 	mov	r4,r2
    6ddc:	800d883a 	mov	r6,r16
    6de0:	1023883a 	mov	r17,r2
    6de4:	0007e100 	call	7e10 <memcpy>
    6de8:	90c0030b 	ldhu	r3,12(r18)
    6dec:	00beffc4 	movi	r2,-1025
    6df0:	1886703a 	and	r3,r3,r2
    6df4:	18c02014 	ori	r3,r3,128
    6df8:	90c0030d 	sth	r3,12(r18)
    6dfc:	9c07c83a 	sub	r3,r19,r16
    6e00:	8c05883a 	add	r2,r17,r16
    6e04:	a00d883a 	mov	r6,r20
    6e08:	a021883a 	mov	r16,r20
    6e0c:	90800015 	stw	r2,0(r18)
    6e10:	90c00215 	stw	r3,8(r18)
    6e14:	94400415 	stw	r17,16(r18)
    6e18:	94c00515 	stw	r19,20(r18)
    6e1c:	91000017 	ldw	r4,0(r18)
    6e20:	b80b883a 	mov	r5,r23
    6e24:	a023883a 	mov	r17,r20
    6e28:	0007eb00 	call	7eb0 <memmove>
    6e2c:	90c00217 	ldw	r3,8(r18)
    6e30:	90800017 	ldw	r2,0(r18)
    6e34:	a027883a 	mov	r19,r20
    6e38:	1c07c83a 	sub	r3,r3,r16
    6e3c:	1405883a 	add	r2,r2,r16
    6e40:	90c00215 	stw	r3,8(r18)
    6e44:	a021883a 	mov	r16,r20
    6e48:	90800015 	stw	r2,0(r18)
    6e4c:	b0800217 	ldw	r2,8(r22)
    6e50:	1405c83a 	sub	r2,r2,r16
    6e54:	b0800215 	stw	r2,8(r22)
    6e58:	103fa826 	beq	r2,zero,6cfc <__sfvwrite_r+0xb0>
    6e5c:	a469c83a 	sub	r20,r20,r17
    6e60:	91c0030b 	ldhu	r7,12(r18)
    6e64:	bcef883a 	add	r23,r23,r19
    6e68:	a03fbe1e 	bne	r20,zero,6d64 <__sfvwrite_r+0x118>
    6e6c:	adc00017 	ldw	r23,0(r21)
    6e70:	ad000117 	ldw	r20,4(r21)
    6e74:	ad400204 	addi	r21,r21,8
    6e78:	003fb906 	br	6d60 <__sfvwrite_r+0x114>
    6e7c:	ac400017 	ldw	r17,0(r21)
    6e80:	ac000117 	ldw	r16,4(r21)
    6e84:	ad400204 	addi	r21,r21,8
    6e88:	003f8a06 	br	6cb4 <__sfvwrite_r+0x68>
    6e8c:	91400417 	ldw	r5,16(r18)
    6e90:	e009883a 	mov	r4,fp
    6e94:	00069380 	call	6938 <_free_r>
    6e98:	00800304 	movi	r2,12
    6e9c:	e0800015 	stw	r2,0(fp)
    6ea0:	9080030b 	ldhu	r2,12(r18)
    6ea4:	013fffc4 	movi	r4,-1
    6ea8:	10801014 	ori	r2,r2,64
    6eac:	9080030d 	sth	r2,12(r18)
    6eb0:	003f9306 	br	6d00 <__sfvwrite_r+0xb4>
    6eb4:	0027883a 	mov	r19,zero
    6eb8:	002f883a 	mov	r23,zero
    6ebc:	d8000015 	stw	zero,0(sp)
    6ec0:	0029883a 	mov	r20,zero
    6ec4:	98001e26 	beq	r19,zero,6f40 <__sfvwrite_r+0x2f4>
    6ec8:	d8c00017 	ldw	r3,0(sp)
    6ecc:	1804c03a 	cmpne	r2,r3,zero
    6ed0:	10005e26 	beq	r2,zero,704c <__sfvwrite_r+0x400>
    6ed4:	9821883a 	mov	r16,r19
    6ed8:	a4c0012e 	bgeu	r20,r19,6ee0 <__sfvwrite_r+0x294>
    6edc:	a021883a 	mov	r16,r20
    6ee0:	91000017 	ldw	r4,0(r18)
    6ee4:	90800417 	ldw	r2,16(r18)
    6ee8:	91800217 	ldw	r6,8(r18)
    6eec:	91c00517 	ldw	r7,20(r18)
    6ef0:	1100022e 	bgeu	r2,r4,6efc <__sfvwrite_r+0x2b0>
    6ef4:	31e3883a 	add	r17,r6,r7
    6ef8:	8c001616 	blt	r17,r16,6f54 <__sfvwrite_r+0x308>
    6efc:	81c03816 	blt	r16,r7,6fe0 <__sfvwrite_r+0x394>
    6f00:	90c00917 	ldw	r3,36(r18)
    6f04:	91400717 	ldw	r5,28(r18)
    6f08:	e009883a 	mov	r4,fp
    6f0c:	b80d883a 	mov	r6,r23
    6f10:	183ee83a 	callr	r3
    6f14:	1023883a 	mov	r17,r2
    6f18:	00bfe10e 	bge	zero,r2,6ea0 <__sfvwrite_r+0x254>
    6f1c:	a469c83a 	sub	r20,r20,r17
    6f20:	a0001826 	beq	r20,zero,6f84 <__sfvwrite_r+0x338>
    6f24:	b0800217 	ldw	r2,8(r22)
    6f28:	1445c83a 	sub	r2,r2,r17
    6f2c:	b0800215 	stw	r2,8(r22)
    6f30:	103f7226 	beq	r2,zero,6cfc <__sfvwrite_r+0xb0>
    6f34:	9c67c83a 	sub	r19,r19,r17
    6f38:	bc6f883a 	add	r23,r23,r17
    6f3c:	983fe21e 	bne	r19,zero,6ec8 <__sfvwrite_r+0x27c>
    6f40:	adc00017 	ldw	r23,0(r21)
    6f44:	acc00117 	ldw	r19,4(r21)
    6f48:	ad400204 	addi	r21,r21,8
    6f4c:	d8000015 	stw	zero,0(sp)
    6f50:	003fdc06 	br	6ec4 <__sfvwrite_r+0x278>
    6f54:	b80b883a 	mov	r5,r23
    6f58:	880d883a 	mov	r6,r17
    6f5c:	0007eb00 	call	7eb0 <memmove>
    6f60:	90c00017 	ldw	r3,0(r18)
    6f64:	e009883a 	mov	r4,fp
    6f68:	900b883a 	mov	r5,r18
    6f6c:	1c47883a 	add	r3,r3,r17
    6f70:	90c00015 	stw	r3,0(r18)
    6f74:	00060e00 	call	60e0 <_fflush_r>
    6f78:	103fc91e 	bne	r2,zero,6ea0 <__sfvwrite_r+0x254>
    6f7c:	a469c83a 	sub	r20,r20,r17
    6f80:	a03fe81e 	bne	r20,zero,6f24 <__sfvwrite_r+0x2d8>
    6f84:	e009883a 	mov	r4,fp
    6f88:	900b883a 	mov	r5,r18
    6f8c:	00060e00 	call	60e0 <_fflush_r>
    6f90:	103fc31e 	bne	r2,zero,6ea0 <__sfvwrite_r+0x254>
    6f94:	d8000015 	stw	zero,0(sp)
    6f98:	003fe206 	br	6f24 <__sfvwrite_r+0x2d8>
    6f9c:	91000017 	ldw	r4,0(r18)
    6fa0:	90800417 	ldw	r2,16(r18)
    6fa4:	1100022e 	bgeu	r2,r4,6fb0 <__sfvwrite_r+0x364>
    6fa8:	8023883a 	mov	r17,r16
    6fac:	85003136 	bltu	r16,r20,7074 <__sfvwrite_r+0x428>
    6fb0:	91c00517 	ldw	r7,20(r18)
    6fb4:	a1c01836 	bltu	r20,r7,7018 <__sfvwrite_r+0x3cc>
    6fb8:	90c00917 	ldw	r3,36(r18)
    6fbc:	91400717 	ldw	r5,28(r18)
    6fc0:	e009883a 	mov	r4,fp
    6fc4:	b80d883a 	mov	r6,r23
    6fc8:	183ee83a 	callr	r3
    6fcc:	1021883a 	mov	r16,r2
    6fd0:	00bfb30e 	bge	zero,r2,6ea0 <__sfvwrite_r+0x254>
    6fd4:	1023883a 	mov	r17,r2
    6fd8:	1027883a 	mov	r19,r2
    6fdc:	003f9b06 	br	6e4c <__sfvwrite_r+0x200>
    6fe0:	b80b883a 	mov	r5,r23
    6fe4:	800d883a 	mov	r6,r16
    6fe8:	0007eb00 	call	7eb0 <memmove>
    6fec:	90c00217 	ldw	r3,8(r18)
    6ff0:	90800017 	ldw	r2,0(r18)
    6ff4:	8023883a 	mov	r17,r16
    6ff8:	1c07c83a 	sub	r3,r3,r16
    6ffc:	1405883a 	add	r2,r2,r16
    7000:	90c00215 	stw	r3,8(r18)
    7004:	90800015 	stw	r2,0(r18)
    7008:	003fc406 	br	6f1c <__sfvwrite_r+0x2d0>
    700c:	a00d883a 	mov	r6,r20
    7010:	a021883a 	mov	r16,r20
    7014:	003f8106 	br	6e1c <__sfvwrite_r+0x1d0>
    7018:	b80b883a 	mov	r5,r23
    701c:	a00d883a 	mov	r6,r20
    7020:	0007eb00 	call	7eb0 <memmove>
    7024:	90c00217 	ldw	r3,8(r18)
    7028:	90800017 	ldw	r2,0(r18)
    702c:	a021883a 	mov	r16,r20
    7030:	1d07c83a 	sub	r3,r3,r20
    7034:	1505883a 	add	r2,r2,r20
    7038:	a023883a 	mov	r17,r20
    703c:	a027883a 	mov	r19,r20
    7040:	90c00215 	stw	r3,8(r18)
    7044:	90800015 	stw	r2,0(r18)
    7048:	003f8006 	br	6e4c <__sfvwrite_r+0x200>
    704c:	b809883a 	mov	r4,r23
    7050:	01400284 	movi	r5,10
    7054:	980d883a 	mov	r6,r19
    7058:	0007d2c0 	call	7d2c <memchr>
    705c:	10001726 	beq	r2,zero,70bc <__sfvwrite_r+0x470>
    7060:	15c5c83a 	sub	r2,r2,r23
    7064:	15000044 	addi	r20,r2,1
    7068:	00800044 	movi	r2,1
    706c:	d8800015 	stw	r2,0(sp)
    7070:	003f9806 	br	6ed4 <__sfvwrite_r+0x288>
    7074:	b80b883a 	mov	r5,r23
    7078:	800d883a 	mov	r6,r16
    707c:	0007eb00 	call	7eb0 <memmove>
    7080:	90c00017 	ldw	r3,0(r18)
    7084:	e009883a 	mov	r4,fp
    7088:	900b883a 	mov	r5,r18
    708c:	1c07883a 	add	r3,r3,r16
    7090:	90c00015 	stw	r3,0(r18)
    7094:	8027883a 	mov	r19,r16
    7098:	00060e00 	call	60e0 <_fflush_r>
    709c:	103f6b26 	beq	r2,zero,6e4c <__sfvwrite_r+0x200>
    70a0:	003f7f06 	br	6ea0 <__sfvwrite_r+0x254>
    70a4:	400b883a 	mov	r5,r8
    70a8:	e009883a 	mov	r4,fp
    70ac:	000901c0 	call	901c <_realloc_r>
    70b0:	103f7626 	beq	r2,zero,6e8c <__sfvwrite_r+0x240>
    70b4:	1023883a 	mov	r17,r2
    70b8:	003f5006 	br	6dfc <__sfvwrite_r+0x1b0>
    70bc:	00c00044 	movi	r3,1
    70c0:	9d000044 	addi	r20,r19,1
    70c4:	d8c00015 	stw	r3,0(sp)
    70c8:	003f8206 	br	6ed4 <__sfvwrite_r+0x288>
    70cc:	9080030b 	ldhu	r2,12(r18)
    70d0:	00c00244 	movi	r3,9
    70d4:	013fffc4 	movi	r4,-1
    70d8:	10801014 	ori	r2,r2,64
    70dc:	9080030d 	sth	r2,12(r18)
    70e0:	e0c00015 	stw	r3,0(fp)
    70e4:	003f0606 	br	6d00 <__sfvwrite_r+0xb4>

000070e8 <_fwalk_reent>:
    70e8:	defff704 	addi	sp,sp,-36
    70ec:	dcc00315 	stw	r19,12(sp)
    70f0:	24c0b804 	addi	r19,r4,736
    70f4:	dd800615 	stw	r22,24(sp)
    70f8:	dd400515 	stw	r21,20(sp)
    70fc:	dfc00815 	stw	ra,32(sp)
    7100:	ddc00715 	stw	r23,28(sp)
    7104:	dd000415 	stw	r20,16(sp)
    7108:	dc800215 	stw	r18,8(sp)
    710c:	dc400115 	stw	r17,4(sp)
    7110:	dc000015 	stw	r16,0(sp)
    7114:	202b883a 	mov	r21,r4
    7118:	282d883a 	mov	r22,r5
    711c:	00063680 	call	6368 <__sfp_lock_acquire>
    7120:	98002126 	beq	r19,zero,71a8 <_fwalk_reent+0xc0>
    7124:	002f883a 	mov	r23,zero
    7128:	9c800117 	ldw	r18,4(r19)
    712c:	9c000217 	ldw	r16,8(r19)
    7130:	90bfffc4 	addi	r2,r18,-1
    7134:	10000d16 	blt	r2,zero,716c <_fwalk_reent+0x84>
    7138:	0023883a 	mov	r17,zero
    713c:	053fffc4 	movi	r20,-1
    7140:	8080030f 	ldh	r2,12(r16)
    7144:	8c400044 	addi	r17,r17,1
    7148:	10000626 	beq	r2,zero,7164 <_fwalk_reent+0x7c>
    714c:	8080038f 	ldh	r2,14(r16)
    7150:	800b883a 	mov	r5,r16
    7154:	a809883a 	mov	r4,r21
    7158:	15000226 	beq	r2,r20,7164 <_fwalk_reent+0x7c>
    715c:	b03ee83a 	callr	r22
    7160:	b8aeb03a 	or	r23,r23,r2
    7164:	84001704 	addi	r16,r16,92
    7168:	947ff51e 	bne	r18,r17,7140 <_fwalk_reent+0x58>
    716c:	9cc00017 	ldw	r19,0(r19)
    7170:	983fed1e 	bne	r19,zero,7128 <_fwalk_reent+0x40>
    7174:	000636c0 	call	636c <__sfp_lock_release>
    7178:	b805883a 	mov	r2,r23
    717c:	dfc00817 	ldw	ra,32(sp)
    7180:	ddc00717 	ldw	r23,28(sp)
    7184:	dd800617 	ldw	r22,24(sp)
    7188:	dd400517 	ldw	r21,20(sp)
    718c:	dd000417 	ldw	r20,16(sp)
    7190:	dcc00317 	ldw	r19,12(sp)
    7194:	dc800217 	ldw	r18,8(sp)
    7198:	dc400117 	ldw	r17,4(sp)
    719c:	dc000017 	ldw	r16,0(sp)
    71a0:	dec00904 	addi	sp,sp,36
    71a4:	f800283a 	ret
    71a8:	002f883a 	mov	r23,zero
    71ac:	003ff106 	br	7174 <_fwalk_reent+0x8c>

000071b0 <_fwalk>:
    71b0:	defff804 	addi	sp,sp,-32
    71b4:	dcc00315 	stw	r19,12(sp)
    71b8:	24c0b804 	addi	r19,r4,736
    71bc:	dd400515 	stw	r21,20(sp)
    71c0:	dfc00715 	stw	ra,28(sp)
    71c4:	dd800615 	stw	r22,24(sp)
    71c8:	dd000415 	stw	r20,16(sp)
    71cc:	dc800215 	stw	r18,8(sp)
    71d0:	dc400115 	stw	r17,4(sp)
    71d4:	dc000015 	stw	r16,0(sp)
    71d8:	282b883a 	mov	r21,r5
    71dc:	00063680 	call	6368 <__sfp_lock_acquire>
    71e0:	98001f26 	beq	r19,zero,7260 <_fwalk+0xb0>
    71e4:	002d883a 	mov	r22,zero
    71e8:	9c800117 	ldw	r18,4(r19)
    71ec:	9c000217 	ldw	r16,8(r19)
    71f0:	90bfffc4 	addi	r2,r18,-1
    71f4:	10000c16 	blt	r2,zero,7228 <_fwalk+0x78>
    71f8:	0023883a 	mov	r17,zero
    71fc:	053fffc4 	movi	r20,-1
    7200:	8080030f 	ldh	r2,12(r16)
    7204:	8c400044 	addi	r17,r17,1
    7208:	10000526 	beq	r2,zero,7220 <_fwalk+0x70>
    720c:	8080038f 	ldh	r2,14(r16)
    7210:	8009883a 	mov	r4,r16
    7214:	15000226 	beq	r2,r20,7220 <_fwalk+0x70>
    7218:	a83ee83a 	callr	r21
    721c:	b0acb03a 	or	r22,r22,r2
    7220:	84001704 	addi	r16,r16,92
    7224:	947ff61e 	bne	r18,r17,7200 <_fwalk+0x50>
    7228:	9cc00017 	ldw	r19,0(r19)
    722c:	983fee1e 	bne	r19,zero,71e8 <_fwalk+0x38>
    7230:	000636c0 	call	636c <__sfp_lock_release>
    7234:	b005883a 	mov	r2,r22
    7238:	dfc00717 	ldw	ra,28(sp)
    723c:	dd800617 	ldw	r22,24(sp)
    7240:	dd400517 	ldw	r21,20(sp)
    7244:	dd000417 	ldw	r20,16(sp)
    7248:	dcc00317 	ldw	r19,12(sp)
    724c:	dc800217 	ldw	r18,8(sp)
    7250:	dc400117 	ldw	r17,4(sp)
    7254:	dc000017 	ldw	r16,0(sp)
    7258:	dec00804 	addi	sp,sp,32
    725c:	f800283a 	ret
    7260:	002d883a 	mov	r22,zero
    7264:	003ff206 	br	7230 <_fwalk+0x80>

00007268 <iswspace>:
    7268:	00803fc4 	movi	r2,255
    726c:	0007883a 	mov	r3,zero
    7270:	11000636 	bltu	r2,r4,728c <iswspace+0x24>
    7274:	00800074 	movhi	r2,1
    7278:	10910b04 	addi	r2,r2,17452
    727c:	10c00017 	ldw	r3,0(r2)
    7280:	1907883a 	add	r3,r3,r4
    7284:	18800003 	ldbu	r2,0(r3)
    7288:	10c0020c 	andi	r3,r2,8
    728c:	1805883a 	mov	r2,r3
    7290:	f800283a 	ret

00007294 <__locale_charset>:
    7294:	d0a00417 	ldw	r2,-32752(gp)
    7298:	f800283a 	ret

0000729c <_localeconv_r>:
    729c:	00800074 	movhi	r2,1
    72a0:	10897104 	addi	r2,r2,9668
    72a4:	f800283a 	ret

000072a8 <localeconv>:
    72a8:	00800074 	movhi	r2,1
    72ac:	10910c04 	addi	r2,r2,17456
    72b0:	11000017 	ldw	r4,0(r2)
    72b4:	000729c1 	jmpi	729c <_localeconv_r>

000072b8 <_setlocale_r>:
    72b8:	defffc04 	addi	sp,sp,-16
    72bc:	00c00074 	movhi	r3,1
    72c0:	18c96c04 	addi	r3,r3,9648
    72c4:	dc800215 	stw	r18,8(sp)
    72c8:	dc400115 	stw	r17,4(sp)
    72cc:	dc000015 	stw	r16,0(sp)
    72d0:	2023883a 	mov	r17,r4
    72d4:	2825883a 	mov	r18,r5
    72d8:	dfc00315 	stw	ra,12(sp)
    72dc:	3021883a 	mov	r16,r6
    72e0:	3009883a 	mov	r4,r6
    72e4:	180b883a 	mov	r5,r3
    72e8:	30000926 	beq	r6,zero,7310 <_setlocale_r+0x58>
    72ec:	0009bb80 	call	9bb8 <strcmp>
    72f0:	8009883a 	mov	r4,r16
    72f4:	01400074 	movhi	r5,1
    72f8:	29483e04 	addi	r5,r5,8440
    72fc:	10000b1e 	bne	r2,zero,732c <_setlocale_r+0x74>
    7300:	8c000d15 	stw	r16,52(r17)
    7304:	8c800c15 	stw	r18,48(r17)
    7308:	00c00074 	movhi	r3,1
    730c:	18c96c04 	addi	r3,r3,9648
    7310:	1805883a 	mov	r2,r3
    7314:	dfc00317 	ldw	ra,12(sp)
    7318:	dc800217 	ldw	r18,8(sp)
    731c:	dc400117 	ldw	r17,4(sp)
    7320:	dc000017 	ldw	r16,0(sp)
    7324:	dec00404 	addi	sp,sp,16
    7328:	f800283a 	ret
    732c:	0009bb80 	call	9bb8 <strcmp>
    7330:	0007883a 	mov	r3,zero
    7334:	103ff226 	beq	r2,zero,7300 <_setlocale_r+0x48>
    7338:	003ff506 	br	7310 <_setlocale_r+0x58>

0000733c <setlocale>:
    733c:	01800074 	movhi	r6,1
    7340:	31910c04 	addi	r6,r6,17456
    7344:	2007883a 	mov	r3,r4
    7348:	31000017 	ldw	r4,0(r6)
    734c:	280d883a 	mov	r6,r5
    7350:	180b883a 	mov	r5,r3
    7354:	00072b81 	jmpi	72b8 <_setlocale_r>

00007358 <__smakebuf_r>:
    7358:	2880030b 	ldhu	r2,12(r5)
    735c:	deffed04 	addi	sp,sp,-76
    7360:	dc401015 	stw	r17,64(sp)
    7364:	1080008c 	andi	r2,r2,2
    7368:	dc000f15 	stw	r16,60(sp)
    736c:	dfc01215 	stw	ra,72(sp)
    7370:	dc801115 	stw	r18,68(sp)
    7374:	2821883a 	mov	r16,r5
    7378:	2023883a 	mov	r17,r4
    737c:	10000b26 	beq	r2,zero,73ac <__smakebuf_r+0x54>
    7380:	28c010c4 	addi	r3,r5,67
    7384:	00800044 	movi	r2,1
    7388:	28800515 	stw	r2,20(r5)
    738c:	28c00415 	stw	r3,16(r5)
    7390:	28c00015 	stw	r3,0(r5)
    7394:	dfc01217 	ldw	ra,72(sp)
    7398:	dc801117 	ldw	r18,68(sp)
    739c:	dc401017 	ldw	r17,64(sp)
    73a0:	dc000f17 	ldw	r16,60(sp)
    73a4:	dec01304 	addi	sp,sp,76
    73a8:	f800283a 	ret
    73ac:	2940038f 	ldh	r5,14(r5)
    73b0:	28002116 	blt	r5,zero,7438 <__smakebuf_r+0xe0>
    73b4:	d80d883a 	mov	r6,sp
    73b8:	000c36c0 	call	c36c <_fstat_r>
    73bc:	10001e16 	blt	r2,zero,7438 <__smakebuf_r+0xe0>
    73c0:	d8800117 	ldw	r2,4(sp)
    73c4:	00e00014 	movui	r3,32768
    73c8:	113c000c 	andi	r4,r2,61440
    73cc:	20c03126 	beq	r4,r3,7494 <__smakebuf_r+0x13c>
    73d0:	8080030b 	ldhu	r2,12(r16)
    73d4:	00c80004 	movi	r3,8192
    73d8:	10820014 	ori	r2,r2,2048
    73dc:	8080030d 	sth	r2,12(r16)
    73e0:	20c01e26 	beq	r4,r3,745c <__smakebuf_r+0x104>
    73e4:	04810004 	movi	r18,1024
    73e8:	8809883a 	mov	r4,r17
    73ec:	900b883a 	mov	r5,r18
    73f0:	00074ec0 	call	74ec <_malloc_r>
    73f4:	1009883a 	mov	r4,r2
    73f8:	10003126 	beq	r2,zero,74c0 <__smakebuf_r+0x168>
    73fc:	80c0030b 	ldhu	r3,12(r16)
    7400:	00800034 	movhi	r2,0
    7404:	10991704 	addi	r2,r2,25692
    7408:	88800f15 	stw	r2,60(r17)
    740c:	18c02014 	ori	r3,r3,128
    7410:	84800515 	stw	r18,20(r16)
    7414:	80c0030d 	sth	r3,12(r16)
    7418:	81000415 	stw	r4,16(r16)
    741c:	81000015 	stw	r4,0(r16)
    7420:	dfc01217 	ldw	ra,72(sp)
    7424:	dc801117 	ldw	r18,68(sp)
    7428:	dc401017 	ldw	r17,64(sp)
    742c:	dc000f17 	ldw	r16,60(sp)
    7430:	dec01304 	addi	sp,sp,76
    7434:	f800283a 	ret
    7438:	80c0030b 	ldhu	r3,12(r16)
    743c:	1880200c 	andi	r2,r3,128
    7440:	10000426 	beq	r2,zero,7454 <__smakebuf_r+0xfc>
    7444:	04801004 	movi	r18,64
    7448:	18820014 	ori	r2,r3,2048
    744c:	8080030d 	sth	r2,12(r16)
    7450:	003fe506 	br	73e8 <__smakebuf_r+0x90>
    7454:	04810004 	movi	r18,1024
    7458:	003ffb06 	br	7448 <__smakebuf_r+0xf0>
    745c:	8140038f 	ldh	r5,14(r16)
    7460:	8809883a 	mov	r4,r17
    7464:	000cf680 	call	cf68 <_isatty_r>
    7468:	103fde26 	beq	r2,zero,73e4 <__smakebuf_r+0x8c>
    746c:	8080030b 	ldhu	r2,12(r16)
    7470:	80c010c4 	addi	r3,r16,67
    7474:	04810004 	movi	r18,1024
    7478:	10800054 	ori	r2,r2,1
    747c:	8080030d 	sth	r2,12(r16)
    7480:	00800044 	movi	r2,1
    7484:	80c00415 	stw	r3,16(r16)
    7488:	80800515 	stw	r2,20(r16)
    748c:	80c00015 	stw	r3,0(r16)
    7490:	003fd506 	br	73e8 <__smakebuf_r+0x90>
    7494:	80c00a17 	ldw	r3,40(r16)
    7498:	00800074 	movhi	r2,1
    749c:	10a69d04 	addi	r2,r2,-25996
    74a0:	18bfcb1e 	bne	r3,r2,73d0 <__smakebuf_r+0x78>
    74a4:	8080030b 	ldhu	r2,12(r16)
    74a8:	00c10004 	movi	r3,1024
    74ac:	1825883a 	mov	r18,r3
    74b0:	10c4b03a 	or	r2,r2,r3
    74b4:	8080030d 	sth	r2,12(r16)
    74b8:	80c01315 	stw	r3,76(r16)
    74bc:	003fca06 	br	73e8 <__smakebuf_r+0x90>
    74c0:	8100030b 	ldhu	r4,12(r16)
    74c4:	2080800c 	andi	r2,r4,512
    74c8:	103fb21e 	bne	r2,zero,7394 <__smakebuf_r+0x3c>
    74cc:	80c010c4 	addi	r3,r16,67
    74d0:	21000094 	ori	r4,r4,2
    74d4:	00800044 	movi	r2,1
    74d8:	80800515 	stw	r2,20(r16)
    74dc:	8100030d 	sth	r4,12(r16)
    74e0:	80c00415 	stw	r3,16(r16)
    74e4:	80c00015 	stw	r3,0(r16)
    74e8:	003faa06 	br	7394 <__smakebuf_r+0x3c>

000074ec <_malloc_r>:
    74ec:	defff604 	addi	sp,sp,-40
    74f0:	28c002c4 	addi	r3,r5,11
    74f4:	00800584 	movi	r2,22
    74f8:	dc800215 	stw	r18,8(sp)
    74fc:	dfc00915 	stw	ra,36(sp)
    7500:	df000815 	stw	fp,32(sp)
    7504:	ddc00715 	stw	r23,28(sp)
    7508:	dd800615 	stw	r22,24(sp)
    750c:	dd400515 	stw	r21,20(sp)
    7510:	dd000415 	stw	r20,16(sp)
    7514:	dcc00315 	stw	r19,12(sp)
    7518:	dc400115 	stw	r17,4(sp)
    751c:	dc000015 	stw	r16,0(sp)
    7520:	2025883a 	mov	r18,r4
    7524:	10c01236 	bltu	r2,r3,7570 <_malloc_r+0x84>
    7528:	04400404 	movi	r17,16
    752c:	8940142e 	bgeu	r17,r5,7580 <_malloc_r+0x94>
    7530:	00800304 	movi	r2,12
    7534:	0007883a 	mov	r3,zero
    7538:	90800015 	stw	r2,0(r18)
    753c:	1805883a 	mov	r2,r3
    7540:	dfc00917 	ldw	ra,36(sp)
    7544:	df000817 	ldw	fp,32(sp)
    7548:	ddc00717 	ldw	r23,28(sp)
    754c:	dd800617 	ldw	r22,24(sp)
    7550:	dd400517 	ldw	r21,20(sp)
    7554:	dd000417 	ldw	r20,16(sp)
    7558:	dcc00317 	ldw	r19,12(sp)
    755c:	dc800217 	ldw	r18,8(sp)
    7560:	dc400117 	ldw	r17,4(sp)
    7564:	dc000017 	ldw	r16,0(sp)
    7568:	dec00a04 	addi	sp,sp,40
    756c:	f800283a 	ret
    7570:	00bffe04 	movi	r2,-8
    7574:	18a2703a 	and	r17,r3,r2
    7578:	883fed16 	blt	r17,zero,7530 <_malloc_r+0x44>
    757c:	897fec36 	bltu	r17,r5,7530 <_malloc_r+0x44>
    7580:	9009883a 	mov	r4,r18
    7584:	000f7b40 	call	f7b4 <__malloc_lock>
    7588:	00807dc4 	movi	r2,503
    758c:	14402b2e 	bgeu	r2,r17,763c <_malloc_r+0x150>
    7590:	8806d27a 	srli	r3,r17,9
    7594:	18003f1e 	bne	r3,zero,7694 <_malloc_r+0x1a8>
    7598:	880cd0fa 	srli	r6,r17,3
    759c:	300490fa 	slli	r2,r6,3
    75a0:	02c00074 	movhi	r11,1
    75a4:	5acb1304 	addi	r11,r11,11340
    75a8:	12cb883a 	add	r5,r2,r11
    75ac:	2c000317 	ldw	r16,12(r5)
    75b0:	580f883a 	mov	r7,r11
    75b4:	2c00041e 	bne	r5,r16,75c8 <_malloc_r+0xdc>
    75b8:	00000a06 	br	75e4 <_malloc_r+0xf8>
    75bc:	1800860e 	bge	r3,zero,77d8 <_malloc_r+0x2ec>
    75c0:	84000317 	ldw	r16,12(r16)
    75c4:	2c000726 	beq	r5,r16,75e4 <_malloc_r+0xf8>
    75c8:	80800117 	ldw	r2,4(r16)
    75cc:	00ffff04 	movi	r3,-4
    75d0:	10c8703a 	and	r4,r2,r3
    75d4:	2447c83a 	sub	r3,r4,r17
    75d8:	008003c4 	movi	r2,15
    75dc:	10fff70e 	bge	r2,r3,75bc <_malloc_r+0xd0>
    75e0:	31bfffc4 	addi	r6,r6,-1
    75e4:	32400044 	addi	r9,r6,1
    75e8:	02800074 	movhi	r10,1
    75ec:	528b1504 	addi	r10,r10,11348
    75f0:	54000217 	ldw	r16,8(r10)
    75f4:	8280a026 	beq	r16,r10,7878 <_malloc_r+0x38c>
    75f8:	80800117 	ldw	r2,4(r16)
    75fc:	00ffff04 	movi	r3,-4
    7600:	10ca703a 	and	r5,r2,r3
    7604:	2c4dc83a 	sub	r6,r5,r17
    7608:	008003c4 	movi	r2,15
    760c:	11808316 	blt	r2,r6,781c <_malloc_r+0x330>
    7610:	52800315 	stw	r10,12(r10)
    7614:	52800215 	stw	r10,8(r10)
    7618:	30002916 	blt	r6,zero,76c0 <_malloc_r+0x1d4>
    761c:	8147883a 	add	r3,r16,r5
    7620:	18800117 	ldw	r2,4(r3)
    7624:	9009883a 	mov	r4,r18
    7628:	10800054 	ori	r2,r2,1
    762c:	18800115 	stw	r2,4(r3)
    7630:	000f7b80 	call	f7b8 <__malloc_unlock>
    7634:	80c00204 	addi	r3,r16,8
    7638:	003fc006 	br	753c <_malloc_r+0x50>
    763c:	02c00074 	movhi	r11,1
    7640:	5acb1304 	addi	r11,r11,11340
    7644:	8ac5883a 	add	r2,r17,r11
    7648:	14000317 	ldw	r16,12(r2)
    764c:	580f883a 	mov	r7,r11
    7650:	8806d0fa 	srli	r3,r17,3
    7654:	14006c26 	beq	r2,r16,7808 <_malloc_r+0x31c>
    7658:	80c00117 	ldw	r3,4(r16)
    765c:	00bfff04 	movi	r2,-4
    7660:	81800317 	ldw	r6,12(r16)
    7664:	1886703a 	and	r3,r3,r2
    7668:	80c7883a 	add	r3,r16,r3
    766c:	18800117 	ldw	r2,4(r3)
    7670:	81400217 	ldw	r5,8(r16)
    7674:	9009883a 	mov	r4,r18
    7678:	10800054 	ori	r2,r2,1
    767c:	18800115 	stw	r2,4(r3)
    7680:	31400215 	stw	r5,8(r6)
    7684:	29800315 	stw	r6,12(r5)
    7688:	000f7b80 	call	f7b8 <__malloc_unlock>
    768c:	80c00204 	addi	r3,r16,8
    7690:	003faa06 	br	753c <_malloc_r+0x50>
    7694:	00800104 	movi	r2,4
    7698:	10c0052e 	bgeu	r2,r3,76b0 <_malloc_r+0x1c4>
    769c:	00800504 	movi	r2,20
    76a0:	10c07836 	bltu	r2,r3,7884 <_malloc_r+0x398>
    76a4:	198016c4 	addi	r6,r3,91
    76a8:	300490fa 	slli	r2,r6,3
    76ac:	003fbc06 	br	75a0 <_malloc_r+0xb4>
    76b0:	8804d1ba 	srli	r2,r17,6
    76b4:	11800e04 	addi	r6,r2,56
    76b8:	300490fa 	slli	r2,r6,3
    76bc:	003fb806 	br	75a0 <_malloc_r+0xb4>
    76c0:	00807fc4 	movi	r2,511
    76c4:	1140bb36 	bltu	r2,r5,79b4 <_malloc_r+0x4c8>
    76c8:	2806d0fa 	srli	r3,r5,3
    76cc:	573ffe04 	addi	fp,r10,-8
    76d0:	00800044 	movi	r2,1
    76d4:	180890fa 	slli	r4,r3,3
    76d8:	1807d0ba 	srai	r3,r3,2
    76dc:	e1c00117 	ldw	r7,4(fp)
    76e0:	5909883a 	add	r4,r11,r4
    76e4:	21400217 	ldw	r5,8(r4)
    76e8:	10c4983a 	sll	r2,r2,r3
    76ec:	81000315 	stw	r4,12(r16)
    76f0:	81400215 	stw	r5,8(r16)
    76f4:	388eb03a 	or	r7,r7,r2
    76f8:	2c000315 	stw	r16,12(r5)
    76fc:	24000215 	stw	r16,8(r4)
    7700:	e1c00115 	stw	r7,4(fp)
    7704:	4807883a 	mov	r3,r9
    7708:	4800cd16 	blt	r9,zero,7a40 <_malloc_r+0x554>
    770c:	1807d0ba 	srai	r3,r3,2
    7710:	00800044 	movi	r2,1
    7714:	10c8983a 	sll	r4,r2,r3
    7718:	39004436 	bltu	r7,r4,782c <_malloc_r+0x340>
    771c:	21c4703a 	and	r2,r4,r7
    7720:	10000a1e 	bne	r2,zero,774c <_malloc_r+0x260>
    7724:	2109883a 	add	r4,r4,r4
    7728:	00bfff04 	movi	r2,-4
    772c:	4884703a 	and	r2,r9,r2
    7730:	3906703a 	and	r3,r7,r4
    7734:	12400104 	addi	r9,r2,4
    7738:	1800041e 	bne	r3,zero,774c <_malloc_r+0x260>
    773c:	2109883a 	add	r4,r4,r4
    7740:	3904703a 	and	r2,r7,r4
    7744:	4a400104 	addi	r9,r9,4
    7748:	103ffc26 	beq	r2,zero,773c <_malloc_r+0x250>
    774c:	480490fa 	slli	r2,r9,3
    7750:	4819883a 	mov	r12,r9
    7754:	023fff04 	movi	r8,-4
    7758:	589b883a 	add	r13,r11,r2
    775c:	6807883a 	mov	r3,r13
    7760:	014003c4 	movi	r5,15
    7764:	1c000317 	ldw	r16,12(r3)
    7768:	1c00041e 	bne	r3,r16,777c <_malloc_r+0x290>
    776c:	0000a706 	br	7a0c <_malloc_r+0x520>
    7770:	3000ab0e 	bge	r6,zero,7a20 <_malloc_r+0x534>
    7774:	84000317 	ldw	r16,12(r16)
    7778:	1c00a426 	beq	r3,r16,7a0c <_malloc_r+0x520>
    777c:	80800117 	ldw	r2,4(r16)
    7780:	1204703a 	and	r2,r2,r8
    7784:	144dc83a 	sub	r6,r2,r17
    7788:	29bff90e 	bge	r5,r6,7770 <_malloc_r+0x284>
    778c:	81000317 	ldw	r4,12(r16)
    7790:	80c00217 	ldw	r3,8(r16)
    7794:	89400054 	ori	r5,r17,1
    7798:	8445883a 	add	r2,r16,r17
    779c:	20c00215 	stw	r3,8(r4)
    77a0:	19000315 	stw	r4,12(r3)
    77a4:	81400115 	stw	r5,4(r16)
    77a8:	1187883a 	add	r3,r2,r6
    77ac:	31000054 	ori	r4,r6,1
    77b0:	50800315 	stw	r2,12(r10)
    77b4:	50800215 	stw	r2,8(r10)
    77b8:	19800015 	stw	r6,0(r3)
    77bc:	11000115 	stw	r4,4(r2)
    77c0:	12800215 	stw	r10,8(r2)
    77c4:	12800315 	stw	r10,12(r2)
    77c8:	9009883a 	mov	r4,r18
    77cc:	000f7b80 	call	f7b8 <__malloc_unlock>
    77d0:	80c00204 	addi	r3,r16,8
    77d4:	003f5906 	br	753c <_malloc_r+0x50>
    77d8:	8109883a 	add	r4,r16,r4
    77dc:	20800117 	ldw	r2,4(r4)
    77e0:	80c00217 	ldw	r3,8(r16)
    77e4:	81400317 	ldw	r5,12(r16)
    77e8:	10800054 	ori	r2,r2,1
    77ec:	20800115 	stw	r2,4(r4)
    77f0:	28c00215 	stw	r3,8(r5)
    77f4:	19400315 	stw	r5,12(r3)
    77f8:	9009883a 	mov	r4,r18
    77fc:	000f7b80 	call	f7b8 <__malloc_unlock>
    7800:	80c00204 	addi	r3,r16,8
    7804:	003f4d06 	br	753c <_malloc_r+0x50>
    7808:	80800204 	addi	r2,r16,8
    780c:	14000317 	ldw	r16,12(r2)
    7810:	143f911e 	bne	r2,r16,7658 <_malloc_r+0x16c>
    7814:	1a400084 	addi	r9,r3,2
    7818:	003f7306 	br	75e8 <_malloc_r+0xfc>
    781c:	88c00054 	ori	r3,r17,1
    7820:	8445883a 	add	r2,r16,r17
    7824:	80c00115 	stw	r3,4(r16)
    7828:	003fdf06 	br	77a8 <_malloc_r+0x2bc>
    782c:	e4000217 	ldw	r16,8(fp)
    7830:	00bfff04 	movi	r2,-4
    7834:	80c00117 	ldw	r3,4(r16)
    7838:	802d883a 	mov	r22,r16
    783c:	18aa703a 	and	r21,r3,r2
    7840:	ac401636 	bltu	r21,r17,789c <_malloc_r+0x3b0>
    7844:	ac49c83a 	sub	r4,r21,r17
    7848:	008003c4 	movi	r2,15
    784c:	1100130e 	bge	r2,r4,789c <_malloc_r+0x3b0>
    7850:	88800054 	ori	r2,r17,1
    7854:	8447883a 	add	r3,r16,r17
    7858:	80800115 	stw	r2,4(r16)
    785c:	20800054 	ori	r2,r4,1
    7860:	18800115 	stw	r2,4(r3)
    7864:	e0c00215 	stw	r3,8(fp)
    7868:	9009883a 	mov	r4,r18
    786c:	000f7b80 	call	f7b8 <__malloc_unlock>
    7870:	80c00204 	addi	r3,r16,8
    7874:	003f3106 	br	753c <_malloc_r+0x50>
    7878:	39c00117 	ldw	r7,4(r7)
    787c:	573ffe04 	addi	fp,r10,-8
    7880:	003fa006 	br	7704 <_malloc_r+0x218>
    7884:	00801504 	movi	r2,84
    7888:	10c06736 	bltu	r2,r3,7a28 <_malloc_r+0x53c>
    788c:	8804d33a 	srli	r2,r17,12
    7890:	11801b84 	addi	r6,r2,110
    7894:	300490fa 	slli	r2,r6,3
    7898:	003f4106 	br	75a0 <_malloc_r+0xb4>
    789c:	d0a72017 	ldw	r2,-25472(gp)
    78a0:	d0e00617 	ldw	r3,-32744(gp)
    78a4:	053fffc4 	movi	r20,-1
    78a8:	10800404 	addi	r2,r2,16
    78ac:	88a7883a 	add	r19,r17,r2
    78b0:	1d000326 	beq	r3,r20,78c0 <_malloc_r+0x3d4>
    78b4:	98c3ffc4 	addi	r3,r19,4095
    78b8:	00bc0004 	movi	r2,-4096
    78bc:	18a6703a 	and	r19,r3,r2
    78c0:	9009883a 	mov	r4,r18
    78c4:	980b883a 	mov	r5,r19
    78c8:	00098600 	call	9860 <_sbrk_r>
    78cc:	1009883a 	mov	r4,r2
    78d0:	15000426 	beq	r2,r20,78e4 <_malloc_r+0x3f8>
    78d4:	854b883a 	add	r5,r16,r21
    78d8:	1029883a 	mov	r20,r2
    78dc:	11405a2e 	bgeu	r2,r5,7a48 <_malloc_r+0x55c>
    78e0:	87000c26 	beq	r16,fp,7914 <_malloc_r+0x428>
    78e4:	e4000217 	ldw	r16,8(fp)
    78e8:	80c00117 	ldw	r3,4(r16)
    78ec:	00bfff04 	movi	r2,-4
    78f0:	1884703a 	and	r2,r3,r2
    78f4:	14400336 	bltu	r2,r17,7904 <_malloc_r+0x418>
    78f8:	1449c83a 	sub	r4,r2,r17
    78fc:	008003c4 	movi	r2,15
    7900:	113fd316 	blt	r2,r4,7850 <_malloc_r+0x364>
    7904:	9009883a 	mov	r4,r18
    7908:	000f7b80 	call	f7b8 <__malloc_unlock>
    790c:	0007883a 	mov	r3,zero
    7910:	003f0a06 	br	753c <_malloc_r+0x50>
    7914:	05c00074 	movhi	r23,1
    7918:	bdd83504 	addi	r23,r23,24788
    791c:	b8800017 	ldw	r2,0(r23)
    7920:	988d883a 	add	r6,r19,r2
    7924:	b9800015 	stw	r6,0(r23)
    7928:	d0e00617 	ldw	r3,-32744(gp)
    792c:	00bfffc4 	movi	r2,-1
    7930:	18808e26 	beq	r3,r2,7b6c <_malloc_r+0x680>
    7934:	2145c83a 	sub	r2,r4,r5
    7938:	3085883a 	add	r2,r6,r2
    793c:	b8800015 	stw	r2,0(r23)
    7940:	20c001cc 	andi	r3,r4,7
    7944:	18005f1e 	bne	r3,zero,7ac4 <_malloc_r+0x5d8>
    7948:	000b883a 	mov	r5,zero
    794c:	a4c5883a 	add	r2,r20,r19
    7950:	1083ffcc 	andi	r2,r2,4095
    7954:	00c40004 	movi	r3,4096
    7958:	1887c83a 	sub	r3,r3,r2
    795c:	28e7883a 	add	r19,r5,r3
    7960:	9009883a 	mov	r4,r18
    7964:	980b883a 	mov	r5,r19
    7968:	00098600 	call	9860 <_sbrk_r>
    796c:	1007883a 	mov	r3,r2
    7970:	00bfffc4 	movi	r2,-1
    7974:	18807a26 	beq	r3,r2,7b60 <_malloc_r+0x674>
    7978:	1d05c83a 	sub	r2,r3,r20
    797c:	9885883a 	add	r2,r19,r2
    7980:	10c00054 	ori	r3,r2,1
    7984:	b8800017 	ldw	r2,0(r23)
    7988:	a021883a 	mov	r16,r20
    798c:	a0c00115 	stw	r3,4(r20)
    7990:	9885883a 	add	r2,r19,r2
    7994:	b8800015 	stw	r2,0(r23)
    7998:	e5000215 	stw	r20,8(fp)
    799c:	b7003626 	beq	r22,fp,7a78 <_malloc_r+0x58c>
    79a0:	018003c4 	movi	r6,15
    79a4:	35404b36 	bltu	r6,r21,7ad4 <_malloc_r+0x5e8>
    79a8:	00800044 	movi	r2,1
    79ac:	a0800115 	stw	r2,4(r20)
    79b0:	003fcd06 	br	78e8 <_malloc_r+0x3fc>
    79b4:	2808d27a 	srli	r4,r5,9
    79b8:	2000371e 	bne	r4,zero,7a98 <_malloc_r+0x5ac>
    79bc:	2808d0fa 	srli	r4,r5,3
    79c0:	200690fa 	slli	r3,r4,3
    79c4:	1ad1883a 	add	r8,r3,r11
    79c8:	41800217 	ldw	r6,8(r8)
    79cc:	41805b26 	beq	r8,r6,7b3c <_malloc_r+0x650>
    79d0:	30800117 	ldw	r2,4(r6)
    79d4:	00ffff04 	movi	r3,-4
    79d8:	10c4703a 	and	r2,r2,r3
    79dc:	2880022e 	bgeu	r5,r2,79e8 <_malloc_r+0x4fc>
    79e0:	31800217 	ldw	r6,8(r6)
    79e4:	41bffa1e 	bne	r8,r6,79d0 <_malloc_r+0x4e4>
    79e8:	32000317 	ldw	r8,12(r6)
    79ec:	39c00117 	ldw	r7,4(r7)
    79f0:	82000315 	stw	r8,12(r16)
    79f4:	81800215 	stw	r6,8(r16)
    79f8:	07000074 	movhi	fp,1
    79fc:	e70b1304 	addi	fp,fp,11340
    7a00:	34000315 	stw	r16,12(r6)
    7a04:	44000215 	stw	r16,8(r8)
    7a08:	003f3e06 	br	7704 <_malloc_r+0x218>
    7a0c:	63000044 	addi	r12,r12,1
    7a10:	608000cc 	andi	r2,r12,3
    7a14:	10005d26 	beq	r2,zero,7b8c <_malloc_r+0x6a0>
    7a18:	18c00204 	addi	r3,r3,8
    7a1c:	003f5106 	br	7764 <_malloc_r+0x278>
    7a20:	8089883a 	add	r4,r16,r2
    7a24:	003f6d06 	br	77dc <_malloc_r+0x2f0>
    7a28:	00805504 	movi	r2,340
    7a2c:	10c02036 	bltu	r2,r3,7ab0 <_malloc_r+0x5c4>
    7a30:	8804d3fa 	srli	r2,r17,15
    7a34:	11801dc4 	addi	r6,r2,119
    7a38:	300490fa 	slli	r2,r6,3
    7a3c:	003ed806 	br	75a0 <_malloc_r+0xb4>
    7a40:	48c000c4 	addi	r3,r9,3
    7a44:	003f3106 	br	770c <_malloc_r+0x220>
    7a48:	05c00074 	movhi	r23,1
    7a4c:	bdd83504 	addi	r23,r23,24788
    7a50:	b8800017 	ldw	r2,0(r23)
    7a54:	988d883a 	add	r6,r19,r2
    7a58:	b9800015 	stw	r6,0(r23)
    7a5c:	293fb21e 	bne	r5,r4,7928 <_malloc_r+0x43c>
    7a60:	2083ffcc 	andi	r2,r4,4095
    7a64:	103fb01e 	bne	r2,zero,7928 <_malloc_r+0x43c>
    7a68:	e4000217 	ldw	r16,8(fp)
    7a6c:	9d45883a 	add	r2,r19,r21
    7a70:	10800054 	ori	r2,r2,1
    7a74:	80800115 	stw	r2,4(r16)
    7a78:	b8c00017 	ldw	r3,0(r23)
    7a7c:	d0a72117 	ldw	r2,-25468(gp)
    7a80:	10c0012e 	bgeu	r2,r3,7a88 <_malloc_r+0x59c>
    7a84:	d0e72115 	stw	r3,-25468(gp)
    7a88:	d0a72217 	ldw	r2,-25464(gp)
    7a8c:	10ff962e 	bgeu	r2,r3,78e8 <_malloc_r+0x3fc>
    7a90:	d0e72215 	stw	r3,-25464(gp)
    7a94:	003f9406 	br	78e8 <_malloc_r+0x3fc>
    7a98:	00800104 	movi	r2,4
    7a9c:	11001e36 	bltu	r2,r4,7b18 <_malloc_r+0x62c>
    7aa0:	2804d1ba 	srli	r2,r5,6
    7aa4:	11000e04 	addi	r4,r2,56
    7aa8:	200690fa 	slli	r3,r4,3
    7aac:	003fc506 	br	79c4 <_malloc_r+0x4d8>
    7ab0:	00815504 	movi	r2,1364
    7ab4:	10c01d2e 	bgeu	r2,r3,7b2c <_malloc_r+0x640>
    7ab8:	01801f84 	movi	r6,126
    7abc:	0080fc04 	movi	r2,1008
    7ac0:	003eb706 	br	75a0 <_malloc_r+0xb4>
    7ac4:	00800204 	movi	r2,8
    7ac8:	10cbc83a 	sub	r5,r2,r3
    7acc:	2169883a 	add	r20,r4,r5
    7ad0:	003f9e06 	br	794c <_malloc_r+0x460>
    7ad4:	00bffe04 	movi	r2,-8
    7ad8:	a93ffd04 	addi	r4,r21,-12
    7adc:	2088703a 	and	r4,r4,r2
    7ae0:	b10b883a 	add	r5,r22,r4
    7ae4:	00c00144 	movi	r3,5
    7ae8:	28c00215 	stw	r3,8(r5)
    7aec:	28c00115 	stw	r3,4(r5)
    7af0:	b0800117 	ldw	r2,4(r22)
    7af4:	1080004c 	andi	r2,r2,1
    7af8:	2084b03a 	or	r2,r4,r2
    7afc:	b0800115 	stw	r2,4(r22)
    7b00:	313fdd2e 	bgeu	r6,r4,7a78 <_malloc_r+0x58c>
    7b04:	b1400204 	addi	r5,r22,8
    7b08:	9009883a 	mov	r4,r18
    7b0c:	00069380 	call	6938 <_free_r>
    7b10:	e4000217 	ldw	r16,8(fp)
    7b14:	003fd806 	br	7a78 <_malloc_r+0x58c>
    7b18:	00800504 	movi	r2,20
    7b1c:	11001536 	bltu	r2,r4,7b74 <_malloc_r+0x688>
    7b20:	210016c4 	addi	r4,r4,91
    7b24:	200690fa 	slli	r3,r4,3
    7b28:	003fa606 	br	79c4 <_malloc_r+0x4d8>
    7b2c:	8804d4ba 	srli	r2,r17,18
    7b30:	11801f04 	addi	r6,r2,124
    7b34:	300490fa 	slli	r2,r6,3
    7b38:	003e9906 	br	75a0 <_malloc_r+0xb4>
    7b3c:	2009d0ba 	srai	r4,r4,2
    7b40:	01400074 	movhi	r5,1
    7b44:	294b1304 	addi	r5,r5,11340
    7b48:	00c00044 	movi	r3,1
    7b4c:	28800117 	ldw	r2,4(r5)
    7b50:	1906983a 	sll	r3,r3,r4
    7b54:	10c4b03a 	or	r2,r2,r3
    7b58:	28800115 	stw	r2,4(r5)
    7b5c:	003fa306 	br	79ec <_malloc_r+0x500>
    7b60:	0027883a 	mov	r19,zero
    7b64:	00c00044 	movi	r3,1
    7b68:	003f8606 	br	7984 <_malloc_r+0x498>
    7b6c:	d1200615 	stw	r4,-32744(gp)
    7b70:	003f7306 	br	7940 <_malloc_r+0x454>
    7b74:	00801504 	movi	r2,84
    7b78:	11001936 	bltu	r2,r4,7be0 <_malloc_r+0x6f4>
    7b7c:	2804d33a 	srli	r2,r5,12
    7b80:	11001b84 	addi	r4,r2,110
    7b84:	200690fa 	slli	r3,r4,3
    7b88:	003f8e06 	br	79c4 <_malloc_r+0x4d8>
    7b8c:	480b883a 	mov	r5,r9
    7b90:	6807883a 	mov	r3,r13
    7b94:	288000cc 	andi	r2,r5,3
    7b98:	18fffe04 	addi	r3,r3,-8
    7b9c:	297fffc4 	addi	r5,r5,-1
    7ba0:	10001526 	beq	r2,zero,7bf8 <_malloc_r+0x70c>
    7ba4:	18800217 	ldw	r2,8(r3)
    7ba8:	10fffa26 	beq	r2,r3,7b94 <_malloc_r+0x6a8>
    7bac:	2109883a 	add	r4,r4,r4
    7bb0:	393f1e36 	bltu	r7,r4,782c <_malloc_r+0x340>
    7bb4:	203f1d26 	beq	r4,zero,782c <_malloc_r+0x340>
    7bb8:	21c4703a 	and	r2,r4,r7
    7bbc:	10000226 	beq	r2,zero,7bc8 <_malloc_r+0x6dc>
    7bc0:	6013883a 	mov	r9,r12
    7bc4:	003ee106 	br	774c <_malloc_r+0x260>
    7bc8:	2109883a 	add	r4,r4,r4
    7bcc:	3904703a 	and	r2,r7,r4
    7bd0:	63000104 	addi	r12,r12,4
    7bd4:	103ffc26 	beq	r2,zero,7bc8 <_malloc_r+0x6dc>
    7bd8:	6013883a 	mov	r9,r12
    7bdc:	003edb06 	br	774c <_malloc_r+0x260>
    7be0:	00805504 	movi	r2,340
    7be4:	11000836 	bltu	r2,r4,7c08 <_malloc_r+0x71c>
    7be8:	2804d3fa 	srli	r2,r5,15
    7bec:	11001dc4 	addi	r4,r2,119
    7bf0:	200690fa 	slli	r3,r4,3
    7bf4:	003f7306 	br	79c4 <_malloc_r+0x4d8>
    7bf8:	0104303a 	nor	r2,zero,r4
    7bfc:	388e703a 	and	r7,r7,r2
    7c00:	e1c00115 	stw	r7,4(fp)
    7c04:	003fe906 	br	7bac <_malloc_r+0x6c0>
    7c08:	00815504 	movi	r2,1364
    7c0c:	1100032e 	bgeu	r2,r4,7c1c <_malloc_r+0x730>
    7c10:	01001f84 	movi	r4,126
    7c14:	00c0fc04 	movi	r3,1008
    7c18:	003f6a06 	br	79c4 <_malloc_r+0x4d8>
    7c1c:	2804d4ba 	srli	r2,r5,18
    7c20:	11001f04 	addi	r4,r2,124
    7c24:	200690fa 	slli	r3,r4,3
    7c28:	003f6606 	br	79c4 <_malloc_r+0x4d8>

00007c2c <_mbrtowc_r>:
    7c2c:	defffc04 	addi	sp,sp,-16
    7c30:	dc400215 	stw	r17,8(sp)
    7c34:	dc000115 	stw	r16,4(sp)
    7c38:	dfc00315 	stw	ra,12(sp)
    7c3c:	dc000417 	ldw	r16,16(sp)
    7c40:	2023883a 	mov	r17,r4
    7c44:	30000f26 	beq	r6,zero,7c84 <_mbrtowc_r+0x58>
    7c48:	dc000015 	stw	r16,0(sp)
    7c4c:	0007cec0 	call	7cec <_mbtowc_r>
    7c50:	1007883a 	mov	r3,r2
    7c54:	00bfffc4 	movi	r2,-1
    7c58:	1809883a 	mov	r4,r3
    7c5c:	1880111e 	bne	r3,r2,7ca4 <_mbrtowc_r+0x78>
    7c60:	80000015 	stw	zero,0(r16)
    7c64:	00802284 	movi	r2,138
    7c68:	88800015 	stw	r2,0(r17)
    7c6c:	2005883a 	mov	r2,r4
    7c70:	dfc00317 	ldw	ra,12(sp)
    7c74:	dc400217 	ldw	r17,8(sp)
    7c78:	dc000117 	ldw	r16,4(sp)
    7c7c:	dec00404 	addi	sp,sp,16
    7c80:	f800283a 	ret
    7c84:	000b883a 	mov	r5,zero
    7c88:	01800074 	movhi	r6,1
    7c8c:	31883e04 	addi	r6,r6,8440
    7c90:	01c00044 	movi	r7,1
    7c94:	dc000015 	stw	r16,0(sp)
    7c98:	0007cec0 	call	7cec <_mbtowc_r>
    7c9c:	1007883a 	mov	r3,r2
    7ca0:	003fec06 	br	7c54 <_mbrtowc_r+0x28>
    7ca4:	1809883a 	mov	r4,r3
    7ca8:	003ff006 	br	7c6c <_mbrtowc_r+0x40>

00007cac <mbrtowc>:
    7cac:	00800074 	movhi	r2,1
    7cb0:	10910c04 	addi	r2,r2,17456
    7cb4:	2017883a 	mov	r11,r4
    7cb8:	11000017 	ldw	r4,0(r2)
    7cbc:	defffe04 	addi	sp,sp,-8
    7cc0:	3013883a 	mov	r9,r6
    7cc4:	2805883a 	mov	r2,r5
    7cc8:	d9c00015 	stw	r7,0(sp)
    7ccc:	580b883a 	mov	r5,r11
    7cd0:	100d883a 	mov	r6,r2
    7cd4:	480f883a 	mov	r7,r9
    7cd8:	dfc00115 	stw	ra,4(sp)
    7cdc:	0007c2c0 	call	7c2c <_mbrtowc_r>
    7ce0:	dfc00117 	ldw	ra,4(sp)
    7ce4:	dec00204 	addi	sp,sp,8
    7ce8:	f800283a 	ret

00007cec <_mbtowc_r>:
    7cec:	deffff04 	addi	sp,sp,-4
    7cf0:	0005883a 	mov	r2,zero
    7cf4:	28000326 	beq	r5,zero,7d04 <_mbtowc_r+0x18>
    7cf8:	3000041e 	bne	r6,zero,7d0c <_mbtowc_r+0x20>
    7cfc:	dec00104 	addi	sp,sp,4
    7d00:	f800283a 	ret
    7d04:	d80b883a 	mov	r5,sp
    7d08:	303ffc26 	beq	r6,zero,7cfc <_mbtowc_r+0x10>
    7d0c:	00bfff84 	movi	r2,-2
    7d10:	383ffa26 	beq	r7,zero,7cfc <_mbtowc_r+0x10>
    7d14:	30800003 	ldbu	r2,0(r6)
    7d18:	28800015 	stw	r2,0(r5)
    7d1c:	30c00003 	ldbu	r3,0(r6)
    7d20:	1804c03a 	cmpne	r2,r3,zero
    7d24:	dec00104 	addi	sp,sp,4
    7d28:	f800283a 	ret

00007d2c <memchr>:
    7d2c:	008000c4 	movi	r2,3
    7d30:	29403fcc 	andi	r5,r5,255
    7d34:	2007883a 	mov	r3,r4
    7d38:	1180022e 	bgeu	r2,r6,7d44 <memchr+0x18>
    7d3c:	2084703a 	and	r2,r4,r2
    7d40:	10000b26 	beq	r2,zero,7d70 <memchr+0x44>
    7d44:	313fffc4 	addi	r4,r6,-1
    7d48:	3000051e 	bne	r6,zero,7d60 <memchr+0x34>
    7d4c:	00002c06 	br	7e00 <memchr+0xd4>
    7d50:	213fffc4 	addi	r4,r4,-1
    7d54:	00bfffc4 	movi	r2,-1
    7d58:	18c00044 	addi	r3,r3,1
    7d5c:	20802826 	beq	r4,r2,7e00 <memchr+0xd4>
    7d60:	18800003 	ldbu	r2,0(r3)
    7d64:	28bffa1e 	bne	r5,r2,7d50 <memchr+0x24>
    7d68:	1805883a 	mov	r2,r3
    7d6c:	f800283a 	ret
    7d70:	0011883a 	mov	r8,zero
    7d74:	0007883a 	mov	r3,zero
    7d78:	01c00104 	movi	r7,4
    7d7c:	4004923a 	slli	r2,r8,8
    7d80:	18c00044 	addi	r3,r3,1
    7d84:	1151883a 	add	r8,r2,r5
    7d88:	19fffc1e 	bne	r3,r7,7d7c <memchr+0x50>
    7d8c:	02bfbff4 	movhi	r10,65279
    7d90:	52bfbfc4 	addi	r10,r10,-257
    7d94:	02602074 	movhi	r9,32897
    7d98:	4a602004 	addi	r9,r9,-32640
    7d9c:	02c000c4 	movi	r11,3
    7da0:	20800017 	ldw	r2,0(r4)
    7da4:	31bfff04 	addi	r6,r6,-4
    7da8:	200f883a 	mov	r7,r4
    7dac:	1204f03a 	xor	r2,r2,r8
    7db0:	1287883a 	add	r3,r2,r10
    7db4:	1a46703a 	and	r3,r3,r9
    7db8:	0084303a 	nor	r2,zero,r2
    7dbc:	10c4703a 	and	r2,r2,r3
    7dc0:	10000b26 	beq	r2,zero,7df0 <memchr+0xc4>
    7dc4:	20800003 	ldbu	r2,0(r4)
    7dc8:	28800f26 	beq	r5,r2,7e08 <memchr+0xdc>
    7dcc:	20800043 	ldbu	r2,1(r4)
    7dd0:	21c00044 	addi	r7,r4,1
    7dd4:	28800c26 	beq	r5,r2,7e08 <memchr+0xdc>
    7dd8:	20800083 	ldbu	r2,2(r4)
    7ddc:	21c00084 	addi	r7,r4,2
    7de0:	28800926 	beq	r5,r2,7e08 <memchr+0xdc>
    7de4:	208000c3 	ldbu	r2,3(r4)
    7de8:	21c000c4 	addi	r7,r4,3
    7dec:	28800626 	beq	r5,r2,7e08 <memchr+0xdc>
    7df0:	21000104 	addi	r4,r4,4
    7df4:	59bfea36 	bltu	r11,r6,7da0 <memchr+0x74>
    7df8:	2007883a 	mov	r3,r4
    7dfc:	003fd106 	br	7d44 <memchr+0x18>
    7e00:	0005883a 	mov	r2,zero
    7e04:	f800283a 	ret
    7e08:	3805883a 	mov	r2,r7
    7e0c:	f800283a 	ret

00007e10 <memcpy>:
    7e10:	01c003c4 	movi	r7,15
    7e14:	2007883a 	mov	r3,r4
    7e18:	3980032e 	bgeu	r7,r6,7e28 <memcpy+0x18>
    7e1c:	2904b03a 	or	r2,r5,r4
    7e20:	108000cc 	andi	r2,r2,3
    7e24:	10000926 	beq	r2,zero,7e4c <memcpy+0x3c>
    7e28:	30000626 	beq	r6,zero,7e44 <memcpy+0x34>
    7e2c:	30cd883a 	add	r6,r6,r3
    7e30:	28800003 	ldbu	r2,0(r5)
    7e34:	29400044 	addi	r5,r5,1
    7e38:	18800005 	stb	r2,0(r3)
    7e3c:	18c00044 	addi	r3,r3,1
    7e40:	30fffb1e 	bne	r6,r3,7e30 <memcpy+0x20>
    7e44:	2005883a 	mov	r2,r4
    7e48:	f800283a 	ret
    7e4c:	3811883a 	mov	r8,r7
    7e50:	200f883a 	mov	r7,r4
    7e54:	28c00017 	ldw	r3,0(r5)
    7e58:	31bffc04 	addi	r6,r6,-16
    7e5c:	38c00015 	stw	r3,0(r7)
    7e60:	28800117 	ldw	r2,4(r5)
    7e64:	38800115 	stw	r2,4(r7)
    7e68:	28c00217 	ldw	r3,8(r5)
    7e6c:	38c00215 	stw	r3,8(r7)
    7e70:	28800317 	ldw	r2,12(r5)
    7e74:	29400404 	addi	r5,r5,16
    7e78:	38800315 	stw	r2,12(r7)
    7e7c:	39c00404 	addi	r7,r7,16
    7e80:	41bff436 	bltu	r8,r6,7e54 <memcpy+0x44>
    7e84:	008000c4 	movi	r2,3
    7e88:	1180072e 	bgeu	r2,r6,7ea8 <memcpy+0x98>
    7e8c:	1007883a 	mov	r3,r2
    7e90:	28800017 	ldw	r2,0(r5)
    7e94:	31bfff04 	addi	r6,r6,-4
    7e98:	29400104 	addi	r5,r5,4
    7e9c:	38800015 	stw	r2,0(r7)
    7ea0:	39c00104 	addi	r7,r7,4
    7ea4:	19bffa36 	bltu	r3,r6,7e90 <memcpy+0x80>
    7ea8:	3807883a 	mov	r3,r7
    7eac:	003fde06 	br	7e28 <memcpy+0x18>

00007eb0 <memmove>:
    7eb0:	2807883a 	mov	r3,r5
    7eb4:	2011883a 	mov	r8,r4
    7eb8:	29000c2e 	bgeu	r5,r4,7eec <memmove+0x3c>
    7ebc:	298f883a 	add	r7,r5,r6
    7ec0:	21c00a2e 	bgeu	r4,r7,7eec <memmove+0x3c>
    7ec4:	30000726 	beq	r6,zero,7ee4 <memmove+0x34>
    7ec8:	2187883a 	add	r3,r4,r6
    7ecc:	198dc83a 	sub	r6,r3,r6
    7ed0:	39ffffc4 	addi	r7,r7,-1
    7ed4:	38800003 	ldbu	r2,0(r7)
    7ed8:	18ffffc4 	addi	r3,r3,-1
    7edc:	18800005 	stb	r2,0(r3)
    7ee0:	19bffb1e 	bne	r3,r6,7ed0 <memmove+0x20>
    7ee4:	2005883a 	mov	r2,r4
    7ee8:	f800283a 	ret
    7eec:	01c003c4 	movi	r7,15
    7ef0:	39800a36 	bltu	r7,r6,7f1c <memmove+0x6c>
    7ef4:	303ffb26 	beq	r6,zero,7ee4 <memmove+0x34>
    7ef8:	400f883a 	mov	r7,r8
    7efc:	320d883a 	add	r6,r6,r8
    7f00:	28800003 	ldbu	r2,0(r5)
    7f04:	29400044 	addi	r5,r5,1
    7f08:	38800005 	stb	r2,0(r7)
    7f0c:	39c00044 	addi	r7,r7,1
    7f10:	39bffb1e 	bne	r7,r6,7f00 <memmove+0x50>
    7f14:	2005883a 	mov	r2,r4
    7f18:	f800283a 	ret
    7f1c:	1904b03a 	or	r2,r3,r4
    7f20:	108000cc 	andi	r2,r2,3
    7f24:	103ff31e 	bne	r2,zero,7ef4 <memmove+0x44>
    7f28:	3811883a 	mov	r8,r7
    7f2c:	180b883a 	mov	r5,r3
    7f30:	200f883a 	mov	r7,r4
    7f34:	28c00017 	ldw	r3,0(r5)
    7f38:	31bffc04 	addi	r6,r6,-16
    7f3c:	38c00015 	stw	r3,0(r7)
    7f40:	28800117 	ldw	r2,4(r5)
    7f44:	38800115 	stw	r2,4(r7)
    7f48:	28c00217 	ldw	r3,8(r5)
    7f4c:	38c00215 	stw	r3,8(r7)
    7f50:	28800317 	ldw	r2,12(r5)
    7f54:	29400404 	addi	r5,r5,16
    7f58:	38800315 	stw	r2,12(r7)
    7f5c:	39c00404 	addi	r7,r7,16
    7f60:	41bff436 	bltu	r8,r6,7f34 <memmove+0x84>
    7f64:	008000c4 	movi	r2,3
    7f68:	1180072e 	bgeu	r2,r6,7f88 <memmove+0xd8>
    7f6c:	1007883a 	mov	r3,r2
    7f70:	28800017 	ldw	r2,0(r5)
    7f74:	31bfff04 	addi	r6,r6,-4
    7f78:	29400104 	addi	r5,r5,4
    7f7c:	38800015 	stw	r2,0(r7)
    7f80:	39c00104 	addi	r7,r7,4
    7f84:	19bffa36 	bltu	r3,r6,7f70 <memmove+0xc0>
    7f88:	3811883a 	mov	r8,r7
    7f8c:	003fd906 	br	7ef4 <memmove+0x44>

00007f90 <memset>:
    7f90:	008000c4 	movi	r2,3
    7f94:	29403fcc 	andi	r5,r5,255
    7f98:	2007883a 	mov	r3,r4
    7f9c:	1180022e 	bgeu	r2,r6,7fa8 <memset+0x18>
    7fa0:	2084703a 	and	r2,r4,r2
    7fa4:	10000826 	beq	r2,zero,7fc8 <memset+0x38>
    7fa8:	30000526 	beq	r6,zero,7fc0 <memset+0x30>
    7fac:	2805883a 	mov	r2,r5
    7fb0:	30cd883a 	add	r6,r6,r3
    7fb4:	18800005 	stb	r2,0(r3)
    7fb8:	18c00044 	addi	r3,r3,1
    7fbc:	19bffd1e 	bne	r3,r6,7fb4 <memset+0x24>
    7fc0:	2005883a 	mov	r2,r4
    7fc4:	f800283a 	ret
    7fc8:	2804923a 	slli	r2,r5,8
    7fcc:	020003c4 	movi	r8,15
    7fd0:	200f883a 	mov	r7,r4
    7fd4:	2884b03a 	or	r2,r5,r2
    7fd8:	1006943a 	slli	r3,r2,16
    7fdc:	10c6b03a 	or	r3,r2,r3
    7fe0:	41800a2e 	bgeu	r8,r6,800c <memset+0x7c>
    7fe4:	4005883a 	mov	r2,r8
    7fe8:	31bffc04 	addi	r6,r6,-16
    7fec:	38c00015 	stw	r3,0(r7)
    7ff0:	38c00115 	stw	r3,4(r7)
    7ff4:	38c00215 	stw	r3,8(r7)
    7ff8:	38c00315 	stw	r3,12(r7)
    7ffc:	39c00404 	addi	r7,r7,16
    8000:	11bff936 	bltu	r2,r6,7fe8 <memset+0x58>
    8004:	008000c4 	movi	r2,3
    8008:	1180052e 	bgeu	r2,r6,8020 <memset+0x90>
    800c:	31bfff04 	addi	r6,r6,-4
    8010:	008000c4 	movi	r2,3
    8014:	38c00015 	stw	r3,0(r7)
    8018:	39c00104 	addi	r7,r7,4
    801c:	11bffb36 	bltu	r2,r6,800c <memset+0x7c>
    8020:	3807883a 	mov	r3,r7
    8024:	003fe006 	br	7fa8 <memset+0x18>

00008028 <_Bfree>:
    8028:	28000826 	beq	r5,zero,804c <_Bfree+0x24>
    802c:	28800117 	ldw	r2,4(r5)
    8030:	21001317 	ldw	r4,76(r4)
    8034:	1085883a 	add	r2,r2,r2
    8038:	1085883a 	add	r2,r2,r2
    803c:	1105883a 	add	r2,r2,r4
    8040:	10c00017 	ldw	r3,0(r2)
    8044:	28c00015 	stw	r3,0(r5)
    8048:	11400015 	stw	r5,0(r2)
    804c:	f800283a 	ret

00008050 <__hi0bits>:
    8050:	20bfffec 	andhi	r2,r4,65535
    8054:	10001426 	beq	r2,zero,80a8 <__hi0bits+0x58>
    8058:	0007883a 	mov	r3,zero
    805c:	20bfc02c 	andhi	r2,r4,65280
    8060:	1000021e 	bne	r2,zero,806c <__hi0bits+0x1c>
    8064:	2008923a 	slli	r4,r4,8
    8068:	18c00204 	addi	r3,r3,8
    806c:	20bc002c 	andhi	r2,r4,61440
    8070:	1000021e 	bne	r2,zero,807c <__hi0bits+0x2c>
    8074:	2008913a 	slli	r4,r4,4
    8078:	18c00104 	addi	r3,r3,4
    807c:	20b0002c 	andhi	r2,r4,49152
    8080:	1000031e 	bne	r2,zero,8090 <__hi0bits+0x40>
    8084:	2105883a 	add	r2,r4,r4
    8088:	18c00084 	addi	r3,r3,2
    808c:	1089883a 	add	r4,r2,r2
    8090:	20000316 	blt	r4,zero,80a0 <__hi0bits+0x50>
    8094:	2090002c 	andhi	r2,r4,16384
    8098:	10000626 	beq	r2,zero,80b4 <__hi0bits+0x64>
    809c:	18c00044 	addi	r3,r3,1
    80a0:	1805883a 	mov	r2,r3
    80a4:	f800283a 	ret
    80a8:	2008943a 	slli	r4,r4,16
    80ac:	00c00404 	movi	r3,16
    80b0:	003fea06 	br	805c <__hi0bits+0xc>
    80b4:	00c00804 	movi	r3,32
    80b8:	1805883a 	mov	r2,r3
    80bc:	f800283a 	ret

000080c0 <__lo0bits>:
    80c0:	20c00017 	ldw	r3,0(r4)
    80c4:	188001cc 	andi	r2,r3,7
    80c8:	10000a26 	beq	r2,zero,80f4 <__lo0bits+0x34>
    80cc:	1880004c 	andi	r2,r3,1
    80d0:	1005003a 	cmpeq	r2,r2,zero
    80d4:	10002126 	beq	r2,zero,815c <__lo0bits+0x9c>
    80d8:	1880008c 	andi	r2,r3,2
    80dc:	1000251e 	bne	r2,zero,8174 <__lo0bits+0xb4>
    80e0:	1804d0ba 	srli	r2,r3,2
    80e4:	01400084 	movi	r5,2
    80e8:	20800015 	stw	r2,0(r4)
    80ec:	2805883a 	mov	r2,r5
    80f0:	f800283a 	ret
    80f4:	18bfffcc 	andi	r2,r3,65535
    80f8:	10001526 	beq	r2,zero,8150 <__lo0bits+0x90>
    80fc:	000b883a 	mov	r5,zero
    8100:	18803fcc 	andi	r2,r3,255
    8104:	1000021e 	bne	r2,zero,8110 <__lo0bits+0x50>
    8108:	1806d23a 	srli	r3,r3,8
    810c:	29400204 	addi	r5,r5,8
    8110:	188003cc 	andi	r2,r3,15
    8114:	1000021e 	bne	r2,zero,8120 <__lo0bits+0x60>
    8118:	1806d13a 	srli	r3,r3,4
    811c:	29400104 	addi	r5,r5,4
    8120:	188000cc 	andi	r2,r3,3
    8124:	1000021e 	bne	r2,zero,8130 <__lo0bits+0x70>
    8128:	1806d0ba 	srli	r3,r3,2
    812c:	29400084 	addi	r5,r5,2
    8130:	1880004c 	andi	r2,r3,1
    8134:	1000031e 	bne	r2,zero,8144 <__lo0bits+0x84>
    8138:	1806d07a 	srli	r3,r3,1
    813c:	18000a26 	beq	r3,zero,8168 <__lo0bits+0xa8>
    8140:	29400044 	addi	r5,r5,1
    8144:	2805883a 	mov	r2,r5
    8148:	20c00015 	stw	r3,0(r4)
    814c:	f800283a 	ret
    8150:	1806d43a 	srli	r3,r3,16
    8154:	01400404 	movi	r5,16
    8158:	003fe906 	br	8100 <__lo0bits+0x40>
    815c:	000b883a 	mov	r5,zero
    8160:	2805883a 	mov	r2,r5
    8164:	f800283a 	ret
    8168:	01400804 	movi	r5,32
    816c:	2805883a 	mov	r2,r5
    8170:	f800283a 	ret
    8174:	1804d07a 	srli	r2,r3,1
    8178:	01400044 	movi	r5,1
    817c:	20800015 	stw	r2,0(r4)
    8180:	003fda06 	br	80ec <__lo0bits+0x2c>

00008184 <__mcmp>:
    8184:	20800417 	ldw	r2,16(r4)
    8188:	28c00417 	ldw	r3,16(r5)
    818c:	10cfc83a 	sub	r7,r2,r3
    8190:	38000c1e 	bne	r7,zero,81c4 <__mcmp+0x40>
    8194:	18c5883a 	add	r2,r3,r3
    8198:	1085883a 	add	r2,r2,r2
    819c:	10c00504 	addi	r3,r2,20
    81a0:	21000504 	addi	r4,r4,20
    81a4:	28cb883a 	add	r5,r5,r3
    81a8:	2085883a 	add	r2,r4,r2
    81ac:	10bfff04 	addi	r2,r2,-4
    81b0:	297fff04 	addi	r5,r5,-4
    81b4:	11800017 	ldw	r6,0(r2)
    81b8:	28c00017 	ldw	r3,0(r5)
    81bc:	30c0031e 	bne	r6,r3,81cc <__mcmp+0x48>
    81c0:	20bffa36 	bltu	r4,r2,81ac <__mcmp+0x28>
    81c4:	3805883a 	mov	r2,r7
    81c8:	f800283a 	ret
    81cc:	30c00336 	bltu	r6,r3,81dc <__mcmp+0x58>
    81d0:	01c00044 	movi	r7,1
    81d4:	3805883a 	mov	r2,r7
    81d8:	f800283a 	ret
    81dc:	01ffffc4 	movi	r7,-1
    81e0:	003ff806 	br	81c4 <__mcmp+0x40>

000081e4 <__ulp>:
    81e4:	295ffc2c 	andhi	r5,r5,32752
    81e8:	013f3034 	movhi	r4,64704
    81ec:	290b883a 	add	r5,r5,r4
    81f0:	0145c83a 	sub	r2,zero,r5
    81f4:	1007d53a 	srai	r3,r2,20
    81f8:	000d883a 	mov	r6,zero
    81fc:	0140040e 	bge	zero,r5,8210 <__ulp+0x2c>
    8200:	280f883a 	mov	r7,r5
    8204:	3807883a 	mov	r3,r7
    8208:	3005883a 	mov	r2,r6
    820c:	f800283a 	ret
    8210:	008004c4 	movi	r2,19
    8214:	193ffb04 	addi	r4,r3,-20
    8218:	10c00c0e 	bge	r2,r3,824c <__ulp+0x68>
    821c:	008007c4 	movi	r2,31
    8220:	1107c83a 	sub	r3,r2,r4
    8224:	00800784 	movi	r2,30
    8228:	01400044 	movi	r5,1
    822c:	11000216 	blt	r2,r4,8238 <__ulp+0x54>
    8230:	00800044 	movi	r2,1
    8234:	10ca983a 	sll	r5,r2,r3
    8238:	000f883a 	mov	r7,zero
    823c:	280d883a 	mov	r6,r5
    8240:	3807883a 	mov	r3,r7
    8244:	3005883a 	mov	r2,r6
    8248:	f800283a 	ret
    824c:	00800234 	movhi	r2,8
    8250:	10cfd83a 	sra	r7,r2,r3
    8254:	000d883a 	mov	r6,zero
    8258:	3005883a 	mov	r2,r6
    825c:	3807883a 	mov	r3,r7
    8260:	f800283a 	ret

00008264 <__b2d>:
    8264:	20800417 	ldw	r2,16(r4)
    8268:	defff904 	addi	sp,sp,-28
    826c:	dd000415 	stw	r20,16(sp)
    8270:	1085883a 	add	r2,r2,r2
    8274:	25000504 	addi	r20,r4,20
    8278:	1085883a 	add	r2,r2,r2
    827c:	dc000015 	stw	r16,0(sp)
    8280:	a0a1883a 	add	r16,r20,r2
    8284:	dd400515 	stw	r21,20(sp)
    8288:	857fff17 	ldw	r21,-4(r16)
    828c:	dc400115 	stw	r17,4(sp)
    8290:	dfc00615 	stw	ra,24(sp)
    8294:	a809883a 	mov	r4,r21
    8298:	2823883a 	mov	r17,r5
    829c:	dcc00315 	stw	r19,12(sp)
    82a0:	dc800215 	stw	r18,8(sp)
    82a4:	00080500 	call	8050 <__hi0bits>
    82a8:	100b883a 	mov	r5,r2
    82ac:	00800804 	movi	r2,32
    82b0:	1145c83a 	sub	r2,r2,r5
    82b4:	88800015 	stw	r2,0(r17)
    82b8:	00800284 	movi	r2,10
    82bc:	80ffff04 	addi	r3,r16,-4
    82c0:	11401416 	blt	r2,r5,8314 <__b2d+0xb0>
    82c4:	008002c4 	movi	r2,11
    82c8:	1149c83a 	sub	r4,r2,r5
    82cc:	a0c02736 	bltu	r20,r3,836c <__b2d+0x108>
    82d0:	000d883a 	mov	r6,zero
    82d4:	28800544 	addi	r2,r5,21
    82d8:	a906d83a 	srl	r3,r21,r4
    82dc:	a884983a 	sll	r2,r21,r2
    82e0:	1ccffc34 	orhi	r19,r3,16368
    82e4:	11a4b03a 	or	r18,r2,r6
    82e8:	9005883a 	mov	r2,r18
    82ec:	9807883a 	mov	r3,r19
    82f0:	dfc00617 	ldw	ra,24(sp)
    82f4:	dd400517 	ldw	r21,20(sp)
    82f8:	dd000417 	ldw	r20,16(sp)
    82fc:	dcc00317 	ldw	r19,12(sp)
    8300:	dc800217 	ldw	r18,8(sp)
    8304:	dc400117 	ldw	r17,4(sp)
    8308:	dc000017 	ldw	r16,0(sp)
    830c:	dec00704 	addi	sp,sp,28
    8310:	f800283a 	ret
    8314:	a0c00e36 	bltu	r20,r3,8350 <__b2d+0xec>
    8318:	293ffd44 	addi	r4,r5,-11
    831c:	000d883a 	mov	r6,zero
    8320:	20000f26 	beq	r4,zero,8360 <__b2d+0xfc>
    8324:	00800804 	movi	r2,32
    8328:	110bc83a 	sub	r5,r2,r4
    832c:	a0c01236 	bltu	r20,r3,8378 <__b2d+0x114>
    8330:	000f883a 	mov	r7,zero
    8334:	a904983a 	sll	r2,r21,r4
    8338:	3146d83a 	srl	r3,r6,r5
    833c:	3108983a 	sll	r4,r6,r4
    8340:	108ffc34 	orhi	r2,r2,16368
    8344:	18a6b03a 	or	r19,r3,r2
    8348:	3924b03a 	or	r18,r7,r4
    834c:	003fe606 	br	82e8 <__b2d+0x84>
    8350:	293ffd44 	addi	r4,r5,-11
    8354:	81bffe17 	ldw	r6,-8(r16)
    8358:	80fffe04 	addi	r3,r16,-8
    835c:	203ff11e 	bne	r4,zero,8324 <__b2d+0xc0>
    8360:	accffc34 	orhi	r19,r21,16368
    8364:	3025883a 	mov	r18,r6
    8368:	003fdf06 	br	82e8 <__b2d+0x84>
    836c:	18bfff17 	ldw	r2,-4(r3)
    8370:	110cd83a 	srl	r6,r2,r4
    8374:	003fd706 	br	82d4 <__b2d+0x70>
    8378:	18bfff17 	ldw	r2,-4(r3)
    837c:	114ed83a 	srl	r7,r2,r5
    8380:	003fec06 	br	8334 <__b2d+0xd0>

00008384 <__ratio>:
    8384:	defff904 	addi	sp,sp,-28
    8388:	dc400215 	stw	r17,8(sp)
    838c:	2823883a 	mov	r17,r5
    8390:	d80b883a 	mov	r5,sp
    8394:	dfc00615 	stw	ra,24(sp)
    8398:	dd000515 	stw	r20,20(sp)
    839c:	dcc00415 	stw	r19,16(sp)
    83a0:	dc800315 	stw	r18,12(sp)
    83a4:	2025883a 	mov	r18,r4
    83a8:	00082640 	call	8264 <__b2d>
    83ac:	8809883a 	mov	r4,r17
    83b0:	d9400104 	addi	r5,sp,4
    83b4:	1027883a 	mov	r19,r2
    83b8:	1829883a 	mov	r20,r3
    83bc:	00082640 	call	8264 <__b2d>
    83c0:	89000417 	ldw	r4,16(r17)
    83c4:	91c00417 	ldw	r7,16(r18)
    83c8:	d9800117 	ldw	r6,4(sp)
    83cc:	180b883a 	mov	r5,r3
    83d0:	390fc83a 	sub	r7,r7,r4
    83d4:	1009883a 	mov	r4,r2
    83d8:	d8800017 	ldw	r2,0(sp)
    83dc:	380e917a 	slli	r7,r7,5
    83e0:	2011883a 	mov	r8,r4
    83e4:	1185c83a 	sub	r2,r2,r6
    83e8:	11c5883a 	add	r2,r2,r7
    83ec:	1006953a 	slli	r3,r2,20
    83f0:	2813883a 	mov	r9,r5
    83f4:	00800d0e 	bge	zero,r2,842c <__ratio+0xa8>
    83f8:	1d29883a 	add	r20,r3,r20
    83fc:	a00b883a 	mov	r5,r20
    8400:	480f883a 	mov	r7,r9
    8404:	9809883a 	mov	r4,r19
    8408:	400d883a 	mov	r6,r8
    840c:	000e7480 	call	e748 <__divdf3>
    8410:	dfc00617 	ldw	ra,24(sp)
    8414:	dd000517 	ldw	r20,20(sp)
    8418:	dcc00417 	ldw	r19,16(sp)
    841c:	dc800317 	ldw	r18,12(sp)
    8420:	dc400217 	ldw	r17,8(sp)
    8424:	dec00704 	addi	sp,sp,28
    8428:	f800283a 	ret
    842c:	28d3c83a 	sub	r9,r5,r3
    8430:	003ff206 	br	83fc <__ratio+0x78>

00008434 <_mprec_log10>:
    8434:	defffe04 	addi	sp,sp,-8
    8438:	008005c4 	movi	r2,23
    843c:	dc000015 	stw	r16,0(sp)
    8440:	dfc00115 	stw	ra,4(sp)
    8444:	2021883a 	mov	r16,r4
    8448:	11000c16 	blt	r2,r4,847c <_mprec_log10+0x48>
    844c:	200490fa 	slli	r2,r4,3
    8450:	00c00074 	movhi	r3,1
    8454:	18c97d04 	addi	r3,r3,9716
    8458:	10c5883a 	add	r2,r2,r3
    845c:	12400117 	ldw	r9,4(r2)
    8460:	12000017 	ldw	r8,0(r2)
    8464:	4807883a 	mov	r3,r9
    8468:	4005883a 	mov	r2,r8
    846c:	dfc00117 	ldw	ra,4(sp)
    8470:	dc000017 	ldw	r16,0(sp)
    8474:	dec00204 	addi	sp,sp,8
    8478:	f800283a 	ret
    847c:	0011883a 	mov	r8,zero
    8480:	024ffc34 	movhi	r9,16368
    8484:	0005883a 	mov	r2,zero
    8488:	00d00934 	movhi	r3,16420
    848c:	480b883a 	mov	r5,r9
    8490:	4009883a 	mov	r4,r8
    8494:	180f883a 	mov	r7,r3
    8498:	100d883a 	mov	r6,r2
    849c:	000e3840 	call	e384 <__muldf3>
    84a0:	843fffc4 	addi	r16,r16,-1
    84a4:	1011883a 	mov	r8,r2
    84a8:	1813883a 	mov	r9,r3
    84ac:	803ff51e 	bne	r16,zero,8484 <_mprec_log10+0x50>
    84b0:	4005883a 	mov	r2,r8
    84b4:	4807883a 	mov	r3,r9
    84b8:	dfc00117 	ldw	ra,4(sp)
    84bc:	dc000017 	ldw	r16,0(sp)
    84c0:	dec00204 	addi	sp,sp,8
    84c4:	f800283a 	ret

000084c8 <__copybits>:
    84c8:	297fffc4 	addi	r5,r5,-1
    84cc:	30800417 	ldw	r2,16(r6)
    84d0:	280bd17a 	srai	r5,r5,5
    84d4:	31800504 	addi	r6,r6,20
    84d8:	1085883a 	add	r2,r2,r2
    84dc:	294b883a 	add	r5,r5,r5
    84e0:	294b883a 	add	r5,r5,r5
    84e4:	1085883a 	add	r2,r2,r2
    84e8:	290b883a 	add	r5,r5,r4
    84ec:	3087883a 	add	r3,r6,r2
    84f0:	29400104 	addi	r5,r5,4
    84f4:	30c0052e 	bgeu	r6,r3,850c <__copybits+0x44>
    84f8:	30800017 	ldw	r2,0(r6)
    84fc:	31800104 	addi	r6,r6,4
    8500:	20800015 	stw	r2,0(r4)
    8504:	21000104 	addi	r4,r4,4
    8508:	30fffb36 	bltu	r6,r3,84f8 <__copybits+0x30>
    850c:	2140032e 	bgeu	r4,r5,851c <__copybits+0x54>
    8510:	20000015 	stw	zero,0(r4)
    8514:	21000104 	addi	r4,r4,4
    8518:	217ffd36 	bltu	r4,r5,8510 <__copybits+0x48>
    851c:	f800283a 	ret

00008520 <__any_on>:
    8520:	20800417 	ldw	r2,16(r4)
    8524:	2807d17a 	srai	r3,r5,5
    8528:	21000504 	addi	r4,r4,20
    852c:	10c00d0e 	bge	r2,r3,8564 <__any_on+0x44>
    8530:	1085883a 	add	r2,r2,r2
    8534:	1085883a 	add	r2,r2,r2
    8538:	208d883a 	add	r6,r4,r2
    853c:	2180182e 	bgeu	r4,r6,85a0 <__any_on+0x80>
    8540:	30bfff17 	ldw	r2,-4(r6)
    8544:	30ffff04 	addi	r3,r6,-4
    8548:	1000041e 	bne	r2,zero,855c <__any_on+0x3c>
    854c:	20c0142e 	bgeu	r4,r3,85a0 <__any_on+0x80>
    8550:	18ffff04 	addi	r3,r3,-4
    8554:	18800017 	ldw	r2,0(r3)
    8558:	103ffc26 	beq	r2,zero,854c <__any_on+0x2c>
    855c:	00800044 	movi	r2,1
    8560:	f800283a 	ret
    8564:	18800a0e 	bge	r3,r2,8590 <__any_on+0x70>
    8568:	294007cc 	andi	r5,r5,31
    856c:	28000826 	beq	r5,zero,8590 <__any_on+0x70>
    8570:	18c5883a 	add	r2,r3,r3
    8574:	1085883a 	add	r2,r2,r2
    8578:	208d883a 	add	r6,r4,r2
    857c:	30c00017 	ldw	r3,0(r6)
    8580:	1944d83a 	srl	r2,r3,r5
    8584:	1144983a 	sll	r2,r2,r5
    8588:	18bff41e 	bne	r3,r2,855c <__any_on+0x3c>
    858c:	003feb06 	br	853c <__any_on+0x1c>
    8590:	18c5883a 	add	r2,r3,r3
    8594:	1085883a 	add	r2,r2,r2
    8598:	208d883a 	add	r6,r4,r2
    859c:	003fe706 	br	853c <__any_on+0x1c>
    85a0:	0005883a 	mov	r2,zero
    85a4:	f800283a 	ret

000085a8 <_Balloc>:
    85a8:	20c01317 	ldw	r3,76(r4)
    85ac:	defffb04 	addi	sp,sp,-20
    85b0:	dcc00315 	stw	r19,12(sp)
    85b4:	dc800215 	stw	r18,8(sp)
    85b8:	dfc00415 	stw	ra,16(sp)
    85bc:	2825883a 	mov	r18,r5
    85c0:	dc400115 	stw	r17,4(sp)
    85c4:	dc000015 	stw	r16,0(sp)
    85c8:	2027883a 	mov	r19,r4
    85cc:	01800404 	movi	r6,16
    85d0:	01400104 	movi	r5,4
    85d4:	18001726 	beq	r3,zero,8634 <_Balloc+0x8c>
    85d8:	01400044 	movi	r5,1
    85dc:	9485883a 	add	r2,r18,r18
    85e0:	2ca2983a 	sll	r17,r5,r18
    85e4:	1085883a 	add	r2,r2,r2
    85e8:	10c7883a 	add	r3,r2,r3
    85ec:	1c000017 	ldw	r16,0(r3)
    85f0:	8c4d883a 	add	r6,r17,r17
    85f4:	318d883a 	add	r6,r6,r6
    85f8:	9809883a 	mov	r4,r19
    85fc:	31800504 	addi	r6,r6,20
    8600:	80001226 	beq	r16,zero,864c <_Balloc+0xa4>
    8604:	80800017 	ldw	r2,0(r16)
    8608:	18800015 	stw	r2,0(r3)
    860c:	80000415 	stw	zero,16(r16)
    8610:	80000315 	stw	zero,12(r16)
    8614:	8005883a 	mov	r2,r16
    8618:	dfc00417 	ldw	ra,16(sp)
    861c:	dcc00317 	ldw	r19,12(sp)
    8620:	dc800217 	ldw	r18,8(sp)
    8624:	dc400117 	ldw	r17,4(sp)
    8628:	dc000017 	ldw	r16,0(sp)
    862c:	dec00504 	addi	sp,sp,20
    8630:	f800283a 	ret
    8634:	000c1240 	call	c124 <_calloc_r>
    8638:	1007883a 	mov	r3,r2
    863c:	0021883a 	mov	r16,zero
    8640:	98801315 	stw	r2,76(r19)
    8644:	103fe41e 	bne	r2,zero,85d8 <_Balloc+0x30>
    8648:	003ff206 	br	8614 <_Balloc+0x6c>
    864c:	000c1240 	call	c124 <_calloc_r>
    8650:	103ff026 	beq	r2,zero,8614 <_Balloc+0x6c>
    8654:	1021883a 	mov	r16,r2
    8658:	14800115 	stw	r18,4(r2)
    865c:	14400215 	stw	r17,8(r2)
    8660:	003fea06 	br	860c <_Balloc+0x64>

00008664 <__d2b>:
    8664:	defff504 	addi	sp,sp,-44
    8668:	dcc00515 	stw	r19,20(sp)
    866c:	04c00044 	movi	r19,1
    8670:	dc000215 	stw	r16,8(sp)
    8674:	2821883a 	mov	r16,r5
    8678:	980b883a 	mov	r5,r19
    867c:	ddc00915 	stw	r23,36(sp)
    8680:	dd800815 	stw	r22,32(sp)
    8684:	dd400715 	stw	r21,28(sp)
    8688:	dd000615 	stw	r20,24(sp)
    868c:	dc800415 	stw	r18,16(sp)
    8690:	dc400315 	stw	r17,12(sp)
    8694:	dfc00a15 	stw	ra,40(sp)
    8698:	3023883a 	mov	r17,r6
    869c:	382d883a 	mov	r22,r7
    86a0:	ddc00b17 	ldw	r23,44(sp)
    86a4:	00085a80 	call	85a8 <_Balloc>
    86a8:	1025883a 	mov	r18,r2
    86ac:	00a00034 	movhi	r2,32768
    86b0:	10bfffc4 	addi	r2,r2,-1
    86b4:	8888703a 	and	r4,r17,r2
    86b8:	202ad53a 	srli	r21,r4,20
    86bc:	00800434 	movhi	r2,16
    86c0:	10bfffc4 	addi	r2,r2,-1
    86c4:	8886703a 	and	r3,r17,r2
    86c8:	a829003a 	cmpeq	r20,r21,zero
    86cc:	800b883a 	mov	r5,r16
    86d0:	d8c00115 	stw	r3,4(sp)
    86d4:	94000504 	addi	r16,r18,20
    86d8:	a000021e 	bne	r20,zero,86e4 <__d2b+0x80>
    86dc:	18c00434 	orhi	r3,r3,16
    86e0:	d8c00115 	stw	r3,4(sp)
    86e4:	28002726 	beq	r5,zero,8784 <__d2b+0x120>
    86e8:	d809883a 	mov	r4,sp
    86ec:	d9400015 	stw	r5,0(sp)
    86f0:	00080c00 	call	80c0 <__lo0bits>
    86f4:	100d883a 	mov	r6,r2
    86f8:	10003526 	beq	r2,zero,87d0 <__d2b+0x16c>
    86fc:	d8c00117 	ldw	r3,4(sp)
    8700:	00800804 	movi	r2,32
    8704:	1185c83a 	sub	r2,r2,r6
    8708:	d9000017 	ldw	r4,0(sp)
    870c:	1886983a 	sll	r3,r3,r2
    8710:	1906b03a 	or	r3,r3,r4
    8714:	90c00515 	stw	r3,20(r18)
    8718:	d8c00117 	ldw	r3,4(sp)
    871c:	1986d83a 	srl	r3,r3,r6
    8720:	d8c00115 	stw	r3,4(sp)
    8724:	180b003a 	cmpeq	r5,r3,zero
    8728:	00800084 	movi	r2,2
    872c:	114bc83a 	sub	r5,r2,r5
    8730:	80c00115 	stw	r3,4(r16)
    8734:	91400415 	stw	r5,16(r18)
    8738:	a0001a1e 	bne	r20,zero,87a4 <__d2b+0x140>
    873c:	3545883a 	add	r2,r6,r21
    8740:	10bef344 	addi	r2,r2,-1075
    8744:	00c00d44 	movi	r3,53
    8748:	b0800015 	stw	r2,0(r22)
    874c:	1987c83a 	sub	r3,r3,r6
    8750:	b8c00015 	stw	r3,0(r23)
    8754:	9005883a 	mov	r2,r18
    8758:	dfc00a17 	ldw	ra,40(sp)
    875c:	ddc00917 	ldw	r23,36(sp)
    8760:	dd800817 	ldw	r22,32(sp)
    8764:	dd400717 	ldw	r21,28(sp)
    8768:	dd000617 	ldw	r20,24(sp)
    876c:	dcc00517 	ldw	r19,20(sp)
    8770:	dc800417 	ldw	r18,16(sp)
    8774:	dc400317 	ldw	r17,12(sp)
    8778:	dc000217 	ldw	r16,8(sp)
    877c:	dec00b04 	addi	sp,sp,44
    8780:	f800283a 	ret
    8784:	d9000104 	addi	r4,sp,4
    8788:	00080c00 	call	80c0 <__lo0bits>
    878c:	11800804 	addi	r6,r2,32
    8790:	d8800117 	ldw	r2,4(sp)
    8794:	94c00415 	stw	r19,16(r18)
    8798:	980b883a 	mov	r5,r19
    879c:	90800515 	stw	r2,20(r18)
    87a0:	a03fe626 	beq	r20,zero,873c <__d2b+0xd8>
    87a4:	2945883a 	add	r2,r5,r5
    87a8:	1085883a 	add	r2,r2,r2
    87ac:	1405883a 	add	r2,r2,r16
    87b0:	113fff17 	ldw	r4,-4(r2)
    87b4:	30fef384 	addi	r3,r6,-1074
    87b8:	2820917a 	slli	r16,r5,5
    87bc:	b0c00015 	stw	r3,0(r22)
    87c0:	00080500 	call	8050 <__hi0bits>
    87c4:	80a1c83a 	sub	r16,r16,r2
    87c8:	bc000015 	stw	r16,0(r23)
    87cc:	003fe106 	br	8754 <__d2b+0xf0>
    87d0:	d8800017 	ldw	r2,0(sp)
    87d4:	90800515 	stw	r2,20(r18)
    87d8:	d8c00117 	ldw	r3,4(sp)
    87dc:	003fd106 	br	8724 <__d2b+0xc0>

000087e0 <__mdiff>:
    87e0:	defffb04 	addi	sp,sp,-20
    87e4:	dc000015 	stw	r16,0(sp)
    87e8:	2821883a 	mov	r16,r5
    87ec:	dc800215 	stw	r18,8(sp)
    87f0:	300b883a 	mov	r5,r6
    87f4:	2025883a 	mov	r18,r4
    87f8:	8009883a 	mov	r4,r16
    87fc:	dc400115 	stw	r17,4(sp)
    8800:	dfc00415 	stw	ra,16(sp)
    8804:	dcc00315 	stw	r19,12(sp)
    8808:	3023883a 	mov	r17,r6
    880c:	00081840 	call	8184 <__mcmp>
    8810:	10004226 	beq	r2,zero,891c <__mdiff+0x13c>
    8814:	10005016 	blt	r2,zero,8958 <__mdiff+0x178>
    8818:	0027883a 	mov	r19,zero
    881c:	81400117 	ldw	r5,4(r16)
    8820:	9009883a 	mov	r4,r18
    8824:	00085a80 	call	85a8 <_Balloc>
    8828:	1019883a 	mov	r12,r2
    882c:	82800417 	ldw	r10,16(r16)
    8830:	88800417 	ldw	r2,16(r17)
    8834:	81800504 	addi	r6,r16,20
    8838:	5287883a 	add	r3,r10,r10
    883c:	1085883a 	add	r2,r2,r2
    8840:	18c7883a 	add	r3,r3,r3
    8844:	1085883a 	add	r2,r2,r2
    8848:	8a000504 	addi	r8,r17,20
    884c:	64c00315 	stw	r19,12(r12)
    8850:	30db883a 	add	r13,r6,r3
    8854:	4097883a 	add	r11,r8,r2
    8858:	61c00504 	addi	r7,r12,20
    885c:	0013883a 	mov	r9,zero
    8860:	31000017 	ldw	r4,0(r6)
    8864:	41400017 	ldw	r5,0(r8)
    8868:	42000104 	addi	r8,r8,4
    886c:	20bfffcc 	andi	r2,r4,65535
    8870:	28ffffcc 	andi	r3,r5,65535
    8874:	10c5c83a 	sub	r2,r2,r3
    8878:	1245883a 	add	r2,r2,r9
    887c:	2008d43a 	srli	r4,r4,16
    8880:	280ad43a 	srli	r5,r5,16
    8884:	1007d43a 	srai	r3,r2,16
    8888:	3880000d 	sth	r2,0(r7)
    888c:	2149c83a 	sub	r4,r4,r5
    8890:	20c9883a 	add	r4,r4,r3
    8894:	3900008d 	sth	r4,2(r7)
    8898:	31800104 	addi	r6,r6,4
    889c:	39c00104 	addi	r7,r7,4
    88a0:	2013d43a 	srai	r9,r4,16
    88a4:	42ffee36 	bltu	r8,r11,8860 <__mdiff+0x80>
    88a8:	33400c2e 	bgeu	r6,r13,88dc <__mdiff+0xfc>
    88ac:	30800017 	ldw	r2,0(r6)
    88b0:	31800104 	addi	r6,r6,4
    88b4:	10ffffcc 	andi	r3,r2,65535
    88b8:	1a47883a 	add	r3,r3,r9
    88bc:	1004d43a 	srli	r2,r2,16
    88c0:	1809d43a 	srai	r4,r3,16
    88c4:	38c0000d 	sth	r3,0(r7)
    88c8:	1105883a 	add	r2,r2,r4
    88cc:	3880008d 	sth	r2,2(r7)
    88d0:	1013d43a 	srai	r9,r2,16
    88d4:	39c00104 	addi	r7,r7,4
    88d8:	337ff436 	bltu	r6,r13,88ac <__mdiff+0xcc>
    88dc:	38bfff17 	ldw	r2,-4(r7)
    88e0:	38ffff04 	addi	r3,r7,-4
    88e4:	1000041e 	bne	r2,zero,88f8 <__mdiff+0x118>
    88e8:	18ffff04 	addi	r3,r3,-4
    88ec:	18800017 	ldw	r2,0(r3)
    88f0:	52bfffc4 	addi	r10,r10,-1
    88f4:	103ffc26 	beq	r2,zero,88e8 <__mdiff+0x108>
    88f8:	6005883a 	mov	r2,r12
    88fc:	62800415 	stw	r10,16(r12)
    8900:	dfc00417 	ldw	ra,16(sp)
    8904:	dcc00317 	ldw	r19,12(sp)
    8908:	dc800217 	ldw	r18,8(sp)
    890c:	dc400117 	ldw	r17,4(sp)
    8910:	dc000017 	ldw	r16,0(sp)
    8914:	dec00504 	addi	sp,sp,20
    8918:	f800283a 	ret
    891c:	9009883a 	mov	r4,r18
    8920:	000b883a 	mov	r5,zero
    8924:	00085a80 	call	85a8 <_Balloc>
    8928:	1019883a 	mov	r12,r2
    892c:	00800044 	movi	r2,1
    8930:	60800415 	stw	r2,16(r12)
    8934:	6005883a 	mov	r2,r12
    8938:	60000515 	stw	zero,20(r12)
    893c:	dfc00417 	ldw	ra,16(sp)
    8940:	dcc00317 	ldw	r19,12(sp)
    8944:	dc800217 	ldw	r18,8(sp)
    8948:	dc400117 	ldw	r17,4(sp)
    894c:	dc000017 	ldw	r16,0(sp)
    8950:	dec00504 	addi	sp,sp,20
    8954:	f800283a 	ret
    8958:	880d883a 	mov	r6,r17
    895c:	04c00044 	movi	r19,1
    8960:	8023883a 	mov	r17,r16
    8964:	3021883a 	mov	r16,r6
    8968:	003fac06 	br	881c <__mdiff+0x3c>

0000896c <__lshift>:
    896c:	defff904 	addi	sp,sp,-28
    8970:	28800417 	ldw	r2,16(r5)
    8974:	dc000015 	stw	r16,0(sp)
    8978:	3021d17a 	srai	r16,r6,5
    897c:	28c00217 	ldw	r3,8(r5)
    8980:	10800044 	addi	r2,r2,1
    8984:	dc400115 	stw	r17,4(sp)
    8988:	80a3883a 	add	r17,r16,r2
    898c:	dd400515 	stw	r21,20(sp)
    8990:	dd000415 	stw	r20,16(sp)
    8994:	dc800215 	stw	r18,8(sp)
    8998:	dfc00615 	stw	ra,24(sp)
    899c:	2825883a 	mov	r18,r5
    89a0:	dcc00315 	stw	r19,12(sp)
    89a4:	3029883a 	mov	r20,r6
    89a8:	202b883a 	mov	r21,r4
    89ac:	29400117 	ldw	r5,4(r5)
    89b0:	1c40030e 	bge	r3,r17,89c0 <__lshift+0x54>
    89b4:	18c7883a 	add	r3,r3,r3
    89b8:	29400044 	addi	r5,r5,1
    89bc:	1c7ffd16 	blt	r3,r17,89b4 <__lshift+0x48>
    89c0:	a809883a 	mov	r4,r21
    89c4:	00085a80 	call	85a8 <_Balloc>
    89c8:	1027883a 	mov	r19,r2
    89cc:	11400504 	addi	r5,r2,20
    89d0:	0400090e 	bge	zero,r16,89f8 <__lshift+0x8c>
    89d4:	2805883a 	mov	r2,r5
    89d8:	0007883a 	mov	r3,zero
    89dc:	18c00044 	addi	r3,r3,1
    89e0:	10000015 	stw	zero,0(r2)
    89e4:	10800104 	addi	r2,r2,4
    89e8:	80fffc1e 	bne	r16,r3,89dc <__lshift+0x70>
    89ec:	8405883a 	add	r2,r16,r16
    89f0:	1085883a 	add	r2,r2,r2
    89f4:	288b883a 	add	r5,r5,r2
    89f8:	90800417 	ldw	r2,16(r18)
    89fc:	91000504 	addi	r4,r18,20
    8a00:	a18007cc 	andi	r6,r20,31
    8a04:	1085883a 	add	r2,r2,r2
    8a08:	1085883a 	add	r2,r2,r2
    8a0c:	208f883a 	add	r7,r4,r2
    8a10:	30001e26 	beq	r6,zero,8a8c <__lshift+0x120>
    8a14:	00800804 	movi	r2,32
    8a18:	1191c83a 	sub	r8,r2,r6
    8a1c:	0007883a 	mov	r3,zero
    8a20:	20800017 	ldw	r2,0(r4)
    8a24:	1184983a 	sll	r2,r2,r6
    8a28:	1884b03a 	or	r2,r3,r2
    8a2c:	28800015 	stw	r2,0(r5)
    8a30:	20c00017 	ldw	r3,0(r4)
    8a34:	21000104 	addi	r4,r4,4
    8a38:	29400104 	addi	r5,r5,4
    8a3c:	1a06d83a 	srl	r3,r3,r8
    8a40:	21fff736 	bltu	r4,r7,8a20 <__lshift+0xb4>
    8a44:	28c00015 	stw	r3,0(r5)
    8a48:	18000126 	beq	r3,zero,8a50 <__lshift+0xe4>
    8a4c:	8c400044 	addi	r17,r17,1
    8a50:	88bfffc4 	addi	r2,r17,-1
    8a54:	98800415 	stw	r2,16(r19)
    8a58:	a809883a 	mov	r4,r21
    8a5c:	900b883a 	mov	r5,r18
    8a60:	00080280 	call	8028 <_Bfree>
    8a64:	9805883a 	mov	r2,r19
    8a68:	dfc00617 	ldw	ra,24(sp)
    8a6c:	dd400517 	ldw	r21,20(sp)
    8a70:	dd000417 	ldw	r20,16(sp)
    8a74:	dcc00317 	ldw	r19,12(sp)
    8a78:	dc800217 	ldw	r18,8(sp)
    8a7c:	dc400117 	ldw	r17,4(sp)
    8a80:	dc000017 	ldw	r16,0(sp)
    8a84:	dec00704 	addi	sp,sp,28
    8a88:	f800283a 	ret
    8a8c:	20800017 	ldw	r2,0(r4)
    8a90:	21000104 	addi	r4,r4,4
    8a94:	28800015 	stw	r2,0(r5)
    8a98:	29400104 	addi	r5,r5,4
    8a9c:	21ffec2e 	bgeu	r4,r7,8a50 <__lshift+0xe4>
    8aa0:	20800017 	ldw	r2,0(r4)
    8aa4:	21000104 	addi	r4,r4,4
    8aa8:	28800015 	stw	r2,0(r5)
    8aac:	29400104 	addi	r5,r5,4
    8ab0:	21fff636 	bltu	r4,r7,8a8c <__lshift+0x120>
    8ab4:	003fe606 	br	8a50 <__lshift+0xe4>

00008ab8 <__multiply>:
    8ab8:	defff904 	addi	sp,sp,-28
    8abc:	dcc00315 	stw	r19,12(sp)
    8ac0:	dc800215 	stw	r18,8(sp)
    8ac4:	2cc00417 	ldw	r19,16(r5)
    8ac8:	34800417 	ldw	r18,16(r6)
    8acc:	dd000415 	stw	r20,16(sp)
    8ad0:	dc400115 	stw	r17,4(sp)
    8ad4:	dfc00615 	stw	ra,24(sp)
    8ad8:	dd400515 	stw	r21,20(sp)
    8adc:	dc000015 	stw	r16,0(sp)
    8ae0:	2823883a 	mov	r17,r5
    8ae4:	3029883a 	mov	r20,r6
    8ae8:	9c80040e 	bge	r19,r18,8afc <__multiply+0x44>
    8aec:	9027883a 	mov	r19,r18
    8af0:	2c800417 	ldw	r18,16(r5)
    8af4:	2829883a 	mov	r20,r5
    8af8:	3023883a 	mov	r17,r6
    8afc:	88800217 	ldw	r2,8(r17)
    8b00:	9ca1883a 	add	r16,r19,r18
    8b04:	89400117 	ldw	r5,4(r17)
    8b08:	1400010e 	bge	r2,r16,8b10 <__multiply+0x58>
    8b0c:	29400044 	addi	r5,r5,1
    8b10:	00085a80 	call	85a8 <_Balloc>
    8b14:	102b883a 	mov	r21,r2
    8b18:	8405883a 	add	r2,r16,r16
    8b1c:	1085883a 	add	r2,r2,r2
    8b20:	a9000504 	addi	r4,r21,20
    8b24:	209d883a 	add	r14,r4,r2
    8b28:	2380042e 	bgeu	r4,r14,8b3c <__multiply+0x84>
    8b2c:	2005883a 	mov	r2,r4
    8b30:	10000015 	stw	zero,0(r2)
    8b34:	10800104 	addi	r2,r2,4
    8b38:	13bffd36 	bltu	r2,r14,8b30 <__multiply+0x78>
    8b3c:	9485883a 	add	r2,r18,r18
    8b40:	9cc7883a 	add	r3,r19,r19
    8b44:	a1800504 	addi	r6,r20,20
    8b48:	1085883a 	add	r2,r2,r2
    8b4c:	8b400504 	addi	r13,r17,20
    8b50:	18c7883a 	add	r3,r3,r3
    8b54:	309f883a 	add	r15,r6,r2
    8b58:	68d7883a 	add	r11,r13,r3
    8b5c:	33c03b2e 	bgeu	r6,r15,8c4c <__multiply+0x194>
    8b60:	2019883a 	mov	r12,r4
    8b64:	30800017 	ldw	r2,0(r6)
    8b68:	127fffcc 	andi	r9,r2,65535
    8b6c:	48001826 	beq	r9,zero,8bd0 <__multiply+0x118>
    8b70:	6811883a 	mov	r8,r13
    8b74:	600f883a 	mov	r7,r12
    8b78:	0015883a 	mov	r10,zero
    8b7c:	40c00017 	ldw	r3,0(r8)
    8b80:	39400017 	ldw	r5,0(r7)
    8b84:	42000104 	addi	r8,r8,4
    8b88:	193fffcc 	andi	r4,r3,65535
    8b8c:	4909383a 	mul	r4,r9,r4
    8b90:	1806d43a 	srli	r3,r3,16
    8b94:	28bfffcc 	andi	r2,r5,65535
    8b98:	5085883a 	add	r2,r10,r2
    8b9c:	2089883a 	add	r4,r4,r2
    8ba0:	48c7383a 	mul	r3,r9,r3
    8ba4:	280ad43a 	srli	r5,r5,16
    8ba8:	2004d43a 	srli	r2,r4,16
    8bac:	3900000d 	sth	r4,0(r7)
    8bb0:	1947883a 	add	r3,r3,r5
    8bb4:	10c5883a 	add	r2,r2,r3
    8bb8:	3880008d 	sth	r2,2(r7)
    8bbc:	1014d43a 	srli	r10,r2,16
    8bc0:	39c00104 	addi	r7,r7,4
    8bc4:	42ffed36 	bltu	r8,r11,8b7c <__multiply+0xc4>
    8bc8:	3a800015 	stw	r10,0(r7)
    8bcc:	30800017 	ldw	r2,0(r6)
    8bd0:	1012d43a 	srli	r9,r2,16
    8bd4:	48001926 	beq	r9,zero,8c3c <__multiply+0x184>
    8bd8:	60800017 	ldw	r2,0(r12)
    8bdc:	6811883a 	mov	r8,r13
    8be0:	600f883a 	mov	r7,r12
    8be4:	0015883a 	mov	r10,zero
    8be8:	100b883a 	mov	r5,r2
    8bec:	41000017 	ldw	r4,0(r8)
    8bf0:	2806d43a 	srli	r3,r5,16
    8bf4:	3880000d 	sth	r2,0(r7)
    8bf8:	20bfffcc 	andi	r2,r4,65535
    8bfc:	4885383a 	mul	r2,r9,r2
    8c00:	50c7883a 	add	r3,r10,r3
    8c04:	2008d43a 	srli	r4,r4,16
    8c08:	10c5883a 	add	r2,r2,r3
    8c0c:	3880008d 	sth	r2,2(r7)
    8c10:	39c00104 	addi	r7,r7,4
    8c14:	39400017 	ldw	r5,0(r7)
    8c18:	4909383a 	mul	r4,r9,r4
    8c1c:	1004d43a 	srli	r2,r2,16
    8c20:	28ffffcc 	andi	r3,r5,65535
    8c24:	20c9883a 	add	r4,r4,r3
    8c28:	1105883a 	add	r2,r2,r4
    8c2c:	42000104 	addi	r8,r8,4
    8c30:	1014d43a 	srli	r10,r2,16
    8c34:	42ffed36 	bltu	r8,r11,8bec <__multiply+0x134>
    8c38:	38800015 	stw	r2,0(r7)
    8c3c:	31800104 	addi	r6,r6,4
    8c40:	33c0022e 	bgeu	r6,r15,8c4c <__multiply+0x194>
    8c44:	63000104 	addi	r12,r12,4
    8c48:	003fc606 	br	8b64 <__multiply+0xac>
    8c4c:	0400090e 	bge	zero,r16,8c74 <__multiply+0x1bc>
    8c50:	70bfff17 	ldw	r2,-4(r14)
    8c54:	70ffff04 	addi	r3,r14,-4
    8c58:	10000326 	beq	r2,zero,8c68 <__multiply+0x1b0>
    8c5c:	00000506 	br	8c74 <__multiply+0x1bc>
    8c60:	18800017 	ldw	r2,0(r3)
    8c64:	1000031e 	bne	r2,zero,8c74 <__multiply+0x1bc>
    8c68:	843fffc4 	addi	r16,r16,-1
    8c6c:	18ffff04 	addi	r3,r3,-4
    8c70:	803ffb1e 	bne	r16,zero,8c60 <__multiply+0x1a8>
    8c74:	a805883a 	mov	r2,r21
    8c78:	ac000415 	stw	r16,16(r21)
    8c7c:	dfc00617 	ldw	ra,24(sp)
    8c80:	dd400517 	ldw	r21,20(sp)
    8c84:	dd000417 	ldw	r20,16(sp)
    8c88:	dcc00317 	ldw	r19,12(sp)
    8c8c:	dc800217 	ldw	r18,8(sp)
    8c90:	dc400117 	ldw	r17,4(sp)
    8c94:	dc000017 	ldw	r16,0(sp)
    8c98:	dec00704 	addi	sp,sp,28
    8c9c:	f800283a 	ret

00008ca0 <__i2b>:
    8ca0:	defffd04 	addi	sp,sp,-12
    8ca4:	dc000015 	stw	r16,0(sp)
    8ca8:	04000044 	movi	r16,1
    8cac:	dc800115 	stw	r18,4(sp)
    8cb0:	2825883a 	mov	r18,r5
    8cb4:	800b883a 	mov	r5,r16
    8cb8:	dfc00215 	stw	ra,8(sp)
    8cbc:	00085a80 	call	85a8 <_Balloc>
    8cc0:	14000415 	stw	r16,16(r2)
    8cc4:	14800515 	stw	r18,20(r2)
    8cc8:	dfc00217 	ldw	ra,8(sp)
    8ccc:	dc800117 	ldw	r18,4(sp)
    8cd0:	dc000017 	ldw	r16,0(sp)
    8cd4:	dec00304 	addi	sp,sp,12
    8cd8:	f800283a 	ret

00008cdc <__multadd>:
    8cdc:	defffa04 	addi	sp,sp,-24
    8ce0:	dc800215 	stw	r18,8(sp)
    8ce4:	2c800417 	ldw	r18,16(r5)
    8ce8:	dd000415 	stw	r20,16(sp)
    8cec:	dcc00315 	stw	r19,12(sp)
    8cf0:	dc000015 	stw	r16,0(sp)
    8cf4:	dfc00515 	stw	ra,20(sp)
    8cf8:	3821883a 	mov	r16,r7
    8cfc:	dc400115 	stw	r17,4(sp)
    8d00:	2827883a 	mov	r19,r5
    8d04:	2029883a 	mov	r20,r4
    8d08:	2a000504 	addi	r8,r5,20
    8d0c:	000f883a 	mov	r7,zero
    8d10:	40800017 	ldw	r2,0(r8)
    8d14:	39c00044 	addi	r7,r7,1
    8d18:	10ffffcc 	andi	r3,r2,65535
    8d1c:	1987383a 	mul	r3,r3,r6
    8d20:	1004d43a 	srli	r2,r2,16
    8d24:	1c07883a 	add	r3,r3,r16
    8d28:	180ad43a 	srli	r5,r3,16
    8d2c:	1185383a 	mul	r2,r2,r6
    8d30:	18ffffcc 	andi	r3,r3,65535
    8d34:	1145883a 	add	r2,r2,r5
    8d38:	1008943a 	slli	r4,r2,16
    8d3c:	1020d43a 	srli	r16,r2,16
    8d40:	20c9883a 	add	r4,r4,r3
    8d44:	41000015 	stw	r4,0(r8)
    8d48:	42000104 	addi	r8,r8,4
    8d4c:	3cbff016 	blt	r7,r18,8d10 <__multadd+0x34>
    8d50:	80000826 	beq	r16,zero,8d74 <__multadd+0x98>
    8d54:	98800217 	ldw	r2,8(r19)
    8d58:	90800f0e 	bge	r18,r2,8d98 <__multadd+0xbc>
    8d5c:	9485883a 	add	r2,r18,r18
    8d60:	1085883a 	add	r2,r2,r2
    8d64:	14c5883a 	add	r2,r2,r19
    8d68:	90c00044 	addi	r3,r18,1
    8d6c:	14000515 	stw	r16,20(r2)
    8d70:	98c00415 	stw	r3,16(r19)
    8d74:	9805883a 	mov	r2,r19
    8d78:	dfc00517 	ldw	ra,20(sp)
    8d7c:	dd000417 	ldw	r20,16(sp)
    8d80:	dcc00317 	ldw	r19,12(sp)
    8d84:	dc800217 	ldw	r18,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00604 	addi	sp,sp,24
    8d94:	f800283a 	ret
    8d98:	99400117 	ldw	r5,4(r19)
    8d9c:	a009883a 	mov	r4,r20
    8da0:	29400044 	addi	r5,r5,1
    8da4:	00085a80 	call	85a8 <_Balloc>
    8da8:	99800417 	ldw	r6,16(r19)
    8dac:	99400304 	addi	r5,r19,12
    8db0:	11000304 	addi	r4,r2,12
    8db4:	318d883a 	add	r6,r6,r6
    8db8:	318d883a 	add	r6,r6,r6
    8dbc:	31800204 	addi	r6,r6,8
    8dc0:	1023883a 	mov	r17,r2
    8dc4:	0007e100 	call	7e10 <memcpy>
    8dc8:	980b883a 	mov	r5,r19
    8dcc:	a009883a 	mov	r4,r20
    8dd0:	00080280 	call	8028 <_Bfree>
    8dd4:	8827883a 	mov	r19,r17
    8dd8:	003fe006 	br	8d5c <__multadd+0x80>

00008ddc <__pow5mult>:
    8ddc:	defffa04 	addi	sp,sp,-24
    8de0:	308000cc 	andi	r2,r6,3
    8de4:	dd000415 	stw	r20,16(sp)
    8de8:	dcc00315 	stw	r19,12(sp)
    8dec:	dc000015 	stw	r16,0(sp)
    8df0:	dfc00515 	stw	ra,20(sp)
    8df4:	dc800215 	stw	r18,8(sp)
    8df8:	dc400115 	stw	r17,4(sp)
    8dfc:	3021883a 	mov	r16,r6
    8e00:	2027883a 	mov	r19,r4
    8e04:	2829883a 	mov	r20,r5
    8e08:	10002b1e 	bne	r2,zero,8eb8 <__pow5mult+0xdc>
    8e0c:	8025d0ba 	srai	r18,r16,2
    8e10:	90001b26 	beq	r18,zero,8e80 <__pow5mult+0xa4>
    8e14:	9c001217 	ldw	r16,72(r19)
    8e18:	8000081e 	bne	r16,zero,8e3c <__pow5mult+0x60>
    8e1c:	00003006 	br	8ee0 <__pow5mult+0x104>
    8e20:	800b883a 	mov	r5,r16
    8e24:	800d883a 	mov	r6,r16
    8e28:	9809883a 	mov	r4,r19
    8e2c:	90001426 	beq	r18,zero,8e80 <__pow5mult+0xa4>
    8e30:	80800017 	ldw	r2,0(r16)
    8e34:	10001b26 	beq	r2,zero,8ea4 <__pow5mult+0xc8>
    8e38:	1021883a 	mov	r16,r2
    8e3c:	9080004c 	andi	r2,r18,1
    8e40:	1005003a 	cmpeq	r2,r2,zero
    8e44:	9025d07a 	srai	r18,r18,1
    8e48:	800d883a 	mov	r6,r16
    8e4c:	9809883a 	mov	r4,r19
    8e50:	a00b883a 	mov	r5,r20
    8e54:	103ff21e 	bne	r2,zero,8e20 <__pow5mult+0x44>
    8e58:	0008ab80 	call	8ab8 <__multiply>
    8e5c:	a00b883a 	mov	r5,r20
    8e60:	9809883a 	mov	r4,r19
    8e64:	1023883a 	mov	r17,r2
    8e68:	00080280 	call	8028 <_Bfree>
    8e6c:	8829883a 	mov	r20,r17
    8e70:	800b883a 	mov	r5,r16
    8e74:	800d883a 	mov	r6,r16
    8e78:	9809883a 	mov	r4,r19
    8e7c:	903fec1e 	bne	r18,zero,8e30 <__pow5mult+0x54>
    8e80:	a005883a 	mov	r2,r20
    8e84:	dfc00517 	ldw	ra,20(sp)
    8e88:	dd000417 	ldw	r20,16(sp)
    8e8c:	dcc00317 	ldw	r19,12(sp)
    8e90:	dc800217 	ldw	r18,8(sp)
    8e94:	dc400117 	ldw	r17,4(sp)
    8e98:	dc000017 	ldw	r16,0(sp)
    8e9c:	dec00604 	addi	sp,sp,24
    8ea0:	f800283a 	ret
    8ea4:	0008ab80 	call	8ab8 <__multiply>
    8ea8:	80800015 	stw	r2,0(r16)
    8eac:	1021883a 	mov	r16,r2
    8eb0:	10000015 	stw	zero,0(r2)
    8eb4:	003fe106 	br	8e3c <__pow5mult+0x60>
    8eb8:	1085883a 	add	r2,r2,r2
    8ebc:	00c00074 	movhi	r3,1
    8ec0:	18c9c304 	addi	r3,r3,9996
    8ec4:	1085883a 	add	r2,r2,r2
    8ec8:	10c5883a 	add	r2,r2,r3
    8ecc:	11bfff17 	ldw	r6,-4(r2)
    8ed0:	000f883a 	mov	r7,zero
    8ed4:	0008cdc0 	call	8cdc <__multadd>
    8ed8:	1029883a 	mov	r20,r2
    8edc:	003fcb06 	br	8e0c <__pow5mult+0x30>
    8ee0:	9809883a 	mov	r4,r19
    8ee4:	01409c44 	movi	r5,625
    8ee8:	0008ca00 	call	8ca0 <__i2b>
    8eec:	98801215 	stw	r2,72(r19)
    8ef0:	1021883a 	mov	r16,r2
    8ef4:	10000015 	stw	zero,0(r2)
    8ef8:	003fd006 	br	8e3c <__pow5mult+0x60>

00008efc <__s2b>:
    8efc:	defff904 	addi	sp,sp,-28
    8f00:	dcc00315 	stw	r19,12(sp)
    8f04:	dc800215 	stw	r18,8(sp)
    8f08:	2827883a 	mov	r19,r5
    8f0c:	2025883a 	mov	r18,r4
    8f10:	01400244 	movi	r5,9
    8f14:	39000204 	addi	r4,r7,8
    8f18:	dd000415 	stw	r20,16(sp)
    8f1c:	dc400115 	stw	r17,4(sp)
    8f20:	dfc00615 	stw	ra,24(sp)
    8f24:	dd400515 	stw	r21,20(sp)
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	3829883a 	mov	r20,r7
    8f30:	3023883a 	mov	r17,r6
    8f34:	000f1240 	call	f124 <__divsi3>
    8f38:	00c00044 	movi	r3,1
    8f3c:	1880350e 	bge	r3,r2,9014 <__s2b+0x118>
    8f40:	000b883a 	mov	r5,zero
    8f44:	18c7883a 	add	r3,r3,r3
    8f48:	29400044 	addi	r5,r5,1
    8f4c:	18bffd16 	blt	r3,r2,8f44 <__s2b+0x48>
    8f50:	9009883a 	mov	r4,r18
    8f54:	00085a80 	call	85a8 <_Balloc>
    8f58:	1011883a 	mov	r8,r2
    8f5c:	d8800717 	ldw	r2,28(sp)
    8f60:	00c00044 	movi	r3,1
    8f64:	01800244 	movi	r6,9
    8f68:	40800515 	stw	r2,20(r8)
    8f6c:	40c00415 	stw	r3,16(r8)
    8f70:	3440260e 	bge	r6,r17,900c <__s2b+0x110>
    8f74:	3021883a 	mov	r16,r6
    8f78:	99ab883a 	add	r21,r19,r6
    8f7c:	9c05883a 	add	r2,r19,r16
    8f80:	11c00007 	ldb	r7,0(r2)
    8f84:	400b883a 	mov	r5,r8
    8f88:	9009883a 	mov	r4,r18
    8f8c:	39fff404 	addi	r7,r7,-48
    8f90:	01800284 	movi	r6,10
    8f94:	0008cdc0 	call	8cdc <__multadd>
    8f98:	84000044 	addi	r16,r16,1
    8f9c:	1011883a 	mov	r8,r2
    8fa0:	8c3ff61e 	bne	r17,r16,8f7c <__s2b+0x80>
    8fa4:	ac45883a 	add	r2,r21,r17
    8fa8:	117ffe04 	addi	r5,r2,-8
    8fac:	880d883a 	mov	r6,r17
    8fb0:	35000c0e 	bge	r6,r20,8fe4 <__s2b+0xe8>
    8fb4:	a185c83a 	sub	r2,r20,r6
    8fb8:	2821883a 	mov	r16,r5
    8fbc:	28a3883a 	add	r17,r5,r2
    8fc0:	81c00007 	ldb	r7,0(r16)
    8fc4:	400b883a 	mov	r5,r8
    8fc8:	9009883a 	mov	r4,r18
    8fcc:	39fff404 	addi	r7,r7,-48
    8fd0:	01800284 	movi	r6,10
    8fd4:	0008cdc0 	call	8cdc <__multadd>
    8fd8:	84000044 	addi	r16,r16,1
    8fdc:	1011883a 	mov	r8,r2
    8fe0:	847ff71e 	bne	r16,r17,8fc0 <__s2b+0xc4>
    8fe4:	4005883a 	mov	r2,r8
    8fe8:	dfc00617 	ldw	ra,24(sp)
    8fec:	dd400517 	ldw	r21,20(sp)
    8ff0:	dd000417 	ldw	r20,16(sp)
    8ff4:	dcc00317 	ldw	r19,12(sp)
    8ff8:	dc800217 	ldw	r18,8(sp)
    8ffc:	dc400117 	ldw	r17,4(sp)
    9000:	dc000017 	ldw	r16,0(sp)
    9004:	dec00704 	addi	sp,sp,28
    9008:	f800283a 	ret
    900c:	99400284 	addi	r5,r19,10
    9010:	003fe706 	br	8fb0 <__s2b+0xb4>
    9014:	000b883a 	mov	r5,zero
    9018:	003fcd06 	br	8f50 <__s2b+0x54>

0000901c <_realloc_r>:
    901c:	defff404 	addi	sp,sp,-48
    9020:	dd800815 	stw	r22,32(sp)
    9024:	dc800415 	stw	r18,16(sp)
    9028:	dc400315 	stw	r17,12(sp)
    902c:	dfc00b15 	stw	ra,44(sp)
    9030:	df000a15 	stw	fp,40(sp)
    9034:	ddc00915 	stw	r23,36(sp)
    9038:	dd400715 	stw	r21,28(sp)
    903c:	dd000615 	stw	r20,24(sp)
    9040:	dcc00515 	stw	r19,20(sp)
    9044:	dc000215 	stw	r16,8(sp)
    9048:	2825883a 	mov	r18,r5
    904c:	3023883a 	mov	r17,r6
    9050:	202d883a 	mov	r22,r4
    9054:	2800c926 	beq	r5,zero,937c <_realloc_r+0x360>
    9058:	000f7b40 	call	f7b4 <__malloc_lock>
    905c:	943ffe04 	addi	r16,r18,-8
    9060:	88c002c4 	addi	r3,r17,11
    9064:	00800584 	movi	r2,22
    9068:	82000117 	ldw	r8,4(r16)
    906c:	10c01b2e 	bgeu	r2,r3,90dc <_realloc_r+0xc0>
    9070:	00bffe04 	movi	r2,-8
    9074:	188e703a 	and	r7,r3,r2
    9078:	3839883a 	mov	fp,r7
    907c:	38001a16 	blt	r7,zero,90e8 <_realloc_r+0xcc>
    9080:	e4401936 	bltu	fp,r17,90e8 <_realloc_r+0xcc>
    9084:	013fff04 	movi	r4,-4
    9088:	4126703a 	and	r19,r8,r4
    908c:	99c02616 	blt	r19,r7,9128 <_realloc_r+0x10c>
    9090:	802b883a 	mov	r21,r16
    9094:	9829883a 	mov	r20,r19
    9098:	84000204 	addi	r16,r16,8
    909c:	a80f883a 	mov	r7,r21
    90a0:	a70dc83a 	sub	r6,r20,fp
    90a4:	008003c4 	movi	r2,15
    90a8:	1180c136 	bltu	r2,r6,93b0 <_realloc_r+0x394>
    90ac:	38800117 	ldw	r2,4(r7)
    90b0:	a549883a 	add	r4,r20,r21
    90b4:	1080004c 	andi	r2,r2,1
    90b8:	a084b03a 	or	r2,r20,r2
    90bc:	38800115 	stw	r2,4(r7)
    90c0:	20c00117 	ldw	r3,4(r4)
    90c4:	18c00054 	ori	r3,r3,1
    90c8:	20c00115 	stw	r3,4(r4)
    90cc:	b009883a 	mov	r4,r22
    90d0:	000f7b80 	call	f7b8 <__malloc_unlock>
    90d4:	8023883a 	mov	r17,r16
    90d8:	00000606 	br	90f4 <_realloc_r+0xd8>
    90dc:	01c00404 	movi	r7,16
    90e0:	3839883a 	mov	fp,r7
    90e4:	e47fe72e 	bgeu	fp,r17,9084 <_realloc_r+0x68>
    90e8:	00800304 	movi	r2,12
    90ec:	0023883a 	mov	r17,zero
    90f0:	b0800015 	stw	r2,0(r22)
    90f4:	8805883a 	mov	r2,r17
    90f8:	dfc00b17 	ldw	ra,44(sp)
    90fc:	df000a17 	ldw	fp,40(sp)
    9100:	ddc00917 	ldw	r23,36(sp)
    9104:	dd800817 	ldw	r22,32(sp)
    9108:	dd400717 	ldw	r21,28(sp)
    910c:	dd000617 	ldw	r20,24(sp)
    9110:	dcc00517 	ldw	r19,20(sp)
    9114:	dc800417 	ldw	r18,16(sp)
    9118:	dc400317 	ldw	r17,12(sp)
    911c:	dc000217 	ldw	r16,8(sp)
    9120:	dec00c04 	addi	sp,sp,48
    9124:	f800283a 	ret
    9128:	00800074 	movhi	r2,1
    912c:	108b1304 	addi	r2,r2,11340
    9130:	12400217 	ldw	r9,8(r2)
    9134:	84cd883a 	add	r6,r16,r19
    9138:	802b883a 	mov	r21,r16
    913c:	3240b926 	beq	r6,r9,9424 <_realloc_r+0x408>
    9140:	31400117 	ldw	r5,4(r6)
    9144:	00bfff84 	movi	r2,-2
    9148:	2884703a 	and	r2,r5,r2
    914c:	1185883a 	add	r2,r2,r6
    9150:	10c00117 	ldw	r3,4(r2)
    9154:	18c0004c 	andi	r3,r3,1
    9158:	1807003a 	cmpeq	r3,r3,zero
    915c:	1800a326 	beq	r3,zero,93ec <_realloc_r+0x3d0>
    9160:	2908703a 	and	r4,r5,r4
    9164:	9929883a 	add	r20,r19,r4
    9168:	a1c0a30e 	bge	r20,r7,93f8 <_realloc_r+0x3dc>
    916c:	4080004c 	andi	r2,r8,1
    9170:	1000551e 	bne	r2,zero,92c8 <_realloc_r+0x2ac>
    9174:	80800017 	ldw	r2,0(r16)
    9178:	80afc83a 	sub	r23,r16,r2
    917c:	b8c00117 	ldw	r3,4(r23)
    9180:	00bfff04 	movi	r2,-4
    9184:	1884703a 	and	r2,r3,r2
    9188:	30002e26 	beq	r6,zero,9244 <_realloc_r+0x228>
    918c:	3240b926 	beq	r6,r9,9474 <_realloc_r+0x458>
    9190:	98a9883a 	add	r20,r19,r2
    9194:	2509883a 	add	r4,r4,r20
    9198:	d9000015 	stw	r4,0(sp)
    919c:	21c02a16 	blt	r4,r7,9248 <_realloc_r+0x22c>
    91a0:	30800317 	ldw	r2,12(r6)
    91a4:	30c00217 	ldw	r3,8(r6)
    91a8:	01400904 	movi	r5,36
    91ac:	99bfff04 	addi	r6,r19,-4
    91b0:	18800315 	stw	r2,12(r3)
    91b4:	10c00215 	stw	r3,8(r2)
    91b8:	b9000317 	ldw	r4,12(r23)
    91bc:	b8800217 	ldw	r2,8(r23)
    91c0:	b82b883a 	mov	r21,r23
    91c4:	bc000204 	addi	r16,r23,8
    91c8:	20800215 	stw	r2,8(r4)
    91cc:	11000315 	stw	r4,12(r2)
    91d0:	2980e436 	bltu	r5,r6,9564 <_realloc_r+0x548>
    91d4:	008004c4 	movi	r2,19
    91d8:	9009883a 	mov	r4,r18
    91dc:	8011883a 	mov	r8,r16
    91e0:	11800f2e 	bgeu	r2,r6,9220 <_realloc_r+0x204>
    91e4:	90800017 	ldw	r2,0(r18)
    91e8:	ba000404 	addi	r8,r23,16
    91ec:	91000204 	addi	r4,r18,8
    91f0:	b8800215 	stw	r2,8(r23)
    91f4:	90c00117 	ldw	r3,4(r18)
    91f8:	008006c4 	movi	r2,27
    91fc:	b8c00315 	stw	r3,12(r23)
    9200:	1180072e 	bgeu	r2,r6,9220 <_realloc_r+0x204>
    9204:	90c00217 	ldw	r3,8(r18)
    9208:	ba000604 	addi	r8,r23,24
    920c:	91000404 	addi	r4,r18,16
    9210:	b8c00415 	stw	r3,16(r23)
    9214:	90800317 	ldw	r2,12(r18)
    9218:	b8800515 	stw	r2,20(r23)
    921c:	3140e726 	beq	r6,r5,95bc <_realloc_r+0x5a0>
    9220:	20800017 	ldw	r2,0(r4)
    9224:	dd000017 	ldw	r20,0(sp)
    9228:	b80f883a 	mov	r7,r23
    922c:	40800015 	stw	r2,0(r8)
    9230:	20c00117 	ldw	r3,4(r4)
    9234:	40c00115 	stw	r3,4(r8)
    9238:	20800217 	ldw	r2,8(r4)
    923c:	40800215 	stw	r2,8(r8)
    9240:	003f9706 	br	90a0 <_realloc_r+0x84>
    9244:	98a9883a 	add	r20,r19,r2
    9248:	a1c01f16 	blt	r20,r7,92c8 <_realloc_r+0x2ac>
    924c:	b8c00317 	ldw	r3,12(r23)
    9250:	b8800217 	ldw	r2,8(r23)
    9254:	99bfff04 	addi	r6,r19,-4
    9258:	01400904 	movi	r5,36
    925c:	b82b883a 	mov	r21,r23
    9260:	18800215 	stw	r2,8(r3)
    9264:	10c00315 	stw	r3,12(r2)
    9268:	bc000204 	addi	r16,r23,8
    926c:	2980c336 	bltu	r5,r6,957c <_realloc_r+0x560>
    9270:	008004c4 	movi	r2,19
    9274:	9009883a 	mov	r4,r18
    9278:	8011883a 	mov	r8,r16
    927c:	11800f2e 	bgeu	r2,r6,92bc <_realloc_r+0x2a0>
    9280:	90800017 	ldw	r2,0(r18)
    9284:	ba000404 	addi	r8,r23,16
    9288:	91000204 	addi	r4,r18,8
    928c:	b8800215 	stw	r2,8(r23)
    9290:	90c00117 	ldw	r3,4(r18)
    9294:	008006c4 	movi	r2,27
    9298:	b8c00315 	stw	r3,12(r23)
    929c:	1180072e 	bgeu	r2,r6,92bc <_realloc_r+0x2a0>
    92a0:	90c00217 	ldw	r3,8(r18)
    92a4:	ba000604 	addi	r8,r23,24
    92a8:	91000404 	addi	r4,r18,16
    92ac:	b8c00415 	stw	r3,16(r23)
    92b0:	90800317 	ldw	r2,12(r18)
    92b4:	b8800515 	stw	r2,20(r23)
    92b8:	3140c726 	beq	r6,r5,95d8 <_realloc_r+0x5bc>
    92bc:	20800017 	ldw	r2,0(r4)
    92c0:	b80f883a 	mov	r7,r23
    92c4:	003fd906 	br	922c <_realloc_r+0x210>
    92c8:	880b883a 	mov	r5,r17
    92cc:	b009883a 	mov	r4,r22
    92d0:	00074ec0 	call	74ec <_malloc_r>
    92d4:	1023883a 	mov	r17,r2
    92d8:	10002526 	beq	r2,zero,9370 <_realloc_r+0x354>
    92dc:	80800117 	ldw	r2,4(r16)
    92e0:	00ffff84 	movi	r3,-2
    92e4:	893ffe04 	addi	r4,r17,-8
    92e8:	10c4703a 	and	r2,r2,r3
    92ec:	8085883a 	add	r2,r16,r2
    92f0:	20809526 	beq	r4,r2,9548 <_realloc_r+0x52c>
    92f4:	99bfff04 	addi	r6,r19,-4
    92f8:	01c00904 	movi	r7,36
    92fc:	39804536 	bltu	r7,r6,9414 <_realloc_r+0x3f8>
    9300:	008004c4 	movi	r2,19
    9304:	9009883a 	mov	r4,r18
    9308:	880b883a 	mov	r5,r17
    930c:	11800f2e 	bgeu	r2,r6,934c <_realloc_r+0x330>
    9310:	90800017 	ldw	r2,0(r18)
    9314:	89400204 	addi	r5,r17,8
    9318:	91000204 	addi	r4,r18,8
    931c:	88800015 	stw	r2,0(r17)
    9320:	90c00117 	ldw	r3,4(r18)
    9324:	008006c4 	movi	r2,27
    9328:	88c00115 	stw	r3,4(r17)
    932c:	1180072e 	bgeu	r2,r6,934c <_realloc_r+0x330>
    9330:	90c00217 	ldw	r3,8(r18)
    9334:	89400404 	addi	r5,r17,16
    9338:	91000404 	addi	r4,r18,16
    933c:	88c00215 	stw	r3,8(r17)
    9340:	90800317 	ldw	r2,12(r18)
    9344:	88800315 	stw	r2,12(r17)
    9348:	31c09126 	beq	r6,r7,9590 <_realloc_r+0x574>
    934c:	20800017 	ldw	r2,0(r4)
    9350:	28800015 	stw	r2,0(r5)
    9354:	20c00117 	ldw	r3,4(r4)
    9358:	28c00115 	stw	r3,4(r5)
    935c:	20800217 	ldw	r2,8(r4)
    9360:	28800215 	stw	r2,8(r5)
    9364:	900b883a 	mov	r5,r18
    9368:	b009883a 	mov	r4,r22
    936c:	00069380 	call	6938 <_free_r>
    9370:	b009883a 	mov	r4,r22
    9374:	000f7b80 	call	f7b8 <__malloc_unlock>
    9378:	003f5e06 	br	90f4 <_realloc_r+0xd8>
    937c:	300b883a 	mov	r5,r6
    9380:	dfc00b17 	ldw	ra,44(sp)
    9384:	df000a17 	ldw	fp,40(sp)
    9388:	ddc00917 	ldw	r23,36(sp)
    938c:	dd800817 	ldw	r22,32(sp)
    9390:	dd400717 	ldw	r21,28(sp)
    9394:	dd000617 	ldw	r20,24(sp)
    9398:	dcc00517 	ldw	r19,20(sp)
    939c:	dc800417 	ldw	r18,16(sp)
    93a0:	dc400317 	ldw	r17,12(sp)
    93a4:	dc000217 	ldw	r16,8(sp)
    93a8:	dec00c04 	addi	sp,sp,48
    93ac:	00074ec1 	jmpi	74ec <_malloc_r>
    93b0:	38800117 	ldw	r2,4(r7)
    93b4:	e54b883a 	add	r5,fp,r21
    93b8:	31000054 	ori	r4,r6,1
    93bc:	1080004c 	andi	r2,r2,1
    93c0:	1704b03a 	or	r2,r2,fp
    93c4:	38800115 	stw	r2,4(r7)
    93c8:	29000115 	stw	r4,4(r5)
    93cc:	2987883a 	add	r3,r5,r6
    93d0:	18800117 	ldw	r2,4(r3)
    93d4:	29400204 	addi	r5,r5,8
    93d8:	b009883a 	mov	r4,r22
    93dc:	10800054 	ori	r2,r2,1
    93e0:	18800115 	stw	r2,4(r3)
    93e4:	00069380 	call	6938 <_free_r>
    93e8:	003f3806 	br	90cc <_realloc_r+0xb0>
    93ec:	000d883a 	mov	r6,zero
    93f0:	0009883a 	mov	r4,zero
    93f4:	003f5d06 	br	916c <_realloc_r+0x150>
    93f8:	30c00217 	ldw	r3,8(r6)
    93fc:	30800317 	ldw	r2,12(r6)
    9400:	800f883a 	mov	r7,r16
    9404:	84000204 	addi	r16,r16,8
    9408:	10c00215 	stw	r3,8(r2)
    940c:	18800315 	stw	r2,12(r3)
    9410:	003f2306 	br	90a0 <_realloc_r+0x84>
    9414:	8809883a 	mov	r4,r17
    9418:	900b883a 	mov	r5,r18
    941c:	0007eb00 	call	7eb0 <memmove>
    9420:	003fd006 	br	9364 <_realloc_r+0x348>
    9424:	30800117 	ldw	r2,4(r6)
    9428:	e0c00404 	addi	r3,fp,16
    942c:	1108703a 	and	r4,r2,r4
    9430:	9905883a 	add	r2,r19,r4
    9434:	10ff4d16 	blt	r2,r3,916c <_realloc_r+0x150>
    9438:	1705c83a 	sub	r2,r2,fp
    943c:	870b883a 	add	r5,r16,fp
    9440:	10800054 	ori	r2,r2,1
    9444:	28800115 	stw	r2,4(r5)
    9448:	80c00117 	ldw	r3,4(r16)
    944c:	00800074 	movhi	r2,1
    9450:	108b1304 	addi	r2,r2,11340
    9454:	b009883a 	mov	r4,r22
    9458:	18c0004c 	andi	r3,r3,1
    945c:	e0c6b03a 	or	r3,fp,r3
    9460:	11400215 	stw	r5,8(r2)
    9464:	80c00115 	stw	r3,4(r16)
    9468:	000f7b80 	call	f7b8 <__malloc_unlock>
    946c:	84400204 	addi	r17,r16,8
    9470:	003f2006 	br	90f4 <_realloc_r+0xd8>
    9474:	98a9883a 	add	r20,r19,r2
    9478:	2509883a 	add	r4,r4,r20
    947c:	e0800404 	addi	r2,fp,16
    9480:	d9000115 	stw	r4,4(sp)
    9484:	20bf7016 	blt	r4,r2,9248 <_realloc_r+0x22c>
    9488:	b8c00317 	ldw	r3,12(r23)
    948c:	b8800217 	ldw	r2,8(r23)
    9490:	99bfff04 	addi	r6,r19,-4
    9494:	01400904 	movi	r5,36
    9498:	18800215 	stw	r2,8(r3)
    949c:	10c00315 	stw	r3,12(r2)
    94a0:	bc400204 	addi	r17,r23,8
    94a4:	29804136 	bltu	r5,r6,95ac <_realloc_r+0x590>
    94a8:	008004c4 	movi	r2,19
    94ac:	9009883a 	mov	r4,r18
    94b0:	880f883a 	mov	r7,r17
    94b4:	11800f2e 	bgeu	r2,r6,94f4 <_realloc_r+0x4d8>
    94b8:	90800017 	ldw	r2,0(r18)
    94bc:	b9c00404 	addi	r7,r23,16
    94c0:	91000204 	addi	r4,r18,8
    94c4:	b8800215 	stw	r2,8(r23)
    94c8:	90c00117 	ldw	r3,4(r18)
    94cc:	008006c4 	movi	r2,27
    94d0:	b8c00315 	stw	r3,12(r23)
    94d4:	1180072e 	bgeu	r2,r6,94f4 <_realloc_r+0x4d8>
    94d8:	90c00217 	ldw	r3,8(r18)
    94dc:	b9c00604 	addi	r7,r23,24
    94e0:	91000404 	addi	r4,r18,16
    94e4:	b8c00415 	stw	r3,16(r23)
    94e8:	90800317 	ldw	r2,12(r18)
    94ec:	b8800515 	stw	r2,20(r23)
    94f0:	31404026 	beq	r6,r5,95f4 <_realloc_r+0x5d8>
    94f4:	20800017 	ldw	r2,0(r4)
    94f8:	38800015 	stw	r2,0(r7)
    94fc:	20c00117 	ldw	r3,4(r4)
    9500:	38c00115 	stw	r3,4(r7)
    9504:	20800217 	ldw	r2,8(r4)
    9508:	38800215 	stw	r2,8(r7)
    950c:	d8c00117 	ldw	r3,4(sp)
    9510:	bf0b883a 	add	r5,r23,fp
    9514:	b009883a 	mov	r4,r22
    9518:	1f05c83a 	sub	r2,r3,fp
    951c:	10800054 	ori	r2,r2,1
    9520:	28800115 	stw	r2,4(r5)
    9524:	b8c00117 	ldw	r3,4(r23)
    9528:	00800074 	movhi	r2,1
    952c:	108b1304 	addi	r2,r2,11340
    9530:	11400215 	stw	r5,8(r2)
    9534:	18c0004c 	andi	r3,r3,1
    9538:	e0c6b03a 	or	r3,fp,r3
    953c:	b8c00115 	stw	r3,4(r23)
    9540:	000f7b80 	call	f7b8 <__malloc_unlock>
    9544:	003eeb06 	br	90f4 <_realloc_r+0xd8>
    9548:	20800117 	ldw	r2,4(r4)
    954c:	00ffff04 	movi	r3,-4
    9550:	800f883a 	mov	r7,r16
    9554:	10c4703a 	and	r2,r2,r3
    9558:	98a9883a 	add	r20,r19,r2
    955c:	84000204 	addi	r16,r16,8
    9560:	003ecf06 	br	90a0 <_realloc_r+0x84>
    9564:	900b883a 	mov	r5,r18
    9568:	8009883a 	mov	r4,r16
    956c:	0007eb00 	call	7eb0 <memmove>
    9570:	dd000017 	ldw	r20,0(sp)
    9574:	b80f883a 	mov	r7,r23
    9578:	003ec906 	br	90a0 <_realloc_r+0x84>
    957c:	900b883a 	mov	r5,r18
    9580:	8009883a 	mov	r4,r16
    9584:	0007eb00 	call	7eb0 <memmove>
    9588:	b80f883a 	mov	r7,r23
    958c:	003ec406 	br	90a0 <_realloc_r+0x84>
    9590:	90c00417 	ldw	r3,16(r18)
    9594:	89400604 	addi	r5,r17,24
    9598:	91000604 	addi	r4,r18,24
    959c:	88c00415 	stw	r3,16(r17)
    95a0:	90800517 	ldw	r2,20(r18)
    95a4:	88800515 	stw	r2,20(r17)
    95a8:	003f6806 	br	934c <_realloc_r+0x330>
    95ac:	900b883a 	mov	r5,r18
    95b0:	8809883a 	mov	r4,r17
    95b4:	0007eb00 	call	7eb0 <memmove>
    95b8:	003fd406 	br	950c <_realloc_r+0x4f0>
    95bc:	90c00417 	ldw	r3,16(r18)
    95c0:	91000604 	addi	r4,r18,24
    95c4:	ba000804 	addi	r8,r23,32
    95c8:	b8c00615 	stw	r3,24(r23)
    95cc:	90800517 	ldw	r2,20(r18)
    95d0:	b8800715 	stw	r2,28(r23)
    95d4:	003f1206 	br	9220 <_realloc_r+0x204>
    95d8:	90c00417 	ldw	r3,16(r18)
    95dc:	91000604 	addi	r4,r18,24
    95e0:	ba000804 	addi	r8,r23,32
    95e4:	b8c00615 	stw	r3,24(r23)
    95e8:	90800517 	ldw	r2,20(r18)
    95ec:	b8800715 	stw	r2,28(r23)
    95f0:	003f3206 	br	92bc <_realloc_r+0x2a0>
    95f4:	90c00417 	ldw	r3,16(r18)
    95f8:	91000604 	addi	r4,r18,24
    95fc:	b9c00804 	addi	r7,r23,32
    9600:	b8c00615 	stw	r3,24(r23)
    9604:	90800517 	ldw	r2,20(r18)
    9608:	b8800715 	stw	r2,28(r23)
    960c:	003fb906 	br	94f4 <_realloc_r+0x4d8>

00009610 <__srefill_r>:
    9610:	defffd04 	addi	sp,sp,-12
    9614:	dc400115 	stw	r17,4(sp)
    9618:	dc000015 	stw	r16,0(sp)
    961c:	dfc00215 	stw	ra,8(sp)
    9620:	2023883a 	mov	r17,r4
    9624:	2821883a 	mov	r16,r5
    9628:	20000226 	beq	r4,zero,9634 <__srefill_r+0x24>
    962c:	20800e17 	ldw	r2,56(r4)
    9630:	10004126 	beq	r2,zero,9738 <__srefill_r+0x128>
    9634:	80c0030b 	ldhu	r3,12(r16)
    9638:	80000115 	stw	zero,4(r16)
    963c:	1880080c 	andi	r2,r3,32
    9640:	1000361e 	bne	r2,zero,971c <__srefill_r+0x10c>
    9644:	1880010c 	andi	r2,r3,4
    9648:	1000211e 	bne	r2,zero,96d0 <__srefill_r+0xc0>
    964c:	1880040c 	andi	r2,r3,16
    9650:	10005026 	beq	r2,zero,9794 <__srefill_r+0x184>
    9654:	1880020c 	andi	r2,r3,8
    9658:	1000541e 	bne	r2,zero,97ac <__srefill_r+0x19c>
    965c:	8080030b 	ldhu	r2,12(r16)
    9660:	10800114 	ori	r2,r2,4
    9664:	8080030d 	sth	r2,12(r16)
    9668:	80800417 	ldw	r2,16(r16)
    966c:	10004526 	beq	r2,zero,9784 <__srefill_r+0x174>
    9670:	8080030b 	ldhu	r2,12(r16)
    9674:	108000cc 	andi	r2,r2,3
    9678:	1000361e 	bne	r2,zero,9754 <__srefill_r+0x144>
    967c:	81800417 	ldw	r6,16(r16)
    9680:	80c00817 	ldw	r3,32(r16)
    9684:	81400717 	ldw	r5,28(r16)
    9688:	81c00517 	ldw	r7,20(r16)
    968c:	8809883a 	mov	r4,r17
    9690:	81800015 	stw	r6,0(r16)
    9694:	183ee83a 	callr	r3
    9698:	80c0030b 	ldhu	r3,12(r16)
    969c:	1009883a 	mov	r4,r2
    96a0:	80800115 	stw	r2,4(r16)
    96a4:	00b7ffc4 	movi	r2,-8193
    96a8:	1884703a 	and	r2,r3,r2
    96ac:	8080030d 	sth	r2,12(r16)
    96b0:	0100230e 	bge	zero,r4,9740 <__srefill_r+0x130>
    96b4:	0009883a 	mov	r4,zero
    96b8:	2005883a 	mov	r2,r4
    96bc:	dfc00217 	ldw	ra,8(sp)
    96c0:	dc400117 	ldw	r17,4(sp)
    96c4:	dc000017 	ldw	r16,0(sp)
    96c8:	dec00304 	addi	sp,sp,12
    96cc:	f800283a 	ret
    96d0:	81400c17 	ldw	r5,48(r16)
    96d4:	283fe426 	beq	r5,zero,9668 <__srefill_r+0x58>
    96d8:	80801004 	addi	r2,r16,64
    96dc:	28800226 	beq	r5,r2,96e8 <__srefill_r+0xd8>
    96e0:	8809883a 	mov	r4,r17
    96e4:	00069380 	call	6938 <_free_r>
    96e8:	80800f17 	ldw	r2,60(r16)
    96ec:	80000c15 	stw	zero,48(r16)
    96f0:	80800115 	stw	r2,4(r16)
    96f4:	103fdc26 	beq	r2,zero,9668 <__srefill_r+0x58>
    96f8:	80800e17 	ldw	r2,56(r16)
    96fc:	0009883a 	mov	r4,zero
    9700:	80800015 	stw	r2,0(r16)
    9704:	2005883a 	mov	r2,r4
    9708:	dfc00217 	ldw	ra,8(sp)
    970c:	dc400117 	ldw	r17,4(sp)
    9710:	dc000017 	ldw	r16,0(sp)
    9714:	dec00304 	addi	sp,sp,12
    9718:	f800283a 	ret
    971c:	013fffc4 	movi	r4,-1
    9720:	2005883a 	mov	r2,r4
    9724:	dfc00217 	ldw	ra,8(sp)
    9728:	dc400117 	ldw	r17,4(sp)
    972c:	dc000017 	ldw	r16,0(sp)
    9730:	dec00304 	addi	sp,sp,12
    9734:	f800283a 	ret
    9738:	00063780 	call	6378 <__sinit>
    973c:	003fbd06 	br	9634 <__srefill_r+0x24>
    9740:	20000b1e 	bne	r4,zero,9770 <__srefill_r+0x160>
    9744:	10800814 	ori	r2,r2,32
    9748:	013fffc4 	movi	r4,-1
    974c:	8080030d 	sth	r2,12(r16)
    9750:	003fd906 	br	96b8 <__srefill_r+0xa8>
    9754:	00800074 	movhi	r2,1
    9758:	10910d04 	addi	r2,r2,17460
    975c:	11000017 	ldw	r4,0(r2)
    9760:	01400074 	movhi	r5,1
    9764:	2965f504 	addi	r5,r5,-26668
    9768:	00071b00 	call	71b0 <_fwalk>
    976c:	003fc306 	br	967c <__srefill_r+0x6c>
    9770:	10801014 	ori	r2,r2,64
    9774:	013fffc4 	movi	r4,-1
    9778:	8080030d 	sth	r2,12(r16)
    977c:	80000115 	stw	zero,4(r16)
    9780:	003fcd06 	br	96b8 <__srefill_r+0xa8>
    9784:	8809883a 	mov	r4,r17
    9788:	800b883a 	mov	r5,r16
    978c:	00073580 	call	7358 <__smakebuf_r>
    9790:	003fb706 	br	9670 <__srefill_r+0x60>
    9794:	18c01014 	ori	r3,r3,64
    9798:	00800244 	movi	r2,9
    979c:	013fffc4 	movi	r4,-1
    97a0:	88800015 	stw	r2,0(r17)
    97a4:	80c0030d 	sth	r3,12(r16)
    97a8:	003fc306 	br	96b8 <__srefill_r+0xa8>
    97ac:	8809883a 	mov	r4,r17
    97b0:	800b883a 	mov	r5,r16
    97b4:	00060e00 	call	60e0 <_fflush_r>
    97b8:	103fd81e 	bne	r2,zero,971c <__srefill_r+0x10c>
    97bc:	8080030b 	ldhu	r2,12(r16)
    97c0:	80000215 	stw	zero,8(r16)
    97c4:	80000615 	stw	zero,24(r16)
    97c8:	10bffdcc 	andi	r2,r2,65527
    97cc:	8080030d 	sth	r2,12(r16)
    97d0:	003fa206 	br	965c <__srefill_r+0x4c>

000097d4 <lflush>:
    97d4:	20c0030b 	ldhu	r3,12(r4)
    97d8:	01400244 	movi	r5,9
    97dc:	0005883a 	mov	r2,zero
    97e0:	18c0024c 	andi	r3,r3,9
    97e4:	19400126 	beq	r3,r5,97ec <lflush+0x18>
    97e8:	f800283a 	ret
    97ec:	00062dc1 	jmpi	62dc <fflush>

000097f0 <__isinfd>:
    97f0:	200d883a 	mov	r6,r4
    97f4:	0109c83a 	sub	r4,zero,r4
    97f8:	2188b03a 	or	r4,r4,r6
    97fc:	2008d7fa 	srli	r4,r4,31
    9800:	00a00034 	movhi	r2,32768
    9804:	10bfffc4 	addi	r2,r2,-1
    9808:	1144703a 	and	r2,r2,r5
    980c:	2088b03a 	or	r4,r4,r2
    9810:	009ffc34 	movhi	r2,32752
    9814:	1105c83a 	sub	r2,r2,r4
    9818:	0087c83a 	sub	r3,zero,r2
    981c:	10c4b03a 	or	r2,r2,r3
    9820:	1004d7fa 	srli	r2,r2,31
    9824:	00c00044 	movi	r3,1
    9828:	1885c83a 	sub	r2,r3,r2
    982c:	f800283a 	ret

00009830 <__isnand>:
    9830:	200d883a 	mov	r6,r4
    9834:	0109c83a 	sub	r4,zero,r4
    9838:	2188b03a 	or	r4,r4,r6
    983c:	2008d7fa 	srli	r4,r4,31
    9840:	00a00034 	movhi	r2,32768
    9844:	10bfffc4 	addi	r2,r2,-1
    9848:	1144703a 	and	r2,r2,r5
    984c:	2088b03a 	or	r4,r4,r2
    9850:	009ffc34 	movhi	r2,32752
    9854:	1105c83a 	sub	r2,r2,r4
    9858:	1004d7fa 	srli	r2,r2,31
    985c:	f800283a 	ret

00009860 <_sbrk_r>:
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dc000015 	stw	r16,0(sp)
    9868:	04000074 	movhi	r16,1
    986c:	84182e04 	addi	r16,r16,24760
    9870:	dc400115 	stw	r17,4(sp)
    9874:	80000015 	stw	zero,0(r16)
    9878:	2023883a 	mov	r17,r4
    987c:	2809883a 	mov	r4,r5
    9880:	dfc00215 	stw	ra,8(sp)
    9884:	000fadc0 	call	fadc <sbrk>
    9888:	1007883a 	mov	r3,r2
    988c:	00bfffc4 	movi	r2,-1
    9890:	18800626 	beq	r3,r2,98ac <_sbrk_r+0x4c>
    9894:	1805883a 	mov	r2,r3
    9898:	dfc00217 	ldw	ra,8(sp)
    989c:	dc400117 	ldw	r17,4(sp)
    98a0:	dc000017 	ldw	r16,0(sp)
    98a4:	dec00304 	addi	sp,sp,12
    98a8:	f800283a 	ret
    98ac:	80800017 	ldw	r2,0(r16)
    98b0:	103ff826 	beq	r2,zero,9894 <_sbrk_r+0x34>
    98b4:	88800015 	stw	r2,0(r17)
    98b8:	1805883a 	mov	r2,r3
    98bc:	dfc00217 	ldw	ra,8(sp)
    98c0:	dc400117 	ldw	r17,4(sp)
    98c4:	dc000017 	ldw	r16,0(sp)
    98c8:	dec00304 	addi	sp,sp,12
    98cc:	f800283a 	ret

000098d0 <__sccl>:
    98d0:	28c00003 	ldbu	r3,0(r5)
    98d4:	00801784 	movi	r2,94
    98d8:	2a000044 	addi	r8,r5,1
    98dc:	18802526 	beq	r3,r2,9974 <__sccl+0xa4>
    98e0:	180f883a 	mov	r7,r3
    98e4:	0013883a 	mov	r9,zero
    98e8:	000d883a 	mov	r6,zero
    98ec:	0007883a 	mov	r3,zero
    98f0:	01404004 	movi	r5,256
    98f4:	1905883a 	add	r2,r3,r4
    98f8:	18c00044 	addi	r3,r3,1
    98fc:	11800005 	stb	r6,0(r2)
    9900:	197ffc1e 	bne	r3,r5,98f4 <__sccl+0x24>
    9904:	38000c26 	beq	r7,zero,9938 <__sccl+0x68>
    9908:	00800044 	movi	r2,1
    990c:	124dc83a 	sub	r6,r2,r9
    9910:	3905883a 	add	r2,r7,r4
    9914:	11800005 	stb	r6,0(r2)
    9918:	41400044 	addi	r5,r8,1
    991c:	02400b44 	movi	r9,45
    9920:	02801744 	movi	r10,93
    9924:	28bfffc3 	ldbu	r2,-1(r5)
    9928:	2811883a 	mov	r8,r5
    992c:	12400726 	beq	r2,r9,994c <__sccl+0x7c>
    9930:	12800226 	beq	r2,r10,993c <__sccl+0x6c>
    9934:	1000031e 	bne	r2,zero,9944 <__sccl+0x74>
    9938:	423fffc4 	addi	r8,r8,-1
    993c:	4005883a 	mov	r2,r8
    9940:	f800283a 	ret
    9944:	100f883a 	mov	r7,r2
    9948:	003ff106 	br	9910 <__sccl+0x40>
    994c:	28c00003 	ldbu	r3,0(r5)
    9950:	1a800d26 	beq	r3,r10,9988 <__sccl+0xb8>
    9954:	19c00c16 	blt	r3,r7,9988 <__sccl+0xb8>
    9958:	21c5883a 	add	r2,r4,r7
    995c:	39c00044 	addi	r7,r7,1
    9960:	11800045 	stb	r6,1(r2)
    9964:	10800044 	addi	r2,r2,1
    9968:	38fffc16 	blt	r7,r3,995c <__sccl+0x8c>
    996c:	29400084 	addi	r5,r5,2
    9970:	003fec06 	br	9924 <__sccl+0x54>
    9974:	29c00043 	ldbu	r7,1(r5)
    9978:	02400044 	movi	r9,1
    997c:	2a000084 	addi	r8,r5,2
    9980:	480d883a 	mov	r6,r9
    9984:	003fd906 	br	98ec <__sccl+0x1c>
    9988:	01c00b44 	movi	r7,45
    998c:	003fe006 	br	9910 <__sccl+0x40>

00009990 <nanf>:
    9990:	009ff034 	movhi	r2,32704
    9994:	f800283a 	ret

00009998 <sprintf>:
    9998:	deffe504 	addi	sp,sp,-108
    999c:	2013883a 	mov	r9,r4
    99a0:	dfc01815 	stw	ra,96(sp)
    99a4:	d9801915 	stw	r6,100(sp)
    99a8:	d9c01a15 	stw	r7,104(sp)
    99ac:	d8801904 	addi	r2,sp,100
    99b0:	d8800015 	stw	r2,0(sp)
    99b4:	00800074 	movhi	r2,1
    99b8:	10910c04 	addi	r2,r2,17456
    99bc:	11000017 	ldw	r4,0(r2)
    99c0:	d9c00017 	ldw	r7,0(sp)
    99c4:	00808204 	movi	r2,520
    99c8:	00e00034 	movhi	r3,32768
    99cc:	18ffffc4 	addi	r3,r3,-1
    99d0:	280d883a 	mov	r6,r5
    99d4:	d880040d 	sth	r2,16(sp)
    99d8:	d9400104 	addi	r5,sp,4
    99dc:	00bfffc4 	movi	r2,-1
    99e0:	d8c00615 	stw	r3,24(sp)
    99e4:	d8c00315 	stw	r3,12(sp)
    99e8:	da400515 	stw	r9,20(sp)
    99ec:	d880048d 	sth	r2,18(sp)
    99f0:	da400115 	stw	r9,4(sp)
    99f4:	00011880 	call	1188 <___vfprintf_internal_r>
    99f8:	d8c00117 	ldw	r3,4(sp)
    99fc:	18000005 	stb	zero,0(r3)
    9a00:	dfc01817 	ldw	ra,96(sp)
    9a04:	dec01b04 	addi	sp,sp,108
    9a08:	f800283a 	ret

00009a0c <_sprintf_r>:
    9a0c:	deffe604 	addi	sp,sp,-104
    9a10:	2813883a 	mov	r9,r5
    9a14:	dfc01815 	stw	ra,96(sp)
    9a18:	d9c01915 	stw	r7,100(sp)
    9a1c:	d8801904 	addi	r2,sp,100
    9a20:	d8800015 	stw	r2,0(sp)
    9a24:	100f883a 	mov	r7,r2
    9a28:	00808204 	movi	r2,520
    9a2c:	00e00034 	movhi	r3,32768
    9a30:	18ffffc4 	addi	r3,r3,-1
    9a34:	d880040d 	sth	r2,16(sp)
    9a38:	d9400104 	addi	r5,sp,4
    9a3c:	00bfffc4 	movi	r2,-1
    9a40:	d8c00615 	stw	r3,24(sp)
    9a44:	d8c00315 	stw	r3,12(sp)
    9a48:	da400515 	stw	r9,20(sp)
    9a4c:	d880048d 	sth	r2,18(sp)
    9a50:	da400115 	stw	r9,4(sp)
    9a54:	00011880 	call	1188 <___vfprintf_internal_r>
    9a58:	d8c00117 	ldw	r3,4(sp)
    9a5c:	18000005 	stb	zero,0(r3)
    9a60:	dfc01817 	ldw	ra,96(sp)
    9a64:	dec01a04 	addi	sp,sp,104
    9a68:	f800283a 	ret

00009a6c <__sclose>:
    9a6c:	2940038f 	ldh	r5,14(r5)
    9a70:	000c1d81 	jmpi	c1d8 <_close_r>

00009a74 <__sseek>:
    9a74:	defffe04 	addi	sp,sp,-8
    9a78:	dc000015 	stw	r16,0(sp)
    9a7c:	2821883a 	mov	r16,r5
    9a80:	2940038f 	ldh	r5,14(r5)
    9a84:	dfc00115 	stw	ra,4(sp)
    9a88:	000cfd80 	call	cfd8 <_lseek_r>
    9a8c:	1007883a 	mov	r3,r2
    9a90:	00bfffc4 	movi	r2,-1
    9a94:	18800926 	beq	r3,r2,9abc <__sseek+0x48>
    9a98:	8080030b 	ldhu	r2,12(r16)
    9a9c:	80c01415 	stw	r3,80(r16)
    9aa0:	10840014 	ori	r2,r2,4096
    9aa4:	8080030d 	sth	r2,12(r16)
    9aa8:	1805883a 	mov	r2,r3
    9aac:	dfc00117 	ldw	ra,4(sp)
    9ab0:	dc000017 	ldw	r16,0(sp)
    9ab4:	dec00204 	addi	sp,sp,8
    9ab8:	f800283a 	ret
    9abc:	8080030b 	ldhu	r2,12(r16)
    9ac0:	10bbffcc 	andi	r2,r2,61439
    9ac4:	8080030d 	sth	r2,12(r16)
    9ac8:	1805883a 	mov	r2,r3
    9acc:	dfc00117 	ldw	ra,4(sp)
    9ad0:	dc000017 	ldw	r16,0(sp)
    9ad4:	dec00204 	addi	sp,sp,8
    9ad8:	f800283a 	ret

00009adc <__swrite>:
    9adc:	2880030b 	ldhu	r2,12(r5)
    9ae0:	defffb04 	addi	sp,sp,-20
    9ae4:	dcc00315 	stw	r19,12(sp)
    9ae8:	1080400c 	andi	r2,r2,256
    9aec:	dc800215 	stw	r18,8(sp)
    9af0:	dc400115 	stw	r17,4(sp)
    9af4:	dc000015 	stw	r16,0(sp)
    9af8:	3027883a 	mov	r19,r6
    9afc:	3825883a 	mov	r18,r7
    9b00:	dfc00415 	stw	ra,16(sp)
    9b04:	2821883a 	mov	r16,r5
    9b08:	000d883a 	mov	r6,zero
    9b0c:	01c00084 	movi	r7,2
    9b10:	2023883a 	mov	r17,r4
    9b14:	10000226 	beq	r2,zero,9b20 <__swrite+0x44>
    9b18:	2940038f 	ldh	r5,14(r5)
    9b1c:	000cfd80 	call	cfd8 <_lseek_r>
    9b20:	8080030b 	ldhu	r2,12(r16)
    9b24:	8140038f 	ldh	r5,14(r16)
    9b28:	8809883a 	mov	r4,r17
    9b2c:	10bbffcc 	andi	r2,r2,61439
    9b30:	980d883a 	mov	r6,r19
    9b34:	900f883a 	mov	r7,r18
    9b38:	8080030d 	sth	r2,12(r16)
    9b3c:	dfc00417 	ldw	ra,16(sp)
    9b40:	dcc00317 	ldw	r19,12(sp)
    9b44:	dc800217 	ldw	r18,8(sp)
    9b48:	dc400117 	ldw	r17,4(sp)
    9b4c:	dc000017 	ldw	r16,0(sp)
    9b50:	dec00504 	addi	sp,sp,20
    9b54:	000c0ac1 	jmpi	c0ac <_write_r>

00009b58 <__sread>:
    9b58:	defffe04 	addi	sp,sp,-8
    9b5c:	dc000015 	stw	r16,0(sp)
    9b60:	2821883a 	mov	r16,r5
    9b64:	2940038f 	ldh	r5,14(r5)
    9b68:	dfc00115 	stw	ra,4(sp)
    9b6c:	000d0500 	call	d050 <_read_r>
    9b70:	1007883a 	mov	r3,r2
    9b74:	10000816 	blt	r2,zero,9b98 <__sread+0x40>
    9b78:	80801417 	ldw	r2,80(r16)
    9b7c:	10c5883a 	add	r2,r2,r3
    9b80:	80801415 	stw	r2,80(r16)
    9b84:	1805883a 	mov	r2,r3
    9b88:	dfc00117 	ldw	ra,4(sp)
    9b8c:	dc000017 	ldw	r16,0(sp)
    9b90:	dec00204 	addi	sp,sp,8
    9b94:	f800283a 	ret
    9b98:	8080030b 	ldhu	r2,12(r16)
    9b9c:	10bbffcc 	andi	r2,r2,61439
    9ba0:	8080030d 	sth	r2,12(r16)
    9ba4:	1805883a 	mov	r2,r3
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	dc000017 	ldw	r16,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret

00009bb8 <strcmp>:
    9bb8:	2144b03a 	or	r2,r4,r5
    9bbc:	108000cc 	andi	r2,r2,3
    9bc0:	10001d1e 	bne	r2,zero,9c38 <strcmp+0x80>
    9bc4:	200f883a 	mov	r7,r4
    9bc8:	28800017 	ldw	r2,0(r5)
    9bcc:	21000017 	ldw	r4,0(r4)
    9bd0:	280d883a 	mov	r6,r5
    9bd4:	2080161e 	bne	r4,r2,9c30 <strcmp+0x78>
    9bd8:	023fbff4 	movhi	r8,65279
    9bdc:	423fbfc4 	addi	r8,r8,-257
    9be0:	2207883a 	add	r3,r4,r8
    9be4:	01602074 	movhi	r5,32897
    9be8:	29602004 	addi	r5,r5,-32640
    9bec:	1946703a 	and	r3,r3,r5
    9bf0:	0104303a 	nor	r2,zero,r4
    9bf4:	10c4703a 	and	r2,r2,r3
    9bf8:	10001c1e 	bne	r2,zero,9c6c <strcmp+0xb4>
    9bfc:	4013883a 	mov	r9,r8
    9c00:	2811883a 	mov	r8,r5
    9c04:	00000106 	br	9c0c <strcmp+0x54>
    9c08:	1800181e 	bne	r3,zero,9c6c <strcmp+0xb4>
    9c0c:	39c00104 	addi	r7,r7,4
    9c10:	39000017 	ldw	r4,0(r7)
    9c14:	31800104 	addi	r6,r6,4
    9c18:	31400017 	ldw	r5,0(r6)
    9c1c:	2245883a 	add	r2,r4,r9
    9c20:	1204703a 	and	r2,r2,r8
    9c24:	0106303a 	nor	r3,zero,r4
    9c28:	1886703a 	and	r3,r3,r2
    9c2c:	217ff626 	beq	r4,r5,9c08 <strcmp+0x50>
    9c30:	3809883a 	mov	r4,r7
    9c34:	300b883a 	mov	r5,r6
    9c38:	20c00007 	ldb	r3,0(r4)
    9c3c:	1800051e 	bne	r3,zero,9c54 <strcmp+0x9c>
    9c40:	00000606 	br	9c5c <strcmp+0xa4>
    9c44:	21000044 	addi	r4,r4,1
    9c48:	20c00007 	ldb	r3,0(r4)
    9c4c:	29400044 	addi	r5,r5,1
    9c50:	18000226 	beq	r3,zero,9c5c <strcmp+0xa4>
    9c54:	28800007 	ldb	r2,0(r5)
    9c58:	18bffa26 	beq	r3,r2,9c44 <strcmp+0x8c>
    9c5c:	20c00003 	ldbu	r3,0(r4)
    9c60:	28800003 	ldbu	r2,0(r5)
    9c64:	1885c83a 	sub	r2,r3,r2
    9c68:	f800283a 	ret
    9c6c:	0005883a 	mov	r2,zero
    9c70:	f800283a 	ret

00009c74 <strlen>:
    9c74:	208000cc 	andi	r2,r4,3
    9c78:	2011883a 	mov	r8,r4
    9c7c:	1000161e 	bne	r2,zero,9cd8 <strlen+0x64>
    9c80:	20c00017 	ldw	r3,0(r4)
    9c84:	017fbff4 	movhi	r5,65279
    9c88:	297fbfc4 	addi	r5,r5,-257
    9c8c:	01e02074 	movhi	r7,32897
    9c90:	39e02004 	addi	r7,r7,-32640
    9c94:	1945883a 	add	r2,r3,r5
    9c98:	11c4703a 	and	r2,r2,r7
    9c9c:	00c6303a 	nor	r3,zero,r3
    9ca0:	1886703a 	and	r3,r3,r2
    9ca4:	18000c1e 	bne	r3,zero,9cd8 <strlen+0x64>
    9ca8:	280d883a 	mov	r6,r5
    9cac:	380b883a 	mov	r5,r7
    9cb0:	21000104 	addi	r4,r4,4
    9cb4:	20800017 	ldw	r2,0(r4)
    9cb8:	1187883a 	add	r3,r2,r6
    9cbc:	1946703a 	and	r3,r3,r5
    9cc0:	0084303a 	nor	r2,zero,r2
    9cc4:	10c4703a 	and	r2,r2,r3
    9cc8:	103ff926 	beq	r2,zero,9cb0 <strlen+0x3c>
    9ccc:	20800007 	ldb	r2,0(r4)
    9cd0:	10000326 	beq	r2,zero,9ce0 <strlen+0x6c>
    9cd4:	21000044 	addi	r4,r4,1
    9cd8:	20800007 	ldb	r2,0(r4)
    9cdc:	103ffd1e 	bne	r2,zero,9cd4 <strlen+0x60>
    9ce0:	2205c83a 	sub	r2,r4,r8
    9ce4:	f800283a 	ret

00009ce8 <match>:
    9ce8:	21800017 	ldw	r6,0(r4)
    9cec:	01c01004 	movi	r7,64
    9cf0:	02001684 	movi	r8,90
    9cf4:	28800007 	ldb	r2,0(r5)
    9cf8:	29400044 	addi	r5,r5,1
    9cfc:	10000826 	beq	r2,zero,9d20 <match+0x38>
    9d00:	31800044 	addi	r6,r6,1
    9d04:	30c00007 	ldb	r3,0(r6)
    9d08:	38c0020e 	bge	r7,r3,9d14 <match+0x2c>
    9d0c:	40c00116 	blt	r8,r3,9d14 <match+0x2c>
    9d10:	18c00804 	addi	r3,r3,32
    9d14:	18bff726 	beq	r3,r2,9cf4 <match+0xc>
    9d18:	0005883a 	mov	r2,zero
    9d1c:	f800283a 	ret
    9d20:	30800044 	addi	r2,r6,1
    9d24:	20800015 	stw	r2,0(r4)
    9d28:	00800044 	movi	r2,1
    9d2c:	f800283a 	ret

00009d30 <_strtod_r>:
    9d30:	deffde04 	addi	sp,sp,-136
    9d34:	df002015 	stw	fp,128(sp)
    9d38:	dd401d15 	stw	r21,116(sp)
    9d3c:	dc401915 	stw	r17,100(sp)
    9d40:	dfc02115 	stw	ra,132(sp)
    9d44:	ddc01f15 	stw	r23,124(sp)
    9d48:	dd801e15 	stw	r22,120(sp)
    9d4c:	dd001c15 	stw	r20,112(sp)
    9d50:	dcc01b15 	stw	r19,108(sp)
    9d54:	dc801a15 	stw	r18,104(sp)
    9d58:	dc001815 	stw	r16,96(sp)
    9d5c:	2823883a 	mov	r17,r5
    9d60:	202b883a 	mov	r21,r4
    9d64:	d9801515 	stw	r6,84(sp)
    9d68:	d8000915 	stw	zero,36(sp)
    9d6c:	d8000a15 	stw	zero,40(sp)
    9d70:	d9400415 	stw	r5,16(sp)
    9d74:	df000904 	addi	fp,sp,36
    9d78:	da000417 	ldw	r8,16(sp)
    9d7c:	00800b44 	movi	r2,45
    9d80:	40c00003 	ldbu	r3,0(r8)
    9d84:	10c03536 	bltu	r2,r3,9e5c <_strtod_r+0x12c>
    9d88:	18c5883a 	add	r2,r3,r3
    9d8c:	1085883a 	add	r2,r2,r2
    9d90:	00c00074 	movhi	r3,1
    9d94:	18e76904 	addi	r3,r3,-25180
    9d98:	10c5883a 	add	r2,r2,r3
    9d9c:	11000017 	ldw	r4,0(r2)
    9da0:	2000683a 	jmp	r4
    9da4:	00009f98 	cmpnei	zero,zero,638
    9da8:	00009e5c 	xori	zero,zero,633
    9dac:	00009e5c 	xori	zero,zero,633
    9db0:	00009e5c 	xori	zero,zero,633
    9db4:	00009e5c 	xori	zero,zero,633
    9db8:	00009e5c 	xori	zero,zero,633
    9dbc:	00009e5c 	xori	zero,zero,633
    9dc0:	00009e5c 	xori	zero,zero,633
    9dc4:	00009e5c 	xori	zero,zero,633
    9dc8:	0000a2b0 	cmpltui	zero,zero,650
    9dcc:	0000a2b0 	cmpltui	zero,zero,650
    9dd0:	0000a2b0 	cmpltui	zero,zero,650
    9dd4:	0000a2b0 	cmpltui	zero,zero,650
    9dd8:	0000a2b0 	cmpltui	zero,zero,650
    9ddc:	00009e5c 	xori	zero,zero,633
    9de0:	00009e5c 	xori	zero,zero,633
    9de4:	00009e5c 	xori	zero,zero,633
    9de8:	00009e5c 	xori	zero,zero,633
    9dec:	00009e5c 	xori	zero,zero,633
    9df0:	00009e5c 	xori	zero,zero,633
    9df4:	00009e5c 	xori	zero,zero,633
    9df8:	00009e5c 	xori	zero,zero,633
    9dfc:	00009e5c 	xori	zero,zero,633
    9e00:	00009e5c 	xori	zero,zero,633
    9e04:	00009e5c 	xori	zero,zero,633
    9e08:	00009e5c 	xori	zero,zero,633
    9e0c:	00009e5c 	xori	zero,zero,633
    9e10:	00009e5c 	xori	zero,zero,633
    9e14:	00009e5c 	xori	zero,zero,633
    9e18:	00009e5c 	xori	zero,zero,633
    9e1c:	00009e5c 	xori	zero,zero,633
    9e20:	00009e5c 	xori	zero,zero,633
    9e24:	0000a2b0 	cmpltui	zero,zero,650
    9e28:	00009e5c 	xori	zero,zero,633
    9e2c:	00009e5c 	xori	zero,zero,633
    9e30:	00009e5c 	xori	zero,zero,633
    9e34:	00009e5c 	xori	zero,zero,633
    9e38:	00009e5c 	xori	zero,zero,633
    9e3c:	00009e5c 	xori	zero,zero,633
    9e40:	00009e5c 	xori	zero,zero,633
    9e44:	00009e5c 	xori	zero,zero,633
    9e48:	00009e5c 	xori	zero,zero,633
    9e4c:	00009e5c 	xori	zero,zero,633
    9e50:	0000a290 	cmplti	zero,zero,650
    9e54:	00009e5c 	xori	zero,zero,633
    9e58:	0000a2bc 	xorhi	zero,zero,650
    9e5c:	d8001115 	stw	zero,68(sp)
    9e60:	40c00007 	ldb	r3,0(r8)
    9e64:	00800c04 	movi	r2,48
    9e68:	1880d026 	beq	r3,r2,a1ac <_strtod_r+0x47c>
    9e6c:	001f883a 	mov	r15,zero
    9e70:	41000007 	ldb	r4,0(r8)
    9e74:	00c00bc4 	movi	r3,47
    9e78:	402d883a 	mov	r22,r8
    9e7c:	1903470e 	bge	r3,r4,ab9c <_strtod_r+0xe6c>
    9e80:	00800e44 	movi	r2,57
    9e84:	11034516 	blt	r2,r4,ab9c <_strtod_r+0xe6c>
    9e88:	180f883a 	mov	r7,r3
    9e8c:	1013883a 	mov	r9,r2
    9e90:	4007883a 	mov	r3,r8
    9e94:	000d883a 	mov	r6,zero
    9e98:	0029883a 	mov	r20,zero
    9e9c:	0021883a 	mov	r16,zero
    9ea0:	01400204 	movi	r5,8
    9ea4:	028003c4 	movi	r10,15
    9ea8:	29803116 	blt	r5,r6,9f70 <_strtod_r+0x240>
    9eac:	a08002a4 	muli	r2,r20,10
    9eb0:	1105883a 	add	r2,r2,r4
    9eb4:	153ff404 	addi	r20,r2,-48
    9eb8:	1a000044 	addi	r8,r3,1
    9ebc:	da000415 	stw	r8,16(sp)
    9ec0:	41000007 	ldb	r4,0(r8)
    9ec4:	31800044 	addi	r6,r6,1
    9ec8:	4007883a 	mov	r3,r8
    9ecc:	3900010e 	bge	r7,r4,9ed4 <_strtod_r+0x1a4>
    9ed0:	493ff50e 	bge	r9,r4,9ea8 <_strtod_r+0x178>
    9ed4:	00800b84 	movi	r2,46
    9ed8:	2080c126 	beq	r4,r2,a1e0 <_strtod_r+0x4b0>
    9edc:	3027883a 	mov	r19,r6
    9ee0:	0025883a 	mov	r18,zero
    9ee4:	0015883a 	mov	r10,zero
    9ee8:	000f883a 	mov	r7,zero
    9eec:	00801944 	movi	r2,101
    9ef0:	20802426 	beq	r4,r2,9f84 <_strtod_r+0x254>
    9ef4:	00801144 	movi	r2,69
    9ef8:	20802226 	beq	r4,r2,9f84 <_strtod_r+0x254>
    9efc:	9816c03a 	cmpne	r11,r19,zero
    9f00:	000b883a 	mov	r5,zero
    9f04:	5800631e 	bne	r11,zero,a094 <_strtod_r+0x364>
    9f08:	3800c126 	beq	r7,zero,a210 <_strtod_r+0x4e0>
    9f0c:	d8c01517 	ldw	r3,84(sp)
    9f10:	18000226 	beq	r3,zero,9f1c <_strtod_r+0x1ec>
    9f14:	d8800417 	ldw	r2,16(sp)
    9f18:	18800015 	stw	r2,0(r3)
    9f1c:	d9001117 	ldw	r4,68(sp)
    9f20:	2005003a 	cmpeq	r2,r4,zero
    9f24:	10001f1e 	bne	r2,zero,9fa4 <_strtod_r+0x274>
    9f28:	e0800017 	ldw	r2,0(fp)
    9f2c:	e0c00117 	ldw	r3,4(fp)
    9f30:	1009883a 	mov	r4,r2
    9f34:	1960003c 	xorhi	r5,r3,32768
    9f38:	2005883a 	mov	r2,r4
    9f3c:	2807883a 	mov	r3,r5
    9f40:	dfc02117 	ldw	ra,132(sp)
    9f44:	df002017 	ldw	fp,128(sp)
    9f48:	ddc01f17 	ldw	r23,124(sp)
    9f4c:	dd801e17 	ldw	r22,120(sp)
    9f50:	dd401d17 	ldw	r21,116(sp)
    9f54:	dd001c17 	ldw	r20,112(sp)
    9f58:	dcc01b17 	ldw	r19,108(sp)
    9f5c:	dc801a17 	ldw	r18,104(sp)
    9f60:	dc401917 	ldw	r17,100(sp)
    9f64:	dc001817 	ldw	r16,96(sp)
    9f68:	dec02204 	addi	sp,sp,136
    9f6c:	f800283a 	ret
    9f70:	51bfd116 	blt	r10,r6,9eb8 <_strtod_r+0x188>
    9f74:	808002a4 	muli	r2,r16,10
    9f78:	1105883a 	add	r2,r2,r4
    9f7c:	143ff404 	addi	r16,r2,-48
    9f80:	003fcd06 	br	9eb8 <_strtod_r+0x188>
    9f84:	9816c03a 	cmpne	r11,r19,zero
    9f88:	5800091e 	bne	r11,zero,9fb0 <_strtod_r+0x280>
    9f8c:	3800081e 	bne	r7,zero,9fb0 <_strtod_r+0x280>
    9f90:	7805003a 	cmpeq	r2,r15,zero
    9f94:	10000626 	beq	r2,zero,9fb0 <_strtod_r+0x280>
    9f98:	d8001115 	stw	zero,68(sp)
    9f9c:	dc400415 	stw	r17,16(sp)
    9fa0:	003fda06 	br	9f0c <_strtod_r+0x1dc>
    9fa4:	e1000017 	ldw	r4,0(fp)
    9fa8:	e1400117 	ldw	r5,4(fp)
    9fac:	003fe206 	br	9f38 <_strtod_r+0x208>
    9fb0:	dc400417 	ldw	r17,16(sp)
    9fb4:	00800ac4 	movi	r2,43
    9fb8:	8a000044 	addi	r8,r17,1
    9fbc:	da000415 	stw	r8,16(sp)
    9fc0:	88c00047 	ldb	r3,1(r17)
    9fc4:	4009883a 	mov	r4,r8
    9fc8:	1880bf26 	beq	r3,r2,a2c8 <_strtod_r+0x598>
    9fcc:	00800b44 	movi	r2,45
    9fd0:	18834526 	beq	r3,r2,ace8 <_strtod_r+0xfb8>
    9fd4:	1809883a 	mov	r4,r3
    9fd8:	20fff404 	addi	r3,r4,-48
    9fdc:	00800244 	movi	r2,9
    9fe0:	001d883a 	mov	r14,zero
    9fe4:	10c0bf36 	bltu	r2,r3,a2e4 <_strtod_r+0x5b4>
    9fe8:	00800c04 	movi	r2,48
    9fec:	2080061e 	bne	r4,r2,a008 <_strtod_r+0x2d8>
    9ff0:	da000417 	ldw	r8,16(sp)
    9ff4:	2005883a 	mov	r2,r4
    9ff8:	42000044 	addi	r8,r8,1
    9ffc:	da000415 	stw	r8,16(sp)
    a000:	41000007 	ldb	r4,0(r8)
    a004:	20bffc26 	beq	r4,r2,9ff8 <_strtod_r+0x2c8>
    a008:	20fff3c4 	addi	r3,r4,-49
    a00c:	00800204 	movi	r2,8
    a010:	10ffbb36 	bltu	r2,r3,9f00 <_strtod_r+0x1d0>
    a014:	da000417 	ldw	r8,16(sp)
    a018:	227ff404 	addi	r9,r4,-48
    a01c:	03000bc4 	movi	r12,47
    a020:	4007883a 	mov	r3,r8
    a024:	42000044 	addi	r8,r8,1
    a028:	da000415 	stw	r8,16(sp)
    a02c:	41000007 	ldb	r4,0(r8)
    a030:	61000d0e 	bge	r12,r4,a068 <_strtod_r+0x338>
    a034:	00800e44 	movi	r2,57
    a038:	11000b16 	blt	r2,r4,a068 <_strtod_r+0x338>
    a03c:	601b883a 	mov	r13,r12
    a040:	1019883a 	mov	r12,r2
    a044:	00000106 	br	a04c <_strtod_r+0x31c>
    a048:	61000716 	blt	r12,r4,a068 <_strtod_r+0x338>
    a04c:	488002a4 	muli	r2,r9,10
    a050:	42000044 	addi	r8,r8,1
    a054:	da000415 	stw	r8,16(sp)
    a058:	2085883a 	add	r2,r4,r2
    a05c:	41000007 	ldb	r4,0(r8)
    a060:	127ff404 	addi	r9,r2,-48
    a064:	693ff816 	blt	r13,r4,a048 <_strtod_r+0x318>
    a068:	40c7c83a 	sub	r3,r8,r3
    a06c:	00800204 	movi	r2,8
    a070:	10c2e416 	blt	r2,r3,ac04 <_strtod_r+0xed4>
    a074:	009387c4 	movi	r2,19999
    a078:	480b883a 	mov	r5,r9
    a07c:	1240010e 	bge	r2,r9,a084 <_strtod_r+0x354>
    a080:	100b883a 	mov	r5,r2
    a084:	7005003a 	cmpeq	r2,r14,zero
    a088:	103f9e1e 	bne	r2,zero,9f04 <_strtod_r+0x1d4>
    a08c:	014bc83a 	sub	r5,zero,r5
    a090:	583f9d26 	beq	r11,zero,9f08 <_strtod_r+0x1d8>
    a094:	2a8bc83a 	sub	r5,r5,r10
    a098:	d9400f15 	stw	r5,60(sp)
    a09c:	30007a1e 	bne	r6,zero,a288 <_strtod_r+0x558>
    a0a0:	dcc01215 	stw	r19,72(sp)
    a0a4:	00800404 	movi	r2,16
    a0a8:	9825883a 	mov	r18,r19
    a0ac:	14c0010e 	bge	r2,r19,a0b4 <_strtod_r+0x384>
    a0b0:	1025883a 	mov	r18,r2
    a0b4:	a009883a 	mov	r4,r20
    a0b8:	000ef140 	call	ef14 <__floatunsidf>
    a0bc:	100f883a 	mov	r7,r2
    a0c0:	e0800015 	stw	r2,0(fp)
    a0c4:	00800244 	movi	r2,9
    a0c8:	e0c00115 	stw	r3,4(fp)
    a0cc:	1480160e 	bge	r2,r18,a128 <_strtod_r+0x3f8>
    a0d0:	900c90fa 	slli	r6,r18,3
    a0d4:	01000074 	movhi	r4,1
    a0d8:	21097d04 	addi	r4,r4,9716
    a0dc:	180b883a 	mov	r5,r3
    a0e0:	310d883a 	add	r6,r6,r4
    a0e4:	30ffef17 	ldw	r3,-68(r6)
    a0e8:	30bfee17 	ldw	r2,-72(r6)
    a0ec:	3809883a 	mov	r4,r7
    a0f0:	180f883a 	mov	r7,r3
    a0f4:	100d883a 	mov	r6,r2
    a0f8:	000e3840 	call	e384 <__muldf3>
    a0fc:	8009883a 	mov	r4,r16
    a100:	1823883a 	mov	r17,r3
    a104:	1021883a 	mov	r16,r2
    a108:	000ef140 	call	ef14 <__floatunsidf>
    a10c:	880b883a 	mov	r5,r17
    a110:	180f883a 	mov	r7,r3
    a114:	8009883a 	mov	r4,r16
    a118:	100d883a 	mov	r6,r2
    a11c:	000e3100 	call	e310 <__adddf3>
    a120:	e0c00115 	stw	r3,4(fp)
    a124:	e0800015 	stw	r2,0(fp)
    a128:	010003c4 	movi	r4,15
    a12c:	24c09816 	blt	r4,r19,a390 <_strtod_r+0x660>
    a130:	d9800f17 	ldw	r6,60(sp)
    a134:	303f7526 	beq	r6,zero,9f0c <_strtod_r+0x1dc>
    a138:	0183be0e 	bge	zero,r6,b034 <_strtod_r+0x1304>
    a13c:	00800584 	movi	r2,22
    a140:	1182b20e 	bge	r2,r6,ac0c <_strtod_r+0xedc>
    a144:	d8c00f17 	ldw	r3,60(sp)
    a148:	24e3c83a 	sub	r17,r4,r19
    a14c:	88800584 	addi	r2,r17,22
    a150:	10c08f16 	blt	r2,r3,a390 <_strtod_r+0x660>
    a154:	880890fa 	slli	r4,r17,3
    a158:	04000074 	movhi	r16,1
    a15c:	84097d04 	addi	r16,r16,9716
    a160:	e0800017 	ldw	r2,0(fp)
    a164:	2409883a 	add	r4,r4,r16
    a168:	22000017 	ldw	r8,0(r4)
    a16c:	22400117 	ldw	r9,4(r4)
    a170:	e0c00117 	ldw	r3,4(fp)
    a174:	1009883a 	mov	r4,r2
    a178:	480f883a 	mov	r7,r9
    a17c:	180b883a 	mov	r5,r3
    a180:	400d883a 	mov	r6,r8
    a184:	000e3840 	call	e384 <__muldf3>
    a188:	d9000f17 	ldw	r4,60(sp)
    a18c:	180b883a 	mov	r5,r3
    a190:	2455c83a 	sub	r10,r4,r17
    a194:	501490fa 	slli	r10,r10,3
    a198:	1009883a 	mov	r4,r2
    a19c:	5415883a 	add	r10,r10,r16
    a1a0:	52000017 	ldw	r8,0(r10)
    a1a4:	52400117 	ldw	r9,4(r10)
    a1a8:	0002a206 	br	ac34 <_strtod_r+0xf04>
    a1ac:	40c00047 	ldb	r3,1(r8)
    a1b0:	00801604 	movi	r2,88
    a1b4:	18804e26 	beq	r3,r2,a2f0 <_strtod_r+0x5c0>
    a1b8:	00801e04 	movi	r2,120
    a1bc:	18804c26 	beq	r3,r2,a2f0 <_strtod_r+0x5c0>
    a1c0:	42000044 	addi	r8,r8,1
    a1c4:	da000415 	stw	r8,16(sp)
    a1c8:	40c00007 	ldb	r3,0(r8)
    a1cc:	00800c04 	movi	r2,48
    a1d0:	18bffb26 	beq	r3,r2,a1c0 <_strtod_r+0x490>
    a1d4:	183f4d26 	beq	r3,zero,9f0c <_strtod_r+0x1dc>
    a1d8:	03c00044 	movi	r15,1
    a1dc:	003f2406 	br	9e70 <_strtod_r+0x140>
    a1e0:	42000044 	addi	r8,r8,1
    a1e4:	da000415 	stw	r8,16(sp)
    a1e8:	19000047 	ldb	r4,1(r3)
    a1ec:	3000b726 	beq	r6,zero,a4cc <_strtod_r+0x79c>
    a1f0:	3027883a 	mov	r19,r6
    a1f4:	0015883a 	mov	r10,zero
    a1f8:	000f883a 	mov	r7,zero
    a1fc:	227ff404 	addi	r9,r4,-48
    a200:	00800244 	movi	r2,9
    a204:	1242592e 	bgeu	r2,r9,ab6c <_strtod_r+0xe3c>
    a208:	04800044 	movi	r18,1
    a20c:	003f3706 	br	9eec <_strtod_r+0x1bc>
    a210:	7804c03a 	cmpne	r2,r15,zero
    a214:	103f3d1e 	bne	r2,zero,9f0c <_strtod_r+0x1dc>
    a218:	9004c03a 	cmpne	r2,r18,zero
    a21c:	103f5e1e 	bne	r2,zero,9f98 <_strtod_r+0x268>
    a220:	00801384 	movi	r2,78
    a224:	2083a226 	beq	r4,r2,b0b0 <_strtod_r+0x1380>
    a228:	11039d16 	blt	r2,r4,b0a0 <_strtod_r+0x1370>
    a22c:	00801244 	movi	r2,73
    a230:	20bf591e 	bne	r4,r2,9f98 <_strtod_r+0x268>
    a234:	dc000404 	addi	r16,sp,16
    a238:	8009883a 	mov	r4,r16
    a23c:	01400074 	movhi	r5,1
    a240:	2949c604 	addi	r5,r5,10008
    a244:	0009ce80 	call	9ce8 <match>
    a248:	103f5326 	beq	r2,zero,9f98 <_strtod_r+0x268>
    a24c:	d8800417 	ldw	r2,16(sp)
    a250:	8009883a 	mov	r4,r16
    a254:	01400074 	movhi	r5,1
    a258:	2949c704 	addi	r5,r5,10012
    a25c:	123fffc4 	addi	r8,r2,-1
    a260:	da000415 	stw	r8,16(sp)
    a264:	0009ce80 	call	9ce8 <match>
    a268:	1000031e 	bne	r2,zero,a278 <_strtod_r+0x548>
    a26c:	d8800417 	ldw	r2,16(sp)
    a270:	12000044 	addi	r8,r2,1
    a274:	da000415 	stw	r8,16(sp)
    a278:	019ffc34 	movhi	r6,32752
    a27c:	e1800115 	stw	r6,4(fp)
    a280:	e0000015 	stw	zero,0(fp)
    a284:	003f2106 	br	9f0c <_strtod_r+0x1dc>
    a288:	d9801215 	stw	r6,72(sp)
    a28c:	003f8506 	br	a0a4 <_strtod_r+0x374>
    a290:	d8001115 	stw	zero,68(sp)
    a294:	42000044 	addi	r8,r8,1
    a298:	da000415 	stw	r8,16(sp)
    a29c:	40800007 	ldb	r2,0(r8)
    a2a0:	103eef1e 	bne	r2,zero,9e60 <_strtod_r+0x130>
    a2a4:	d8001115 	stw	zero,68(sp)
    a2a8:	dc400415 	stw	r17,16(sp)
    a2ac:	003f1706 	br	9f0c <_strtod_r+0x1dc>
    a2b0:	42000044 	addi	r8,r8,1
    a2b4:	da000415 	stw	r8,16(sp)
    a2b8:	003eaf06 	br	9d78 <_strtod_r+0x48>
    a2bc:	00800044 	movi	r2,1
    a2c0:	d8801115 	stw	r2,68(sp)
    a2c4:	003ff306 	br	a294 <_strtod_r+0x564>
    a2c8:	001d883a 	mov	r14,zero
    a2cc:	42000044 	addi	r8,r8,1
    a2d0:	da000415 	stw	r8,16(sp)
    a2d4:	21000047 	ldb	r4,1(r4)
    a2d8:	00800244 	movi	r2,9
    a2dc:	20fff404 	addi	r3,r4,-48
    a2e0:	10ff412e 	bgeu	r2,r3,9fe8 <_strtod_r+0x2b8>
    a2e4:	000b883a 	mov	r5,zero
    a2e8:	dc400415 	stw	r17,16(sp)
    a2ec:	003f0506 	br	9f04 <_strtod_r+0x1d4>
    a2f0:	d8c01117 	ldw	r3,68(sp)
    a2f4:	04800074 	movhi	r18,1
    a2f8:	948c1a04 	addi	r18,r18,12392
    a2fc:	d8800504 	addi	r2,sp,20
    a300:	a809883a 	mov	r4,r21
    a304:	d9400404 	addi	r5,sp,16
    a308:	900d883a 	mov	r6,r18
    a30c:	d9c00604 	addi	r7,sp,24
    a310:	d8800015 	stw	r2,0(sp)
    a314:	d8c00115 	stw	r3,4(sp)
    a318:	000c51c0 	call	c51c <__gethex>
    a31c:	140001cc 	andi	r16,r2,7
    a320:	1027883a 	mov	r19,r2
    a324:	803ef926 	beq	r16,zero,9f0c <_strtod_r+0x1dc>
    a328:	05000184 	movi	r20,6
    a32c:	853f1a26 	beq	r16,r20,9f98 <_strtod_r+0x268>
    a330:	d9800517 	ldw	r6,20(sp)
    a334:	30000626 	beq	r6,zero,a350 <_strtod_r+0x620>
    a338:	91400017 	ldw	r5,0(r18)
    a33c:	d9000d04 	addi	r4,sp,52
    a340:	00084c80 	call	84c8 <__copybits>
    a344:	d9400517 	ldw	r5,20(sp)
    a348:	a809883a 	mov	r4,r21
    a34c:	00080280 	call	8028 <_Bfree>
    a350:	d9400617 	ldw	r5,24(sp)
    a354:	a4024136 	bltu	r20,r16,ac5c <_strtod_r+0xf2c>
    a358:	8405883a 	add	r2,r16,r16
    a35c:	1085883a 	add	r2,r2,r2
    a360:	00c00074 	movhi	r3,1
    a364:	18e8dd04 	addi	r3,r3,-23692
    a368:	10c5883a 	add	r2,r2,r3
    a36c:	11000017 	ldw	r4,0(r2)
    a370:	2000683a 	jmp	r4
    a374:	0000ac9c 	xori	zero,zero,690
    a378:	0000aca8 	cmpgeui	zero,zero,690
    a37c:	0000ac4c 	andi	zero,zero,689
    a380:	0000ac74 	movhi	zero,689
    a384:	0000ac84 	movi	zero,690
    a388:	0000aca8 	cmpgeui	zero,zero,690
    a38c:	0000ac9c 	xori	zero,zero,690
    a390:	d8c00f17 	ldw	r3,60(sp)
    a394:	9c85c83a 	sub	r2,r19,r18
    a398:	18a1883a 	add	r16,r3,r2
    a39c:	0402d00e 	bge	zero,r16,aee0 <_strtod_r+0x11b0>
    a3a0:	814003cc 	andi	r5,r16,15
    a3a4:	28000f26 	beq	r5,zero,a3e4 <_strtod_r+0x6b4>
    a3a8:	280a90fa 	slli	r5,r5,3
    a3ac:	01000074 	movhi	r4,1
    a3b0:	21097d04 	addi	r4,r4,9716
    a3b4:	e0800017 	ldw	r2,0(fp)
    a3b8:	290b883a 	add	r5,r5,r4
    a3bc:	2a000017 	ldw	r8,0(r5)
    a3c0:	e0c00117 	ldw	r3,4(fp)
    a3c4:	2a400117 	ldw	r9,4(r5)
    a3c8:	1009883a 	mov	r4,r2
    a3cc:	180b883a 	mov	r5,r3
    a3d0:	480f883a 	mov	r7,r9
    a3d4:	400d883a 	mov	r6,r8
    a3d8:	000e3840 	call	e384 <__muldf3>
    a3dc:	e0c00115 	stw	r3,4(fp)
    a3e0:	e0800015 	stw	r2,0(fp)
    a3e4:	00bffc04 	movi	r2,-16
    a3e8:	808c703a 	and	r6,r16,r2
    a3ec:	30005b26 	beq	r6,zero,a55c <_strtod_r+0x82c>
    a3f0:	00804d04 	movi	r2,308
    a3f4:	1181fd16 	blt	r2,r6,abec <_strtod_r+0xebc>
    a3f8:	3021d13a 	srai	r16,r6,4
    a3fc:	00800044 	movi	r2,1
    a400:	1403610e 	bge	r2,r16,b188 <_strtod_r+0x1458>
    a404:	102f883a 	mov	r23,r2
    a408:	0025883a 	mov	r18,zero
    a40c:	04400074 	movhi	r17,1
    a410:	8c49af04 	addi	r17,r17,9916
    a414:	8080004c 	andi	r2,r16,1
    a418:	1005003a 	cmpeq	r2,r2,zero
    a41c:	1000091e 	bne	r2,zero,a444 <_strtod_r+0x714>
    a420:	e0800017 	ldw	r2,0(fp)
    a424:	e0c00117 	ldw	r3,4(fp)
    a428:	89800017 	ldw	r6,0(r17)
    a42c:	89c00117 	ldw	r7,4(r17)
    a430:	180b883a 	mov	r5,r3
    a434:	1009883a 	mov	r4,r2
    a438:	000e3840 	call	e384 <__muldf3>
    a43c:	e0c00115 	stw	r3,4(fp)
    a440:	e0800015 	stw	r2,0(fp)
    a444:	8021d07a 	srai	r16,r16,1
    a448:	94800044 	addi	r18,r18,1
    a44c:	8c400204 	addi	r17,r17,8
    a450:	bc3ff016 	blt	r23,r16,a414 <_strtod_r+0x6e4>
    a454:	900e90fa 	slli	r7,r18,3
    a458:	01800074 	movhi	r6,1
    a45c:	3189af04 	addi	r6,r6,9916
    a460:	e2000117 	ldw	r8,4(fp)
    a464:	398f883a 	add	r7,r7,r6
    a468:	38800017 	ldw	r2,0(r7)
    a46c:	38c00117 	ldw	r3,4(r7)
    a470:	e1000017 	ldw	r4,0(fp)
    a474:	01bf2c34 	movhi	r6,64688
    a478:	418d883a 	add	r6,r8,r6
    a47c:	300b883a 	mov	r5,r6
    a480:	180f883a 	mov	r7,r3
    a484:	100d883a 	mov	r6,r2
    a488:	000e3840 	call	e384 <__muldf3>
    a48c:	1009883a 	mov	r4,r2
    a490:	180b883a 	mov	r5,r3
    a494:	199ffc2c 	andhi	r6,r3,32752
    a498:	009f2834 	movhi	r2,31904
    a49c:	e1000015 	stw	r4,0(fp)
    a4a0:	e1400115 	stw	r5,4(fp)
    a4a4:	1181d136 	bltu	r2,r6,abec <_strtod_r+0xebc>
    a4a8:	009f2434 	movhi	r2,31888
    a4ac:	1183202e 	bgeu	r2,r6,b130 <_strtod_r+0x1400>
    a4b0:	d8001415 	stw	zero,80(sp)
    a4b4:	019ffc34 	movhi	r6,32752
    a4b8:	31bfffc4 	addi	r6,r6,-1
    a4bc:	01ffffc4 	movi	r7,-1
    a4c0:	e1800115 	stw	r6,4(fp)
    a4c4:	e1c00015 	stw	r7,0(fp)
    a4c8:	00002506 	br	a560 <_strtod_r+0x830>
    a4cc:	00800c04 	movi	r2,48
    a4d0:	2083151e 	bne	r4,r2,b128 <_strtod_r+0x13f8>
    a4d4:	2005883a 	mov	r2,r4
    a4d8:	000f883a 	mov	r7,zero
    a4dc:	42000044 	addi	r8,r8,1
    a4e0:	da000415 	stw	r8,16(sp)
    a4e4:	41000007 	ldb	r4,0(r8)
    a4e8:	39c00044 	addi	r7,r7,1
    a4ec:	20bffb26 	beq	r4,r2,a4dc <_strtod_r+0x7ac>
    a4f0:	20fff3c4 	addi	r3,r4,-49
    a4f4:	00800204 	movi	r2,8
    a4f8:	10c1b836 	bltu	r2,r3,abdc <_strtod_r+0xeac>
    a4fc:	dd800417 	ldw	r22,16(sp)
    a500:	3815883a 	mov	r10,r7
    a504:	227ff404 	addi	r9,r4,-48
    a508:	b011883a 	mov	r8,r22
    a50c:	0027883a 	mov	r19,zero
    a510:	01c00044 	movi	r7,1
    a514:	4801fe26 	beq	r9,zero,ad10 <_strtod_r+0xfe0>
    a518:	00800044 	movi	r2,1
    a51c:	51d5883a 	add	r10,r10,r7
    a520:	11c31f0e 	bge	r2,r7,b1a0 <_strtod_r+0x1470>
    a524:	1009883a 	mov	r4,r2
    a528:	9807883a 	mov	r3,r19
    a52c:	02c00204 	movi	r11,8
    a530:	03000404 	movi	r12,16
    a534:	00000306 	br	a544 <_strtod_r+0x814>
    a538:	a50002a4 	muli	r20,r20,10
    a53c:	21000044 	addi	r4,r4,1
    a540:	21c1eb26 	beq	r4,r7,acf0 <_strtod_r+0xfc0>
    a544:	18c00044 	addi	r3,r3,1
    a548:	18bfffc4 	addi	r2,r3,-1
    a54c:	58bffa0e 	bge	r11,r2,a538 <_strtod_r+0x808>
    a550:	60fffa16 	blt	r12,r3,a53c <_strtod_r+0x80c>
    a554:	840002a4 	muli	r16,r16,10
    a558:	003ff806 	br	a53c <_strtod_r+0x80c>
    a55c:	d8001415 	stw	zero,80(sp)
    a560:	d9801217 	ldw	r6,72(sp)
    a564:	a809883a 	mov	r4,r21
    a568:	b00b883a 	mov	r5,r22
    a56c:	980f883a 	mov	r7,r19
    a570:	dd000015 	stw	r20,0(sp)
    a574:	0008efc0 	call	8efc <__s2b>
    a578:	d9800f17 	ldw	r6,60(sp)
    a57c:	11000304 	addi	r4,r2,12
    a580:	d8801015 	stw	r2,64(sp)
    a584:	300c803a 	cmplt	r6,r6,zero
    a588:	d9001715 	stw	r4,92(sp)
    a58c:	d9801615 	stw	r6,88(sp)
    a590:	d8801017 	ldw	r2,64(sp)
    a594:	a809883a 	mov	r4,r21
    a598:	11400117 	ldw	r5,4(r2)
    a59c:	00085a80 	call	85a8 <_Balloc>
    a5a0:	d8c01017 	ldw	r3,64(sp)
    a5a4:	d9401717 	ldw	r5,92(sp)
    a5a8:	11000304 	addi	r4,r2,12
    a5ac:	19800417 	ldw	r6,16(r3)
    a5b0:	102f883a 	mov	r23,r2
    a5b4:	318d883a 	add	r6,r6,r6
    a5b8:	318d883a 	add	r6,r6,r6
    a5bc:	31800204 	addi	r6,r6,8
    a5c0:	0007e100 	call	7e10 <memcpy>
    a5c4:	e2000017 	ldw	r8,0(fp)
    a5c8:	e2400117 	ldw	r9,4(fp)
    a5cc:	d9800304 	addi	r6,sp,12
    a5d0:	400b883a 	mov	r5,r8
    a5d4:	a809883a 	mov	r4,r21
    a5d8:	d9c00204 	addi	r7,sp,8
    a5dc:	d9800015 	stw	r6,0(sp)
    a5e0:	480d883a 	mov	r6,r9
    a5e4:	00086640 	call	8664 <__d2b>
    a5e8:	a809883a 	mov	r4,r21
    a5ec:	01400044 	movi	r5,1
    a5f0:	d8800515 	stw	r2,20(sp)
    a5f4:	0008ca00 	call	8ca0 <__i2b>
    a5f8:	102d883a 	mov	r22,r2
    a5fc:	d8801617 	ldw	r2,88(sp)
    a600:	1001051e 	bne	r2,zero,aa18 <_strtod_r+0xce8>
    a604:	dd000f17 	ldw	r20,60(sp)
    a608:	000f883a 	mov	r7,zero
    a60c:	0013883a 	mov	r9,zero
    a610:	a011883a 	mov	r8,r20
    a614:	d8800217 	ldw	r2,8(sp)
    a618:	1000fd16 	blt	r2,zero,aa10 <_strtod_r+0xce0>
    a61c:	388f883a 	add	r7,r7,r2
    a620:	d9801417 	ldw	r6,80(sp)
    a624:	d9400317 	ldw	r5,12(sp)
    a628:	00ff0084 	movi	r3,-1022
    a62c:	1189c83a 	sub	r4,r2,r6
    a630:	2145883a 	add	r2,r4,r5
    a634:	10bfffc4 	addi	r2,r2,-1
    a638:	10c09f0e 	bge	r2,r3,a8b8 <_strtod_r+0xb88>
    a63c:	21810cc4 	addi	r6,r4,1075
    a640:	d8c01417 	ldw	r3,80(sp)
    a644:	4185883a 	add	r2,r8,r6
    a648:	39a1883a 	add	r16,r7,r6
    a64c:	18a5883a 	add	r18,r3,r2
    a650:	3807883a 	mov	r3,r7
    a654:	81c0010e 	bge	r16,r7,a65c <_strtod_r+0x92c>
    a658:	8007883a 	mov	r3,r16
    a65c:	9005883a 	mov	r2,r18
    a660:	1c80010e 	bge	r3,r18,a668 <_strtod_r+0x938>
    a664:	1805883a 	mov	r2,r3
    a668:	0080e70e 	bge	zero,r2,aa08 <_strtod_r+0xcd8>
    a66c:	38a7c83a 	sub	r19,r7,r2
    a670:	80a1c83a 	sub	r16,r16,r2
    a674:	90a5c83a 	sub	r18,r18,r2
    a678:	02400e0e 	bge	zero,r9,a6b4 <_strtod_r+0x984>
    a67c:	480d883a 	mov	r6,r9
    a680:	b00b883a 	mov	r5,r22
    a684:	a809883a 	mov	r4,r21
    a688:	0008ddc0 	call	8ddc <__pow5mult>
    a68c:	d9800517 	ldw	r6,20(sp)
    a690:	a809883a 	mov	r4,r21
    a694:	100b883a 	mov	r5,r2
    a698:	102d883a 	mov	r22,r2
    a69c:	0008ab80 	call	8ab8 <__multiply>
    a6a0:	d9400517 	ldw	r5,20(sp)
    a6a4:	1023883a 	mov	r17,r2
    a6a8:	a809883a 	mov	r4,r21
    a6ac:	00080280 	call	8028 <_Bfree>
    a6b0:	dc400515 	stw	r17,20(sp)
    a6b4:	0400050e 	bge	zero,r16,a6cc <_strtod_r+0x99c>
    a6b8:	d9400517 	ldw	r5,20(sp)
    a6bc:	800d883a 	mov	r6,r16
    a6c0:	a809883a 	mov	r4,r21
    a6c4:	000896c0 	call	896c <__lshift>
    a6c8:	d8800515 	stw	r2,20(sp)
    a6cc:	a000741e 	bne	r20,zero,a8a0 <_strtod_r+0xb70>
    a6d0:	0480050e 	bge	zero,r18,a6e8 <_strtod_r+0x9b8>
    a6d4:	b80b883a 	mov	r5,r23
    a6d8:	900d883a 	mov	r6,r18
    a6dc:	a809883a 	mov	r4,r21
    a6e0:	000896c0 	call	896c <__lshift>
    a6e4:	102f883a 	mov	r23,r2
    a6e8:	04c0050e 	bge	zero,r19,a700 <_strtod_r+0x9d0>
    a6ec:	b00b883a 	mov	r5,r22
    a6f0:	980d883a 	mov	r6,r19
    a6f4:	a809883a 	mov	r4,r21
    a6f8:	000896c0 	call	896c <__lshift>
    a6fc:	102d883a 	mov	r22,r2
    a700:	d9400517 	ldw	r5,20(sp)
    a704:	a809883a 	mov	r4,r21
    a708:	b80d883a 	mov	r6,r23
    a70c:	00087e00 	call	87e0 <__mdiff>
    a710:	11000317 	ldw	r4,12(r2)
    a714:	b00b883a 	mov	r5,r22
    a718:	10000315 	stw	zero,12(r2)
    a71c:	d9001315 	stw	r4,76(sp)
    a720:	1009883a 	mov	r4,r2
    a724:	1029883a 	mov	r20,r2
    a728:	00081840 	call	8184 <__mcmp>
    a72c:	10017c16 	blt	r2,zero,ad20 <_strtod_r+0xff0>
    a730:	1001af26 	beq	r2,zero,adf0 <_strtod_r+0x10c0>
    a734:	a009883a 	mov	r4,r20
    a738:	b00b883a 	mov	r5,r22
    a73c:	00083840 	call	8384 <__ratio>
    a740:	0011883a 	mov	r8,zero
    a744:	02500034 	movhi	r9,16384
    a748:	480f883a 	mov	r7,r9
    a74c:	1009883a 	mov	r4,r2
    a750:	180b883a 	mov	r5,r3
    a754:	400d883a 	mov	r6,r8
    a758:	1021883a 	mov	r16,r2
    a75c:	1823883a 	mov	r17,r3
    a760:	000ec480 	call	ec48 <__ledf2>
    a764:	00805716 	blt	zero,r2,a8c4 <_strtod_r+0xb94>
    a768:	d9801317 	ldw	r6,76(sp)
    a76c:	3025003a 	cmpeq	r18,r6,zero
    a770:	90008b1e 	bne	r18,zero,a9a0 <_strtod_r+0xc70>
    a774:	008ffc34 	movhi	r2,16368
    a778:	0021883a 	mov	r16,zero
    a77c:	1023883a 	mov	r17,r2
    a780:	d8000715 	stw	zero,28(sp)
    a784:	d8800815 	stw	r2,32(sp)
    a788:	e1c00117 	ldw	r7,4(fp)
    a78c:	009ff834 	movhi	r2,32736
    a790:	3cdffc2c 	andhi	r19,r7,32752
    a794:	98805e26 	beq	r19,r2,a910 <_strtod_r+0xbe0>
    a798:	d8801417 	ldw	r2,80(sp)
    a79c:	10001b26 	beq	r2,zero,a80c <_strtod_r+0xadc>
    a7a0:	0081a834 	movhi	r2,1696
    a7a4:	14c01936 	bltu	r2,r19,a80c <_strtod_r+0xadc>
    a7a8:	00bff034 	movhi	r2,65472
    a7ac:	00d07834 	movhi	r3,16864
    a7b0:	18ffffc4 	addi	r3,r3,-1
    a7b4:	180f883a 	mov	r7,r3
    a7b8:	8009883a 	mov	r4,r16
    a7bc:	880b883a 	mov	r5,r17
    a7c0:	100d883a 	mov	r6,r2
    a7c4:	000ec480 	call	ec48 <__ledf2>
    a7c8:	00800b16 	blt	zero,r2,a7f8 <_strtod_r+0xac8>
    a7cc:	880b883a 	mov	r5,r17
    a7d0:	8009883a 	mov	r4,r16
    a7d4:	000d1600 	call	d160 <__fixunsdfsi>
    a7d8:	1000df1e 	bne	r2,zero,ab58 <_strtod_r+0xe28>
    a7dc:	0021883a 	mov	r16,zero
    a7e0:	044ffc34 	movhi	r17,16368
    a7e4:	9000d91e 	bne	r18,zero,ab4c <_strtod_r+0xe1c>
    a7e8:	8005883a 	mov	r2,r16
    a7ec:	8807883a 	mov	r3,r17
    a7f0:	d8c00815 	stw	r3,32(sp)
    a7f4:	d8800715 	stw	r2,28(sp)
    a7f8:	d8800817 	ldw	r2,32(sp)
    a7fc:	00c1ac34 	movhi	r3,1712
    a800:	14c5c83a 	sub	r2,r2,r19
    a804:	10c5883a 	add	r2,r2,r3
    a808:	d8800815 	stw	r2,32(sp)
    a80c:	e0800017 	ldw	r2,0(fp)
    a810:	e0c00117 	ldw	r3,4(fp)
    a814:	1009883a 	mov	r4,r2
    a818:	180b883a 	mov	r5,r3
    a81c:	00081e40 	call	81e4 <__ulp>
    a820:	d9800717 	ldw	r6,28(sp)
    a824:	d9c00817 	ldw	r7,32(sp)
    a828:	180b883a 	mov	r5,r3
    a82c:	1009883a 	mov	r4,r2
    a830:	000e3840 	call	e384 <__muldf3>
    a834:	e2000017 	ldw	r8,0(fp)
    a838:	e2400117 	ldw	r9,4(fp)
    a83c:	180b883a 	mov	r5,r3
    a840:	1009883a 	mov	r4,r2
    a844:	480f883a 	mov	r7,r9
    a848:	400d883a 	mov	r6,r8
    a84c:	000e3100 	call	e310 <__adddf3>
    a850:	e0c00115 	stw	r3,4(fp)
    a854:	e0800015 	stw	r2,0(fp)
    a858:	d8c01417 	ldw	r3,80(sp)
    a85c:	e4800117 	ldw	r18,4(fp)
    a860:	1800021e 	bne	r3,zero,a86c <_strtod_r+0xb3c>
    a864:	909ffc2c 	andhi	r2,r18,32752
    a868:	98807b26 	beq	r19,r2,aa58 <_strtod_r+0xd28>
    a86c:	d9400517 	ldw	r5,20(sp)
    a870:	a809883a 	mov	r4,r21
    a874:	00080280 	call	8028 <_Bfree>
    a878:	a809883a 	mov	r4,r21
    a87c:	b80b883a 	mov	r5,r23
    a880:	00080280 	call	8028 <_Bfree>
    a884:	a809883a 	mov	r4,r21
    a888:	b00b883a 	mov	r5,r22
    a88c:	00080280 	call	8028 <_Bfree>
    a890:	a809883a 	mov	r4,r21
    a894:	a00b883a 	mov	r5,r20
    a898:	00080280 	call	8028 <_Bfree>
    a89c:	003f3c06 	br	a590 <_strtod_r+0x860>
    a8a0:	b80b883a 	mov	r5,r23
    a8a4:	a00d883a 	mov	r6,r20
    a8a8:	a809883a 	mov	r4,r21
    a8ac:	0008ddc0 	call	8ddc <__pow5mult>
    a8b0:	102f883a 	mov	r23,r2
    a8b4:	003f8606 	br	a6d0 <_strtod_r+0x9a0>
    a8b8:	00800d84 	movi	r2,54
    a8bc:	114dc83a 	sub	r6,r2,r5
    a8c0:	003f5f06 	br	a640 <_strtod_r+0x910>
    a8c4:	0005883a 	mov	r2,zero
    a8c8:	00cff834 	movhi	r3,16352
    a8cc:	880b883a 	mov	r5,r17
    a8d0:	8009883a 	mov	r4,r16
    a8d4:	100d883a 	mov	r6,r2
    a8d8:	180f883a 	mov	r7,r3
    a8dc:	000e3840 	call	e384 <__muldf3>
    a8e0:	d9801317 	ldw	r6,76(sp)
    a8e4:	1021883a 	mov	r16,r2
    a8e8:	1823883a 	mov	r17,r3
    a8ec:	3025003a 	cmpeq	r18,r6,zero
    a8f0:	90000126 	beq	r18,zero,a8f8 <_strtod_r+0xbc8>
    a8f4:	18e0003c 	xorhi	r3,r3,32768
    a8f8:	d8800715 	stw	r2,28(sp)
    a8fc:	d8c00815 	stw	r3,32(sp)
    a900:	e1c00117 	ldw	r7,4(fp)
    a904:	009ff834 	movhi	r2,32736
    a908:	3cdffc2c 	andhi	r19,r7,32752
    a90c:	98bfa21e 	bne	r19,r2,a798 <_strtod_r+0xa68>
    a910:	e1000017 	ldw	r4,0(fp)
    a914:	01bf2c34 	movhi	r6,64688
    a918:	398d883a 	add	r6,r7,r6
    a91c:	d9000b15 	stw	r4,44(sp)
    a920:	d9c00c15 	stw	r7,48(sp)
    a924:	300b883a 	mov	r5,r6
    a928:	e1800115 	stw	r6,4(fp)
    a92c:	00081e40 	call	81e4 <__ulp>
    a930:	d9800717 	ldw	r6,28(sp)
    a934:	d9c00817 	ldw	r7,32(sp)
    a938:	180b883a 	mov	r5,r3
    a93c:	1009883a 	mov	r4,r2
    a940:	000e3840 	call	e384 <__muldf3>
    a944:	e2000017 	ldw	r8,0(fp)
    a948:	e2400117 	ldw	r9,4(fp)
    a94c:	180b883a 	mov	r5,r3
    a950:	1009883a 	mov	r4,r2
    a954:	480f883a 	mov	r7,r9
    a958:	400d883a 	mov	r6,r8
    a95c:	000e3100 	call	e310 <__adddf3>
    a960:	1009883a 	mov	r4,r2
    a964:	180b883a 	mov	r5,r3
    a968:	009f2834 	movhi	r2,31904
    a96c:	10bfffc4 	addi	r2,r2,-1
    a970:	18dffc2c 	andhi	r3,r3,32752
    a974:	e1000015 	stw	r4,0(fp)
    a978:	e1400115 	stw	r5,4(fp)
    a97c:	10c06f2e 	bgeu	r2,r3,ab3c <_strtod_r+0xe0c>
    a980:	d8800c17 	ldw	r2,48(sp)
    a984:	011ffc34 	movhi	r4,32752
    a988:	213fffc4 	addi	r4,r4,-1
    a98c:	11007a26 	beq	r2,r4,ab78 <_strtod_r+0xe48>
    a990:	01ffffc4 	movi	r7,-1
    a994:	e1000115 	stw	r4,4(fp)
    a998:	e1c00015 	stw	r7,0(fp)
    a99c:	003fb306 	br	a86c <_strtod_r+0xb3c>
    a9a0:	e0c00017 	ldw	r3,0(fp)
    a9a4:	1800221e 	bne	r3,zero,aa30 <_strtod_r+0xd00>
    a9a8:	e0800117 	ldw	r2,4(fp)
    a9ac:	00c00434 	movhi	r3,16
    a9b0:	18ffffc4 	addi	r3,r3,-1
    a9b4:	10c4703a 	and	r2,r2,r3
    a9b8:	1000211e 	bne	r2,zero,aa40 <_strtod_r+0xd10>
    a9bc:	0005883a 	mov	r2,zero
    a9c0:	00cffc34 	movhi	r3,16368
    a9c4:	180f883a 	mov	r7,r3
    a9c8:	8009883a 	mov	r4,r16
    a9cc:	880b883a 	mov	r5,r17
    a9d0:	100d883a 	mov	r6,r2
    a9d4:	000ebc00 	call	ebc0 <__ltdf2>
    a9d8:	10013c16 	blt	r2,zero,aecc <_strtod_r+0x119c>
    a9dc:	0005883a 	mov	r2,zero
    a9e0:	00cff834 	movhi	r3,16352
    a9e4:	880b883a 	mov	r5,r17
    a9e8:	8009883a 	mov	r4,r16
    a9ec:	180f883a 	mov	r7,r3
    a9f0:	100d883a 	mov	r6,r2
    a9f4:	000e3840 	call	e384 <__muldf3>
    a9f8:	1823883a 	mov	r17,r3
    a9fc:	1021883a 	mov	r16,r2
    aa00:	18e0003c 	xorhi	r3,r3,32768
    aa04:	003fbc06 	br	a8f8 <_strtod_r+0xbc8>
    aa08:	3827883a 	mov	r19,r7
    aa0c:	003f1a06 	br	a678 <_strtod_r+0x948>
    aa10:	4091c83a 	sub	r8,r8,r2
    aa14:	003f0206 	br	a620 <_strtod_r+0x8f0>
    aa18:	d8c00f17 	ldw	r3,60(sp)
    aa1c:	0011883a 	mov	r8,zero
    aa20:	0029883a 	mov	r20,zero
    aa24:	00d3c83a 	sub	r9,zero,r3
    aa28:	480f883a 	mov	r7,r9
    aa2c:	003ef906 	br	a614 <_strtod_r+0x8e4>
    aa30:	00800044 	movi	r2,1
    aa34:	1880021e 	bne	r3,r2,aa40 <_strtod_r+0xd10>
    aa38:	e0800117 	ldw	r2,4(fp)
    aa3c:	1000a526 	beq	r2,zero,acd4 <_strtod_r+0xfa4>
    aa40:	00affc34 	movhi	r2,49136
    aa44:	0021883a 	mov	r16,zero
    aa48:	044ffc34 	movhi	r17,16368
    aa4c:	d8800815 	stw	r2,32(sp)
    aa50:	d8000715 	stw	zero,28(sp)
    aa54:	003f4c06 	br	a788 <_strtod_r+0xa58>
    aa58:	880b883a 	mov	r5,r17
    aa5c:	8009883a 	mov	r4,r16
    aa60:	000edc80 	call	edc8 <__fixdfsi>
    aa64:	1009883a 	mov	r4,r2
    aa68:	000ecd00 	call	ecd0 <__floatsidf>
    aa6c:	880b883a 	mov	r5,r17
    aa70:	8009883a 	mov	r4,r16
    aa74:	100d883a 	mov	r6,r2
    aa78:	180f883a 	mov	r7,r3
    aa7c:	000e2900 	call	e290 <__subdf3>
    aa80:	d9001317 	ldw	r4,76(sp)
    aa84:	100b883a 	mov	r5,r2
    aa88:	180d883a 	mov	r6,r3
    aa8c:	1021883a 	mov	r16,r2
    aa90:	1823883a 	mov	r17,r3
    aa94:	2000061e 	bne	r4,zero,aab0 <_strtod_r+0xd80>
    aa98:	e0800017 	ldw	r2,0(fp)
    aa9c:	1000041e 	bne	r2,zero,aab0 <_strtod_r+0xd80>
    aaa0:	00c00434 	movhi	r3,16
    aaa4:	18ffffc4 	addi	r3,r3,-1
    aaa8:	90c4703a 	and	r2,r18,r3
    aaac:	10004026 	beq	r2,zero,abb0 <_strtod_r+0xe80>
    aab0:	00a52834 	movhi	r2,38048
    aab4:	108d6544 	addi	r2,r2,13717
    aab8:	00cff834 	movhi	r3,16352
    aabc:	18ffffc4 	addi	r3,r3,-1
    aac0:	180f883a 	mov	r7,r3
    aac4:	8009883a 	mov	r4,r16
    aac8:	880b883a 	mov	r5,r17
    aacc:	100d883a 	mov	r6,r2
    aad0:	000ebc00 	call	ebc0 <__ltdf2>
    aad4:	10000916 	blt	r2,zero,aafc <_strtod_r+0xdcc>
    aad8:	008d6c34 	movhi	r2,13744
    aadc:	10b94d44 	addi	r2,r2,-6859
    aae0:	00cff834 	movhi	r3,16352
    aae4:	880b883a 	mov	r5,r17
    aae8:	180f883a 	mov	r7,r3
    aaec:	8009883a 	mov	r4,r16
    aaf0:	100d883a 	mov	r6,r2
    aaf4:	000eab00 	call	eab0 <__gtdf2>
    aaf8:	00bf5c0e 	bge	zero,r2,a86c <_strtod_r+0xb3c>
    aafc:	d9400517 	ldw	r5,20(sp)
    ab00:	a809883a 	mov	r4,r21
    ab04:	00080280 	call	8028 <_Bfree>
    ab08:	a809883a 	mov	r4,r21
    ab0c:	b80b883a 	mov	r5,r23
    ab10:	00080280 	call	8028 <_Bfree>
    ab14:	a809883a 	mov	r4,r21
    ab18:	b00b883a 	mov	r5,r22
    ab1c:	00080280 	call	8028 <_Bfree>
    ab20:	d9401017 	ldw	r5,64(sp)
    ab24:	a809883a 	mov	r4,r21
    ab28:	00080280 	call	8028 <_Bfree>
    ab2c:	a809883a 	mov	r4,r21
    ab30:	a00b883a 	mov	r5,r20
    ab34:	00080280 	call	8028 <_Bfree>
    ab38:	003cf406 	br	9f0c <_strtod_r+0x1dc>
    ab3c:	0080d434 	movhi	r2,848
    ab40:	288d883a 	add	r6,r5,r2
    ab44:	e1800115 	stw	r6,4(fp)
    ab48:	003f4306 	br	a858 <_strtod_r+0xb28>
    ab4c:	8005883a 	mov	r2,r16
    ab50:	88e0003c 	xorhi	r3,r17,32768
    ab54:	003f2606 	br	a7f0 <_strtod_r+0xac0>
    ab58:	1009883a 	mov	r4,r2
    ab5c:	000ef140 	call	ef14 <__floatunsidf>
    ab60:	1021883a 	mov	r16,r2
    ab64:	1823883a 	mov	r17,r3
    ab68:	003f1e06 	br	a7e4 <_strtod_r+0xab4>
    ab6c:	da000417 	ldw	r8,16(sp)
    ab70:	39c00044 	addi	r7,r7,1
    ab74:	003e6706 	br	a514 <_strtod_r+0x7e4>
    ab78:	d8c00b17 	ldw	r3,44(sp)
    ab7c:	00bfffc4 	movi	r2,-1
    ab80:	18bf831e 	bne	r3,r2,a990 <_strtod_r+0xc60>
    ab84:	00c00884 	movi	r3,34
    ab88:	a8c00015 	stw	r3,0(r21)
    ab8c:	009ffc34 	movhi	r2,32752
    ab90:	e0800115 	stw	r2,4(fp)
    ab94:	e0000015 	stw	zero,0(fp)
    ab98:	003fd806 	br	aafc <_strtod_r+0xdcc>
    ab9c:	4007883a 	mov	r3,r8
    aba0:	000d883a 	mov	r6,zero
    aba4:	0029883a 	mov	r20,zero
    aba8:	0021883a 	mov	r16,zero
    abac:	003cc906 	br	9ed4 <_strtod_r+0x1a4>
    abb0:	00a52834 	movhi	r2,38048
    abb4:	108d6544 	addi	r2,r2,13717
    abb8:	00cff434 	movhi	r3,16336
    abbc:	18ffffc4 	addi	r3,r3,-1
    abc0:	2809883a 	mov	r4,r5
    abc4:	180f883a 	mov	r7,r3
    abc8:	300b883a 	mov	r5,r6
    abcc:	100d883a 	mov	r6,r2
    abd0:	000ebc00 	call	ebc0 <__ltdf2>
    abd4:	103f250e 	bge	r2,zero,a86c <_strtod_r+0xb3c>
    abd8:	003fc806 	br	aafc <_strtod_r+0xdcc>
    abdc:	0027883a 	mov	r19,zero
    abe0:	04800044 	movi	r18,1
    abe4:	0015883a 	mov	r10,zero
    abe8:	003cc006 	br	9eec <_strtod_r+0x1bc>
    abec:	00800884 	movi	r2,34
    abf0:	a8800015 	stw	r2,0(r21)
    abf4:	019ffc34 	movhi	r6,32752
    abf8:	e1800115 	stw	r6,4(fp)
    abfc:	e0000015 	stw	zero,0(fp)
    ac00:	003cc206 	br	9f0c <_strtod_r+0x1dc>
    ac04:	015387c4 	movi	r5,19999
    ac08:	003d1e06 	br	a084 <_strtod_r+0x354>
    ac0c:	300a90fa 	slli	r5,r6,3
    ac10:	e0800017 	ldw	r2,0(fp)
    ac14:	e0c00117 	ldw	r3,4(fp)
    ac18:	01000074 	movhi	r4,1
    ac1c:	21097d04 	addi	r4,r4,9716
    ac20:	290b883a 	add	r5,r5,r4
    ac24:	2a000017 	ldw	r8,0(r5)
    ac28:	2a400117 	ldw	r9,4(r5)
    ac2c:	1009883a 	mov	r4,r2
    ac30:	180b883a 	mov	r5,r3
    ac34:	480f883a 	mov	r7,r9
    ac38:	400d883a 	mov	r6,r8
    ac3c:	000e3840 	call	e384 <__muldf3>
    ac40:	e0c00115 	stw	r3,4(fp)
    ac44:	e0800015 	stw	r2,0(fp)
    ac48:	003cb006 	br	9f0c <_strtod_r+0x1dc>
    ac4c:	d8800d17 	ldw	r2,52(sp)
    ac50:	e0800015 	stw	r2,0(fp)
    ac54:	d8c00e17 	ldw	r3,56(sp)
    ac58:	e0c00115 	stw	r3,4(fp)
    ac5c:	9880020c 	andi	r2,r19,8
    ac60:	103caa26 	beq	r2,zero,9f0c <_strtod_r+0x1dc>
    ac64:	e0800117 	ldw	r2,4(fp)
    ac68:	10a00034 	orhi	r2,r2,32768
    ac6c:	e0800115 	stw	r2,4(fp)
    ac70:	003ca606 	br	9f0c <_strtod_r+0x1dc>
    ac74:	009ffc34 	movhi	r2,32752
    ac78:	e0800115 	stw	r2,4(fp)
    ac7c:	e0000015 	stw	zero,0(fp)
    ac80:	003ff606 	br	ac5c <_strtod_r+0xf2c>
    ac84:	00a00034 	movhi	r2,32768
    ac88:	10bfffc4 	addi	r2,r2,-1
    ac8c:	00ffffc4 	movi	r3,-1
    ac90:	e0800115 	stw	r2,4(fp)
    ac94:	e0c00015 	stw	r3,0(fp)
    ac98:	003ff006 	br	ac5c <_strtod_r+0xf2c>
    ac9c:	e0000115 	stw	zero,4(fp)
    aca0:	e0000015 	stw	zero,0(fp)
    aca4:	003fed06 	br	ac5c <_strtod_r+0xf2c>
    aca8:	d8800e17 	ldw	r2,56(sp)
    acac:	29010cc4 	addi	r4,r5,1075
    acb0:	00fffc34 	movhi	r3,65520
    acb4:	18ffffc4 	addi	r3,r3,-1
    acb8:	2008953a 	slli	r4,r4,20
    acbc:	10c4703a 	and	r2,r2,r3
    acc0:	d8c00d17 	ldw	r3,52(sp)
    acc4:	1104b03a 	or	r2,r2,r4
    acc8:	e0800115 	stw	r2,4(fp)
    accc:	e0c00015 	stw	r3,0(fp)
    acd0:	003fe206 	br	ac5c <_strtod_r+0xf2c>
    acd4:	00800884 	movi	r2,34
    acd8:	a8800015 	stw	r2,0(r21)
    acdc:	e0000015 	stw	zero,0(fp)
    ace0:	e0000115 	stw	zero,4(fp)
    ace4:	003f8506 	br	aafc <_strtod_r+0xdcc>
    ace8:	03800044 	movi	r14,1
    acec:	003d7706 	br	a2cc <_strtod_r+0x59c>
    acf0:	99c5883a 	add	r2,r19,r7
    acf4:	11ffffc4 	addi	r7,r2,-1
    acf8:	00800204 	movi	r2,8
    acfc:	3cc00044 	addi	r19,r7,1
    ad00:	11c0df16 	blt	r2,r7,b080 <_strtod_r+0x1350>
    ad04:	a08002a4 	muli	r2,r20,10
    ad08:	000f883a 	mov	r7,zero
    ad0c:	1269883a 	add	r20,r2,r9
    ad10:	42000044 	addi	r8,r8,1
    ad14:	da000415 	stw	r8,16(sp)
    ad18:	41000007 	ldb	r4,0(r8)
    ad1c:	003d3706 	br	a1fc <_strtod_r+0x4cc>
    ad20:	d9801317 	ldw	r6,76(sp)
    ad24:	3000511e 	bne	r6,zero,ae6c <_strtod_r+0x113c>
    ad28:	e0800017 	ldw	r2,0(fp)
    ad2c:	1000d81e 	bne	r2,zero,b090 <_strtod_r+0x1360>
    ad30:	e0c00117 	ldw	r3,4(fp)
    ad34:	01000434 	movhi	r4,16
    ad38:	213fffc4 	addi	r4,r4,-1
    ad3c:	1904703a 	and	r2,r3,r4
    ad40:	1000b01e 	bne	r2,zero,b004 <_strtod_r+0x12d4>
    ad44:	18dffc2c 	andhi	r3,r3,32752
    ad48:	0081ac34 	movhi	r2,1712
    ad4c:	10c1102e 	bgeu	r2,r3,b190 <_strtod_r+0x1460>
    ad50:	a0800517 	ldw	r2,20(r20)
    ad54:	1000031e 	bne	r2,zero,ad64 <_strtod_r+0x1034>
    ad58:	a0c00417 	ldw	r3,16(r20)
    ad5c:	00800044 	movi	r2,1
    ad60:	10c0420e 	bge	r2,r3,ae6c <_strtod_r+0x113c>
    ad64:	a00b883a 	mov	r5,r20
    ad68:	a809883a 	mov	r4,r21
    ad6c:	01800044 	movi	r6,1
    ad70:	000896c0 	call	896c <__lshift>
    ad74:	1009883a 	mov	r4,r2
    ad78:	b00b883a 	mov	r5,r22
    ad7c:	1029883a 	mov	r20,r2
    ad80:	00081840 	call	8184 <__mcmp>
    ad84:	0080c20e 	bge	zero,r2,b090 <_strtod_r+0x1360>
    ad88:	e1800117 	ldw	r6,4(fp)
    ad8c:	d9001417 	ldw	r4,80(sp)
    ad90:	2013003a 	cmpeq	r9,r4,zero
    ad94:	4800ef1e 	bne	r9,zero,b154 <_strtod_r+0x1424>
    ad98:	30dffc2c 	andhi	r3,r6,32752
    ad9c:	0081ac34 	movhi	r2,1712
    ada0:	10c0ec36 	bltu	r2,r3,b154 <_strtod_r+0x1424>
    ada4:	0080dc34 	movhi	r2,880
    ada8:	10ffca2e 	bgeu	r2,r3,acd4 <_strtod_r+0xfa4>
    adac:	e0800017 	ldw	r2,0(fp)
    adb0:	e0c00117 	ldw	r3,4(fp)
    adb4:	020e5434 	movhi	r8,14672
    adb8:	000d883a 	mov	r6,zero
    adbc:	400f883a 	mov	r7,r8
    adc0:	180b883a 	mov	r5,r3
    adc4:	1009883a 	mov	r4,r2
    adc8:	da000c15 	stw	r8,48(sp)
    adcc:	d8000b15 	stw	zero,44(sp)
    add0:	000e3840 	call	e384 <__muldf3>
    add4:	e0800015 	stw	r2,0(fp)
    add8:	e0c00115 	stw	r3,4(fp)
    addc:	183f471e 	bne	r3,zero,aafc <_strtod_r+0xdcc>
    ade0:	103f461e 	bne	r2,zero,aafc <_strtod_r+0xdcc>
    ade4:	00800884 	movi	r2,34
    ade8:	a8800015 	stw	r2,0(r21)
    adec:	003f4306 	br	aafc <_strtod_r+0xdcc>
    adf0:	d8801317 	ldw	r2,76(sp)
    adf4:	1025003a 	cmpeq	r18,r2,zero
    adf8:	9000861e 	bne	r18,zero,b014 <_strtod_r+0x12e4>
    adfc:	e1400117 	ldw	r5,4(fp)
    ae00:	00c00434 	movhi	r3,16
    ae04:	18ffffc4 	addi	r3,r3,-1
    ae08:	28c4703a 	and	r2,r5,r3
    ae0c:	10c01b26 	beq	r2,r3,ae7c <_strtod_r+0x114c>
    ae10:	e1c00017 	ldw	r7,0(fp)
    ae14:	3880004c 	andi	r2,r7,1
    ae18:	1005003a 	cmpeq	r2,r2,zero
    ae1c:	1000791e 	bne	r2,zero,b004 <_strtod_r+0x12d4>
    ae20:	9000b126 	beq	r18,zero,b0e8 <_strtod_r+0x13b8>
    ae24:	e4400117 	ldw	r17,4(fp)
    ae28:	3809883a 	mov	r4,r7
    ae2c:	3821883a 	mov	r16,r7
    ae30:	880b883a 	mov	r5,r17
    ae34:	00081e40 	call	81e4 <__ulp>
    ae38:	180f883a 	mov	r7,r3
    ae3c:	880b883a 	mov	r5,r17
    ae40:	8009883a 	mov	r4,r16
    ae44:	100d883a 	mov	r6,r2
    ae48:	000e2900 	call	e290 <__subdf3>
    ae4c:	1009883a 	mov	r4,r2
    ae50:	000d883a 	mov	r6,zero
    ae54:	000f883a 	mov	r7,zero
    ae58:	180b883a 	mov	r5,r3
    ae5c:	e0800015 	stw	r2,0(fp)
    ae60:	e0c00115 	stw	r3,4(fp)
    ae64:	000ea280 	call	ea28 <__nedf2>
    ae68:	103f9a26 	beq	r2,zero,acd4 <_strtod_r+0xfa4>
    ae6c:	d9001417 	ldw	r4,80(sp)
    ae70:	2013003a 	cmpeq	r9,r4,zero
    ae74:	483f211e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    ae78:	003fcc06 	br	adac <_strtod_r+0x107c>
    ae7c:	d9001417 	ldw	r4,80(sp)
    ae80:	e1c00017 	ldw	r7,0(fp)
    ae84:	2013003a 	cmpeq	r9,r4,zero
    ae88:	4800bd1e 	bne	r9,zero,b180 <_strtod_r+0x1450>
    ae8c:	28dffc2c 	andhi	r3,r5,32752
    ae90:	0081a834 	movhi	r2,1696
    ae94:	10c0ba36 	bltu	r2,r3,b180 <_strtod_r+0x1450>
    ae98:	1804d53a 	srli	r2,r3,20
    ae9c:	00c01ac4 	movi	r3,107
    aea0:	013fffc4 	movi	r4,-1
    aea4:	1887c83a 	sub	r3,r3,r2
    aea8:	20c4983a 	sll	r2,r4,r3
    aeac:	11ffd91e 	bne	r2,r7,ae14 <_strtod_r+0x10e4>
    aeb0:	28dffc2c 	andhi	r3,r5,32752
    aeb4:	00800434 	movhi	r2,16
    aeb8:	188d883a 	add	r6,r3,r2
    aebc:	e1800115 	stw	r6,4(fp)
    aec0:	e0000015 	stw	zero,0(fp)
    aec4:	483f0d1e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    aec8:	003fb806 	br	adac <_strtod_r+0x107c>
    aecc:	0021883a 	mov	r16,zero
    aed0:	0005883a 	mov	r2,zero
    aed4:	044ff834 	movhi	r17,16352
    aed8:	00eff834 	movhi	r3,49120
    aedc:	003e8606 	br	a8f8 <_strtod_r+0xbc8>
    aee0:	803d9e26 	beq	r16,zero,a55c <_strtod_r+0x82c>
    aee4:	0421c83a 	sub	r16,zero,r16
    aee8:	814003cc 	andi	r5,r16,15
    aeec:	28000f26 	beq	r5,zero,af2c <_strtod_r+0x11fc>
    aef0:	280a90fa 	slli	r5,r5,3
    aef4:	01000074 	movhi	r4,1
    aef8:	21097d04 	addi	r4,r4,9716
    aefc:	e0800017 	ldw	r2,0(fp)
    af00:	290b883a 	add	r5,r5,r4
    af04:	2a000017 	ldw	r8,0(r5)
    af08:	e0c00117 	ldw	r3,4(fp)
    af0c:	2a400117 	ldw	r9,4(r5)
    af10:	1009883a 	mov	r4,r2
    af14:	180b883a 	mov	r5,r3
    af18:	480f883a 	mov	r7,r9
    af1c:	400d883a 	mov	r6,r8
    af20:	000e7480 	call	e748 <__divdf3>
    af24:	e0c00115 	stw	r3,4(fp)
    af28:	e0800015 	stw	r2,0(fp)
    af2c:	8021d13a 	srai	r16,r16,4
    af30:	803d8a26 	beq	r16,zero,a55c <_strtod_r+0x82c>
    af34:	008007c4 	movi	r2,31
    af38:	14002d16 	blt	r2,r16,aff0 <_strtod_r+0x12c0>
    af3c:	8080040c 	andi	r2,r16,16
    af40:	10009926 	beq	r2,zero,b1a8 <_strtod_r+0x1478>
    af44:	00801a84 	movi	r2,106
    af48:	d8801415 	stw	r2,80(sp)
    af4c:	0400110e 	bge	zero,r16,af94 <_strtod_r+0x1264>
    af50:	04400074 	movhi	r17,1
    af54:	8c49ca04 	addi	r17,r17,10024
    af58:	8080004c 	andi	r2,r16,1
    af5c:	1005003a 	cmpeq	r2,r2,zero
    af60:	1000091e 	bne	r2,zero,af88 <_strtod_r+0x1258>
    af64:	e0800017 	ldw	r2,0(fp)
    af68:	e0c00117 	ldw	r3,4(fp)
    af6c:	89800017 	ldw	r6,0(r17)
    af70:	89c00117 	ldw	r7,4(r17)
    af74:	180b883a 	mov	r5,r3
    af78:	1009883a 	mov	r4,r2
    af7c:	000e3840 	call	e384 <__muldf3>
    af80:	e0c00115 	stw	r3,4(fp)
    af84:	e0800015 	stw	r2,0(fp)
    af88:	8021d07a 	srai	r16,r16,1
    af8c:	8c400204 	addi	r17,r17,8
    af90:	043ff116 	blt	zero,r16,af58 <_strtod_r+0x1228>
    af94:	d8c01417 	ldw	r3,80(sp)
    af98:	18000d26 	beq	r3,zero,afd0 <_strtod_r+0x12a0>
    af9c:	e1000117 	ldw	r4,4(fp)
    afa0:	00c01ac4 	movi	r3,107
    afa4:	209ffc2c 	andhi	r2,r4,32752
    afa8:	1004d53a 	srli	r2,r2,20
    afac:	1887c83a 	sub	r3,r3,r2
    afb0:	00c0070e 	bge	zero,r3,afd0 <_strtod_r+0x12a0>
    afb4:	008007c4 	movi	r2,31
    afb8:	10c0900e 	bge	r2,r3,b1fc <_strtod_r+0x14cc>
    afbc:	00800d04 	movi	r2,52
    afc0:	e0000015 	stw	zero,0(fp)
    afc4:	10c0870e 	bge	r2,r3,b1e4 <_strtod_r+0x14b4>
    afc8:	0180dc34 	movhi	r6,880
    afcc:	e1800115 	stw	r6,4(fp)
    afd0:	e0800017 	ldw	r2,0(fp)
    afd4:	e0c00117 	ldw	r3,4(fp)
    afd8:	000d883a 	mov	r6,zero
    afdc:	000f883a 	mov	r7,zero
    afe0:	180b883a 	mov	r5,r3
    afe4:	1009883a 	mov	r4,r2
    afe8:	000ea280 	call	ea28 <__nedf2>
    afec:	103d5c1e 	bne	r2,zero,a560 <_strtod_r+0x830>
    aff0:	00800884 	movi	r2,34
    aff4:	a8800015 	stw	r2,0(r21)
    aff8:	e0000015 	stw	zero,0(fp)
    affc:	e0000115 	stw	zero,4(fp)
    b000:	003bc206 	br	9f0c <_strtod_r+0x1dc>
    b004:	d8801417 	ldw	r2,80(sp)
    b008:	1013003a 	cmpeq	r9,r2,zero
    b00c:	483ebb1e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    b010:	003f6606 	br	adac <_strtod_r+0x107c>
    b014:	e1800117 	ldw	r6,4(fp)
    b018:	00c00434 	movhi	r3,16
    b01c:	18ffffc4 	addi	r3,r3,-1
    b020:	30c4703a 	and	r2,r6,r3
    b024:	103f7a1e 	bne	r2,zero,ae10 <_strtod_r+0x10e0>
    b028:	e1c00017 	ldw	r7,0(fp)
    b02c:	383f791e 	bne	r7,zero,ae14 <_strtod_r+0x10e4>
    b030:	003f5606 	br	ad8c <_strtod_r+0x105c>
    b034:	d9800f17 	ldw	r6,60(sp)
    b038:	00bffa84 	movi	r2,-22
    b03c:	30bcd416 	blt	r6,r2,a390 <_strtod_r+0x660>
    b040:	317ffe24 	muli	r5,r6,-8
    b044:	01000074 	movhi	r4,1
    b048:	21097d04 	addi	r4,r4,9716
    b04c:	e0800017 	ldw	r2,0(fp)
    b050:	290b883a 	add	r5,r5,r4
    b054:	2a000017 	ldw	r8,0(r5)
    b058:	e0c00117 	ldw	r3,4(fp)
    b05c:	2a400117 	ldw	r9,4(r5)
    b060:	1009883a 	mov	r4,r2
    b064:	180b883a 	mov	r5,r3
    b068:	480f883a 	mov	r7,r9
    b06c:	400d883a 	mov	r6,r8
    b070:	000e7480 	call	e748 <__divdf3>
    b074:	e0c00115 	stw	r3,4(fp)
    b078:	e0800015 	stw	r2,0(fp)
    b07c:	003ba306 	br	9f0c <_strtod_r+0x1dc>
    b080:	00800404 	movi	r2,16
    b084:	14c02f0e 	bge	r2,r19,b144 <_strtod_r+0x1414>
    b088:	000f883a 	mov	r7,zero
    b08c:	003f2006 	br	ad10 <_strtod_r+0xfe0>
    b090:	d9801417 	ldw	r6,80(sp)
    b094:	3013003a 	cmpeq	r9,r6,zero
    b098:	483e981e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    b09c:	003f4306 	br	adac <_strtod_r+0x107c>
    b0a0:	00801a44 	movi	r2,105
    b0a4:	20bc6326 	beq	r4,r2,a234 <_strtod_r+0x504>
    b0a8:	00801b84 	movi	r2,110
    b0ac:	20bbba1e 	bne	r4,r2,9f98 <_strtod_r+0x268>
    b0b0:	dc000404 	addi	r16,sp,16
    b0b4:	8009883a 	mov	r4,r16
    b0b8:	01400074 	movhi	r5,1
    b0bc:	2949c904 	addi	r5,r5,10020
    b0c0:	0009ce80 	call	9ce8 <match>
    b0c4:	103bb426 	beq	r2,zero,9f98 <_strtod_r+0x268>
    b0c8:	d8800417 	ldw	r2,16(sp)
    b0cc:	00c00a04 	movi	r3,40
    b0d0:	11000007 	ldb	r4,0(r2)
    b0d4:	20c03626 	beq	r4,r3,b1b0 <_strtod_r+0x1480>
    b0d8:	01bffe34 	movhi	r6,65528
    b0dc:	e1800115 	stw	r6,4(fp)
    b0e0:	e0000015 	stw	zero,0(fp)
    b0e4:	003b8906 	br	9f0c <_strtod_r+0x1dc>
    b0e8:	e4400117 	ldw	r17,4(fp)
    b0ec:	3809883a 	mov	r4,r7
    b0f0:	3821883a 	mov	r16,r7
    b0f4:	880b883a 	mov	r5,r17
    b0f8:	00081e40 	call	81e4 <__ulp>
    b0fc:	100d883a 	mov	r6,r2
    b100:	880b883a 	mov	r5,r17
    b104:	180f883a 	mov	r7,r3
    b108:	8009883a 	mov	r4,r16
    b10c:	000e3100 	call	e310 <__adddf3>
    b110:	d9801417 	ldw	r6,80(sp)
    b114:	e0c00115 	stw	r3,4(fp)
    b118:	e0800015 	stw	r2,0(fp)
    b11c:	3013003a 	cmpeq	r9,r6,zero
    b120:	483e761e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    b124:	003f2106 	br	adac <_strtod_r+0x107c>
    b128:	000f883a 	mov	r7,zero
    b12c:	003cf006 	br	a4f0 <_strtod_r+0x7c0>
    b130:	0080d434 	movhi	r2,848
    b134:	188d883a 	add	r6,r3,r2
    b138:	d8001415 	stw	zero,80(sp)
    b13c:	e1800115 	stw	r6,4(fp)
    b140:	003d0706 	br	a560 <_strtod_r+0x830>
    b144:	808002a4 	muli	r2,r16,10
    b148:	000f883a 	mov	r7,zero
    b14c:	1261883a 	add	r16,r2,r9
    b150:	003eef06 	br	ad10 <_strtod_r+0xfe0>
    b154:	309ffc2c 	andhi	r2,r6,32752
    b158:	00fffc34 	movhi	r3,65520
    b15c:	10c5883a 	add	r2,r2,r3
    b160:	00c00434 	movhi	r3,16
    b164:	18ffffc4 	addi	r3,r3,-1
    b168:	10ccb03a 	or	r6,r2,r3
    b16c:	01ffffc4 	movi	r7,-1
    b170:	e1800115 	stw	r6,4(fp)
    b174:	e1c00015 	stw	r7,0(fp)
    b178:	483e601e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    b17c:	003f0b06 	br	adac <_strtod_r+0x107c>
    b180:	00bfffc4 	movi	r2,-1
    b184:	003f4906 	br	aeac <_strtod_r+0x117c>
    b188:	0025883a 	mov	r18,zero
    b18c:	003cb106 	br	a454 <_strtod_r+0x724>
    b190:	d8c01417 	ldw	r3,80(sp)
    b194:	1813003a 	cmpeq	r9,r3,zero
    b198:	483e581e 	bne	r9,zero,aafc <_strtod_r+0xdcc>
    b19c:	003f0306 	br	adac <_strtod_r+0x107c>
    b1a0:	980f883a 	mov	r7,r19
    b1a4:	003ed406 	br	acf8 <_strtod_r+0xfc8>
    b1a8:	d8001415 	stw	zero,80(sp)
    b1ac:	003f6706 	br	af4c <_strtod_r+0x121c>
    b1b0:	8009883a 	mov	r4,r16
    b1b4:	01400074 	movhi	r5,1
    b1b8:	294c1504 	addi	r5,r5,12372
    b1bc:	d9800d04 	addi	r6,sp,52
    b1c0:	000cd200 	call	cd20 <__hexnan>
    b1c4:	00c00144 	movi	r3,5
    b1c8:	10ffc31e 	bne	r2,r3,b0d8 <_strtod_r+0x13a8>
    b1cc:	d8800e17 	ldw	r2,56(sp)
    b1d0:	d9c00d17 	ldw	r7,52(sp)
    b1d4:	119ffc34 	orhi	r6,r2,32752
    b1d8:	e1800115 	stw	r6,4(fp)
    b1dc:	e1c00015 	stw	r7,0(fp)
    b1e0:	003b4a06 	br	9f0c <_strtod_r+0x1dc>
    b1e4:	18fff804 	addi	r3,r3,-32
    b1e8:	00bfffc4 	movi	r2,-1
    b1ec:	10c4983a 	sll	r2,r2,r3
    b1f0:	208c703a 	and	r6,r4,r2
    b1f4:	e1800115 	stw	r6,4(fp)
    b1f8:	003f7506 	br	afd0 <_strtod_r+0x12a0>
    b1fc:	00bfffc4 	movi	r2,-1
    b200:	10c4983a 	sll	r2,r2,r3
    b204:	e0c00017 	ldw	r3,0(fp)
    b208:	188e703a 	and	r7,r3,r2
    b20c:	e1c00015 	stw	r7,0(fp)
    b210:	003f6f06 	br	afd0 <_strtod_r+0x12a0>

0000b214 <strtof>:
    b214:	defffa04 	addi	sp,sp,-24
    b218:	dd000415 	stw	r20,16(sp)
    b21c:	05000074 	movhi	r20,1
    b220:	a5110c04 	addi	r20,r20,17456
    b224:	2007883a 	mov	r3,r4
    b228:	a1000017 	ldw	r4,0(r20)
    b22c:	280d883a 	mov	r6,r5
    b230:	180b883a 	mov	r5,r3
    b234:	dfc00515 	stw	ra,20(sp)
    b238:	dcc00315 	stw	r19,12(sp)
    b23c:	dc800215 	stw	r18,8(sp)
    b240:	dc400115 	stw	r17,4(sp)
    b244:	dc000015 	stw	r16,0(sp)
    b248:	0009d300 	call	9d30 <_strtod_r>
    b24c:	180b883a 	mov	r5,r3
    b250:	1009883a 	mov	r4,r2
    b254:	1823883a 	mov	r17,r3
    b258:	1021883a 	mov	r16,r2
    b25c:	000eea00 	call	eea0 <__truncdfsf2>
    b260:	1009883a 	mov	r4,r2
    b264:	000b883a 	mov	r5,zero
    b268:	1025883a 	mov	r18,r2
    b26c:	1027883a 	mov	r19,r2
    b270:	000dd900 	call	dd90 <__nesf2>
    b274:	000d883a 	mov	r6,zero
    b278:	000f883a 	mov	r7,zero
    b27c:	8009883a 	mov	r4,r16
    b280:	880b883a 	mov	r5,r17
    b284:	10000e1e 	bne	r2,zero,b2c0 <strtof+0xac>
    b288:	000ea280 	call	ea28 <__nedf2>
    b28c:	10000c26 	beq	r2,zero,b2c0 <strtof+0xac>
    b290:	a0c00017 	ldw	r3,0(r20)
    b294:	00800884 	movi	r2,34
    b298:	18800015 	stw	r2,0(r3)
    b29c:	9805883a 	mov	r2,r19
    b2a0:	dfc00517 	ldw	ra,20(sp)
    b2a4:	dd000417 	ldw	r20,16(sp)
    b2a8:	dcc00317 	ldw	r19,12(sp)
    b2ac:	dc800217 	ldw	r18,8(sp)
    b2b0:	dc400117 	ldw	r17,4(sp)
    b2b4:	dc000017 	ldw	r16,0(sp)
    b2b8:	dec00604 	addi	sp,sp,24
    b2bc:	f800283a 	ret
    b2c0:	9009883a 	mov	r4,r18
    b2c4:	015fe034 	movhi	r5,32640
    b2c8:	297fffc4 	addi	r5,r5,-1
    b2cc:	000de080 	call	de08 <__gtsf2>
    b2d0:	00ffffc4 	movi	r3,-1
    b2d4:	011ffc34 	movhi	r4,32752
    b2d8:	213fffc4 	addi	r4,r4,-1
    b2dc:	200f883a 	mov	r7,r4
    b2e0:	180d883a 	mov	r6,r3
    b2e4:	8009883a 	mov	r4,r16
    b2e8:	880b883a 	mov	r5,r17
    b2ec:	00800f16 	blt	zero,r2,b32c <strtof+0x118>
    b2f0:	9009883a 	mov	r4,r18
    b2f4:	017fe034 	movhi	r5,65408
    b2f8:	297fffc4 	addi	r5,r5,-1
    b2fc:	000083c0 	call	83c <__ltsf2>
    b300:	023fffc4 	movi	r8,-1
    b304:	027ffc34 	movhi	r9,65520
    b308:	4a7fffc4 	addi	r9,r9,-1
    b30c:	880b883a 	mov	r5,r17
    b310:	480f883a 	mov	r7,r9
    b314:	8009883a 	mov	r4,r16
    b318:	400d883a 	mov	r6,r8
    b31c:	103fdf0e 	bge	r2,zero,b29c <strtof+0x88>
    b320:	000ebc00 	call	ebc0 <__ltdf2>
    b324:	103fda0e 	bge	r2,zero,b290 <strtof+0x7c>
    b328:	003fdc06 	br	b29c <strtof+0x88>
    b32c:	000eab00 	call	eab0 <__gtdf2>
    b330:	00bfd70e 	bge	zero,r2,b290 <strtof+0x7c>
    b334:	003fee06 	br	b2f0 <strtof+0xdc>

0000b338 <strtod>:
    b338:	01800074 	movhi	r6,1
    b33c:	31910c04 	addi	r6,r6,17456
    b340:	2007883a 	mov	r3,r4
    b344:	31000017 	ldw	r4,0(r6)
    b348:	280d883a 	mov	r6,r5
    b34c:	180b883a 	mov	r5,r3
    b350:	0009d301 	jmpi	9d30 <_strtod_r>

0000b354 <_strtol_r>:
    b354:	defff304 	addi	sp,sp,-52
    b358:	00800074 	movhi	r2,1
    b35c:	10910b04 	addi	r2,r2,17452
    b360:	dcc00615 	stw	r19,24(sp)
    b364:	14c00017 	ldw	r19,0(r2)
    b368:	ddc00a15 	stw	r23,40(sp)
    b36c:	dc000315 	stw	r16,12(sp)
    b370:	dfc00c15 	stw	ra,48(sp)
    b374:	df000b15 	stw	fp,44(sp)
    b378:	dd800915 	stw	r22,36(sp)
    b37c:	dd400815 	stw	r21,32(sp)
    b380:	dd000715 	stw	r20,28(sp)
    b384:	dc800515 	stw	r18,20(sp)
    b388:	dc400415 	stw	r17,16(sp)
    b38c:	282f883a 	mov	r23,r5
    b390:	d9000015 	stw	r4,0(sp)
    b394:	d9800115 	stw	r6,4(sp)
    b398:	2821883a 	mov	r16,r5
    b39c:	84400007 	ldb	r17,0(r16)
    b3a0:	84000044 	addi	r16,r16,1
    b3a4:	9c47883a 	add	r3,r19,r17
    b3a8:	18800003 	ldbu	r2,0(r3)
    b3ac:	1080020c 	andi	r2,r2,8
    b3b0:	103ffa1e 	bne	r2,zero,b39c <_strtol_r+0x48>
    b3b4:	00800b44 	movi	r2,45
    b3b8:	88805c26 	beq	r17,r2,b52c <_strtol_r+0x1d8>
    b3bc:	00800ac4 	movi	r2,43
    b3c0:	88805726 	beq	r17,r2,b520 <_strtol_r+0x1cc>
    b3c4:	0039883a 	mov	fp,zero
    b3c8:	3807003a 	cmpeq	r3,r7,zero
    b3cc:	1800431e 	bne	r3,zero,b4dc <_strtol_r+0x188>
    b3d0:	00800404 	movi	r2,16
    b3d4:	38804126 	beq	r7,r2,b4dc <_strtol_r+0x188>
    b3d8:	3829883a 	mov	r20,r7
    b3dc:	e02cc03a 	cmpne	r22,fp,zero
    b3e0:	b0004b1e 	bne	r22,zero,b510 <_strtol_r+0x1bc>
    b3e4:	04a00034 	movhi	r18,32768
    b3e8:	94bfffc4 	addi	r18,r18,-1
    b3ec:	9009883a 	mov	r4,r18
    b3f0:	a00b883a 	mov	r5,r20
    b3f4:	d9c00215 	stw	r7,8(sp)
    b3f8:	000f1ec0 	call	f1ec <__umodsi3>
    b3fc:	9009883a 	mov	r4,r18
    b400:	a00b883a 	mov	r5,r20
    b404:	102b883a 	mov	r21,r2
    b408:	000f1e40 	call	f1e4 <__udivsi3>
    b40c:	1011883a 	mov	r8,r2
    b410:	9c45883a 	add	r2,r19,r17
    b414:	11000003 	ldbu	r4,0(r2)
    b418:	000b883a 	mov	r5,zero
    b41c:	000d883a 	mov	r6,zero
    b420:	20c0010c 	andi	r3,r4,4
    b424:	d9c00217 	ldw	r7,8(sp)
    b428:	18000e26 	beq	r3,zero,b464 <_strtol_r+0x110>
    b42c:	88fff404 	addi	r3,r17,-48
    b430:	19c0140e 	bge	r3,r7,b484 <_strtol_r+0x130>
    b434:	30003116 	blt	r6,zero,b4fc <_strtol_r+0x1a8>
    b438:	41403036 	bltu	r8,r5,b4fc <_strtol_r+0x1a8>
    b43c:	2a002e26 	beq	r5,r8,b4f8 <_strtol_r+0x1a4>
    b440:	2d05383a 	mul	r2,r5,r20
    b444:	01800044 	movi	r6,1
    b448:	10cb883a 	add	r5,r2,r3
    b44c:	84400007 	ldb	r17,0(r16)
    b450:	84000044 	addi	r16,r16,1
    b454:	9c45883a 	add	r2,r19,r17
    b458:	11000003 	ldbu	r4,0(r2)
    b45c:	20c0010c 	andi	r3,r4,4
    b460:	183ff21e 	bne	r3,zero,b42c <_strtol_r+0xd8>
    b464:	208000cc 	andi	r2,r4,3
    b468:	10000626 	beq	r2,zero,b484 <_strtol_r+0x130>
    b46c:	2080004c 	andi	r2,r4,1
    b470:	1005003a 	cmpeq	r2,r2,zero
    b474:	1000231e 	bne	r2,zero,b504 <_strtol_r+0x1b0>
    b478:	00800dc4 	movi	r2,55
    b47c:	8887c83a 	sub	r3,r17,r2
    b480:	19ffec16 	blt	r3,r7,b434 <_strtol_r+0xe0>
    b484:	30002d16 	blt	r6,zero,b53c <_strtol_r+0x1e8>
    b488:	b000231e 	bne	r22,zero,b518 <_strtol_r+0x1c4>
    b48c:	2807883a 	mov	r3,r5
    b490:	d8800117 	ldw	r2,4(sp)
    b494:	10000426 	beq	r2,zero,b4a8 <_strtol_r+0x154>
    b498:	30000126 	beq	r6,zero,b4a0 <_strtol_r+0x14c>
    b49c:	85ffffc4 	addi	r23,r16,-1
    b4a0:	d9000117 	ldw	r4,4(sp)
    b4a4:	25c00015 	stw	r23,0(r4)
    b4a8:	1805883a 	mov	r2,r3
    b4ac:	dfc00c17 	ldw	ra,48(sp)
    b4b0:	df000b17 	ldw	fp,44(sp)
    b4b4:	ddc00a17 	ldw	r23,40(sp)
    b4b8:	dd800917 	ldw	r22,36(sp)
    b4bc:	dd400817 	ldw	r21,32(sp)
    b4c0:	dd000717 	ldw	r20,28(sp)
    b4c4:	dcc00617 	ldw	r19,24(sp)
    b4c8:	dc800517 	ldw	r18,20(sp)
    b4cc:	dc400417 	ldw	r17,16(sp)
    b4d0:	dc000317 	ldw	r16,12(sp)
    b4d4:	dec00d04 	addi	sp,sp,52
    b4d8:	f800283a 	ret
    b4dc:	00800c04 	movi	r2,48
    b4e0:	88801d26 	beq	r17,r2,b558 <_strtol_r+0x204>
    b4e4:	183fbc26 	beq	r3,zero,b3d8 <_strtol_r+0x84>
    b4e8:	00800c04 	movi	r2,48
    b4ec:	88802726 	beq	r17,r2,b58c <_strtol_r+0x238>
    b4f0:	01c00284 	movi	r7,10
    b4f4:	003fb806 	br	b3d8 <_strtol_r+0x84>
    b4f8:	a8ffd10e 	bge	r21,r3,b440 <_strtol_r+0xec>
    b4fc:	01bfffc4 	movi	r6,-1
    b500:	003fd206 	br	b44c <_strtol_r+0xf8>
    b504:	008015c4 	movi	r2,87
    b508:	8887c83a 	sub	r3,r17,r2
    b50c:	003fdc06 	br	b480 <_strtol_r+0x12c>
    b510:	04a00034 	movhi	r18,32768
    b514:	003fb506 	br	b3ec <_strtol_r+0x98>
    b518:	0147c83a 	sub	r3,zero,r5
    b51c:	003fdc06 	br	b490 <_strtol_r+0x13c>
    b520:	84400007 	ldb	r17,0(r16)
    b524:	84000044 	addi	r16,r16,1
    b528:	003fa606 	br	b3c4 <_strtol_r+0x70>
    b52c:	84400007 	ldb	r17,0(r16)
    b530:	07000044 	movi	fp,1
    b534:	84000044 	addi	r16,r16,1
    b538:	003fa306 	br	b3c8 <_strtol_r+0x74>
    b53c:	e005003a 	cmpeq	r2,fp,zero
    b540:	10000f1e 	bne	r2,zero,b580 <_strtol_r+0x22c>
    b544:	00e00034 	movhi	r3,32768
    b548:	d9000017 	ldw	r4,0(sp)
    b54c:	00800884 	movi	r2,34
    b550:	20800015 	stw	r2,0(r4)
    b554:	003fce06 	br	b490 <_strtol_r+0x13c>
    b558:	81000007 	ldb	r4,0(r16)
    b55c:	00801e04 	movi	r2,120
    b560:	20800226 	beq	r4,r2,b56c <_strtol_r+0x218>
    b564:	00801604 	movi	r2,88
    b568:	20bfde1e 	bne	r4,r2,b4e4 <_strtol_r+0x190>
    b56c:	84400047 	ldb	r17,1(r16)
    b570:	01c00404 	movi	r7,16
    b574:	84000084 	addi	r16,r16,2
    b578:	3829883a 	mov	r20,r7
    b57c:	003f9706 	br	b3dc <_strtol_r+0x88>
    b580:	00e00034 	movhi	r3,32768
    b584:	18ffffc4 	addi	r3,r3,-1
    b588:	003fef06 	br	b548 <_strtol_r+0x1f4>
    b58c:	01c00204 	movi	r7,8
    b590:	3829883a 	mov	r20,r7
    b594:	003f9106 	br	b3dc <_strtol_r+0x88>

0000b598 <strtol>:
    b598:	00800074 	movhi	r2,1
    b59c:	10910c04 	addi	r2,r2,17456
    b5a0:	2013883a 	mov	r9,r4
    b5a4:	11000017 	ldw	r4,0(r2)
    b5a8:	2805883a 	mov	r2,r5
    b5ac:	300f883a 	mov	r7,r6
    b5b0:	480b883a 	mov	r5,r9
    b5b4:	100d883a 	mov	r6,r2
    b5b8:	000b3541 	jmpi	b354 <_strtol_r>

0000b5bc <_strtoll_r>:
    b5bc:	defff004 	addi	sp,sp,-64
    b5c0:	00800074 	movhi	r2,1
    b5c4:	10910b04 	addi	r2,r2,17452
    b5c8:	df000e15 	stw	fp,56(sp)
    b5cc:	17000017 	ldw	fp,0(r2)
    b5d0:	ddc00d15 	stw	r23,52(sp)
    b5d4:	dd000a15 	stw	r20,40(sp)
    b5d8:	dfc00f15 	stw	ra,60(sp)
    b5dc:	dd800c15 	stw	r22,48(sp)
    b5e0:	dd400b15 	stw	r21,44(sp)
    b5e4:	dcc00915 	stw	r19,36(sp)
    b5e8:	dc800815 	stw	r18,32(sp)
    b5ec:	dc400715 	stw	r17,28(sp)
    b5f0:	dc000615 	stw	r16,24(sp)
    b5f4:	d9400315 	stw	r5,12(sp)
    b5f8:	d9000215 	stw	r4,8(sp)
    b5fc:	d9800415 	stw	r6,16(sp)
    b600:	382f883a 	mov	r23,r7
    b604:	2829883a 	mov	r20,r5
    b608:	a4c00007 	ldb	r19,0(r20)
    b60c:	a5000044 	addi	r20,r20,1
    b610:	e4c7883a 	add	r3,fp,r19
    b614:	18800003 	ldbu	r2,0(r3)
    b618:	1080020c 	andi	r2,r2,8
    b61c:	103ffa1e 	bne	r2,zero,b608 <_strtoll_r+0x4c>
    b620:	00800b44 	movi	r2,45
    b624:	98808826 	beq	r19,r2,b848 <_strtoll_r+0x28c>
    b628:	00800ac4 	movi	r2,43
    b62c:	98808326 	beq	r19,r2,b83c <_strtoll_r+0x280>
    b630:	d8000115 	stw	zero,4(sp)
    b634:	b807003a 	cmpeq	r3,r23,zero
    b638:	18005f1e 	bne	r3,zero,b7b8 <_strtoll_r+0x1fc>
    b63c:	00800404 	movi	r2,16
    b640:	b8805d26 	beq	r23,r2,b7b8 <_strtoll_r+0x1fc>
    b644:	b82dd7fa 	srai	r22,r23,31
    b648:	b82b883a 	mov	r21,r23
    b64c:	d8c00117 	ldw	r3,4(sp)
    b650:	1806c03a 	cmpne	r3,r3,zero
    b654:	d8c00515 	stw	r3,20(sp)
    b658:	1800631e 	bne	r3,zero,b7e8 <_strtoll_r+0x22c>
    b65c:	043fffc4 	movi	r16,-1
    b660:	04600034 	movhi	r17,32768
    b664:	8c7fffc4 	addi	r17,r17,-1
    b668:	880b883a 	mov	r5,r17
    b66c:	8009883a 	mov	r4,r16
    b670:	a80d883a 	mov	r6,r21
    b674:	b00f883a 	mov	r7,r22
    b678:	000d7e00 	call	d7e0 <__umoddi3>
    b67c:	880b883a 	mov	r5,r17
    b680:	8009883a 	mov	r4,r16
    b684:	b00f883a 	mov	r7,r22
    b688:	a80d883a 	mov	r6,r21
    b68c:	d8800015 	stw	r2,0(sp)
    b690:	000d2040 	call	d204 <__udivdi3>
    b694:	1023883a 	mov	r17,r2
    b698:	e4c5883a 	add	r2,fp,r19
    b69c:	11000003 	ldbu	r4,0(r2)
    b6a0:	1825883a 	mov	r18,r3
    b6a4:	0015883a 	mov	r10,zero
    b6a8:	20c0010c 	andi	r3,r4,4
    b6ac:	0017883a 	mov	r11,zero
    b6b0:	000f883a 	mov	r7,zero
    b6b4:	18001a26 	beq	r3,zero,b720 <_strtoll_r+0x164>
    b6b8:	9c3ff404 	addi	r16,r19,-48
    b6bc:	85c0200e 	bge	r16,r23,b740 <_strtoll_r+0x184>
    b6c0:	38003b16 	blt	r7,zero,b7b0 <_strtoll_r+0x1f4>
    b6c4:	92c03a36 	bltu	r18,r11,b7b0 <_strtoll_r+0x1f4>
    b6c8:	5c803826 	beq	r11,r18,b7ac <_strtoll_r+0x1f0>
    b6cc:	54404c26 	beq	r10,r17,b800 <_strtoll_r+0x244>
    b6d0:	580b883a 	mov	r5,r11
    b6d4:	5009883a 	mov	r4,r10
    b6d8:	a80d883a 	mov	r6,r21
    b6dc:	b00f883a 	mov	r7,r22
    b6e0:	000d0c80 	call	d0c8 <__muldi3>
    b6e4:	8013d7fa 	srai	r9,r16,31
    b6e8:	100d883a 	mov	r6,r2
    b6ec:	1405883a 	add	r2,r2,r16
    b6f0:	118d803a 	cmpltu	r6,r2,r6
    b6f4:	1a47883a 	add	r3,r3,r9
    b6f8:	30cd883a 	add	r6,r6,r3
    b6fc:	1015883a 	mov	r10,r2
    b700:	3017883a 	mov	r11,r6
    b704:	01c00044 	movi	r7,1
    b708:	a4c00007 	ldb	r19,0(r20)
    b70c:	a5000044 	addi	r20,r20,1
    b710:	e4c5883a 	add	r2,fp,r19
    b714:	11000003 	ldbu	r4,0(r2)
    b718:	20c0010c 	andi	r3,r4,4
    b71c:	183fe61e 	bne	r3,zero,b6b8 <_strtoll_r+0xfc>
    b720:	208000cc 	andi	r2,r4,3
    b724:	10000626 	beq	r2,zero,b740 <_strtoll_r+0x184>
    b728:	2080004c 	andi	r2,r4,1
    b72c:	1005003a 	cmpeq	r2,r2,zero
    b730:	1000301e 	bne	r2,zero,b7f4 <_strtoll_r+0x238>
    b734:	02000dc4 	movi	r8,55
    b738:	9a21c83a 	sub	r16,r19,r8
    b73c:	85ffe016 	blt	r16,r23,b6c0 <_strtoll_r+0x104>
    b740:	38004616 	blt	r7,zero,b85c <_strtoll_r+0x2a0>
    b744:	d8800517 	ldw	r2,20(sp)
    b748:	1000341e 	bne	r2,zero,b81c <_strtoll_r+0x260>
    b74c:	500b883a 	mov	r5,r10
    b750:	580d883a 	mov	r6,r11
    b754:	d8c00417 	ldw	r3,16(sp)
    b758:	18000626 	beq	r3,zero,b774 <_strtoll_r+0x1b8>
    b75c:	38000226 	beq	r7,zero,b768 <_strtoll_r+0x1ac>
    b760:	a53fffc4 	addi	r20,r20,-1
    b764:	dd000315 	stw	r20,12(sp)
    b768:	d8c00317 	ldw	r3,12(sp)
    b76c:	d8800417 	ldw	r2,16(sp)
    b770:	10c00015 	stw	r3,0(r2)
    b774:	2805883a 	mov	r2,r5
    b778:	3007883a 	mov	r3,r6
    b77c:	dfc00f17 	ldw	ra,60(sp)
    b780:	df000e17 	ldw	fp,56(sp)
    b784:	ddc00d17 	ldw	r23,52(sp)
    b788:	dd800c17 	ldw	r22,48(sp)
    b78c:	dd400b17 	ldw	r21,44(sp)
    b790:	dd000a17 	ldw	r20,40(sp)
    b794:	dcc00917 	ldw	r19,36(sp)
    b798:	dc800817 	ldw	r18,32(sp)
    b79c:	dc400717 	ldw	r17,28(sp)
    b7a0:	dc000617 	ldw	r16,24(sp)
    b7a4:	dec01004 	addi	sp,sp,64
    b7a8:	f800283a 	ret
    b7ac:	8abfc72e 	bgeu	r17,r10,b6cc <_strtoll_r+0x110>
    b7b0:	01ffffc4 	movi	r7,-1
    b7b4:	003fd406 	br	b708 <_strtoll_r+0x14c>
    b7b8:	00800c04 	movi	r2,48
    b7bc:	98803226 	beq	r19,r2,b888 <_strtoll_r+0x2cc>
    b7c0:	183fa026 	beq	r3,zero,b644 <_strtoll_r+0x88>
    b7c4:	00800c04 	movi	r2,48
    b7c8:	98803e26 	beq	r19,r2,b8c4 <_strtoll_r+0x308>
    b7cc:	d8c00117 	ldw	r3,4(sp)
    b7d0:	05c00284 	movi	r23,10
    b7d4:	b82b883a 	mov	r21,r23
    b7d8:	1806c03a 	cmpne	r3,r3,zero
    b7dc:	002d883a 	mov	r22,zero
    b7e0:	d8c00515 	stw	r3,20(sp)
    b7e4:	183f9d26 	beq	r3,zero,b65c <_strtoll_r+0xa0>
    b7e8:	0021883a 	mov	r16,zero
    b7ec:	04600034 	movhi	r17,32768
    b7f0:	003f9d06 	br	b668 <_strtoll_r+0xac>
    b7f4:	020015c4 	movi	r8,87
    b7f8:	9a21c83a 	sub	r16,r19,r8
    b7fc:	003fcf06 	br	b73c <_strtoll_r+0x180>
    b800:	5cbfb31e 	bne	r11,r18,b6d0 <_strtoll_r+0x114>
    b804:	d8800017 	ldw	r2,0(sp)
    b808:	143fb10e 	bge	r2,r16,b6d0 <_strtoll_r+0x114>
    b80c:	8815883a 	mov	r10,r17
    b810:	9017883a 	mov	r11,r18
    b814:	01ffffc4 	movi	r7,-1
    b818:	003fbb06 	br	b708 <_strtoll_r+0x14c>
    b81c:	0009883a 	mov	r4,zero
    b820:	2285c83a 	sub	r2,r4,r10
    b824:	2089803a 	cmpltu	r4,r4,r2
    b828:	02c7c83a 	sub	r3,zero,r11
    b82c:	1909c83a 	sub	r4,r3,r4
    b830:	100b883a 	mov	r5,r2
    b834:	200d883a 	mov	r6,r4
    b838:	003fc606 	br	b754 <_strtoll_r+0x198>
    b83c:	a4c00007 	ldb	r19,0(r20)
    b840:	a5000044 	addi	r20,r20,1
    b844:	003f7a06 	br	b630 <_strtoll_r+0x74>
    b848:	a4c00007 	ldb	r19,0(r20)
    b84c:	00800044 	movi	r2,1
    b850:	a5000044 	addi	r20,r20,1
    b854:	d8800115 	stw	r2,4(sp)
    b858:	003f7606 	br	b634 <_strtoll_r+0x78>
    b85c:	d8c00117 	ldw	r3,4(sp)
    b860:	1805003a 	cmpeq	r2,r3,zero
    b864:	1000131e 	bne	r2,zero,b8b4 <_strtoll_r+0x2f8>
    b868:	0005883a 	mov	r2,zero
    b86c:	00e00034 	movhi	r3,32768
    b870:	100b883a 	mov	r5,r2
    b874:	180d883a 	mov	r6,r3
    b878:	d8c00217 	ldw	r3,8(sp)
    b87c:	00800884 	movi	r2,34
    b880:	18800015 	stw	r2,0(r3)
    b884:	003fb306 	br	b754 <_strtoll_r+0x198>
    b888:	a1000007 	ldb	r4,0(r20)
    b88c:	00801e04 	movi	r2,120
    b890:	20800226 	beq	r4,r2,b89c <_strtoll_r+0x2e0>
    b894:	00801604 	movi	r2,88
    b898:	20bfc91e 	bne	r4,r2,b7c0 <_strtoll_r+0x204>
    b89c:	a4c00047 	ldb	r19,1(r20)
    b8a0:	05c00404 	movi	r23,16
    b8a4:	b82b883a 	mov	r21,r23
    b8a8:	a5000084 	addi	r20,r20,2
    b8ac:	002d883a 	mov	r22,zero
    b8b0:	003f6606 	br	b64c <_strtoll_r+0x90>
    b8b4:	017fffc4 	movi	r5,-1
    b8b8:	01a00034 	movhi	r6,32768
    b8bc:	31bfffc4 	addi	r6,r6,-1
    b8c0:	003fed06 	br	b878 <_strtoll_r+0x2bc>
    b8c4:	05c00204 	movi	r23,8
    b8c8:	b82b883a 	mov	r21,r23
    b8cc:	002d883a 	mov	r22,zero
    b8d0:	003f5e06 	br	b64c <_strtoll_r+0x90>

0000b8d4 <_strtoul_r>:
    b8d4:	defff604 	addi	sp,sp,-40
    b8d8:	00800074 	movhi	r2,1
    b8dc:	10910b04 	addi	r2,r2,17452
    b8e0:	dd000415 	stw	r20,16(sp)
    b8e4:	15000017 	ldw	r20,0(r2)
    b8e8:	ddc00715 	stw	r23,28(sp)
    b8ec:	dd800615 	stw	r22,24(sp)
    b8f0:	dd400515 	stw	r21,20(sp)
    b8f4:	dc800215 	stw	r18,8(sp)
    b8f8:	dc000015 	stw	r16,0(sp)
    b8fc:	dfc00915 	stw	ra,36(sp)
    b900:	df000815 	stw	fp,32(sp)
    b904:	dcc00315 	stw	r19,12(sp)
    b908:	dc400115 	stw	r17,4(sp)
    b90c:	282b883a 	mov	r21,r5
    b910:	202f883a 	mov	r23,r4
    b914:	302d883a 	mov	r22,r6
    b918:	3825883a 	mov	r18,r7
    b91c:	2821883a 	mov	r16,r5
    b920:	84400007 	ldb	r17,0(r16)
    b924:	84000044 	addi	r16,r16,1
    b928:	a447883a 	add	r3,r20,r17
    b92c:	18800003 	ldbu	r2,0(r3)
    b930:	1080020c 	andi	r2,r2,8
    b934:	103ffa1e 	bne	r2,zero,b920 <_strtoul_r+0x4c>
    b938:	00800b44 	movi	r2,45
    b93c:	88805626 	beq	r17,r2,ba98 <_strtoul_r+0x1c4>
    b940:	00800ac4 	movi	r2,43
    b944:	88805126 	beq	r17,r2,ba8c <_strtoul_r+0x1b8>
    b948:	0039883a 	mov	fp,zero
    b94c:	9007003a 	cmpeq	r3,r18,zero
    b950:	18003b1e 	bne	r3,zero,ba40 <_strtoul_r+0x16c>
    b954:	00800404 	movi	r2,16
    b958:	90803926 	beq	r18,r2,ba40 <_strtoul_r+0x16c>
    b95c:	013fffc4 	movi	r4,-1
    b960:	900b883a 	mov	r5,r18
    b964:	000f1e40 	call	f1e4 <__udivsi3>
    b968:	013fffc4 	movi	r4,-1
    b96c:	900b883a 	mov	r5,r18
    b970:	1027883a 	mov	r19,r2
    b974:	000f1ec0 	call	f1ec <__umodsi3>
    b978:	1011883a 	mov	r8,r2
    b97c:	900f883a 	mov	r7,r18
    b980:	a445883a 	add	r2,r20,r17
    b984:	11000003 	ldbu	r4,0(r2)
    b988:	000b883a 	mov	r5,zero
    b98c:	000d883a 	mov	r6,zero
    b990:	20c0010c 	andi	r3,r4,4
    b994:	18000e26 	beq	r3,zero,b9d0 <_strtoul_r+0xfc>
    b998:	88fff404 	addi	r3,r17,-48
    b99c:	1c80140e 	bge	r3,r18,b9f0 <_strtoul_r+0x11c>
    b9a0:	30003316 	blt	r6,zero,ba70 <_strtoul_r+0x19c>
    b9a4:	99403236 	bltu	r19,r5,ba70 <_strtoul_r+0x19c>
    b9a8:	2cc03026 	beq	r5,r19,ba6c <_strtoul_r+0x198>
    b9ac:	29c5383a 	mul	r2,r5,r7
    b9b0:	01800044 	movi	r6,1
    b9b4:	10cb883a 	add	r5,r2,r3
    b9b8:	84400007 	ldb	r17,0(r16)
    b9bc:	84000044 	addi	r16,r16,1
    b9c0:	a445883a 	add	r2,r20,r17
    b9c4:	11000003 	ldbu	r4,0(r2)
    b9c8:	20c0010c 	andi	r3,r4,4
    b9cc:	183ff21e 	bne	r3,zero,b998 <_strtoul_r+0xc4>
    b9d0:	208000cc 	andi	r2,r4,3
    b9d4:	10000626 	beq	r2,zero,b9f0 <_strtoul_r+0x11c>
    b9d8:	2080004c 	andi	r2,r4,1
    b9dc:	1005003a 	cmpeq	r2,r2,zero
    b9e0:	1000251e 	bne	r2,zero,ba78 <_strtoul_r+0x1a4>
    b9e4:	00800dc4 	movi	r2,55
    b9e8:	8887c83a 	sub	r3,r17,r2
    b9ec:	1cbfec16 	blt	r3,r18,b9a0 <_strtoul_r+0xcc>
    b9f0:	3000400e 	bge	r6,zero,baf4 <_strtoul_r+0x220>
    b9f4:	00800884 	movi	r2,34
    b9f8:	017fffc4 	movi	r5,-1
    b9fc:	b8800015 	stw	r2,0(r23)
    ba00:	b0000226 	beq	r22,zero,ba0c <_strtoul_r+0x138>
    ba04:	30001f1e 	bne	r6,zero,ba84 <_strtoul_r+0x1b0>
    ba08:	b5400015 	stw	r21,0(r22)
    ba0c:	2805883a 	mov	r2,r5
    ba10:	dfc00917 	ldw	ra,36(sp)
    ba14:	df000817 	ldw	fp,32(sp)
    ba18:	ddc00717 	ldw	r23,28(sp)
    ba1c:	dd800617 	ldw	r22,24(sp)
    ba20:	dd400517 	ldw	r21,20(sp)
    ba24:	dd000417 	ldw	r20,16(sp)
    ba28:	dcc00317 	ldw	r19,12(sp)
    ba2c:	dc800217 	ldw	r18,8(sp)
    ba30:	dc400117 	ldw	r17,4(sp)
    ba34:	dc000017 	ldw	r16,0(sp)
    ba38:	dec00a04 	addi	sp,sp,40
    ba3c:	f800283a 	ret
    ba40:	00800c04 	movi	r2,48
    ba44:	88801826 	beq	r17,r2,baa8 <_strtoul_r+0x1d4>
    ba48:	183fc426 	beq	r3,zero,b95c <_strtoul_r+0x88>
    ba4c:	00800c04 	movi	r2,48
    ba50:	88802226 	beq	r17,r2,badc <_strtoul_r+0x208>
    ba54:	04800284 	movi	r18,10
    ba58:	900f883a 	mov	r7,r18
    ba5c:	04c666b4 	movhi	r19,6554
    ba60:	9ce66644 	addi	r19,r19,-26215
    ba64:	02000144 	movi	r8,5
    ba68:	003fc506 	br	b980 <_strtoul_r+0xac>
    ba6c:	40ffcf0e 	bge	r8,r3,b9ac <_strtoul_r+0xd8>
    ba70:	01bfffc4 	movi	r6,-1
    ba74:	003fd006 	br	b9b8 <_strtoul_r+0xe4>
    ba78:	008015c4 	movi	r2,87
    ba7c:	8887c83a 	sub	r3,r17,r2
    ba80:	003fda06 	br	b9ec <_strtoul_r+0x118>
    ba84:	857fffc4 	addi	r21,r16,-1
    ba88:	003fdf06 	br	ba08 <_strtoul_r+0x134>
    ba8c:	84400007 	ldb	r17,0(r16)
    ba90:	84000044 	addi	r16,r16,1
    ba94:	003fac06 	br	b948 <_strtoul_r+0x74>
    ba98:	84400007 	ldb	r17,0(r16)
    ba9c:	07000044 	movi	fp,1
    baa0:	84000044 	addi	r16,r16,1
    baa4:	003fa906 	br	b94c <_strtoul_r+0x78>
    baa8:	81000007 	ldb	r4,0(r16)
    baac:	00801e04 	movi	r2,120
    bab0:	20800226 	beq	r4,r2,babc <_strtoul_r+0x1e8>
    bab4:	00801604 	movi	r2,88
    bab8:	20bfe31e 	bne	r4,r2,ba48 <_strtoul_r+0x174>
    babc:	84400047 	ldb	r17,1(r16)
    bac0:	04800404 	movi	r18,16
    bac4:	84000084 	addi	r16,r16,2
    bac8:	900f883a 	mov	r7,r18
    bacc:	04c40034 	movhi	r19,4096
    bad0:	9cffffc4 	addi	r19,r19,-1
    bad4:	020003c4 	movi	r8,15
    bad8:	003fa906 	br	b980 <_strtoul_r+0xac>
    badc:	04800204 	movi	r18,8
    bae0:	900f883a 	mov	r7,r18
    bae4:	04c80034 	movhi	r19,8192
    bae8:	9cffffc4 	addi	r19,r19,-1
    baec:	020001c4 	movi	r8,7
    baf0:	003fa306 	br	b980 <_strtoul_r+0xac>
    baf4:	e005003a 	cmpeq	r2,fp,zero
    baf8:	103fc11e 	bne	r2,zero,ba00 <_strtoul_r+0x12c>
    bafc:	014bc83a 	sub	r5,zero,r5
    bb00:	003fbf06 	br	ba00 <_strtoul_r+0x12c>

0000bb04 <strtoul>:
    bb04:	00800074 	movhi	r2,1
    bb08:	10910c04 	addi	r2,r2,17456
    bb0c:	2013883a 	mov	r9,r4
    bb10:	11000017 	ldw	r4,0(r2)
    bb14:	2805883a 	mov	r2,r5
    bb18:	300f883a 	mov	r7,r6
    bb1c:	480b883a 	mov	r5,r9
    bb20:	100d883a 	mov	r6,r2
    bb24:	000b8d41 	jmpi	b8d4 <_strtoul_r>

0000bb28 <_strtoull_r>:
    bb28:	defff104 	addi	sp,sp,-60
    bb2c:	00800074 	movhi	r2,1
    bb30:	10910b04 	addi	r2,r2,17452
    bb34:	df000d15 	stw	fp,52(sp)
    bb38:	17000017 	ldw	fp,0(r2)
    bb3c:	ddc00c15 	stw	r23,48(sp)
    bb40:	dcc00815 	stw	r19,32(sp)
    bb44:	dfc00e15 	stw	ra,56(sp)
    bb48:	dd800b15 	stw	r22,44(sp)
    bb4c:	dd400a15 	stw	r21,40(sp)
    bb50:	dd000915 	stw	r20,36(sp)
    bb54:	dc800715 	stw	r18,28(sp)
    bb58:	dc400615 	stw	r17,24(sp)
    bb5c:	dc000515 	stw	r16,20(sp)
    bb60:	d9400215 	stw	r5,8(sp)
    bb64:	d9000115 	stw	r4,4(sp)
    bb68:	d9800315 	stw	r6,12(sp)
    bb6c:	382f883a 	mov	r23,r7
    bb70:	2827883a 	mov	r19,r5
    bb74:	9d000007 	ldb	r20,0(r19)
    bb78:	9cc00044 	addi	r19,r19,1
    bb7c:	e507883a 	add	r3,fp,r20
    bb80:	18800003 	ldbu	r2,0(r3)
    bb84:	1080020c 	andi	r2,r2,8
    bb88:	103ffa1e 	bne	r2,zero,bb74 <_strtoull_r+0x4c>
    bb8c:	00800b44 	movi	r2,45
    bb90:	a0807a26 	beq	r20,r2,bd7c <_strtoull_r+0x254>
    bb94:	00800ac4 	movi	r2,43
    bb98:	a0807526 	beq	r20,r2,bd70 <_strtoull_r+0x248>
    bb9c:	d8000015 	stw	zero,0(sp)
    bba0:	b807003a 	cmpeq	r3,r23,zero
    bba4:	18005a1e 	bne	r3,zero,bd10 <_strtoull_r+0x1e8>
    bba8:	00800404 	movi	r2,16
    bbac:	b8805826 	beq	r23,r2,bd10 <_strtoull_r+0x1e8>
    bbb0:	b82dd7fa 	srai	r22,r23,31
    bbb4:	043fffc4 	movi	r16,-1
    bbb8:	8009883a 	mov	r4,r16
    bbbc:	800b883a 	mov	r5,r16
    bbc0:	b80d883a 	mov	r6,r23
    bbc4:	b00f883a 	mov	r7,r22
    bbc8:	000d2040 	call	d204 <__udivdi3>
    bbcc:	8009883a 	mov	r4,r16
    bbd0:	800b883a 	mov	r5,r16
    bbd4:	b80d883a 	mov	r6,r23
    bbd8:	b00f883a 	mov	r7,r22
    bbdc:	1023883a 	mov	r17,r2
    bbe0:	1825883a 	mov	r18,r3
    bbe4:	000d7e00 	call	d7e0 <__umoddi3>
    bbe8:	b82b883a 	mov	r21,r23
    bbec:	1019883a 	mov	r12,r2
    bbf0:	e505883a 	add	r2,fp,r20
    bbf4:	11000003 	ldbu	r4,0(r2)
    bbf8:	0015883a 	mov	r10,zero
    bbfc:	0017883a 	mov	r11,zero
    bc00:	20c0010c 	andi	r3,r4,4
    bc04:	000d883a 	mov	r6,zero
    bc08:	18001c26 	beq	r3,zero,bc7c <_strtoull_r+0x154>
    bc0c:	a43ff404 	addi	r16,r20,-48
    bc10:	85c0220e 	bge	r16,r23,bc9c <_strtoull_r+0x174>
    bc14:	30003c16 	blt	r6,zero,bd08 <_strtoull_r+0x1e0>
    bc18:	92c03b36 	bltu	r18,r11,bd08 <_strtoull_r+0x1e0>
    bc1c:	5c803926 	beq	r11,r18,bd04 <_strtoull_r+0x1dc>
    bc20:	54404c26 	beq	r10,r17,bd54 <_strtoull_r+0x22c>
    bc24:	580b883a 	mov	r5,r11
    bc28:	5009883a 	mov	r4,r10
    bc2c:	a80d883a 	mov	r6,r21
    bc30:	b00f883a 	mov	r7,r22
    bc34:	db000415 	stw	r12,16(sp)
    bc38:	000d0c80 	call	d0c8 <__muldi3>
    bc3c:	8013d7fa 	srai	r9,r16,31
    bc40:	100d883a 	mov	r6,r2
    bc44:	1405883a 	add	r2,r2,r16
    bc48:	118d803a 	cmpltu	r6,r2,r6
    bc4c:	1a47883a 	add	r3,r3,r9
    bc50:	db000417 	ldw	r12,16(sp)
    bc54:	30cd883a 	add	r6,r6,r3
    bc58:	3017883a 	mov	r11,r6
    bc5c:	1015883a 	mov	r10,r2
    bc60:	01800044 	movi	r6,1
    bc64:	9d000007 	ldb	r20,0(r19)
    bc68:	9cc00044 	addi	r19,r19,1
    bc6c:	e505883a 	add	r2,fp,r20
    bc70:	11000003 	ldbu	r4,0(r2)
    bc74:	20c0010c 	andi	r3,r4,4
    bc78:	183fe41e 	bne	r3,zero,bc0c <_strtoull_r+0xe4>
    bc7c:	208000cc 	andi	r2,r4,3
    bc80:	10000626 	beq	r2,zero,bc9c <_strtoull_r+0x174>
    bc84:	2080004c 	andi	r2,r4,1
    bc88:	1005003a 	cmpeq	r2,r2,zero
    bc8c:	10002e1e 	bne	r2,zero,bd48 <_strtoull_r+0x220>
    bc90:	02000dc4 	movi	r8,55
    bc94:	a221c83a 	sub	r16,r20,r8
    bc98:	85ffde16 	blt	r16,r23,bc14 <_strtoull_r+0xec>
    bc9c:	3000530e 	bge	r6,zero,bdec <_strtoull_r+0x2c4>
    bca0:	d8c00117 	ldw	r3,4(sp)
    bca4:	02bfffc4 	movi	r10,-1
    bca8:	00800884 	movi	r2,34
    bcac:	5017883a 	mov	r11,r10
    bcb0:	18800015 	stw	r2,0(r3)
    bcb4:	d8800317 	ldw	r2,12(sp)
    bcb8:	10000426 	beq	r2,zero,bccc <_strtoull_r+0x1a4>
    bcbc:	3000291e 	bne	r6,zero,bd64 <_strtoull_r+0x23c>
    bcc0:	d8800217 	ldw	r2,8(sp)
    bcc4:	d8c00317 	ldw	r3,12(sp)
    bcc8:	18800015 	stw	r2,0(r3)
    bccc:	5005883a 	mov	r2,r10
    bcd0:	5807883a 	mov	r3,r11
    bcd4:	dfc00e17 	ldw	ra,56(sp)
    bcd8:	df000d17 	ldw	fp,52(sp)
    bcdc:	ddc00c17 	ldw	r23,48(sp)
    bce0:	dd800b17 	ldw	r22,44(sp)
    bce4:	dd400a17 	ldw	r21,40(sp)
    bce8:	dd000917 	ldw	r20,36(sp)
    bcec:	dcc00817 	ldw	r19,32(sp)
    bcf0:	dc800717 	ldw	r18,28(sp)
    bcf4:	dc400617 	ldw	r17,24(sp)
    bcf8:	dc000517 	ldw	r16,20(sp)
    bcfc:	dec00f04 	addi	sp,sp,60
    bd00:	f800283a 	ret
    bd04:	8abfc62e 	bgeu	r17,r10,bc20 <_strtoull_r+0xf8>
    bd08:	01bfffc4 	movi	r6,-1
    bd0c:	003fd506 	br	bc64 <_strtoull_r+0x13c>
    bd10:	00800c04 	movi	r2,48
    bd14:	a0801e26 	beq	r20,r2,bd90 <_strtoull_r+0x268>
    bd18:	183fa526 	beq	r3,zero,bbb0 <_strtoull_r+0x88>
    bd1c:	00800c04 	movi	r2,48
    bd20:	a0802a26 	beq	r20,r2,bdcc <_strtoull_r+0x2a4>
    bd24:	05c00284 	movi	r23,10
    bd28:	b82b883a 	mov	r21,r23
    bd2c:	046666b4 	movhi	r17,39322
    bd30:	8c666644 	addi	r17,r17,-26215
    bd34:	002d883a 	mov	r22,zero
    bd38:	048666b4 	movhi	r18,6554
    bd3c:	94a66644 	addi	r18,r18,-26215
    bd40:	03000144 	movi	r12,5
    bd44:	003faa06 	br	bbf0 <_strtoull_r+0xc8>
    bd48:	020015c4 	movi	r8,87
    bd4c:	a221c83a 	sub	r16,r20,r8
    bd50:	003fd106 	br	bc98 <_strtoull_r+0x170>
    bd54:	5cbfb31e 	bne	r11,r18,bc24 <_strtoull_r+0xfc>
    bd58:	643fb20e 	bge	r12,r16,bc24 <_strtoull_r+0xfc>
    bd5c:	01bfffc4 	movi	r6,-1
    bd60:	003fc006 	br	bc64 <_strtoull_r+0x13c>
    bd64:	9cffffc4 	addi	r19,r19,-1
    bd68:	dcc00215 	stw	r19,8(sp)
    bd6c:	003fd406 	br	bcc0 <_strtoull_r+0x198>
    bd70:	9d000007 	ldb	r20,0(r19)
    bd74:	9cc00044 	addi	r19,r19,1
    bd78:	003f8806 	br	bb9c <_strtoull_r+0x74>
    bd7c:	9d000007 	ldb	r20,0(r19)
    bd80:	00800044 	movi	r2,1
    bd84:	9cc00044 	addi	r19,r19,1
    bd88:	d8800015 	stw	r2,0(sp)
    bd8c:	003f8406 	br	bba0 <_strtoull_r+0x78>
    bd90:	99000007 	ldb	r4,0(r19)
    bd94:	00801e04 	movi	r2,120
    bd98:	20800226 	beq	r4,r2,bda4 <_strtoull_r+0x27c>
    bd9c:	00801604 	movi	r2,88
    bda0:	20bfdd1e 	bne	r4,r2,bd18 <_strtoull_r+0x1f0>
    bda4:	9d000047 	ldb	r20,1(r19)
    bda8:	05c00404 	movi	r23,16
    bdac:	b82b883a 	mov	r21,r23
    bdb0:	047fffc4 	movi	r17,-1
    bdb4:	9cc00084 	addi	r19,r19,2
    bdb8:	002d883a 	mov	r22,zero
    bdbc:	04840034 	movhi	r18,4096
    bdc0:	94bfffc4 	addi	r18,r18,-1
    bdc4:	030003c4 	movi	r12,15
    bdc8:	003f8906 	br	bbf0 <_strtoull_r+0xc8>
    bdcc:	05c00204 	movi	r23,8
    bdd0:	b82b883a 	mov	r21,r23
    bdd4:	047fffc4 	movi	r17,-1
    bdd8:	002d883a 	mov	r22,zero
    bddc:	04880034 	movhi	r18,8192
    bde0:	94bfffc4 	addi	r18,r18,-1
    bde4:	030001c4 	movi	r12,7
    bde8:	003f8106 	br	bbf0 <_strtoull_r+0xc8>
    bdec:	d8c00017 	ldw	r3,0(sp)
    bdf0:	1805003a 	cmpeq	r2,r3,zero
    bdf4:	103faf1e 	bne	r2,zero,bcb4 <_strtoull_r+0x18c>
    bdf8:	0009883a 	mov	r4,zero
    bdfc:	2285c83a 	sub	r2,r4,r10
    be00:	02c7c83a 	sub	r3,zero,r11
    be04:	2089803a 	cmpltu	r4,r4,r2
    be08:	1909c83a 	sub	r4,r3,r4
    be0c:	1015883a 	mov	r10,r2
    be10:	2017883a 	mov	r11,r4
    be14:	003fa706 	br	bcb4 <_strtoull_r+0x18c>

0000be18 <__submore>:
    be18:	defffa04 	addi	sp,sp,-24
    be1c:	28c00c17 	ldw	r3,48(r5)
    be20:	dc800215 	stw	r18,8(sp)
    be24:	2825883a 	mov	r18,r5
    be28:	dc000015 	stw	r16,0(sp)
    be2c:	90801004 	addi	r2,r18,64
    be30:	04010004 	movi	r16,1024
    be34:	dfc00515 	stw	ra,20(sp)
    be38:	dd000415 	stw	r20,16(sp)
    be3c:	dcc00315 	stw	r19,12(sp)
    be40:	dc400115 	stw	r17,4(sp)
    be44:	800b883a 	mov	r5,r16
    be48:	18801b26 	beq	r3,r2,beb8 <__submore+0xa0>
    be4c:	94400d17 	ldw	r17,52(r18)
    be50:	180b883a 	mov	r5,r3
    be54:	8c69883a 	add	r20,r17,r17
    be58:	a00d883a 	mov	r6,r20
    be5c:	000901c0 	call	901c <_realloc_r>
    be60:	1467883a 	add	r19,r2,r17
    be64:	1021883a 	mov	r16,r2
    be68:	880d883a 	mov	r6,r17
    be6c:	9809883a 	mov	r4,r19
    be70:	100b883a 	mov	r5,r2
    be74:	10000e26 	beq	r2,zero,beb0 <__submore+0x98>
    be78:	0007e100 	call	7e10 <memcpy>
    be7c:	000d883a 	mov	r6,zero
    be80:	95000d15 	stw	r20,52(r18)
    be84:	94c00015 	stw	r19,0(r18)
    be88:	94000c15 	stw	r16,48(r18)
    be8c:	3005883a 	mov	r2,r6
    be90:	dfc00517 	ldw	ra,20(sp)
    be94:	dd000417 	ldw	r20,16(sp)
    be98:	dcc00317 	ldw	r19,12(sp)
    be9c:	dc800217 	ldw	r18,8(sp)
    bea0:	dc400117 	ldw	r17,4(sp)
    bea4:	dc000017 	ldw	r16,0(sp)
    bea8:	dec00604 	addi	sp,sp,24
    beac:	f800283a 	ret
    beb0:	01bfffc4 	movi	r6,-1
    beb4:	003ff506 	br	be8c <__submore+0x74>
    beb8:	00074ec0 	call	74ec <_malloc_r>
    bebc:	1009883a 	mov	r4,r2
    bec0:	1140ff44 	addi	r5,r2,1021
    bec4:	000d883a 	mov	r6,zero
    bec8:	103ff926 	beq	r2,zero,beb0 <__submore+0x98>
    becc:	90801083 	ldbu	r2,66(r18)
    bed0:	94000d15 	stw	r16,52(r18)
    bed4:	91000c15 	stw	r4,48(r18)
    bed8:	28800085 	stb	r2,2(r5)
    bedc:	90c01043 	ldbu	r3,65(r18)
    bee0:	28c00045 	stb	r3,1(r5)
    bee4:	90801003 	ldbu	r2,64(r18)
    bee8:	2080ff45 	stb	r2,1021(r4)
    beec:	91400015 	stw	r5,0(r18)
    bef0:	003fe606 	br	be8c <__submore+0x74>

0000bef4 <_ungetc_r>:
    bef4:	defffc04 	addi	sp,sp,-16
    bef8:	00bfffc4 	movi	r2,-1
    befc:	dc400215 	stw	r17,8(sp)
    bf00:	dc000115 	stw	r16,4(sp)
    bf04:	dfc00315 	stw	ra,12(sp)
    bf08:	2821883a 	mov	r16,r5
    bf0c:	2023883a 	mov	r17,r4
    bf10:	28801826 	beq	r5,r2,bf74 <_ungetc_r+0x80>
    bf14:	20000226 	beq	r4,zero,bf20 <_ungetc_r+0x2c>
    bf18:	20800e17 	ldw	r2,56(r4)
    bf1c:	10001b26 	beq	r2,zero,bf8c <_ungetc_r+0x98>
    bf20:	3100030b 	ldhu	r4,12(r6)
    bf24:	00bff7c4 	movi	r2,-33
    bf28:	2084703a 	and	r2,r4,r2
    bf2c:	117fffcc 	andi	r5,r2,65535
    bf30:	28c0010c 	andi	r3,r5,4
    bf34:	1009883a 	mov	r4,r2
    bf38:	3080030d 	sth	r2,12(r6)
    bf3c:	18003526 	beq	r3,zero,c014 <_ungetc_r+0x120>
    bf40:	30800c17 	ldw	r2,48(r6)
    bf44:	84003fcc 	andi	r16,r16,255
    bf48:	10001426 	beq	r2,zero,bf9c <_ungetc_r+0xa8>
    bf4c:	30c00117 	ldw	r3,4(r6)
    bf50:	30800d17 	ldw	r2,52(r6)
    bf54:	1880380e 	bge	r3,r2,c038 <_ungetc_r+0x144>
    bf58:	30c00017 	ldw	r3,0(r6)
    bf5c:	19ffffc4 	addi	r7,r3,-1
    bf60:	31c00015 	stw	r7,0(r6)
    bf64:	1c3fffc5 	stb	r16,-1(r3)
    bf68:	30800117 	ldw	r2,4(r6)
    bf6c:	10800044 	addi	r2,r2,1
    bf70:	30800115 	stw	r2,4(r6)
    bf74:	8005883a 	mov	r2,r16
    bf78:	dfc00317 	ldw	ra,12(sp)
    bf7c:	dc400217 	ldw	r17,8(sp)
    bf80:	dc000117 	ldw	r16,4(sp)
    bf84:	dec00404 	addi	sp,sp,16
    bf88:	f800283a 	ret
    bf8c:	d9800015 	stw	r6,0(sp)
    bf90:	00063780 	call	6378 <__sinit>
    bf94:	d9800017 	ldw	r6,0(sp)
    bf98:	003fe106 	br	bf20 <_ungetc_r+0x2c>
    bf9c:	30800417 	ldw	r2,16(r6)
    bfa0:	10002326 	beq	r2,zero,c030 <_ungetc_r+0x13c>
    bfa4:	31c00017 	ldw	r7,0(r6)
    bfa8:	11c0022e 	bgeu	r2,r7,bfb4 <_ungetc_r+0xc0>
    bfac:	38bfffc3 	ldbu	r2,-1(r7)
    bfb0:	80801226 	beq	r16,r2,bffc <_ungetc_r+0x108>
    bfb4:	30c00117 	ldw	r3,4(r6)
    bfb8:	00800044 	movi	r2,1
    bfbc:	30800115 	stw	r2,4(r6)
    bfc0:	008000c4 	movi	r2,3
    bfc4:	31001004 	addi	r4,r6,64
    bfc8:	31401084 	addi	r5,r6,66
    bfcc:	30800d15 	stw	r2,52(r6)
    bfd0:	8005883a 	mov	r2,r16
    bfd4:	30c00f15 	stw	r3,60(r6)
    bfd8:	31c00e15 	stw	r7,56(r6)
    bfdc:	31000c15 	stw	r4,48(r6)
    bfe0:	31400015 	stw	r5,0(r6)
    bfe4:	34001085 	stb	r16,66(r6)
    bfe8:	dfc00317 	ldw	ra,12(sp)
    bfec:	dc400217 	ldw	r17,8(sp)
    bff0:	dc000117 	ldw	r16,4(sp)
    bff4:	dec00404 	addi	sp,sp,16
    bff8:	f800283a 	ret
    bffc:	30800117 	ldw	r2,4(r6)
    c000:	39ffffc4 	addi	r7,r7,-1
    c004:	31c00015 	stw	r7,0(r6)
    c008:	10800044 	addi	r2,r2,1
    c00c:	30800115 	stw	r2,4(r6)
    c010:	003fd806 	br	bf74 <_ungetc_r+0x80>
    c014:	2880040c 	andi	r2,r5,16
    c018:	10000d26 	beq	r2,zero,c050 <_ungetc_r+0x15c>
    c01c:	2880020c 	andi	r2,r5,8
    c020:	10000d1e 	bne	r2,zero,c058 <_ungetc_r+0x164>
    c024:	20800114 	ori	r2,r4,4
    c028:	3080030d 	sth	r2,12(r6)
    c02c:	003fc406 	br	bf40 <_ungetc_r+0x4c>
    c030:	31c00017 	ldw	r7,0(r6)
    c034:	003fdf06 	br	bfb4 <_ungetc_r+0xc0>
    c038:	300b883a 	mov	r5,r6
    c03c:	8809883a 	mov	r4,r17
    c040:	d9800015 	stw	r6,0(sp)
    c044:	000be180 	call	be18 <__submore>
    c048:	d9800017 	ldw	r6,0(sp)
    c04c:	103fc226 	beq	r2,zero,bf58 <_ungetc_r+0x64>
    c050:	043fffc4 	movi	r16,-1
    c054:	003fc706 	br	bf74 <_ungetc_r+0x80>
    c058:	300b883a 	mov	r5,r6
    c05c:	8809883a 	mov	r4,r17
    c060:	d9800015 	stw	r6,0(sp)
    c064:	00060e00 	call	60e0 <_fflush_r>
    c068:	d9800017 	ldw	r6,0(sp)
    c06c:	103ff81e 	bne	r2,zero,c050 <_ungetc_r+0x15c>
    c070:	3100030b 	ldhu	r4,12(r6)
    c074:	00bffdc4 	movi	r2,-9
    c078:	30000215 	stw	zero,8(r6)
    c07c:	2084703a 	and	r2,r4,r2
    c080:	1009883a 	mov	r4,r2
    c084:	3080030d 	sth	r2,12(r6)
    c088:	30000615 	stw	zero,24(r6)
    c08c:	003fe506 	br	c024 <_ungetc_r+0x130>

0000c090 <ungetc>:
    c090:	01800074 	movhi	r6,1
    c094:	31910c04 	addi	r6,r6,17456
    c098:	2007883a 	mov	r3,r4
    c09c:	31000017 	ldw	r4,0(r6)
    c0a0:	280d883a 	mov	r6,r5
    c0a4:	180b883a 	mov	r5,r3
    c0a8:	000bef41 	jmpi	bef4 <_ungetc_r>

0000c0ac <_write_r>:
    c0ac:	defffd04 	addi	sp,sp,-12
    c0b0:	dc000015 	stw	r16,0(sp)
    c0b4:	04000074 	movhi	r16,1
    c0b8:	84182e04 	addi	r16,r16,24760
    c0bc:	dc400115 	stw	r17,4(sp)
    c0c0:	80000015 	stw	zero,0(r16)
    c0c4:	2023883a 	mov	r17,r4
    c0c8:	2809883a 	mov	r4,r5
    c0cc:	300b883a 	mov	r5,r6
    c0d0:	380d883a 	mov	r6,r7
    c0d4:	dfc00215 	stw	ra,8(sp)
    c0d8:	000fb2c0 	call	fb2c <write>
    c0dc:	1007883a 	mov	r3,r2
    c0e0:	00bfffc4 	movi	r2,-1
    c0e4:	18800626 	beq	r3,r2,c100 <_write_r+0x54>
    c0e8:	1805883a 	mov	r2,r3
    c0ec:	dfc00217 	ldw	ra,8(sp)
    c0f0:	dc400117 	ldw	r17,4(sp)
    c0f4:	dc000017 	ldw	r16,0(sp)
    c0f8:	dec00304 	addi	sp,sp,12
    c0fc:	f800283a 	ret
    c100:	80800017 	ldw	r2,0(r16)
    c104:	103ff826 	beq	r2,zero,c0e8 <_write_r+0x3c>
    c108:	88800015 	stw	r2,0(r17)
    c10c:	1805883a 	mov	r2,r3
    c110:	dfc00217 	ldw	ra,8(sp)
    c114:	dc400117 	ldw	r17,4(sp)
    c118:	dc000017 	ldw	r16,0(sp)
    c11c:	dec00304 	addi	sp,sp,12
    c120:	f800283a 	ret

0000c124 <_calloc_r>:
    c124:	298b383a 	mul	r5,r5,r6
    c128:	defffe04 	addi	sp,sp,-8
    c12c:	dc000015 	stw	r16,0(sp)
    c130:	dfc00115 	stw	ra,4(sp)
    c134:	00074ec0 	call	74ec <_malloc_r>
    c138:	1021883a 	mov	r16,r2
    c13c:	01c00904 	movi	r7,36
    c140:	10000d26 	beq	r2,zero,c178 <_calloc_r+0x54>
    c144:	10ffff17 	ldw	r3,-4(r2)
    c148:	1009883a 	mov	r4,r2
    c14c:	00bfff04 	movi	r2,-4
    c150:	1886703a 	and	r3,r3,r2
    c154:	1887883a 	add	r3,r3,r2
    c158:	180d883a 	mov	r6,r3
    c15c:	000b883a 	mov	r5,zero
    c160:	38c01736 	bltu	r7,r3,c1c0 <_calloc_r+0x9c>
    c164:	008004c4 	movi	r2,19
    c168:	10c00836 	bltu	r2,r3,c18c <_calloc_r+0x68>
    c16c:	20000215 	stw	zero,8(r4)
    c170:	20000015 	stw	zero,0(r4)
    c174:	20000115 	stw	zero,4(r4)
    c178:	8005883a 	mov	r2,r16
    c17c:	dfc00117 	ldw	ra,4(sp)
    c180:	dc000017 	ldw	r16,0(sp)
    c184:	dec00204 	addi	sp,sp,8
    c188:	f800283a 	ret
    c18c:	008006c4 	movi	r2,27
    c190:	80000015 	stw	zero,0(r16)
    c194:	80000115 	stw	zero,4(r16)
    c198:	81000204 	addi	r4,r16,8
    c19c:	10fff32e 	bgeu	r2,r3,c16c <_calloc_r+0x48>
    c1a0:	80000215 	stw	zero,8(r16)
    c1a4:	80000315 	stw	zero,12(r16)
    c1a8:	81000404 	addi	r4,r16,16
    c1ac:	19ffef1e 	bne	r3,r7,c16c <_calloc_r+0x48>
    c1b0:	81000604 	addi	r4,r16,24
    c1b4:	80000415 	stw	zero,16(r16)
    c1b8:	80000515 	stw	zero,20(r16)
    c1bc:	003feb06 	br	c16c <_calloc_r+0x48>
    c1c0:	0007f900 	call	7f90 <memset>
    c1c4:	8005883a 	mov	r2,r16
    c1c8:	dfc00117 	ldw	ra,4(sp)
    c1cc:	dc000017 	ldw	r16,0(sp)
    c1d0:	dec00204 	addi	sp,sp,8
    c1d4:	f800283a 	ret

0000c1d8 <_close_r>:
    c1d8:	defffd04 	addi	sp,sp,-12
    c1dc:	dc000015 	stw	r16,0(sp)
    c1e0:	04000074 	movhi	r16,1
    c1e4:	84182e04 	addi	r16,r16,24760
    c1e8:	dc400115 	stw	r17,4(sp)
    c1ec:	80000015 	stw	zero,0(r16)
    c1f0:	2023883a 	mov	r17,r4
    c1f4:	2809883a 	mov	r4,r5
    c1f8:	dfc00215 	stw	ra,8(sp)
    c1fc:	000f4200 	call	f420 <close>
    c200:	1007883a 	mov	r3,r2
    c204:	00bfffc4 	movi	r2,-1
    c208:	18800626 	beq	r3,r2,c224 <_close_r+0x4c>
    c20c:	1805883a 	mov	r2,r3
    c210:	dfc00217 	ldw	ra,8(sp)
    c214:	dc400117 	ldw	r17,4(sp)
    c218:	dc000017 	ldw	r16,0(sp)
    c21c:	dec00304 	addi	sp,sp,12
    c220:	f800283a 	ret
    c224:	80800017 	ldw	r2,0(r16)
    c228:	103ff826 	beq	r2,zero,c20c <_close_r+0x34>
    c22c:	88800015 	stw	r2,0(r17)
    c230:	1805883a 	mov	r2,r3
    c234:	dfc00217 	ldw	ra,8(sp)
    c238:	dc400117 	ldw	r17,4(sp)
    c23c:	dc000017 	ldw	r16,0(sp)
    c240:	dec00304 	addi	sp,sp,12
    c244:	f800283a 	ret

0000c248 <_fclose_r>:
    c248:	defffc04 	addi	sp,sp,-16
    c24c:	dc400115 	stw	r17,4(sp)
    c250:	dc000015 	stw	r16,0(sp)
    c254:	dfc00315 	stw	ra,12(sp)
    c258:	dc800215 	stw	r18,8(sp)
    c25c:	2821883a 	mov	r16,r5
    c260:	2023883a 	mov	r17,r4
    c264:	28002926 	beq	r5,zero,c30c <_fclose_r+0xc4>
    c268:	00063680 	call	6368 <__sfp_lock_acquire>
    c26c:	88000226 	beq	r17,zero,c278 <_fclose_r+0x30>
    c270:	88800e17 	ldw	r2,56(r17)
    c274:	10002d26 	beq	r2,zero,c32c <_fclose_r+0xe4>
    c278:	8080030f 	ldh	r2,12(r16)
    c27c:	10002226 	beq	r2,zero,c308 <_fclose_r+0xc0>
    c280:	8809883a 	mov	r4,r17
    c284:	800b883a 	mov	r5,r16
    c288:	00060e00 	call	60e0 <_fflush_r>
    c28c:	1025883a 	mov	r18,r2
    c290:	80800b17 	ldw	r2,44(r16)
    c294:	10000426 	beq	r2,zero,c2a8 <_fclose_r+0x60>
    c298:	81400717 	ldw	r5,28(r16)
    c29c:	8809883a 	mov	r4,r17
    c2a0:	103ee83a 	callr	r2
    c2a4:	10002a16 	blt	r2,zero,c350 <_fclose_r+0x108>
    c2a8:	8080030b 	ldhu	r2,12(r16)
    c2ac:	1080200c 	andi	r2,r2,128
    c2b0:	1000231e 	bne	r2,zero,c340 <_fclose_r+0xf8>
    c2b4:	81400c17 	ldw	r5,48(r16)
    c2b8:	28000526 	beq	r5,zero,c2d0 <_fclose_r+0x88>
    c2bc:	80801004 	addi	r2,r16,64
    c2c0:	28800226 	beq	r5,r2,c2cc <_fclose_r+0x84>
    c2c4:	8809883a 	mov	r4,r17
    c2c8:	00069380 	call	6938 <_free_r>
    c2cc:	80000c15 	stw	zero,48(r16)
    c2d0:	81401117 	ldw	r5,68(r16)
    c2d4:	28000326 	beq	r5,zero,c2e4 <_fclose_r+0x9c>
    c2d8:	8809883a 	mov	r4,r17
    c2dc:	00069380 	call	6938 <_free_r>
    c2e0:	80001115 	stw	zero,68(r16)
    c2e4:	8000030d 	sth	zero,12(r16)
    c2e8:	000636c0 	call	636c <__sfp_lock_release>
    c2ec:	9005883a 	mov	r2,r18
    c2f0:	dfc00317 	ldw	ra,12(sp)
    c2f4:	dc800217 	ldw	r18,8(sp)
    c2f8:	dc400117 	ldw	r17,4(sp)
    c2fc:	dc000017 	ldw	r16,0(sp)
    c300:	dec00404 	addi	sp,sp,16
    c304:	f800283a 	ret
    c308:	000636c0 	call	636c <__sfp_lock_release>
    c30c:	0025883a 	mov	r18,zero
    c310:	9005883a 	mov	r2,r18
    c314:	dfc00317 	ldw	ra,12(sp)
    c318:	dc800217 	ldw	r18,8(sp)
    c31c:	dc400117 	ldw	r17,4(sp)
    c320:	dc000017 	ldw	r16,0(sp)
    c324:	dec00404 	addi	sp,sp,16
    c328:	f800283a 	ret
    c32c:	8809883a 	mov	r4,r17
    c330:	00063780 	call	6378 <__sinit>
    c334:	8080030f 	ldh	r2,12(r16)
    c338:	103fd11e 	bne	r2,zero,c280 <_fclose_r+0x38>
    c33c:	003ff206 	br	c308 <_fclose_r+0xc0>
    c340:	81400417 	ldw	r5,16(r16)
    c344:	8809883a 	mov	r4,r17
    c348:	00069380 	call	6938 <_free_r>
    c34c:	003fd906 	br	c2b4 <_fclose_r+0x6c>
    c350:	04bfffc4 	movi	r18,-1
    c354:	003fd406 	br	c2a8 <_fclose_r+0x60>

0000c358 <fclose>:
    c358:	00800074 	movhi	r2,1
    c35c:	10910c04 	addi	r2,r2,17456
    c360:	200b883a 	mov	r5,r4
    c364:	11000017 	ldw	r4,0(r2)
    c368:	000c2481 	jmpi	c248 <_fclose_r>

0000c36c <_fstat_r>:
    c36c:	defffd04 	addi	sp,sp,-12
    c370:	dc000015 	stw	r16,0(sp)
    c374:	04000074 	movhi	r16,1
    c378:	84182e04 	addi	r16,r16,24760
    c37c:	dc400115 	stw	r17,4(sp)
    c380:	80000015 	stw	zero,0(r16)
    c384:	2023883a 	mov	r17,r4
    c388:	2809883a 	mov	r4,r5
    c38c:	300b883a 	mov	r5,r6
    c390:	dfc00215 	stw	ra,8(sp)
    c394:	000f5040 	call	f504 <fstat>
    c398:	1007883a 	mov	r3,r2
    c39c:	00bfffc4 	movi	r2,-1
    c3a0:	18800626 	beq	r3,r2,c3bc <_fstat_r+0x50>
    c3a4:	1805883a 	mov	r2,r3
    c3a8:	dfc00217 	ldw	ra,8(sp)
    c3ac:	dc400117 	ldw	r17,4(sp)
    c3b0:	dc000017 	ldw	r16,0(sp)
    c3b4:	dec00304 	addi	sp,sp,12
    c3b8:	f800283a 	ret
    c3bc:	80800017 	ldw	r2,0(r16)
    c3c0:	103ff826 	beq	r2,zero,c3a4 <_fstat_r+0x38>
    c3c4:	88800015 	stw	r2,0(r17)
    c3c8:	1805883a 	mov	r2,r3
    c3cc:	dfc00217 	ldw	ra,8(sp)
    c3d0:	dc400117 	ldw	r17,4(sp)
    c3d4:	dc000017 	ldw	r16,0(sp)
    c3d8:	dec00304 	addi	sp,sp,12
    c3dc:	f800283a 	ret

0000c3e0 <htinit>:
    c3e0:	28800003 	ldbu	r2,0(r5)
    c3e4:	10000626 	beq	r2,zero,c400 <htinit+0x20>
    c3e8:	1105883a 	add	r2,r2,r4
    c3ec:	11800005 	stb	r6,0(r2)
    c3f0:	28800043 	ldbu	r2,1(r5)
    c3f4:	31800044 	addi	r6,r6,1
    c3f8:	29400044 	addi	r5,r5,1
    c3fc:	103ffa1e 	bne	r2,zero,c3e8 <htinit+0x8>
    c400:	f800283a 	ret

0000c404 <__hexdig_init>:
    c404:	defffd04 	addi	sp,sp,-12
    c408:	dc400015 	stw	r17,0(sp)
    c40c:	04400074 	movhi	r17,1
    c410:	8c583f04 	addi	r17,r17,24828
    c414:	dcc00115 	stw	r19,4(sp)
    c418:	8809883a 	mov	r4,r17
    c41c:	04c00684 	movi	r19,26
    c420:	01400074 	movhi	r5,1
    c424:	2949d404 	addi	r5,r5,10064
    c428:	01800404 	movi	r6,16
    c42c:	dfc00215 	stw	ra,8(sp)
    c430:	000c3e00 	call	c3e0 <htinit>
    c434:	980d883a 	mov	r6,r19
    c438:	8809883a 	mov	r4,r17
    c43c:	01400074 	movhi	r5,1
    c440:	2949d704 	addi	r5,r5,10076
    c444:	000c3e00 	call	c3e0 <htinit>
    c448:	8809883a 	mov	r4,r17
    c44c:	980d883a 	mov	r6,r19
    c450:	01400074 	movhi	r5,1
    c454:	2949d904 	addi	r5,r5,10084
    c458:	dfc00217 	ldw	ra,8(sp)
    c45c:	dcc00117 	ldw	r19,4(sp)
    c460:	dc400017 	ldw	r17,0(sp)
    c464:	dec00304 	addi	sp,sp,12
    c468:	000c3e01 	jmpi	c3e0 <htinit>

0000c46c <rshift>:
    c46c:	2807d17a 	srai	r3,r5,5
    c470:	20800417 	ldw	r2,16(r4)
    c474:	22400504 	addi	r9,r4,20
    c478:	480f883a 	mov	r7,r9
    c47c:	1880190e 	bge	r3,r2,c4e4 <rshift+0x78>
    c480:	1085883a 	add	r2,r2,r2
    c484:	18c7883a 	add	r3,r3,r3
    c488:	1085883a 	add	r2,r2,r2
    c48c:	18c7883a 	add	r3,r3,r3
    c490:	294007cc 	andi	r5,r5,31
    c494:	4891883a 	add	r8,r9,r2
    c498:	48cd883a 	add	r6,r9,r3
    c49c:	28001726 	beq	r5,zero,c4fc <rshift+0x90>
    c4a0:	30c00017 	ldw	r3,0(r6)
    c4a4:	00800804 	movi	r2,32
    c4a8:	31800104 	addi	r6,r6,4
    c4ac:	1155c83a 	sub	r10,r2,r5
    c4b0:	1946d83a 	srl	r3,r3,r5
    c4b4:	3200092e 	bgeu	r6,r8,c4dc <rshift+0x70>
    c4b8:	30800017 	ldw	r2,0(r6)
    c4bc:	1284983a 	sll	r2,r2,r10
    c4c0:	10c4b03a 	or	r2,r2,r3
    c4c4:	38800015 	stw	r2,0(r7)
    c4c8:	30c00017 	ldw	r3,0(r6)
    c4cc:	31800104 	addi	r6,r6,4
    c4d0:	39c00104 	addi	r7,r7,4
    c4d4:	1946d83a 	srl	r3,r3,r5
    c4d8:	323ff736 	bltu	r6,r8,c4b8 <rshift+0x4c>
    c4dc:	38c00015 	stw	r3,0(r7)
    c4e0:	18000c1e 	bne	r3,zero,c514 <rshift+0xa8>
    c4e4:	3a45c83a 	sub	r2,r7,r9
    c4e8:	1005d0ba 	srai	r2,r2,2
    c4ec:	20800415 	stw	r2,16(r4)
    c4f0:	1000011e 	bne	r2,zero,c4f8 <rshift+0x8c>
    c4f4:	20000515 	stw	zero,20(r4)
    c4f8:	f800283a 	ret
    c4fc:	323ff92e 	bgeu	r6,r8,c4e4 <rshift+0x78>
    c500:	30800017 	ldw	r2,0(r6)
    c504:	31800104 	addi	r6,r6,4
    c508:	38800015 	stw	r2,0(r7)
    c50c:	39c00104 	addi	r7,r7,4
    c510:	003ffa06 	br	c4fc <rshift+0x90>
    c514:	39c00104 	addi	r7,r7,4
    c518:	003ff206 	br	c4e4 <rshift+0x78>

0000c51c <__gethex>:
    c51c:	defff304 	addi	sp,sp,-52
    c520:	dd400815 	stw	r21,32(sp)
    c524:	dd000715 	stw	r20,28(sp)
    c528:	dcc00615 	stw	r19,24(sp)
    c52c:	dc400415 	stw	r17,16(sp)
    c530:	dfc00c15 	stw	ra,48(sp)
    c534:	df000b15 	stw	fp,44(sp)
    c538:	ddc00a15 	stw	r23,40(sp)
    c53c:	dd800915 	stw	r22,36(sp)
    c540:	dc800515 	stw	r18,20(sp)
    c544:	dc000315 	stw	r16,12(sp)
    c548:	04400074 	movhi	r17,1
    c54c:	8c583f04 	addi	r17,r17,24828
    c550:	88800c03 	ldbu	r2,48(r17)
    c554:	202b883a 	mov	r21,r4
    c558:	2827883a 	mov	r19,r5
    c55c:	3029883a 	mov	r20,r6
    c560:	d9c00115 	stw	r7,4(sp)
    c564:	10006e26 	beq	r2,zero,c720 <__gethex+0x204>
    c568:	99800017 	ldw	r6,0(r19)
    c56c:	00800c04 	movi	r2,48
    c570:	31000083 	ldbu	r4,2(r6)
    c574:	30c00084 	addi	r3,r6,2
    c578:	20806f1e 	bne	r4,r2,c738 <__gethex+0x21c>
    c57c:	200b883a 	mov	r5,r4
    c580:	3007883a 	mov	r3,r6
    c584:	188000c3 	ldbu	r2,3(r3)
    c588:	18c00044 	addi	r3,r3,1
    c58c:	1009883a 	mov	r4,r2
    c590:	117ffc26 	beq	r2,r5,c584 <__gethex+0x68>
    c594:	1997c83a 	sub	r11,r3,r6
    c598:	19400084 	addi	r5,r3,2
    c59c:	2445883a 	add	r2,r4,r17
    c5a0:	10c00003 	ldbu	r3,0(r2)
    c5a4:	18002d26 	beq	r3,zero,c65c <__gethex+0x140>
    c5a8:	29000003 	ldbu	r4,0(r5)
    c5ac:	2825883a 	mov	r18,r5
    c5b0:	000d883a 	mov	r6,zero
    c5b4:	0013883a 	mov	r9,zero
    c5b8:	21003fcc 	andi	r4,r4,255
    c5bc:	2445883a 	add	r2,r4,r17
    c5c0:	10c00003 	ldbu	r3,0(r2)
    c5c4:	18000526 	beq	r3,zero,c5dc <__gethex+0xc0>
    c5c8:	29400044 	addi	r5,r5,1
    c5cc:	29000003 	ldbu	r4,0(r5)
    c5d0:	2445883a 	add	r2,r4,r17
    c5d4:	10c00003 	ldbu	r3,0(r2)
    c5d8:	183ffb1e 	bne	r3,zero,c5c8 <__gethex+0xac>
    c5dc:	00800b84 	movi	r2,46
    c5e0:	20805826 	beq	r4,r2,c744 <__gethex+0x228>
    c5e4:	30007a26 	beq	r6,zero,c7d0 <__gethex+0x2b4>
    c5e8:	2985c83a 	sub	r2,r5,r6
    c5ec:	1085883a 	add	r2,r2,r2
    c5f0:	1085883a 	add	r2,r2,r2
    c5f4:	00adc83a 	sub	r22,zero,r2
    c5f8:	2821883a 	mov	r16,r5
    c5fc:	80c00003 	ldbu	r3,0(r16)
    c600:	00801404 	movi	r2,80
    c604:	18801e26 	beq	r3,r2,c680 <__gethex+0x164>
    c608:	00801c04 	movi	r2,112
    c60c:	18801c26 	beq	r3,r2,c680 <__gethex+0x164>
    c610:	800d883a 	mov	r6,r16
    c614:	4805003a 	cmpeq	r2,r9,zero
    c618:	99800015 	stw	r6,0(r19)
    c61c:	1000861e 	bne	r2,zero,c838 <__gethex+0x31c>
    c620:	58003d26 	beq	r11,zero,c718 <__gethex+0x1fc>
    c624:	0025883a 	mov	r18,zero
    c628:	9005883a 	mov	r2,r18
    c62c:	dfc00c17 	ldw	ra,48(sp)
    c630:	df000b17 	ldw	fp,44(sp)
    c634:	ddc00a17 	ldw	r23,40(sp)
    c638:	dd800917 	ldw	r22,36(sp)
    c63c:	dd400817 	ldw	r21,32(sp)
    c640:	dd000717 	ldw	r20,28(sp)
    c644:	dcc00617 	ldw	r19,24(sp)
    c648:	dc800517 	ldw	r18,20(sp)
    c64c:	dc400417 	ldw	r17,16(sp)
    c650:	dc000317 	ldw	r16,12(sp)
    c654:	dec00d04 	addi	sp,sp,52
    c658:	f800283a 	ret
    c65c:	00800b84 	movi	r2,46
    c660:	20804a26 	beq	r4,r2,c78c <__gethex+0x270>
    c664:	2821883a 	mov	r16,r5
    c668:	80c00003 	ldbu	r3,0(r16)
    c66c:	00801404 	movi	r2,80
    c670:	2825883a 	mov	r18,r5
    c674:	02400044 	movi	r9,1
    c678:	002d883a 	mov	r22,zero
    c67c:	18bfe21e 	bne	r3,r2,c608 <__gethex+0xec>
    c680:	80c00043 	ldbu	r3,1(r16)
    c684:	00800ac4 	movi	r2,43
    c688:	81000044 	addi	r4,r16,1
    c68c:	18804a26 	beq	r3,r2,c7b8 <__gethex+0x29c>
    c690:	00800b44 	movi	r2,45
    c694:	18804c26 	beq	r3,r2,c7c8 <__gethex+0x2ac>
    c698:	0015883a 	mov	r10,zero
    c69c:	1c45883a 	add	r2,r3,r17
    c6a0:	10800003 	ldbu	r2,0(r2)
    c6a4:	103fda26 	beq	r2,zero,c610 <__gethex+0xf4>
    c6a8:	02000644 	movi	r8,25
    c6ac:	40bfd816 	blt	r8,r2,c610 <__gethex+0xf4>
    c6b0:	20c00043 	ldbu	r3,1(r4)
    c6b4:	11fffc04 	addi	r7,r2,-16
    c6b8:	00800074 	movhi	r2,1
    c6bc:	10983f04 	addi	r2,r2,24828
    c6c0:	1887883a 	add	r3,r3,r2
    c6c4:	18800003 	ldbu	r2,0(r3)
    c6c8:	21800044 	addi	r6,r4,1
    c6cc:	10000d26 	beq	r2,zero,c704 <__gethex+0x1e8>
    c6d0:	100b883a 	mov	r5,r2
    c6d4:	4080020e 	bge	r8,r2,c6e0 <__gethex+0x1c4>
    c6d8:	00000a06 	br	c704 <__gethex+0x1e8>
    c6dc:	41000916 	blt	r8,r4,c704 <__gethex+0x1e8>
    c6e0:	31800044 	addi	r6,r6,1
    c6e4:	30800003 	ldbu	r2,0(r6)
    c6e8:	38c002a4 	muli	r3,r7,10
    c6ec:	1445883a 	add	r2,r2,r17
    c6f0:	11000003 	ldbu	r4,0(r2)
    c6f4:	1947883a 	add	r3,r3,r5
    c6f8:	19fffc04 	addi	r7,r3,-16
    c6fc:	200b883a 	mov	r5,r4
    c700:	203ff61e 	bne	r4,zero,c6dc <__gethex+0x1c0>
    c704:	5005003a 	cmpeq	r2,r10,zero
    c708:	1000011e 	bne	r2,zero,c710 <__gethex+0x1f4>
    c70c:	01cfc83a 	sub	r7,zero,r7
    c710:	b1ed883a 	add	r22,r22,r7
    c714:	003fbf06 	br	c614 <__gethex+0xf8>
    c718:	04800184 	movi	r18,6
    c71c:	003fc206 	br	c628 <__gethex+0x10c>
    c720:	000c4040 	call	c404 <__hexdig_init>
    c724:	99800017 	ldw	r6,0(r19)
    c728:	00800c04 	movi	r2,48
    c72c:	31000083 	ldbu	r4,2(r6)
    c730:	30c00084 	addi	r3,r6,2
    c734:	20bf9126 	beq	r4,r2,c57c <__gethex+0x60>
    c738:	180b883a 	mov	r5,r3
    c73c:	0017883a 	mov	r11,zero
    c740:	003f9606 	br	c59c <__gethex+0x80>
    c744:	303fa81e 	bne	r6,zero,c5e8 <__gethex+0xcc>
    c748:	29400044 	addi	r5,r5,1
    c74c:	28800003 	ldbu	r2,0(r5)
    c750:	1445883a 	add	r2,r2,r17
    c754:	10c00003 	ldbu	r3,0(r2)
    c758:	1800ad26 	beq	r3,zero,ca10 <__gethex+0x4f4>
    c75c:	2809883a 	mov	r4,r5
    c760:	21000044 	addi	r4,r4,1
    c764:	20800003 	ldbu	r2,0(r4)
    c768:	1445883a 	add	r2,r2,r17
    c76c:	10c00003 	ldbu	r3,0(r2)
    c770:	183ffb1e 	bne	r3,zero,c760 <__gethex+0x244>
    c774:	2145c83a 	sub	r2,r4,r5
    c778:	1085883a 	add	r2,r2,r2
    c77c:	1085883a 	add	r2,r2,r2
    c780:	00adc83a 	sub	r22,zero,r2
    c784:	200b883a 	mov	r5,r4
    c788:	003f9b06 	br	c5f8 <__gethex+0xdc>
    c78c:	29000043 	ldbu	r4,1(r5)
    c790:	00800074 	movhi	r2,1
    c794:	10983f04 	addi	r2,r2,24828
    c798:	2c000044 	addi	r16,r5,1
    c79c:	2085883a 	add	r2,r4,r2
    c7a0:	10c00003 	ldbu	r3,0(r2)
    c7a4:	18000d1e 	bne	r3,zero,c7dc <__gethex+0x2c0>
    c7a8:	2825883a 	mov	r18,r5
    c7ac:	02400044 	movi	r9,1
    c7b0:	002d883a 	mov	r22,zero
    c7b4:	003f9106 	br	c5fc <__gethex+0xe0>
    c7b8:	0015883a 	mov	r10,zero
    c7bc:	21000044 	addi	r4,r4,1
    c7c0:	20c00003 	ldbu	r3,0(r4)
    c7c4:	003fb506 	br	c69c <__gethex+0x180>
    c7c8:	02800044 	movi	r10,1
    c7cc:	003ffb06 	br	c7bc <__gethex+0x2a0>
    c7d0:	2821883a 	mov	r16,r5
    c7d4:	002d883a 	mov	r22,zero
    c7d8:	003f8806 	br	c5fc <__gethex+0xe0>
    c7dc:	00800c04 	movi	r2,48
    c7e0:	20800e1e 	bne	r4,r2,c81c <__gethex+0x300>
    c7e4:	2007883a 	mov	r3,r4
    c7e8:	800b883a 	mov	r5,r16
    c7ec:	29400044 	addi	r5,r5,1
    c7f0:	29000003 	ldbu	r4,0(r5)
    c7f4:	20803fcc 	andi	r2,r4,255
    c7f8:	10fffc26 	beq	r2,r3,c7ec <__gethex+0x2d0>
    c7fc:	1445883a 	add	r2,r2,r17
    c800:	10c00003 	ldbu	r3,0(r2)
    c804:	1800071e 	bne	r3,zero,c824 <__gethex+0x308>
    c808:	02c00044 	movi	r11,1
    c80c:	800d883a 	mov	r6,r16
    c810:	2825883a 	mov	r18,r5
    c814:	5813883a 	mov	r9,r11
    c818:	003f6706 	br	c5b8 <__gethex+0x9c>
    c81c:	81000003 	ldbu	r4,0(r16)
    c820:	800b883a 	mov	r5,r16
    c824:	800d883a 	mov	r6,r16
    c828:	2825883a 	mov	r18,r5
    c82c:	02c00044 	movi	r11,1
    c830:	0013883a 	mov	r9,zero
    c834:	003f6006 	br	c5b8 <__gethex+0x9c>
    c838:	8485c83a 	sub	r2,r16,r18
    c83c:	10bfffc4 	addi	r2,r2,-1
    c840:	00c001c4 	movi	r3,7
    c844:	1880700e 	bge	r3,r2,ca08 <__gethex+0x4ec>
    c848:	000b883a 	mov	r5,zero
    c84c:	1005d07a 	srai	r2,r2,1
    c850:	29400044 	addi	r5,r5,1
    c854:	18bffd16 	blt	r3,r2,c84c <__gethex+0x330>
    c858:	a809883a 	mov	r4,r21
    c85c:	00085a80 	call	85a8 <_Balloc>
    c860:	1027883a 	mov	r19,r2
    c864:	10800504 	addi	r2,r2,20
    c868:	d8800215 	stw	r2,8(sp)
    c86c:	9400522e 	bgeu	r18,r16,c9b8 <__gethex+0x49c>
    c870:	da000217 	ldw	r8,8(sp)
    c874:	800b883a 	mov	r5,r16
    c878:	000f883a 	mov	r7,zero
    c87c:	0009883a 	mov	r4,zero
    c880:	02400b84 	movi	r9,46
    c884:	02800804 	movi	r10,32
    c888:	297fffc4 	addi	r5,r5,-1
    c88c:	28c00003 	ldbu	r3,0(r5)
    c890:	1a400826 	beq	r3,r9,c8b4 <__gethex+0x398>
    c894:	380d883a 	mov	r6,r7
    c898:	3a802726 	beq	r7,r10,c938 <__gethex+0x41c>
    c89c:	39c00104 	addi	r7,r7,4
    c8a0:	1c47883a 	add	r3,r3,r17
    c8a4:	18800003 	ldbu	r2,0(r3)
    c8a8:	108003cc 	andi	r2,r2,15
    c8ac:	1184983a 	sll	r2,r2,r6
    c8b0:	2088b03a 	or	r4,r4,r2
    c8b4:	917ff436 	bltu	r18,r5,c888 <__gethex+0x36c>
    c8b8:	d8c00217 	ldw	r3,8(sp)
    c8bc:	40800104 	addi	r2,r8,4
    c8c0:	41000015 	stw	r4,0(r8)
    c8c4:	10c5c83a 	sub	r2,r2,r3
    c8c8:	1021d0ba 	srai	r16,r2,2
    c8cc:	9c000415 	stw	r16,16(r19)
    c8d0:	00080500 	call	8050 <__hi0bits>
    c8d4:	8006917a 	slli	r3,r16,5
    c8d8:	a5c00017 	ldw	r23,0(r20)
    c8dc:	1885c83a 	sub	r2,r3,r2
    c8e0:	b8801c16 	blt	r23,r2,c954 <__gethex+0x438>
    c8e4:	15c00a16 	blt	r2,r23,c910 <__gethex+0x3f4>
    c8e8:	0039883a 	mov	fp,zero
    c8ec:	a0800217 	ldw	r2,8(r20)
    c8f0:	1580340e 	bge	r2,r22,c9c4 <__gethex+0x4a8>
    c8f4:	a809883a 	mov	r4,r21
    c8f8:	980b883a 	mov	r5,r19
    c8fc:	00080280 	call	8028 <_Bfree>
    c900:	d8c00d17 	ldw	r3,52(sp)
    c904:	048028c4 	movi	r18,163
    c908:	18000015 	stw	zero,0(r3)
    c90c:	003f4606 	br	c628 <__gethex+0x10c>
    c910:	b8a1c83a 	sub	r16,r23,r2
    c914:	980b883a 	mov	r5,r19
    c918:	a809883a 	mov	r4,r21
    c91c:	800d883a 	mov	r6,r16
    c920:	000896c0 	call	896c <__lshift>
    c924:	1027883a 	mov	r19,r2
    c928:	b42dc83a 	sub	r22,r22,r16
    c92c:	10800504 	addi	r2,r2,20
    c930:	d8800215 	stw	r2,8(sp)
    c934:	003fec06 	br	c8e8 <__gethex+0x3cc>
    c938:	41000015 	stw	r4,0(r8)
    c93c:	28c00003 	ldbu	r3,0(r5)
    c940:	01c00104 	movi	r7,4
    c944:	000d883a 	mov	r6,zero
    c948:	41d1883a 	add	r8,r8,r7
    c94c:	0009883a 	mov	r4,zero
    c950:	003fd306 	br	c8a0 <__gethex+0x384>
    c954:	15e1c83a 	sub	r16,r2,r23
    c958:	9809883a 	mov	r4,r19
    c95c:	800b883a 	mov	r5,r16
    c960:	00085200 	call	8520 <__any_on>
    c964:	1000061e 	bne	r2,zero,c980 <__gethex+0x464>
    c968:	0039883a 	mov	fp,zero
    c96c:	9809883a 	mov	r4,r19
    c970:	800b883a 	mov	r5,r16
    c974:	000c46c0 	call	c46c <rshift>
    c978:	b42d883a 	add	r22,r22,r16
    c97c:	003fdb06 	br	c8ec <__gethex+0x3d0>
    c980:	817fffc4 	addi	r5,r16,-1
    c984:	2805d17a 	srai	r2,r5,5
    c988:	d8c00217 	ldw	r3,8(sp)
    c98c:	290007cc 	andi	r4,r5,31
    c990:	1085883a 	add	r2,r2,r2
    c994:	1085883a 	add	r2,r2,r2
    c998:	01800044 	movi	r6,1
    c99c:	10c5883a 	add	r2,r2,r3
    c9a0:	3108983a 	sll	r4,r6,r4
    c9a4:	10c00017 	ldw	r3,0(r2)
    c9a8:	20c8703a 	and	r4,r4,r3
    c9ac:	20001a1e 	bne	r4,zero,ca18 <__gethex+0x4fc>
    c9b0:	3039883a 	mov	fp,r6
    c9b4:	003fed06 	br	c96c <__gethex+0x450>
    c9b8:	1011883a 	mov	r8,r2
    c9bc:	0009883a 	mov	r4,zero
    c9c0:	003fbd06 	br	c8b8 <__gethex+0x39c>
    c9c4:	a1000117 	ldw	r4,4(r20)
    c9c8:	b1001a16 	blt	r22,r4,ca34 <__gethex+0x518>
    c9cc:	04800044 	movi	r18,1
    c9d0:	e0000826 	beq	fp,zero,c9f4 <__gethex+0x4d8>
    c9d4:	a1000317 	ldw	r4,12(r20)
    c9d8:	00800084 	movi	r2,2
    c9dc:	20809426 	beq	r4,r2,cc30 <__gethex+0x714>
    c9e0:	008000c4 	movi	r2,3
    c9e4:	20805826 	beq	r4,r2,cb48 <__gethex+0x62c>
    c9e8:	00800044 	movi	r2,1
    c9ec:	20803f26 	beq	r4,r2,caec <__gethex+0x5d0>
    c9f0:	94800414 	ori	r18,r18,16
    c9f4:	d8800d17 	ldw	r2,52(sp)
    c9f8:	d8c00117 	ldw	r3,4(sp)
    c9fc:	14c00015 	stw	r19,0(r2)
    ca00:	1d800015 	stw	r22,0(r3)
    ca04:	003f0806 	br	c628 <__gethex+0x10c>
    ca08:	000b883a 	mov	r5,zero
    ca0c:	003f9206 	br	c858 <__gethex+0x33c>
    ca10:	002d883a 	mov	r22,zero
    ca14:	003ef806 	br	c5f8 <__gethex+0xdc>
    ca18:	3140160e 	bge	r6,r5,ca74 <__gethex+0x558>
    ca1c:	9809883a 	mov	r4,r19
    ca20:	817fff84 	addi	r5,r16,-2
    ca24:	00085200 	call	8520 <__any_on>
    ca28:	10001226 	beq	r2,zero,ca74 <__gethex+0x558>
    ca2c:	070000c4 	movi	fp,3
    ca30:	003fce06 	br	c96c <__gethex+0x450>
    ca34:	25a3c83a 	sub	r17,r4,r22
    ca38:	8dc01016 	blt	r17,r23,ca7c <__gethex+0x560>
    ca3c:	a0c00317 	ldw	r3,12(r20)
    ca40:	00800084 	movi	r2,2
    ca44:	18809326 	beq	r3,r2,cc94 <__gethex+0x778>
    ca48:	008000c4 	movi	r2,3
    ca4c:	18808e26 	beq	r3,r2,cc88 <__gethex+0x76c>
    ca50:	00800044 	movi	r2,1
    ca54:	18807b26 	beq	r3,r2,cc44 <__gethex+0x728>
    ca58:	a809883a 	mov	r4,r21
    ca5c:	980b883a 	mov	r5,r19
    ca60:	00080280 	call	8028 <_Bfree>
    ca64:	d8c00d17 	ldw	r3,52(sp)
    ca68:	04801404 	movi	r18,80
    ca6c:	18000015 	stw	zero,0(r3)
    ca70:	003eed06 	br	c628 <__gethex+0x10c>
    ca74:	07000084 	movi	fp,2
    ca78:	003fbc06 	br	c96c <__gethex+0x450>
    ca7c:	8c3fffc4 	addi	r16,r17,-1
    ca80:	e0001426 	beq	fp,zero,cad4 <__gethex+0x5b8>
    ca84:	07000044 	movi	fp,1
    ca88:	8005d17a 	srai	r2,r16,5
    ca8c:	d8c00217 	ldw	r3,8(sp)
    ca90:	814007cc 	andi	r5,r16,31
    ca94:	1085883a 	add	r2,r2,r2
    ca98:	1085883a 	add	r2,r2,r2
    ca9c:	10c5883a 	add	r2,r2,r3
    caa0:	00c00044 	movi	r3,1
    caa4:	1946983a 	sll	r3,r3,r5
    caa8:	11000017 	ldw	r4,0(r2)
    caac:	1906703a 	and	r3,r3,r4
    cab0:	18000126 	beq	r3,zero,cab8 <__gethex+0x59c>
    cab4:	e7000094 	ori	fp,fp,2
    cab8:	880b883a 	mov	r5,r17
    cabc:	9809883a 	mov	r4,r19
    cac0:	000c46c0 	call	c46c <rshift>
    cac4:	a5800117 	ldw	r22,4(r20)
    cac8:	bc6fc83a 	sub	r23,r23,r17
    cacc:	04800084 	movi	r18,2
    cad0:	003fbf06 	br	c9d0 <__gethex+0x4b4>
    cad4:	043fec0e 	bge	zero,r16,ca88 <__gethex+0x56c>
    cad8:	9809883a 	mov	r4,r19
    cadc:	800b883a 	mov	r5,r16
    cae0:	00085200 	call	8520 <__any_on>
    cae4:	1039883a 	mov	fp,r2
    cae8:	003fe706 	br	ca88 <__gethex+0x56c>
    caec:	e080008c 	andi	r2,fp,2
    caf0:	103fbf26 	beq	r2,zero,c9f0 <__gethex+0x4d4>
    caf4:	d8c00217 	ldw	r3,8(sp)
    caf8:	18800017 	ldw	r2,0(r3)
    cafc:	e084b03a 	or	r2,fp,r2
    cb00:	1104703a 	and	r2,r2,r4
    cb04:	103fba26 	beq	r2,zero,c9f0 <__gethex+0x4d4>
    cb08:	9c000417 	ldw	r16,16(r19)
    cb0c:	d8c00217 	ldw	r3,8(sp)
    cb10:	017fffc4 	movi	r5,-1
    cb14:	8405883a 	add	r2,r16,r16
    cb18:	10b9883a 	add	fp,r2,r2
    cb1c:	1f09883a 	add	r4,r3,fp
    cb20:	dc000015 	stw	r16,0(sp)
    cb24:	00000306 	br	cb34 <__gethex+0x618>
    cb28:	18000015 	stw	zero,0(r3)
    cb2c:	18c00104 	addi	r3,r3,4
    cb30:	1900082e 	bgeu	r3,r4,cb54 <__gethex+0x638>
    cb34:	18800017 	ldw	r2,0(r3)
    cb38:	117ffb26 	beq	r2,r5,cb28 <__gethex+0x60c>
    cb3c:	10800044 	addi	r2,r2,1
    cb40:	18800015 	stw	r2,0(r3)
    cb44:	00001f06 	br	cbc4 <__gethex+0x6a8>
    cb48:	d8800e17 	ldw	r2,56(sp)
    cb4c:	103fa826 	beq	r2,zero,c9f0 <__gethex+0x4d4>
    cb50:	003fed06 	br	cb08 <__gethex+0x5ec>
    cb54:	98800217 	ldw	r2,8(r19)
    cb58:	80801316 	blt	r16,r2,cba8 <__gethex+0x68c>
    cb5c:	99400117 	ldw	r5,4(r19)
    cb60:	a809883a 	mov	r4,r21
    cb64:	29400044 	addi	r5,r5,1
    cb68:	00085a80 	call	85a8 <_Balloc>
    cb6c:	99800417 	ldw	r6,16(r19)
    cb70:	99400304 	addi	r5,r19,12
    cb74:	11000304 	addi	r4,r2,12
    cb78:	318d883a 	add	r6,r6,r6
    cb7c:	318d883a 	add	r6,r6,r6
    cb80:	31800204 	addi	r6,r6,8
    cb84:	1023883a 	mov	r17,r2
    cb88:	0007e100 	call	7e10 <memcpy>
    cb8c:	980b883a 	mov	r5,r19
    cb90:	a809883a 	mov	r4,r21
    cb94:	00080280 	call	8028 <_Bfree>
    cb98:	8c000417 	ldw	r16,16(r17)
    cb9c:	88800504 	addi	r2,r17,20
    cba0:	8827883a 	mov	r19,r17
    cba4:	d8800215 	stw	r2,8(sp)
    cba8:	8405883a 	add	r2,r16,r16
    cbac:	1085883a 	add	r2,r2,r2
    cbb0:	14c5883a 	add	r2,r2,r19
    cbb4:	84000044 	addi	r16,r16,1
    cbb8:	00c00044 	movi	r3,1
    cbbc:	10c00515 	stw	r3,20(r2)
    cbc0:	9c000415 	stw	r16,16(r19)
    cbc4:	00800084 	movi	r2,2
    cbc8:	90801426 	beq	r18,r2,cc1c <__gethex+0x700>
    cbcc:	d8800017 	ldw	r2,0(sp)
    cbd0:	14000b16 	blt	r2,r16,cc00 <__gethex+0x6e4>
    cbd4:	bc0007cc 	andi	r16,r23,31
    cbd8:	8000021e 	bne	r16,zero,cbe4 <__gethex+0x6c8>
    cbdc:	94800814 	ori	r18,r18,32
    cbe0:	003f8406 	br	c9f4 <__gethex+0x4d8>
    cbe4:	d8c00217 	ldw	r3,8(sp)
    cbe8:	1f05883a 	add	r2,r3,fp
    cbec:	113fff17 	ldw	r4,-4(r2)
    cbf0:	00080500 	call	8050 <__hi0bits>
    cbf4:	00c00804 	movi	r3,32
    cbf8:	1c07c83a 	sub	r3,r3,r16
    cbfc:	10fff70e 	bge	r2,r3,cbdc <__gethex+0x6c0>
    cc00:	9809883a 	mov	r4,r19
    cc04:	01400044 	movi	r5,1
    cc08:	000c46c0 	call	c46c <rshift>
    cc0c:	a0800217 	ldw	r2,8(r20)
    cc10:	b5800044 	addi	r22,r22,1
    cc14:	15bf3716 	blt	r2,r22,c8f4 <__gethex+0x3d8>
    cc18:	003ff006 	br	cbdc <__gethex+0x6c0>
    cc1c:	a0800017 	ldw	r2,0(r20)
    cc20:	10bfffc4 	addi	r2,r2,-1
    cc24:	b8801e26 	beq	r23,r2,cca0 <__gethex+0x784>
    cc28:	04800884 	movi	r18,34
    cc2c:	003f7106 	br	c9f4 <__gethex+0x4d8>
    cc30:	d8c00e17 	ldw	r3,56(sp)
    cc34:	00800044 	movi	r2,1
    cc38:	10c5c83a 	sub	r2,r2,r3
    cc3c:	103f6c26 	beq	r2,zero,c9f0 <__gethex+0x4d4>
    cc40:	003fb106 	br	cb08 <__gethex+0x5ec>
    cc44:	bc7f841e 	bne	r23,r17,ca58 <__gethex+0x53c>
    cc48:	1dc0050e 	bge	r3,r23,cc60 <__gethex+0x744>
    cc4c:	b8cbc83a 	sub	r5,r23,r3
    cc50:	9809883a 	mov	r4,r19
    cc54:	00085200 	call	8520 <__any_on>
    cc58:	103f7f26 	beq	r2,zero,ca58 <__gethex+0x53c>
    cc5c:	a1000117 	ldw	r4,4(r20)
    cc60:	d8800117 	ldw	r2,4(sp)
    cc64:	d8c00217 	ldw	r3,8(sp)
    cc68:	04000044 	movi	r16,1
    cc6c:	11000015 	stw	r4,0(r2)
    cc70:	d8800d17 	ldw	r2,52(sp)
    cc74:	04801884 	movi	r18,98
    cc78:	1c000015 	stw	r16,0(r3)
    cc7c:	14c00015 	stw	r19,0(r2)
    cc80:	9c000415 	stw	r16,16(r19)
    cc84:	003e6806 	br	c628 <__gethex+0x10c>
    cc88:	d8c00e17 	ldw	r3,56(sp)
    cc8c:	183f7226 	beq	r3,zero,ca58 <__gethex+0x53c>
    cc90:	003ff306 	br	cc60 <__gethex+0x744>
    cc94:	d8800e17 	ldw	r2,56(sp)
    cc98:	103ff126 	beq	r2,zero,cc60 <__gethex+0x744>
    cc9c:	003f6e06 	br	ca58 <__gethex+0x53c>
    cca0:	b805d17a 	srai	r2,r23,5
    cca4:	d8c00217 	ldw	r3,8(sp)
    cca8:	b94007cc 	andi	r5,r23,31
    ccac:	1085883a 	add	r2,r2,r2
    ccb0:	1085883a 	add	r2,r2,r2
    ccb4:	10c5883a 	add	r2,r2,r3
    ccb8:	00c00044 	movi	r3,1
    ccbc:	1946983a 	sll	r3,r3,r5
    ccc0:	11000017 	ldw	r4,0(r2)
    ccc4:	1906703a 	and	r3,r3,r4
    ccc8:	183fd726 	beq	r3,zero,cc28 <__gethex+0x70c>
    cccc:	04800844 	movi	r18,33
    ccd0:	003f4806 	br	c9f4 <__gethex+0x4d8>

0000ccd4 <L_shift>:
    ccd4:	00800204 	movi	r2,8
    ccd8:	1185c83a 	sub	r2,r2,r6
    ccdc:	1085883a 	add	r2,r2,r2
    cce0:	21c00017 	ldw	r7,0(r4)
    cce4:	1093883a 	add	r9,r2,r2
    cce8:	00800804 	movi	r2,32
    ccec:	200d883a 	mov	r6,r4
    ccf0:	1251c83a 	sub	r8,r2,r9
    ccf4:	31800104 	addi	r6,r6,4
    ccf8:	3805883a 	mov	r2,r7
    ccfc:	31c00017 	ldw	r7,0(r6)
    cd00:	3a08983a 	sll	r4,r7,r8
    cd04:	3a46d83a 	srl	r3,r7,r9
    cd08:	1104b03a 	or	r2,r2,r4
    cd0c:	180f883a 	mov	r7,r3
    cd10:	30bfff15 	stw	r2,-4(r6)
    cd14:	30c00015 	stw	r3,0(r6)
    cd18:	317ff636 	bltu	r6,r5,ccf4 <L_shift+0x20>
    cd1c:	f800283a 	ret

0000cd20 <__hexnan>:
    cd20:	defff404 	addi	sp,sp,-48
    cd24:	dd800815 	stw	r22,32(sp)
    cd28:	05800074 	movhi	r22,1
    cd2c:	b5983f04 	addi	r22,r22,24828
    cd30:	b0800c03 	ldbu	r2,48(r22)
    cd34:	dcc00515 	stw	r19,20(sp)
    cd38:	dc000215 	stw	r16,8(sp)
    cd3c:	dfc00b15 	stw	ra,44(sp)
    cd40:	df000a15 	stw	fp,40(sp)
    cd44:	ddc00915 	stw	r23,36(sp)
    cd48:	dd400715 	stw	r21,28(sp)
    cd4c:	dd000615 	stw	r20,24(sp)
    cd50:	dc800415 	stw	r18,16(sp)
    cd54:	dc400315 	stw	r17,12(sp)
    cd58:	d9000115 	stw	r4,4(sp)
    cd5c:	2821883a 	mov	r16,r5
    cd60:	3027883a 	mov	r19,r6
    cd64:	10007426 	beq	r2,zero,cf38 <__hexnan+0x218>
    cd68:	80c00017 	ldw	r3,0(r16)
    cd6c:	1805d17a 	srai	r2,r3,5
    cd70:	18c007cc 	andi	r3,r3,31
    cd74:	1839003a 	cmpeq	fp,r3,zero
    cd78:	1085883a 	add	r2,r2,r2
    cd7c:	1085883a 	add	r2,r2,r2
    cd80:	d8c00015 	stw	r3,0(sp)
    cd84:	14c5883a 	add	r2,r2,r19
    cd88:	e000011e 	bne	fp,zero,cd90 <__hexnan+0x70>
    cd8c:	10800104 	addi	r2,r2,4
    cd90:	d8c00117 	ldw	r3,4(sp)
    cd94:	153fff04 	addi	r20,r2,-4
    cd98:	a021883a 	mov	r16,r20
    cd9c:	1c400017 	ldw	r17,0(r3)
    cda0:	a02b883a 	mov	r21,r20
    cda4:	0025883a 	mov	r18,zero
    cda8:	002f883a 	mov	r23,zero
    cdac:	000d883a 	mov	r6,zero
    cdb0:	103fff15 	stw	zero,-4(r2)
    cdb4:	8c400044 	addi	r17,r17,1
    cdb8:	89000003 	ldbu	r4,0(r17)
    cdbc:	20000e26 	beq	r4,zero,cdf8 <__hexnan+0xd8>
    cdc0:	2585883a 	add	r2,r4,r22
    cdc4:	10c00003 	ldbu	r3,0(r2)
    cdc8:	18002e1e 	bne	r3,zero,ce84 <__hexnan+0x164>
    cdcc:	00800804 	movi	r2,32
    cdd0:	11005536 	bltu	r2,r4,cf28 <__hexnan+0x208>
    cdd4:	bcbff70e 	bge	r23,r18,cdb4 <__hexnan+0x94>
    cdd8:	8540022e 	bgeu	r16,r21,cde4 <__hexnan+0xc4>
    cddc:	008001c4 	movi	r2,7
    cde0:	11803c0e 	bge	r2,r6,ced4 <__hexnan+0x1b4>
    cde4:	9c003536 	bltu	r19,r16,cebc <__hexnan+0x19c>
    cde8:	8c400044 	addi	r17,r17,1
    cdec:	89000003 	ldbu	r4,0(r17)
    cdf0:	01800204 	movi	r6,8
    cdf4:	203ff21e 	bne	r4,zero,cdc0 <__hexnan+0xa0>
    cdf8:	90004d26 	beq	r18,zero,cf30 <__hexnan+0x210>
    cdfc:	85404336 	bltu	r16,r21,cf0c <__hexnan+0x1ec>
    ce00:	9c00382e 	bgeu	r19,r16,cee4 <__hexnan+0x1c4>
    ce04:	9807883a 	mov	r3,r19
    ce08:	80800017 	ldw	r2,0(r16)
    ce0c:	84000104 	addi	r16,r16,4
    ce10:	18800015 	stw	r2,0(r3)
    ce14:	18c00104 	addi	r3,r3,4
    ce18:	a43ffb2e 	bgeu	r20,r16,ce08 <__hexnan+0xe8>
    ce1c:	18000015 	stw	zero,0(r3)
    ce20:	18c00104 	addi	r3,r3,4
    ce24:	a0fffd2e 	bgeu	r20,r3,ce1c <__hexnan+0xfc>
    ce28:	a0800017 	ldw	r2,0(r20)
    ce2c:	1000071e 	bne	r2,zero,ce4c <__hexnan+0x12c>
    ce30:	9d004326 	beq	r19,r20,cf40 <__hexnan+0x220>
    ce34:	a007883a 	mov	r3,r20
    ce38:	00000106 	br	ce40 <__hexnan+0x120>
    ce3c:	98c04026 	beq	r19,r3,cf40 <__hexnan+0x220>
    ce40:	18ffff04 	addi	r3,r3,-4
    ce44:	18800017 	ldw	r2,0(r3)
    ce48:	103ffc26 	beq	r2,zero,ce3c <__hexnan+0x11c>
    ce4c:	00c00144 	movi	r3,5
    ce50:	1805883a 	mov	r2,r3
    ce54:	dfc00b17 	ldw	ra,44(sp)
    ce58:	df000a17 	ldw	fp,40(sp)
    ce5c:	ddc00917 	ldw	r23,36(sp)
    ce60:	dd800817 	ldw	r22,32(sp)
    ce64:	dd400717 	ldw	r21,28(sp)
    ce68:	dd000617 	ldw	r20,24(sp)
    ce6c:	dcc00517 	ldw	r19,20(sp)
    ce70:	dc800417 	ldw	r18,16(sp)
    ce74:	dc400317 	ldw	r17,12(sp)
    ce78:	dc000217 	ldw	r16,8(sp)
    ce7c:	dec00c04 	addi	sp,sp,48
    ce80:	f800283a 	ret
    ce84:	31800044 	addi	r6,r6,1
    ce88:	00800204 	movi	r2,8
    ce8c:	94800044 	addi	r18,r18,1
    ce90:	1180040e 	bge	r2,r6,cea4 <__hexnan+0x184>
    ce94:	9c3fc72e 	bgeu	r19,r16,cdb4 <__hexnan+0x94>
    ce98:	843fff04 	addi	r16,r16,-4
    ce9c:	80000015 	stw	zero,0(r16)
    cea0:	01800044 	movi	r6,1
    cea4:	80800017 	ldw	r2,0(r16)
    cea8:	18c003cc 	andi	r3,r3,15
    ceac:	1004913a 	slli	r2,r2,4
    ceb0:	10c4b03a 	or	r2,r2,r3
    ceb4:	80800015 	stw	r2,0(r16)
    ceb8:	003fbe06 	br	cdb4 <__hexnan+0x94>
    cebc:	843fff04 	addi	r16,r16,-4
    cec0:	802b883a 	mov	r21,r16
    cec4:	902f883a 	mov	r23,r18
    cec8:	000d883a 	mov	r6,zero
    cecc:	80000015 	stw	zero,0(r16)
    ced0:	003fb806 	br	cdb4 <__hexnan+0x94>
    ced4:	8009883a 	mov	r4,r16
    ced8:	a80b883a 	mov	r5,r21
    cedc:	000ccd40 	call	ccd4 <L_shift>
    cee0:	003fc006 	br	cde4 <__hexnan+0xc4>
    cee4:	e03fd01e 	bne	fp,zero,ce28 <__hexnan+0x108>
    cee8:	d8c00017 	ldw	r3,0(sp)
    ceec:	00800804 	movi	r2,32
    cef0:	10c5c83a 	sub	r2,r2,r3
    cef4:	00ffffc4 	movi	r3,-1
    cef8:	1886d83a 	srl	r3,r3,r2
    cefc:	a0800017 	ldw	r2,0(r20)
    cf00:	10c4703a 	and	r2,r2,r3
    cf04:	a0800015 	stw	r2,0(r20)
    cf08:	003fc806 	br	ce2c <__hexnan+0x10c>
    cf0c:	008001c4 	movi	r2,7
    cf10:	11bfbb16 	blt	r2,r6,ce00 <__hexnan+0xe0>
    cf14:	a80b883a 	mov	r5,r21
    cf18:	8009883a 	mov	r4,r16
    cf1c:	000ccd40 	call	ccd4 <L_shift>
    cf20:	9c3ff02e 	bgeu	r19,r16,cee4 <__hexnan+0x1c4>
    cf24:	003fb706 	br	ce04 <__hexnan+0xe4>
    cf28:	00800a44 	movi	r2,41
    cf2c:	20800826 	beq	r4,r2,cf50 <__hexnan+0x230>
    cf30:	00c00104 	movi	r3,4
    cf34:	003fc606 	br	ce50 <__hexnan+0x130>
    cf38:	000c4040 	call	c404 <__hexdig_init>
    cf3c:	003f8a06 	br	cd68 <__hexnan+0x48>
    cf40:	00800044 	movi	r2,1
    cf44:	00c00144 	movi	r3,5
    cf48:	98800015 	stw	r2,0(r19)
    cf4c:	003fc006 	br	ce50 <__hexnan+0x130>
    cf50:	903ff726 	beq	r18,zero,cf30 <__hexnan+0x210>
    cf54:	d8c00117 	ldw	r3,4(sp)
    cf58:	88800044 	addi	r2,r17,1
    cf5c:	18800015 	stw	r2,0(r3)
    cf60:	857fa72e 	bgeu	r16,r21,ce00 <__hexnan+0xe0>
    cf64:	003fe906 	br	cf0c <__hexnan+0x1ec>

0000cf68 <_isatty_r>:
    cf68:	defffd04 	addi	sp,sp,-12
    cf6c:	dc000015 	stw	r16,0(sp)
    cf70:	04000074 	movhi	r16,1
    cf74:	84182e04 	addi	r16,r16,24760
    cf78:	dc400115 	stw	r17,4(sp)
    cf7c:	80000015 	stw	zero,0(r16)
    cf80:	2023883a 	mov	r17,r4
    cf84:	2809883a 	mov	r4,r5
    cf88:	dfc00215 	stw	ra,8(sp)
    cf8c:	000f5840 	call	f584 <isatty>
    cf90:	1007883a 	mov	r3,r2
    cf94:	00bfffc4 	movi	r2,-1
    cf98:	18800626 	beq	r3,r2,cfb4 <_isatty_r+0x4c>
    cf9c:	1805883a 	mov	r2,r3
    cfa0:	dfc00217 	ldw	ra,8(sp)
    cfa4:	dc400117 	ldw	r17,4(sp)
    cfa8:	dc000017 	ldw	r16,0(sp)
    cfac:	dec00304 	addi	sp,sp,12
    cfb0:	f800283a 	ret
    cfb4:	80800017 	ldw	r2,0(r16)
    cfb8:	103ff826 	beq	r2,zero,cf9c <_isatty_r+0x34>
    cfbc:	88800015 	stw	r2,0(r17)
    cfc0:	1805883a 	mov	r2,r3
    cfc4:	dfc00217 	ldw	ra,8(sp)
    cfc8:	dc400117 	ldw	r17,4(sp)
    cfcc:	dc000017 	ldw	r16,0(sp)
    cfd0:	dec00304 	addi	sp,sp,12
    cfd4:	f800283a 	ret

0000cfd8 <_lseek_r>:
    cfd8:	defffd04 	addi	sp,sp,-12
    cfdc:	dc000015 	stw	r16,0(sp)
    cfe0:	04000074 	movhi	r16,1
    cfe4:	84182e04 	addi	r16,r16,24760
    cfe8:	dc400115 	stw	r17,4(sp)
    cfec:	80000015 	stw	zero,0(r16)
    cff0:	2023883a 	mov	r17,r4
    cff4:	2809883a 	mov	r4,r5
    cff8:	300b883a 	mov	r5,r6
    cffc:	380d883a 	mov	r6,r7
    d000:	dfc00215 	stw	ra,8(sp)
    d004:	000f6cc0 	call	f6cc <lseek>
    d008:	1007883a 	mov	r3,r2
    d00c:	00bfffc4 	movi	r2,-1
    d010:	18800626 	beq	r3,r2,d02c <_lseek_r+0x54>
    d014:	1805883a 	mov	r2,r3
    d018:	dfc00217 	ldw	ra,8(sp)
    d01c:	dc400117 	ldw	r17,4(sp)
    d020:	dc000017 	ldw	r16,0(sp)
    d024:	dec00304 	addi	sp,sp,12
    d028:	f800283a 	ret
    d02c:	80800017 	ldw	r2,0(r16)
    d030:	103ff826 	beq	r2,zero,d014 <_lseek_r+0x3c>
    d034:	88800015 	stw	r2,0(r17)
    d038:	1805883a 	mov	r2,r3
    d03c:	dfc00217 	ldw	ra,8(sp)
    d040:	dc400117 	ldw	r17,4(sp)
    d044:	dc000017 	ldw	r16,0(sp)
    d048:	dec00304 	addi	sp,sp,12
    d04c:	f800283a 	ret

0000d050 <_read_r>:
    d050:	defffd04 	addi	sp,sp,-12
    d054:	dc000015 	stw	r16,0(sp)
    d058:	04000074 	movhi	r16,1
    d05c:	84182e04 	addi	r16,r16,24760
    d060:	dc400115 	stw	r17,4(sp)
    d064:	80000015 	stw	zero,0(r16)
    d068:	2023883a 	mov	r17,r4
    d06c:	2809883a 	mov	r4,r5
    d070:	300b883a 	mov	r5,r6
    d074:	380d883a 	mov	r6,r7
    d078:	dfc00215 	stw	ra,8(sp)
    d07c:	000f9c00 	call	f9c0 <read>
    d080:	1007883a 	mov	r3,r2
    d084:	00bfffc4 	movi	r2,-1
    d088:	18800626 	beq	r3,r2,d0a4 <_read_r+0x54>
    d08c:	1805883a 	mov	r2,r3
    d090:	dfc00217 	ldw	ra,8(sp)
    d094:	dc400117 	ldw	r17,4(sp)
    d098:	dc000017 	ldw	r16,0(sp)
    d09c:	dec00304 	addi	sp,sp,12
    d0a0:	f800283a 	ret
    d0a4:	80800017 	ldw	r2,0(r16)
    d0a8:	103ff826 	beq	r2,zero,d08c <_read_r+0x3c>
    d0ac:	88800015 	stw	r2,0(r17)
    d0b0:	1805883a 	mov	r2,r3
    d0b4:	dfc00217 	ldw	ra,8(sp)
    d0b8:	dc400117 	ldw	r17,4(sp)
    d0bc:	dc000017 	ldw	r16,0(sp)
    d0c0:	dec00304 	addi	sp,sp,12
    d0c4:	f800283a 	ret

0000d0c8 <__muldi3>:
    d0c8:	2011883a 	mov	r8,r4
    d0cc:	427fffcc 	andi	r9,r8,65535
    d0d0:	4018d43a 	srli	r12,r8,16
    d0d4:	32bfffcc 	andi	r10,r6,65535
    d0d8:	3016d43a 	srli	r11,r6,16
    d0dc:	4a85383a 	mul	r2,r9,r10
    d0e0:	6295383a 	mul	r10,r12,r10
    d0e4:	4ad3383a 	mul	r9,r9,r11
    d0e8:	113fffcc 	andi	r4,r2,65535
    d0ec:	1004d43a 	srli	r2,r2,16
    d0f0:	4a93883a 	add	r9,r9,r10
    d0f4:	3807883a 	mov	r3,r7
    d0f8:	1245883a 	add	r2,r2,r9
    d0fc:	280f883a 	mov	r7,r5
    d100:	180b883a 	mov	r5,r3
    d104:	1006943a 	slli	r3,r2,16
    d108:	defffd04 	addi	sp,sp,-12
    d10c:	dc800215 	stw	r18,8(sp)
    d110:	1907883a 	add	r3,r3,r4
    d114:	dc400115 	stw	r17,4(sp)
    d118:	dc000015 	stw	r16,0(sp)
    d11c:	4165383a 	mul	r18,r8,r5
    d120:	31e3383a 	mul	r17,r6,r7
    d124:	1012d43a 	srli	r9,r2,16
    d128:	62d9383a 	mul	r12,r12,r11
    d12c:	181f883a 	mov	r15,r3
    d130:	1280022e 	bgeu	r2,r10,d13c <__muldi3+0x74>
    d134:	00800074 	movhi	r2,1
    d138:	6099883a 	add	r12,r12,r2
    d13c:	624d883a 	add	r6,r12,r9
    d140:	9187883a 	add	r3,r18,r6
    d144:	88c7883a 	add	r3,r17,r3
    d148:	7805883a 	mov	r2,r15
    d14c:	dc800217 	ldw	r18,8(sp)
    d150:	dc400117 	ldw	r17,4(sp)
    d154:	dc000017 	ldw	r16,0(sp)
    d158:	dec00304 	addi	sp,sp,12
    d15c:	f800283a 	ret

0000d160 <__fixunsdfsi>:
    d160:	defffb04 	addi	sp,sp,-20
    d164:	dc400115 	stw	r17,4(sp)
    d168:	dc000015 	stw	r16,0(sp)
    d16c:	04507834 	movhi	r17,16864
    d170:	0021883a 	mov	r16,zero
    d174:	800d883a 	mov	r6,r16
    d178:	880f883a 	mov	r7,r17
    d17c:	dcc00315 	stw	r19,12(sp)
    d180:	dc800215 	stw	r18,8(sp)
    d184:	2827883a 	mov	r19,r5
    d188:	2025883a 	mov	r18,r4
    d18c:	dfc00415 	stw	ra,16(sp)
    d190:	000eb380 	call	eb38 <__gedf2>
    d194:	000d883a 	mov	r6,zero
    d198:	880f883a 	mov	r7,r17
    d19c:	980b883a 	mov	r5,r19
    d1a0:	9009883a 	mov	r4,r18
    d1a4:	10000d16 	blt	r2,zero,d1dc <__fixunsdfsi+0x7c>
    d1a8:	000e2900 	call	e290 <__subdf3>
    d1ac:	180b883a 	mov	r5,r3
    d1b0:	1009883a 	mov	r4,r2
    d1b4:	000edc80 	call	edc8 <__fixdfsi>
    d1b8:	00e00034 	movhi	r3,32768
    d1bc:	10c5883a 	add	r2,r2,r3
    d1c0:	dfc00417 	ldw	ra,16(sp)
    d1c4:	dcc00317 	ldw	r19,12(sp)
    d1c8:	dc800217 	ldw	r18,8(sp)
    d1cc:	dc400117 	ldw	r17,4(sp)
    d1d0:	dc000017 	ldw	r16,0(sp)
    d1d4:	dec00504 	addi	sp,sp,20
    d1d8:	f800283a 	ret
    d1dc:	980b883a 	mov	r5,r19
    d1e0:	9009883a 	mov	r4,r18
    d1e4:	000edc80 	call	edc8 <__fixdfsi>
    d1e8:	dfc00417 	ldw	ra,16(sp)
    d1ec:	dcc00317 	ldw	r19,12(sp)
    d1f0:	dc800217 	ldw	r18,8(sp)
    d1f4:	dc400117 	ldw	r17,4(sp)
    d1f8:	dc000017 	ldw	r16,0(sp)
    d1fc:	dec00504 	addi	sp,sp,20
    d200:	f800283a 	ret

0000d204 <__udivdi3>:
    d204:	defff004 	addi	sp,sp,-64
    d208:	2005883a 	mov	r2,r4
    d20c:	3011883a 	mov	r8,r6
    d210:	df000e15 	stw	fp,56(sp)
    d214:	dd000a15 	stw	r20,40(sp)
    d218:	dc000615 	stw	r16,24(sp)
    d21c:	dfc00f15 	stw	ra,60(sp)
    d220:	ddc00d15 	stw	r23,52(sp)
    d224:	dd800c15 	stw	r22,48(sp)
    d228:	dd400b15 	stw	r21,44(sp)
    d22c:	dcc00915 	stw	r19,36(sp)
    d230:	dc800815 	stw	r18,32(sp)
    d234:	dc400715 	stw	r17,28(sp)
    d238:	4021883a 	mov	r16,r8
    d23c:	1039883a 	mov	fp,r2
    d240:	2829883a 	mov	r20,r5
    d244:	38003b1e 	bne	r7,zero,d334 <__udivdi3+0x130>
    d248:	2a005c36 	bltu	r5,r8,d3bc <__udivdi3+0x1b8>
    d24c:	4000a626 	beq	r8,zero,d4e8 <__udivdi3+0x2e4>
    d250:	00bfffd4 	movui	r2,65535
    d254:	14009e36 	bltu	r2,r16,d4d0 <__udivdi3+0x2cc>
    d258:	00803fc4 	movi	r2,255
    d25c:	14013d36 	bltu	r2,r16,d754 <__udivdi3+0x550>
    d260:	000b883a 	mov	r5,zero
    d264:	0005883a 	mov	r2,zero
    d268:	8084d83a 	srl	r2,r16,r2
    d26c:	01000074 	movhi	r4,1
    d270:	21085d04 	addi	r4,r4,8564
    d274:	01800804 	movi	r6,32
    d278:	1105883a 	add	r2,r2,r4
    d27c:	10c00003 	ldbu	r3,0(r2)
    d280:	28c7883a 	add	r3,r5,r3
    d284:	30edc83a 	sub	r22,r6,r3
    d288:	b000ee1e 	bne	r22,zero,d644 <__udivdi3+0x440>
    d28c:	802ad43a 	srli	r21,r16,16
    d290:	00800044 	movi	r2,1
    d294:	a423c83a 	sub	r17,r20,r16
    d298:	85ffffcc 	andi	r23,r16,65535
    d29c:	d8800315 	stw	r2,12(sp)
    d2a0:	8809883a 	mov	r4,r17
    d2a4:	a80b883a 	mov	r5,r21
    d2a8:	000f1e40 	call	f1e4 <__udivsi3>
    d2ac:	8809883a 	mov	r4,r17
    d2b0:	a80b883a 	mov	r5,r21
    d2b4:	102d883a 	mov	r22,r2
    d2b8:	000f1ec0 	call	f1ec <__umodsi3>
    d2bc:	1004943a 	slli	r2,r2,16
    d2c0:	e006d43a 	srli	r3,fp,16
    d2c4:	bda3383a 	mul	r17,r23,r22
    d2c8:	10c4b03a 	or	r2,r2,r3
    d2cc:	1440042e 	bgeu	r2,r17,d2e0 <__udivdi3+0xdc>
    d2d0:	1405883a 	add	r2,r2,r16
    d2d4:	b5bfffc4 	addi	r22,r22,-1
    d2d8:	14000136 	bltu	r2,r16,d2e0 <__udivdi3+0xdc>
    d2dc:	14413d36 	bltu	r2,r17,d7d4 <__udivdi3+0x5d0>
    d2e0:	1463c83a 	sub	r17,r2,r17
    d2e4:	8809883a 	mov	r4,r17
    d2e8:	a80b883a 	mov	r5,r21
    d2ec:	000f1e40 	call	f1e4 <__udivsi3>
    d2f0:	8809883a 	mov	r4,r17
    d2f4:	a80b883a 	mov	r5,r21
    d2f8:	1029883a 	mov	r20,r2
    d2fc:	000f1ec0 	call	f1ec <__umodsi3>
    d300:	1004943a 	slli	r2,r2,16
    d304:	bd09383a 	mul	r4,r23,r20
    d308:	e0ffffcc 	andi	r3,fp,65535
    d30c:	10c4b03a 	or	r2,r2,r3
    d310:	1100042e 	bgeu	r2,r4,d324 <__udivdi3+0x120>
    d314:	8085883a 	add	r2,r16,r2
    d318:	a53fffc4 	addi	r20,r20,-1
    d31c:	14000136 	bltu	r2,r16,d324 <__udivdi3+0x120>
    d320:	11012036 	bltu	r2,r4,d7a4 <__udivdi3+0x5a0>
    d324:	b004943a 	slli	r2,r22,16
    d328:	d9000317 	ldw	r4,12(sp)
    d32c:	a084b03a 	or	r2,r20,r2
    d330:	00001506 	br	d388 <__udivdi3+0x184>
    d334:	380d883a 	mov	r6,r7
    d338:	29c06236 	bltu	r5,r7,d4c4 <__udivdi3+0x2c0>
    d33c:	00bfffd4 	movui	r2,65535
    d340:	11c05a36 	bltu	r2,r7,d4ac <__udivdi3+0x2a8>
    d344:	00803fc4 	movi	r2,255
    d348:	11c0fc36 	bltu	r2,r7,d73c <__udivdi3+0x538>
    d34c:	000b883a 	mov	r5,zero
    d350:	0005883a 	mov	r2,zero
    d354:	3084d83a 	srl	r2,r6,r2
    d358:	01000074 	movhi	r4,1
    d35c:	21085d04 	addi	r4,r4,8564
    d360:	01c00804 	movi	r7,32
    d364:	1105883a 	add	r2,r2,r4
    d368:	10c00003 	ldbu	r3,0(r2)
    d36c:	28c7883a 	add	r3,r5,r3
    d370:	38efc83a 	sub	r23,r7,r3
    d374:	b800691e 	bne	r23,zero,d51c <__udivdi3+0x318>
    d378:	35000136 	bltu	r6,r20,d380 <__udivdi3+0x17c>
    d37c:	e4005136 	bltu	fp,r16,d4c4 <__udivdi3+0x2c0>
    d380:	00800044 	movi	r2,1
    d384:	0009883a 	mov	r4,zero
    d388:	2007883a 	mov	r3,r4
    d38c:	dfc00f17 	ldw	ra,60(sp)
    d390:	df000e17 	ldw	fp,56(sp)
    d394:	ddc00d17 	ldw	r23,52(sp)
    d398:	dd800c17 	ldw	r22,48(sp)
    d39c:	dd400b17 	ldw	r21,44(sp)
    d3a0:	dd000a17 	ldw	r20,40(sp)
    d3a4:	dcc00917 	ldw	r19,36(sp)
    d3a8:	dc800817 	ldw	r18,32(sp)
    d3ac:	dc400717 	ldw	r17,28(sp)
    d3b0:	dc000617 	ldw	r16,24(sp)
    d3b4:	dec01004 	addi	sp,sp,64
    d3b8:	f800283a 	ret
    d3bc:	00bfffd4 	movui	r2,65535
    d3c0:	12005036 	bltu	r2,r8,d504 <__udivdi3+0x300>
    d3c4:	00803fc4 	movi	r2,255
    d3c8:	1200e836 	bltu	r2,r8,d76c <__udivdi3+0x568>
    d3cc:	000b883a 	mov	r5,zero
    d3d0:	0005883a 	mov	r2,zero
    d3d4:	8084d83a 	srl	r2,r16,r2
    d3d8:	01000074 	movhi	r4,1
    d3dc:	21085d04 	addi	r4,r4,8564
    d3e0:	01800804 	movi	r6,32
    d3e4:	1105883a 	add	r2,r2,r4
    d3e8:	10c00003 	ldbu	r3,0(r2)
    d3ec:	28c7883a 	add	r3,r5,r3
    d3f0:	30cbc83a 	sub	r5,r6,r3
    d3f4:	28000626 	beq	r5,zero,d410 <__udivdi3+0x20c>
    d3f8:	3145c83a 	sub	r2,r6,r5
    d3fc:	e084d83a 	srl	r2,fp,r2
    d400:	a146983a 	sll	r3,r20,r5
    d404:	e178983a 	sll	fp,fp,r5
    d408:	8160983a 	sll	r16,r16,r5
    d40c:	18a8b03a 	or	r20,r3,r2
    d410:	802ad43a 	srli	r21,r16,16
    d414:	a009883a 	mov	r4,r20
    d418:	85ffffcc 	andi	r23,r16,65535
    d41c:	a80b883a 	mov	r5,r21
    d420:	000f1e40 	call	f1e4 <__udivsi3>
    d424:	a009883a 	mov	r4,r20
    d428:	a80b883a 	mov	r5,r21
    d42c:	102d883a 	mov	r22,r2
    d430:	000f1ec0 	call	f1ec <__umodsi3>
    d434:	1004943a 	slli	r2,r2,16
    d438:	e006d43a 	srli	r3,fp,16
    d43c:	bda3383a 	mul	r17,r23,r22
    d440:	10c4b03a 	or	r2,r2,r3
    d444:	1440042e 	bgeu	r2,r17,d458 <__udivdi3+0x254>
    d448:	1405883a 	add	r2,r2,r16
    d44c:	b5bfffc4 	addi	r22,r22,-1
    d450:	14000136 	bltu	r2,r16,d458 <__udivdi3+0x254>
    d454:	1440d536 	bltu	r2,r17,d7ac <__udivdi3+0x5a8>
    d458:	1463c83a 	sub	r17,r2,r17
    d45c:	8809883a 	mov	r4,r17
    d460:	a80b883a 	mov	r5,r21
    d464:	000f1e40 	call	f1e4 <__udivsi3>
    d468:	8809883a 	mov	r4,r17
    d46c:	a80b883a 	mov	r5,r21
    d470:	1029883a 	mov	r20,r2
    d474:	000f1ec0 	call	f1ec <__umodsi3>
    d478:	1004943a 	slli	r2,r2,16
    d47c:	bd09383a 	mul	r4,r23,r20
    d480:	e0ffffcc 	andi	r3,fp,65535
    d484:	10c4b03a 	or	r2,r2,r3
    d488:	1100042e 	bgeu	r2,r4,d49c <__udivdi3+0x298>
    d48c:	8085883a 	add	r2,r16,r2
    d490:	a53fffc4 	addi	r20,r20,-1
    d494:	14000136 	bltu	r2,r16,d49c <__udivdi3+0x298>
    d498:	1100c736 	bltu	r2,r4,d7b8 <__udivdi3+0x5b4>
    d49c:	b004943a 	slli	r2,r22,16
    d4a0:	0009883a 	mov	r4,zero
    d4a4:	a084b03a 	or	r2,r20,r2
    d4a8:	003fb706 	br	d388 <__udivdi3+0x184>
    d4ac:	00804034 	movhi	r2,256
    d4b0:	10bfffc4 	addi	r2,r2,-1
    d4b4:	11c0a436 	bltu	r2,r7,d748 <__udivdi3+0x544>
    d4b8:	01400404 	movi	r5,16
    d4bc:	2805883a 	mov	r2,r5
    d4c0:	003fa406 	br	d354 <__udivdi3+0x150>
    d4c4:	0005883a 	mov	r2,zero
    d4c8:	0009883a 	mov	r4,zero
    d4cc:	003fae06 	br	d388 <__udivdi3+0x184>
    d4d0:	00804034 	movhi	r2,256
    d4d4:	10bfffc4 	addi	r2,r2,-1
    d4d8:	1400a136 	bltu	r2,r16,d760 <__udivdi3+0x55c>
    d4dc:	01400404 	movi	r5,16
    d4e0:	2805883a 	mov	r2,r5
    d4e4:	003f6006 	br	d268 <__udivdi3+0x64>
    d4e8:	01000044 	movi	r4,1
    d4ec:	000b883a 	mov	r5,zero
    d4f0:	000f1e40 	call	f1e4 <__udivsi3>
    d4f4:	1021883a 	mov	r16,r2
    d4f8:	00bfffd4 	movui	r2,65535
    d4fc:	143ff436 	bltu	r2,r16,d4d0 <__udivdi3+0x2cc>
    d500:	003f5506 	br	d258 <__udivdi3+0x54>
    d504:	00804034 	movhi	r2,256
    d508:	10bfffc4 	addi	r2,r2,-1
    d50c:	12009a36 	bltu	r2,r8,d778 <__udivdi3+0x574>
    d510:	01400404 	movi	r5,16
    d514:	2805883a 	mov	r2,r5
    d518:	003fae06 	br	d3d4 <__udivdi3+0x1d0>
    d51c:	3dc5c83a 	sub	r2,r7,r23
    d520:	35c8983a 	sll	r4,r6,r23
    d524:	8086d83a 	srl	r3,r16,r2
    d528:	a0a2d83a 	srl	r17,r20,r2
    d52c:	e084d83a 	srl	r2,fp,r2
    d530:	20eab03a 	or	r21,r4,r3
    d534:	a82cd43a 	srli	r22,r21,16
    d538:	a5c6983a 	sll	r3,r20,r23
    d53c:	8809883a 	mov	r4,r17
    d540:	b00b883a 	mov	r5,r22
    d544:	1886b03a 	or	r3,r3,r2
    d548:	d8c00215 	stw	r3,8(sp)
    d54c:	000f1e40 	call	f1e4 <__udivsi3>
    d550:	8809883a 	mov	r4,r17
    d554:	b00b883a 	mov	r5,r22
    d558:	1029883a 	mov	r20,r2
    d55c:	000f1ec0 	call	f1ec <__umodsi3>
    d560:	a8ffffcc 	andi	r3,r21,65535
    d564:	d8c00515 	stw	r3,20(sp)
    d568:	d9000217 	ldw	r4,8(sp)
    d56c:	d9400517 	ldw	r5,20(sp)
    d570:	1004943a 	slli	r2,r2,16
    d574:	2006d43a 	srli	r3,r4,16
    d578:	85e0983a 	sll	r16,r16,r23
    d57c:	2d23383a 	mul	r17,r5,r20
    d580:	10c4b03a 	or	r2,r2,r3
    d584:	dc000015 	stw	r16,0(sp)
    d588:	1440032e 	bgeu	r2,r17,d598 <__udivdi3+0x394>
    d58c:	1545883a 	add	r2,r2,r21
    d590:	a53fffc4 	addi	r20,r20,-1
    d594:	15407f2e 	bgeu	r2,r21,d794 <__udivdi3+0x590>
    d598:	1463c83a 	sub	r17,r2,r17
    d59c:	8809883a 	mov	r4,r17
    d5a0:	b00b883a 	mov	r5,r22
    d5a4:	000f1e40 	call	f1e4 <__udivsi3>
    d5a8:	8809883a 	mov	r4,r17
    d5ac:	b00b883a 	mov	r5,r22
    d5b0:	1021883a 	mov	r16,r2
    d5b4:	000f1ec0 	call	f1ec <__umodsi3>
    d5b8:	d8c00517 	ldw	r3,20(sp)
    d5bc:	d9000217 	ldw	r4,8(sp)
    d5c0:	1004943a 	slli	r2,r2,16
    d5c4:	1c0f383a 	mul	r7,r3,r16
    d5c8:	20ffffcc 	andi	r3,r4,65535
    d5cc:	10e2b03a 	or	r17,r2,r3
    d5d0:	89c0032e 	bgeu	r17,r7,d5e0 <__udivdi3+0x3dc>
    d5d4:	8d63883a 	add	r17,r17,r21
    d5d8:	843fffc4 	addi	r16,r16,-1
    d5dc:	8d40692e 	bgeu	r17,r21,d784 <__udivdi3+0x580>
    d5e0:	a008943a 	slli	r4,r20,16
    d5e4:	d9400017 	ldw	r5,0(sp)
    d5e8:	89e3c83a 	sub	r17,r17,r7
    d5ec:	8110b03a 	or	r8,r16,r4
    d5f0:	280cd43a 	srli	r6,r5,16
    d5f4:	28ffffcc 	andi	r3,r5,65535
    d5f8:	40bfffcc 	andi	r2,r8,65535
    d5fc:	400ad43a 	srli	r5,r8,16
    d600:	10d3383a 	mul	r9,r2,r3
    d604:	1185383a 	mul	r2,r2,r6
    d608:	28c7383a 	mul	r3,r5,r3
    d60c:	4808d43a 	srli	r4,r9,16
    d610:	298b383a 	mul	r5,r5,r6
    d614:	10c5883a 	add	r2,r2,r3
    d618:	2089883a 	add	r4,r4,r2
    d61c:	20c0022e 	bgeu	r4,r3,d628 <__udivdi3+0x424>
    d620:	00800074 	movhi	r2,1
    d624:	288b883a 	add	r5,r5,r2
    d628:	2004d43a 	srli	r2,r4,16
    d62c:	288b883a 	add	r5,r5,r2
    d630:	89403f36 	bltu	r17,r5,d730 <__udivdi3+0x52c>
    d634:	89403926 	beq	r17,r5,d71c <__udivdi3+0x518>
    d638:	4005883a 	mov	r2,r8
    d63c:	0009883a 	mov	r4,zero
    d640:	003f5106 	br	d388 <__udivdi3+0x184>
    d644:	85a0983a 	sll	r16,r16,r22
    d648:	3585c83a 	sub	r2,r6,r22
    d64c:	a0a2d83a 	srl	r17,r20,r2
    d650:	802ad43a 	srli	r21,r16,16
    d654:	e084d83a 	srl	r2,fp,r2
    d658:	a586983a 	sll	r3,r20,r22
    d65c:	8809883a 	mov	r4,r17
    d660:	a80b883a 	mov	r5,r21
    d664:	1886b03a 	or	r3,r3,r2
    d668:	d8c00115 	stw	r3,4(sp)
    d66c:	000f1e40 	call	f1e4 <__udivsi3>
    d670:	8809883a 	mov	r4,r17
    d674:	a80b883a 	mov	r5,r21
    d678:	d8800415 	stw	r2,16(sp)
    d67c:	000f1ec0 	call	f1ec <__umodsi3>
    d680:	d9000117 	ldw	r4,4(sp)
    d684:	d9400417 	ldw	r5,16(sp)
    d688:	1004943a 	slli	r2,r2,16
    d68c:	85ffffcc 	andi	r23,r16,65535
    d690:	2006d43a 	srli	r3,r4,16
    d694:	b963383a 	mul	r17,r23,r5
    d698:	10c4b03a 	or	r2,r2,r3
    d69c:	1440042e 	bgeu	r2,r17,d6b0 <__udivdi3+0x4ac>
    d6a0:	297fffc4 	addi	r5,r5,-1
    d6a4:	1405883a 	add	r2,r2,r16
    d6a8:	d9400415 	stw	r5,16(sp)
    d6ac:	1400442e 	bgeu	r2,r16,d7c0 <__udivdi3+0x5bc>
    d6b0:	1463c83a 	sub	r17,r2,r17
    d6b4:	8809883a 	mov	r4,r17
    d6b8:	a80b883a 	mov	r5,r21
    d6bc:	000f1e40 	call	f1e4 <__udivsi3>
    d6c0:	8809883a 	mov	r4,r17
    d6c4:	a80b883a 	mov	r5,r21
    d6c8:	1029883a 	mov	r20,r2
    d6cc:	000f1ec0 	call	f1ec <__umodsi3>
    d6d0:	d9400117 	ldw	r5,4(sp)
    d6d4:	1004943a 	slli	r2,r2,16
    d6d8:	bd09383a 	mul	r4,r23,r20
    d6dc:	28ffffcc 	andi	r3,r5,65535
    d6e0:	10c6b03a 	or	r3,r2,r3
    d6e4:	1900062e 	bgeu	r3,r4,d700 <__udivdi3+0x4fc>
    d6e8:	1c07883a 	add	r3,r3,r16
    d6ec:	a53fffc4 	addi	r20,r20,-1
    d6f0:	1c000336 	bltu	r3,r16,d700 <__udivdi3+0x4fc>
    d6f4:	1900022e 	bgeu	r3,r4,d700 <__udivdi3+0x4fc>
    d6f8:	a53fffc4 	addi	r20,r20,-1
    d6fc:	1c07883a 	add	r3,r3,r16
    d700:	d9400417 	ldw	r5,16(sp)
    d704:	e5b8983a 	sll	fp,fp,r22
    d708:	1923c83a 	sub	r17,r3,r4
    d70c:	2804943a 	slli	r2,r5,16
    d710:	a0a8b03a 	or	r20,r20,r2
    d714:	dd000315 	stw	r20,12(sp)
    d718:	003ee106 	br	d2a0 <__udivdi3+0x9c>
    d71c:	2004943a 	slli	r2,r4,16
    d720:	e5c8983a 	sll	r4,fp,r23
    d724:	48ffffcc 	andi	r3,r9,65535
    d728:	10c5883a 	add	r2,r2,r3
    d72c:	20bfc22e 	bgeu	r4,r2,d638 <__udivdi3+0x434>
    d730:	40bfffc4 	addi	r2,r8,-1
    d734:	0009883a 	mov	r4,zero
    d738:	003f1306 	br	d388 <__udivdi3+0x184>
    d73c:	01400204 	movi	r5,8
    d740:	2805883a 	mov	r2,r5
    d744:	003f0306 	br	d354 <__udivdi3+0x150>
    d748:	01400604 	movi	r5,24
    d74c:	2805883a 	mov	r2,r5
    d750:	003f0006 	br	d354 <__udivdi3+0x150>
    d754:	01400204 	movi	r5,8
    d758:	2805883a 	mov	r2,r5
    d75c:	003ec206 	br	d268 <__udivdi3+0x64>
    d760:	01400604 	movi	r5,24
    d764:	2805883a 	mov	r2,r5
    d768:	003ebf06 	br	d268 <__udivdi3+0x64>
    d76c:	01400204 	movi	r5,8
    d770:	2805883a 	mov	r2,r5
    d774:	003f1706 	br	d3d4 <__udivdi3+0x1d0>
    d778:	01400604 	movi	r5,24
    d77c:	2805883a 	mov	r2,r5
    d780:	003f1406 	br	d3d4 <__udivdi3+0x1d0>
    d784:	89ff962e 	bgeu	r17,r7,d5e0 <__udivdi3+0x3dc>
    d788:	8d63883a 	add	r17,r17,r21
    d78c:	843fffc4 	addi	r16,r16,-1
    d790:	003f9306 	br	d5e0 <__udivdi3+0x3dc>
    d794:	147f802e 	bgeu	r2,r17,d598 <__udivdi3+0x394>
    d798:	a53fffc4 	addi	r20,r20,-1
    d79c:	1545883a 	add	r2,r2,r21
    d7a0:	003f7d06 	br	d598 <__udivdi3+0x394>
    d7a4:	a53fffc4 	addi	r20,r20,-1
    d7a8:	003ede06 	br	d324 <__udivdi3+0x120>
    d7ac:	b5bfffc4 	addi	r22,r22,-1
    d7b0:	1405883a 	add	r2,r2,r16
    d7b4:	003f2806 	br	d458 <__udivdi3+0x254>
    d7b8:	a53fffc4 	addi	r20,r20,-1
    d7bc:	003f3706 	br	d49c <__udivdi3+0x298>
    d7c0:	147fbb2e 	bgeu	r2,r17,d6b0 <__udivdi3+0x4ac>
    d7c4:	297fffc4 	addi	r5,r5,-1
    d7c8:	1405883a 	add	r2,r2,r16
    d7cc:	d9400415 	stw	r5,16(sp)
    d7d0:	003fb706 	br	d6b0 <__udivdi3+0x4ac>
    d7d4:	b5bfffc4 	addi	r22,r22,-1
    d7d8:	1405883a 	add	r2,r2,r16
    d7dc:	003ec006 	br	d2e0 <__udivdi3+0xdc>

0000d7e0 <__umoddi3>:
    d7e0:	defff104 	addi	sp,sp,-60
    d7e4:	dd800b15 	stw	r22,44(sp)
    d7e8:	dd000915 	stw	r20,36(sp)
    d7ec:	dc000515 	stw	r16,20(sp)
    d7f0:	dfc00e15 	stw	ra,56(sp)
    d7f4:	df000d15 	stw	fp,52(sp)
    d7f8:	ddc00c15 	stw	r23,48(sp)
    d7fc:	dd400a15 	stw	r21,40(sp)
    d800:	dcc00815 	stw	r19,32(sp)
    d804:	dc800715 	stw	r18,28(sp)
    d808:	dc400615 	stw	r17,24(sp)
    d80c:	3021883a 	mov	r16,r6
    d810:	202d883a 	mov	r22,r4
    d814:	2829883a 	mov	r20,r5
    d818:	38002b1e 	bne	r7,zero,d8c8 <__umoddi3+0xe8>
    d81c:	29805036 	bltu	r5,r6,d960 <__umoddi3+0x180>
    d820:	30008a26 	beq	r6,zero,da4c <__umoddi3+0x26c>
    d824:	00bfffd4 	movui	r2,65535
    d828:	14008236 	bltu	r2,r16,da34 <__umoddi3+0x254>
    d82c:	00803fc4 	movi	r2,255
    d830:	14013636 	bltu	r2,r16,dd0c <__umoddi3+0x52c>
    d834:	000b883a 	mov	r5,zero
    d838:	0005883a 	mov	r2,zero
    d83c:	8084d83a 	srl	r2,r16,r2
    d840:	01000074 	movhi	r4,1
    d844:	21085d04 	addi	r4,r4,8564
    d848:	01800804 	movi	r6,32
    d84c:	1105883a 	add	r2,r2,r4
    d850:	10c00003 	ldbu	r3,0(r2)
    d854:	28c7883a 	add	r3,r5,r3
    d858:	30efc83a 	sub	r23,r6,r3
    d85c:	b800941e 	bne	r23,zero,dab0 <__umoddi3+0x2d0>
    d860:	802ad43a 	srli	r21,r16,16
    d864:	a423c83a 	sub	r17,r20,r16
    d868:	0039883a 	mov	fp,zero
    d86c:	853fffcc 	andi	r20,r16,65535
    d870:	8809883a 	mov	r4,r17
    d874:	a80b883a 	mov	r5,r21
    d878:	000f1e40 	call	f1e4 <__udivsi3>
    d87c:	8809883a 	mov	r4,r17
    d880:	a80b883a 	mov	r5,r21
    d884:	a0a3383a 	mul	r17,r20,r2
    d888:	000f1ec0 	call	f1ec <__umodsi3>
    d88c:	1004943a 	slli	r2,r2,16
    d890:	b006d43a 	srli	r3,r22,16
    d894:	10c4b03a 	or	r2,r2,r3
    d898:	1440032e 	bgeu	r2,r17,d8a8 <__umoddi3+0xc8>
    d89c:	1405883a 	add	r2,r2,r16
    d8a0:	14000136 	bltu	r2,r16,d8a8 <__umoddi3+0xc8>
    d8a4:	14413536 	bltu	r2,r17,dd7c <__umoddi3+0x59c>
    d8a8:	1463c83a 	sub	r17,r2,r17
    d8ac:	8809883a 	mov	r4,r17
    d8b0:	a80b883a 	mov	r5,r21
    d8b4:	000f1e40 	call	f1e4 <__udivsi3>
    d8b8:	8809883a 	mov	r4,r17
    d8bc:	a0a3383a 	mul	r17,r20,r2
    d8c0:	a80b883a 	mov	r5,r21
    d8c4:	00004d06 	br	d9fc <__umoddi3+0x21c>
    d8c8:	380d883a 	mov	r6,r7
    d8cc:	29c0102e 	bgeu	r5,r7,d910 <__umoddi3+0x130>
    d8d0:	2011883a 	mov	r8,r4
    d8d4:	2813883a 	mov	r9,r5
    d8d8:	4005883a 	mov	r2,r8
    d8dc:	4807883a 	mov	r3,r9
    d8e0:	dfc00e17 	ldw	ra,56(sp)
    d8e4:	df000d17 	ldw	fp,52(sp)
    d8e8:	ddc00c17 	ldw	r23,48(sp)
    d8ec:	dd800b17 	ldw	r22,44(sp)
    d8f0:	dd400a17 	ldw	r21,40(sp)
    d8f4:	dd000917 	ldw	r20,36(sp)
    d8f8:	dcc00817 	ldw	r19,32(sp)
    d8fc:	dc800717 	ldw	r18,28(sp)
    d900:	dc400617 	ldw	r17,24(sp)
    d904:	dc000517 	ldw	r16,20(sp)
    d908:	dec00f04 	addi	sp,sp,60
    d90c:	f800283a 	ret
    d910:	00bfffd4 	movui	r2,65535
    d914:	11c05a36 	bltu	r2,r7,da80 <__umoddi3+0x2a0>
    d918:	00803fc4 	movi	r2,255
    d91c:	11c0fe36 	bltu	r2,r7,dd18 <__umoddi3+0x538>
    d920:	000b883a 	mov	r5,zero
    d924:	0005883a 	mov	r2,zero
    d928:	3084d83a 	srl	r2,r6,r2
    d92c:	01000074 	movhi	r4,1
    d930:	21085d04 	addi	r4,r4,8564
    d934:	01c00804 	movi	r7,32
    d938:	1105883a 	add	r2,r2,r4
    d93c:	10c00003 	ldbu	r3,0(r2)
    d940:	28c7883a 	add	r3,r5,r3
    d944:	38ebc83a 	sub	r21,r7,r3
    d948:	a800851e 	bne	r21,zero,db60 <__umoddi3+0x380>
    d94c:	35005236 	bltu	r6,r20,da98 <__umoddi3+0x2b8>
    d950:	b400512e 	bgeu	r22,r16,da98 <__umoddi3+0x2b8>
    d954:	b011883a 	mov	r8,r22
    d958:	a013883a 	mov	r9,r20
    d95c:	003fde06 	br	d8d8 <__umoddi3+0xf8>
    d960:	00bfffd4 	movui	r2,65535
    d964:	11804036 	bltu	r2,r6,da68 <__umoddi3+0x288>
    d968:	00803fc4 	movi	r2,255
    d96c:	1180ed36 	bltu	r2,r6,dd24 <__umoddi3+0x544>
    d970:	000b883a 	mov	r5,zero
    d974:	0005883a 	mov	r2,zero
    d978:	8084d83a 	srl	r2,r16,r2
    d97c:	01000074 	movhi	r4,1
    d980:	21085d04 	addi	r4,r4,8564
    d984:	01800804 	movi	r6,32
    d988:	1105883a 	add	r2,r2,r4
    d98c:	10c00003 	ldbu	r3,0(r2)
    d990:	28c7883a 	add	r3,r5,r3
    d994:	30c7c83a 	sub	r3,r6,r3
    d998:	1800bf1e 	bne	r3,zero,dc98 <__umoddi3+0x4b8>
    d99c:	0039883a 	mov	fp,zero
    d9a0:	802ad43a 	srli	r21,r16,16
    d9a4:	a009883a 	mov	r4,r20
    d9a8:	85ffffcc 	andi	r23,r16,65535
    d9ac:	a80b883a 	mov	r5,r21
    d9b0:	000f1e40 	call	f1e4 <__udivsi3>
    d9b4:	a009883a 	mov	r4,r20
    d9b8:	a80b883a 	mov	r5,r21
    d9bc:	b8a3383a 	mul	r17,r23,r2
    d9c0:	000f1ec0 	call	f1ec <__umodsi3>
    d9c4:	1004943a 	slli	r2,r2,16
    d9c8:	b006d43a 	srli	r3,r22,16
    d9cc:	10c4b03a 	or	r2,r2,r3
    d9d0:	1440032e 	bgeu	r2,r17,d9e0 <__umoddi3+0x200>
    d9d4:	1405883a 	add	r2,r2,r16
    d9d8:	14000136 	bltu	r2,r16,d9e0 <__umoddi3+0x200>
    d9dc:	1440e536 	bltu	r2,r17,dd74 <__umoddi3+0x594>
    d9e0:	1463c83a 	sub	r17,r2,r17
    d9e4:	8809883a 	mov	r4,r17
    d9e8:	a80b883a 	mov	r5,r21
    d9ec:	000f1e40 	call	f1e4 <__udivsi3>
    d9f0:	8809883a 	mov	r4,r17
    d9f4:	b8a3383a 	mul	r17,r23,r2
    d9f8:	a80b883a 	mov	r5,r21
    d9fc:	000f1ec0 	call	f1ec <__umodsi3>
    da00:	1004943a 	slli	r2,r2,16
    da04:	b0ffffcc 	andi	r3,r22,65535
    da08:	10c4b03a 	or	r2,r2,r3
    da0c:	1440042e 	bgeu	r2,r17,da20 <__umoddi3+0x240>
    da10:	1405883a 	add	r2,r2,r16
    da14:	14000236 	bltu	r2,r16,da20 <__umoddi3+0x240>
    da18:	1440012e 	bgeu	r2,r17,da20 <__umoddi3+0x240>
    da1c:	1405883a 	add	r2,r2,r16
    da20:	1445c83a 	sub	r2,r2,r17
    da24:	1724d83a 	srl	r18,r2,fp
    da28:	0013883a 	mov	r9,zero
    da2c:	9011883a 	mov	r8,r18
    da30:	003fa906 	br	d8d8 <__umoddi3+0xf8>
    da34:	00804034 	movhi	r2,256
    da38:	10bfffc4 	addi	r2,r2,-1
    da3c:	1400b036 	bltu	r2,r16,dd00 <__umoddi3+0x520>
    da40:	01400404 	movi	r5,16
    da44:	2805883a 	mov	r2,r5
    da48:	003f7c06 	br	d83c <__umoddi3+0x5c>
    da4c:	01000044 	movi	r4,1
    da50:	000b883a 	mov	r5,zero
    da54:	000f1e40 	call	f1e4 <__udivsi3>
    da58:	1021883a 	mov	r16,r2
    da5c:	00bfffd4 	movui	r2,65535
    da60:	143ff436 	bltu	r2,r16,da34 <__umoddi3+0x254>
    da64:	003f7106 	br	d82c <__umoddi3+0x4c>
    da68:	00804034 	movhi	r2,256
    da6c:	10bfffc4 	addi	r2,r2,-1
    da70:	1180af36 	bltu	r2,r6,dd30 <__umoddi3+0x550>
    da74:	01400404 	movi	r5,16
    da78:	2805883a 	mov	r2,r5
    da7c:	003fbe06 	br	d978 <__umoddi3+0x198>
    da80:	00804034 	movhi	r2,256
    da84:	10bfffc4 	addi	r2,r2,-1
    da88:	11c0ac36 	bltu	r2,r7,dd3c <__umoddi3+0x55c>
    da8c:	01400404 	movi	r5,16
    da90:	2805883a 	mov	r2,r5
    da94:	003fa406 	br	d928 <__umoddi3+0x148>
    da98:	b409c83a 	sub	r4,r22,r16
    da9c:	b105803a 	cmpltu	r2,r22,r4
    daa0:	a187c83a 	sub	r3,r20,r6
    daa4:	18a9c83a 	sub	r20,r3,r2
    daa8:	202d883a 	mov	r22,r4
    daac:	003fa906 	br	d954 <__umoddi3+0x174>
    dab0:	85e0983a 	sll	r16,r16,r23
    dab4:	35c5c83a 	sub	r2,r6,r23
    dab8:	a0a2d83a 	srl	r17,r20,r2
    dabc:	802ad43a 	srli	r21,r16,16
    dac0:	b084d83a 	srl	r2,r22,r2
    dac4:	a5c6983a 	sll	r3,r20,r23
    dac8:	8809883a 	mov	r4,r17
    dacc:	a80b883a 	mov	r5,r21
    dad0:	1886b03a 	or	r3,r3,r2
    dad4:	d8c00115 	stw	r3,4(sp)
    dad8:	853fffcc 	andi	r20,r16,65535
    dadc:	000f1e40 	call	f1e4 <__udivsi3>
    dae0:	8809883a 	mov	r4,r17
    dae4:	a80b883a 	mov	r5,r21
    dae8:	a0a3383a 	mul	r17,r20,r2
    daec:	000f1ec0 	call	f1ec <__umodsi3>
    daf0:	d9000117 	ldw	r4,4(sp)
    daf4:	1004943a 	slli	r2,r2,16
    daf8:	b839883a 	mov	fp,r23
    dafc:	2006d43a 	srli	r3,r4,16
    db00:	10c4b03a 	or	r2,r2,r3
    db04:	1440022e 	bgeu	r2,r17,db10 <__umoddi3+0x330>
    db08:	1405883a 	add	r2,r2,r16
    db0c:	1400962e 	bgeu	r2,r16,dd68 <__umoddi3+0x588>
    db10:	1463c83a 	sub	r17,r2,r17
    db14:	8809883a 	mov	r4,r17
    db18:	a80b883a 	mov	r5,r21
    db1c:	000f1e40 	call	f1e4 <__udivsi3>
    db20:	8809883a 	mov	r4,r17
    db24:	a80b883a 	mov	r5,r21
    db28:	a0a3383a 	mul	r17,r20,r2
    db2c:	000f1ec0 	call	f1ec <__umodsi3>
    db30:	d9400117 	ldw	r5,4(sp)
    db34:	1004943a 	slli	r2,r2,16
    db38:	28ffffcc 	andi	r3,r5,65535
    db3c:	10c4b03a 	or	r2,r2,r3
    db40:	1440042e 	bgeu	r2,r17,db54 <__umoddi3+0x374>
    db44:	1405883a 	add	r2,r2,r16
    db48:	14000236 	bltu	r2,r16,db54 <__umoddi3+0x374>
    db4c:	1440012e 	bgeu	r2,r17,db54 <__umoddi3+0x374>
    db50:	1405883a 	add	r2,r2,r16
    db54:	b5ec983a 	sll	r22,r22,r23
    db58:	1463c83a 	sub	r17,r2,r17
    db5c:	003f4406 	br	d870 <__umoddi3+0x90>
    db60:	3d4fc83a 	sub	r7,r7,r21
    db64:	3546983a 	sll	r3,r6,r21
    db68:	81c4d83a 	srl	r2,r16,r7
    db6c:	a1e2d83a 	srl	r17,r20,r7
    db70:	a54c983a 	sll	r6,r20,r21
    db74:	18aeb03a 	or	r23,r3,r2
    db78:	b828d43a 	srli	r20,r23,16
    db7c:	b1c4d83a 	srl	r2,r22,r7
    db80:	8809883a 	mov	r4,r17
    db84:	a00b883a 	mov	r5,r20
    db88:	308cb03a 	or	r6,r6,r2
    db8c:	d9c00315 	stw	r7,12(sp)
    db90:	d9800215 	stw	r6,8(sp)
    db94:	000f1e40 	call	f1e4 <__udivsi3>
    db98:	8809883a 	mov	r4,r17
    db9c:	a00b883a 	mov	r5,r20
    dba0:	1039883a 	mov	fp,r2
    dba4:	000f1ec0 	call	f1ec <__umodsi3>
    dba8:	b8ffffcc 	andi	r3,r23,65535
    dbac:	d8c00415 	stw	r3,16(sp)
    dbb0:	d9000217 	ldw	r4,8(sp)
    dbb4:	d9400417 	ldw	r5,16(sp)
    dbb8:	1004943a 	slli	r2,r2,16
    dbbc:	2006d43a 	srli	r3,r4,16
    dbc0:	8560983a 	sll	r16,r16,r21
    dbc4:	2f23383a 	mul	r17,r5,fp
    dbc8:	10c4b03a 	or	r2,r2,r3
    dbcc:	dc000015 	stw	r16,0(sp)
    dbd0:	b56c983a 	sll	r22,r22,r21
    dbd4:	1440032e 	bgeu	r2,r17,dbe4 <__umoddi3+0x404>
    dbd8:	15c5883a 	add	r2,r2,r23
    dbdc:	e73fffc4 	addi	fp,fp,-1
    dbe0:	15c05d2e 	bgeu	r2,r23,dd58 <__umoddi3+0x578>
    dbe4:	1463c83a 	sub	r17,r2,r17
    dbe8:	8809883a 	mov	r4,r17
    dbec:	a00b883a 	mov	r5,r20
    dbf0:	000f1e40 	call	f1e4 <__udivsi3>
    dbf4:	8809883a 	mov	r4,r17
    dbf8:	a00b883a 	mov	r5,r20
    dbfc:	1021883a 	mov	r16,r2
    dc00:	000f1ec0 	call	f1ec <__umodsi3>
    dc04:	d8c00417 	ldw	r3,16(sp)
    dc08:	d9000217 	ldw	r4,8(sp)
    dc0c:	1004943a 	slli	r2,r2,16
    dc10:	1c23383a 	mul	r17,r3,r16
    dc14:	20ffffcc 	andi	r3,r4,65535
    dc18:	10ceb03a 	or	r7,r2,r3
    dc1c:	3c40032e 	bgeu	r7,r17,dc2c <__umoddi3+0x44c>
    dc20:	3dcf883a 	add	r7,r7,r23
    dc24:	843fffc4 	addi	r16,r16,-1
    dc28:	3dc0472e 	bgeu	r7,r23,dd48 <__umoddi3+0x568>
    dc2c:	e004943a 	slli	r2,fp,16
    dc30:	d9400017 	ldw	r5,0(sp)
    dc34:	3c4fc83a 	sub	r7,r7,r17
    dc38:	8084b03a 	or	r2,r16,r2
    dc3c:	28ffffcc 	andi	r3,r5,65535
    dc40:	280cd43a 	srli	r6,r5,16
    dc44:	100ad43a 	srli	r5,r2,16
    dc48:	10bfffcc 	andi	r2,r2,65535
    dc4c:	10d1383a 	mul	r8,r2,r3
    dc50:	28c7383a 	mul	r3,r5,r3
    dc54:	1185383a 	mul	r2,r2,r6
    dc58:	4008d43a 	srli	r4,r8,16
    dc5c:	298b383a 	mul	r5,r5,r6
    dc60:	10c5883a 	add	r2,r2,r3
    dc64:	2089883a 	add	r4,r4,r2
    dc68:	20c0022e 	bgeu	r4,r3,dc74 <__umoddi3+0x494>
    dc6c:	00800074 	movhi	r2,1
    dc70:	288b883a 	add	r5,r5,r2
    dc74:	2004d43a 	srli	r2,r4,16
    dc78:	2008943a 	slli	r4,r4,16
    dc7c:	40ffffcc 	andi	r3,r8,65535
    dc80:	288b883a 	add	r5,r5,r2
    dc84:	20c9883a 	add	r4,r4,r3
    dc88:	39400b36 	bltu	r7,r5,dcb8 <__umoddi3+0x4d8>
    dc8c:	39403d26 	beq	r7,r5,dd84 <__umoddi3+0x5a4>
    dc90:	394bc83a 	sub	r5,r7,r5
    dc94:	00000f06 	br	dcd4 <__umoddi3+0x4f4>
    dc98:	30c5c83a 	sub	r2,r6,r3
    dc9c:	1839883a 	mov	fp,r3
    dca0:	b084d83a 	srl	r2,r22,r2
    dca4:	a0c6983a 	sll	r3,r20,r3
    dca8:	8720983a 	sll	r16,r16,fp
    dcac:	b72c983a 	sll	r22,r22,fp
    dcb0:	18a8b03a 	or	r20,r3,r2
    dcb4:	003f3a06 	br	d9a0 <__umoddi3+0x1c0>
    dcb8:	d8c00017 	ldw	r3,0(sp)
    dcbc:	20c5c83a 	sub	r2,r4,r3
    dcc0:	2089803a 	cmpltu	r4,r4,r2
    dcc4:	2dc7c83a 	sub	r3,r5,r23
    dcc8:	1907c83a 	sub	r3,r3,r4
    dccc:	38cbc83a 	sub	r5,r7,r3
    dcd0:	1009883a 	mov	r4,r2
    dcd4:	b105c83a 	sub	r2,r22,r4
    dcd8:	b087803a 	cmpltu	r3,r22,r2
    dcdc:	28c7c83a 	sub	r3,r5,r3
    dce0:	d9400317 	ldw	r5,12(sp)
    dce4:	1544d83a 	srl	r2,r2,r21
    dce8:	1948983a 	sll	r4,r3,r5
    dcec:	1d46d83a 	srl	r3,r3,r21
    dcf0:	20a4b03a 	or	r18,r4,r2
    dcf4:	9011883a 	mov	r8,r18
    dcf8:	1813883a 	mov	r9,r3
    dcfc:	003ef606 	br	d8d8 <__umoddi3+0xf8>
    dd00:	01400604 	movi	r5,24
    dd04:	2805883a 	mov	r2,r5
    dd08:	003ecc06 	br	d83c <__umoddi3+0x5c>
    dd0c:	01400204 	movi	r5,8
    dd10:	2805883a 	mov	r2,r5
    dd14:	003ec906 	br	d83c <__umoddi3+0x5c>
    dd18:	01400204 	movi	r5,8
    dd1c:	2805883a 	mov	r2,r5
    dd20:	003f0106 	br	d928 <__umoddi3+0x148>
    dd24:	01400204 	movi	r5,8
    dd28:	2805883a 	mov	r2,r5
    dd2c:	003f1206 	br	d978 <__umoddi3+0x198>
    dd30:	01400604 	movi	r5,24
    dd34:	2805883a 	mov	r2,r5
    dd38:	003f0f06 	br	d978 <__umoddi3+0x198>
    dd3c:	01400604 	movi	r5,24
    dd40:	2805883a 	mov	r2,r5
    dd44:	003ef806 	br	d928 <__umoddi3+0x148>
    dd48:	3c7fb82e 	bgeu	r7,r17,dc2c <__umoddi3+0x44c>
    dd4c:	843fffc4 	addi	r16,r16,-1
    dd50:	3dcf883a 	add	r7,r7,r23
    dd54:	003fb506 	br	dc2c <__umoddi3+0x44c>
    dd58:	147fa22e 	bgeu	r2,r17,dbe4 <__umoddi3+0x404>
    dd5c:	e73fffc4 	addi	fp,fp,-1
    dd60:	15c5883a 	add	r2,r2,r23
    dd64:	003f9f06 	br	dbe4 <__umoddi3+0x404>
    dd68:	147f692e 	bgeu	r2,r17,db10 <__umoddi3+0x330>
    dd6c:	1405883a 	add	r2,r2,r16
    dd70:	003f6706 	br	db10 <__umoddi3+0x330>
    dd74:	1405883a 	add	r2,r2,r16
    dd78:	003f1906 	br	d9e0 <__umoddi3+0x200>
    dd7c:	1405883a 	add	r2,r2,r16
    dd80:	003ec906 	br	d8a8 <__umoddi3+0xc8>
    dd84:	b13fcc36 	bltu	r22,r4,dcb8 <__umoddi3+0x4d8>
    dd88:	000b883a 	mov	r5,zero
    dd8c:	003fd106 	br	dcd4 <__umoddi3+0x4f4>

0000dd90 <__nesf2>:
    dd90:	defff304 	addi	sp,sp,-52
    dd94:	dc400b15 	stw	r17,44(sp)
    dd98:	dc400204 	addi	r17,sp,8
    dd9c:	dc000a15 	stw	r16,40(sp)
    dda0:	d9000015 	stw	r4,0(sp)
    dda4:	d9400115 	stw	r5,4(sp)
    dda8:	d809883a 	mov	r4,sp
    ddac:	880b883a 	mov	r5,r17
    ddb0:	dc000604 	addi	r16,sp,24
    ddb4:	dfc00c15 	stw	ra,48(sp)
    ddb8:	0000bb80 	call	bb8 <__unpack_f>
    ddbc:	d9000104 	addi	r4,sp,4
    ddc0:	800b883a 	mov	r5,r16
    ddc4:	0000bb80 	call	bb8 <__unpack_f>
    ddc8:	d8800217 	ldw	r2,8(sp)
    ddcc:	00c00044 	movi	r3,1
    ddd0:	180d883a 	mov	r6,r3
    ddd4:	1880062e 	bgeu	r3,r2,ddf0 <__nesf2+0x60>
    ddd8:	d8800617 	ldw	r2,24(sp)
    dddc:	8809883a 	mov	r4,r17
    dde0:	800b883a 	mov	r5,r16
    dde4:	1880022e 	bgeu	r3,r2,ddf0 <__nesf2+0x60>
    dde8:	0000c800 	call	c80 <__fpcmp_parts_f>
    ddec:	100d883a 	mov	r6,r2
    ddf0:	3005883a 	mov	r2,r6
    ddf4:	dfc00c17 	ldw	ra,48(sp)
    ddf8:	dc400b17 	ldw	r17,44(sp)
    ddfc:	dc000a17 	ldw	r16,40(sp)
    de00:	dec00d04 	addi	sp,sp,52
    de04:	f800283a 	ret

0000de08 <__gtsf2>:
    de08:	defff304 	addi	sp,sp,-52
    de0c:	dc400b15 	stw	r17,44(sp)
    de10:	dc400204 	addi	r17,sp,8
    de14:	dc000a15 	stw	r16,40(sp)
    de18:	d9000015 	stw	r4,0(sp)
    de1c:	d9400115 	stw	r5,4(sp)
    de20:	d809883a 	mov	r4,sp
    de24:	880b883a 	mov	r5,r17
    de28:	dc000604 	addi	r16,sp,24
    de2c:	dfc00c15 	stw	ra,48(sp)
    de30:	0000bb80 	call	bb8 <__unpack_f>
    de34:	d9000104 	addi	r4,sp,4
    de38:	800b883a 	mov	r5,r16
    de3c:	0000bb80 	call	bb8 <__unpack_f>
    de40:	d8800217 	ldw	r2,8(sp)
    de44:	00c00044 	movi	r3,1
    de48:	01bfffc4 	movi	r6,-1
    de4c:	1880062e 	bgeu	r3,r2,de68 <__gtsf2+0x60>
    de50:	d8800617 	ldw	r2,24(sp)
    de54:	8809883a 	mov	r4,r17
    de58:	800b883a 	mov	r5,r16
    de5c:	1880022e 	bgeu	r3,r2,de68 <__gtsf2+0x60>
    de60:	0000c800 	call	c80 <__fpcmp_parts_f>
    de64:	100d883a 	mov	r6,r2
    de68:	3005883a 	mov	r2,r6
    de6c:	dfc00c17 	ldw	ra,48(sp)
    de70:	dc400b17 	ldw	r17,44(sp)
    de74:	dc000a17 	ldw	r16,40(sp)
    de78:	dec00d04 	addi	sp,sp,52
    de7c:	f800283a 	ret

0000de80 <_fpadd_parts>:
    de80:	defff804 	addi	sp,sp,-32
    de84:	dcc00315 	stw	r19,12(sp)
    de88:	2027883a 	mov	r19,r4
    de8c:	21000017 	ldw	r4,0(r4)
    de90:	00c00044 	movi	r3,1
    de94:	dd400515 	stw	r21,20(sp)
    de98:	dd000415 	stw	r20,16(sp)
    de9c:	ddc00715 	stw	r23,28(sp)
    dea0:	dd800615 	stw	r22,24(sp)
    dea4:	dc800215 	stw	r18,8(sp)
    dea8:	dc400115 	stw	r17,4(sp)
    deac:	dc000015 	stw	r16,0(sp)
    deb0:	282b883a 	mov	r21,r5
    deb4:	3029883a 	mov	r20,r6
    deb8:	1900632e 	bgeu	r3,r4,e048 <_fpadd_parts+0x1c8>
    debc:	28800017 	ldw	r2,0(r5)
    dec0:	1880812e 	bgeu	r3,r2,e0c8 <_fpadd_parts+0x248>
    dec4:	00c00104 	movi	r3,4
    dec8:	20c0dc26 	beq	r4,r3,e23c <_fpadd_parts+0x3bc>
    decc:	10c07e26 	beq	r2,r3,e0c8 <_fpadd_parts+0x248>
    ded0:	00c00084 	movi	r3,2
    ded4:	10c06726 	beq	r2,r3,e074 <_fpadd_parts+0x1f4>
    ded8:	20c07b26 	beq	r4,r3,e0c8 <_fpadd_parts+0x248>
    dedc:	9dc00217 	ldw	r23,8(r19)
    dee0:	28c00217 	ldw	r3,8(r5)
    dee4:	9c400317 	ldw	r17,12(r19)
    dee8:	2bc00317 	ldw	r15,12(r5)
    deec:	b8cdc83a 	sub	r6,r23,r3
    def0:	9c800417 	ldw	r18,16(r19)
    def4:	2c000417 	ldw	r16,16(r5)
    def8:	3009883a 	mov	r4,r6
    defc:	30009716 	blt	r6,zero,e15c <_fpadd_parts+0x2dc>
    df00:	00800fc4 	movi	r2,63
    df04:	11806b16 	blt	r2,r6,e0b4 <_fpadd_parts+0x234>
    df08:	0100a40e 	bge	zero,r4,e19c <_fpadd_parts+0x31c>
    df0c:	35bff804 	addi	r22,r6,-32
    df10:	b000bc16 	blt	r22,zero,e204 <_fpadd_parts+0x384>
    df14:	8596d83a 	srl	r11,r16,r22
    df18:	0019883a 	mov	r12,zero
    df1c:	0013883a 	mov	r9,zero
    df20:	01000044 	movi	r4,1
    df24:	0015883a 	mov	r10,zero
    df28:	b000be16 	blt	r22,zero,e224 <_fpadd_parts+0x3a4>
    df2c:	2590983a 	sll	r8,r4,r22
    df30:	000f883a 	mov	r7,zero
    df34:	00bfffc4 	movi	r2,-1
    df38:	3889883a 	add	r4,r7,r2
    df3c:	408b883a 	add	r5,r8,r2
    df40:	21cd803a 	cmpltu	r6,r4,r7
    df44:	314b883a 	add	r5,r6,r5
    df48:	7904703a 	and	r2,r15,r4
    df4c:	8146703a 	and	r3,r16,r5
    df50:	10c4b03a 	or	r2,r2,r3
    df54:	10000226 	beq	r2,zero,df60 <_fpadd_parts+0xe0>
    df58:	02400044 	movi	r9,1
    df5c:	0015883a 	mov	r10,zero
    df60:	5a5eb03a 	or	r15,r11,r9
    df64:	62a0b03a 	or	r16,r12,r10
    df68:	99400117 	ldw	r5,4(r19)
    df6c:	a8800117 	ldw	r2,4(r21)
    df70:	28806e26 	beq	r5,r2,e12c <_fpadd_parts+0x2ac>
    df74:	28006626 	beq	r5,zero,e110 <_fpadd_parts+0x290>
    df78:	7c45c83a 	sub	r2,r15,r17
    df7c:	7889803a 	cmpltu	r4,r15,r2
    df80:	8487c83a 	sub	r3,r16,r18
    df84:	1909c83a 	sub	r4,r3,r4
    df88:	100d883a 	mov	r6,r2
    df8c:	200f883a 	mov	r7,r4
    df90:	38007716 	blt	r7,zero,e170 <_fpadd_parts+0x2f0>
    df94:	a5c00215 	stw	r23,8(r20)
    df98:	a1c00415 	stw	r7,16(r20)
    df9c:	a0000115 	stw	zero,4(r20)
    dfa0:	a1800315 	stw	r6,12(r20)
    dfa4:	a2000317 	ldw	r8,12(r20)
    dfa8:	a2400417 	ldw	r9,16(r20)
    dfac:	00bfffc4 	movi	r2,-1
    dfb0:	408b883a 	add	r5,r8,r2
    dfb4:	2a09803a 	cmpltu	r4,r5,r8
    dfb8:	488d883a 	add	r6,r9,r2
    dfbc:	01c40034 	movhi	r7,4096
    dfc0:	39ffffc4 	addi	r7,r7,-1
    dfc4:	218d883a 	add	r6,r4,r6
    dfc8:	39801736 	bltu	r7,r6,e028 <_fpadd_parts+0x1a8>
    dfcc:	31c06526 	beq	r6,r7,e164 <_fpadd_parts+0x2e4>
    dfd0:	a3000217 	ldw	r12,8(r20)
    dfd4:	4209883a 	add	r4,r8,r8
    dfd8:	00bfffc4 	movi	r2,-1
    dfdc:	220f803a 	cmpltu	r7,r4,r8
    dfe0:	4a4b883a 	add	r5,r9,r9
    dfe4:	394f883a 	add	r7,r7,r5
    dfe8:	2095883a 	add	r10,r4,r2
    dfec:	3897883a 	add	r11,r7,r2
    dff0:	510d803a 	cmpltu	r6,r10,r4
    dff4:	6099883a 	add	r12,r12,r2
    dff8:	32d7883a 	add	r11,r6,r11
    dffc:	00840034 	movhi	r2,4096
    e000:	10bfffc4 	addi	r2,r2,-1
    e004:	2011883a 	mov	r8,r4
    e008:	3813883a 	mov	r9,r7
    e00c:	a1000315 	stw	r4,12(r20)
    e010:	a1c00415 	stw	r7,16(r20)
    e014:	a3000215 	stw	r12,8(r20)
    e018:	12c00336 	bltu	r2,r11,e028 <_fpadd_parts+0x1a8>
    e01c:	58bfed1e 	bne	r11,r2,dfd4 <_fpadd_parts+0x154>
    e020:	00bfff84 	movi	r2,-2
    e024:	12bfeb2e 	bgeu	r2,r10,dfd4 <_fpadd_parts+0x154>
    e028:	a2800417 	ldw	r10,16(r20)
    e02c:	008000c4 	movi	r2,3
    e030:	00c80034 	movhi	r3,8192
    e034:	18ffffc4 	addi	r3,r3,-1
    e038:	a2400317 	ldw	r9,12(r20)
    e03c:	a0800015 	stw	r2,0(r20)
    e040:	1a802336 	bltu	r3,r10,e0d0 <_fpadd_parts+0x250>
    e044:	a027883a 	mov	r19,r20
    e048:	9805883a 	mov	r2,r19
    e04c:	ddc00717 	ldw	r23,28(sp)
    e050:	dd800617 	ldw	r22,24(sp)
    e054:	dd400517 	ldw	r21,20(sp)
    e058:	dd000417 	ldw	r20,16(sp)
    e05c:	dcc00317 	ldw	r19,12(sp)
    e060:	dc800217 	ldw	r18,8(sp)
    e064:	dc400117 	ldw	r17,4(sp)
    e068:	dc000017 	ldw	r16,0(sp)
    e06c:	dec00804 	addi	sp,sp,32
    e070:	f800283a 	ret
    e074:	20fff41e 	bne	r4,r3,e048 <_fpadd_parts+0x1c8>
    e078:	31000015 	stw	r4,0(r6)
    e07c:	98800117 	ldw	r2,4(r19)
    e080:	30800115 	stw	r2,4(r6)
    e084:	98c00217 	ldw	r3,8(r19)
    e088:	30c00215 	stw	r3,8(r6)
    e08c:	98800317 	ldw	r2,12(r19)
    e090:	30800315 	stw	r2,12(r6)
    e094:	98c00417 	ldw	r3,16(r19)
    e098:	30c00415 	stw	r3,16(r6)
    e09c:	98800117 	ldw	r2,4(r19)
    e0a0:	28c00117 	ldw	r3,4(r5)
    e0a4:	3027883a 	mov	r19,r6
    e0a8:	10c4703a 	and	r2,r2,r3
    e0ac:	30800115 	stw	r2,4(r6)
    e0b0:	003fe506 	br	e048 <_fpadd_parts+0x1c8>
    e0b4:	1dc02616 	blt	r3,r23,e150 <_fpadd_parts+0x2d0>
    e0b8:	0023883a 	mov	r17,zero
    e0bc:	182f883a 	mov	r23,r3
    e0c0:	0025883a 	mov	r18,zero
    e0c4:	003fa806 	br	df68 <_fpadd_parts+0xe8>
    e0c8:	a827883a 	mov	r19,r21
    e0cc:	003fde06 	br	e048 <_fpadd_parts+0x1c8>
    e0d0:	01800044 	movi	r6,1
    e0d4:	500497fa 	slli	r2,r10,31
    e0d8:	4808d07a 	srli	r4,r9,1
    e0dc:	518ad83a 	srl	r5,r10,r6
    e0e0:	a2000217 	ldw	r8,8(r20)
    e0e4:	1108b03a 	or	r4,r2,r4
    e0e8:	0007883a 	mov	r3,zero
    e0ec:	4984703a 	and	r2,r9,r6
    e0f0:	208cb03a 	or	r6,r4,r2
    e0f4:	28ceb03a 	or	r7,r5,r3
    e0f8:	42000044 	addi	r8,r8,1
    e0fc:	a027883a 	mov	r19,r20
    e100:	a1c00415 	stw	r7,16(r20)
    e104:	a2000215 	stw	r8,8(r20)
    e108:	a1800315 	stw	r6,12(r20)
    e10c:	003fce06 	br	e048 <_fpadd_parts+0x1c8>
    e110:	8bc5c83a 	sub	r2,r17,r15
    e114:	8889803a 	cmpltu	r4,r17,r2
    e118:	9407c83a 	sub	r3,r18,r16
    e11c:	1909c83a 	sub	r4,r3,r4
    e120:	100d883a 	mov	r6,r2
    e124:	200f883a 	mov	r7,r4
    e128:	003f9906 	br	df90 <_fpadd_parts+0x110>
    e12c:	8bc5883a 	add	r2,r17,r15
    e130:	1449803a 	cmpltu	r4,r2,r17
    e134:	9407883a 	add	r3,r18,r16
    e138:	20c9883a 	add	r4,r4,r3
    e13c:	a1400115 	stw	r5,4(r20)
    e140:	a5c00215 	stw	r23,8(r20)
    e144:	a0800315 	stw	r2,12(r20)
    e148:	a1000415 	stw	r4,16(r20)
    e14c:	003fb606 	br	e028 <_fpadd_parts+0x1a8>
    e150:	001f883a 	mov	r15,zero
    e154:	0021883a 	mov	r16,zero
    e158:	003f8306 	br	df68 <_fpadd_parts+0xe8>
    e15c:	018dc83a 	sub	r6,zero,r6
    e160:	003f6706 	br	df00 <_fpadd_parts+0x80>
    e164:	00bfff84 	movi	r2,-2
    e168:	117faf36 	bltu	r2,r5,e028 <_fpadd_parts+0x1a8>
    e16c:	003f9806 	br	dfd0 <_fpadd_parts+0x150>
    e170:	0005883a 	mov	r2,zero
    e174:	1189c83a 	sub	r4,r2,r6
    e178:	1105803a 	cmpltu	r2,r2,r4
    e17c:	01cbc83a 	sub	r5,zero,r7
    e180:	2885c83a 	sub	r2,r5,r2
    e184:	01800044 	movi	r6,1
    e188:	a1800115 	stw	r6,4(r20)
    e18c:	a5c00215 	stw	r23,8(r20)
    e190:	a1000315 	stw	r4,12(r20)
    e194:	a0800415 	stw	r2,16(r20)
    e198:	003f8206 	br	dfa4 <_fpadd_parts+0x124>
    e19c:	203f7226 	beq	r4,zero,df68 <_fpadd_parts+0xe8>
    e1a0:	35bff804 	addi	r22,r6,-32
    e1a4:	b9af883a 	add	r23,r23,r6
    e1a8:	b0003116 	blt	r22,zero,e270 <_fpadd_parts+0x3f0>
    e1ac:	959ad83a 	srl	r13,r18,r22
    e1b0:	001d883a 	mov	r14,zero
    e1b4:	000f883a 	mov	r7,zero
    e1b8:	01000044 	movi	r4,1
    e1bc:	0011883a 	mov	r8,zero
    e1c0:	b0002516 	blt	r22,zero,e258 <_fpadd_parts+0x3d8>
    e1c4:	2594983a 	sll	r10,r4,r22
    e1c8:	0013883a 	mov	r9,zero
    e1cc:	00bfffc4 	movi	r2,-1
    e1d0:	4889883a 	add	r4,r9,r2
    e1d4:	508b883a 	add	r5,r10,r2
    e1d8:	224d803a 	cmpltu	r6,r4,r9
    e1dc:	314b883a 	add	r5,r6,r5
    e1e0:	8904703a 	and	r2,r17,r4
    e1e4:	9146703a 	and	r3,r18,r5
    e1e8:	10c4b03a 	or	r2,r2,r3
    e1ec:	10000226 	beq	r2,zero,e1f8 <_fpadd_parts+0x378>
    e1f0:	01c00044 	movi	r7,1
    e1f4:	0011883a 	mov	r8,zero
    e1f8:	69e2b03a 	or	r17,r13,r7
    e1fc:	7224b03a 	or	r18,r14,r8
    e200:	003f5906 	br	df68 <_fpadd_parts+0xe8>
    e204:	8407883a 	add	r3,r16,r16
    e208:	008007c4 	movi	r2,31
    e20c:	1185c83a 	sub	r2,r2,r6
    e210:	1886983a 	sll	r3,r3,r2
    e214:	7996d83a 	srl	r11,r15,r6
    e218:	8198d83a 	srl	r12,r16,r6
    e21c:	1ad6b03a 	or	r11,r3,r11
    e220:	003f3e06 	br	df1c <_fpadd_parts+0x9c>
    e224:	2006d07a 	srli	r3,r4,1
    e228:	008007c4 	movi	r2,31
    e22c:	1185c83a 	sub	r2,r2,r6
    e230:	1890d83a 	srl	r8,r3,r2
    e234:	218e983a 	sll	r7,r4,r6
    e238:	003f3e06 	br	df34 <_fpadd_parts+0xb4>
    e23c:	113f821e 	bne	r2,r4,e048 <_fpadd_parts+0x1c8>
    e240:	28c00117 	ldw	r3,4(r5)
    e244:	98800117 	ldw	r2,4(r19)
    e248:	10ff7f26 	beq	r2,r3,e048 <_fpadd_parts+0x1c8>
    e24c:	04c00074 	movhi	r19,1
    e250:	9cc9db04 	addi	r19,r19,10092
    e254:	003f7c06 	br	e048 <_fpadd_parts+0x1c8>
    e258:	2006d07a 	srli	r3,r4,1
    e25c:	008007c4 	movi	r2,31
    e260:	1185c83a 	sub	r2,r2,r6
    e264:	1894d83a 	srl	r10,r3,r2
    e268:	2192983a 	sll	r9,r4,r6
    e26c:	003fd706 	br	e1cc <_fpadd_parts+0x34c>
    e270:	9487883a 	add	r3,r18,r18
    e274:	008007c4 	movi	r2,31
    e278:	1185c83a 	sub	r2,r2,r6
    e27c:	1886983a 	sll	r3,r3,r2
    e280:	899ad83a 	srl	r13,r17,r6
    e284:	919cd83a 	srl	r14,r18,r6
    e288:	1b5ab03a 	or	r13,r3,r13
    e28c:	003fc906 	br	e1b4 <_fpadd_parts+0x334>

0000e290 <__subdf3>:
    e290:	deffea04 	addi	sp,sp,-88
    e294:	dcc01415 	stw	r19,80(sp)
    e298:	dcc00404 	addi	r19,sp,16
    e29c:	2011883a 	mov	r8,r4
    e2a0:	2813883a 	mov	r9,r5
    e2a4:	dc401315 	stw	r17,76(sp)
    e2a8:	d809883a 	mov	r4,sp
    e2ac:	980b883a 	mov	r5,r19
    e2b0:	dc400904 	addi	r17,sp,36
    e2b4:	dfc01515 	stw	ra,84(sp)
    e2b8:	da400115 	stw	r9,4(sp)
    e2bc:	d9c00315 	stw	r7,12(sp)
    e2c0:	da000015 	stw	r8,0(sp)
    e2c4:	d9800215 	stw	r6,8(sp)
    e2c8:	000f2200 	call	f220 <__unpack_d>
    e2cc:	d9000204 	addi	r4,sp,8
    e2d0:	880b883a 	mov	r5,r17
    e2d4:	000f2200 	call	f220 <__unpack_d>
    e2d8:	d8800a17 	ldw	r2,40(sp)
    e2dc:	880b883a 	mov	r5,r17
    e2e0:	9809883a 	mov	r4,r19
    e2e4:	d9800e04 	addi	r6,sp,56
    e2e8:	1080005c 	xori	r2,r2,1
    e2ec:	d8800a15 	stw	r2,40(sp)
    e2f0:	000de800 	call	de80 <_fpadd_parts>
    e2f4:	1009883a 	mov	r4,r2
    e2f8:	0000d280 	call	d28 <__pack_d>
    e2fc:	dfc01517 	ldw	ra,84(sp)
    e300:	dcc01417 	ldw	r19,80(sp)
    e304:	dc401317 	ldw	r17,76(sp)
    e308:	dec01604 	addi	sp,sp,88
    e30c:	f800283a 	ret

0000e310 <__adddf3>:
    e310:	deffea04 	addi	sp,sp,-88
    e314:	dcc01415 	stw	r19,80(sp)
    e318:	dcc00404 	addi	r19,sp,16
    e31c:	2011883a 	mov	r8,r4
    e320:	2813883a 	mov	r9,r5
    e324:	dc401315 	stw	r17,76(sp)
    e328:	d809883a 	mov	r4,sp
    e32c:	980b883a 	mov	r5,r19
    e330:	dc400904 	addi	r17,sp,36
    e334:	dfc01515 	stw	ra,84(sp)
    e338:	da400115 	stw	r9,4(sp)
    e33c:	d9c00315 	stw	r7,12(sp)
    e340:	da000015 	stw	r8,0(sp)
    e344:	d9800215 	stw	r6,8(sp)
    e348:	000f2200 	call	f220 <__unpack_d>
    e34c:	d9000204 	addi	r4,sp,8
    e350:	880b883a 	mov	r5,r17
    e354:	000f2200 	call	f220 <__unpack_d>
    e358:	d9800e04 	addi	r6,sp,56
    e35c:	9809883a 	mov	r4,r19
    e360:	880b883a 	mov	r5,r17
    e364:	000de800 	call	de80 <_fpadd_parts>
    e368:	1009883a 	mov	r4,r2
    e36c:	0000d280 	call	d28 <__pack_d>
    e370:	dfc01517 	ldw	ra,84(sp)
    e374:	dcc01417 	ldw	r19,80(sp)
    e378:	dc401317 	ldw	r17,76(sp)
    e37c:	dec01604 	addi	sp,sp,88
    e380:	f800283a 	ret

0000e384 <__muldf3>:
    e384:	deffe004 	addi	sp,sp,-128
    e388:	dc401815 	stw	r17,96(sp)
    e38c:	dc400404 	addi	r17,sp,16
    e390:	2011883a 	mov	r8,r4
    e394:	2813883a 	mov	r9,r5
    e398:	dc001715 	stw	r16,92(sp)
    e39c:	d809883a 	mov	r4,sp
    e3a0:	880b883a 	mov	r5,r17
    e3a4:	dc000904 	addi	r16,sp,36
    e3a8:	dfc01f15 	stw	ra,124(sp)
    e3ac:	da400115 	stw	r9,4(sp)
    e3b0:	d9c00315 	stw	r7,12(sp)
    e3b4:	da000015 	stw	r8,0(sp)
    e3b8:	d9800215 	stw	r6,8(sp)
    e3bc:	ddc01e15 	stw	r23,120(sp)
    e3c0:	dd801d15 	stw	r22,116(sp)
    e3c4:	dd401c15 	stw	r21,112(sp)
    e3c8:	dd001b15 	stw	r20,108(sp)
    e3cc:	dcc01a15 	stw	r19,104(sp)
    e3d0:	dc801915 	stw	r18,100(sp)
    e3d4:	000f2200 	call	f220 <__unpack_d>
    e3d8:	d9000204 	addi	r4,sp,8
    e3dc:	800b883a 	mov	r5,r16
    e3e0:	000f2200 	call	f220 <__unpack_d>
    e3e4:	d9000417 	ldw	r4,16(sp)
    e3e8:	00800044 	movi	r2,1
    e3ec:	1100102e 	bgeu	r2,r4,e430 <__muldf3+0xac>
    e3f0:	d8c00917 	ldw	r3,36(sp)
    e3f4:	10c0062e 	bgeu	r2,r3,e410 <__muldf3+0x8c>
    e3f8:	00800104 	movi	r2,4
    e3fc:	20800a26 	beq	r4,r2,e428 <__muldf3+0xa4>
    e400:	1880cc26 	beq	r3,r2,e734 <__muldf3+0x3b0>
    e404:	00800084 	movi	r2,2
    e408:	20800926 	beq	r4,r2,e430 <__muldf3+0xac>
    e40c:	1880191e 	bne	r3,r2,e474 <__muldf3+0xf0>
    e410:	d8c00a17 	ldw	r3,40(sp)
    e414:	d8800517 	ldw	r2,20(sp)
    e418:	8009883a 	mov	r4,r16
    e41c:	10c4c03a 	cmpne	r2,r2,r3
    e420:	d8800a15 	stw	r2,40(sp)
    e424:	00000706 	br	e444 <__muldf3+0xc0>
    e428:	00800084 	movi	r2,2
    e42c:	1880c326 	beq	r3,r2,e73c <__muldf3+0x3b8>
    e430:	d8800517 	ldw	r2,20(sp)
    e434:	d8c00a17 	ldw	r3,40(sp)
    e438:	8809883a 	mov	r4,r17
    e43c:	10c4c03a 	cmpne	r2,r2,r3
    e440:	d8800515 	stw	r2,20(sp)
    e444:	0000d280 	call	d28 <__pack_d>
    e448:	dfc01f17 	ldw	ra,124(sp)
    e44c:	ddc01e17 	ldw	r23,120(sp)
    e450:	dd801d17 	ldw	r22,116(sp)
    e454:	dd401c17 	ldw	r21,112(sp)
    e458:	dd001b17 	ldw	r20,108(sp)
    e45c:	dcc01a17 	ldw	r19,104(sp)
    e460:	dc801917 	ldw	r18,100(sp)
    e464:	dc401817 	ldw	r17,96(sp)
    e468:	dc001717 	ldw	r16,92(sp)
    e46c:	dec02004 	addi	sp,sp,128
    e470:	f800283a 	ret
    e474:	dd800717 	ldw	r22,28(sp)
    e478:	dc800c17 	ldw	r18,48(sp)
    e47c:	002b883a 	mov	r21,zero
    e480:	0023883a 	mov	r17,zero
    e484:	a80b883a 	mov	r5,r21
    e488:	b00d883a 	mov	r6,r22
    e48c:	880f883a 	mov	r7,r17
    e490:	ddc00817 	ldw	r23,32(sp)
    e494:	dcc00d17 	ldw	r19,52(sp)
    e498:	9009883a 	mov	r4,r18
    e49c:	000d0c80 	call	d0c8 <__muldi3>
    e4a0:	001b883a 	mov	r13,zero
    e4a4:	680f883a 	mov	r7,r13
    e4a8:	b009883a 	mov	r4,r22
    e4ac:	000b883a 	mov	r5,zero
    e4b0:	980d883a 	mov	r6,r19
    e4b4:	b82d883a 	mov	r22,r23
    e4b8:	002f883a 	mov	r23,zero
    e4bc:	db401615 	stw	r13,88(sp)
    e4c0:	d8801315 	stw	r2,76(sp)
    e4c4:	d8c01415 	stw	r3,80(sp)
    e4c8:	dcc01515 	stw	r19,84(sp)
    e4cc:	000d0c80 	call	d0c8 <__muldi3>
    e4d0:	b00d883a 	mov	r6,r22
    e4d4:	000b883a 	mov	r5,zero
    e4d8:	9009883a 	mov	r4,r18
    e4dc:	b80f883a 	mov	r7,r23
    e4e0:	1021883a 	mov	r16,r2
    e4e4:	1823883a 	mov	r17,r3
    e4e8:	000d0c80 	call	d0c8 <__muldi3>
    e4ec:	8085883a 	add	r2,r16,r2
    e4f0:	140d803a 	cmpltu	r6,r2,r16
    e4f4:	88c7883a 	add	r3,r17,r3
    e4f8:	30cd883a 	add	r6,r6,r3
    e4fc:	1029883a 	mov	r20,r2
    e500:	302b883a 	mov	r21,r6
    e504:	da801317 	ldw	r10,76(sp)
    e508:	dac01417 	ldw	r11,80(sp)
    e50c:	db001517 	ldw	r12,84(sp)
    e510:	db401617 	ldw	r13,88(sp)
    e514:	3440612e 	bgeu	r6,r17,e69c <__muldf3+0x318>
    e518:	0009883a 	mov	r4,zero
    e51c:	5105883a 	add	r2,r10,r4
    e520:	128d803a 	cmpltu	r6,r2,r10
    e524:	5d07883a 	add	r3,r11,r20
    e528:	30cd883a 	add	r6,r6,r3
    e52c:	0021883a 	mov	r16,zero
    e530:	04400044 	movi	r17,1
    e534:	1025883a 	mov	r18,r2
    e538:	3027883a 	mov	r19,r6
    e53c:	32c06236 	bltu	r6,r11,e6c8 <__muldf3+0x344>
    e540:	59807a26 	beq	r11,r6,e72c <__muldf3+0x3a8>
    e544:	680b883a 	mov	r5,r13
    e548:	b80f883a 	mov	r7,r23
    e54c:	6009883a 	mov	r4,r12
    e550:	b00d883a 	mov	r6,r22
    e554:	000d0c80 	call	d0c8 <__muldi3>
    e558:	1009883a 	mov	r4,r2
    e55c:	000f883a 	mov	r7,zero
    e560:	1545883a 	add	r2,r2,r21
    e564:	1111803a 	cmpltu	r8,r2,r4
    e568:	19c7883a 	add	r3,r3,r7
    e56c:	40c7883a 	add	r3,r8,r3
    e570:	88cb883a 	add	r5,r17,r3
    e574:	d8c00617 	ldw	r3,24(sp)
    e578:	8089883a 	add	r4,r16,r2
    e57c:	d8800b17 	ldw	r2,44(sp)
    e580:	18c00104 	addi	r3,r3,4
    e584:	240d803a 	cmpltu	r6,r4,r16
    e588:	10c7883a 	add	r3,r2,r3
    e58c:	2013883a 	mov	r9,r4
    e590:	d8800a17 	ldw	r2,40(sp)
    e594:	d9000517 	ldw	r4,20(sp)
    e598:	314d883a 	add	r6,r6,r5
    e59c:	3015883a 	mov	r10,r6
    e5a0:	2088c03a 	cmpne	r4,r4,r2
    e5a4:	00880034 	movhi	r2,8192
    e5a8:	10bfffc4 	addi	r2,r2,-1
    e5ac:	d9000f15 	stw	r4,60(sp)
    e5b0:	d8c01015 	stw	r3,64(sp)
    e5b4:	1180162e 	bgeu	r2,r6,e610 <__muldf3+0x28c>
    e5b8:	1811883a 	mov	r8,r3
    e5bc:	101f883a 	mov	r15,r2
    e5c0:	980497fa 	slli	r2,r19,31
    e5c4:	9016d07a 	srli	r11,r18,1
    e5c8:	500697fa 	slli	r3,r10,31
    e5cc:	480cd07a 	srli	r6,r9,1
    e5d0:	500ed07a 	srli	r7,r10,1
    e5d4:	12d6b03a 	or	r11,r2,r11
    e5d8:	00800044 	movi	r2,1
    e5dc:	198cb03a 	or	r6,r3,r6
    e5e0:	4888703a 	and	r4,r9,r2
    e5e4:	9818d07a 	srli	r12,r19,1
    e5e8:	001b883a 	mov	r13,zero
    e5ec:	03a00034 	movhi	r14,32768
    e5f0:	3013883a 	mov	r9,r6
    e5f4:	3815883a 	mov	r10,r7
    e5f8:	4091883a 	add	r8,r8,r2
    e5fc:	20000226 	beq	r4,zero,e608 <__muldf3+0x284>
    e600:	5b64b03a 	or	r18,r11,r13
    e604:	63a6b03a 	or	r19,r12,r14
    e608:	7abfed36 	bltu	r15,r10,e5c0 <__muldf3+0x23c>
    e60c:	da001015 	stw	r8,64(sp)
    e610:	00840034 	movhi	r2,4096
    e614:	10bfffc4 	addi	r2,r2,-1
    e618:	12801436 	bltu	r2,r10,e66c <__muldf3+0x2e8>
    e61c:	da001017 	ldw	r8,64(sp)
    e620:	101f883a 	mov	r15,r2
    e624:	4a45883a 	add	r2,r9,r9
    e628:	124d803a 	cmpltu	r6,r2,r9
    e62c:	5287883a 	add	r3,r10,r10
    e630:	9497883a 	add	r11,r18,r18
    e634:	5c8f803a 	cmpltu	r7,r11,r18
    e638:	9cd9883a 	add	r12,r19,r19
    e63c:	01000044 	movi	r4,1
    e640:	30cd883a 	add	r6,r6,r3
    e644:	3b0f883a 	add	r7,r7,r12
    e648:	423fffc4 	addi	r8,r8,-1
    e64c:	1013883a 	mov	r9,r2
    e650:	3015883a 	mov	r10,r6
    e654:	111ab03a 	or	r13,r2,r4
    e658:	98003016 	blt	r19,zero,e71c <__muldf3+0x398>
    e65c:	5825883a 	mov	r18,r11
    e660:	3827883a 	mov	r19,r7
    e664:	7abfef2e 	bgeu	r15,r10,e624 <__muldf3+0x2a0>
    e668:	da001015 	stw	r8,64(sp)
    e66c:	00803fc4 	movi	r2,255
    e670:	488e703a 	and	r7,r9,r2
    e674:	00802004 	movi	r2,128
    e678:	0007883a 	mov	r3,zero
    e67c:	0011883a 	mov	r8,zero
    e680:	38801826 	beq	r7,r2,e6e4 <__muldf3+0x360>
    e684:	008000c4 	movi	r2,3
    e688:	d9000e04 	addi	r4,sp,56
    e68c:	da801215 	stw	r10,72(sp)
    e690:	d8800e15 	stw	r2,56(sp)
    e694:	da401115 	stw	r9,68(sp)
    e698:	003f6a06 	br	e444 <__muldf3+0xc0>
    e69c:	89802126 	beq	r17,r6,e724 <__muldf3+0x3a0>
    e6a0:	0009883a 	mov	r4,zero
    e6a4:	5105883a 	add	r2,r10,r4
    e6a8:	128d803a 	cmpltu	r6,r2,r10
    e6ac:	5d07883a 	add	r3,r11,r20
    e6b0:	30cd883a 	add	r6,r6,r3
    e6b4:	0021883a 	mov	r16,zero
    e6b8:	0023883a 	mov	r17,zero
    e6bc:	1025883a 	mov	r18,r2
    e6c0:	3027883a 	mov	r19,r6
    e6c4:	32ff9e2e 	bgeu	r6,r11,e540 <__muldf3+0x1bc>
    e6c8:	00800044 	movi	r2,1
    e6cc:	8089883a 	add	r4,r16,r2
    e6d0:	240d803a 	cmpltu	r6,r4,r16
    e6d4:	344d883a 	add	r6,r6,r17
    e6d8:	2021883a 	mov	r16,r4
    e6dc:	3023883a 	mov	r17,r6
    e6e0:	003f9806 	br	e544 <__muldf3+0x1c0>
    e6e4:	403fe71e 	bne	r8,zero,e684 <__muldf3+0x300>
    e6e8:	01004004 	movi	r4,256
    e6ec:	4904703a 	and	r2,r9,r4
    e6f0:	10c4b03a 	or	r2,r2,r3
    e6f4:	103fe31e 	bne	r2,zero,e684 <__muldf3+0x300>
    e6f8:	94c4b03a 	or	r2,r18,r19
    e6fc:	103fe126 	beq	r2,zero,e684 <__muldf3+0x300>
    e700:	49c5883a 	add	r2,r9,r7
    e704:	1251803a 	cmpltu	r8,r2,r9
    e708:	4291883a 	add	r8,r8,r10
    e70c:	013fc004 	movi	r4,-256
    e710:	1112703a 	and	r9,r2,r4
    e714:	4015883a 	mov	r10,r8
    e718:	003fda06 	br	e684 <__muldf3+0x300>
    e71c:	6813883a 	mov	r9,r13
    e720:	003fce06 	br	e65c <__muldf3+0x2d8>
    e724:	143f7c36 	bltu	r2,r16,e518 <__muldf3+0x194>
    e728:	003fdd06 	br	e6a0 <__muldf3+0x31c>
    e72c:	12bf852e 	bgeu	r2,r10,e544 <__muldf3+0x1c0>
    e730:	003fe506 	br	e6c8 <__muldf3+0x344>
    e734:	00800084 	movi	r2,2
    e738:	20bf351e 	bne	r4,r2,e410 <__muldf3+0x8c>
    e73c:	01000074 	movhi	r4,1
    e740:	2109db04 	addi	r4,r4,10092
    e744:	003f3f06 	br	e444 <__muldf3+0xc0>

0000e748 <__divdf3>:
    e748:	deffed04 	addi	sp,sp,-76
    e74c:	dcc01115 	stw	r19,68(sp)
    e750:	dcc00404 	addi	r19,sp,16
    e754:	2011883a 	mov	r8,r4
    e758:	2813883a 	mov	r9,r5
    e75c:	dc000e15 	stw	r16,56(sp)
    e760:	d809883a 	mov	r4,sp
    e764:	980b883a 	mov	r5,r19
    e768:	dc000904 	addi	r16,sp,36
    e76c:	dfc01215 	stw	ra,72(sp)
    e770:	da400115 	stw	r9,4(sp)
    e774:	d9c00315 	stw	r7,12(sp)
    e778:	da000015 	stw	r8,0(sp)
    e77c:	d9800215 	stw	r6,8(sp)
    e780:	dc801015 	stw	r18,64(sp)
    e784:	dc400f15 	stw	r17,60(sp)
    e788:	000f2200 	call	f220 <__unpack_d>
    e78c:	d9000204 	addi	r4,sp,8
    e790:	800b883a 	mov	r5,r16
    e794:	000f2200 	call	f220 <__unpack_d>
    e798:	d9000417 	ldw	r4,16(sp)
    e79c:	00800044 	movi	r2,1
    e7a0:	11000b2e 	bgeu	r2,r4,e7d0 <__divdf3+0x88>
    e7a4:	d9400917 	ldw	r5,36(sp)
    e7a8:	1140762e 	bgeu	r2,r5,e984 <__divdf3+0x23c>
    e7ac:	d8800517 	ldw	r2,20(sp)
    e7b0:	d8c00a17 	ldw	r3,40(sp)
    e7b4:	01800104 	movi	r6,4
    e7b8:	10c4f03a 	xor	r2,r2,r3
    e7bc:	d8800515 	stw	r2,20(sp)
    e7c0:	21800226 	beq	r4,r6,e7cc <__divdf3+0x84>
    e7c4:	00800084 	movi	r2,2
    e7c8:	2080141e 	bne	r4,r2,e81c <__divdf3+0xd4>
    e7cc:	29000926 	beq	r5,r4,e7f4 <__divdf3+0xac>
    e7d0:	9809883a 	mov	r4,r19
    e7d4:	0000d280 	call	d28 <__pack_d>
    e7d8:	dfc01217 	ldw	ra,72(sp)
    e7dc:	dcc01117 	ldw	r19,68(sp)
    e7e0:	dc801017 	ldw	r18,64(sp)
    e7e4:	dc400f17 	ldw	r17,60(sp)
    e7e8:	dc000e17 	ldw	r16,56(sp)
    e7ec:	dec01304 	addi	sp,sp,76
    e7f0:	f800283a 	ret
    e7f4:	01000074 	movhi	r4,1
    e7f8:	2109db04 	addi	r4,r4,10092
    e7fc:	0000d280 	call	d28 <__pack_d>
    e800:	dfc01217 	ldw	ra,72(sp)
    e804:	dcc01117 	ldw	r19,68(sp)
    e808:	dc801017 	ldw	r18,64(sp)
    e80c:	dc400f17 	ldw	r17,60(sp)
    e810:	dc000e17 	ldw	r16,56(sp)
    e814:	dec01304 	addi	sp,sp,76
    e818:	f800283a 	ret
    e81c:	29805b26 	beq	r5,r6,e98c <__divdf3+0x244>
    e820:	28802d26 	beq	r5,r2,e8d8 <__divdf3+0x190>
    e824:	d8c00617 	ldw	r3,24(sp)
    e828:	d8800b17 	ldw	r2,44(sp)
    e82c:	d9c00817 	ldw	r7,32(sp)
    e830:	dc400d17 	ldw	r17,52(sp)
    e834:	188bc83a 	sub	r5,r3,r2
    e838:	d9800717 	ldw	r6,28(sp)
    e83c:	dc000c17 	ldw	r16,48(sp)
    e840:	d9400615 	stw	r5,24(sp)
    e844:	3c403836 	bltu	r7,r17,e928 <__divdf3+0x1e0>
    e848:	89c03626 	beq	r17,r7,e924 <__divdf3+0x1dc>
    e84c:	0015883a 	mov	r10,zero
    e850:	001d883a 	mov	r14,zero
    e854:	02c40034 	movhi	r11,4096
    e858:	001f883a 	mov	r15,zero
    e85c:	003f883a 	mov	ra,zero
    e860:	04800f44 	movi	r18,61
    e864:	00000f06 	br	e8a4 <__divdf3+0x15c>
    e868:	601d883a 	mov	r14,r12
    e86c:	681f883a 	mov	r15,r13
    e870:	400d883a 	mov	r6,r8
    e874:	100f883a 	mov	r7,r2
    e878:	3191883a 	add	r8,r6,r6
    e87c:	5808d07a 	srli	r4,r11,1
    e880:	4185803a 	cmpltu	r2,r8,r6
    e884:	39d3883a 	add	r9,r7,r7
    e888:	28c6b03a 	or	r3,r5,r3
    e88c:	1245883a 	add	r2,r2,r9
    e890:	1815883a 	mov	r10,r3
    e894:	2017883a 	mov	r11,r4
    e898:	400d883a 	mov	r6,r8
    e89c:	100f883a 	mov	r7,r2
    e8a0:	fc801726 	beq	ra,r18,e900 <__divdf3+0x1b8>
    e8a4:	580a97fa 	slli	r5,r11,31
    e8a8:	5006d07a 	srli	r3,r10,1
    e8ac:	ffc00044 	addi	ra,ra,1
    e8b0:	3c7ff136 	bltu	r7,r17,e878 <__divdf3+0x130>
    e8b4:	3411c83a 	sub	r8,r6,r16
    e8b8:	3205803a 	cmpltu	r2,r6,r8
    e8bc:	3c53c83a 	sub	r9,r7,r17
    e8c0:	7298b03a 	or	r12,r14,r10
    e8c4:	7adab03a 	or	r13,r15,r11
    e8c8:	4885c83a 	sub	r2,r9,r2
    e8cc:	89ffe61e 	bne	r17,r7,e868 <__divdf3+0x120>
    e8d0:	343fe936 	bltu	r6,r16,e878 <__divdf3+0x130>
    e8d4:	003fe406 	br	e868 <__divdf3+0x120>
    e8d8:	9809883a 	mov	r4,r19
    e8dc:	d9800415 	stw	r6,16(sp)
    e8e0:	0000d280 	call	d28 <__pack_d>
    e8e4:	dfc01217 	ldw	ra,72(sp)
    e8e8:	dcc01117 	ldw	r19,68(sp)
    e8ec:	dc801017 	ldw	r18,64(sp)
    e8f0:	dc400f17 	ldw	r17,60(sp)
    e8f4:	dc000e17 	ldw	r16,56(sp)
    e8f8:	dec01304 	addi	sp,sp,76
    e8fc:	f800283a 	ret
    e900:	00803fc4 	movi	r2,255
    e904:	7090703a 	and	r8,r14,r2
    e908:	00802004 	movi	r2,128
    e90c:	0007883a 	mov	r3,zero
    e910:	0013883a 	mov	r9,zero
    e914:	40800d26 	beq	r8,r2,e94c <__divdf3+0x204>
    e918:	dbc00815 	stw	r15,32(sp)
    e91c:	db800715 	stw	r14,28(sp)
    e920:	003fab06 	br	e7d0 <__divdf3+0x88>
    e924:	343fc92e 	bgeu	r6,r16,e84c <__divdf3+0x104>
    e928:	3185883a 	add	r2,r6,r6
    e92c:	1189803a 	cmpltu	r4,r2,r6
    e930:	39c7883a 	add	r3,r7,r7
    e934:	20c9883a 	add	r4,r4,r3
    e938:	297fffc4 	addi	r5,r5,-1
    e93c:	100d883a 	mov	r6,r2
    e940:	200f883a 	mov	r7,r4
    e944:	d9400615 	stw	r5,24(sp)
    e948:	003fc006 	br	e84c <__divdf3+0x104>
    e94c:	483ff21e 	bne	r9,zero,e918 <__divdf3+0x1d0>
    e950:	01004004 	movi	r4,256
    e954:	7104703a 	and	r2,r14,r4
    e958:	10c4b03a 	or	r2,r2,r3
    e95c:	103fee1e 	bne	r2,zero,e918 <__divdf3+0x1d0>
    e960:	31c4b03a 	or	r2,r6,r7
    e964:	103fec26 	beq	r2,zero,e918 <__divdf3+0x1d0>
    e968:	7205883a 	add	r2,r14,r8
    e96c:	1391803a 	cmpltu	r8,r2,r14
    e970:	43d1883a 	add	r8,r8,r15
    e974:	013fc004 	movi	r4,-256
    e978:	111c703a 	and	r14,r2,r4
    e97c:	401f883a 	mov	r15,r8
    e980:	003fe506 	br	e918 <__divdf3+0x1d0>
    e984:	8009883a 	mov	r4,r16
    e988:	003f9206 	br	e7d4 <__divdf3+0x8c>
    e98c:	9809883a 	mov	r4,r19
    e990:	d8000715 	stw	zero,28(sp)
    e994:	d8000815 	stw	zero,32(sp)
    e998:	d8000615 	stw	zero,24(sp)
    e99c:	003f8d06 	br	e7d4 <__divdf3+0x8c>

0000e9a0 <__eqdf2>:
    e9a0:	deffef04 	addi	sp,sp,-68
    e9a4:	dc400f15 	stw	r17,60(sp)
    e9a8:	dc400404 	addi	r17,sp,16
    e9ac:	2005883a 	mov	r2,r4
    e9b0:	2807883a 	mov	r3,r5
    e9b4:	dc000e15 	stw	r16,56(sp)
    e9b8:	d809883a 	mov	r4,sp
    e9bc:	880b883a 	mov	r5,r17
    e9c0:	dc000904 	addi	r16,sp,36
    e9c4:	d8c00115 	stw	r3,4(sp)
    e9c8:	d8800015 	stw	r2,0(sp)
    e9cc:	d9800215 	stw	r6,8(sp)
    e9d0:	dfc01015 	stw	ra,64(sp)
    e9d4:	d9c00315 	stw	r7,12(sp)
    e9d8:	000f2200 	call	f220 <__unpack_d>
    e9dc:	d9000204 	addi	r4,sp,8
    e9e0:	800b883a 	mov	r5,r16
    e9e4:	000f2200 	call	f220 <__unpack_d>
    e9e8:	d8800417 	ldw	r2,16(sp)
    e9ec:	00c00044 	movi	r3,1
    e9f0:	180d883a 	mov	r6,r3
    e9f4:	1880062e 	bgeu	r3,r2,ea10 <__eqdf2+0x70>
    e9f8:	d8800917 	ldw	r2,36(sp)
    e9fc:	8809883a 	mov	r4,r17
    ea00:	800b883a 	mov	r5,r16
    ea04:	1880022e 	bgeu	r3,r2,ea10 <__eqdf2+0x70>
    ea08:	000f3580 	call	f358 <__fpcmp_parts_d>
    ea0c:	100d883a 	mov	r6,r2
    ea10:	3005883a 	mov	r2,r6
    ea14:	dfc01017 	ldw	ra,64(sp)
    ea18:	dc400f17 	ldw	r17,60(sp)
    ea1c:	dc000e17 	ldw	r16,56(sp)
    ea20:	dec01104 	addi	sp,sp,68
    ea24:	f800283a 	ret

0000ea28 <__nedf2>:
    ea28:	deffef04 	addi	sp,sp,-68
    ea2c:	dc400f15 	stw	r17,60(sp)
    ea30:	dc400404 	addi	r17,sp,16
    ea34:	2005883a 	mov	r2,r4
    ea38:	2807883a 	mov	r3,r5
    ea3c:	dc000e15 	stw	r16,56(sp)
    ea40:	d809883a 	mov	r4,sp
    ea44:	880b883a 	mov	r5,r17
    ea48:	dc000904 	addi	r16,sp,36
    ea4c:	d8c00115 	stw	r3,4(sp)
    ea50:	d8800015 	stw	r2,0(sp)
    ea54:	d9800215 	stw	r6,8(sp)
    ea58:	dfc01015 	stw	ra,64(sp)
    ea5c:	d9c00315 	stw	r7,12(sp)
    ea60:	000f2200 	call	f220 <__unpack_d>
    ea64:	d9000204 	addi	r4,sp,8
    ea68:	800b883a 	mov	r5,r16
    ea6c:	000f2200 	call	f220 <__unpack_d>
    ea70:	d8800417 	ldw	r2,16(sp)
    ea74:	00c00044 	movi	r3,1
    ea78:	180d883a 	mov	r6,r3
    ea7c:	1880062e 	bgeu	r3,r2,ea98 <__nedf2+0x70>
    ea80:	d8800917 	ldw	r2,36(sp)
    ea84:	8809883a 	mov	r4,r17
    ea88:	800b883a 	mov	r5,r16
    ea8c:	1880022e 	bgeu	r3,r2,ea98 <__nedf2+0x70>
    ea90:	000f3580 	call	f358 <__fpcmp_parts_d>
    ea94:	100d883a 	mov	r6,r2
    ea98:	3005883a 	mov	r2,r6
    ea9c:	dfc01017 	ldw	ra,64(sp)
    eaa0:	dc400f17 	ldw	r17,60(sp)
    eaa4:	dc000e17 	ldw	r16,56(sp)
    eaa8:	dec01104 	addi	sp,sp,68
    eaac:	f800283a 	ret

0000eab0 <__gtdf2>:
    eab0:	deffef04 	addi	sp,sp,-68
    eab4:	dc400f15 	stw	r17,60(sp)
    eab8:	dc400404 	addi	r17,sp,16
    eabc:	2005883a 	mov	r2,r4
    eac0:	2807883a 	mov	r3,r5
    eac4:	dc000e15 	stw	r16,56(sp)
    eac8:	d809883a 	mov	r4,sp
    eacc:	880b883a 	mov	r5,r17
    ead0:	dc000904 	addi	r16,sp,36
    ead4:	d8c00115 	stw	r3,4(sp)
    ead8:	d8800015 	stw	r2,0(sp)
    eadc:	d9800215 	stw	r6,8(sp)
    eae0:	dfc01015 	stw	ra,64(sp)
    eae4:	d9c00315 	stw	r7,12(sp)
    eae8:	000f2200 	call	f220 <__unpack_d>
    eaec:	d9000204 	addi	r4,sp,8
    eaf0:	800b883a 	mov	r5,r16
    eaf4:	000f2200 	call	f220 <__unpack_d>
    eaf8:	d8800417 	ldw	r2,16(sp)
    eafc:	00c00044 	movi	r3,1
    eb00:	01bfffc4 	movi	r6,-1
    eb04:	1880062e 	bgeu	r3,r2,eb20 <__gtdf2+0x70>
    eb08:	d8800917 	ldw	r2,36(sp)
    eb0c:	8809883a 	mov	r4,r17
    eb10:	800b883a 	mov	r5,r16
    eb14:	1880022e 	bgeu	r3,r2,eb20 <__gtdf2+0x70>
    eb18:	000f3580 	call	f358 <__fpcmp_parts_d>
    eb1c:	100d883a 	mov	r6,r2
    eb20:	3005883a 	mov	r2,r6
    eb24:	dfc01017 	ldw	ra,64(sp)
    eb28:	dc400f17 	ldw	r17,60(sp)
    eb2c:	dc000e17 	ldw	r16,56(sp)
    eb30:	dec01104 	addi	sp,sp,68
    eb34:	f800283a 	ret

0000eb38 <__gedf2>:
    eb38:	deffef04 	addi	sp,sp,-68
    eb3c:	dc400f15 	stw	r17,60(sp)
    eb40:	dc400404 	addi	r17,sp,16
    eb44:	2005883a 	mov	r2,r4
    eb48:	2807883a 	mov	r3,r5
    eb4c:	dc000e15 	stw	r16,56(sp)
    eb50:	d809883a 	mov	r4,sp
    eb54:	880b883a 	mov	r5,r17
    eb58:	dc000904 	addi	r16,sp,36
    eb5c:	d8c00115 	stw	r3,4(sp)
    eb60:	d8800015 	stw	r2,0(sp)
    eb64:	d9800215 	stw	r6,8(sp)
    eb68:	dfc01015 	stw	ra,64(sp)
    eb6c:	d9c00315 	stw	r7,12(sp)
    eb70:	000f2200 	call	f220 <__unpack_d>
    eb74:	d9000204 	addi	r4,sp,8
    eb78:	800b883a 	mov	r5,r16
    eb7c:	000f2200 	call	f220 <__unpack_d>
    eb80:	d8800417 	ldw	r2,16(sp)
    eb84:	00c00044 	movi	r3,1
    eb88:	01bfffc4 	movi	r6,-1
    eb8c:	1880062e 	bgeu	r3,r2,eba8 <__gedf2+0x70>
    eb90:	d8800917 	ldw	r2,36(sp)
    eb94:	8809883a 	mov	r4,r17
    eb98:	800b883a 	mov	r5,r16
    eb9c:	1880022e 	bgeu	r3,r2,eba8 <__gedf2+0x70>
    eba0:	000f3580 	call	f358 <__fpcmp_parts_d>
    eba4:	100d883a 	mov	r6,r2
    eba8:	3005883a 	mov	r2,r6
    ebac:	dfc01017 	ldw	ra,64(sp)
    ebb0:	dc400f17 	ldw	r17,60(sp)
    ebb4:	dc000e17 	ldw	r16,56(sp)
    ebb8:	dec01104 	addi	sp,sp,68
    ebbc:	f800283a 	ret

0000ebc0 <__ltdf2>:
    ebc0:	deffef04 	addi	sp,sp,-68
    ebc4:	dc400f15 	stw	r17,60(sp)
    ebc8:	dc400404 	addi	r17,sp,16
    ebcc:	2005883a 	mov	r2,r4
    ebd0:	2807883a 	mov	r3,r5
    ebd4:	dc000e15 	stw	r16,56(sp)
    ebd8:	d809883a 	mov	r4,sp
    ebdc:	880b883a 	mov	r5,r17
    ebe0:	dc000904 	addi	r16,sp,36
    ebe4:	d8c00115 	stw	r3,4(sp)
    ebe8:	d8800015 	stw	r2,0(sp)
    ebec:	d9800215 	stw	r6,8(sp)
    ebf0:	dfc01015 	stw	ra,64(sp)
    ebf4:	d9c00315 	stw	r7,12(sp)
    ebf8:	000f2200 	call	f220 <__unpack_d>
    ebfc:	d9000204 	addi	r4,sp,8
    ec00:	800b883a 	mov	r5,r16
    ec04:	000f2200 	call	f220 <__unpack_d>
    ec08:	d8800417 	ldw	r2,16(sp)
    ec0c:	00c00044 	movi	r3,1
    ec10:	180d883a 	mov	r6,r3
    ec14:	1880062e 	bgeu	r3,r2,ec30 <__ltdf2+0x70>
    ec18:	d8800917 	ldw	r2,36(sp)
    ec1c:	8809883a 	mov	r4,r17
    ec20:	800b883a 	mov	r5,r16
    ec24:	1880022e 	bgeu	r3,r2,ec30 <__ltdf2+0x70>
    ec28:	000f3580 	call	f358 <__fpcmp_parts_d>
    ec2c:	100d883a 	mov	r6,r2
    ec30:	3005883a 	mov	r2,r6
    ec34:	dfc01017 	ldw	ra,64(sp)
    ec38:	dc400f17 	ldw	r17,60(sp)
    ec3c:	dc000e17 	ldw	r16,56(sp)
    ec40:	dec01104 	addi	sp,sp,68
    ec44:	f800283a 	ret

0000ec48 <__ledf2>:
    ec48:	deffef04 	addi	sp,sp,-68
    ec4c:	dc400f15 	stw	r17,60(sp)
    ec50:	dc400404 	addi	r17,sp,16
    ec54:	2005883a 	mov	r2,r4
    ec58:	2807883a 	mov	r3,r5
    ec5c:	dc000e15 	stw	r16,56(sp)
    ec60:	d809883a 	mov	r4,sp
    ec64:	880b883a 	mov	r5,r17
    ec68:	dc000904 	addi	r16,sp,36
    ec6c:	d8c00115 	stw	r3,4(sp)
    ec70:	d8800015 	stw	r2,0(sp)
    ec74:	d9800215 	stw	r6,8(sp)
    ec78:	dfc01015 	stw	ra,64(sp)
    ec7c:	d9c00315 	stw	r7,12(sp)
    ec80:	000f2200 	call	f220 <__unpack_d>
    ec84:	d9000204 	addi	r4,sp,8
    ec88:	800b883a 	mov	r5,r16
    ec8c:	000f2200 	call	f220 <__unpack_d>
    ec90:	d8800417 	ldw	r2,16(sp)
    ec94:	00c00044 	movi	r3,1
    ec98:	180d883a 	mov	r6,r3
    ec9c:	1880062e 	bgeu	r3,r2,ecb8 <__ledf2+0x70>
    eca0:	d8800917 	ldw	r2,36(sp)
    eca4:	8809883a 	mov	r4,r17
    eca8:	800b883a 	mov	r5,r16
    ecac:	1880022e 	bgeu	r3,r2,ecb8 <__ledf2+0x70>
    ecb0:	000f3580 	call	f358 <__fpcmp_parts_d>
    ecb4:	100d883a 	mov	r6,r2
    ecb8:	3005883a 	mov	r2,r6
    ecbc:	dfc01017 	ldw	ra,64(sp)
    ecc0:	dc400f17 	ldw	r17,60(sp)
    ecc4:	dc000e17 	ldw	r16,56(sp)
    ecc8:	dec01104 	addi	sp,sp,68
    eccc:	f800283a 	ret

0000ecd0 <__floatsidf>:
    ecd0:	2006d7fa 	srli	r3,r4,31
    ecd4:	defff604 	addi	sp,sp,-40
    ecd8:	008000c4 	movi	r2,3
    ecdc:	dfc00915 	stw	ra,36(sp)
    ece0:	dcc00815 	stw	r19,32(sp)
    ece4:	dc800715 	stw	r18,28(sp)
    ece8:	dc400615 	stw	r17,24(sp)
    ecec:	dc000515 	stw	r16,20(sp)
    ecf0:	d8800015 	stw	r2,0(sp)
    ecf4:	d8c00115 	stw	r3,4(sp)
    ecf8:	20000f1e 	bne	r4,zero,ed38 <__floatsidf+0x68>
    ecfc:	00800084 	movi	r2,2
    ed00:	d8800015 	stw	r2,0(sp)
    ed04:	d809883a 	mov	r4,sp
    ed08:	0000d280 	call	d28 <__pack_d>
    ed0c:	1009883a 	mov	r4,r2
    ed10:	180b883a 	mov	r5,r3
    ed14:	2005883a 	mov	r2,r4
    ed18:	2807883a 	mov	r3,r5
    ed1c:	dfc00917 	ldw	ra,36(sp)
    ed20:	dcc00817 	ldw	r19,32(sp)
    ed24:	dc800717 	ldw	r18,28(sp)
    ed28:	dc400617 	ldw	r17,24(sp)
    ed2c:	dc000517 	ldw	r16,20(sp)
    ed30:	dec00a04 	addi	sp,sp,40
    ed34:	f800283a 	ret
    ed38:	00800f04 	movi	r2,60
    ed3c:	1807003a 	cmpeq	r3,r3,zero
    ed40:	d8800215 	stw	r2,8(sp)
    ed44:	18001126 	beq	r3,zero,ed8c <__floatsidf+0xbc>
    ed48:	0027883a 	mov	r19,zero
    ed4c:	2025883a 	mov	r18,r4
    ed50:	d9000315 	stw	r4,12(sp)
    ed54:	dcc00415 	stw	r19,16(sp)
    ed58:	00009d80 	call	9d8 <__clzsi2>
    ed5c:	11000744 	addi	r4,r2,29
    ed60:	013fe80e 	bge	zero,r4,ed04 <__floatsidf+0x34>
    ed64:	10bfff44 	addi	r2,r2,-3
    ed68:	10000c16 	blt	r2,zero,ed9c <__floatsidf+0xcc>
    ed6c:	90a2983a 	sll	r17,r18,r2
    ed70:	0021883a 	mov	r16,zero
    ed74:	d8800217 	ldw	r2,8(sp)
    ed78:	dc400415 	stw	r17,16(sp)
    ed7c:	dc000315 	stw	r16,12(sp)
    ed80:	1105c83a 	sub	r2,r2,r4
    ed84:	d8800215 	stw	r2,8(sp)
    ed88:	003fde06 	br	ed04 <__floatsidf+0x34>
    ed8c:	00a00034 	movhi	r2,32768
    ed90:	20800a26 	beq	r4,r2,edbc <__floatsidf+0xec>
    ed94:	0109c83a 	sub	r4,zero,r4
    ed98:	003feb06 	br	ed48 <__floatsidf+0x78>
    ed9c:	9006d07a 	srli	r3,r18,1
    eda0:	008007c4 	movi	r2,31
    eda4:	1105c83a 	sub	r2,r2,r4
    eda8:	1886d83a 	srl	r3,r3,r2
    edac:	9922983a 	sll	r17,r19,r4
    edb0:	9120983a 	sll	r16,r18,r4
    edb4:	1c62b03a 	or	r17,r3,r17
    edb8:	003fee06 	br	ed74 <__floatsidf+0xa4>
    edbc:	0009883a 	mov	r4,zero
    edc0:	01707834 	movhi	r5,49632
    edc4:	003fd306 	br	ed14 <__floatsidf+0x44>

0000edc8 <__fixdfsi>:
    edc8:	defff804 	addi	sp,sp,-32
    edcc:	2005883a 	mov	r2,r4
    edd0:	2807883a 	mov	r3,r5
    edd4:	d809883a 	mov	r4,sp
    edd8:	d9400204 	addi	r5,sp,8
    eddc:	d8c00115 	stw	r3,4(sp)
    ede0:	d8800015 	stw	r2,0(sp)
    ede4:	dfc00715 	stw	ra,28(sp)
    ede8:	000f2200 	call	f220 <__unpack_d>
    edec:	d8c00217 	ldw	r3,8(sp)
    edf0:	00800084 	movi	r2,2
    edf4:	1880051e 	bne	r3,r2,ee0c <__fixdfsi+0x44>
    edf8:	0007883a 	mov	r3,zero
    edfc:	1805883a 	mov	r2,r3
    ee00:	dfc00717 	ldw	ra,28(sp)
    ee04:	dec00804 	addi	sp,sp,32
    ee08:	f800283a 	ret
    ee0c:	00800044 	movi	r2,1
    ee10:	10fff92e 	bgeu	r2,r3,edf8 <__fixdfsi+0x30>
    ee14:	00800104 	movi	r2,4
    ee18:	18800426 	beq	r3,r2,ee2c <__fixdfsi+0x64>
    ee1c:	d8c00417 	ldw	r3,16(sp)
    ee20:	183ff516 	blt	r3,zero,edf8 <__fixdfsi+0x30>
    ee24:	00800784 	movi	r2,30
    ee28:	10c0080e 	bge	r2,r3,ee4c <__fixdfsi+0x84>
    ee2c:	d8800317 	ldw	r2,12(sp)
    ee30:	1000121e 	bne	r2,zero,ee7c <__fixdfsi+0xb4>
    ee34:	00e00034 	movhi	r3,32768
    ee38:	18ffffc4 	addi	r3,r3,-1
    ee3c:	1805883a 	mov	r2,r3
    ee40:	dfc00717 	ldw	ra,28(sp)
    ee44:	dec00804 	addi	sp,sp,32
    ee48:	f800283a 	ret
    ee4c:	00800f04 	movi	r2,60
    ee50:	10d1c83a 	sub	r8,r2,r3
    ee54:	40bff804 	addi	r2,r8,-32
    ee58:	d9800517 	ldw	r6,20(sp)
    ee5c:	d9c00617 	ldw	r7,24(sp)
    ee60:	10000816 	blt	r2,zero,ee84 <__fixdfsi+0xbc>
    ee64:	3888d83a 	srl	r4,r7,r2
    ee68:	d8800317 	ldw	r2,12(sp)
    ee6c:	2007883a 	mov	r3,r4
    ee70:	103fe226 	beq	r2,zero,edfc <__fixdfsi+0x34>
    ee74:	0107c83a 	sub	r3,zero,r4
    ee78:	003fe006 	br	edfc <__fixdfsi+0x34>
    ee7c:	00e00034 	movhi	r3,32768
    ee80:	003fde06 	br	edfc <__fixdfsi+0x34>
    ee84:	39c7883a 	add	r3,r7,r7
    ee88:	008007c4 	movi	r2,31
    ee8c:	1205c83a 	sub	r2,r2,r8
    ee90:	1886983a 	sll	r3,r3,r2
    ee94:	3208d83a 	srl	r4,r6,r8
    ee98:	1908b03a 	or	r4,r3,r4
    ee9c:	003ff206 	br	ee68 <__fixdfsi+0xa0>

0000eea0 <__truncdfsf2>:
    eea0:	defff804 	addi	sp,sp,-32
    eea4:	2005883a 	mov	r2,r4
    eea8:	2807883a 	mov	r3,r5
    eeac:	d809883a 	mov	r4,sp
    eeb0:	d9400204 	addi	r5,sp,8
    eeb4:	d8c00115 	stw	r3,4(sp)
    eeb8:	d8800015 	stw	r2,0(sp)
    eebc:	dfc00715 	stw	ra,28(sp)
    eec0:	000f2200 	call	f220 <__unpack_d>
    eec4:	d9c00517 	ldw	r7,20(sp)
    eec8:	da000617 	ldw	r8,24(sp)
    eecc:	02d00034 	movhi	r11,16384
    eed0:	5affffc4 	addi	r11,r11,-1
    eed4:	3812d7ba 	srli	r9,r7,30
    eed8:	401a90ba 	slli	r13,r8,2
    eedc:	3ac4703a 	and	r2,r7,r11
    eee0:	0007883a 	mov	r3,zero
    eee4:	6a52b03a 	or	r9,r13,r9
    eee8:	10c4b03a 	or	r2,r2,r3
    eeec:	d9000217 	ldw	r4,8(sp)
    eef0:	d9400317 	ldw	r5,12(sp)
    eef4:	d9800417 	ldw	r6,16(sp)
    eef8:	480f883a 	mov	r7,r9
    eefc:	10000126 	beq	r2,zero,ef04 <__truncdfsf2+0x64>
    ef00:	49c00054 	ori	r7,r9,1
    ef04:	000f1f40 	call	f1f4 <__make_fp>
    ef08:	dfc00717 	ldw	ra,28(sp)
    ef0c:	dec00804 	addi	sp,sp,32
    ef10:	f800283a 	ret

0000ef14 <__floatunsidf>:
    ef14:	defff204 	addi	sp,sp,-56
    ef18:	dfc00d15 	stw	ra,52(sp)
    ef1c:	ddc00c15 	stw	r23,48(sp)
    ef20:	dd800b15 	stw	r22,44(sp)
    ef24:	dd400a15 	stw	r21,40(sp)
    ef28:	dd000915 	stw	r20,36(sp)
    ef2c:	dcc00815 	stw	r19,32(sp)
    ef30:	dc800715 	stw	r18,28(sp)
    ef34:	dc400615 	stw	r17,24(sp)
    ef38:	dc000515 	stw	r16,20(sp)
    ef3c:	d8000115 	stw	zero,4(sp)
    ef40:	20000f1e 	bne	r4,zero,ef80 <__floatunsidf+0x6c>
    ef44:	00800084 	movi	r2,2
    ef48:	d8800015 	stw	r2,0(sp)
    ef4c:	d809883a 	mov	r4,sp
    ef50:	0000d280 	call	d28 <__pack_d>
    ef54:	dfc00d17 	ldw	ra,52(sp)
    ef58:	ddc00c17 	ldw	r23,48(sp)
    ef5c:	dd800b17 	ldw	r22,44(sp)
    ef60:	dd400a17 	ldw	r21,40(sp)
    ef64:	dd000917 	ldw	r20,36(sp)
    ef68:	dcc00817 	ldw	r19,32(sp)
    ef6c:	dc800717 	ldw	r18,28(sp)
    ef70:	dc400617 	ldw	r17,24(sp)
    ef74:	dc000517 	ldw	r16,20(sp)
    ef78:	dec00e04 	addi	sp,sp,56
    ef7c:	f800283a 	ret
    ef80:	008000c4 	movi	r2,3
    ef84:	00c00f04 	movi	r3,60
    ef88:	002f883a 	mov	r23,zero
    ef8c:	202d883a 	mov	r22,r4
    ef90:	d8800015 	stw	r2,0(sp)
    ef94:	d8c00215 	stw	r3,8(sp)
    ef98:	d9000315 	stw	r4,12(sp)
    ef9c:	ddc00415 	stw	r23,16(sp)
    efa0:	00009d80 	call	9d8 <__clzsi2>
    efa4:	12400744 	addi	r9,r2,29
    efa8:	48000b16 	blt	r9,zero,efd8 <__floatunsidf+0xc4>
    efac:	483fe726 	beq	r9,zero,ef4c <__floatunsidf+0x38>
    efb0:	10bfff44 	addi	r2,r2,-3
    efb4:	10002e16 	blt	r2,zero,f070 <__floatunsidf+0x15c>
    efb8:	b0a2983a 	sll	r17,r22,r2
    efbc:	0021883a 	mov	r16,zero
    efc0:	d8800217 	ldw	r2,8(sp)
    efc4:	dc400415 	stw	r17,16(sp)
    efc8:	dc000315 	stw	r16,12(sp)
    efcc:	1245c83a 	sub	r2,r2,r9
    efd0:	d8800215 	stw	r2,8(sp)
    efd4:	003fdd06 	br	ef4c <__floatunsidf+0x38>
    efd8:	0255c83a 	sub	r10,zero,r9
    efdc:	51bff804 	addi	r6,r10,-32
    efe0:	30001b16 	blt	r6,zero,f050 <__floatunsidf+0x13c>
    efe4:	b9a8d83a 	srl	r20,r23,r6
    efe8:	002b883a 	mov	r21,zero
    efec:	000f883a 	mov	r7,zero
    eff0:	01000044 	movi	r4,1
    eff4:	0011883a 	mov	r8,zero
    eff8:	30002516 	blt	r6,zero,f090 <__floatunsidf+0x17c>
    effc:	21a6983a 	sll	r19,r4,r6
    f000:	0025883a 	mov	r18,zero
    f004:	00bfffc4 	movi	r2,-1
    f008:	9089883a 	add	r4,r18,r2
    f00c:	988b883a 	add	r5,r19,r2
    f010:	248d803a 	cmpltu	r6,r4,r18
    f014:	314b883a 	add	r5,r6,r5
    f018:	b104703a 	and	r2,r22,r4
    f01c:	b946703a 	and	r3,r23,r5
    f020:	10c4b03a 	or	r2,r2,r3
    f024:	10000226 	beq	r2,zero,f030 <__floatunsidf+0x11c>
    f028:	01c00044 	movi	r7,1
    f02c:	0011883a 	mov	r8,zero
    f030:	d9000217 	ldw	r4,8(sp)
    f034:	a1c4b03a 	or	r2,r20,r7
    f038:	aa06b03a 	or	r3,r21,r8
    f03c:	2249c83a 	sub	r4,r4,r9
    f040:	d8c00415 	stw	r3,16(sp)
    f044:	d9000215 	stw	r4,8(sp)
    f048:	d8800315 	stw	r2,12(sp)
    f04c:	003fbf06 	br	ef4c <__floatunsidf+0x38>
    f050:	bdc7883a 	add	r3,r23,r23
    f054:	008007c4 	movi	r2,31
    f058:	1285c83a 	sub	r2,r2,r10
    f05c:	1886983a 	sll	r3,r3,r2
    f060:	b2a8d83a 	srl	r20,r22,r10
    f064:	baaad83a 	srl	r21,r23,r10
    f068:	1d28b03a 	or	r20,r3,r20
    f06c:	003fdf06 	br	efec <__floatunsidf+0xd8>
    f070:	b006d07a 	srli	r3,r22,1
    f074:	008007c4 	movi	r2,31
    f078:	1245c83a 	sub	r2,r2,r9
    f07c:	1886d83a 	srl	r3,r3,r2
    f080:	ba62983a 	sll	r17,r23,r9
    f084:	b260983a 	sll	r16,r22,r9
    f088:	1c62b03a 	or	r17,r3,r17
    f08c:	003fcc06 	br	efc0 <__floatunsidf+0xac>
    f090:	2006d07a 	srli	r3,r4,1
    f094:	008007c4 	movi	r2,31
    f098:	1285c83a 	sub	r2,r2,r10
    f09c:	18a6d83a 	srl	r19,r3,r2
    f0a0:	22a4983a 	sll	r18,r4,r10
    f0a4:	003fd706 	br	f004 <__floatunsidf+0xf0>

0000f0a8 <udivmodsi4>:
    f0a8:	29001b2e 	bgeu	r5,r4,f118 <udivmodsi4+0x70>
    f0ac:	28001a16 	blt	r5,zero,f118 <udivmodsi4+0x70>
    f0b0:	00800044 	movi	r2,1
    f0b4:	0007883a 	mov	r3,zero
    f0b8:	01c007c4 	movi	r7,31
    f0bc:	00000306 	br	f0cc <udivmodsi4+0x24>
    f0c0:	19c01326 	beq	r3,r7,f110 <udivmodsi4+0x68>
    f0c4:	18c00044 	addi	r3,r3,1
    f0c8:	28000416 	blt	r5,zero,f0dc <udivmodsi4+0x34>
    f0cc:	294b883a 	add	r5,r5,r5
    f0d0:	1085883a 	add	r2,r2,r2
    f0d4:	293ffa36 	bltu	r5,r4,f0c0 <udivmodsi4+0x18>
    f0d8:	10000d26 	beq	r2,zero,f110 <udivmodsi4+0x68>
    f0dc:	0007883a 	mov	r3,zero
    f0e0:	21400236 	bltu	r4,r5,f0ec <udivmodsi4+0x44>
    f0e4:	2149c83a 	sub	r4,r4,r5
    f0e8:	1886b03a 	or	r3,r3,r2
    f0ec:	1004d07a 	srli	r2,r2,1
    f0f0:	280ad07a 	srli	r5,r5,1
    f0f4:	103ffa1e 	bne	r2,zero,f0e0 <udivmodsi4+0x38>
    f0f8:	30000226 	beq	r6,zero,f104 <udivmodsi4+0x5c>
    f0fc:	2005883a 	mov	r2,r4
    f100:	f800283a 	ret
    f104:	1809883a 	mov	r4,r3
    f108:	2005883a 	mov	r2,r4
    f10c:	f800283a 	ret
    f110:	0007883a 	mov	r3,zero
    f114:	003ff806 	br	f0f8 <udivmodsi4+0x50>
    f118:	00800044 	movi	r2,1
    f11c:	0007883a 	mov	r3,zero
    f120:	003fef06 	br	f0e0 <udivmodsi4+0x38>

0000f124 <__divsi3>:
    f124:	defffe04 	addi	sp,sp,-8
    f128:	dc000015 	stw	r16,0(sp)
    f12c:	dfc00115 	stw	ra,4(sp)
    f130:	0021883a 	mov	r16,zero
    f134:	20000c16 	blt	r4,zero,f168 <__divsi3+0x44>
    f138:	000d883a 	mov	r6,zero
    f13c:	28000e16 	blt	r5,zero,f178 <__divsi3+0x54>
    f140:	000f0a80 	call	f0a8 <udivmodsi4>
    f144:	1007883a 	mov	r3,r2
    f148:	8005003a 	cmpeq	r2,r16,zero
    f14c:	1000011e 	bne	r2,zero,f154 <__divsi3+0x30>
    f150:	00c7c83a 	sub	r3,zero,r3
    f154:	1805883a 	mov	r2,r3
    f158:	dfc00117 	ldw	ra,4(sp)
    f15c:	dc000017 	ldw	r16,0(sp)
    f160:	dec00204 	addi	sp,sp,8
    f164:	f800283a 	ret
    f168:	0109c83a 	sub	r4,zero,r4
    f16c:	04000044 	movi	r16,1
    f170:	000d883a 	mov	r6,zero
    f174:	283ff20e 	bge	r5,zero,f140 <__divsi3+0x1c>
    f178:	014bc83a 	sub	r5,zero,r5
    f17c:	8021003a 	cmpeq	r16,r16,zero
    f180:	003fef06 	br	f140 <__divsi3+0x1c>

0000f184 <__modsi3>:
    f184:	deffff04 	addi	sp,sp,-4
    f188:	dfc00015 	stw	ra,0(sp)
    f18c:	01800044 	movi	r6,1
    f190:	2807883a 	mov	r3,r5
    f194:	20000416 	blt	r4,zero,f1a8 <__modsi3+0x24>
    f198:	28000c16 	blt	r5,zero,f1cc <__modsi3+0x48>
    f19c:	dfc00017 	ldw	ra,0(sp)
    f1a0:	dec00104 	addi	sp,sp,4
    f1a4:	000f0a81 	jmpi	f0a8 <udivmodsi4>
    f1a8:	0109c83a 	sub	r4,zero,r4
    f1ac:	28000b16 	blt	r5,zero,f1dc <__modsi3+0x58>
    f1b0:	180b883a 	mov	r5,r3
    f1b4:	01800044 	movi	r6,1
    f1b8:	000f0a80 	call	f0a8 <udivmodsi4>
    f1bc:	0085c83a 	sub	r2,zero,r2
    f1c0:	dfc00017 	ldw	ra,0(sp)
    f1c4:	dec00104 	addi	sp,sp,4
    f1c8:	f800283a 	ret
    f1cc:	014bc83a 	sub	r5,zero,r5
    f1d0:	dfc00017 	ldw	ra,0(sp)
    f1d4:	dec00104 	addi	sp,sp,4
    f1d8:	000f0a81 	jmpi	f0a8 <udivmodsi4>
    f1dc:	0147c83a 	sub	r3,zero,r5
    f1e0:	003ff306 	br	f1b0 <__modsi3+0x2c>

0000f1e4 <__udivsi3>:
    f1e4:	000d883a 	mov	r6,zero
    f1e8:	000f0a81 	jmpi	f0a8 <udivmodsi4>

0000f1ec <__umodsi3>:
    f1ec:	01800044 	movi	r6,1
    f1f0:	000f0a81 	jmpi	f0a8 <udivmodsi4>

0000f1f4 <__make_fp>:
    f1f4:	defffb04 	addi	sp,sp,-20
    f1f8:	d9000015 	stw	r4,0(sp)
    f1fc:	d809883a 	mov	r4,sp
    f200:	dfc00415 	stw	ra,16(sp)
    f204:	d9400115 	stw	r5,4(sp)
    f208:	d9800215 	stw	r6,8(sp)
    f20c:	d9c00315 	stw	r7,12(sp)
    f210:	0000a580 	call	a58 <__pack_f>
    f214:	dfc00417 	ldw	ra,16(sp)
    f218:	dec00504 	addi	sp,sp,20
    f21c:	f800283a 	ret

0000f220 <__unpack_d>:
    f220:	20c00117 	ldw	r3,4(r4)
    f224:	22400017 	ldw	r9,0(r4)
    f228:	00800434 	movhi	r2,16
    f22c:	10bfffc4 	addi	r2,r2,-1
    f230:	1808d53a 	srli	r4,r3,20
    f234:	180cd7fa 	srli	r6,r3,31
    f238:	1894703a 	and	r10,r3,r2
    f23c:	2201ffcc 	andi	r8,r4,2047
    f240:	281b883a 	mov	r13,r5
    f244:	4817883a 	mov	r11,r9
    f248:	29800115 	stw	r6,4(r5)
    f24c:	5019883a 	mov	r12,r10
    f250:	40001e1e 	bne	r8,zero,f2cc <__unpack_d+0xac>
    f254:	4a84b03a 	or	r2,r9,r10
    f258:	10001926 	beq	r2,zero,f2c0 <__unpack_d+0xa0>
    f25c:	4804d63a 	srli	r2,r9,24
    f260:	500c923a 	slli	r6,r10,8
    f264:	013f0084 	movi	r4,-1022
    f268:	00c40034 	movhi	r3,4096
    f26c:	18ffffc4 	addi	r3,r3,-1
    f270:	118cb03a 	or	r6,r2,r6
    f274:	008000c4 	movi	r2,3
    f278:	480a923a 	slli	r5,r9,8
    f27c:	68800015 	stw	r2,0(r13)
    f280:	69000215 	stw	r4,8(r13)
    f284:	19800b36 	bltu	r3,r6,f2b4 <__unpack_d+0x94>
    f288:	200f883a 	mov	r7,r4
    f28c:	1811883a 	mov	r8,r3
    f290:	2945883a 	add	r2,r5,r5
    f294:	1149803a 	cmpltu	r4,r2,r5
    f298:	3187883a 	add	r3,r6,r6
    f29c:	20c9883a 	add	r4,r4,r3
    f2a0:	100b883a 	mov	r5,r2
    f2a4:	200d883a 	mov	r6,r4
    f2a8:	39ffffc4 	addi	r7,r7,-1
    f2ac:	413ff82e 	bgeu	r8,r4,f290 <__unpack_d+0x70>
    f2b0:	69c00215 	stw	r7,8(r13)
    f2b4:	69800415 	stw	r6,16(r13)
    f2b8:	69400315 	stw	r5,12(r13)
    f2bc:	f800283a 	ret
    f2c0:	00800084 	movi	r2,2
    f2c4:	28800015 	stw	r2,0(r5)
    f2c8:	f800283a 	ret
    f2cc:	0081ffc4 	movi	r2,2047
    f2d0:	40800f26 	beq	r8,r2,f310 <__unpack_d+0xf0>
    f2d4:	480cd63a 	srli	r6,r9,24
    f2d8:	5006923a 	slli	r3,r10,8
    f2dc:	4804923a 	slli	r2,r9,8
    f2e0:	0009883a 	mov	r4,zero
    f2e4:	30c6b03a 	or	r3,r6,r3
    f2e8:	01440034 	movhi	r5,4096
    f2ec:	110cb03a 	or	r6,r2,r4
    f2f0:	423f0044 	addi	r8,r8,-1023
    f2f4:	194eb03a 	or	r7,r3,r5
    f2f8:	008000c4 	movi	r2,3
    f2fc:	69c00415 	stw	r7,16(r13)
    f300:	6a000215 	stw	r8,8(r13)
    f304:	68800015 	stw	r2,0(r13)
    f308:	69800315 	stw	r6,12(r13)
    f30c:	f800283a 	ret
    f310:	4a84b03a 	or	r2,r9,r10
    f314:	1000031e 	bne	r2,zero,f324 <__unpack_d+0x104>
    f318:	00800104 	movi	r2,4
    f31c:	28800015 	stw	r2,0(r5)
    f320:	f800283a 	ret
    f324:	0009883a 	mov	r4,zero
    f328:	01400234 	movhi	r5,8
    f32c:	4904703a 	and	r2,r9,r4
    f330:	5146703a 	and	r3,r10,r5
    f334:	10c4b03a 	or	r2,r2,r3
    f338:	10000526 	beq	r2,zero,f350 <__unpack_d+0x130>
    f33c:	00800044 	movi	r2,1
    f340:	68800015 	stw	r2,0(r13)
    f344:	6b000415 	stw	r12,16(r13)
    f348:	6ac00315 	stw	r11,12(r13)
    f34c:	f800283a 	ret
    f350:	68000015 	stw	zero,0(r13)
    f354:	003ffb06 	br	f344 <__unpack_d+0x124>

0000f358 <__fpcmp_parts_d>:
    f358:	21800017 	ldw	r6,0(r4)
    f35c:	00c00044 	movi	r3,1
    f360:	19800a2e 	bgeu	r3,r6,f38c <__fpcmp_parts_d+0x34>
    f364:	28800017 	ldw	r2,0(r5)
    f368:	1880082e 	bgeu	r3,r2,f38c <__fpcmp_parts_d+0x34>
    f36c:	00c00104 	movi	r3,4
    f370:	30c02626 	beq	r6,r3,f40c <__fpcmp_parts_d+0xb4>
    f374:	10c02226 	beq	r2,r3,f400 <__fpcmp_parts_d+0xa8>
    f378:	00c00084 	movi	r3,2
    f37c:	30c00526 	beq	r6,r3,f394 <__fpcmp_parts_d+0x3c>
    f380:	10c0071e 	bne	r2,r3,f3a0 <__fpcmp_parts_d+0x48>
    f384:	20800117 	ldw	r2,4(r4)
    f388:	1000091e 	bne	r2,zero,f3b0 <__fpcmp_parts_d+0x58>
    f38c:	00800044 	movi	r2,1
    f390:	f800283a 	ret
    f394:	10c01a1e 	bne	r2,r3,f400 <__fpcmp_parts_d+0xa8>
    f398:	0005883a 	mov	r2,zero
    f39c:	f800283a 	ret
    f3a0:	22000117 	ldw	r8,4(r4)
    f3a4:	28800117 	ldw	r2,4(r5)
    f3a8:	40800326 	beq	r8,r2,f3b8 <__fpcmp_parts_d+0x60>
    f3ac:	403ff726 	beq	r8,zero,f38c <__fpcmp_parts_d+0x34>
    f3b0:	00bfffc4 	movi	r2,-1
    f3b4:	f800283a 	ret
    f3b8:	20c00217 	ldw	r3,8(r4)
    f3bc:	28800217 	ldw	r2,8(r5)
    f3c0:	10fffa16 	blt	r2,r3,f3ac <__fpcmp_parts_d+0x54>
    f3c4:	18800916 	blt	r3,r2,f3ec <__fpcmp_parts_d+0x94>
    f3c8:	21c00417 	ldw	r7,16(r4)
    f3cc:	28c00417 	ldw	r3,16(r5)
    f3d0:	21800317 	ldw	r6,12(r4)
    f3d4:	28800317 	ldw	r2,12(r5)
    f3d8:	19fff436 	bltu	r3,r7,f3ac <__fpcmp_parts_d+0x54>
    f3dc:	38c00526 	beq	r7,r3,f3f4 <__fpcmp_parts_d+0x9c>
    f3e0:	38c00236 	bltu	r7,r3,f3ec <__fpcmp_parts_d+0x94>
    f3e4:	19ffec1e 	bne	r3,r7,f398 <__fpcmp_parts_d+0x40>
    f3e8:	30bfeb2e 	bgeu	r6,r2,f398 <__fpcmp_parts_d+0x40>
    f3ec:	403fe71e 	bne	r8,zero,f38c <__fpcmp_parts_d+0x34>
    f3f0:	003fef06 	br	f3b0 <__fpcmp_parts_d+0x58>
    f3f4:	11bffa2e 	bgeu	r2,r6,f3e0 <__fpcmp_parts_d+0x88>
    f3f8:	403fe426 	beq	r8,zero,f38c <__fpcmp_parts_d+0x34>
    f3fc:	003fec06 	br	f3b0 <__fpcmp_parts_d+0x58>
    f400:	28800117 	ldw	r2,4(r5)
    f404:	103fe11e 	bne	r2,zero,f38c <__fpcmp_parts_d+0x34>
    f408:	003fe906 	br	f3b0 <__fpcmp_parts_d+0x58>
    f40c:	11bfdd1e 	bne	r2,r6,f384 <__fpcmp_parts_d+0x2c>
    f410:	28c00117 	ldw	r3,4(r5)
    f414:	20800117 	ldw	r2,4(r4)
    f418:	1885c83a 	sub	r2,r3,r2
    f41c:	f800283a 	ret

0000f420 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f420:	defffd04 	addi	sp,sp,-12
    f424:	dfc00215 	stw	ra,8(sp)
    f428:	dc400115 	stw	r17,4(sp)
    f42c:	dc000015 	stw	r16,0(sp)
    f430:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f434:	20001c16 	blt	r4,zero,f4a8 <close+0x88>
    f438:	20c00324 	muli	r3,r4,12
    f43c:	00800074 	movhi	r2,1
    f440:	108c2904 	addi	r2,r2,12452
    f444:	1889883a 	add	r4,r3,r2

  if (fd)
    f448:	20001726 	beq	r4,zero,f4a8 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f44c:	20800017 	ldw	r2,0(r4)
    f450:	10800417 	ldw	r2,16(r2)
    f454:	10002126 	beq	r2,zero,f4dc <close+0xbc>
    f458:	103ee83a 	callr	r2
    f45c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f460:	8009883a 	mov	r4,r16
    f464:	000fab80 	call	fab8 <alt_release_fd>
    if (rval < 0)
    f468:	88000216 	blt	r17,zero,f474 <close+0x54>
    f46c:	0005883a 	mov	r2,zero
    f470:	00001d06 	br	f4e8 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    f474:	00800074 	movhi	r2,1
    f478:	10911704 	addi	r2,r2,17500
    f47c:	10800017 	ldw	r2,0(r2)
    f480:	1000031e 	bne	r2,zero,f490 <close+0x70>
    f484:	00c00074 	movhi	r3,1
    f488:	18d82e04 	addi	r3,r3,24760
    f48c:	00000206 	br	f498 <close+0x78>
    f490:	103ee83a 	callr	r2
    f494:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    f498:	0445c83a 	sub	r2,zero,r17
    f49c:	18800015 	stw	r2,0(r3)
    f4a0:	00bfffc4 	movi	r2,-1
    f4a4:	00001006 	br	f4e8 <close+0xc8>
    f4a8:	00800074 	movhi	r2,1
    f4ac:	10911704 	addi	r2,r2,17500
    f4b0:	10800017 	ldw	r2,0(r2)
    f4b4:	1000031e 	bne	r2,zero,f4c4 <close+0xa4>
    f4b8:	00c00074 	movhi	r3,1
    f4bc:	18d82e04 	addi	r3,r3,24760
    f4c0:	00000206 	br	f4cc <close+0xac>
    f4c4:	103ee83a 	callr	r2
    f4c8:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4cc:	00801444 	movi	r2,81
    f4d0:	18800015 	stw	r2,0(r3)
    f4d4:	00bfffc4 	movi	r2,-1
    f4d8:	00000306 	br	f4e8 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4dc:	8009883a 	mov	r4,r16
    f4e0:	000fab80 	call	fab8 <alt_release_fd>
    f4e4:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    f4e8:	dfc00217 	ldw	ra,8(sp)
    f4ec:	dc400117 	ldw	r17,4(sp)
    f4f0:	dc000017 	ldw	r16,0(sp)
    f4f4:	dec00304 	addi	sp,sp,12
    f4f8:	f800283a 	ret

0000f4fc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    f4fc:	3005883a 	mov	r2,r6
    f500:	f800283a 	ret

0000f504 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f504:	deffff04 	addi	sp,sp,-4
    f508:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f50c:	20000e16 	blt	r4,zero,f548 <fstat+0x44>
    f510:	20c00324 	muli	r3,r4,12
    f514:	00800074 	movhi	r2,1
    f518:	108c2904 	addi	r2,r2,12452
    f51c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f520:	20000926 	beq	r4,zero,f548 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f524:	20800017 	ldw	r2,0(r4)
    f528:	10800817 	ldw	r2,32(r2)
    f52c:	10000226 	beq	r2,zero,f538 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    f530:	103ee83a 	callr	r2
    f534:	00001006 	br	f578 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f538:	00880004 	movi	r2,8192
    f53c:	28800115 	stw	r2,4(r5)
    f540:	0005883a 	mov	r2,zero
    f544:	00000c06 	br	f578 <fstat+0x74>
    f548:	00800074 	movhi	r2,1
    f54c:	10911704 	addi	r2,r2,17500
    f550:	10800017 	ldw	r2,0(r2)
    f554:	1000031e 	bne	r2,zero,f564 <fstat+0x60>
    f558:	00c00074 	movhi	r3,1
    f55c:	18d82e04 	addi	r3,r3,24760
    f560:	00000206 	br	f56c <fstat+0x68>
    f564:	103ee83a 	callr	r2
    f568:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f56c:	00801444 	movi	r2,81
    f570:	18800015 	stw	r2,0(r3)
    f574:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    f578:	dfc00017 	ldw	ra,0(sp)
    f57c:	dec00104 	addi	sp,sp,4
    f580:	f800283a 	ret

0000f584 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f584:	defff004 	addi	sp,sp,-64
    f588:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f58c:	20000f16 	blt	r4,zero,f5cc <isatty+0x48>
    f590:	20c00324 	muli	r3,r4,12
    f594:	00800074 	movhi	r2,1
    f598:	108c2904 	addi	r2,r2,12452
    f59c:	1885883a 	add	r2,r3,r2
  
  if (fd)
    f5a0:	10000a26 	beq	r2,zero,f5cc <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f5a4:	10800017 	ldw	r2,0(r2)
    f5a8:	10800817 	ldw	r2,32(r2)
    f5ac:	1000021e 	bne	r2,zero,f5b8 <isatty+0x34>
    f5b0:	00800044 	movi	r2,1
    f5b4:	00001106 	br	f5fc <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f5b8:	d80b883a 	mov	r5,sp
    f5bc:	000f5040 	call	f504 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f5c0:	d8800117 	ldw	r2,4(sp)
    f5c4:	10880020 	cmpeqi	r2,r2,8192
    f5c8:	00000c06 	br	f5fc <isatty+0x78>
    f5cc:	00800074 	movhi	r2,1
    f5d0:	10911704 	addi	r2,r2,17500
    f5d4:	10800017 	ldw	r2,0(r2)
    f5d8:	1000031e 	bne	r2,zero,f5e8 <isatty+0x64>
    f5dc:	00c00074 	movhi	r3,1
    f5e0:	18d82e04 	addi	r3,r3,24760
    f5e4:	00000206 	br	f5f0 <isatty+0x6c>
    f5e8:	103ee83a 	callr	r2
    f5ec:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5f0:	00801444 	movi	r2,81
    f5f4:	18800015 	stw	r2,0(r3)
    f5f8:	0005883a 	mov	r2,zero
    return 0;
  }
}
    f5fc:	dfc00f17 	ldw	ra,60(sp)
    f600:	dec01004 	addi	sp,sp,64
    f604:	f800283a 	ret

0000f608 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f608:	deffff04 	addi	sp,sp,-4
    f60c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f610:	01000074 	movhi	r4,1
    f614:	21111c04 	addi	r4,r4,17520
    f618:	00c00074 	movhi	r3,1
    f61c:	18ca1004 	addi	r3,r3,10304

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f620:	20c00926 	beq	r4,r3,f648 <alt_load+0x40>
    f624:	01800074 	movhi	r6,1
    f628:	31911c04 	addi	r6,r6,17520
  {
    while( to != end )
    f62c:	19800626 	beq	r3,r6,f648 <alt_load+0x40>
    f630:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f634:	20800017 	ldw	r2,0(r4)
    f638:	18800015 	stw	r2,0(r3)
    f63c:	1947883a 	add	r3,r3,r5
    f640:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f644:	30fffb1e 	bne	r6,r3,f634 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f648:	01000034 	movhi	r4,0
    f64c:	21000804 	addi	r4,r4,32
    f650:	00c00034 	movhi	r3,0
    f654:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f658:	20c00926 	beq	r4,r3,f680 <alt_load+0x78>
    f65c:	01800034 	movhi	r6,0
    f660:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    f664:	19800626 	beq	r3,r6,f680 <alt_load+0x78>
    f668:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f66c:	20800017 	ldw	r2,0(r4)
    f670:	18800015 	stw	r2,0(r3)
    f674:	1947883a 	add	r3,r3,r5
    f678:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f67c:	30fffb1e 	bne	r6,r3,f66c <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f680:	01000074 	movhi	r4,1
    f684:	2107fc04 	addi	r4,r4,8176
    f688:	00c00074 	movhi	r3,1
    f68c:	18c7fc04 	addi	r3,r3,8176

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f690:	20c00926 	beq	r4,r3,f6b8 <alt_load+0xb0>
    f694:	01800074 	movhi	r6,1
    f698:	318a1004 	addi	r6,r6,10304
  {
    while( to != end )
    f69c:	19800626 	beq	r3,r6,f6b8 <alt_load+0xb0>
    f6a0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f6a4:	20800017 	ldw	r2,0(r4)
    f6a8:	18800015 	stw	r2,0(r3)
    f6ac:	1947883a 	add	r3,r3,r5
    f6b0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f6b4:	30fffb1e 	bne	r6,r3,f6a4 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f6b8:	00113380 	call	11338 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f6bc:	00114340 	call	11434 <alt_icache_flush_all>
}
    f6c0:	dfc00017 	ldw	ra,0(sp)
    f6c4:	dec00104 	addi	sp,sp,4
    f6c8:	f800283a 	ret

0000f6cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f6cc:	defffe04 	addi	sp,sp,-8
    f6d0:	dfc00115 	stw	ra,4(sp)
    f6d4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f6d8:	2000020e 	bge	r4,zero,f6e4 <lseek+0x18>
    f6dc:	043febc4 	movi	r16,-81
    f6e0:	00000d06 	br	f718 <lseek+0x4c>
    f6e4:	20c00324 	muli	r3,r4,12
    f6e8:	00800074 	movhi	r2,1
    f6ec:	108c2904 	addi	r2,r2,12452
    f6f0:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    f6f4:	20001526 	beq	r4,zero,f74c <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f6f8:	20800017 	ldw	r2,0(r4)
    f6fc:	10800717 	ldw	r2,28(r2)
    f700:	1000021e 	bne	r2,zero,f70c <lseek+0x40>
    f704:	043fde84 	movi	r16,-134
    f708:	00000306 	br	f718 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f70c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    f710:	1000100e 	bge	r2,zero,f754 <lseek+0x88>
    f714:	1021883a 	mov	r16,r2
    f718:	00800074 	movhi	r2,1
    f71c:	10911704 	addi	r2,r2,17500
    f720:	10800017 	ldw	r2,0(r2)
    f724:	1000031e 	bne	r2,zero,f734 <lseek+0x68>
    f728:	00c00074 	movhi	r3,1
    f72c:	18d82e04 	addi	r3,r3,24760
    f730:	00000206 	br	f73c <lseek+0x70>
    f734:	103ee83a 	callr	r2
    f738:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    f73c:	0405c83a 	sub	r2,zero,r16
    f740:	18800015 	stw	r2,0(r3)
    f744:	00bfffc4 	movi	r2,-1
    f748:	00000206 	br	f754 <lseek+0x88>
    f74c:	043febc4 	movi	r16,-81
    f750:	003ff106 	br	f718 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    f754:	dfc00117 	ldw	ra,4(sp)
    f758:	dc000017 	ldw	r16,0(sp)
    f75c:	dec00204 	addi	sp,sp,8
    f760:	f800283a 	ret

0000f764 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f764:	defffe04 	addi	sp,sp,-8
    f768:	dfc00115 	stw	ra,4(sp)
    f76c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f770:	0009883a 	mov	r4,zero
    f774:	000fc200 	call	fc20 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f778:	000fc400 	call	fc40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f77c:	01800074 	movhi	r6,1
    f780:	3189e304 	addi	r6,r6,10124
    f784:	3009883a 	mov	r4,r6
    f788:	300b883a 	mov	r5,r6
    f78c:	00114b80 	call	114b8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f790:	d1272417 	ldw	r4,-25456(gp)
    f794:	d1672517 	ldw	r5,-25452(gp)
    f798:	d1a72617 	ldw	r6,-25448(gp)
    f79c:	00001b40 	call	1b4 <main>
    f7a0:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    f7a4:	01000044 	movi	r4,1
    f7a8:	000f4200 	call	f420 <close>
  exit (result);
    f7ac:	8009883a 	mov	r4,r16
    f7b0:	00119d40 	call	119d4 <exit>

0000f7b4 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    f7b4:	f800283a 	ret

0000f7b8 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    f7b8:	f800283a 	ret

0000f7bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    f7bc:	defff804 	addi	sp,sp,-32
    f7c0:	dfc00415 	stw	ra,16(sp)
    f7c4:	dc800315 	stw	r18,12(sp)
    f7c8:	dc400215 	stw	r17,8(sp)
    f7cc:	dc000115 	stw	r16,4(sp)
    f7d0:	d9400515 	stw	r5,20(sp)
    f7d4:	d9800615 	stw	r6,24(sp)
    f7d8:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    f7dc:	d8800504 	addi	r2,sp,20
    f7e0:	d8800015 	stw	r2,0(sp)
    f7e4:	2023883a 	mov	r17,r4
    f7e8:	00005d06 	br	f960 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f7ec:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    f7f0:	21003fcc 	andi	r4,r4,255
    f7f4:	2100201c 	xori	r4,r4,128
    f7f8:	213fe004 	addi	r4,r4,-128
    f7fc:	00800944 	movi	r2,37
    f800:	20800226 	beq	r4,r2,f80c <alt_printf+0x50>
        {
            alt_putchar(c);
    f804:	000f9980 	call	f998 <alt_putchar>
    f808:	00005506 	br	f960 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    f80c:	89400003 	ldbu	r5,0(r17)
    f810:	8c400044 	addi	r17,r17,1
    f814:	29003fcc 	andi	r4,r5,255
    f818:	2100201c 	xori	r4,r4,128
    f81c:	213fe004 	addi	r4,r4,-128
    f820:	20005726 	beq	r4,zero,f980 <alt_printf+0x1c4>
            {
                if (c == '%')
    f824:	00800944 	movi	r2,37
    f828:	2080021e 	bne	r4,r2,f834 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    f82c:	000f9980 	call	f998 <alt_putchar>
    f830:	00004b06 	br	f960 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    f834:	28c03fcc 	andi	r3,r5,255
    f838:	18c0201c 	xori	r3,r3,128
    f83c:	18ffe004 	addi	r3,r3,-128
    f840:	008018c4 	movi	r2,99
    f844:	1880061e 	bne	r3,r2,f860 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    f848:	d8c00017 	ldw	r3,0(sp)
    f84c:	18800104 	addi	r2,r3,4
    f850:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    f854:	19000017 	ldw	r4,0(r3)
    f858:	000f9980 	call	f998 <alt_putchar>
    f85c:	00004006 	br	f960 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    f860:	28c03fcc 	andi	r3,r5,255
    f864:	18c0201c 	xori	r3,r3,128
    f868:	18ffe004 	addi	r3,r3,-128
    f86c:	00801e04 	movi	r2,120
    f870:	1880231e 	bne	r3,r2,f900 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    f874:	d8c00017 	ldw	r3,0(sp)
    f878:	18800104 	addi	r2,r3,4
    f87c:	d8800015 	stw	r2,0(sp)
    f880:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    f884:	90000326 	beq	r18,zero,f894 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f888:	90bc002c 	andhi	r2,r18,61440
    f88c:	10000426 	beq	r2,zero,f8a0 <alt_printf+0xe4>
    f890:	00003906 	br	f978 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    f894:	01000c04 	movi	r4,48
    f898:	000f9980 	call	f998 <alt_putchar>
    f89c:	00003006 	br	f960 <alt_printf+0x1a4>
                        continue;
    f8a0:	04000704 	movi	r16,28
    f8a4:	013fff04 	movi	r4,-4
    f8a8:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    f8ac:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f8b0:	1c04983a 	sll	r2,r3,r16
    f8b4:	9084703a 	and	r2,r18,r2
    f8b8:	103ffc26 	beq	r2,zero,f8ac <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f8bc:	80002816 	blt	r16,zero,f960 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    f8c0:	008003c4 	movi	r2,15
    f8c4:	1404983a 	sll	r2,r2,r16
    f8c8:	9084703a 	and	r2,r18,r2
    f8cc:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    f8d0:	00800244 	movi	r2,9
    f8d4:	10c00236 	bltu	r2,r3,f8e0 <alt_printf+0x124>
                            c = '0' + digit;
    f8d8:	19000c04 	addi	r4,r3,48
    f8dc:	00000106 	br	f8e4 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    f8e0:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    f8e4:	21003fcc 	andi	r4,r4,255
    f8e8:	2100201c 	xori	r4,r4,128
    f8ec:	213fe004 	addi	r4,r4,-128
    f8f0:	000f9980 	call	f998 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f8f4:	843fff04 	addi	r16,r16,-4
    f8f8:	80001916 	blt	r16,zero,f960 <alt_printf+0x1a4>
    f8fc:	003ff006 	br	f8c0 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    f900:	28c03fcc 	andi	r3,r5,255
    f904:	18c0201c 	xori	r3,r3,128
    f908:	18ffe004 	addi	r3,r3,-128
    f90c:	00801cc4 	movi	r2,115
    f910:	1880131e 	bne	r3,r2,f960 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    f914:	d8800017 	ldw	r2,0(sp)
    f918:	10c00104 	addi	r3,r2,4
    f91c:	d8c00015 	stw	r3,0(sp)
    f920:	14000017 	ldw	r16,0(r2)

                    while(*s)
    f924:	81000003 	ldbu	r4,0(r16)
    f928:	20803fcc 	andi	r2,r4,255
    f92c:	1080201c 	xori	r2,r2,128
    f930:	10bfe004 	addi	r2,r2,-128
    f934:	10000a26 	beq	r2,zero,f960 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    f938:	84000044 	addi	r16,r16,1
    f93c:	21003fcc 	andi	r4,r4,255
    f940:	2100201c 	xori	r4,r4,128
    f944:	213fe004 	addi	r4,r4,-128
    f948:	000f9980 	call	f998 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    f94c:	81000003 	ldbu	r4,0(r16)
    f950:	20803fcc 	andi	r2,r4,255
    f954:	1080201c 	xori	r2,r2,128
    f958:	10bfe004 	addi	r2,r2,-128
    f95c:	103ff61e 	bne	r2,zero,f938 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f960:	89000003 	ldbu	r4,0(r17)
    f964:	20803fcc 	andi	r2,r4,255
    f968:	1080201c 	xori	r2,r2,128
    f96c:	10bfe004 	addi	r2,r2,-128
    f970:	103f9e1e 	bne	r2,zero,f7ec <alt_printf+0x30>
    f974:	00000206 	br	f980 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    f978:	04000704 	movi	r16,28
    f97c:	003fd006 	br	f8c0 <alt_printf+0x104>
    f980:	dfc00417 	ldw	ra,16(sp)
    f984:	dc800317 	ldw	r18,12(sp)
    f988:	dc400217 	ldw	r17,8(sp)
    f98c:	dc000117 	ldw	r16,4(sp)
    f990:	dec00804 	addi	sp,sp,32
    f994:	f800283a 	ret

0000f998 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    f998:	deffff04 	addi	sp,sp,-4
    f99c:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    f9a0:	00800074 	movhi	r2,1
    f9a4:	10910c04 	addi	r2,r2,17456
    f9a8:	10800017 	ldw	r2,0(r2)
    f9ac:	11400217 	ldw	r5,8(r2)
    f9b0:	0011a800 	call	11a80 <putc>
#endif
}
    f9b4:	dfc00017 	ldw	ra,0(sp)
    f9b8:	dec00104 	addi	sp,sp,4
    f9bc:	f800283a 	ret

0000f9c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9c0:	defffe04 	addi	sp,sp,-8
    f9c4:	dfc00115 	stw	ra,4(sp)
    f9c8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f9cc:	20002916 	blt	r4,zero,fa74 <read+0xb4>
    f9d0:	20c00324 	muli	r3,r4,12
    f9d4:	00800074 	movhi	r2,1
    f9d8:	108c2904 	addi	r2,r2,12452
    f9dc:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f9e0:	20002426 	beq	r4,zero,fa74 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9e4:	20800217 	ldw	r2,8(r4)
    f9e8:	108000cc 	andi	r2,r2,3
    f9ec:	00c00044 	movi	r3,1
    f9f0:	10c01326 	beq	r2,r3,fa40 <read+0x80>
    f9f4:	20800017 	ldw	r2,0(r4)
    f9f8:	10800517 	ldw	r2,20(r2)
    f9fc:	10001026 	beq	r2,zero,fa40 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa00:	103ee83a 	callr	r2
    fa04:	1021883a 	mov	r16,r2
    fa08:	1000260e 	bge	r2,zero,faa4 <read+0xe4>
    fa0c:	00800074 	movhi	r2,1
    fa10:	10911704 	addi	r2,r2,17500
    fa14:	10800017 	ldw	r2,0(r2)
    fa18:	1000031e 	bne	r2,zero,fa28 <read+0x68>
    fa1c:	00c00074 	movhi	r3,1
    fa20:	18d82e04 	addi	r3,r3,24760
    fa24:	00000206 	br	fa30 <read+0x70>
    fa28:	103ee83a 	callr	r2
    fa2c:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    fa30:	0405c83a 	sub	r2,zero,r16
    fa34:	18800015 	stw	r2,0(r3)
    fa38:	043fffc4 	movi	r16,-1
    fa3c:	00001906 	br	faa4 <read+0xe4>
    fa40:	00800074 	movhi	r2,1
    fa44:	10911704 	addi	r2,r2,17500
    fa48:	10800017 	ldw	r2,0(r2)
    fa4c:	1000031e 	bne	r2,zero,fa5c <read+0x9c>
    fa50:	00c00074 	movhi	r3,1
    fa54:	18d82e04 	addi	r3,r3,24760
    fa58:	00000206 	br	fa64 <read+0xa4>
    fa5c:	103ee83a 	callr	r2
    fa60:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    fa64:	00800344 	movi	r2,13
    fa68:	18800015 	stw	r2,0(r3)
    fa6c:	043fffc4 	movi	r16,-1
    fa70:	00000c06 	br	faa4 <read+0xe4>
    fa74:	00800074 	movhi	r2,1
    fa78:	10911704 	addi	r2,r2,17500
    fa7c:	10800017 	ldw	r2,0(r2)
    fa80:	1000031e 	bne	r2,zero,fa90 <read+0xd0>
    fa84:	00c00074 	movhi	r3,1
    fa88:	18d82e04 	addi	r3,r3,24760
    fa8c:	00000206 	br	fa98 <read+0xd8>
    fa90:	103ee83a 	callr	r2
    fa94:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa98:	00801444 	movi	r2,81
    fa9c:	18800015 	stw	r2,0(r3)
    faa0:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    faa4:	8005883a 	mov	r2,r16
    faa8:	dfc00117 	ldw	ra,4(sp)
    faac:	dc000017 	ldw	r16,0(sp)
    fab0:	dec00204 	addi	sp,sp,8
    fab4:	f800283a 	ret

0000fab8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    fab8:	00800084 	movi	r2,2
    fabc:	1100060e 	bge	r2,r4,fad8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    fac0:	20800324 	muli	r2,r4,12
    fac4:	00c00074 	movhi	r3,1
    fac8:	18cc2904 	addi	r3,r3,12452
    facc:	10c5883a 	add	r2,r2,r3
    fad0:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    fad4:	10000015 	stw	zero,0(r2)
    fad8:	f800283a 	ret

0000fadc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fadc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fae0:	00bfff84 	movi	r2,-2
    fae4:	2884703a 	and	r2,r5,r2
    fae8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    faec:	d0a00d17 	ldw	r2,-32716(gp)
    faf0:	108000c4 	addi	r2,r2,3
    faf4:	00ffff04 	movi	r3,-4
    faf8:	10c6703a 	and	r3,r2,r3
    fafc:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb00:	1909883a 	add	r4,r3,r4
    fb04:	00802034 	movhi	r2,128
    fb08:	10800004 	addi	r2,r2,0
    fb0c:	1100032e 	bgeu	r2,r4,fb1c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb10:	2801703a 	wrctl	status,r5
    fb14:	00ffffc4 	movi	r3,-1
    fb18:	00000206 	br	fb24 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    fb1c:	d1200d15 	stw	r4,-32716(gp)
    fb20:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    fb24:	1805883a 	mov	r2,r3
    fb28:	f800283a 	ret

0000fb2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fb2c:	defffe04 	addi	sp,sp,-8
    fb30:	dfc00115 	stw	ra,4(sp)
    fb34:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb38:	20002816 	blt	r4,zero,fbdc <write+0xb0>
    fb3c:	20c00324 	muli	r3,r4,12
    fb40:	00800074 	movhi	r2,1
    fb44:	108c2904 	addi	r2,r2,12452
    fb48:	1889883a 	add	r4,r3,r2
  
  if (fd)
    fb4c:	20002326 	beq	r4,zero,fbdc <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fb50:	20800217 	ldw	r2,8(r4)
    fb54:	108000cc 	andi	r2,r2,3
    fb58:	10001326 	beq	r2,zero,fba8 <write+0x7c>
    fb5c:	20800017 	ldw	r2,0(r4)
    fb60:	10800617 	ldw	r2,24(r2)
    fb64:	10001026 	beq	r2,zero,fba8 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fb68:	103ee83a 	callr	r2
    fb6c:	1021883a 	mov	r16,r2
    fb70:	1000260e 	bge	r2,zero,fc0c <write+0xe0>
    fb74:	00800074 	movhi	r2,1
    fb78:	10911704 	addi	r2,r2,17500
    fb7c:	10800017 	ldw	r2,0(r2)
    fb80:	1000031e 	bne	r2,zero,fb90 <write+0x64>
    fb84:	00c00074 	movhi	r3,1
    fb88:	18d82e04 	addi	r3,r3,24760
    fb8c:	00000206 	br	fb98 <write+0x6c>
    fb90:	103ee83a 	callr	r2
    fb94:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    fb98:	0405c83a 	sub	r2,zero,r16
    fb9c:	18800015 	stw	r2,0(r3)
    fba0:	043fffc4 	movi	r16,-1
    fba4:	00001906 	br	fc0c <write+0xe0>
    fba8:	00800074 	movhi	r2,1
    fbac:	10911704 	addi	r2,r2,17500
    fbb0:	10800017 	ldw	r2,0(r2)
    fbb4:	1000031e 	bne	r2,zero,fbc4 <write+0x98>
    fbb8:	00c00074 	movhi	r3,1
    fbbc:	18d82e04 	addi	r3,r3,24760
    fbc0:	00000206 	br	fbcc <write+0xa0>
    fbc4:	103ee83a 	callr	r2
    fbc8:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    fbcc:	00800344 	movi	r2,13
    fbd0:	18800015 	stw	r2,0(r3)
    fbd4:	043fffc4 	movi	r16,-1
    fbd8:	00000c06 	br	fc0c <write+0xe0>
    fbdc:	00800074 	movhi	r2,1
    fbe0:	10911704 	addi	r2,r2,17500
    fbe4:	10800017 	ldw	r2,0(r2)
    fbe8:	1000031e 	bne	r2,zero,fbf8 <write+0xcc>
    fbec:	00c00074 	movhi	r3,1
    fbf0:	18d82e04 	addi	r3,r3,24760
    fbf4:	00000206 	br	fc00 <write+0xd4>
    fbf8:	103ee83a 	callr	r2
    fbfc:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fc00:	00801444 	movi	r2,81
    fc04:	18800015 	stw	r2,0(r3)
    fc08:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    fc0c:	8005883a 	mov	r2,r16
    fc10:	dfc00117 	ldw	ra,4(sp)
    fc14:	dc000017 	ldw	r16,0(sp)
    fc18:	dec00204 	addi	sp,sp,8
    fc1c:	f800283a 	ret

0000fc20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fc20:	deffff04 	addi	sp,sp,-4
    fc24:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    fc28:	00118680 	call	11868 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fc2c:	00800044 	movi	r2,1
    fc30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fc34:	dfc00017 	ldw	ra,0(sp)
    fc38:	dec00104 	addi	sp,sp,4
    fc3c:	f800283a 	ret

0000fc40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fc40:	defffd04 	addi	sp,sp,-12
    fc44:	dfc00215 	stw	ra,8(sp)
    fc48:	dc400115 	stw	r17,4(sp)
    fc4c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    fc50:	01040034 	movhi	r4,4096
    fc54:	21080004 	addi	r4,r4,8192
    fc58:	000b883a 	mov	r5,zero
    fc5c:	01800044 	movi	r6,1
    fc60:	01c00204 	movi	r7,8
    fc64:	00104880 	call	10488 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, JTAG_UART_0);
    fc68:	04400074 	movhi	r17,1
    fc6c:	8c4c9304 	addi	r17,r17,12876
    fc70:	8809883a 	mov	r4,r17
    fc74:	000b883a 	mov	r5,zero
    fc78:	000d883a 	mov	r6,zero
    fc7c:	000ff840 	call	ff84 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fc80:	04000074 	movhi	r16,1
    fc84:	84111404 	addi	r16,r16,17488
    fc88:	893ff604 	addi	r4,r17,-40
    fc8c:	800b883a 	mov	r5,r16
    fc90:	00113540 	call	11354 <alt_dev_llist_insert>
    fc94:	01000074 	movhi	r4,1
    fc98:	2110a104 	addi	r4,r4,17028
    fc9c:	800b883a 	mov	r5,r16
    fca0:	00113540 	call	11354 <alt_dev_llist_insert>
    fca4:	01000074 	movhi	r4,1
    fca8:	2110ad04 	addi	r4,r4,17076
    fcac:	800b883a 	mov	r5,r16
    fcb0:	00113540 	call	11354 <alt_dev_llist_insert>
    fcb4:	01000074 	movhi	r4,1
    fcb8:	2110b804 	addi	r4,r4,17120
    fcbc:	800b883a 	mov	r5,r16
    fcc0:	00113540 	call	11354 <alt_dev_llist_insert>
    fcc4:	01000074 	movhi	r4,1
    fcc8:	2110c304 	addi	r4,r4,17164
    fccc:	800b883a 	mov	r5,r16
    fcd0:	00113540 	call	11354 <alt_dev_llist_insert>
    fcd4:	01000074 	movhi	r4,1
    fcd8:	2110ce04 	addi	r4,r4,17208
    fcdc:	800b883a 	mov	r5,r16
    fce0:	00113540 	call	11354 <alt_dev_llist_insert>
    fce4:	01000074 	movhi	r4,1
    fce8:	2110d904 	addi	r4,r4,17252
    fcec:	800b883a 	mov	r5,r16
    fcf0:	00113540 	call	11354 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    fcf4:	01000074 	movhi	r4,1
    fcf8:	2110e404 	addi	r4,r4,17296
    fcfc:	20800a17 	ldw	r2,40(r4)
    fd00:	10800104 	addi	r2,r2,4
    fd04:	10c0000b 	ldhu	r3,0(r2)
    fd08:	20c00c15 	stw	r3,48(r4)
    fd0c:	10800017 	ldw	r2,0(r2)
    fd10:	100ad43a 	srli	r5,r2,16
    fd14:	21400d15 	stw	r5,52(r4)
    fd18:	00801004 	movi	r2,64
    fd1c:	10c00436 	bltu	r2,r3,fd30 <alt_sys_init+0xf0>
    fd20:	00800fc4 	movi	r2,63
    fd24:	20800f15 	stw	r2,60(r4)
    fd28:	00800184 	movi	r2,6
    fd2c:	20801015 	stw	r2,64(r4)
    fd30:	00800804 	movi	r2,32
    fd34:	11400436 	bltu	r2,r5,fd48 <alt_sys_init+0x108>
    fd38:	00c007c4 	movi	r3,31
    fd3c:	00800074 	movhi	r2,1
    fd40:	1090e404 	addi	r2,r2,17296
    fd44:	10c01115 	stw	r3,68(r2)
    fd48:	04000074 	movhi	r16,1
    fd4c:	8410e404 	addi	r16,r16,17296
    fd50:	8009883a 	mov	r4,r16
    fd54:	00108040 	call	10804 <alt_up_char_buffer_init>
    fd58:	8009883a 	mov	r4,r16
    fd5c:	01400074 	movhi	r5,1
    fd60:	29511404 	addi	r5,r5,17488
    fd64:	00113540 	call	11354 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    fd68:	01800074 	movhi	r6,1
    fd6c:	3190f604 	addi	r6,r6,17368
    fd70:	30c00a17 	ldw	r3,40(r6)
    fd74:	18800017 	ldw	r2,0(r3)
    fd78:	30800b15 	stw	r2,44(r6)
    fd7c:	18800117 	ldw	r2,4(r3)
    fd80:	30800c15 	stw	r2,48(r6)
    fd84:	19000204 	addi	r4,r3,8
    fd88:	2080000b 	ldhu	r2,0(r4)
    fd8c:	30800f15 	stw	r2,60(r6)
    fd90:	20800017 	ldw	r2,0(r4)
    fd94:	1004d43a 	srli	r2,r2,16
    fd98:	30801015 	stw	r2,64(r6)
    fd9c:	18c00304 	addi	r3,r3,12
    fda0:	18800017 	ldw	r2,0(r3)
    fda4:	1005d07a 	srai	r2,r2,1
    fda8:	01000044 	movi	r4,1
    fdac:	1104703a 	and	r2,r2,r4
    fdb0:	30800d15 	stw	r2,52(r6)
    fdb4:	18800017 	ldw	r2,0(r3)
    fdb8:	1005d13a 	srai	r2,r2,4
    fdbc:	114003cc 	andi	r5,r2,15
    fdc0:	31400e15 	stw	r5,56(r6)
    fdc4:	1a000017 	ldw	r8,0(r3)
    fdc8:	400ed43a 	srli	r7,r8,16
    fdcc:	2900021e 	bne	r5,r4,fdd8 <alt_sys_init+0x198>
    fdd0:	30001115 	stw	zero,68(r6)
    fdd4:	00000b06 	br	fe04 <alt_sys_init+0x1c4>
    fdd8:	00800084 	movi	r2,2
    fddc:	2880051e 	bne	r5,r2,fdf4 <alt_sys_init+0x1b4>
    fde0:	00c00044 	movi	r3,1
    fde4:	00800074 	movhi	r2,1
    fde8:	1090f604 	addi	r2,r2,17368
    fdec:	10c01115 	stw	r3,68(r2)
    fdf0:	00000406 	br	fe04 <alt_sys_init+0x1c4>
    fdf4:	00c00084 	movi	r3,2
    fdf8:	00800074 	movhi	r2,1
    fdfc:	1090f604 	addi	r2,r2,17368
    fe00:	10c01115 	stw	r3,68(r2)
    fe04:	01000074 	movhi	r4,1
    fe08:	2110f604 	addi	r4,r4,17368
    fe0c:	38c03fcc 	andi	r3,r7,255
    fe10:	01800804 	movi	r6,32
    fe14:	30c5c83a 	sub	r2,r6,r3
    fe18:	017fffc4 	movi	r5,-1
    fe1c:	2884d83a 	srl	r2,r5,r2
    fe20:	20801215 	stw	r2,72(r4)
    fe24:	20801117 	ldw	r2,68(r4)
    fe28:	1887883a 	add	r3,r3,r2
    fe2c:	20c01315 	stw	r3,76(r4)
    fe30:	4004d63a 	srli	r2,r8,24
    fe34:	308dc83a 	sub	r6,r6,r2
    fe38:	298ad83a 	srl	r5,r5,r6
    fe3c:	21401415 	stw	r5,80(r4)
    fe40:	01400074 	movhi	r5,1
    fe44:	29511404 	addi	r5,r5,17488
    fe48:	00113540 	call	11354 <alt_dev_llist_insert>
}
    fe4c:	dfc00217 	ldw	ra,8(sp)
    fe50:	dc400117 	ldw	r17,4(sp)
    fe54:	dc000017 	ldw	r16,0(sp)
    fe58:	dec00304 	addi	sp,sp,12
    fe5c:	f800283a 	ret

0000fe60 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fe60:	deffff04 	addi	sp,sp,-4
    fe64:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fe68:	21000017 	ldw	r4,0(r4)
    fe6c:	21000a04 	addi	r4,r4,40
    fe70:	00101300 	call	10130 <altera_avalon_jtag_uart_ioctl>
}
    fe74:	dfc00017 	ldw	ra,0(sp)
    fe78:	dec00104 	addi	sp,sp,4
    fe7c:	f800283a 	ret

0000fe80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fe80:	deffff04 	addi	sp,sp,-4
    fe84:	dfc00015 	stw	ra,0(sp)
    fe88:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fe8c:	21000017 	ldw	r4,0(r4)
    fe90:	21000a04 	addi	r4,r4,40
    fe94:	11400217 	ldw	r5,8(r2)
    fe98:	000fef80 	call	fef8 <altera_avalon_jtag_uart_close>
}
    fe9c:	dfc00017 	ldw	ra,0(sp)
    fea0:	dec00104 	addi	sp,sp,4
    fea4:	f800283a 	ret

0000fea8 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fea8:	deffff04 	addi	sp,sp,-4
    feac:	dfc00015 	stw	ra,0(sp)
    feb0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    feb4:	21000017 	ldw	r4,0(r4)
    feb8:	21000a04 	addi	r4,r4,40
    febc:	11c00217 	ldw	r7,8(r2)
    fec0:	001030c0 	call	1030c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fec4:	dfc00017 	ldw	ra,0(sp)
    fec8:	dec00104 	addi	sp,sp,4
    fecc:	f800283a 	ret

0000fed0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fed0:	deffff04 	addi	sp,sp,-4
    fed4:	dfc00015 	stw	ra,0(sp)
    fed8:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fedc:	21000017 	ldw	r4,0(r4)
    fee0:	21000a04 	addi	r4,r4,40
    fee4:	11c00217 	ldw	r7,8(r2)
    fee8:	00101a40 	call	101a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    feec:	dfc00017 	ldw	ra,0(sp)
    fef0:	dec00104 	addi	sp,sp,4
    fef4:	f800283a 	ret

0000fef8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fef8:	21800c17 	ldw	r6,48(r4)
    fefc:	2950000c 	andi	r5,r5,16384
    ff00:	280b003a 	cmpeq	r5,r5,zero
    ff04:	00000306 	br	ff14 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    ff08:	2800021e 	bne	r5,zero,ff14 <altera_avalon_jtag_uart_close+0x1c>
    ff0c:	00bffd44 	movi	r2,-11
    ff10:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ff14:	20800d17 	ldw	r2,52(r4)
    ff18:	11800326 	beq	r2,r6,ff28 <altera_avalon_jtag_uart_close+0x30>
    ff1c:	20c00917 	ldw	r3,36(r4)
    ff20:	20800117 	ldw	r2,4(r4)
    ff24:	18bff836 	bltu	r3,r2,ff08 <altera_avalon_jtag_uart_close+0x10>
    ff28:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ff2c:	f800283a 	ret

0000ff30 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ff30:	20800017 	ldw	r2,0(r4)
    ff34:	10c00104 	addi	r3,r2,4
    ff38:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ff3c:	01410004 	movi	r5,1024
    ff40:	1144703a 	and	r2,r2,r5
    ff44:	10000526 	beq	r2,zero,ff5c <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ff48:	20800817 	ldw	r2,32(r4)
    ff4c:	1144b03a 	or	r2,r2,r5
    ff50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    ff54:	20000915 	stw	zero,36(r4)
    ff58:	00000606 	br	ff74 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ff5c:	20c00917 	ldw	r3,36(r4)
    ff60:	00a00034 	movhi	r2,32768
    ff64:	10bfff04 	addi	r2,r2,-4
    ff68:	10c00236 	bltu	r2,r3,ff74 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    ff6c:	18800044 	addi	r2,r3,1
    ff70:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ff74:	00800074 	movhi	r2,1
    ff78:	10983304 	addi	r2,r2,24780
    ff7c:	10800017 	ldw	r2,0(r2)
    ff80:	f800283a 	ret

0000ff84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ff84:	defffe04 	addi	sp,sp,-8
    ff88:	dfc00115 	stw	ra,4(sp)
    ff8c:	dc000015 	stw	r16,0(sp)
    ff90:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff94:	00c00044 	movi	r3,1
    ff98:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ff9c:	20800017 	ldw	r2,0(r4)
    ffa0:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    ffa4:	3009883a 	mov	r4,r6
    ffa8:	800b883a 	mov	r5,r16
    ffac:	01800074 	movhi	r6,1
    ffb0:	31bfff04 	addi	r6,r6,-4
    ffb4:	00115500 	call	11550 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ffb8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ffbc:	81000204 	addi	r4,r16,8
    ffc0:	00800074 	movhi	r2,1
    ffc4:	10983304 	addi	r2,r2,24780
    ffc8:	11400017 	ldw	r5,0(r2)
    ffcc:	01800074 	movhi	r6,1
    ffd0:	31bfcc04 	addi	r6,r6,-208
    ffd4:	800f883a 	mov	r7,r16
    ffd8:	00112a40 	call	112a4 <alt_alarm_start>
    ffdc:	1000030e 	bge	r2,zero,ffec <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ffe0:	00a00034 	movhi	r2,32768
    ffe4:	10bfffc4 	addi	r2,r2,-1
    ffe8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ffec:	dfc00117 	ldw	ra,4(sp)
    fff0:	dc000017 	ldw	r16,0(sp)
    fff4:	dec00204 	addi	sp,sp,8
    fff8:	f800283a 	ret

0000fffc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    fffc:	22000017 	ldw	r8,0(r4)
   10000:	03800104 	movi	r14,4
   10004:	4399883a 	add	r12,r8,r14
   10008:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1000c:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10010:	5880c00c 	andi	r2,r11,768
   10014:	10004526 	beq	r2,zero,1012c <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10018:	5880400c 	andi	r2,r11,256
   1001c:	10002126 	beq	r2,zero,100a4 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10020:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   10024:	10800044 	addi	r2,r2,1
   10028:	1081ffcc 	andi	r2,r2,2047
   1002c:	20c00b17 	ldw	r3,44(r4)
   10030:	10c01626 	beq	r2,r3,1008c <altera_avalon_jtag_uart_irq+0x90>
   10034:	02a00014 	movui	r10,32768
   10038:	02400e04 	movi	r9,56
   1003c:	01c00044 	movi	r7,1
   10040:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10044:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10048:	2a84703a 	and	r2,r5,r10
   1004c:	10000d26 	beq	r2,zero,10084 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10050:	20800a17 	ldw	r2,40(r4)
   10054:	1105883a 	add	r2,r2,r4
   10058:	1245883a 	add	r2,r2,r9
   1005c:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10060:	20800a17 	ldw	r2,40(r4)
   10064:	11c5883a 	add	r2,r2,r7
   10068:	1184703a 	and	r2,r2,r6
   1006c:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10070:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   10074:	11c5883a 	add	r2,r2,r7
   10078:	1184703a 	and	r2,r2,r6
   1007c:	20c00b17 	ldw	r3,44(r4)
   10080:	10fff01e 	bne	r2,r3,10044 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10084:	2b44703a 	and	r2,r5,r13
   10088:	10000626 	beq	r2,zero,100a4 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1008c:	20800817 	ldw	r2,32(r4)
   10090:	00ffff84 	movi	r3,-2
   10094:	10c4703a 	and	r2,r2,r3
   10098:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1009c:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100a0:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   100a4:	5880800c 	andi	r2,r11,512
   100a8:	103fd826 	beq	r2,zero,1000c <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   100ac:	5b44703a 	and	r2,r11,r13
   100b0:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   100b4:	283fd526 	beq	r5,zero,1000c <altera_avalon_jtag_uart_irq+0x10>
   100b8:	20c00d17 	ldw	r3,52(r4)
   100bc:	20800c17 	ldw	r2,48(r4)
   100c0:	18801126 	beq	r3,r2,10108 <altera_avalon_jtag_uart_irq+0x10c>
   100c4:	02420e04 	movi	r9,2104
   100c8:	01800044 	movi	r6,1
   100cc:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   100d0:	20800d17 	ldw	r2,52(r4)
   100d4:	1105883a 	add	r2,r2,r4
   100d8:	1245883a 	add	r2,r2,r9
   100dc:	10800007 	ldb	r2,0(r2)
   100e0:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100e4:	20800d17 	ldw	r2,52(r4)
   100e8:	1185883a 	add	r2,r2,r6
   100ec:	11c4703a 	and	r2,r2,r7
   100f0:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   100f4:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   100f8:	283fc426 	beq	r5,zero,1000c <altera_avalon_jtag_uart_irq+0x10>
   100fc:	20c00d17 	ldw	r3,52(r4)
   10100:	20800c17 	ldw	r2,48(r4)
   10104:	18bff21e 	bne	r3,r2,100d0 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10108:	20c00817 	ldw	r3,32(r4)
   1010c:	00bfff44 	movi	r2,-3
   10110:	1886703a 	and	r3,r3,r2
   10114:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10118:	20800017 	ldw	r2,0(r4)
   1011c:	1385883a 	add	r2,r2,r14
   10120:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10124:	60800037 	ldwio	r2,0(r12)
   10128:	003fb806 	br	1000c <altera_avalon_jtag_uart_irq+0x10>
   1012c:	f800283a 	ret

00010130 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   10130:	009a8044 	movi	r2,27137
   10134:	28800326 	beq	r5,r2,10144 <altera_avalon_jtag_uart_ioctl+0x14>
   10138:	009a8084 	movi	r2,27138
   1013c:	2880171e 	bne	r5,r2,1019c <altera_avalon_jtag_uart_ioctl+0x6c>
   10140:	00000d06 	br	10178 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10144:	20c00117 	ldw	r3,4(r4)
   10148:	00a00034 	movhi	r2,32768
   1014c:	10bfffc4 	addi	r2,r2,-1
   10150:	18801226 	beq	r3,r2,1019c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10154:	31800017 	ldw	r6,0(r6)
   10158:	30ffff84 	addi	r3,r6,-2
   1015c:	10bfff44 	addi	r2,r2,-3
   10160:	10c0022e 	bgeu	r2,r3,1016c <altera_avalon_jtag_uart_ioctl+0x3c>
   10164:	01a00034 	movhi	r6,32768
   10168:	31bfff84 	addi	r6,r6,-2
   1016c:	21800115 	stw	r6,4(r4)
   10170:	0005883a 	mov	r2,zero
   10174:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10178:	20c00117 	ldw	r3,4(r4)
   1017c:	00a00034 	movhi	r2,32768
   10180:	10bfffc4 	addi	r2,r2,-1
   10184:	18800526 	beq	r3,r2,1019c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10188:	20800917 	ldw	r2,36(r4)
   1018c:	10c5803a 	cmpltu	r2,r2,r3
   10190:	30800015 	stw	r2,0(r6)
   10194:	0005883a 	mov	r2,zero
   10198:	f800283a 	ret
   1019c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   101a0:	f800283a 	ret

000101a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   101a4:	defff604 	addi	sp,sp,-40
   101a8:	dfc00915 	stw	ra,36(sp)
   101ac:	df000815 	stw	fp,32(sp)
   101b0:	ddc00715 	stw	r23,28(sp)
   101b4:	dd800615 	stw	r22,24(sp)
   101b8:	dd400515 	stw	r21,20(sp)
   101bc:	dd000415 	stw	r20,16(sp)
   101c0:	dcc00315 	stw	r19,12(sp)
   101c4:	dc800215 	stw	r18,8(sp)
   101c8:	dc400115 	stw	r17,4(sp)
   101cc:	dc000015 	stw	r16,0(sp)
   101d0:	2025883a 	mov	r18,r4
   101d4:	282f883a 	mov	r23,r5
   101d8:	3027883a 	mov	r19,r6
   101dc:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   101e0:	0180220e 	bge	zero,r6,1026c <altera_avalon_jtag_uart_read+0xc8>
   101e4:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   101e8:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
   101ec:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
   101f0:	b4400236 	bltu	r22,r17,101fc <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
   101f4:	b461c83a 	sub	r16,r22,r17
   101f8:	00000206 	br	10204 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   101fc:	00820004 	movi	r2,2048
   10200:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
   10204:	80000d26 	beq	r16,zero,1023c <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
   10208:	9829883a 	mov	r20,r19
   1020c:	9c001d36 	bltu	r19,r16,10284 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   10210:	91400e04 	addi	r5,r18,56
   10214:	a809883a 	mov	r4,r21
   10218:	2c4b883a 	add	r5,r5,r17
   1021c:	800d883a 	mov	r6,r16
   10220:	0007e100 	call	7e10 <memcpy>
      ptr   += n;
   10224:	ac2b883a 	add	r21,r21,r16
      space -= n;
   10228:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1022c:	8445883a 	add	r2,r16,r17
   10230:	1081ffcc 	andi	r2,r2,2047
   10234:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
   10238:	04ffeb16 	blt	zero,r19,101e8 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   1023c:	adc01c1e 	bne	r21,r23,102b0 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10240:	e090000c 	andi	r2,fp,16384
   10244:	10000d1e 	bne	r2,zero,1027c <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10248:	90800a17 	ldw	r2,40(r18)
   1024c:	b080031e 	bne	r22,r2,1025c <altera_avalon_jtag_uart_read+0xb8>
   10250:	90c00917 	ldw	r3,36(r18)
   10254:	90800117 	ldw	r2,4(r18)
   10258:	18bffb36 	bltu	r3,r2,10248 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1025c:	90800a17 	ldw	r2,40(r18)
   10260:	b0800426 	beq	r22,r2,10274 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10264:	04c0030e 	bge	zero,r19,10274 <altera_avalon_jtag_uart_read+0xd0>
   10268:	003fde06 	br	101e4 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   1026c:	3890000c 	andi	r2,r7,16384
   10270:	1000021e 	bne	r2,zero,1027c <altera_avalon_jtag_uart_read+0xd8>
   10274:	00bffec4 	movi	r2,-5
   10278:	00001806 	br	102dc <altera_avalon_jtag_uart_read+0x138>
   1027c:	00bffd44 	movi	r2,-11
   10280:	00001606 	br	102dc <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   10284:	91400e04 	addi	r5,r18,56
   10288:	a809883a 	mov	r4,r21
   1028c:	894b883a 	add	r5,r17,r5
   10290:	980d883a 	mov	r6,r19
   10294:	0007e100 	call	7e10 <memcpy>
      ptr   += n;
   10298:	aceb883a 	add	r21,r21,r19
      space -= n;
   1029c:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   102a0:	a445883a 	add	r2,r20,r17
   102a4:	1081ffcc 	andi	r2,r2,2047
   102a8:	90800b15 	stw	r2,44(r18)
   102ac:	003fe306 	br	1023c <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102b4:	00bfff84 	movi	r2,-2
   102b8:	2084703a 	and	r2,r4,r2
   102bc:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   102c0:	90800817 	ldw	r2,32(r18)
   102c4:	10800054 	ori	r2,r2,1
   102c8:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   102cc:	90c00017 	ldw	r3,0(r18)
   102d0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102d4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   102d8:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   102dc:	dfc00917 	ldw	ra,36(sp)
   102e0:	df000817 	ldw	fp,32(sp)
   102e4:	ddc00717 	ldw	r23,28(sp)
   102e8:	dd800617 	ldw	r22,24(sp)
   102ec:	dd400517 	ldw	r21,20(sp)
   102f0:	dd000417 	ldw	r20,16(sp)
   102f4:	dcc00317 	ldw	r19,12(sp)
   102f8:	dc800217 	ldw	r18,8(sp)
   102fc:	dc400117 	ldw	r17,4(sp)
   10300:	dc000017 	ldw	r16,0(sp)
   10304:	dec00a04 	addi	sp,sp,40
   10308:	f800283a 	ret

0001030c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1030c:	defff804 	addi	sp,sp,-32
   10310:	dfc00715 	stw	ra,28(sp)
   10314:	dd800615 	stw	r22,24(sp)
   10318:	dd400515 	stw	r21,20(sp)
   1031c:	dd000415 	stw	r20,16(sp)
   10320:	dcc00315 	stw	r19,12(sp)
   10324:	dc800215 	stw	r18,8(sp)
   10328:	dc400115 	stw	r17,4(sp)
   1032c:	dc000015 	stw	r16,0(sp)
   10330:	2021883a 	mov	r16,r4
   10334:	282d883a 	mov	r22,r5
   10338:	3011883a 	mov	r8,r6
   1033c:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10340:	01800616 	blt	zero,r6,1035c <altera_avalon_jtag_uart_write+0x50>
   10344:	2829883a 	mov	r20,r5
   10348:	00002106 	br	103d0 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   1034c:	a585c83a 	sub	r2,r20,r22
   10350:	00004306 	br	10460 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
   10354:	00bffd44 	movi	r2,-11
   10358:	00004106 	br	10460 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1035c:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10360:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   10364:	81400d17 	ldw	r5,52(r16)

      if (in < out)
   10368:	9140032e 	bgeu	r18,r5,10378 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1036c:	2c85c83a 	sub	r2,r5,r18
   10370:	11bfffc4 	addi	r6,r2,-1
   10374:	00000606 	br	10390 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
   10378:	28000326 	beq	r5,zero,10388 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1037c:	00820004 	movi	r2,2048
   10380:	148dc83a 	sub	r6,r2,r18
   10384:	00000206 	br	10390 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10388:	0081ffc4 	movi	r2,2047
   1038c:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
   10390:	30002626 	beq	r6,zero,1042c <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
   10394:	4027883a 	mov	r19,r8
   10398:	3023883a 	mov	r17,r6
   1039c:	4180012e 	bgeu	r8,r6,103a4 <altera_avalon_jtag_uart_write+0x98>
   103a0:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   103a4:	81020e04 	addi	r4,r16,2104
   103a8:	2489883a 	add	r4,r4,r18
   103ac:	a00b883a 	mov	r5,r20
   103b0:	880d883a 	mov	r6,r17
   103b4:	0007e100 	call	7e10 <memcpy>
      ptr   += n;
   103b8:	a469883a 	add	r20,r20,r17
      count -= n;
   103bc:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   103c0:	9445883a 	add	r2,r18,r17
   103c4:	1081ffcc 	andi	r2,r2,2047
   103c8:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   103cc:	023fe416 	blt	zero,r8,10360 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103d4:	00bfff84 	movi	r2,-2
   103d8:	2084703a 	and	r2,r4,r2
   103dc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   103e0:	80800817 	ldw	r2,32(r16)
   103e4:	10800094 	ori	r2,r2,2
   103e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   103ec:	80c00017 	ldw	r3,0(r16)
   103f0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103f4:	2001703a 	wrctl	status,r4
   103f8:	00000706 	br	10418 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   103fc:	80800d17 	ldw	r2,52(r16)
   10400:	1140031e 	bne	r2,r5,10410 <altera_avalon_jtag_uart_write+0x104>
   10404:	80c00917 	ldw	r3,36(r16)
   10408:	80800117 	ldw	r2,4(r16)
   1040c:	18bffb36 	bltu	r3,r2,103fc <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   10410:	80800d17 	ldw	r2,52(r16)
   10414:	117fed1e 	bne	r2,r5,103cc <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10418:	b53fcc1e 	bne	r22,r20,1034c <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
   1041c:	a890000c 	andi	r2,r21,16384
   10420:	103fcc1e 	bne	r2,zero,10354 <altera_avalon_jtag_uart_write+0x48>
   10424:	00bffec4 	movi	r2,-5
   10428:	00000d06 	br	10460 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1042c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10430:	00bfff84 	movi	r2,-2
   10434:	2084703a 	and	r2,r4,r2
   10438:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1043c:	80800817 	ldw	r2,32(r16)
   10440:	10800094 	ori	r2,r2,2
   10444:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10448:	80c00017 	ldw	r3,0(r16)
   1044c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10450:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   10454:	a890000c 	andi	r2,r21,16384
   10458:	103fe826 	beq	r2,zero,103fc <altera_avalon_jtag_uart_write+0xf0>
   1045c:	003fee06 	br	10418 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
   10460:	dfc00717 	ldw	ra,28(sp)
   10464:	dd800617 	ldw	r22,24(sp)
   10468:	dd400517 	ldw	r21,20(sp)
   1046c:	dd000417 	ldw	r20,16(sp)
   10470:	dcc00317 	ldw	r19,12(sp)
   10474:	dc800217 	ldw	r18,8(sp)
   10478:	dc400117 	ldw	r17,4(sp)
   1047c:	dc000017 	ldw	r16,0(sp)
   10480:	dec00804 	addi	sp,sp,32
   10484:	f800283a 	ret

00010488 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10488:	deffff04 	addi	sp,sp,-4
   1048c:	dfc00015 	stw	ra,0(sp)
   10490:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10494:	00c00074 	movhi	r3,1
   10498:	18d83304 	addi	r3,r3,24780
   1049c:	18800017 	ldw	r2,0(r3)
   104a0:	1000011e 	bne	r2,zero,104a8 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
   104a4:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   104a8:	008001c4 	movi	r2,7
   104ac:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   104b0:	3009883a 	mov	r4,r6
   104b4:	01800074 	movhi	r6,1
   104b8:	31813304 	addi	r6,r6,1228
   104bc:	00115500 	call	11550 <alt_irq_register>
#endif  
}
   104c0:	dfc00017 	ldw	ra,0(sp)
   104c4:	dec00104 	addi	sp,sp,4
   104c8:	f800283a 	ret

000104cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   104cc:	defffe04 	addi	sp,sp,-8
   104d0:	dfc00115 	stw	ra,4(sp)
   104d4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   104d8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   104dc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104e0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104e4:	00bfff84 	movi	r2,-2
   104e8:	8084703a 	and	r2,r16,r2
   104ec:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   104f0:	00117bc0 	call	117bc <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104f4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   104f8:	dfc00117 	ldw	ra,4(sp)
   104fc:	dc000017 	ldw	r16,0(sp)
   10500:	dec00204 	addi	sp,sp,8
   10504:	f800283a 	ret

00010508 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
   10508:	200495ba 	slli	r2,r4,22
}
   1050c:	1005d7fa 	srai	r2,r2,31
   10510:	f800283a 	ret

00010514 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   10514:	deffff04 	addi	sp,sp,-4
   10518:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1051c:	01400074 	movhi	r5,1
   10520:	29511404 	addi	r5,r5,17488
   10524:	00113c40 	call	113c4 <alt_find_dev>

  return dev;
}
   10528:	dfc00017 	ldw	ra,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   10534:	defffd04 	addi	sp,sp,-12
   10538:	dfc00215 	stw	ra,8(sp)
   1053c:	dc400115 	stw	r17,4(sp)
   10540:	dc000015 	stw	r16,0(sp)
   10544:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   10548:	20800a17 	ldw	r2,40(r4)
   1054c:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   10550:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   10554:	8009883a 	mov	r4,r16
   10558:	00105080 	call	10508 <alt_up_rs232_check_parity>
   1055c:	88800005 	stb	r2,0(r17)
   10560:	8420000c 	andi	r16,r16,32768
   10564:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
   10568:	80bfffc4 	addi	r2,r16,-1
   1056c:	dfc00217 	ldw	ra,8(sp)
   10570:	dc400117 	ldw	r17,4(sp)
   10574:	dc000017 	ldw	r16,0(sp)
   10578:	dec00304 	addi	sp,sp,12
   1057c:	f800283a 	ret

00010580 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   10580:	defff904 	addi	sp,sp,-28
   10584:	dfc00615 	stw	ra,24(sp)
   10588:	dd000515 	stw	r20,20(sp)
   1058c:	dcc00415 	stw	r19,16(sp)
   10590:	dc800315 	stw	r18,12(sp)
   10594:	dc400215 	stw	r17,8(sp)
   10598:	dc000115 	stw	r16,4(sp)
   1059c:	2821883a 	mov	r16,r5
   105a0:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   105a4:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   105a8:	3000021e 	bne	r6,zero,105b4 <alt_up_rs232_read_fd+0x34>
   105ac:	0025883a 	mov	r18,zero
   105b0:	00000a06 	br	105dc <alt_up_rs232_read_fd+0x5c>
   105b4:	0025883a 	mov	r18,zero
   105b8:	04400044 	movi	r17,1
   105bc:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
   105c0:	8461883a 	add	r16,r16,r17
   105c4:	9809883a 	mov	r4,r19
   105c8:	d80d883a 	mov	r6,sp
   105cc:	00105340 	call	10534 <alt_up_rs232_read_data>
   105d0:	1000021e 	bne	r2,zero,105dc <alt_up_rs232_read_fd+0x5c>
			count++;
   105d4:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   105d8:	a4bff81e 	bne	r20,r18,105bc <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
   105dc:	9005883a 	mov	r2,r18
   105e0:	dfc00617 	ldw	ra,24(sp)
   105e4:	dd000517 	ldw	r20,20(sp)
   105e8:	dcc00417 	ldw	r19,16(sp)
   105ec:	dc800317 	ldw	r18,12(sp)
   105f0:	dc400217 	ldw	r17,8(sp)
   105f4:	dc000117 	ldw	r16,4(sp)
   105f8:	dec00704 	addi	sp,sp,28
   105fc:	f800283a 	ret

00010600 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10600:	20800a17 	ldw	r2,40(r4)
   10604:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
   10608:	1004d43a 	srli	r2,r2,16
   1060c:	f800283a 	ret

00010610 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   10610:	20800a17 	ldw	r2,40(r4)
   10614:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   10618:	29403fcc 	andi	r5,r5,255
   1061c:	11400035 	stwio	r5,0(r2)
	return 0;
}
   10620:	0005883a 	mov	r2,zero
   10624:	f800283a 	ret

00010628 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   10628:	defffb04 	addi	sp,sp,-20
   1062c:	dfc00415 	stw	ra,16(sp)
   10630:	dcc00315 	stw	r19,12(sp)
   10634:	dc800215 	stw	r18,8(sp)
   10638:	dc400115 	stw	r17,4(sp)
   1063c:	dc000015 	stw	r16,0(sp)
   10640:	2827883a 	mov	r19,r5
   10644:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   10648:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
   1064c:	3000021e 	bne	r6,zero,10658 <alt_up_rs232_write_fd+0x30>
   10650:	0021883a 	mov	r16,zero
   10654:	00000806 	br	10678 <alt_up_rs232_write_fd+0x50>
   10658:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1065c:	84c5883a 	add	r2,r16,r19
   10660:	8809883a 	mov	r4,r17
   10664:	11400003 	ldbu	r5,0(r2)
   10668:	00106100 	call	10610 <alt_up_rs232_write_data>
   1066c:	1000021e 	bne	r2,zero,10678 <alt_up_rs232_write_fd+0x50>
		{
			count++;
   10670:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   10674:	943ff91e 	bne	r18,r16,1065c <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
   10678:	8005883a 	mov	r2,r16
   1067c:	dfc00417 	ldw	ra,16(sp)
   10680:	dcc00317 	ldw	r19,12(sp)
   10684:	dc800217 	ldw	r18,8(sp)
   10688:	dc400117 	ldw	r17,4(sp)
   1068c:	dc000017 	ldw	r16,0(sp)
   10690:	dec00504 	addi	sp,sp,20
   10694:	f800283a 	ret

00010698 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10698:	20800a17 	ldw	r2,40(r4)
   1069c:	10800104 	addi	r2,r2,4
   106a0:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   106a4:	013fff84 	movi	r4,-2
   106a8:	1906703a 	and	r3,r3,r4
   106ac:	10c00035 	stwio	r3,0(r2)
}
   106b0:	f800283a 	ret

000106b4 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   106b4:	20c00a17 	ldw	r3,40(r4)
   106b8:	18c00104 	addi	r3,r3,4
   106bc:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   106c0:	10800054 	ori	r2,r2,1
   106c4:	18800035 	stwio	r2,0(r3)
}
   106c8:	f800283a 	ret

000106cc <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   106cc:	20800a17 	ldw	r2,40(r4)
   106d0:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
   106d4:	10bfffcc 	andi	r2,r2,65535
   106d8:	f800283a 	ret

000106dc <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   106dc:	20800c17 	ldw	r2,48(r4)
   106e0:	30801c2e 	bgeu	r6,r2,10754 <alt_up_char_buffer_string+0x78>
   106e4:	20800d17 	ldw	r2,52(r4)
   106e8:	38801a2e 	bgeu	r7,r2,10754 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   106ec:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
   106f0:	28c00003 	ldbu	r3,0(r5)
   106f4:	18803fcc 	andi	r2,r3,255
   106f8:	1080201c 	xori	r2,r2,128
   106fc:	10bfe004 	addi	r2,r2,-128
   10700:	10001626 	beq	r2,zero,1075c <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   10704:	3a04983a 	sll	r2,r7,r8
   10708:	308f883a 	add	r7,r6,r2
   1070c:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   10710:	20800b17 	ldw	r2,44(r4)
   10714:	3885883a 	add	r2,r7,r2
   10718:	18c03fcc 	andi	r3,r3,255
   1071c:	18c0201c 	xori	r3,r3,128
   10720:	18ffe004 	addi	r3,r3,-128
   10724:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
   10728:	320d883a 	add	r6,r6,r8
   1072c:	20800c17 	ldw	r2,48(r4)
   10730:	3080082e 	bgeu	r6,r2,10754 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
   10734:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   10738:	28c00003 	ldbu	r3,0(r5)
   1073c:	18803fcc 	andi	r2,r3,255
   10740:	1080201c 	xori	r2,r2,128
   10744:	10bfe004 	addi	r2,r2,-128
   10748:	10000426 	beq	r2,zero,1075c <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
   1074c:	3a0f883a 	add	r7,r7,r8
   10750:	003fef06 	br	10710 <alt_up_char_buffer_string+0x34>
   10754:	00bfffc4 	movi	r2,-1
   10758:	f800283a 	ret
   1075c:	0005883a 	mov	r2,zero
	}
	return 0;
}
   10760:	f800283a 	ret

00010764 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   10764:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10768:	20800c17 	ldw	r2,48(r4)
   1076c:	3080112e 	bgeu	r6,r2,107b4 <alt_up_char_buffer_draw+0x50>
   10770:	20800d17 	ldw	r2,52(r4)
   10774:	38800f2e 	bgeu	r7,r2,107b4 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   10778:	20c00f17 	ldw	r3,60(r4)
   1077c:	30c6703a 	and	r3,r6,r3
   10780:	20800e17 	ldw	r2,56(r4)
   10784:	1886983a 	sll	r3,r3,r2
   10788:	20801117 	ldw	r2,68(r4)
   1078c:	3884703a 	and	r2,r7,r2
   10790:	21001017 	ldw	r4,64(r4)
   10794:	1104983a 	sll	r2,r2,r4
   10798:	1886b03a 	or	r3,r3,r2
   1079c:	40800b17 	ldw	r2,44(r8)
   107a0:	1887883a 	add	r3,r3,r2
   107a4:	28803fcc 	andi	r2,r5,255
   107a8:	18800025 	stbio	r2,0(r3)
   107ac:	0005883a 	mov	r2,zero
   107b0:	f800283a 	ret

	return 0;
   107b4:	00bfffc4 	movi	r2,-1
}
   107b8:	f800283a 	ret

000107bc <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   107bc:	20c00a17 	ldw	r3,40(r4)
   107c0:	00800044 	movi	r2,1
   107c4:	188000a5 	stbio	r2,2(r3)
   107c8:	20800a17 	ldw	r2,40(r4)
   107cc:	10c00084 	addi	r3,r2,2
   107d0:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   107d4:	18800023 	ldbuio	r2,0(r3)
   107d8:	1104703a 	and	r2,r2,r4
   107dc:	103ffd1e 	bne	r2,zero,107d4 <alt_up_char_buffer_clear+0x18>
	return 0;
}
   107e0:	f800283a 	ret

000107e4 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   107e4:	deffff04 	addi	sp,sp,-4
   107e8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   107ec:	01400074 	movhi	r5,1
   107f0:	29511404 	addi	r5,r5,17488
   107f4:	00113c40 	call	113c4 <alt_find_dev>

  return dev;
}
   107f8:	dfc00017 	ldw	ra,0(sp)
   107fc:	dec00104 	addi	sp,sp,4
   10800:	f800283a 	ret

00010804 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   10804:	defffe04 	addi	sp,sp,-8
   10808:	dfc00115 	stw	ra,4(sp)
   1080c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
   10810:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
   10814:	80800007 	ldb	r2,0(r16)
   10818:	10000a26 	beq	r2,zero,10844 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1081c:	8009883a 	mov	r4,r16
   10820:	01400074 	movhi	r5,1
   10824:	294a0904 	addi	r5,r5,10276
   10828:	0009bb80 	call	9bb8 <strcmp>
   1082c:	1000021e 	bne	r2,zero,10838 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
   10830:	80000005 	stb	zero,0(r16)
   10834:	00000306 	br	10844 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   10838:	84000044 	addi	r16,r16,1
   1083c:	80800007 	ldb	r2,0(r16)
   10840:	103ff61e 	bne	r2,zero,1081c <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
   10844:	dfc00117 	ldw	ra,4(sp)
   10848:	dc000017 	ldw	r16,0(sp)
   1084c:	dec00204 	addi	sp,sp,8
   10850:	f800283a 	ret

00010854 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   10854:	da000017 	ldw	r8,0(sp)
   10858:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
   1085c:	1800051e 	bne	r3,zero,10874 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   10860:	29c5383a 	mul	r2,r5,r7
   10864:	3085883a 	add	r2,r6,r2
   10868:	1105883a 	add	r2,r2,r4
   1086c:	12000025 	stbio	r8,0(r2)
   10870:	f800283a 	ret
	else if (mode == 1)
   10874:	00800044 	movi	r2,1
   10878:	1880061e 	bne	r3,r2,10894 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   1087c:	29c5383a 	mul	r2,r5,r7
   10880:	3085883a 	add	r2,r6,r2
   10884:	1085883a 	add	r2,r2,r2
   10888:	1105883a 	add	r2,r2,r4
   1088c:	1200002d 	sthio	r8,0(r2)
   10890:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   10894:	29c5383a 	mul	r2,r5,r7
   10898:	1185883a 	add	r2,r2,r6
   1089c:	1085883a 	add	r2,r2,r2
   108a0:	1085883a 	add	r2,r2,r2
   108a4:	1105883a 	add	r2,r2,r4
   108a8:	12000035 	stwio	r8,0(r2)
   108ac:	f800283a 	ret

000108b0 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   108b0:	defff304 	addi	sp,sp,-52
   108b4:	dfc00c15 	stw	ra,48(sp)
   108b8:	df000b15 	stw	fp,44(sp)
   108bc:	ddc00a15 	stw	r23,40(sp)
   108c0:	dd800915 	stw	r22,36(sp)
   108c4:	dd400815 	stw	r21,32(sp)
   108c8:	dd000715 	stw	r20,28(sp)
   108cc:	dcc00615 	stw	r19,24(sp)
   108d0:	dc800515 	stw	r18,20(sp)
   108d4:	dc400415 	stw	r17,16(sp)
   108d8:	dc000315 	stw	r16,12(sp)
   108dc:	3011883a 	mov	r8,r6
   108e0:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   108e4:	4987c83a 	sub	r3,r9,r6
   108e8:	1800010e 	bge	r3,zero,108f0 <alt_up_pixel_buffer_dma_draw_line+0x40>
   108ec:	00c7c83a 	sub	r3,zero,r3
   108f0:	3945c83a 	sub	r2,r7,r5
   108f4:	1000010e 	bge	r2,zero,108fc <alt_up_pixel_buffer_dma_draw_line+0x4c>
   108f8:	0085c83a 	sub	r2,zero,r2
   108fc:	10c4803a 	cmplt	r2,r2,r3
   10900:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10904:	20c00e17 	ldw	r3,56(r4)
   10908:	00800044 	movi	r2,1
   1090c:	1880021e 	bne	r3,r2,10918 <alt_up_pixel_buffer_dma_draw_line+0x68>
   10910:	d8000215 	stw	zero,8(sp)
   10914:	00000306 	br	10924 <alt_up_pixel_buffer_dma_draw_line+0x74>
   10918:	18c00098 	cmpnei	r3,r3,2
   1091c:	18c00044 	addi	r3,r3,1
   10920:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10924:	20800d17 	ldw	r2,52(r4)
   10928:	1000061e 	bne	r2,zero,10944 <alt_up_pixel_buffer_dma_draw_line+0x94>
   1092c:	20801317 	ldw	r2,76(r4)
   10930:	d8c00217 	ldw	r3,8(sp)
   10934:	10c5c83a 	sub	r2,r2,r3
   10938:	00c00044 	movi	r3,1
   1093c:	18ae983a 	sll	r23,r3,r2
   10940:	00000106 	br	10948 <alt_up_pixel_buffer_dma_draw_line+0x98>
   10944:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
   10948:	d8c00f17 	ldw	r3,60(sp)
   1094c:	00800044 	movi	r2,1
   10950:	1880021e 	bne	r3,r2,1095c <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
   10954:	25800c17 	ldw	r22,48(r4)
   10958:	00000106 	br	10960 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   1095c:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
   10960:	50000326 	beq	r10,zero,10970 <alt_up_pixel_buffer_dma_draw_line+0xc0>
   10964:	400d883a 	mov	r6,r8
   10968:	4827883a 	mov	r19,r9
   1096c:	00000406 	br	10980 <alt_up_pixel_buffer_dma_draw_line+0xd0>
   10970:	280d883a 	mov	r6,r5
   10974:	400b883a 	mov	r5,r8
   10978:	3827883a 	mov	r19,r7
   1097c:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
   10980:	9980060e 	bge	r19,r6,1099c <alt_up_pixel_buffer_dma_draw_line+0xec>
   10984:	9805883a 	mov	r2,r19
   10988:	3027883a 	mov	r19,r6
   1098c:	100d883a 	mov	r6,r2
   10990:	3805883a 	mov	r2,r7
   10994:	280f883a 	mov	r7,r5
   10998:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1099c:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
   109a0:	3969c83a 	sub	r20,r7,r5
   109a4:	a000010e 	bge	r20,zero,109ac <alt_up_pixel_buffer_dma_draw_line+0xfc>
   109a8:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
   109ac:	a804d7fa 	srli	r2,r21,31
   109b0:	1545883a 	add	r2,r2,r21
   109b4:	1005d07a 	srai	r2,r2,1
   109b8:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
   109bc:	29c0020e 	bge	r5,r7,109c8 <alt_up_pixel_buffer_dma_draw_line+0x118>
   109c0:	07000044 	movi	fp,1
   109c4:	00000106 	br	109cc <alt_up_pixel_buffer_dma_draw_line+0x11c>
   109c8:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   109cc:	50000226 	beq	r10,zero,109d8 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
   109d0:	9980030e 	bge	r19,r6,109e0 <alt_up_pixel_buffer_dma_draw_line+0x130>
   109d4:	00002506 	br	10a6c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   109d8:	9980130e 	bge	r19,r6,10a28 <alt_up_pixel_buffer_dma_draw_line+0x178>
   109dc:	00002306 	br	10a6c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   109e0:	3021883a 	mov	r16,r6
   109e4:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   109e8:	d8800e17 	ldw	r2,56(sp)
   109ec:	d8800015 	stw	r2,0(sp)
   109f0:	d8c00217 	ldw	r3,8(sp)
   109f4:	d8c00115 	stw	r3,4(sp)
   109f8:	b009883a 	mov	r4,r22
   109fc:	b80b883a 	mov	r5,r23
   10a00:	900d883a 	mov	r6,r18
   10a04:	800f883a 	mov	r7,r16
   10a08:	00108540 	call	10854 <helper_plot_pixel>
			error = error + deltay;
   10a0c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10a10:	0440020e 	bge	zero,r17,10a1c <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
   10a14:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10a18:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   10a1c:	84000044 	addi	r16,r16,1
   10a20:	9c001216 	blt	r19,r16,10a6c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   10a24:	003ff006 	br	109e8 <alt_up_pixel_buffer_dma_draw_line+0x138>
   10a28:	3021883a 	mov	r16,r6
   10a2c:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   10a30:	d8800e17 	ldw	r2,56(sp)
   10a34:	d8800015 	stw	r2,0(sp)
   10a38:	d8c00217 	ldw	r3,8(sp)
   10a3c:	d8c00115 	stw	r3,4(sp)
   10a40:	b009883a 	mov	r4,r22
   10a44:	b80b883a 	mov	r5,r23
   10a48:	800d883a 	mov	r6,r16
   10a4c:	900f883a 	mov	r7,r18
   10a50:	00108540 	call	10854 <helper_plot_pixel>
			error = error + deltay;
   10a54:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10a58:	0440020e 	bge	zero,r17,10a64 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
   10a5c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10a60:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10a64:	84000044 	addi	r16,r16,1
   10a68:	9c3ff10e 	bge	r19,r16,10a30 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   10a6c:	dfc00c17 	ldw	ra,48(sp)
   10a70:	df000b17 	ldw	fp,44(sp)
   10a74:	ddc00a17 	ldw	r23,40(sp)
   10a78:	dd800917 	ldw	r22,36(sp)
   10a7c:	dd400817 	ldw	r21,32(sp)
   10a80:	dd000717 	ldw	r20,28(sp)
   10a84:	dcc00617 	ldw	r19,24(sp)
   10a88:	dc800517 	ldw	r18,20(sp)
   10a8c:	dc400417 	ldw	r17,16(sp)
   10a90:	dc000317 	ldw	r16,12(sp)
   10a94:	dec00d04 	addi	sp,sp,52
   10a98:	f800283a 	ret

00010a9c <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10a9c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10aa0:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10aa4:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
   10aa8:	3980022e 	bgeu	r7,r6,10ab4 <alt_up_pixel_buffer_dma_draw_vline+0x18>
   10aac:	3011883a 	mov	r8,r6
   10ab0:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   10ab4:	2a405d2e 	bgeu	r5,r9,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10ab8:	30805c2e 	bgeu	r6,r2,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10abc:	40800136 	bltu	r8,r2,10ac4 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
   10ac0:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10ac4:	d8c00117 	ldw	r3,4(sp)
   10ac8:	00800044 	movi	r2,1
   10acc:	1880021e 	bne	r3,r2,10ad8 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10ad0:	20c00c17 	ldw	r3,48(r4)
   10ad4:	00000106 	br	10adc <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10ad8:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   10adc:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10ae0:	20800d17 	ldw	r2,52(r4)
   10ae4:	1000281e 	bne	r2,zero,10b88 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   10ae8:	22801317 	ldw	r10,76(r4)
   10aec:	3284983a 	sll	r2,r6,r10
   10af0:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10af4:	21000e17 	ldw	r4,56(r4)
   10af8:	00800044 	movi	r2,1
   10afc:	2080091e 	bne	r4,r2,10b24 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
   10b00:	41804a36 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b04:	1013883a 	mov	r9,r2
   10b08:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10b0c:	1945883a 	add	r2,r3,r5
   10b10:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10b14:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10b18:	324d883a 	add	r6,r6,r9
   10b1c:	41804336 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b20:	003ffa06 	br	10b0c <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10b24:	00800084 	movi	r2,2
   10b28:	2080021e 	bne	r4,r2,10b34 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
   10b2c:	4180032e 	bgeu	r8,r6,10b3c <alt_up_pixel_buffer_dma_draw_vline+0xa0>
   10b30:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10b34:	41800a2e 	bgeu	r8,r6,10b60 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
   10b38:	f800283a 	ret
   10b3c:	294b883a 	add	r5,r5,r5
   10b40:	02400044 	movi	r9,1
   10b44:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10b48:	28c5883a 	add	r2,r5,r3
   10b4c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10b50:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10b54:	324d883a 	add	r6,r6,r9
   10b58:	41803436 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b5c:	003ffa06 	br	10b48 <alt_up_pixel_buffer_dma_draw_vline+0xac>
   10b60:	2945883a 	add	r2,r5,r5
   10b64:	108b883a 	add	r5,r2,r2
   10b68:	02400044 	movi	r9,1
   10b6c:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10b70:	28c5883a 	add	r2,r5,r3
   10b74:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10b78:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10b7c:	324d883a 	add	r6,r6,r9
   10b80:	41802a36 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b84:	003ffa06 	br	10b70 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10b88:	21000e17 	ldw	r4,56(r4)
   10b8c:	00800044 	movi	r2,1
   10b90:	20800b1e 	bne	r4,r2,10bc0 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b94:	41802536 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b98:	4809883a 	mov	r4,r9
   10b9c:	3245383a 	mul	r2,r6,r9
   10ba0:	1885883a 	add	r2,r3,r2
   10ba4:	1145883a 	add	r2,r2,r5
   10ba8:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10bac:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10bb0:	30cd883a 	add	r6,r6,r3
   10bb4:	1105883a 	add	r2,r2,r4
   10bb8:	41801c36 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10bbc:	003ffb06 	br	10bac <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10bc0:	00800084 	movi	r2,2
   10bc4:	20800c1e 	bne	r4,r2,10bf8 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10bc8:	41801836 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   10bcc:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
   10bd0:	3105383a 	mul	r2,r6,r4
   10bd4:	1887883a 	add	r3,r3,r2
   10bd8:	294b883a 	add	r5,r5,r5
   10bdc:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10be0:	28c5883a 	add	r2,r5,r3
   10be4:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
   10be8:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10bec:	324d883a 	add	r6,r6,r9
   10bf0:	41800e36 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10bf4:	003ffa06 	br	10be0 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10bf8:	41800c36 	bltu	r8,r6,10c2c <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10bfc:	4a45883a 	add	r2,r9,r9
   10c00:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
   10c04:	3105383a 	mul	r2,r6,r4
   10c08:	1887883a 	add	r3,r3,r2
   10c0c:	2945883a 	add	r2,r5,r5
   10c10:	108b883a 	add	r5,r2,r2
   10c14:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10c18:	28c5883a 	add	r2,r5,r3
   10c1c:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
   10c20:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10c24:	324d883a 	add	r6,r6,r9
   10c28:	41bffb2e 	bgeu	r8,r6,10c18 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
   10c2c:	f800283a 	ret

00010c30 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10c30:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10c34:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10c38:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10c3c:	3140022e 	bgeu	r6,r5,10c48 <alt_up_pixel_buffer_dma_draw_hline+0x18>
   10c40:	2813883a 	mov	r9,r5
   10c44:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   10c48:	2a00552e 	bgeu	r5,r8,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c4c:	3880542e 	bgeu	r7,r2,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10c50:	4a000136 	bltu	r9,r8,10c58 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
   10c54:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10c58:	d8c00117 	ldw	r3,4(sp)
   10c5c:	00800044 	movi	r2,1
   10c60:	1880021e 	bne	r3,r2,10c6c <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10c64:	21800c17 	ldw	r6,48(r4)
   10c68:	00000106 	br	10c70 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10c6c:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
   10c70:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10c74:	20800d17 	ldw	r2,52(r4)
   10c78:	1000231e 	bne	r2,zero,10d08 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
   10c7c:	20801317 	ldw	r2,76(r4)
   10c80:	3884983a 	sll	r2,r7,r2
   10c84:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10c88:	21000e17 	ldw	r4,56(r4)
   10c8c:	00800044 	movi	r2,1
   10c90:	2080081e 	bne	r4,r2,10cb4 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
   10c94:	49404236 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c98:	3945883a 	add	r2,r7,r5
   10c9c:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10ca0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10ca4:	290b883a 	add	r5,r5,r4
   10ca8:	1105883a 	add	r2,r2,r4
   10cac:	49403c36 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10cb0:	003ffb06 	br	10ca0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10cb4:	00800084 	movi	r2,2
   10cb8:	2080021e 	bne	r4,r2,10cc4 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
   10cbc:	4940032e 	bgeu	r9,r5,10ccc <alt_up_pixel_buffer_dma_draw_hline+0x9c>
   10cc0:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10cc4:	4940082e 	bgeu	r9,r5,10ce8 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
   10cc8:	f800283a 	ret
   10ccc:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10cd0:	2945883a 	add	r2,r5,r5
   10cd4:	11c5883a 	add	r2,r2,r7
   10cd8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10cdc:	290b883a 	add	r5,r5,r4
   10ce0:	49402f36 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10ce4:	003ffa06 	br	10cd0 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
   10ce8:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10cec:	2945883a 	add	r2,r5,r5
   10cf0:	1085883a 	add	r2,r2,r2
   10cf4:	11c5883a 	add	r2,r2,r7
   10cf8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10cfc:	290b883a 	add	r5,r5,r4
   10d00:	49402736 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d04:	003ff906 	br	10cec <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10d08:	21000e17 	ldw	r4,56(r4)
   10d0c:	00800044 	movi	r2,1
   10d10:	20800a1e 	bne	r4,r2,10d3c <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
   10d14:	41c5383a 	mul	r2,r8,r7
   10d18:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
   10d1c:	49402036 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d20:	1145883a 	add	r2,r2,r5
   10d24:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10d28:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10d2c:	290b883a 	add	r5,r5,r4
   10d30:	1105883a 	add	r2,r2,r4
   10d34:	49401a36 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d38:	003ffb06 	br	10d28 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10d3c:	00800084 	movi	r2,2
   10d40:	20800b1e 	bne	r4,r2,10d70 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
   10d44:	4205883a 	add	r2,r8,r8
   10d48:	3885383a 	mul	r2,r7,r2
   10d4c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10d50:	49401336 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d54:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10d58:	2945883a 	add	r2,r5,r5
   10d5c:	11c5883a 	add	r2,r2,r7
   10d60:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10d64:	290b883a 	add	r5,r5,r4
   10d68:	49400d36 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d6c:	003ffa06 	br	10d58 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
   10d70:	4205883a 	add	r2,r8,r8
   10d74:	1085883a 	add	r2,r2,r2
   10d78:	3885383a 	mul	r2,r7,r2
   10d7c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10d80:	49400736 	bltu	r9,r5,10da0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d84:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10d88:	2945883a 	add	r2,r5,r5
   10d8c:	1085883a 	add	r2,r2,r2
   10d90:	11c5883a 	add	r2,r2,r7
   10d94:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10d98:	290b883a 	add	r5,r5,r4
   10d9c:	497ffa2e 	bgeu	r9,r5,10d88 <alt_up_pixel_buffer_dma_draw_hline+0x158>
   10da0:	f800283a 	ret

00010da4 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10da4:	defff604 	addi	sp,sp,-40
   10da8:	dfc00915 	stw	ra,36(sp)
   10dac:	dd800815 	stw	r22,32(sp)
   10db0:	dd400715 	stw	r21,28(sp)
   10db4:	dd000615 	stw	r20,24(sp)
   10db8:	dcc00515 	stw	r19,20(sp)
   10dbc:	dc800415 	stw	r18,16(sp)
   10dc0:	dc400315 	stw	r17,12(sp)
   10dc4:	dc000215 	stw	r16,8(sp)
   10dc8:	2029883a 	mov	r20,r4
   10dcc:	282d883a 	mov	r22,r5
   10dd0:	302b883a 	mov	r21,r6
   10dd4:	3825883a 	mov	r18,r7
   10dd8:	dcc00a17 	ldw	r19,40(sp)
   10ddc:	dc000b17 	ldw	r16,44(sp)
   10de0:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10de4:	dc000015 	stw	r16,0(sp)
   10de8:	dc400115 	stw	r17,4(sp)
   10dec:	380d883a 	mov	r6,r7
   10df0:	a80f883a 	mov	r7,r21
   10df4:	0010c300 	call	10c30 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   10df8:	dc000015 	stw	r16,0(sp)
   10dfc:	dc400115 	stw	r17,4(sp)
   10e00:	a009883a 	mov	r4,r20
   10e04:	b00b883a 	mov	r5,r22
   10e08:	900d883a 	mov	r6,r18
   10e0c:	980f883a 	mov	r7,r19
   10e10:	0010c300 	call	10c30 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10e14:	dc000015 	stw	r16,0(sp)
   10e18:	dc400115 	stw	r17,4(sp)
   10e1c:	a009883a 	mov	r4,r20
   10e20:	b00b883a 	mov	r5,r22
   10e24:	a80d883a 	mov	r6,r21
   10e28:	980f883a 	mov	r7,r19
   10e2c:	0010a9c0 	call	10a9c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   10e30:	dc000015 	stw	r16,0(sp)
   10e34:	dc400115 	stw	r17,4(sp)
   10e38:	a009883a 	mov	r4,r20
   10e3c:	900b883a 	mov	r5,r18
   10e40:	a80d883a 	mov	r6,r21
   10e44:	980f883a 	mov	r7,r19
   10e48:	0010a9c0 	call	10a9c <alt_up_pixel_buffer_dma_draw_vline>
}
   10e4c:	dfc00917 	ldw	ra,36(sp)
   10e50:	dd800817 	ldw	r22,32(sp)
   10e54:	dd400717 	ldw	r21,28(sp)
   10e58:	dd000617 	ldw	r20,24(sp)
   10e5c:	dcc00517 	ldw	r19,20(sp)
   10e60:	dc800417 	ldw	r18,16(sp)
   10e64:	dc400317 	ldw	r17,12(sp)
   10e68:	dc000217 	ldw	r16,8(sp)
   10e6c:	dec00a04 	addi	sp,sp,40
   10e70:	f800283a 	ret

00010e74 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10e74:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10e78:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10e7c:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10e80:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10e84:	3940022e 	bgeu	r7,r5,10e90 <alt_up_pixel_buffer_dma_draw_box+0x1c>
   10e88:	2811883a 	mov	r8,r5
   10e8c:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
   10e90:	5980032e 	bgeu	r11,r6,10ea0 <alt_up_pixel_buffer_dma_draw_box+0x2c>
   10e94:	5805883a 	mov	r2,r11
   10e98:	3017883a 	mov	r11,r6
   10e9c:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   10ea0:	2a80842e 	bgeu	r5,r10,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10ea4:	30c0832e 	bgeu	r6,r3,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10ea8:	42800136 	bltu	r8,r10,10eb0 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
   10eac:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10eb0:	58c00136 	bltu	r11,r3,10eb8 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
   10eb4:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10eb8:	d8c00217 	ldw	r3,8(sp)
   10ebc:	00800044 	movi	r2,1
   10ec0:	1880021e 	bne	r3,r2,10ecc <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
   10ec4:	20c00c17 	ldw	r3,48(r4)
   10ec8:	00000106 	br	10ed0 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
   10ecc:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   10ed0:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10ed4:	20800d17 	ldw	r2,52(r4)
   10ed8:	1000391e 	bne	r2,zero,10fc0 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   10edc:	22801317 	ldw	r10,76(r4)
   10ee0:	3284983a 	sll	r2,r6,r10
   10ee4:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10ee8:	21000e17 	ldw	r4,56(r4)
   10eec:	00800044 	movi	r2,1
   10ef0:	2080101e 	bne	r4,r2,10f34 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
   10ef4:	59806f36 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10ef8:	00000a06 	br	10f24 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   10efc:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f00:	00800044 	movi	r2,1
   10f04:	1887883a 	add	r3,r3,r2
   10f08:	2089883a 	add	r4,r4,r2
   10f0c:	40fffb2e 	bgeu	r8,r3,10efc <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10f10:	00800044 	movi	r2,1
   10f14:	308d883a 	add	r6,r6,r2
   10f18:	59806636 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   10f1c:	1284983a 	sll	r2,r2,r10
   10f20:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f24:	417ffa36 	bltu	r8,r5,10f10 <alt_up_pixel_buffer_dma_draw_box+0x9c>
   10f28:	29c9883a 	add	r4,r5,r7
   10f2c:	2807883a 	mov	r3,r5
   10f30:	003ff206 	br	10efc <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10f34:	00800084 	movi	r2,2
   10f38:	2080021e 	bne	r4,r2,10f44 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
   10f3c:	59805d36 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10f40:	00000e06 	br	10f7c <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10f44:	59805b36 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10f48:	00001b06 	br	10fb8 <alt_up_pixel_buffer_dma_draw_box+0x144>
   10f4c:	2807883a 	mov	r3,r5
   10f50:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10f54:	18c5883a 	add	r2,r3,r3
   10f58:	11c5883a 	add	r2,r2,r7
   10f5c:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f60:	1907883a 	add	r3,r3,r4
   10f64:	40fffb2e 	bgeu	r8,r3,10f54 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10f68:	00800044 	movi	r2,1
   10f6c:	308d883a 	add	r6,r6,r2
   10f70:	59805036 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   10f74:	1284983a 	sll	r2,r2,r10
   10f78:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f7c:	417ff32e 	bgeu	r8,r5,10f4c <alt_up_pixel_buffer_dma_draw_box+0xd8>
   10f80:	003ff906 	br	10f68 <alt_up_pixel_buffer_dma_draw_box+0xf4>
   10f84:	2807883a 	mov	r3,r5
   10f88:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   10f8c:	18c5883a 	add	r2,r3,r3
   10f90:	1085883a 	add	r2,r2,r2
   10f94:	11c5883a 	add	r2,r2,r7
   10f98:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f9c:	1907883a 	add	r3,r3,r4
   10fa0:	40fffa2e 	bgeu	r8,r3,10f8c <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10fa4:	00800044 	movi	r2,1
   10fa8:	308d883a 	add	r6,r6,r2
   10fac:	59804136 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   10fb0:	1284983a 	sll	r2,r2,r10
   10fb4:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10fb8:	417ff22e 	bgeu	r8,r5,10f84 <alt_up_pixel_buffer_dma_draw_box+0x110>
   10fbc:	003ff906 	br	10fa4 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10fc0:	21000e17 	ldw	r4,56(r4)
   10fc4:	00800044 	movi	r2,1
   10fc8:	2080121e 	bne	r4,r2,11014 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10fcc:	59803936 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10fd0:	5019883a 	mov	r12,r10
   10fd4:	3285383a 	mul	r2,r6,r10
   10fd8:	1885883a 	add	r2,r3,r2
   10fdc:	114f883a 	add	r7,r2,r5
   10fe0:	00000806 	br	11004 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   10fe4:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10fe8:	00800044 	movi	r2,1
   10fec:	1887883a 	add	r3,r3,r2
   10ff0:	2089883a 	add	r4,r4,r2
   10ff4:	40fffb2e 	bgeu	r8,r3,10fe4 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10ff8:	31800044 	addi	r6,r6,1
   10ffc:	3b0f883a 	add	r7,r7,r12
   11000:	59802c36 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
   11004:	417ffc36 	bltu	r8,r5,10ff8 <alt_up_pixel_buffer_dma_draw_box+0x184>
   11008:	3809883a 	mov	r4,r7
   1100c:	2807883a 	mov	r3,r5
   11010:	003ff406 	br	10fe4 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11014:	00800084 	movi	r2,2
   11018:	2080121e 	bne	r4,r2,11064 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1101c:	59802536 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   11020:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
   11024:	3285383a 	mul	r2,r6,r10
   11028:	1889883a 	add	r4,r3,r2
   1102c:	03000044 	movi	r12,1
   11030:	00000a06 	br	1105c <alt_up_pixel_buffer_dma_draw_box+0x1e8>
   11034:	2807883a 	mov	r3,r5
   11038:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1103c:	18c5883a 	add	r2,r3,r3
   11040:	1105883a 	add	r2,r2,r4
   11044:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11048:	19c7883a 	add	r3,r3,r7
   1104c:	40fffb2e 	bgeu	r8,r3,1103c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11050:	330d883a 	add	r6,r6,r12
   11054:	59801736 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   11058:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1105c:	417ff52e 	bgeu	r8,r5,11034 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
   11060:	003ffb06 	br	11050 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11064:	59801336 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   11068:	5285883a 	add	r2,r10,r10
   1106c:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
   11070:	3285383a 	mul	r2,r6,r10
   11074:	1889883a 	add	r4,r3,r2
   11078:	03000044 	movi	r12,1
   1107c:	00000b06 	br	110ac <alt_up_pixel_buffer_dma_draw_box+0x238>
   11080:	2807883a 	mov	r3,r5
   11084:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   11088:	18c5883a 	add	r2,r3,r3
   1108c:	1085883a 	add	r2,r2,r2
   11090:	1105883a 	add	r2,r2,r4
   11094:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11098:	19c7883a 	add	r3,r3,r7
   1109c:	40fffa2e 	bgeu	r8,r3,11088 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   110a0:	330d883a 	add	r6,r6,r12
   110a4:	59800336 	bltu	r11,r6,110b4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   110a8:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   110ac:	417ff42e 	bgeu	r8,r5,11080 <alt_up_pixel_buffer_dma_draw_box+0x20c>
   110b0:	003ffb06 	br	110a0 <alt_up_pixel_buffer_dma_draw_box+0x22c>
   110b4:	f800283a 	ret

000110b8 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   110b8:	00800044 	movi	r2,1
   110bc:	2880021e 	bne	r5,r2,110c8 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
   110c0:	21c00c17 	ldw	r7,48(r4)
   110c4:	00000106 	br	110cc <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
   110c8:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
   110cc:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   110d0:	20c00e17 	ldw	r3,56(r4)
   110d4:	00800084 	movi	r2,2
   110d8:	1880021e 	bne	r3,r2,110e4 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
   110dc:	294d883a 	add	r6,r5,r5
   110e0:	00000206 	br	110ec <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
   110e4:	2945883a 	add	r2,r5,r5
   110e8:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   110ec:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   110f0:	20800d17 	ldw	r2,52(r4)
   110f4:	1000121e 	bne	r2,zero,11140 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   110f8:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
   110fc:	48001a26 	beq	r9,zero,11168 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   11100:	0011883a 	mov	r8,zero
   11104:	3014c03a 	cmpne	r10,r6,zero
   11108:	00000b06 	br	11138 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   1110c:	0007883a 	mov	r3,zero
   11110:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
   11114:	19c5883a 	add	r2,r3,r7
   11118:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   1111c:	1947883a 	add	r3,r3,r5
   11120:	19bffc36 	bltu	r3,r6,11114 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   11124:	00800044 	movi	r2,1
   11128:	4091883a 	add	r8,r8,r2
   1112c:	4a000e26 	beq	r9,r8,11168 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   11130:	1104983a 	sll	r2,r2,r4
   11134:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   11138:	503ff41e 	bne	r10,zero,1110c <alt_up_pixel_buffer_dma_clear_screen+0x54>
   1113c:	003ff906 	br	11124 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   11140:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
   11144:	20000826 	beq	r4,zero,11168 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   11148:	0007883a 	mov	r3,zero
   1114c:	0005883a 	mov	r2,zero
   11150:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
   11154:	3885883a 	add	r2,r7,r2
   11158:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   1115c:	1945883a 	add	r2,r3,r5
   11160:	1007883a 	mov	r3,r2
   11164:	113ffb36 	bltu	r2,r4,11154 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
   11168:	f800283a 	ret

0001116c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   1116c:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   11170:	20c00a17 	ldw	r3,40(r4)
   11174:	00800044 	movi	r2,1
   11178:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   1117c:	20800b17 	ldw	r2,44(r4)
   11180:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
   11184:	21400b15 	stw	r5,44(r4)
	return 0;
}
   11188:	0005883a 	mov	r2,zero
   1118c:	f800283a 	ret

00011190 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   11190:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   11194:	22400f17 	ldw	r9,60(r4)
   11198:	32402a2e 	bgeu	r6,r9,11244 <alt_up_pixel_buffer_dma_draw+0xb4>
   1119c:	20801017 	ldw	r2,64(r4)
   111a0:	3880282e 	bgeu	r7,r2,11244 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   111a4:	20800d17 	ldw	r2,52(r4)
   111a8:	10000a1e 	bne	r2,zero,111d4 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   111ac:	21001217 	ldw	r4,72(r4)
   111b0:	3108703a 	and	r4,r6,r4
   111b4:	40801117 	ldw	r2,68(r8)
   111b8:	2088983a 	sll	r4,r4,r2
   111bc:	40801417 	ldw	r2,80(r8)
   111c0:	3884703a 	and	r2,r7,r2
   111c4:	40c01317 	ldw	r3,76(r8)
   111c8:	10c4983a 	sll	r2,r2,r3
   111cc:	2086b03a 	or	r3,r4,r2
   111d0:	00000806 	br	111f4 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   111d4:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   111d8:	40c01217 	ldw	r3,72(r8)
   111dc:	30c6703a 	and	r3,r6,r3
   111e0:	40801417 	ldw	r2,80(r8)
   111e4:	3884703a 	and	r2,r7,r2
   111e8:	4885383a 	mul	r2,r9,r2
   111ec:	10c5883a 	add	r2,r2,r3
   111f0:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   111f4:	42400e17 	ldw	r9,56(r8)
   111f8:	00800044 	movi	r2,1
   111fc:	4880051e 	bne	r9,r2,11214 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   11200:	40800c17 	ldw	r2,48(r8)
   11204:	1885883a 	add	r2,r3,r2
   11208:	11400025 	stbio	r5,0(r2)
   1120c:	0005883a 	mov	r2,zero
   11210:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11214:	00800084 	movi	r2,2
   11218:	4880051e 	bne	r9,r2,11230 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1121c:	40800c17 	ldw	r2,48(r8)
   11220:	1885883a 	add	r2,r3,r2
   11224:	1140002d 	sthio	r5,0(r2)
   11228:	0005883a 	mov	r2,zero
   1122c:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   11230:	40800c17 	ldw	r2,48(r8)
   11234:	1885883a 	add	r2,r3,r2
   11238:	11400035 	stwio	r5,0(r2)
   1123c:	0005883a 	mov	r2,zero
   11240:	f800283a 	ret
   11244:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   11248:	f800283a 	ret

0001124c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   1124c:	20800a17 	ldw	r2,40(r4)
   11250:	10800337 	ldwio	r2,12(r2)
}
   11254:	1080004c 	andi	r2,r2,1
   11258:	f800283a 	ret

0001125c <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   1125c:	00c00104 	movi	r3,4
   11260:	20800a17 	ldw	r2,40(r4)
   11264:	10c5883a 	add	r2,r2,r3
   11268:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   1126c:	20800a17 	ldw	r2,40(r4)
   11270:	10c5883a 	add	r2,r2,r3
   11274:	10800037 	ldwio	r2,0(r2)
   11278:	20800c15 	stw	r2,48(r4)
	return 0;
}
   1127c:	0005883a 	mov	r2,zero
   11280:	f800283a 	ret

00011284 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   11284:	deffff04 	addi	sp,sp,-4
   11288:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   1128c:	01400074 	movhi	r5,1
   11290:	29511404 	addi	r5,r5,17488
   11294:	00113c40 	call	113c4 <alt_find_dev>

  return dev;
}
   11298:	dfc00017 	ldw	ra,0(sp)
   1129c:	dec00104 	addi	sp,sp,4
   112a0:	f800283a 	ret

000112a4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   112a4:	00800074 	movhi	r2,1
   112a8:	10983304 	addi	r2,r2,24780
   112ac:	10800017 	ldw	r2,0(r2)
   112b0:	1000021e 	bne	r2,zero,112bc <alt_alarm_start+0x18>
   112b4:	00bfde84 	movi	r2,-134
   112b8:	f800283a 	ret
  {
    if (alarm)
   112bc:	2000021e 	bne	r4,zero,112c8 <alt_alarm_start+0x24>
   112c0:	00bffa84 	movi	r2,-22
   112c4:	f800283a 	ret
    {
      alarm->callback = callback;
   112c8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   112cc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112d0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112d4:	00bfff84 	movi	r2,-2
   112d8:	3884703a 	and	r2,r7,r2
   112dc:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   112e0:	00800074 	movhi	r2,1
   112e4:	10983404 	addi	r2,r2,24784
   112e8:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   112ec:	01800044 	movi	r6,1
   112f0:	1985883a 	add	r2,r3,r6
   112f4:	2885883a 	add	r2,r5,r2
   112f8:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   112fc:	10c0022e 	bgeu	r2,r3,11308 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   11300:	21800405 	stb	r6,16(r4)
   11304:	00000106 	br	1130c <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   11308:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1130c:	00800074 	movhi	r2,1
   11310:	10911a04 	addi	r2,r2,17512
   11314:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   11318:	10c00017 	ldw	r3,0(r2)
   1131c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   11320:	10c00017 	ldw	r3,0(r2)
   11324:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   11328:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1132c:	3801703a 	wrctl	status,r7
   11330:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   11334:	f800283a 	ret

00011338 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11338:	0005883a 	mov	r2,zero
   1133c:	01000104 	movi	r4,4
   11340:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11344:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11348:	1105883a 	add	r2,r2,r4
   1134c:	10fffd1e 	bne	r2,r3,11344 <alt_dcache_flush_all+0xc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11350:	f800283a 	ret

00011354 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11354:	deffff04 	addi	sp,sp,-4
   11358:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1135c:	20000226 	beq	r4,zero,11368 <alt_dev_llist_insert+0x14>
   11360:	20800217 	ldw	r2,8(r4)
   11364:	10000d1e 	bne	r2,zero,1139c <alt_dev_llist_insert+0x48>
   11368:	00800074 	movhi	r2,1
   1136c:	10911704 	addi	r2,r2,17500
   11370:	10800017 	ldw	r2,0(r2)
   11374:	1000031e 	bne	r2,zero,11384 <alt_dev_llist_insert+0x30>
   11378:	00c00074 	movhi	r3,1
   1137c:	18d82e04 	addi	r3,r3,24760
   11380:	00000206 	br	1138c <alt_dev_llist_insert+0x38>
   11384:	103ee83a 	callr	r2
   11388:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   1138c:	00800584 	movi	r2,22
   11390:	18800015 	stw	r2,0(r3)
   11394:	00bffa84 	movi	r2,-22
   11398:	00000706 	br	113b8 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1139c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   113a0:	28800017 	ldw	r2,0(r5)
   113a4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   113a8:	28800017 	ldw	r2,0(r5)
   113ac:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   113b0:	29000015 	stw	r4,0(r5)
   113b4:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   113b8:	dfc00017 	ldw	ra,0(sp)
   113bc:	dec00104 	addi	sp,sp,4
   113c0:	f800283a 	ret

000113c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   113c4:	defffb04 	addi	sp,sp,-20
   113c8:	dfc00415 	stw	ra,16(sp)
   113cc:	dcc00315 	stw	r19,12(sp)
   113d0:	dc800215 	stw	r18,8(sp)
   113d4:	dc400115 	stw	r17,4(sp)
   113d8:	dc000015 	stw	r16,0(sp)
   113dc:	2027883a 	mov	r19,r4
   113e0:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   113e4:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   113e8:	0009c740 	call	9c74 <strlen>
   113ec:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   113f0:	8c000726 	beq	r17,r16,11410 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   113f4:	89000217 	ldw	r4,8(r17)
   113f8:	980b883a 	mov	r5,r19
   113fc:	900d883a 	mov	r6,r18
   11400:	0011a0c0 	call	11a0c <memcmp>
   11404:	10000326 	beq	r2,zero,11414 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11408:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1140c:	847ff91e 	bne	r16,r17,113f4 <alt_find_dev+0x30>
   11410:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   11414:	8805883a 	mov	r2,r17
   11418:	dfc00417 	ldw	ra,16(sp)
   1141c:	dcc00317 	ldw	r19,12(sp)
   11420:	dc800217 	ldw	r18,8(sp)
   11424:	dc400117 	ldw	r17,4(sp)
   11428:	dc000017 	ldw	r16,0(sp)
   1142c:	dec00504 	addi	sp,sp,20
   11430:	f800283a 	ret

00011434 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11434:	deffff04 	addi	sp,sp,-4
   11438:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1143c:	0009883a 	mov	r4,zero
   11440:	01440004 	movi	r5,4096
   11444:	00119980 	call	11998 <alt_icache_flush>
#endif
}
   11448:	dfc00017 	ldw	ra,0(sp)
   1144c:	dec00104 	addi	sp,sp,4
   11450:	f800283a 	ret

00011454 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11454:	defffe04 	addi	sp,sp,-8
   11458:	dfc00115 	stw	ra,4(sp)
   1145c:	dc000015 	stw	r16,0(sp)
   11460:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   11464:	2809883a 	mov	r4,r5
   11468:	300b883a 	mov	r5,r6
   1146c:	380d883a 	mov	r6,r7
   11470:	001160c0 	call	1160c <open>
   11474:	1009883a 	mov	r4,r2

  if (old >= 0)
   11478:	10000b16 	blt	r2,zero,114a8 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   1147c:	10c00324 	muli	r3,r2,12
   11480:	00800074 	movhi	r2,1
   11484:	108c2904 	addi	r2,r2,12452
   11488:	1887883a 	add	r3,r3,r2
   1148c:	18800017 	ldw	r2,0(r3)
   11490:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   11494:	18800117 	ldw	r2,4(r3)
   11498:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1149c:	18800217 	ldw	r2,8(r3)
   114a0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   114a4:	000fab80 	call	fab8 <alt_release_fd>
  }
} 
   114a8:	dfc00117 	ldw	ra,4(sp)
   114ac:	dc000017 	ldw	r16,0(sp)
   114b0:	dec00204 	addi	sp,sp,8
   114b4:	f800283a 	ret

000114b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   114b8:	defffa04 	addi	sp,sp,-24
   114bc:	dfc00515 	stw	ra,20(sp)
   114c0:	dd000415 	stw	r20,16(sp)
   114c4:	dcc00315 	stw	r19,12(sp)
   114c8:	dc800215 	stw	r18,8(sp)
   114cc:	dc400115 	stw	r17,4(sp)
   114d0:	dc000015 	stw	r16,0(sp)
   114d4:	2005883a 	mov	r2,r4
   114d8:	2827883a 	mov	r19,r5
   114dc:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   114e0:	04000074 	movhi	r16,1
   114e4:	840c2c04 	addi	r16,r16,12464
   114e8:	04800044 	movi	r18,1
   114ec:	04407fc4 	movi	r17,511
   114f0:	8009883a 	mov	r4,r16
   114f4:	100b883a 	mov	r5,r2
   114f8:	900d883a 	mov	r6,r18
   114fc:	880f883a 	mov	r7,r17
   11500:	00114540 	call	11454 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11504:	843ffd04 	addi	r16,r16,-12
   11508:	8009883a 	mov	r4,r16
   1150c:	980b883a 	mov	r5,r19
   11510:	000d883a 	mov	r6,zero
   11514:	880f883a 	mov	r7,r17
   11518:	00114540 	call	11454 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1151c:	81000604 	addi	r4,r16,24
   11520:	a00b883a 	mov	r5,r20
   11524:	900d883a 	mov	r6,r18
   11528:	880f883a 	mov	r7,r17
   1152c:	00114540 	call	11454 <alt_open_fd>
}  
   11530:	dfc00517 	ldw	ra,20(sp)
   11534:	dd000417 	ldw	r20,16(sp)
   11538:	dcc00317 	ldw	r19,12(sp)
   1153c:	dc800217 	ldw	r18,8(sp)
   11540:	dc400117 	ldw	r17,4(sp)
   11544:	dc000017 	ldw	r16,0(sp)
   11548:	dec00604 	addi	sp,sp,24
   1154c:	f800283a 	ret

00011550 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11550:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11554:	008007c4 	movi	r2,31
   11558:	1100022e 	bgeu	r2,r4,11564 <alt_irq_register+0x14>
   1155c:	00bffa84 	movi	r2,-22
   11560:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11564:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11568:	013fff84 	movi	r4,-2
   1156c:	4104703a 	and	r2,r8,r4
   11570:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11574:	380490fa 	slli	r2,r7,3
   11578:	00c00074 	movhi	r3,1
   1157c:	18d87f04 	addi	r3,r3,25084
   11580:	10c5883a 	add	r2,r2,r3
   11584:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11588:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1158c:	30000e26 	beq	r6,zero,115c8 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11590:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11594:	2904703a 	and	r2,r5,r4
   11598:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   1159c:	00c00074 	movhi	r3,1
   115a0:	18d83204 	addi	r3,r3,24776
   115a4:	19000017 	ldw	r4,0(r3)
   115a8:	00800044 	movi	r2,1
   115ac:	11c4983a 	sll	r2,r2,r7
   115b0:	1104b03a 	or	r2,r2,r4
   115b4:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   115b8:	18800017 	ldw	r2,0(r3)
   115bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c0:	2801703a 	wrctl	status,r5
   115c4:	00000e06 	br	11600 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115c8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115cc:	00bfff84 	movi	r2,-2
   115d0:	2884703a 	and	r2,r5,r2
   115d4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   115d8:	00c00074 	movhi	r3,1
   115dc:	18d83204 	addi	r3,r3,24776
   115e0:	19000017 	ldw	r4,0(r3)
   115e4:	00bfff84 	movi	r2,-2
   115e8:	11c4183a 	rol	r2,r2,r7
   115ec:	1104703a 	and	r2,r2,r4
   115f0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   115f4:	18800017 	ldw	r2,0(r3)
   115f8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115fc:	2801703a 	wrctl	status,r5
   11600:	4001703a 	wrctl	status,r8
   11604:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11608:	f800283a 	ret

0001160c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1160c:	defff904 	addi	sp,sp,-28
   11610:	dfc00615 	stw	ra,24(sp)
   11614:	dd400515 	stw	r21,20(sp)
   11618:	dd000415 	stw	r20,16(sp)
   1161c:	dcc00315 	stw	r19,12(sp)
   11620:	dc800215 	stw	r18,8(sp)
   11624:	dc400115 	stw	r17,4(sp)
   11628:	dc000015 	stw	r16,0(sp)
   1162c:	2029883a 	mov	r20,r4
   11630:	2827883a 	mov	r19,r5
   11634:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11638:	01400074 	movhi	r5,1
   1163c:	29511404 	addi	r5,r5,17488
   11640:	00113c40 	call	113c4 <alt_find_dev>
   11644:	1021883a 	mov	r16,r2
   11648:	10000226 	beq	r2,zero,11654 <open+0x48>
   1164c:	0025883a 	mov	r18,zero
   11650:	00000a06 	br	1167c <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11654:	a009883a 	mov	r4,r20
   11658:	00118700 	call	11870 <alt_find_file>
   1165c:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11660:	1000051e 	bne	r2,zero,11678 <open+0x6c>
   11664:	047fffc4 	movi	r17,-1
   11668:	043ffb44 	movi	r16,-19
   1166c:	00002b06 	br	1171c <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11670:	043ffcc4 	movi	r16,-13
   11674:	00002906 	br	1171c <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11678:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   1167c:	8009883a 	mov	r4,r16
   11680:	001192c0 	call	1192c <alt_get_fd>
   11684:	1023883a 	mov	r17,r2
   11688:	10003316 	blt	r2,zero,11758 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   1168c:	10800324 	muli	r2,r2,12
   11690:	02000074 	movhi	r8,1
   11694:	420c2904 	addi	r8,r8,12452
   11698:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1169c:	00900034 	movhi	r2,16384
   116a0:	10bfffc4 	addi	r2,r2,-1
   116a4:	9886703a 	and	r3,r19,r2
   116a8:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   116ac:	9004c03a 	cmpne	r2,r18,zero
   116b0:	1000121e 	bne	r2,zero,116fc <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   116b4:	18900034 	orhi	r2,r3,16384
   116b8:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   116bc:	00800074 	movhi	r2,1
   116c0:	10911604 	addi	r2,r2,17496
   116c4:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   116c8:	21800017 	ldw	r6,0(r4)
   116cc:	000b883a 	mov	r5,zero
   116d0:	4007883a 	mov	r3,r8
   116d4:	02400044 	movi	r9,1
   116d8:	02000304 	movi	r8,12
   116dc:	18800017 	ldw	r2,0(r3)
   116e0:	1180031e 	bne	r2,r6,116f0 <open+0xe4>
   116e4:	18800217 	ldw	r2,8(r3)
   116e8:	1000010e 	bge	r2,zero,116f0 <open+0xe4>
   116ec:	193fe01e 	bne	r3,r4,11670 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   116f0:	2a4b883a 	add	r5,r5,r9
   116f4:	1a07883a 	add	r3,r3,r8
   116f8:	397ff82e 	bgeu	r7,r5,116dc <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   116fc:	80800317 	ldw	r2,12(r16)
   11700:	10001726 	beq	r2,zero,11760 <open+0x154>
   11704:	a00b883a 	mov	r5,r20
   11708:	980d883a 	mov	r6,r19
   1170c:	a80f883a 	mov	r7,r21
   11710:	103ee83a 	callr	r2
   11714:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11718:	1000110e 	bge	r2,zero,11760 <open+0x154>
  {
    alt_release_fd (index);  
   1171c:	8809883a 	mov	r4,r17
   11720:	000fab80 	call	fab8 <alt_release_fd>
   11724:	00800074 	movhi	r2,1
   11728:	10911704 	addi	r2,r2,17500
   1172c:	10800017 	ldw	r2,0(r2)
   11730:	1000031e 	bne	r2,zero,11740 <open+0x134>
   11734:	00c00074 	movhi	r3,1
   11738:	18d82e04 	addi	r3,r3,24760
   1173c:	00000206 	br	11748 <open+0x13c>
   11740:	103ee83a 	callr	r2
   11744:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   11748:	0405c83a 	sub	r2,zero,r16
   1174c:	18800015 	stw	r2,0(r3)
   11750:	047fffc4 	movi	r17,-1
   11754:	00000206 	br	11760 <open+0x154>
   11758:	1021883a 	mov	r16,r2
   1175c:	003fef06 	br	1171c <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   11760:	8805883a 	mov	r2,r17
   11764:	dfc00617 	ldw	ra,24(sp)
   11768:	dd400517 	ldw	r21,20(sp)
   1176c:	dd000417 	ldw	r20,16(sp)
   11770:	dcc00317 	ldw	r19,12(sp)
   11774:	dc800217 	ldw	r18,8(sp)
   11778:	dc400117 	ldw	r17,4(sp)
   1177c:	dc000017 	ldw	r16,0(sp)
   11780:	dec00704 	addi	sp,sp,28
   11784:	f800283a 	ret

00011788 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11788:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1178c:	00bfff84 	movi	r2,-2
   11790:	2884703a 	and	r2,r5,r2
   11794:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11798:	20c00017 	ldw	r3,0(r4)
   1179c:	20800117 	ldw	r2,4(r4)
   117a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   117a4:	20800117 	ldw	r2,4(r4)
   117a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   117ac:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   117b0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117b4:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   117b8:	f800283a 	ret

000117bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   117bc:	defffd04 	addi	sp,sp,-12
   117c0:	dfc00215 	stw	ra,8(sp)
   117c4:	dc400115 	stw	r17,4(sp)
   117c8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   117cc:	d4200f17 	ldw	r16,-32708(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   117d0:	d0a72917 	ldw	r2,-25436(gp)
   117d4:	10800044 	addi	r2,r2,1
   117d8:	d0a72915 	stw	r2,-25436(gp)
   117dc:	00001b06 	br	1184c <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   117e0:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   117e4:	80800403 	ldbu	r2,16(r16)
   117e8:	10000326 	beq	r2,zero,117f8 <alt_tick+0x3c>
   117ec:	d0a72917 	ldw	r2,-25436(gp)
   117f0:	1000011e 	bne	r2,zero,117f8 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   117f4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   117f8:	d0e72917 	ldw	r3,-25436(gp)
   117fc:	80800217 	ldw	r2,8(r16)
   11800:	18801136 	bltu	r3,r2,11848 <alt_tick+0x8c>
   11804:	80800403 	ldbu	r2,16(r16)
   11808:	10000f1e 	bne	r2,zero,11848 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   1180c:	80800317 	ldw	r2,12(r16)
   11810:	81000517 	ldw	r4,20(r16)
   11814:	103ee83a 	callr	r2
   11818:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1181c:	1000031e 	bne	r2,zero,1182c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   11820:	8009883a 	mov	r4,r16
   11824:	00117880 	call	11788 <alt_alarm_stop>
   11828:	00000706 	br	11848 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   1182c:	80800217 	ldw	r2,8(r16)
   11830:	1885883a 	add	r2,r3,r2
   11834:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11838:	d0e72917 	ldw	r3,-25436(gp)
   1183c:	10c0022e 	bgeu	r2,r3,11848 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   11840:	00800044 	movi	r2,1
   11844:	80800405 	stb	r2,16(r16)
   11848:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1184c:	d0a00f04 	addi	r2,gp,-32708
   11850:	80bfe31e 	bne	r16,r2,117e0 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11854:	dfc00217 	ldw	ra,8(sp)
   11858:	dc400117 	ldw	r17,4(sp)
   1185c:	dc000017 	ldw	r16,0(sp)
   11860:	dec00304 	addi	sp,sp,12
   11864:	f800283a 	ret

00011868 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11868:	000170fa 	wrctl	ienable,zero
}
   1186c:	f800283a 	ret

00011870 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11870:	defff904 	addi	sp,sp,-28
   11874:	dfc00615 	stw	ra,24(sp)
   11878:	dd400515 	stw	r21,20(sp)
   1187c:	dd000415 	stw	r20,16(sp)
   11880:	dcc00315 	stw	r19,12(sp)
   11884:	dc800215 	stw	r18,8(sp)
   11888:	dc400115 	stw	r17,4(sp)
   1188c:	dc000015 	stw	r16,0(sp)
   11890:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11894:	00800074 	movhi	r2,1
   11898:	10911204 	addi	r2,r2,17480
   1189c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118a0:	102b883a 	mov	r21,r2
   118a4:	88801626 	beq	r17,r2,11900 <alt_find_file+0x90>
   118a8:	053fffc4 	movi	r20,-1
   118ac:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   118b0:	8c000217 	ldw	r16,8(r17)
   118b4:	8009883a 	mov	r4,r16
   118b8:	0009c740 	call	9c74 <strlen>
   118bc:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   118c0:	8085883a 	add	r2,r16,r2
   118c4:	1505883a 	add	r2,r2,r20
   118c8:	10800007 	ldb	r2,0(r2)
   118cc:	14c0011e 	bne	r2,r19,118d4 <alt_find_file+0x64>
    {
      len -= 1;
   118d0:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   118d4:	1c85883a 	add	r2,r3,r18
   118d8:	10800007 	ldb	r2,0(r2)
   118dc:	14c00126 	beq	r2,r19,118e4 <alt_find_file+0x74>
   118e0:	1000051e 	bne	r2,zero,118f8 <alt_find_file+0x88>
   118e4:	8009883a 	mov	r4,r16
   118e8:	900b883a 	mov	r5,r18
   118ec:	180d883a 	mov	r6,r3
   118f0:	0011a0c0 	call	11a0c <memcmp>
   118f4:	10000326 	beq	r2,zero,11904 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   118f8:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118fc:	8d7fec1e 	bne	r17,r21,118b0 <alt_find_file+0x40>
   11900:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   11904:	8805883a 	mov	r2,r17
   11908:	dfc00617 	ldw	ra,24(sp)
   1190c:	dd400517 	ldw	r21,20(sp)
   11910:	dd000417 	ldw	r20,16(sp)
   11914:	dcc00317 	ldw	r19,12(sp)
   11918:	dc800217 	ldw	r18,8(sp)
   1191c:	dc400117 	ldw	r17,4(sp)
   11920:	dc000017 	ldw	r16,0(sp)
   11924:	dec00704 	addi	sp,sp,28
   11928:	f800283a 	ret

0001192c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1192c:	000b883a 	mov	r5,zero
   11930:	00c00074 	movhi	r3,1
   11934:	18cc2904 	addi	r3,r3,12452
   11938:	02000304 	movi	r8,12
   1193c:	02400074 	movhi	r9,1
   11940:	4a511604 	addi	r9,r9,17496
   11944:	01c00044 	movi	r7,1
   11948:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   1194c:	18800017 	ldw	r2,0(r3)
   11950:	10000c1e 	bne	r2,zero,11984 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   11954:	2a05383a 	mul	r2,r5,r8
   11958:	00c00074 	movhi	r3,1
   1195c:	18cc2904 	addi	r3,r3,12452
   11960:	10c5883a 	add	r2,r2,r3
   11964:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   11968:	48800017 	ldw	r2,0(r9)
   1196c:	11400216 	blt	r2,r5,11978 <alt_get_fd+0x4c>
   11970:	2805883a 	mov	r2,r5
   11974:	f800283a 	ret
      {
        alt_max_fd = i;
   11978:	49400015 	stw	r5,0(r9)
   1197c:	2805883a 	mov	r2,r5
   11980:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11984:	29cb883a 	add	r5,r5,r7
   11988:	1a07883a 	add	r3,r3,r8
   1198c:	29bfef1e 	bne	r5,r6,1194c <alt_get_fd+0x20>
   11990:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   11994:	f800283a 	ret

00011998 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   11998:	2007883a 	mov	r3,r4
   1199c:	00840004 	movi	r2,4096
   119a0:	1140012e 	bgeu	r2,r5,119a8 <alt_icache_flush+0x10>
   119a4:	100b883a 	mov	r5,r2
   119a8:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119ac:	1940042e 	bgeu	r3,r5,119c0 <alt_icache_flush+0x28>
   119b0:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   119b4:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119b8:	1887883a 	add	r3,r3,r2
   119bc:	197ffd36 	bltu	r3,r5,119b4 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   119c0:	208007cc 	andi	r2,r4,31
   119c4:	10000126 	beq	r2,zero,119cc <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   119c8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   119cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   119d0:	f800283a 	ret

000119d4 <exit>:
   119d4:	defffe04 	addi	sp,sp,-8
   119d8:	000b883a 	mov	r5,zero
   119dc:	dc000015 	stw	r16,0(sp)
   119e0:	dfc00115 	stw	ra,4(sp)
   119e4:	2021883a 	mov	r16,r4
   119e8:	0011dbc0 	call	11dbc <__call_exitprocs>
   119ec:	00800074 	movhi	r2,1
   119f0:	10910d04 	addi	r2,r2,17460
   119f4:	11000017 	ldw	r4,0(r2)
   119f8:	20800f17 	ldw	r2,60(r4)
   119fc:	10000126 	beq	r2,zero,11a04 <exit+0x30>
   11a00:	103ee83a 	callr	r2
   11a04:	8009883a 	mov	r4,r16
   11a08:	0011f6c0 	call	11f6c <_exit>

00011a0c <memcmp>:
   11a0c:	00c000c4 	movi	r3,3
   11a10:	1980032e 	bgeu	r3,r6,11a20 <memcmp+0x14>
   11a14:	2144b03a 	or	r2,r4,r5
   11a18:	10c4703a 	and	r2,r2,r3
   11a1c:	10000f26 	beq	r2,zero,11a5c <memcmp+0x50>
   11a20:	31ffffc4 	addi	r7,r6,-1
   11a24:	3000061e 	bne	r6,zero,11a40 <memcmp+0x34>
   11a28:	00000a06 	br	11a54 <memcmp+0x48>
   11a2c:	39ffffc4 	addi	r7,r7,-1
   11a30:	00bfffc4 	movi	r2,-1
   11a34:	21000044 	addi	r4,r4,1
   11a38:	29400044 	addi	r5,r5,1
   11a3c:	38800526 	beq	r7,r2,11a54 <memcmp+0x48>
   11a40:	20c00003 	ldbu	r3,0(r4)
   11a44:	28800003 	ldbu	r2,0(r5)
   11a48:	18bff826 	beq	r3,r2,11a2c <memcmp+0x20>
   11a4c:	1885c83a 	sub	r2,r3,r2
   11a50:	f800283a 	ret
   11a54:	0005883a 	mov	r2,zero
   11a58:	f800283a 	ret
   11a5c:	180f883a 	mov	r7,r3
   11a60:	20c00017 	ldw	r3,0(r4)
   11a64:	28800017 	ldw	r2,0(r5)
   11a68:	18bfed1e 	bne	r3,r2,11a20 <memcmp+0x14>
   11a6c:	31bfff04 	addi	r6,r6,-4
   11a70:	21000104 	addi	r4,r4,4
   11a74:	29400104 	addi	r5,r5,4
   11a78:	39bff936 	bltu	r7,r6,11a60 <memcmp+0x54>
   11a7c:	003fe806 	br	11a20 <memcmp+0x14>

00011a80 <putc>:
   11a80:	defffc04 	addi	sp,sp,-16
   11a84:	dc800215 	stw	r18,8(sp)
   11a88:	04800074 	movhi	r18,1
   11a8c:	94910c04 	addi	r18,r18,17456
   11a90:	90c00017 	ldw	r3,0(r18)
   11a94:	dc400115 	stw	r17,4(sp)
   11a98:	dc000015 	stw	r16,0(sp)
   11a9c:	dfc00315 	stw	ra,12(sp)
   11aa0:	2023883a 	mov	r17,r4
   11aa4:	2821883a 	mov	r16,r5
   11aa8:	18000226 	beq	r3,zero,11ab4 <putc+0x34>
   11aac:	18800e17 	ldw	r2,56(r3)
   11ab0:	10001126 	beq	r2,zero,11af8 <putc+0x78>
   11ab4:	80800217 	ldw	r2,8(r16)
   11ab8:	10ffffc4 	addi	r3,r2,-1
   11abc:	80c00215 	stw	r3,8(r16)
   11ac0:	18001316 	blt	r3,zero,11b10 <putc+0x90>
   11ac4:	80800017 	ldw	r2,0(r16)
   11ac8:	14400005 	stb	r17,0(r2)
   11acc:	80c00017 	ldw	r3,0(r16)
   11ad0:	18800044 	addi	r2,r3,1
   11ad4:	18c00003 	ldbu	r3,0(r3)
   11ad8:	80800015 	stw	r2,0(r16)
   11adc:	1805883a 	mov	r2,r3
   11ae0:	dfc00317 	ldw	ra,12(sp)
   11ae4:	dc800217 	ldw	r18,8(sp)
   11ae8:	dc400117 	ldw	r17,4(sp)
   11aec:	dc000017 	ldw	r16,0(sp)
   11af0:	dec00404 	addi	sp,sp,16
   11af4:	f800283a 	ret
   11af8:	1809883a 	mov	r4,r3
   11afc:	00063780 	call	6378 <__sinit>
   11b00:	80800217 	ldw	r2,8(r16)
   11b04:	10ffffc4 	addi	r3,r2,-1
   11b08:	80c00215 	stw	r3,8(r16)
   11b0c:	183fed0e 	bge	r3,zero,11ac4 <putc+0x44>
   11b10:	80800617 	ldw	r2,24(r16)
   11b14:	18800f16 	blt	r3,r2,11b54 <putc+0xd4>
   11b18:	80800017 	ldw	r2,0(r16)
   11b1c:	14400005 	stb	r17,0(r2)
   11b20:	81000017 	ldw	r4,0(r16)
   11b24:	00800284 	movi	r2,10
   11b28:	20c00003 	ldbu	r3,0(r4)
   11b2c:	18801226 	beq	r3,r2,11b78 <putc+0xf8>
   11b30:	20800044 	addi	r2,r4,1
   11b34:	80800015 	stw	r2,0(r16)
   11b38:	1805883a 	mov	r2,r3
   11b3c:	dfc00317 	ldw	ra,12(sp)
   11b40:	dc800217 	ldw	r18,8(sp)
   11b44:	dc400117 	ldw	r17,4(sp)
   11b48:	dc000017 	ldw	r16,0(sp)
   11b4c:	dec00404 	addi	sp,sp,16
   11b50:	f800283a 	ret
   11b54:	91000017 	ldw	r4,0(r18)
   11b58:	880b883a 	mov	r5,r17
   11b5c:	800d883a 	mov	r6,r16
   11b60:	dfc00317 	ldw	ra,12(sp)
   11b64:	dc800217 	ldw	r18,8(sp)
   11b68:	dc400117 	ldw	r17,4(sp)
   11b6c:	dc000017 	ldw	r16,0(sp)
   11b70:	dec00404 	addi	sp,sp,16
   11b74:	0011c6c1 	jmpi	11c6c <__swbuf_r>
   11b78:	91000017 	ldw	r4,0(r18)
   11b7c:	180b883a 	mov	r5,r3
   11b80:	003ff606 	br	11b5c <putc+0xdc>

00011b84 <_putc_r>:
   11b84:	defffc04 	addi	sp,sp,-16
   11b88:	dc400215 	stw	r17,8(sp)
   11b8c:	dc000115 	stw	r16,4(sp)
   11b90:	dfc00315 	stw	ra,12(sp)
   11b94:	2021883a 	mov	r16,r4
   11b98:	2823883a 	mov	r17,r5
   11b9c:	20000226 	beq	r4,zero,11ba8 <_putc_r+0x24>
   11ba0:	20800e17 	ldw	r2,56(r4)
   11ba4:	10001026 	beq	r2,zero,11be8 <_putc_r+0x64>
   11ba8:	30800217 	ldw	r2,8(r6)
   11bac:	10ffffc4 	addi	r3,r2,-1
   11bb0:	30c00215 	stw	r3,8(r6)
   11bb4:	18001316 	blt	r3,zero,11c04 <_putc_r+0x80>
   11bb8:	30800017 	ldw	r2,0(r6)
   11bbc:	14400005 	stb	r17,0(r2)
   11bc0:	30c00017 	ldw	r3,0(r6)
   11bc4:	18800044 	addi	r2,r3,1
   11bc8:	18c00003 	ldbu	r3,0(r3)
   11bcc:	30800015 	stw	r2,0(r6)
   11bd0:	1805883a 	mov	r2,r3
   11bd4:	dfc00317 	ldw	ra,12(sp)
   11bd8:	dc400217 	ldw	r17,8(sp)
   11bdc:	dc000117 	ldw	r16,4(sp)
   11be0:	dec00404 	addi	sp,sp,16
   11be4:	f800283a 	ret
   11be8:	d9800015 	stw	r6,0(sp)
   11bec:	00063780 	call	6378 <__sinit>
   11bf0:	d9800017 	ldw	r6,0(sp)
   11bf4:	30800217 	ldw	r2,8(r6)
   11bf8:	10ffffc4 	addi	r3,r2,-1
   11bfc:	30c00215 	stw	r3,8(r6)
   11c00:	183fed0e 	bge	r3,zero,11bb8 <_putc_r+0x34>
   11c04:	30800617 	ldw	r2,24(r6)
   11c08:	18800e16 	blt	r3,r2,11c44 <_putc_r+0xc0>
   11c0c:	30800017 	ldw	r2,0(r6)
   11c10:	14400005 	stb	r17,0(r2)
   11c14:	31000017 	ldw	r4,0(r6)
   11c18:	00800284 	movi	r2,10
   11c1c:	20c00003 	ldbu	r3,0(r4)
   11c20:	18800f26 	beq	r3,r2,11c60 <_putc_r+0xdc>
   11c24:	20800044 	addi	r2,r4,1
   11c28:	30800015 	stw	r2,0(r6)
   11c2c:	1805883a 	mov	r2,r3
   11c30:	dfc00317 	ldw	ra,12(sp)
   11c34:	dc400217 	ldw	r17,8(sp)
   11c38:	dc000117 	ldw	r16,4(sp)
   11c3c:	dec00404 	addi	sp,sp,16
   11c40:	f800283a 	ret
   11c44:	8009883a 	mov	r4,r16
   11c48:	880b883a 	mov	r5,r17
   11c4c:	dfc00317 	ldw	ra,12(sp)
   11c50:	dc400217 	ldw	r17,8(sp)
   11c54:	dc000117 	ldw	r16,4(sp)
   11c58:	dec00404 	addi	sp,sp,16
   11c5c:	0011c6c1 	jmpi	11c6c <__swbuf_r>
   11c60:	8009883a 	mov	r4,r16
   11c64:	180b883a 	mov	r5,r3
   11c68:	003ff806 	br	11c4c <_putc_r+0xc8>

00011c6c <__swbuf_r>:
   11c6c:	defffc04 	addi	sp,sp,-16
   11c70:	dc400215 	stw	r17,8(sp)
   11c74:	dc000115 	stw	r16,4(sp)
   11c78:	dfc00315 	stw	ra,12(sp)
   11c7c:	2023883a 	mov	r17,r4
   11c80:	2821883a 	mov	r16,r5
   11c84:	20000226 	beq	r4,zero,11c90 <__swbuf_r+0x24>
   11c88:	20800e17 	ldw	r2,56(r4)
   11c8c:	10002f26 	beq	r2,zero,11d4c <__swbuf_r+0xe0>
   11c90:	3080030b 	ldhu	r2,12(r6)
   11c94:	30c00617 	ldw	r3,24(r6)
   11c98:	1080020c 	andi	r2,r2,8
   11c9c:	30c00215 	stw	r3,8(r6)
   11ca0:	10002226 	beq	r2,zero,11d2c <__swbuf_r+0xc0>
   11ca4:	30c00417 	ldw	r3,16(r6)
   11ca8:	18002026 	beq	r3,zero,11d2c <__swbuf_r+0xc0>
   11cac:	31000017 	ldw	r4,0(r6)
   11cb0:	30800517 	ldw	r2,20(r6)
   11cb4:	20c7c83a 	sub	r3,r4,r3
   11cb8:	18802f0e 	bge	r3,r2,11d78 <__swbuf_r+0x10c>
   11cbc:	19400044 	addi	r5,r3,1
   11cc0:	30800217 	ldw	r2,8(r6)
   11cc4:	84003fcc 	andi	r16,r16,255
   11cc8:	20c00044 	addi	r3,r4,1
   11ccc:	10bfffc4 	addi	r2,r2,-1
   11cd0:	30800215 	stw	r2,8(r6)
   11cd4:	24000005 	stb	r16,0(r4)
   11cd8:	30800517 	ldw	r2,20(r6)
   11cdc:	30c00015 	stw	r3,0(r6)
   11ce0:	11400c26 	beq	r2,r5,11d14 <__swbuf_r+0xa8>
   11ce4:	3080030b 	ldhu	r2,12(r6)
   11ce8:	1080004c 	andi	r2,r2,1
   11cec:	1005003a 	cmpeq	r2,r2,zero
   11cf0:	10000626 	beq	r2,zero,11d0c <__swbuf_r+0xa0>
   11cf4:	8005883a 	mov	r2,r16
   11cf8:	dfc00317 	ldw	ra,12(sp)
   11cfc:	dc400217 	ldw	r17,8(sp)
   11d00:	dc000117 	ldw	r16,4(sp)
   11d04:	dec00404 	addi	sp,sp,16
   11d08:	f800283a 	ret
   11d0c:	00800284 	movi	r2,10
   11d10:	80bff81e 	bne	r16,r2,11cf4 <__swbuf_r+0x88>
   11d14:	8809883a 	mov	r4,r17
   11d18:	300b883a 	mov	r5,r6
   11d1c:	00060e00 	call	60e0 <_fflush_r>
   11d20:	103ff426 	beq	r2,zero,11cf4 <__swbuf_r+0x88>
   11d24:	043fffc4 	movi	r16,-1
   11d28:	003ff206 	br	11cf4 <__swbuf_r+0x88>
   11d2c:	300b883a 	mov	r5,r6
   11d30:	8809883a 	mov	r4,r17
   11d34:	d9800015 	stw	r6,0(sp)
   11d38:	00047d80 	call	47d8 <__swsetup_r>
   11d3c:	d9800017 	ldw	r6,0(sp)
   11d40:	1000061e 	bne	r2,zero,11d5c <__swbuf_r+0xf0>
   11d44:	30c00417 	ldw	r3,16(r6)
   11d48:	003fd806 	br	11cac <__swbuf_r+0x40>
   11d4c:	d9800015 	stw	r6,0(sp)
   11d50:	00063780 	call	6378 <__sinit>
   11d54:	d9800017 	ldw	r6,0(sp)
   11d58:	003fcd06 	br	11c90 <__swbuf_r+0x24>
   11d5c:	3080030b 	ldhu	r2,12(r6)
   11d60:	00c00244 	movi	r3,9
   11d64:	043fffc4 	movi	r16,-1
   11d68:	10801014 	ori	r2,r2,64
   11d6c:	3080030d 	sth	r2,12(r6)
   11d70:	88c00015 	stw	r3,0(r17)
   11d74:	003fdf06 	br	11cf4 <__swbuf_r+0x88>
   11d78:	300b883a 	mov	r5,r6
   11d7c:	8809883a 	mov	r4,r17
   11d80:	d9800015 	stw	r6,0(sp)
   11d84:	00060e00 	call	60e0 <_fflush_r>
   11d88:	d9800017 	ldw	r6,0(sp)
   11d8c:	103fe51e 	bne	r2,zero,11d24 <__swbuf_r+0xb8>
   11d90:	31000017 	ldw	r4,0(r6)
   11d94:	01400044 	movi	r5,1
   11d98:	003fc906 	br	11cc0 <__swbuf_r+0x54>

00011d9c <__swbuf>:
   11d9c:	01800074 	movhi	r6,1
   11da0:	31910c04 	addi	r6,r6,17456
   11da4:	2007883a 	mov	r3,r4
   11da8:	31000017 	ldw	r4,0(r6)
   11dac:	280d883a 	mov	r6,r5
   11db0:	180b883a 	mov	r5,r3
   11db4:	0011c6c1 	jmpi	11c6c <__swbuf_r>

00011db8 <register_fini>:
   11db8:	f800283a 	ret

00011dbc <__call_exitprocs>:
   11dbc:	00800074 	movhi	r2,1
   11dc0:	10910d04 	addi	r2,r2,17460
   11dc4:	10800017 	ldw	r2,0(r2)
   11dc8:	defff304 	addi	sp,sp,-52
   11dcc:	df000b15 	stw	fp,44(sp)
   11dd0:	d8800115 	stw	r2,4(sp)
   11dd4:	00800034 	movhi	r2,0
   11dd8:	10800004 	addi	r2,r2,0
   11ddc:	1005003a 	cmpeq	r2,r2,zero
   11de0:	d8800215 	stw	r2,8(sp)
   11de4:	d8800117 	ldw	r2,4(sp)
   11de8:	dd400815 	stw	r21,32(sp)
   11dec:	dd000715 	stw	r20,28(sp)
   11df0:	10805204 	addi	r2,r2,328
   11df4:	dfc00c15 	stw	ra,48(sp)
   11df8:	ddc00a15 	stw	r23,40(sp)
   11dfc:	dd800915 	stw	r22,36(sp)
   11e00:	dcc00615 	stw	r19,24(sp)
   11e04:	dc800515 	stw	r18,20(sp)
   11e08:	dc400415 	stw	r17,16(sp)
   11e0c:	dc000315 	stw	r16,12(sp)
   11e10:	282b883a 	mov	r21,r5
   11e14:	2039883a 	mov	fp,r4
   11e18:	d8800015 	stw	r2,0(sp)
   11e1c:	2829003a 	cmpeq	r20,r5,zero
   11e20:	d8800117 	ldw	r2,4(sp)
   11e24:	14405217 	ldw	r17,328(r2)
   11e28:	88001026 	beq	r17,zero,11e6c <__call_exitprocs+0xb0>
   11e2c:	ddc00017 	ldw	r23,0(sp)
   11e30:	88800117 	ldw	r2,4(r17)
   11e34:	8c802204 	addi	r18,r17,136
   11e38:	143fffc4 	addi	r16,r2,-1
   11e3c:	80000916 	blt	r16,zero,11e64 <__call_exitprocs+0xa8>
   11e40:	05bfffc4 	movi	r22,-1
   11e44:	a000151e 	bne	r20,zero,11e9c <__call_exitprocs+0xe0>
   11e48:	8409883a 	add	r4,r16,r16
   11e4c:	2105883a 	add	r2,r4,r4
   11e50:	1485883a 	add	r2,r2,r18
   11e54:	10c02017 	ldw	r3,128(r2)
   11e58:	a8c01126 	beq	r21,r3,11ea0 <__call_exitprocs+0xe4>
   11e5c:	843fffc4 	addi	r16,r16,-1
   11e60:	85bff81e 	bne	r16,r22,11e44 <__call_exitprocs+0x88>
   11e64:	d8800217 	ldw	r2,8(sp)
   11e68:	10003126 	beq	r2,zero,11f30 <__call_exitprocs+0x174>
   11e6c:	dfc00c17 	ldw	ra,48(sp)
   11e70:	df000b17 	ldw	fp,44(sp)
   11e74:	ddc00a17 	ldw	r23,40(sp)
   11e78:	dd800917 	ldw	r22,36(sp)
   11e7c:	dd400817 	ldw	r21,32(sp)
   11e80:	dd000717 	ldw	r20,28(sp)
   11e84:	dcc00617 	ldw	r19,24(sp)
   11e88:	dc800517 	ldw	r18,20(sp)
   11e8c:	dc400417 	ldw	r17,16(sp)
   11e90:	dc000317 	ldw	r16,12(sp)
   11e94:	dec00d04 	addi	sp,sp,52
   11e98:	f800283a 	ret
   11e9c:	8409883a 	add	r4,r16,r16
   11ea0:	88c00117 	ldw	r3,4(r17)
   11ea4:	2105883a 	add	r2,r4,r4
   11ea8:	1445883a 	add	r2,r2,r17
   11eac:	18ffffc4 	addi	r3,r3,-1
   11eb0:	11800217 	ldw	r6,8(r2)
   11eb4:	1c001526 	beq	r3,r16,11f0c <__call_exitprocs+0x150>
   11eb8:	10000215 	stw	zero,8(r2)
   11ebc:	303fe726 	beq	r6,zero,11e5c <__call_exitprocs+0xa0>
   11ec0:	00c00044 	movi	r3,1
   11ec4:	1c06983a 	sll	r3,r3,r16
   11ec8:	90804017 	ldw	r2,256(r18)
   11ecc:	8cc00117 	ldw	r19,4(r17)
   11ed0:	1884703a 	and	r2,r3,r2
   11ed4:	10001426 	beq	r2,zero,11f28 <__call_exitprocs+0x16c>
   11ed8:	90804117 	ldw	r2,260(r18)
   11edc:	1884703a 	and	r2,r3,r2
   11ee0:	10000c1e 	bne	r2,zero,11f14 <__call_exitprocs+0x158>
   11ee4:	2105883a 	add	r2,r4,r4
   11ee8:	1485883a 	add	r2,r2,r18
   11eec:	11400017 	ldw	r5,0(r2)
   11ef0:	e009883a 	mov	r4,fp
   11ef4:	303ee83a 	callr	r6
   11ef8:	88800117 	ldw	r2,4(r17)
   11efc:	98bfc81e 	bne	r19,r2,11e20 <__call_exitprocs+0x64>
   11f00:	b8800017 	ldw	r2,0(r23)
   11f04:	147fd526 	beq	r2,r17,11e5c <__call_exitprocs+0xa0>
   11f08:	003fc506 	br	11e20 <__call_exitprocs+0x64>
   11f0c:	8c000115 	stw	r16,4(r17)
   11f10:	003fea06 	br	11ebc <__call_exitprocs+0x100>
   11f14:	2105883a 	add	r2,r4,r4
   11f18:	1485883a 	add	r2,r2,r18
   11f1c:	11000017 	ldw	r4,0(r2)
   11f20:	303ee83a 	callr	r6
   11f24:	003ff406 	br	11ef8 <__call_exitprocs+0x13c>
   11f28:	303ee83a 	callr	r6
   11f2c:	003ff206 	br	11ef8 <__call_exitprocs+0x13c>
   11f30:	88800117 	ldw	r2,4(r17)
   11f34:	1000081e 	bne	r2,zero,11f58 <__call_exitprocs+0x19c>
   11f38:	89000017 	ldw	r4,0(r17)
   11f3c:	20000726 	beq	r4,zero,11f5c <__call_exitprocs+0x1a0>
   11f40:	b9000015 	stw	r4,0(r23)
   11f44:	8809883a 	mov	r4,r17
   11f48:	00000000 	call	0 <__reset>
   11f4c:	bc400017 	ldw	r17,0(r23)
   11f50:	883fb71e 	bne	r17,zero,11e30 <__call_exitprocs+0x74>
   11f54:	003fc506 	br	11e6c <__call_exitprocs+0xb0>
   11f58:	89000017 	ldw	r4,0(r17)
   11f5c:	882f883a 	mov	r23,r17
   11f60:	2023883a 	mov	r17,r4
   11f64:	883fb21e 	bne	r17,zero,11e30 <__call_exitprocs+0x74>
   11f68:	003fc006 	br	11e6c <__call_exitprocs+0xb0>

00011f6c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11f6c:	20000226 	beq	r4,zero,11f78 <_exit+0xc>
    ALT_SIM_FAIL();
   11f70:	002af070 	cmpltui	zero,zero,43969
   11f74:	00000106 	br	11f7c <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   11f78:	002af0b0 	cmpltui	zero,zero,43970
   11f7c:	003fff06 	br	11f7c <_exit+0x10>
   11f80:	00000010 	cmplti	zero,zero,0
   11f84:	00000000 	call	0 <__reset>
   11f88:	00527a01 	jmpi	527a0 <_gp+0x36374>
   11f8c:	011f7c01 	jmpi	11f7c0 <_gp+0x103394>
   11f90:	001b0c0b 	ldhu	zero,27696(zero)
   11f94:	00000028 	cmpgeui	zero,zero,0
   11f98:	00000018 	cmpnei	zero,zero,0
   11f9c:	0000d204 	movi	zero,840
   11fa0:	000005dc 	xori	zero,zero,23
   11fa4:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
   11fa8:	92099170 	cmpltui	r8,r18,9797
   11fac:	95079308 	cmpgei	r20,r18,7756
   11fb0:	97049605 	stb	fp,4696(r18)
   11fb4:	90019f03 	ldbu	zero,1660(r18)
   11fb8:	9c06940a 	0x9c06940a
   11fbc:	00000002 	0x2
   11fc0:	00000028 	cmpgeui	zero,zero,0
   11fc4:	00000044 	movi	zero,1
   11fc8:	0000d7e0 	cmpeqi	zero,zero,863
   11fcc:	000005b0 	cmpltui	zero,zero,22
   11fd0:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
   11fd4:	92099168 	cmpgeui	r8,r18,9797
   11fd8:	95079308 	cmpgei	r20,r18,7756
   11fdc:	9c039705 	stb	r16,3676(r19)
   11fe0:	90019f02 	0x90019f02
   11fe4:	9606940a 	0x9606940a
   11fe8:	00000004 	movi	zero,0
   11fec:	00011db8 	rdprs	zero,zero,1142
