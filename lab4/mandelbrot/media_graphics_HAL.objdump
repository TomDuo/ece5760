
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000127d4 memsz 0x000127d4 flags r-x
    LOAD off    0x000137f4 vaddr 0x000127f4 paddr 0x00014424 align 2**12
         filesz 0x00001c30 memsz 0x00001c30 flags rw-
    LOAD off    0x00016054 vaddr 0x00016054 paddr 0x00016054 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e18  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000874  00011f80  00011f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c30  000127f4  00014424  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  00016054  00016054  00016054  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015424  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00015448  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b59  00000000  00000000  000164c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d7ef  00000000  00000000  00018019  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ae66  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ac7d  00000000  00000000  0005066e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ec8  00000000  00000000  0006b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a88  00000000  00000000  0006d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013d7f  00000000  00000000  00070c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000849bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c38  00000000  00000000  000849f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000890df  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000890e2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000890e7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000890e8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000890ec  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000890f0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000890f4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000890ff  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008910a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00089115  2**0
                  CONTENTS, READONLY
 27 .jdi          000082ef  00000000  00000000  00089120  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00011f80 l    d  .rodata	00000000 .rodata
000127f4 l    d  .rwdata	00000000 .rwdata
00016054 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001b0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000010c0 l     F .text	00000058 __sprint_r
00012296 l     O .rodata	00000010 blanks.3452
00012286 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
000122ae l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
000123d1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
000048a4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000062a0 l     F .text	00000058 std
000063ac l     F .text	00000008 __fp_lock
000063b4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000127f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
000143f0 l     O .rwdata	00000004 charset
00012578 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000126c0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00009764 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
00009c78 l     F .text	00000048 match
0001301c l     O .rwdata	00000014 fpi.1950
000126dc l     O .rodata	00000028 tinytens
00013008 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000c370 l     F .text	00000024 htinit
0000c3fc l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000cc64 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000de10 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000f038 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000f48c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014414 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000131d8 l     O .rwdata	00001060 JTAG_UART_0
00014238 l     O .rwdata	00000030 AV_Config
00014268 l     O .rwdata	0000002c Green_LEDs
00014294 l     O .rwdata	0000002c Pushbuttons
000142c0 l     O .rwdata	0000002c Red_LEDs
000142ec l     O .rwdata	0000002c Slider_Switches
00014318 l     O .rwdata	0000002c Serial_Port
00014344 l     O .rwdata	00000048 VGA_Char_Buffer
0001438c l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fec0 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000ff8c l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001045c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000113e4 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011d48 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000083c4 g     F .text	00000094 _mprec_log10
000084b0 g     F .text	00000088 __any_on
0000cef8 g     F .text	00000070 _isatty_r
00012698 g     O .rodata	00000028 __mprec_tinytens
0000f6f4 g     F .text	00000050 alt_main
00010a2c g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
000161b0 g     O .bss	00000100 alt_irq
0000cf68 g     F .text	00000078 _lseek_r
00014424 g       *ABS*	00000000 __flash_rwdata_start
0000e930 g     F .text	00000088 __eqdf2
000162b0 g       *ABS*	00000000 __alt_heap_start
00000fcc g     F .text	00000044 printf
00009a04 g     F .text	00000068 __sseek
00006308 g     F .text	000000a4 __sinit
00011bfc g     F .text	00000130 __swbuf_r
0001066c g     F .text	00000088 alt_up_char_buffer_string
00007248 g     F .text	00000084 _setlocale_r
00006408 g     F .text	00000068 __sfmoreglue
0000c020 g     F .text	0000001c ungetc
0000f748 g     F .text	00000004 __malloc_unlock
00010510 g     F .text	00000080 alt_up_rs232_read_fd
00009cc0 g     F .text	000014e4 _strtod_r
000106f4 g     F .text	00000058 alt_up_char_buffer_draw
00007e40 g     F .text	000000e0 memmove
000063f8 g     F .text	00000010 _cleanup
00008538 g     F .text	000000bc _Balloc
00011120 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
0000ea40 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00011214 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c2fc g     F .text	00000074 _fstat_r
0001606c g     O .bss	00000004 errno
00000930 g     F .text	00000038 __make_dp
00004668 g     F .text	00000024 __svfscanf
0000f184 g     F .text	0000002c __make_fp
00016074 g     O .bss	00000004 alt_argv
0001c3e0 g       *ABS*	00000000 _gp
000111ec g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00013058 g     O .rwdata	00000180 alt_fd_list
00011354 g     F .text	00000070 alt_find_dev
00007da0 g     F .text	000000a0 memcpy
0000ccb0 g     F .text	00000248 __hexnan
0001074c g     F .text	00000028 alt_up_char_buffer_clear
000063ec g     F .text	0000000c _cleanup_r
0000ec60 g     F .text	000000f8 __floatsidf
00011448 g     F .text	00000098 alt_io_redirect
0000eb50 g     F .text	00000088 __ltdf2
000104c4 g     F .text	0000004c alt_up_rs232_read_data
00007c3c g     F .text	00000040 mbrtowc
000117f8 g     F .text	00000008 altera_nios2_irq_init
0000468c g     F .text	00000068 _vfscanf_r
00008314 g     F .text	000000b0 __ratio
000111dc g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00010134 g     F .text	00000168 altera_avalon_jtag_uart_read
00001010 g     F .text	00000034 _printf_r
0000f174 g     F .text	00000008 __udivsi3
0000f514 g     F .text	00000084 isatty
000071f8 g     F .text	0000002c iswspace
000125a8 g     O .rodata	000000c8 __mprec_tens
00010bc0 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00007224 g     F .text	00000008 __locale_charset
0000d0f0 g     F .text	000000a4 __fixunsdfsi
00011928 g     F .text	0000003c alt_icache_flush
00016060 g     O .bss	00000004 __malloc_top_pad
0000ba94 g     F .text	00000024 strtoul
000143ec g     O .rwdata	00000004 __mb_cur_max
0000722c g     F .text	0000000c _localeconv_r
0000bab8 g     F .text	000002f0 _strtoull_r
00008c30 g     F .text	0000003c __i2b
00006bdc g     F .text	0000049c __sfvwrite_r
000097f0 g     F .text	00000070 _sbrk_r
000107e4 g     F .text	0000005c helper_plot_pixel
0000cfe0 g     F .text	00000078 _read_r
00012bf4 g     O .rwdata	0000000c __lc_ctype
0001440c g     O .rwdata	00000004 alt_max_fd
00010498 g     F .text	0000000c alt_up_rs232_check_parity
0000f1b0 g     F .text	00000138 __unpack_d
0000c1d8 g     F .text	00000110 _fclose_r
0000626c g     F .text	00000034 fflush
00016064 g     O .bss	00000004 __malloc_max_sbrked_mem
000114e0 g     F .text	000000bc alt_irq_register
000008dc g     F .text	00000054 __extendsfdf2
0000e2a0 g     F .text	00000074 __adddf3
0000dd20 g     F .text	00000078 __nesf2
000081f4 g     F .text	00000120 __b2d
00011048 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
0000d770 g     F .text	000005b0 __umoddi3
0000f65c g     F .text	00000098 lseek
000143e8 g     O .rwdata	00000004 _global_impure_ptr
00008fac g     F .text	000005f4 _realloc_r
000162b0 g       *ABS*	00000000 __bss_end
00010e04 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
0001174c g     F .text	000000ac alt_tick
000160b0 g     O .bss	00000100 __hexdig
0000d194 g     F .text	000005dc __udivdi3
00012670 g     O .rodata	00000028 __mprec_bigtens
00008e8c g     F .text	00000120 __s2b
0000eea4 g     F .text	00000194 __floatunsidf
00008114 g     F .text	00000060 __mcmp
000143e0 g     O .rwdata	00000004 __ctype_ptr
000063d4 g     F .text	00000018 __fp_lock_all
00011718 g     F .text	00000034 alt_alarm_stop
0000b528 g     F .text	00000024 strtol
0001607c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00013030 g     O .rwdata	00000028 alt_dev_null
00000b48 g     F .text	000000c8 __unpack_f
000112c8 g     F .text	0000001c alt_dcache_flush_all
00007fe0 g     F .text	00000070 __hi0bits
00010d34 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000ed58 g     F .text	000000d8 __fixdfsi
0000b2c8 g     F .text	0000001c strtod
00014424 g       *ABS*	00000000 __ram_rwdata_end
00014404 g     O .rwdata	00000008 alt_dev_list
0000fabc g     F .text	000000f4 write
00011b14 g     F .text	000000e8 _putc_r
00010840 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000dd98 g     F .text	00000078 __gtsf2
000127f4 g       *ABS*	00000000 __ram_rodata_end
0000f494 g     F .text	00000080 fstat
000105b8 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ebd8 g     F .text	00000088 __ledf2
00008d6c g     F .text	00000120 __pow5mult
00016054 g     O .bss	00000004 __nlocale_changed
0000f17c g     F .text	00000008 __umodsi3
00001044 g     F .text	00000034 _scanf_r
000162b0 g       *ABS*	00000000 end
000009e8 g     F .text	00000160 __pack_f
00010794 g     F .text	00000050 alt_up_char_buffer_init
0000ff14 g     F .text	00000078 altera_avalon_jtag_uart_init
00100000 g       *ABS*	00000000 __alt_stack_pointer
00010418 g     F .text	00000044 alt_avalon_timer_sc_init
00000968 g     F .text	00000080 __clzsi2
0001029c g     F .text	0000017c altera_avalon_jtag_uart_write
000062f8 g     F .text	00000004 __sfp_lock_acquire
00007cbc g     F .text	000000e4 memchr
00001118 g     F .text	00001eac ___vfprintf_internal_r
0000999c g     F .text	00000060 _sprintf_r
000068c8 g     F .text	00000314 _free_r
0000f74c g     F .text	000001dc alt_printf
00011d4c g     F .text	000001b0 __call_exitprocs
00016058 g     O .bss	00000004 __mlocale_changed
000143f8 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000004c _start
00016080 g     O .bss	00000004 _alt_tick_rate
0000b54c g     F .text	00000318 _strtoll_r
000088fc g     F .text	0000014c __lshift
00016084 g     O .bss	00000004 _alt_nticks
0000f950 g     F .text	000000f8 read
0000fbd0 g     F .text	00000220 alt_sys_init
00000844 g     F .text	00000098 __floatsisf
00010590 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00008a48 g     F .text	000001e8 __multiply
0000fe88 g     F .text	00000038 altera_avalon_jtag_uart_close
000127f4 g       *ABS*	00000000 __ram_rwdata_start
00011f80 g       *ABS*	00000000 __ram_rodata_start
00016088 g     O .bss	00000028 __malloc_current_mallinfo
000085f4 g     F .text	0000017c __d2b
0000fe60 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000b864 g     F .text	00000230 _strtoul_r
000118bc g     F .text	0000006c alt_get_fd
0000f2e8 g     F .text	000000c8 __fpcmp_parts_d
0000c168 g     F .text	00000070 _close_r
0001199c g     F .text	00000074 memcmp
0000fe10 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000162b0 g       *ABS*	00000000 __alt_stack_base
0000fdf0 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00004768 g     F .text	0000013c __swsetup_r
0000e6d8 g     F .text	00000258 __divdf3
00006470 g     F .text	000000f0 __sfp
00008458 g     F .text	00000058 __copybits
00012c00 g     O .rwdata	00000408 __malloc_av_
00006304 g     F .text	00000004 __sinit_lock_release
0000e314 g     F .text	000003c4 __muldf3
00009ae8 g     F .text	00000060 __sread
0000675c g     F .text	00000040 fread
00010628 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00011800 g     F .text	000000bc alt_find_file
000112e4 g     F .text	00000070 alt_dev_llist_insert
0000f744 g     F .text	00000004 __malloc_lock
0000fa6c g     F .text	00000050 sbrk
00006070 g     F .text	000001fc _fflush_r
0000c0b4 g     F .text	000000b4 _calloc_r
00016054 g       *ABS*	00000000 __bss_start
00007f20 g     F .text	00000098 memset
000001b4 g     F .text	00000618 main
00016078 g     O .bss	00000004 alt_envp
00016068 g     O .bss	00000004 __malloc_max_total_mem
000110fc g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00010774 g     F .text	00000020 alt_up_char_buffer_open_dev
0000fe38 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00011d2c g     F .text	0000001c __swbuf
000007cc g     F .text	00000078 __ltsf2
00006560 g     F .text	000001fc _fread_r
000099fc g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
0000c2e8 g     F .text	00000014 fclose
0000b2e4 g     F .text	00000244 _strtol_r
0000ee30 g     F .text	00000074 __truncdfsf2
00004abc g     F .text	000015b4 _dtoa_r
0000747c g     F .text	00000740 _malloc_r
00014410 g     O .rwdata	00000004 alt_errno
0000bda8 g     F .text	000000dc __submore
00007140 g     F .text	000000b8 _fwalk
00007c7c g     F .text	00000040 _mbtowc_r
00011a10 g     F .text	00000104 putc
0000f0b4 g     F .text	00000060 __divsi3
00012720 g     O .rodata	00000014 __thenan_df
0000679c g     F .text	0000012c _malloc_trim_r
00009b48 g     F .text	000000bc strcmp
00011f80 g       *ABS*	00000000 __flash_rodata_start
000104a4 g     F .text	00000020 alt_up_rs232_open_dev
0000e9b8 g     F .text	00000088 __nedf2
0000fbb0 g     F .text	00000020 alt_irq_init
0000fa48 g     F .text	00000024 alt_release_fd
00009928 g     F .text	00000074 sprintf
00012128 g     O .rodata	00000100 __clz_tab
0001605c g     O .bss	00000004 _PathLocale
0000b1a4 g     F .text	00000124 strtof
0000c03c g     F .text	00000078 _write_r
000072cc g     F .text	0000001c setlocale
00001078 g     F .text	00000048 scanf
00009920 g     F .text	00000008 nanf
000143e4 g     O .rwdata	00000004 _impure_ptr
00016070 g     O .bss	00000004 alt_argc
00007bbc g     F .text	00000080 _mbrtowc_r
000095a0 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00008174 g     F .text	00000080 __ulp
00009780 g     F .text	00000040 __isinfd
000063bc g     F .text	00000018 __fp_unlock_all
000143fc g     O .rwdata	00000008 alt_fs_list
00010644 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
000105a0 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007238 g     F .text	00000010 localeconv
0000c394 g     F .text	00000068 __hexdig_init
00014424 g       *ABS*	00000000 _edata
000162b0 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000046f4 g     F .text	00000074 vfscanf
000100c0 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00009a6c g     F .text	0000007c __swrite
000143f4 g     O .rwdata	00000004 __malloc_trim_threshold
00011964 g     F .text	00000038 exit
00007078 g     F .text	000000c8 _fwalk_reent
00008770 g     F .text	0000018c __mdiff
0000f114 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000062fc g     F .text	00000004 __sfp_lock_release
00009860 g     F .text	000000c0 __sccl
000122d0 g     O .rodata	00000101 _ctype_
00000c10 g     F .text	000000a8 __fpcmp_parts_f
00011efc g     F .text	00000014 _exit
000097c0 g     F .text	00000030 __isnand
00011234 g     F .text	00000094 alt_alarm_start
0000d058 g     F .text	00000098 __muldi3
000072e8 g     F .text	00000194 __smakebuf_r
00009c04 g     F .text	00000074 strlen
0001159c g     F .text	0000017c open
0000eac8 g     F .text	00000088 __gedf2
0000f928 g     F .text	00000028 alt_putchar
0000c4ac g     F .text	000007b8 __gethex
000113c4 g     F .text	00000020 alt_icache_flush_all
00014418 g     O .rwdata	00000004 alt_priority_mask
00002fc4 g     F .text	00000024 __vfprintf_internal
0000e220 g     F .text	00000080 __subdf3
00008050 g     F .text	000000c4 __lo0bits
00002fe8 g     F .text	00001680 __svfscanf_r
0001441c g     O .rwdata	00000008 alt_alarm_list
0000be84 g     F .text	0000019c _ungetc_r
0001065c g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000f3b0 g     F .text	000000dc close
0000f598 g     F .text	000000c4 alt_load
00000cb8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006300 g     F .text	00000004 __sinit_lock_acquire
00008c6c g     F .text	00000100 __multadd
00007fb8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84186c04 	addi	r16,r16,25008
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     168:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     16c:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     170:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
     174:	00bffd16 	blt	zero,r2,16c <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     178:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
     17c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     180:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     184:	d6b0f814 	ori	gp,gp,50144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     188:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     18c:	10981514 	ori	r2,r2,24660

    movhi r3, %hi(__bss_end)
     190:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     194:	18d8ac14 	ori	r3,r3,25264

    beq r2, r3, 1f
     198:	10c00326 	beq	r2,r3,1a8 <_start+0x40>

0:
    stw zero, (r2)
     19c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1a4:	10fffd36 	bltu	r2,r3,19c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1a8:	000f5980 	call	f598 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ac:	000f6f40 	call	f6f4 <alt_main>

000001b0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b0:	003fff06 	br	1b0 <alt_after_alt_main>

000001b4 <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     1b4:	defff604 	addi	sp,sp,-40
     1b8:	dfc00915 	stw	ra,36(sp)
     1bc:	df000815 	stw	fp,32(sp)
     1c0:	ddc00715 	stw	r23,28(sp)
     1c4:	dd800615 	stw	r22,24(sp)
     1c8:	dd400515 	stw	r21,20(sp)
     1cc:	dd000415 	stw	r20,16(sp)
     1d0:	dcc00315 	stw	r19,12(sp)
     1d4:	dc800215 	stw	r18,8(sp)
     1d8:	dc400115 	stw	r17,4(sp)
     1dc:	dc000015 	stw	r16,0(sp)
     1e0:	023ff6b4 	movhi	r8,65498
     1e4:	421ff304 	addi	r8,r8,32716
     1e8:	da37883a 	add	sp,sp,r8
	float yoff;
	float xscale = 0.005;
	float yscale = 0.005;
	
	//Good values for initial (centered) set
	xoff = -1.0*2.0*640.0*xscale/3.0;
     1ec:	008009b4 	movhi	r2,38
     1f0:	10a00004 	addi	r2,r2,-32768
     1f4:	d887883a 	add	r3,sp,r2
     1f8:	00b00274 	movhi	r2,49161
     1fc:	10a22204 	addi	r2,r2,-30584
     200:	18800015 	stw	r2,0(r3)
	yoff = -1.0*480.0*yscale/2.0;
     204:	008009b4 	movhi	r2,38
     208:	10a00104 	addi	r2,r2,-32764
     20c:	d887883a 	add	r3,sp,r2
     210:	00afe6b4 	movhi	r2,49050
     214:	10a66644 	addi	r2,r2,-26215
     218:	18800015 	stw	r2,0(r3)

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     21c:	01000074 	movhi	r4,1
     220:	2107e004 	addi	r4,r4,8064
     224:	00112140 	call	11214 <alt_up_pixel_buffer_dma_open_dev>
     228:	00c009b4 	movhi	r3,38
     22c:	18e00904 	addi	r3,r3,-32732
     230:	1ec7883a 	add	r3,r3,sp
     234:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     238:	1000041e 	bne	r2,zero,24c <main+0x98>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     23c:	01000074 	movhi	r4,1
     240:	2107e604 	addi	r4,r4,8088
     244:	000f74c0 	call	f74c <alt_printf>
     248:	00000306 	br	258 <main+0xa4>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     24c:	01000074 	movhi	r4,1
     250:	2107f204 	addi	r4,r4,8136
     254:	000f74c0 	call	f74c <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     258:	014009b4 	movhi	r5,38
     25c:	29600904 	addi	r5,r5,-32732
     260:	2ecb883a 	add	r5,r5,sp
     264:	29000017 	ldw	r4,0(r5)
     268:	000b883a 	mov	r5,zero
     26c:	00110480 	call	11048 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     270:	01000074 	movhi	r4,1
     274:	2107fd04 	addi	r4,r4,8180
     278:	00107740 	call	10774 <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     27c:	10014026 	beq	r2,zero,780 <main+0x5cc>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     280:	01000074 	movhi	r4,1
     284:	21080f04 	addi	r4,r4,8252
     288:	000f74c0 	call	f74c <alt_printf>
	//0 - Hold at Zero
	//1 - Reset to Zero
	//2 - Stop Incremeting and Hold
	//3 - Actively Incrementing
	
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
     28c:	00802034 	movhi	r2,128
     290:	10000035 	stwio	zero,0(r2)
     294:	00cee934 	movhi	r3,15268
     298:	18f5c284 	addi	r3,r3,-10486
     29c:	008009b4 	movhi	r2,38
     2a0:	10a00704 	addi	r2,r2,-32740
     2a4:	16c5883a 	add	r2,r2,sp
     2a8:	10c00015 	stw	r3,0(r2)
     2ac:	010009b4 	movhi	r4,38
     2b0:	21200604 	addi	r4,r4,-32744
     2b4:	26c9883a 	add	r4,r4,sp
     2b8:	20c00015 	stw	r3,0(r4)
     2bc:	008009b4 	movhi	r2,38
     2c0:	10a00004 	addi	r2,r2,-32768
     2c4:	d889883a 	add	r4,sp,r2
     2c8:	00c009b4 	movhi	r3,38
     2cc:	18e00b04 	addi	r3,r3,-32724
     2d0:	1ec7883a 	add	r3,r3,sp
     2d4:	19000015 	stw	r4,0(r3)
     2d8:	10800104 	addi	r2,r2,4
     2dc:	d887883a 	add	r3,sp,r2
     2e0:	014009b4 	movhi	r5,38
     2e4:	29600c04 	addi	r5,r5,-32720
     2e8:	2ecb883a 	add	r5,r5,sp
     2ec:	28c00015 	stw	r3,0(r5)
     2f0:	00001306 	br	340 <main+0x18c>
		scanf ("%f",&xoff);
		alt_printf ("What is the new Y Offset? ");
		scanf ("%f",&yoff);
		alt_printf ("Cool. Get ready for some crazy zooming action.\n");
		
		xscale = xscale/2;
     2f4:	008fc034 	movhi	r2,16128
     2f8:	010009b4 	movhi	r4,38
     2fc:	21200704 	addi	r4,r4,-32740
     300:	26c9883a 	add	r4,r4,sp
     304:	21000017 	ldw	r4,0(r4)
     308:	208bff32 	custom	252,r5,r4,r2
     30c:	010009b4 	movhi	r4,38
     310:	21200704 	addi	r4,r4,-32740
     314:	26c9883a 	add	r4,r4,sp
     318:	21400015 	stw	r5,0(r4)
		yscale = yscale/2;
     31c:	014009b4 	movhi	r5,38
     320:	29600604 	addi	r5,r5,-32744
     324:	2ecb883a 	add	r5,r5,sp
     328:	29400017 	ldw	r5,0(r5)
     32c:	2887ff32 	custom	252,r3,r5,r2
     330:	014009b4 	movhi	r5,38
     334:	29600604 	addi	r5,r5,-32744
     338:	2ecb883a 	add	r5,r5,sp
     33c:	28c00015 	stw	r3,0(r5)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);

	while(1)
	{
	
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 1);
     340:	00800044 	movi	r2,1
     344:	00c02034 	movhi	r3,128
     348:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 3);
     34c:	008000c4 	movi	r2,3
     350:	18800035 	stwio	r2,0(r3)
     354:	010009b4 	movhi	r4,38
     358:	21200804 	addi	r4,r4,-32736
     35c:	26c9883a 	add	r4,r4,sp
     360:	20000015 	stw	zero,0(r4)
     364:	0000e406 	br	6f8 <main+0x544>
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     368:	014009b4 	movhi	r5,38
     36c:	29600504 	addi	r5,r5,-32748
     370:	2ecb883a 	add	r5,r5,sp
     374:	28800017 	ldw	r2,0(r5)
     378:	014009b4 	movhi	r5,38
     37c:	29600304 	addi	r5,r5,-32756
     380:	2ecb883a 	add	r5,r5,sp
     384:	28800015 	stw	r2,0(r5)
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
     388:	00c009b4 	movhi	r3,38
     38c:	18e00b04 	addi	r3,r3,-32724
     390:	1ec7883a 	add	r3,r3,sp
     394:	18c00017 	ldw	r3,0(r3)
     398:	1c000017 	ldw	r16,0(r3)
     39c:	010009b4 	movhi	r4,38
     3a0:	21200a04 	addi	r4,r4,-32728
     3a4:	26c9883a 	add	r4,r4,sp
     3a8:	21000017 	ldw	r4,0(r4)
     3ac:	2421ff72 	custom	253,r16,r4,r16
     3b0:	14000015 	stw	r16,0(r2)
				zi[x][y] = (float)(y*yscale + yoff);
     3b4:	a809883a 	mov	r4,r21
     3b8:	00008440 	call	844 <__floatsisf>
     3bc:	00c009b4 	movhi	r3,38
     3c0:	18e00604 	addi	r3,r3,-32744
     3c4:	1ec7883a 	add	r3,r3,sp
     3c8:	18c00017 	ldw	r3,0(r3)
     3cc:	18b9ff32 	custom	252,fp,r3,r2
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     3d0:	010009b4 	movhi	r4,38
     3d4:	21200404 	addi	r4,r4,-32752
     3d8:	26c9883a 	add	r4,r4,sp
     3dc:	21400017 	ldw	r5,0(r4)
     3e0:	010009b4 	movhi	r4,38
     3e4:	21200204 	addi	r4,r4,-32760
     3e8:	26c9883a 	add	r4,r4,sp
     3ec:	21400015 	stw	r5,0(r4)
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
				zi[x][y] = (float)(y*yscale + yoff);
     3f0:	00c009b4 	movhi	r3,38
     3f4:	18e00c04 	addi	r3,r3,-32720
     3f8:	1ec7883a 	add	r3,r3,sp
     3fc:	18c00017 	ldw	r3,0(r3)
     400:	18800017 	ldw	r2,0(r3)
     404:	e085ff72 	custom	253,r2,fp,r2
     408:	28800015 	stw	r2,0(r5)
     40c:	1025883a 	mov	r18,r2
     410:	0029883a 	mov	r20,zero
     414:	008009b4 	movhi	r2,38
     418:	10a00004 	addi	r2,r2,-32768
     41c:	d8af883a 	add	r23,sp,r2
     420:	10800104 	addi	r2,r2,4
     424:	d8ad883a 	add	r22,sp,r2
				t = 0;
				while (t<50){
					float zr_xy = zr[x][y];
					float zi_xy = zi[x][y];
					float zr_n = zr_xy*zr_xy - zi_xy*zi_xy + (float)(x*xscale + xoff);
     428:	8407ff32 	custom	252,r3,r16,r16
     42c:	9485ff32 	custom	252,r2,r18,r18
     430:	1887ffb2 	custom	254,r3,r3,r2
     434:	b8800017 	ldw	r2,0(r23)
     438:	014009b4 	movhi	r5,38
     43c:	29600a04 	addi	r5,r5,-32728
     440:	2ecb883a 	add	r5,r5,sp
     444:	29400017 	ldw	r5,0(r5)
     448:	2885ff72 	custom	253,r2,r5,r2
     44c:	18a7ff72 	custom	253,r19,r3,r2
					float zi_n = 2.0*zr_xy*zi_xy + (float)(y*yscale + yoff);
     450:	8407ff72 	custom	253,r3,r16,r16
     454:	90c7ff32 	custom	252,r3,r18,r3
     458:	b0800017 	ldw	r2,0(r22)
     45c:	e085ff72 	custom	253,r2,fp,r2
     460:	18a3ff72 	custom	253,r17,r3,r2
					if (zr_n*zi_n < 4.0) {
     464:	9c49ff32 	custom	252,r4,r19,r17
     468:	01502034 	movhi	r5,16512
     46c:	00007cc0 	call	7cc <__ltsf2>
     470:	1000030e 	bge	r2,zero,480 <main+0x2cc>
						zi[x][y] = zi_n;
					}else{
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
						t = 50;
					}
					if (t == 49)
     474:	00800c44 	movi	r2,49
     478:	a0802d1e 	bne	r20,r2,530 <main+0x37c>
     47c:	00001606 	br	4d8 <main+0x324>
     480:	008009b4 	movhi	r2,38
     484:	10a00204 	addi	r2,r2,-32760
     488:	16c5883a 	add	r2,r2,sp
     48c:	10800017 	ldw	r2,0(r2)
     490:	14800015 	stw	r18,0(r2)
     494:	00c009b4 	movhi	r3,38
     498:	18e00304 	addi	r3,r3,-32756
     49c:	1ec7883a 	add	r3,r3,sp
     4a0:	18c00017 	ldw	r3,0(r3)
     4a4:	1c000015 	stw	r16,0(r3)
					if (zr_n*zi_n < 4.0) {
						
						zr[x][y] = zr_n;
						zi[x][y] = zi_n;
					}else{
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
     4a8:	014009b4 	movhi	r5,38
     4ac:	29600904 	addi	r5,r5,-32732
     4b0:	2ecb883a 	add	r5,r5,sp
     4b4:	29000017 	ldw	r4,0(r5)
     4b8:	a00b883a 	mov	r5,r20
     4bc:	008009b4 	movhi	r2,38
     4c0:	10a00804 	addi	r2,r2,-32736
     4c4:	16c5883a 	add	r2,r2,sp
     4c8:	11800017 	ldw	r6,0(r2)
     4cc:	a80f883a 	mov	r7,r21
     4d0:	00111200 	call	11120 <alt_up_pixel_buffer_dma_draw>
     4d4:	00002606 	br	570 <main+0x3bc>
     4d8:	00c009b4 	movhi	r3,38
     4dc:	18e00204 	addi	r3,r3,-32760
     4e0:	1ec7883a 	add	r3,r3,sp
     4e4:	18c00017 	ldw	r3,0(r3)
     4e8:	1c400015 	stw	r17,0(r3)
     4ec:	010009b4 	movhi	r4,38
     4f0:	21200304 	addi	r4,r4,-32756
     4f4:	26c9883a 	add	r4,r4,sp
     4f8:	21000017 	ldw	r4,0(r4)
     4fc:	24c00015 	stw	r19,0(r4)
						t = 50;
					}
					if (t == 49)
					{
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, 0, x, y);
     500:	014009b4 	movhi	r5,38
     504:	29600904 	addi	r5,r5,-32732
     508:	2ecb883a 	add	r5,r5,sp
     50c:	29000017 	ldw	r4,0(r5)
     510:	000b883a 	mov	r5,zero
     514:	008009b4 	movhi	r2,38
     518:	10a00804 	addi	r2,r2,-32736
     51c:	16c5883a 	add	r2,r2,sp
     520:	11800017 	ldw	r6,0(r2)
     524:	a80f883a 	mov	r7,r21
     528:	00111200 	call	11120 <alt_up_pixel_buffer_dma_draw>
     52c:	00001006 	br	570 <main+0x3bc>
					}
					t = t +1;
     530:	a5000044 	addi	r20,r20,1
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
				zi[x][y] = (float)(y*yscale + yoff);
				t = 0;
				while (t<50){
     534:	00800c84 	movi	r2,50
     538:	a0800326 	beq	r20,r2,548 <main+0x394>
     53c:	8825883a 	mov	r18,r17
     540:	9821883a 	mov	r16,r19
     544:	003fb806 	br	428 <main+0x274>
     548:	00c009b4 	movhi	r3,38
     54c:	18e00204 	addi	r3,r3,-32760
     550:	1ec7883a 	add	r3,r3,sp
     554:	18c00017 	ldw	r3,0(r3)
     558:	1c400015 	stw	r17,0(r3)
     55c:	010009b4 	movhi	r4,38
     560:	21200304 	addi	r4,r4,-32756
     564:	26c9883a 	add	r4,r4,sp
     568:	21000017 	ldw	r4,0(r4)
     56c:	24c00015 	stw	r19,0(r4)
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
     570:	00c00044 	movi	r3,1
     574:	a8eb883a 	add	r21,r21,r3
     578:	00800104 	movi	r2,4
     57c:	014009b4 	movhi	r5,38
     580:	29600504 	addi	r5,r5,-32748
     584:	2ecb883a 	add	r5,r5,sp
     588:	29400017 	ldw	r5,0(r5)
     58c:	2889883a 	add	r4,r5,r2
     590:	014009b4 	movhi	r5,38
     594:	29600504 	addi	r5,r5,-32748
     598:	2ecb883a 	add	r5,r5,sp
     59c:	29000015 	stw	r4,0(r5)
     5a0:	010009b4 	movhi	r4,38
     5a4:	21200404 	addi	r4,r4,-32752
     5a8:	26c9883a 	add	r4,r4,sp
     5ac:	21000017 	ldw	r4,0(r4)
     5b0:	208b883a 	add	r5,r4,r2
     5b4:	010009b4 	movhi	r4,38
     5b8:	21200404 	addi	r4,r4,-32752
     5bc:	26c9883a 	add	r4,r4,sp
     5c0:	21400015 	stw	r5,0(r4)
     5c4:	00807804 	movi	r2,480
     5c8:	a8bf671e 	bne	r21,r2,368 <main+0x1b4>
	
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
     5cc:	014009b4 	movhi	r5,38
     5d0:	29600804 	addi	r5,r5,-32736
     5d4:	2ecb883a 	add	r5,r5,sp
     5d8:	29400017 	ldw	r5,0(r5)
     5dc:	28c5883a 	add	r2,r5,r3
     5e0:	014009b4 	movhi	r5,38
     5e4:	29600804 	addi	r5,r5,-32736
     5e8:	2ecb883a 	add	r5,r5,sp
     5ec:	28800015 	stw	r2,0(r5)
     5f0:	0080a004 	movi	r2,640
     5f4:	28c00017 	ldw	r3,0(r5)
     5f8:	18803f1e 	bne	r3,r2,6f8 <main+0x544>
				}
				//
			}
		}
		
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 2);
     5fc:	00800084 	movi	r2,2
     600:	01002034 	movhi	r4,128
     604:	20800035 	stwio	r2,0(r4)
	
		//Permit user input for zooming.
		//We only allow zooming by a factor of two, so only neeed input is the center to zoom to.
		printf ("\nCurrent X Offset=%f\n",xoff);
     608:	014009b4 	movhi	r5,38
     60c:	29600b04 	addi	r5,r5,-32724
     610:	2ecb883a 	add	r5,r5,sp
     614:	29400017 	ldw	r5,0(r5)
     618:	29000017 	ldw	r4,0(r5)
     61c:	00008dc0 	call	8dc <__extendsfdf2>
     620:	01000074 	movhi	r4,1
     624:	21081704 	addi	r4,r4,8284
     628:	100b883a 	mov	r5,r2
     62c:	180d883a 	mov	r6,r3
     630:	0000fcc0 	call	fcc <printf>
		printf ("Current Y Offset=%f\n",yoff);
     634:	008009b4 	movhi	r2,38
     638:	10a00c04 	addi	r2,r2,-32720
     63c:	16c5883a 	add	r2,r2,sp
     640:	10800017 	ldw	r2,0(r2)
     644:	11000017 	ldw	r4,0(r2)
     648:	00008dc0 	call	8dc <__extendsfdf2>
     64c:	01000074 	movhi	r4,1
     650:	21081d04 	addi	r4,r4,8308
     654:	100b883a 	mov	r5,r2
     658:	180d883a 	mov	r6,r3
     65c:	0000fcc0 	call	fcc <printf>
		alt_printf ("To zoom by 2X, enter the new X and Y Offsets.\n");
     660:	01000074 	movhi	r4,1
     664:	21082304 	addi	r4,r4,8332
     668:	000f74c0 	call	f74c <alt_printf>
		//float x_center, y_center;
		alt_printf ("What is the new X Offset? ");
     66c:	01000074 	movhi	r4,1
     670:	21082f04 	addi	r4,r4,8380
     674:	000f74c0 	call	f74c <alt_printf>
		scanf ("%f",&xoff);
     678:	04000074 	movhi	r16,1
     67c:	84083604 	addi	r16,r16,8408
     680:	8009883a 	mov	r4,r16
     684:	00c009b4 	movhi	r3,38
     688:	18e00b04 	addi	r3,r3,-32724
     68c:	1ec7883a 	add	r3,r3,sp
     690:	19400017 	ldw	r5,0(r3)
     694:	00010780 	call	1078 <scanf>
		alt_printf ("What is the new Y Offset? ");
     698:	01000074 	movhi	r4,1
     69c:	21083704 	addi	r4,r4,8412
     6a0:	000f74c0 	call	f74c <alt_printf>
		scanf ("%f",&yoff);
     6a4:	8009883a 	mov	r4,r16
     6a8:	008009b4 	movhi	r2,38
     6ac:	10a00c04 	addi	r2,r2,-32720
     6b0:	16c5883a 	add	r2,r2,sp
     6b4:	11400017 	ldw	r5,0(r2)
     6b8:	00010780 	call	1078 <scanf>
		alt_printf ("Cool. Get ready for some crazy zooming action.\n");
     6bc:	01000074 	movhi	r4,1
     6c0:	21083e04 	addi	r4,r4,8440
     6c4:	000f74c0 	call	f74c <alt_printf>
		yscale = yscale/2;
		t=0;

		
		
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     6c8:	00c009b4 	movhi	r3,38
     6cc:	18e00904 	addi	r3,r3,-32732
     6d0:	1ec7883a 	add	r3,r3,sp
     6d4:	19000017 	ldw	r4,0(r3)
     6d8:	00111dc0 	call	111dc <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     6dc:	103f051e 	bne	r2,zero,2f4 <main+0x140>
				
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     6e0:	014009b4 	movhi	r5,38
     6e4:	29600904 	addi	r5,r5,-32732
     6e8:	2ecb883a 	add	r5,r5,sp
     6ec:	29000017 	ldw	r4,0(r5)
     6f0:	00110fc0 	call	110fc <alt_up_pixel_buffer_dma_swap_buffers>
     6f4:	003eff06 	br	2f4 <main+0x140>
		//int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
	
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				zr[x][y] = (float)(x*xscale + xoff);
     6f8:	008009b4 	movhi	r2,38
     6fc:	10a00804 	addi	r2,r2,-32736
     700:	16c5883a 	add	r2,r2,sp
     704:	11000017 	ldw	r4,0(r2)
     708:	00008440 	call	844 <__floatsisf>
     70c:	00c009b4 	movhi	r3,38
     710:	18e00704 	addi	r3,r3,-32740
     714:	1ec7883a 	add	r3,r3,sp
     718:	18c00017 	ldw	r3,0(r3)
     71c:	1889ff32 	custom	252,r4,r3,r2
     720:	00c009b4 	movhi	r3,38
     724:	18e00a04 	addi	r3,r3,-32728
     728:	1ec7883a 	add	r3,r3,sp
     72c:	19000015 	stw	r4,0(r3)
     730:	010009b4 	movhi	r4,38
     734:	21200804 	addi	r4,r4,-32736
     738:	26c9883a 	add	r4,r4,sp
     73c:	21000017 	ldw	r4,0(r4)
     740:	2081e024 	muli	r2,r4,1920
     744:	d887883a 	add	r3,sp,r2
     748:	014009b4 	movhi	r5,38
     74c:	29600504 	addi	r5,r5,-32748
     750:	2ecb883a 	add	r5,r5,sp
     754:	28c00015 	stw	r3,0(r5)
     758:	00c004f4 	movhi	r3,19
     75c:	18f00004 	addi	r3,r3,-16384
     760:	d8c7883a 	add	r3,sp,r3
     764:	188b883a 	add	r5,r3,r2
     768:	010009b4 	movhi	r4,38
     76c:	21200404 	addi	r4,r4,-32752
     770:	26c9883a 	add	r4,r4,sp
     774:	21400015 	stw	r5,0(r4)
     778:	002b883a 	mov	r21,zero
     77c:	003efa06 	br	368 <main+0x1b4>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     780:	01000074 	movhi	r4,1
     784:	21080304 	addi	r4,r4,8204
     788:	000f74c0 	call	f74c <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     78c:	00bfffc4 	movi	r2,-1
     790:	020009b4 	movhi	r8,38
     794:	42200d04 	addi	r8,r8,-32716
     798:	da37883a 	add	sp,sp,r8
     79c:	dfc00917 	ldw	ra,36(sp)
     7a0:	df000817 	ldw	fp,32(sp)
     7a4:	ddc00717 	ldw	r23,28(sp)
     7a8:	dd800617 	ldw	r22,24(sp)
     7ac:	dd400517 	ldw	r21,20(sp)
     7b0:	dd000417 	ldw	r20,16(sp)
     7b4:	dcc00317 	ldw	r19,12(sp)
     7b8:	dc800217 	ldw	r18,8(sp)
     7bc:	dc400117 	ldw	r17,4(sp)
     7c0:	dc000017 	ldw	r16,0(sp)
     7c4:	dec00a04 	addi	sp,sp,40
     7c8:	f800283a 	ret

000007cc <__ltsf2>:
     7cc:	defff304 	addi	sp,sp,-52
     7d0:	dc400b15 	stw	r17,44(sp)
     7d4:	dc400204 	addi	r17,sp,8
     7d8:	dc000a15 	stw	r16,40(sp)
     7dc:	d9000015 	stw	r4,0(sp)
     7e0:	d9400115 	stw	r5,4(sp)
     7e4:	d809883a 	mov	r4,sp
     7e8:	880b883a 	mov	r5,r17
     7ec:	dc000604 	addi	r16,sp,24
     7f0:	dfc00c15 	stw	ra,48(sp)
     7f4:	0000b480 	call	b48 <__unpack_f>
     7f8:	d9000104 	addi	r4,sp,4
     7fc:	800b883a 	mov	r5,r16
     800:	0000b480 	call	b48 <__unpack_f>
     804:	d8800217 	ldw	r2,8(sp)
     808:	00c00044 	movi	r3,1
     80c:	180d883a 	mov	r6,r3
     810:	1880062e 	bgeu	r3,r2,82c <__ltsf2+0x60>
     814:	d8800617 	ldw	r2,24(sp)
     818:	8809883a 	mov	r4,r17
     81c:	800b883a 	mov	r5,r16
     820:	1880022e 	bgeu	r3,r2,82c <__ltsf2+0x60>
     824:	0000c100 	call	c10 <__fpcmp_parts_f>
     828:	100d883a 	mov	r6,r2
     82c:	3005883a 	mov	r2,r6
     830:	dfc00c17 	ldw	ra,48(sp)
     834:	dc400b17 	ldw	r17,44(sp)
     838:	dc000a17 	ldw	r16,40(sp)
     83c:	dec00d04 	addi	sp,sp,52
     840:	f800283a 	ret

00000844 <__floatsisf>:
     844:	2006d7fa 	srli	r3,r4,31
     848:	defffa04 	addi	sp,sp,-24
     84c:	008000c4 	movi	r2,3
     850:	dfc00515 	stw	ra,20(sp)
     854:	dc000415 	stw	r16,16(sp)
     858:	d8800015 	stw	r2,0(sp)
     85c:	d8c00115 	stw	r3,4(sp)
     860:	2000081e 	bne	r4,zero,884 <__floatsisf+0x40>
     864:	00800084 	movi	r2,2
     868:	d8800015 	stw	r2,0(sp)
     86c:	d809883a 	mov	r4,sp
     870:	00009e80 	call	9e8 <__pack_f>
     874:	dfc00517 	ldw	ra,20(sp)
     878:	dc000417 	ldw	r16,16(sp)
     87c:	dec00604 	addi	sp,sp,24
     880:	f800283a 	ret
     884:	00800784 	movi	r2,30
     888:	1807003a 	cmpeq	r3,r3,zero
     88c:	d8800215 	stw	r2,8(sp)
     890:	18000e1e 	bne	r3,zero,8cc <__floatsisf+0x88>
     894:	00a00034 	movhi	r2,32768
     898:	20800e26 	beq	r4,r2,8d4 <__floatsisf+0x90>
     89c:	0121c83a 	sub	r16,zero,r4
     8a0:	8009883a 	mov	r4,r16
     8a4:	dc000315 	stw	r16,12(sp)
     8a8:	00009680 	call	968 <__clzsi2>
     8ac:	117fffc4 	addi	r5,r2,-1
     8b0:	017fee0e 	bge	zero,r5,86c <__floatsisf+0x28>
     8b4:	d8800217 	ldw	r2,8(sp)
     8b8:	8146983a 	sll	r3,r16,r5
     8bc:	1145c83a 	sub	r2,r2,r5
     8c0:	d8c00315 	stw	r3,12(sp)
     8c4:	d8800215 	stw	r2,8(sp)
     8c8:	003fe806 	br	86c <__floatsisf+0x28>
     8cc:	2021883a 	mov	r16,r4
     8d0:	003ff306 	br	8a0 <__floatsisf+0x5c>
     8d4:	00b3c034 	movhi	r2,52992
     8d8:	003fe606 	br	874 <__floatsisf+0x30>

000008dc <__extendsfdf2>:
     8dc:	defff904 	addi	sp,sp,-28
     8e0:	d9000115 	stw	r4,4(sp)
     8e4:	d9400204 	addi	r5,sp,8
     8e8:	d9000104 	addi	r4,sp,4
     8ec:	dfc00615 	stw	ra,24(sp)
     8f0:	0000b480 	call	b48 <__unpack_f>
     8f4:	d9c00517 	ldw	r7,20(sp)
     8f8:	0011883a 	mov	r8,zero
     8fc:	400697ba 	slli	r3,r8,30
     900:	3812d0ba 	srli	r9,r7,2
     904:	380497ba 	slli	r2,r7,30
     908:	d9000217 	ldw	r4,8(sp)
     90c:	d9400317 	ldw	r5,12(sp)
     910:	d9800417 	ldw	r6,16(sp)
     914:	48c6b03a 	or	r3,r9,r3
     918:	100f883a 	mov	r7,r2
     91c:	d8c00015 	stw	r3,0(sp)
     920:	00009300 	call	930 <__make_dp>
     924:	dfc00617 	ldw	ra,24(sp)
     928:	dec00704 	addi	sp,sp,28
     92c:	f800283a 	ret

00000930 <__make_dp>:
     930:	defff904 	addi	sp,sp,-28
     934:	d8c00717 	ldw	r3,28(sp)
     938:	d9000015 	stw	r4,0(sp)
     93c:	d809883a 	mov	r4,sp
     940:	dfc00515 	stw	ra,20(sp)
     944:	d9c00615 	stw	r7,24(sp)
     948:	d9400115 	stw	r5,4(sp)
     94c:	d9800215 	stw	r6,8(sp)
     950:	d8c00415 	stw	r3,16(sp)
     954:	d9c00315 	stw	r7,12(sp)
     958:	0000cb80 	call	cb8 <__pack_d>
     95c:	dfc00517 	ldw	ra,20(sp)
     960:	dec00704 	addi	sp,sp,28
     964:	f800283a 	ret

00000968 <__clzsi2>:
     968:	00bfffd4 	movui	r2,65535
     96c:	11000e36 	bltu	r2,r4,9a8 <__clzsi2+0x40>
     970:	00803fc4 	movi	r2,255
     974:	01400204 	movi	r5,8
     978:	0007883a 	mov	r3,zero
     97c:	11001036 	bltu	r2,r4,9c0 <__clzsi2+0x58>
     980:	000b883a 	mov	r5,zero
     984:	20c6d83a 	srl	r3,r4,r3
     988:	00800074 	movhi	r2,1
     98c:	10884a04 	addi	r2,r2,8488
     990:	1887883a 	add	r3,r3,r2
     994:	18800003 	ldbu	r2,0(r3)
     998:	00c00804 	movi	r3,32
     99c:	2885883a 	add	r2,r5,r2
     9a0:	1885c83a 	sub	r2,r3,r2
     9a4:	f800283a 	ret
     9a8:	01400404 	movi	r5,16
     9ac:	00804034 	movhi	r2,256
     9b0:	10bfffc4 	addi	r2,r2,-1
     9b4:	2807883a 	mov	r3,r5
     9b8:	113ff22e 	bgeu	r2,r4,984 <__clzsi2+0x1c>
     9bc:	01400604 	movi	r5,24
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6d83a 	srl	r3,r4,r3
     9c8:	00800074 	movhi	r2,1
     9cc:	10884a04 	addi	r2,r2,8488
     9d0:	1887883a 	add	r3,r3,r2
     9d4:	18800003 	ldbu	r2,0(r3)
     9d8:	00c00804 	movi	r3,32
     9dc:	2885883a 	add	r2,r5,r2
     9e0:	1885c83a 	sub	r2,r3,r2
     9e4:	f800283a 	ret

000009e8 <__pack_f>:
     9e8:	20c00017 	ldw	r3,0(r4)
     9ec:	01c00044 	movi	r7,1
     9f0:	21800317 	ldw	r6,12(r4)
     9f4:	21400117 	ldw	r5,4(r4)
     9f8:	38c02d2e 	bgeu	r7,r3,ab0 <__pack_f+0xc8>
     9fc:	00800104 	movi	r2,4
     a00:	18802826 	beq	r3,r2,aa4 <__pack_f+0xbc>
     a04:	00800084 	movi	r2,2
     a08:	18800126 	beq	r3,r2,a10 <__pack_f+0x28>
     a0c:	3000101e 	bne	r6,zero,a50 <__pack_f+0x68>
     a10:	000d883a 	mov	r6,zero
     a14:	0007883a 	mov	r3,zero
     a18:	19003fcc 	andi	r4,r3,255
     a1c:	200895fa 	slli	r4,r4,23
     a20:	00c02034 	movhi	r3,128
     a24:	18ffffc4 	addi	r3,r3,-1
     a28:	30c6703a 	and	r3,r6,r3
     a2c:	10a0002c 	andhi	r2,r2,32768
     a30:	10c4b03a 	or	r2,r2,r3
     a34:	280a97fa 	slli	r5,r5,31
     a38:	1104b03a 	or	r2,r2,r4
     a3c:	00e00034 	movhi	r3,32768
     a40:	18ffffc4 	addi	r3,r3,-1
     a44:	10c4703a 	and	r2,r2,r3
     a48:	1144b03a 	or	r2,r2,r5
     a4c:	f800283a 	ret
     a50:	21000217 	ldw	r4,8(r4)
     a54:	00bfe084 	movi	r2,-126
     a58:	20801b16 	blt	r4,r2,ac8 <__pack_f+0xe0>
     a5c:	00801fc4 	movi	r2,127
     a60:	11001016 	blt	r2,r4,aa4 <__pack_f+0xbc>
     a64:	308e703a 	and	r7,r6,r2
     a68:	2087883a 	add	r3,r4,r2
     a6c:	00801004 	movi	r2,64
     a70:	38800526 	beq	r7,r2,a88 <__pack_f+0xa0>
     a74:	31800fc4 	addi	r6,r6,63
     a78:	30000716 	blt	r6,zero,a98 <__pack_f+0xb0>
     a7c:	300490ba 	slli	r2,r6,2
     a80:	100cd27a 	srli	r6,r2,9
     a84:	003fe406 	br	a18 <__pack_f+0x30>
     a88:	3080200c 	andi	r2,r6,128
     a8c:	103ffa26 	beq	r2,zero,a78 <__pack_f+0x90>
     a90:	31cd883a 	add	r6,r6,r7
     a94:	003ff806 	br	a78 <__pack_f+0x90>
     a98:	300cd07a 	srli	r6,r6,1
     a9c:	18c00044 	addi	r3,r3,1
     aa0:	003ff606 	br	a7c <__pack_f+0x94>
     aa4:	000d883a 	mov	r6,zero
     aa8:	00ffffc4 	movi	r3,-1
     aac:	003fda06 	br	a18 <__pack_f+0x30>
     ab0:	31800434 	orhi	r6,r6,16
     ab4:	00802034 	movhi	r2,128
     ab8:	10bfffc4 	addi	r2,r2,-1
     abc:	308c703a 	and	r6,r6,r2
     ac0:	00ffffc4 	movi	r3,-1
     ac4:	003fd406 	br	a18 <__pack_f+0x30>
     ac8:	1109c83a 	sub	r4,r2,r4
     acc:	00800644 	movi	r2,25
     ad0:	11001216 	blt	r2,r4,b1c <__pack_f+0x134>
     ad4:	3904983a 	sll	r2,r7,r4
     ad8:	3106d83a 	srl	r3,r6,r4
     adc:	10bfffc4 	addi	r2,r2,-1
     ae0:	3084703a 	and	r2,r6,r2
     ae4:	1004c03a 	cmpne	r2,r2,zero
     ae8:	1886b03a 	or	r3,r3,r2
     aec:	19001fcc 	andi	r4,r3,127
     af0:	00801004 	movi	r2,64
     af4:	20800c26 	beq	r4,r2,b28 <__pack_f+0x140>
     af8:	18c00fc4 	addi	r3,r3,63
     afc:	00900034 	movhi	r2,16384
     b00:	10bfffc4 	addi	r2,r2,-1
     b04:	180cd1fa 	srli	r6,r3,7
     b08:	10c7803a 	cmpltu	r3,r2,r3
     b0c:	00802034 	movhi	r2,128
     b10:	10bfffc4 	addi	r2,r2,-1
     b14:	308c703a 	and	r6,r6,r2
     b18:	003fbf06 	br	a18 <__pack_f+0x30>
     b1c:	0007883a 	mov	r3,zero
     b20:	000d883a 	mov	r6,zero
     b24:	003ff906 	br	b0c <__pack_f+0x124>
     b28:	1880200c 	andi	r2,r3,128
     b2c:	10000126 	beq	r2,zero,b34 <__pack_f+0x14c>
     b30:	1907883a 	add	r3,r3,r4
     b34:	180cd1fa 	srli	r6,r3,7
     b38:	00900034 	movhi	r2,16384
     b3c:	10bfffc4 	addi	r2,r2,-1
     b40:	10c7803a 	cmpltu	r3,r2,r3
     b44:	003ff106 	br	b0c <__pack_f+0x124>

00000b48 <__unpack_f>:
     b48:	21800017 	ldw	r6,0(r4)
     b4c:	00c02034 	movhi	r3,128
     b50:	18ffffc4 	addi	r3,r3,-1
     b54:	3004d5fa 	srli	r2,r6,23
     b58:	3008d7fa 	srli	r4,r6,31
     b5c:	30ce703a 	and	r7,r6,r3
     b60:	10c03fcc 	andi	r3,r2,255
     b64:	29000115 	stw	r4,4(r5)
     b68:	1800131e 	bne	r3,zero,bb8 <__unpack_f+0x70>
     b6c:	38000f26 	beq	r7,zero,bac <__unpack_f+0x64>
     b70:	380691fa 	slli	r3,r7,7
     b74:	01bfe084 	movi	r6,-126
     b78:	008000c4 	movi	r2,3
     b7c:	01100034 	movhi	r4,16384
     b80:	213fffc4 	addi	r4,r4,-1
     b84:	28800015 	stw	r2,0(r5)
     b88:	29800215 	stw	r6,8(r5)
     b8c:	20c00536 	bltu	r4,r3,ba4 <__unpack_f+0x5c>
     b90:	3005883a 	mov	r2,r6
     b94:	18c7883a 	add	r3,r3,r3
     b98:	10bfffc4 	addi	r2,r2,-1
     b9c:	20fffd2e 	bgeu	r4,r3,b94 <__unpack_f+0x4c>
     ba0:	28800215 	stw	r2,8(r5)
     ba4:	28c00315 	stw	r3,12(r5)
     ba8:	f800283a 	ret
     bac:	00800084 	movi	r2,2
     bb0:	28800015 	stw	r2,0(r5)
     bb4:	f800283a 	ret
     bb8:	00803fc4 	movi	r2,255
     bbc:	18800826 	beq	r3,r2,be0 <__unpack_f+0x98>
     bc0:	380491fa 	slli	r2,r7,7
     bc4:	18ffe044 	addi	r3,r3,-127
     bc8:	28c00215 	stw	r3,8(r5)
     bcc:	10900034 	orhi	r2,r2,16384
     bd0:	28800315 	stw	r2,12(r5)
     bd4:	008000c4 	movi	r2,3
     bd8:	28800015 	stw	r2,0(r5)
     bdc:	f800283a 	ret
     be0:	3800031e 	bne	r7,zero,bf0 <__unpack_f+0xa8>
     be4:	00800104 	movi	r2,4
     be8:	28800015 	stw	r2,0(r5)
     bec:	f800283a 	ret
     bf0:	3080042c 	andhi	r2,r6,16
     bf4:	10000426 	beq	r2,zero,c08 <__unpack_f+0xc0>
     bf8:	00800044 	movi	r2,1
     bfc:	28800015 	stw	r2,0(r5)
     c00:	29c00315 	stw	r7,12(r5)
     c04:	f800283a 	ret
     c08:	28000015 	stw	zero,0(r5)
     c0c:	003ffc06 	br	c00 <__unpack_f+0xb8>

00000c10 <__fpcmp_parts_f>:
     c10:	21800017 	ldw	r6,0(r4)
     c14:	00c00044 	movi	r3,1
     c18:	19800a2e 	bgeu	r3,r6,c44 <__fpcmp_parts_f+0x34>
     c1c:	28800017 	ldw	r2,0(r5)
     c20:	1880082e 	bgeu	r3,r2,c44 <__fpcmp_parts_f+0x34>
     c24:	00c00104 	movi	r3,4
     c28:	30c01e26 	beq	r6,r3,ca4 <__fpcmp_parts_f+0x94>
     c2c:	10c01a26 	beq	r2,r3,c98 <__fpcmp_parts_f+0x88>
     c30:	00c00084 	movi	r3,2
     c34:	30c00526 	beq	r6,r3,c4c <__fpcmp_parts_f+0x3c>
     c38:	10c0071e 	bne	r2,r3,c58 <__fpcmp_parts_f+0x48>
     c3c:	20800117 	ldw	r2,4(r4)
     c40:	1000091e 	bne	r2,zero,c68 <__fpcmp_parts_f+0x58>
     c44:	00800044 	movi	r2,1
     c48:	f800283a 	ret
     c4c:	10c0121e 	bne	r2,r3,c98 <__fpcmp_parts_f+0x88>
     c50:	0005883a 	mov	r2,zero
     c54:	f800283a 	ret
     c58:	20c00117 	ldw	r3,4(r4)
     c5c:	28800117 	ldw	r2,4(r5)
     c60:	18800326 	beq	r3,r2,c70 <__fpcmp_parts_f+0x60>
     c64:	183ff726 	beq	r3,zero,c44 <__fpcmp_parts_f+0x34>
     c68:	00bfffc4 	movi	r2,-1
     c6c:	f800283a 	ret
     c70:	21800217 	ldw	r6,8(r4)
     c74:	28800217 	ldw	r2,8(r5)
     c78:	11bffa16 	blt	r2,r6,c64 <__fpcmp_parts_f+0x54>
     c7c:	30800416 	blt	r6,r2,c90 <__fpcmp_parts_f+0x80>
     c80:	21000317 	ldw	r4,12(r4)
     c84:	29400317 	ldw	r5,12(r5)
     c88:	293ff636 	bltu	r5,r4,c64 <__fpcmp_parts_f+0x54>
     c8c:	217ff02e 	bgeu	r4,r5,c50 <__fpcmp_parts_f+0x40>
     c90:	183fec1e 	bne	r3,zero,c44 <__fpcmp_parts_f+0x34>
     c94:	003ff406 	br	c68 <__fpcmp_parts_f+0x58>
     c98:	28800117 	ldw	r2,4(r5)
     c9c:	103fe91e 	bne	r2,zero,c44 <__fpcmp_parts_f+0x34>
     ca0:	003ff106 	br	c68 <__fpcmp_parts_f+0x58>
     ca4:	11bfe51e 	bne	r2,r6,c3c <__fpcmp_parts_f+0x2c>
     ca8:	28c00117 	ldw	r3,4(r5)
     cac:	20800117 	ldw	r2,4(r4)
     cb0:	1885c83a 	sub	r2,r3,r2
     cb4:	f800283a 	ret

00000cb8 <__pack_d>:
     cb8:	20c00017 	ldw	r3,0(r4)
     cbc:	defffd04 	addi	sp,sp,-12
     cc0:	dc000015 	stw	r16,0(sp)
     cc4:	dc800215 	stw	r18,8(sp)
     cc8:	dc400115 	stw	r17,4(sp)
     ccc:	00800044 	movi	r2,1
     cd0:	22000317 	ldw	r8,12(r4)
     cd4:	001f883a 	mov	r15,zero
     cd8:	22400417 	ldw	r9,16(r4)
     cdc:	24000117 	ldw	r16,4(r4)
     ce0:	10c0552e 	bgeu	r2,r3,e38 <__pack_d+0x180>
     ce4:	00800104 	movi	r2,4
     ce8:	18804f26 	beq	r3,r2,e28 <__pack_d+0x170>
     cec:	00800084 	movi	r2,2
     cf0:	18800226 	beq	r3,r2,cfc <__pack_d+0x44>
     cf4:	4244b03a 	or	r2,r8,r9
     cf8:	10001a1e 	bne	r2,zero,d64 <__pack_d+0xac>
     cfc:	000d883a 	mov	r6,zero
     d00:	000f883a 	mov	r7,zero
     d04:	0011883a 	mov	r8,zero
     d08:	00800434 	movhi	r2,16
     d0c:	10bfffc4 	addi	r2,r2,-1
     d10:	301d883a 	mov	r14,r6
     d14:	3884703a 	and	r2,r7,r2
     d18:	400a953a 	slli	r5,r8,20
     d1c:	79bffc2c 	andhi	r6,r15,65520
     d20:	308cb03a 	or	r6,r6,r2
     d24:	00e00434 	movhi	r3,32784
     d28:	18ffffc4 	addi	r3,r3,-1
     d2c:	800497fa 	slli	r2,r16,31
     d30:	30c6703a 	and	r3,r6,r3
     d34:	1946b03a 	or	r3,r3,r5
     d38:	01600034 	movhi	r5,32768
     d3c:	297fffc4 	addi	r5,r5,-1
     d40:	194a703a 	and	r5,r3,r5
     d44:	288ab03a 	or	r5,r5,r2
     d48:	2807883a 	mov	r3,r5
     d4c:	7005883a 	mov	r2,r14
     d50:	dc800217 	ldw	r18,8(sp)
     d54:	dc400117 	ldw	r17,4(sp)
     d58:	dc000017 	ldw	r16,0(sp)
     d5c:	dec00304 	addi	sp,sp,12
     d60:	f800283a 	ret
     d64:	21000217 	ldw	r4,8(r4)
     d68:	00bf0084 	movi	r2,-1022
     d6c:	20803f16 	blt	r4,r2,e6c <__pack_d+0x1b4>
     d70:	0080ffc4 	movi	r2,1023
     d74:	11002c16 	blt	r2,r4,e28 <__pack_d+0x170>
     d78:	00803fc4 	movi	r2,255
     d7c:	408c703a 	and	r6,r8,r2
     d80:	00802004 	movi	r2,128
     d84:	0007883a 	mov	r3,zero
     d88:	000f883a 	mov	r7,zero
     d8c:	2280ffc4 	addi	r10,r4,1023
     d90:	30801e26 	beq	r6,r2,e0c <__pack_d+0x154>
     d94:	00801fc4 	movi	r2,127
     d98:	4089883a 	add	r4,r8,r2
     d9c:	220d803a 	cmpltu	r6,r4,r8
     da0:	324d883a 	add	r6,r6,r9
     da4:	2011883a 	mov	r8,r4
     da8:	3013883a 	mov	r9,r6
     dac:	00880034 	movhi	r2,8192
     db0:	10bfffc4 	addi	r2,r2,-1
     db4:	12400d36 	bltu	r2,r9,dec <__pack_d+0x134>
     db8:	4804963a 	slli	r2,r9,24
     dbc:	400cd23a 	srli	r6,r8,8
     dc0:	480ed23a 	srli	r7,r9,8
     dc4:	013fffc4 	movi	r4,-1
     dc8:	118cb03a 	or	r6,r2,r6
     dcc:	01400434 	movhi	r5,16
     dd0:	297fffc4 	addi	r5,r5,-1
     dd4:	3104703a 	and	r2,r6,r4
     dd8:	3946703a 	and	r3,r7,r5
     ddc:	5201ffcc 	andi	r8,r10,2047
     de0:	100d883a 	mov	r6,r2
     de4:	180f883a 	mov	r7,r3
     de8:	003fc706 	br	d08 <__pack_d+0x50>
     dec:	480897fa 	slli	r4,r9,31
     df0:	4004d07a 	srli	r2,r8,1
     df4:	4806d07a 	srli	r3,r9,1
     df8:	52800044 	addi	r10,r10,1
     dfc:	2084b03a 	or	r2,r4,r2
     e00:	1011883a 	mov	r8,r2
     e04:	1813883a 	mov	r9,r3
     e08:	003feb06 	br	db8 <__pack_d+0x100>
     e0c:	383fe11e 	bne	r7,zero,d94 <__pack_d+0xdc>
     e10:	01004004 	movi	r4,256
     e14:	4104703a 	and	r2,r8,r4
     e18:	10c4b03a 	or	r2,r2,r3
     e1c:	103fe326 	beq	r2,zero,dac <__pack_d+0xf4>
     e20:	3005883a 	mov	r2,r6
     e24:	003fdc06 	br	d98 <__pack_d+0xe0>
     e28:	000d883a 	mov	r6,zero
     e2c:	000f883a 	mov	r7,zero
     e30:	0201ffc4 	movi	r8,2047
     e34:	003fb406 	br	d08 <__pack_d+0x50>
     e38:	0005883a 	mov	r2,zero
     e3c:	00c00234 	movhi	r3,8
     e40:	408cb03a 	or	r6,r8,r2
     e44:	48ceb03a 	or	r7,r9,r3
     e48:	013fffc4 	movi	r4,-1
     e4c:	01400434 	movhi	r5,16
     e50:	297fffc4 	addi	r5,r5,-1
     e54:	3104703a 	and	r2,r6,r4
     e58:	3946703a 	and	r3,r7,r5
     e5c:	100d883a 	mov	r6,r2
     e60:	180f883a 	mov	r7,r3
     e64:	0201ffc4 	movi	r8,2047
     e68:	003fa706 	br	d08 <__pack_d+0x50>
     e6c:	1109c83a 	sub	r4,r2,r4
     e70:	00800e04 	movi	r2,56
     e74:	11004316 	blt	r2,r4,f84 <__pack_d+0x2cc>
     e78:	21fff804 	addi	r7,r4,-32
     e7c:	38004516 	blt	r7,zero,f94 <__pack_d+0x2dc>
     e80:	49d8d83a 	srl	r12,r9,r7
     e84:	001b883a 	mov	r13,zero
     e88:	0023883a 	mov	r17,zero
     e8c:	01400044 	movi	r5,1
     e90:	0025883a 	mov	r18,zero
     e94:	38004716 	blt	r7,zero,fb4 <__pack_d+0x2fc>
     e98:	29d6983a 	sll	r11,r5,r7
     e9c:	0015883a 	mov	r10,zero
     ea0:	00bfffc4 	movi	r2,-1
     ea4:	5089883a 	add	r4,r10,r2
     ea8:	588b883a 	add	r5,r11,r2
     eac:	228d803a 	cmpltu	r6,r4,r10
     eb0:	314b883a 	add	r5,r6,r5
     eb4:	4104703a 	and	r2,r8,r4
     eb8:	4946703a 	and	r3,r9,r5
     ebc:	10c4b03a 	or	r2,r2,r3
     ec0:	10000226 	beq	r2,zero,ecc <__pack_d+0x214>
     ec4:	04400044 	movi	r17,1
     ec8:	0025883a 	mov	r18,zero
     ecc:	00803fc4 	movi	r2,255
     ed0:	644eb03a 	or	r7,r12,r17
     ed4:	3892703a 	and	r9,r7,r2
     ed8:	00802004 	movi	r2,128
     edc:	6c90b03a 	or	r8,r13,r18
     ee0:	0015883a 	mov	r10,zero
     ee4:	48801626 	beq	r9,r2,f40 <__pack_d+0x288>
     ee8:	01001fc4 	movi	r4,127
     eec:	3905883a 	add	r2,r7,r4
     ef0:	11cd803a 	cmpltu	r6,r2,r7
     ef4:	320d883a 	add	r6,r6,r8
     ef8:	100f883a 	mov	r7,r2
     efc:	00840034 	movhi	r2,4096
     f00:	10bfffc4 	addi	r2,r2,-1
     f04:	3011883a 	mov	r8,r6
     f08:	0007883a 	mov	r3,zero
     f0c:	11801b36 	bltu	r2,r6,f7c <__pack_d+0x2c4>
     f10:	4004963a 	slli	r2,r8,24
     f14:	3808d23a 	srli	r4,r7,8
     f18:	400ad23a 	srli	r5,r8,8
     f1c:	1813883a 	mov	r9,r3
     f20:	1108b03a 	or	r4,r2,r4
     f24:	00bfffc4 	movi	r2,-1
     f28:	00c00434 	movhi	r3,16
     f2c:	18ffffc4 	addi	r3,r3,-1
     f30:	208c703a 	and	r6,r4,r2
     f34:	28ce703a 	and	r7,r5,r3
     f38:	4a01ffcc 	andi	r8,r9,2047
     f3c:	003f7206 	br	d08 <__pack_d+0x50>
     f40:	503fe91e 	bne	r10,zero,ee8 <__pack_d+0x230>
     f44:	01004004 	movi	r4,256
     f48:	3904703a 	and	r2,r7,r4
     f4c:	0007883a 	mov	r3,zero
     f50:	10c4b03a 	or	r2,r2,r3
     f54:	10000626 	beq	r2,zero,f70 <__pack_d+0x2b8>
     f58:	3a45883a 	add	r2,r7,r9
     f5c:	11cd803a 	cmpltu	r6,r2,r7
     f60:	320d883a 	add	r6,r6,r8
     f64:	100f883a 	mov	r7,r2
     f68:	3011883a 	mov	r8,r6
     f6c:	0007883a 	mov	r3,zero
     f70:	00840034 	movhi	r2,4096
     f74:	10bfffc4 	addi	r2,r2,-1
     f78:	123fe52e 	bgeu	r2,r8,f10 <__pack_d+0x258>
     f7c:	00c00044 	movi	r3,1
     f80:	003fe306 	br	f10 <__pack_d+0x258>
     f84:	0009883a 	mov	r4,zero
     f88:	0013883a 	mov	r9,zero
     f8c:	000b883a 	mov	r5,zero
     f90:	003fe406 	br	f24 <__pack_d+0x26c>
     f94:	4a47883a 	add	r3,r9,r9
     f98:	008007c4 	movi	r2,31
     f9c:	1105c83a 	sub	r2,r2,r4
     fa0:	1886983a 	sll	r3,r3,r2
     fa4:	4118d83a 	srl	r12,r8,r4
     fa8:	491ad83a 	srl	r13,r9,r4
     fac:	1b18b03a 	or	r12,r3,r12
     fb0:	003fb506 	br	e88 <__pack_d+0x1d0>
     fb4:	2806d07a 	srli	r3,r5,1
     fb8:	008007c4 	movi	r2,31
     fbc:	1105c83a 	sub	r2,r2,r4
     fc0:	1896d83a 	srl	r11,r3,r2
     fc4:	2914983a 	sll	r10,r5,r4
     fc8:	003fb506 	br	ea0 <__pack_d+0x1e8>

00000fcc <printf>:
     fcc:	defffb04 	addi	sp,sp,-20
     fd0:	dfc00115 	stw	ra,4(sp)
     fd4:	d9400215 	stw	r5,8(sp)
     fd8:	d9800315 	stw	r6,12(sp)
     fdc:	d9c00415 	stw	r7,16(sp)
     fe0:	00800074 	movhi	r2,1
     fe4:	1090f904 	addi	r2,r2,17380
     fe8:	10c00017 	ldw	r3,0(r2)
     fec:	200b883a 	mov	r5,r4
     ff0:	d8800204 	addi	r2,sp,8
     ff4:	19000217 	ldw	r4,8(r3)
     ff8:	100d883a 	mov	r6,r2
     ffc:	d8800015 	stw	r2,0(sp)
    1000:	0002fc40 	call	2fc4 <__vfprintf_internal>
    1004:	dfc00117 	ldw	ra,4(sp)
    1008:	dec00504 	addi	sp,sp,20
    100c:	f800283a 	ret

00001010 <_printf_r>:
    1010:	defffc04 	addi	sp,sp,-16
    1014:	dfc00115 	stw	ra,4(sp)
    1018:	d9800215 	stw	r6,8(sp)
    101c:	d9c00315 	stw	r7,12(sp)
    1020:	280d883a 	mov	r6,r5
    1024:	21400217 	ldw	r5,8(r4)
    1028:	d8c00204 	addi	r3,sp,8
    102c:	180f883a 	mov	r7,r3
    1030:	d8c00015 	stw	r3,0(sp)
    1034:	00011180 	call	1118 <___vfprintf_internal_r>
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	dec00404 	addi	sp,sp,16
    1040:	f800283a 	ret

00001044 <_scanf_r>:
    1044:	defffc04 	addi	sp,sp,-16
    1048:	dfc00115 	stw	ra,4(sp)
    104c:	d9800215 	stw	r6,8(sp)
    1050:	d9c00315 	stw	r7,12(sp)
    1054:	280d883a 	mov	r6,r5
    1058:	21400117 	ldw	r5,4(r4)
    105c:	d8c00204 	addi	r3,sp,8
    1060:	180f883a 	mov	r7,r3
    1064:	d8c00015 	stw	r3,0(sp)
    1068:	0002fe80 	call	2fe8 <__svfscanf_r>
    106c:	dfc00117 	ldw	ra,4(sp)
    1070:	dec00404 	addi	sp,sp,16
    1074:	f800283a 	ret

00001078 <scanf>:
    1078:	defffb04 	addi	sp,sp,-20
    107c:	dfc00115 	stw	ra,4(sp)
    1080:	d9400215 	stw	r5,8(sp)
    1084:	d9800315 	stw	r6,12(sp)
    1088:	d9c00415 	stw	r7,16(sp)
    108c:	00800074 	movhi	r2,1
    1090:	1090f904 	addi	r2,r2,17380
    1094:	11400017 	ldw	r5,0(r2)
    1098:	200d883a 	mov	r6,r4
    109c:	d8800204 	addi	r2,sp,8
    10a0:	2809883a 	mov	r4,r5
    10a4:	29400117 	ldw	r5,4(r5)
    10a8:	100f883a 	mov	r7,r2
    10ac:	d8800015 	stw	r2,0(sp)
    10b0:	0002fe80 	call	2fe8 <__svfscanf_r>
    10b4:	dfc00117 	ldw	ra,4(sp)
    10b8:	dec00504 	addi	sp,sp,20
    10bc:	f800283a 	ret

000010c0 <__sprint_r>:
    10c0:	30800217 	ldw	r2,8(r6)
    10c4:	defffe04 	addi	sp,sp,-8
    10c8:	dc000015 	stw	r16,0(sp)
    10cc:	dfc00115 	stw	ra,4(sp)
    10d0:	3021883a 	mov	r16,r6
    10d4:	0007883a 	mov	r3,zero
    10d8:	1000061e 	bne	r2,zero,10f4 <__sprint_r+0x34>
    10dc:	1805883a 	mov	r2,r3
    10e0:	30000115 	stw	zero,4(r6)
    10e4:	dfc00117 	ldw	ra,4(sp)
    10e8:	dc000017 	ldw	r16,0(sp)
    10ec:	dec00204 	addi	sp,sp,8
    10f0:	f800283a 	ret
    10f4:	0006bdc0 	call	6bdc <__sfvwrite_r>
    10f8:	1007883a 	mov	r3,r2
    10fc:	1805883a 	mov	r2,r3
    1100:	80000115 	stw	zero,4(r16)
    1104:	80000215 	stw	zero,8(r16)
    1108:	dfc00117 	ldw	ra,4(sp)
    110c:	dc000017 	ldw	r16,0(sp)
    1110:	dec00204 	addi	sp,sp,8
    1114:	f800283a 	ret

00001118 <___vfprintf_internal_r>:
    1118:	defea404 	addi	sp,sp,-1392
    111c:	dd815815 	stw	r22,1376(sp)
    1120:	dc015215 	stw	r16,1352(sp)
    1124:	d9c15115 	stw	r7,1348(sp)
    1128:	dfc15b15 	stw	ra,1388(sp)
    112c:	df015a15 	stw	fp,1384(sp)
    1130:	ddc15915 	stw	r23,1380(sp)
    1134:	dd415715 	stw	r21,1372(sp)
    1138:	dd015615 	stw	r20,1368(sp)
    113c:	dcc15515 	stw	r19,1364(sp)
    1140:	dc815415 	stw	r18,1360(sp)
    1144:	dc415315 	stw	r17,1356(sp)
    1148:	282d883a 	mov	r22,r5
    114c:	3021883a 	mov	r16,r6
    1150:	d9014f15 	stw	r4,1340(sp)
    1154:	000722c0 	call	722c <_localeconv_r>
    1158:	10800017 	ldw	r2,0(r2)
    115c:	d9c15117 	ldw	r7,1348(sp)
    1160:	d8814915 	stw	r2,1316(sp)
    1164:	d8814f17 	ldw	r2,1340(sp)
    1168:	10000226 	beq	r2,zero,1174 <___vfprintf_internal_r+0x5c>
    116c:	10800e17 	ldw	r2,56(r2)
    1170:	10020d26 	beq	r2,zero,19a8 <___vfprintf_internal_r+0x890>
    1174:	b080030b 	ldhu	r2,12(r22)
    1178:	1080020c 	andi	r2,r2,8
    117c:	10020e26 	beq	r2,zero,19b8 <___vfprintf_internal_r+0x8a0>
    1180:	b0800417 	ldw	r2,16(r22)
    1184:	10020c26 	beq	r2,zero,19b8 <___vfprintf_internal_r+0x8a0>
    1188:	b200030b 	ldhu	r8,12(r22)
    118c:	00800284 	movi	r2,10
    1190:	40c0068c 	andi	r3,r8,26
    1194:	18802f1e 	bne	r3,r2,1254 <___vfprintf_internal_r+0x13c>
    1198:	b080038f 	ldh	r2,14(r22)
    119c:	10002d16 	blt	r2,zero,1254 <___vfprintf_internal_r+0x13c>
    11a0:	b240038b 	ldhu	r9,14(r22)
    11a4:	b2800717 	ldw	r10,28(r22)
    11a8:	b2c00917 	ldw	r11,36(r22)
    11ac:	d9014f17 	ldw	r4,1340(sp)
    11b0:	dc402904 	addi	r17,sp,164
    11b4:	d8804004 	addi	r2,sp,256
    11b8:	00c10004 	movi	r3,1024
    11bc:	423fff4c 	andi	r8,r8,65533
    11c0:	800d883a 	mov	r6,r16
    11c4:	880b883a 	mov	r5,r17
    11c8:	da002c0d 	sth	r8,176(sp)
    11cc:	da402c8d 	sth	r9,178(sp)
    11d0:	da803015 	stw	r10,192(sp)
    11d4:	dac03215 	stw	r11,200(sp)
    11d8:	d8802d15 	stw	r2,180(sp)
    11dc:	d8c02e15 	stw	r3,184(sp)
    11e0:	d8802915 	stw	r2,164(sp)
    11e4:	d8c02b15 	stw	r3,172(sp)
    11e8:	d8002f15 	stw	zero,188(sp)
    11ec:	00011180 	call	1118 <___vfprintf_internal_r>
    11f0:	d8814b15 	stw	r2,1324(sp)
    11f4:	10000416 	blt	r2,zero,1208 <___vfprintf_internal_r+0xf0>
    11f8:	d9014f17 	ldw	r4,1340(sp)
    11fc:	880b883a 	mov	r5,r17
    1200:	00060700 	call	6070 <_fflush_r>
    1204:	1002321e 	bne	r2,zero,1ad0 <___vfprintf_internal_r+0x9b8>
    1208:	d8802c0b 	ldhu	r2,176(sp)
    120c:	1080100c 	andi	r2,r2,64
    1210:	10000326 	beq	r2,zero,1220 <___vfprintf_internal_r+0x108>
    1214:	b080030b 	ldhu	r2,12(r22)
    1218:	10801014 	ori	r2,r2,64
    121c:	b080030d 	sth	r2,12(r22)
    1220:	d8814b17 	ldw	r2,1324(sp)
    1224:	dfc15b17 	ldw	ra,1388(sp)
    1228:	df015a17 	ldw	fp,1384(sp)
    122c:	ddc15917 	ldw	r23,1380(sp)
    1230:	dd815817 	ldw	r22,1376(sp)
    1234:	dd415717 	ldw	r21,1372(sp)
    1238:	dd015617 	ldw	r20,1368(sp)
    123c:	dcc15517 	ldw	r19,1364(sp)
    1240:	dc815417 	ldw	r18,1360(sp)
    1244:	dc415317 	ldw	r17,1356(sp)
    1248:	dc015217 	ldw	r16,1352(sp)
    124c:	dec15c04 	addi	sp,sp,1392
    1250:	f800283a 	ret
    1254:	0005883a 	mov	r2,zero
    1258:	0007883a 	mov	r3,zero
    125c:	dd401904 	addi	r21,sp,100
    1260:	d8814215 	stw	r2,1288(sp)
    1264:	802f883a 	mov	r23,r16
    1268:	d8c14315 	stw	r3,1292(sp)
    126c:	d8014b15 	stw	zero,1324(sp)
    1270:	d8014815 	stw	zero,1312(sp)
    1274:	d8014415 	stw	zero,1296(sp)
    1278:	d8014715 	stw	zero,1308(sp)
    127c:	dd400c15 	stw	r21,48(sp)
    1280:	d8000e15 	stw	zero,56(sp)
    1284:	d8000d15 	stw	zero,52(sp)
    1288:	b8800007 	ldb	r2,0(r23)
    128c:	10001926 	beq	r2,zero,12f4 <___vfprintf_internal_r+0x1dc>
    1290:	00c00944 	movi	r3,37
    1294:	10c01726 	beq	r2,r3,12f4 <___vfprintf_internal_r+0x1dc>
    1298:	b821883a 	mov	r16,r23
    129c:	00000106 	br	12a4 <___vfprintf_internal_r+0x18c>
    12a0:	10c00326 	beq	r2,r3,12b0 <___vfprintf_internal_r+0x198>
    12a4:	84000044 	addi	r16,r16,1
    12a8:	80800007 	ldb	r2,0(r16)
    12ac:	103ffc1e 	bne	r2,zero,12a0 <___vfprintf_internal_r+0x188>
    12b0:	85e7c83a 	sub	r19,r16,r23
    12b4:	98000e26 	beq	r19,zero,12f0 <___vfprintf_internal_r+0x1d8>
    12b8:	dc800e17 	ldw	r18,56(sp)
    12bc:	dc400d17 	ldw	r17,52(sp)
    12c0:	008001c4 	movi	r2,7
    12c4:	94e5883a 	add	r18,r18,r19
    12c8:	8c400044 	addi	r17,r17,1
    12cc:	adc00015 	stw	r23,0(r21)
    12d0:	dc800e15 	stw	r18,56(sp)
    12d4:	acc00115 	stw	r19,4(r21)
    12d8:	dc400d15 	stw	r17,52(sp)
    12dc:	14428b16 	blt	r2,r17,1d0c <___vfprintf_internal_r+0xbf4>
    12e0:	ad400204 	addi	r21,r21,8
    12e4:	d9014b17 	ldw	r4,1324(sp)
    12e8:	24c9883a 	add	r4,r4,r19
    12ec:	d9014b15 	stw	r4,1324(sp)
    12f0:	802f883a 	mov	r23,r16
    12f4:	b8800007 	ldb	r2,0(r23)
    12f8:	10013c26 	beq	r2,zero,17ec <___vfprintf_internal_r+0x6d4>
    12fc:	bdc00044 	addi	r23,r23,1
    1300:	d8000405 	stb	zero,16(sp)
    1304:	b8c00007 	ldb	r3,0(r23)
    1308:	04ffffc4 	movi	r19,-1
    130c:	d8014c15 	stw	zero,1328(sp)
    1310:	d8014a15 	stw	zero,1320(sp)
    1314:	d8c14d15 	stw	r3,1332(sp)
    1318:	bdc00044 	addi	r23,r23,1
    131c:	d9414d17 	ldw	r5,1332(sp)
    1320:	00801604 	movi	r2,88
    1324:	28fff804 	addi	r3,r5,-32
    1328:	10c06036 	bltu	r2,r3,14ac <___vfprintf_internal_r+0x394>
    132c:	18c5883a 	add	r2,r3,r3
    1330:	1085883a 	add	r2,r2,r2
    1334:	00c00034 	movhi	r3,0
    1338:	18c4d204 	addi	r3,r3,4936
    133c:	10c5883a 	add	r2,r2,r3
    1340:	11000017 	ldw	r4,0(r2)
    1344:	2000683a 	jmp	r4
    1348:	000022bc 	xorhi	zero,zero,138
    134c:	000014ac 	andhi	zero,zero,82
    1350:	000014ac 	andhi	zero,zero,82
    1354:	000022a8 	cmpgeui	zero,zero,138
    1358:	000014ac 	andhi	zero,zero,82
    135c:	000014ac 	andhi	zero,zero,82
    1360:	000014ac 	andhi	zero,zero,82
    1364:	000014ac 	andhi	zero,zero,82
    1368:	000014ac 	andhi	zero,zero,82
    136c:	000014ac 	andhi	zero,zero,82
    1370:	00002088 	cmpgei	zero,zero,130
    1374:	00002298 	cmpnei	zero,zero,138
    1378:	000014ac 	andhi	zero,zero,82
    137c:	000020a0 	cmpeqi	zero,zero,130
    1380:	00002334 	movhi	zero,140
    1384:	000014ac 	andhi	zero,zero,82
    1388:	00002320 	cmpeqi	zero,zero,140
    138c:	000022e8 	cmpgeui	zero,zero,139
    1390:	000022e8 	cmpgeui	zero,zero,139
    1394:	000022e8 	cmpgeui	zero,zero,139
    1398:	000022e8 	cmpgeui	zero,zero,139
    139c:	000022e8 	cmpgeui	zero,zero,139
    13a0:	000022e8 	cmpgeui	zero,zero,139
    13a4:	000022e8 	cmpgeui	zero,zero,139
    13a8:	000022e8 	cmpgeui	zero,zero,139
    13ac:	000022e8 	cmpgeui	zero,zero,139
    13b0:	000014ac 	andhi	zero,zero,82
    13b4:	000014ac 	andhi	zero,zero,82
    13b8:	000014ac 	andhi	zero,zero,82
    13bc:	000014ac 	andhi	zero,zero,82
    13c0:	000014ac 	andhi	zero,zero,82
    13c4:	000014ac 	andhi	zero,zero,82
    13c8:	000014ac 	andhi	zero,zero,82
    13cc:	000014ac 	andhi	zero,zero,82
    13d0:	000014ac 	andhi	zero,zero,82
    13d4:	000014ac 	andhi	zero,zero,82
    13d8:	00001b04 	movi	zero,108
    13dc:	00002170 	cmpltui	zero,zero,133
    13e0:	000014ac 	andhi	zero,zero,82
    13e4:	00002170 	cmpltui	zero,zero,133
    13e8:	000014ac 	andhi	zero,zero,82
    13ec:	000014ac 	andhi	zero,zero,82
    13f0:	000014ac 	andhi	zero,zero,82
    13f4:	000014ac 	andhi	zero,zero,82
    13f8:	000022d4 	movui	zero,139
    13fc:	000014ac 	andhi	zero,zero,82
    1400:	000014ac 	andhi	zero,zero,82
    1404:	00001bb8 	rdprs	zero,zero,110
    1408:	000014ac 	andhi	zero,zero,82
    140c:	000014ac 	andhi	zero,zero,82
    1410:	000014ac 	andhi	zero,zero,82
    1414:	000014ac 	andhi	zero,zero,82
    1418:	000014ac 	andhi	zero,zero,82
    141c:	00001c04 	movi	zero,112
    1420:	000014ac 	andhi	zero,zero,82
    1424:	000014ac 	andhi	zero,zero,82
    1428:	00002224 	muli	zero,zero,136
    142c:	000014ac 	andhi	zero,zero,82
    1430:	000014ac 	andhi	zero,zero,82
    1434:	000014ac 	andhi	zero,zero,82
    1438:	000014ac 	andhi	zero,zero,82
    143c:	000014ac 	andhi	zero,zero,82
    1440:	000014ac 	andhi	zero,zero,82
    1444:	000014ac 	andhi	zero,zero,82
    1448:	000014ac 	andhi	zero,zero,82
    144c:	000014ac 	andhi	zero,zero,82
    1450:	000014ac 	andhi	zero,zero,82
    1454:	000021f8 	rdprs	zero,zero,135
    1458:	00001b10 	cmplti	zero,zero,108
    145c:	00002170 	cmpltui	zero,zero,133
    1460:	00002170 	cmpltui	zero,zero,133
    1464:	00002170 	cmpltui	zero,zero,133
    1468:	0000215c 	xori	zero,zero,133
    146c:	00001b10 	cmplti	zero,zero,108
    1470:	000014ac 	andhi	zero,zero,82
    1474:	000014ac 	andhi	zero,zero,82
    1478:	000020e4 	muli	zero,zero,131
    147c:	000014ac 	andhi	zero,zero,82
    1480:	000020b4 	movhi	zero,130
    1484:	00001bc4 	movi	zero,111
    1488:	00002114 	movui	zero,132
    148c:	00002100 	call	210 <main+0x5c>
    1490:	000014ac 	andhi	zero,zero,82
    1494:	00002390 	cmplti	zero,zero,142
    1498:	000014ac 	andhi	zero,zero,82
    149c:	00001c10 	cmplti	zero,zero,112
    14a0:	000014ac 	andhi	zero,zero,82
    14a4:	000014ac 	andhi	zero,zero,82
    14a8:	00002288 	cmpgei	zero,zero,138
    14ac:	d9014d17 	ldw	r4,1332(sp)
    14b0:	2000ce26 	beq	r4,zero,17ec <___vfprintf_internal_r+0x6d4>
    14b4:	01400044 	movi	r5,1
    14b8:	d9800f04 	addi	r6,sp,60
    14bc:	d9c14015 	stw	r7,1280(sp)
    14c0:	d9414515 	stw	r5,1300(sp)
    14c4:	d9814115 	stw	r6,1284(sp)
    14c8:	280f883a 	mov	r7,r5
    14cc:	d9000f05 	stb	r4,60(sp)
    14d0:	d8000405 	stb	zero,16(sp)
    14d4:	d8014615 	stw	zero,1304(sp)
    14d8:	d8c14c17 	ldw	r3,1328(sp)
    14dc:	1880008c 	andi	r2,r3,2
    14e0:	1005003a 	cmpeq	r2,r2,zero
    14e4:	d8815015 	stw	r2,1344(sp)
    14e8:	1000031e 	bne	r2,zero,14f8 <___vfprintf_internal_r+0x3e0>
    14ec:	d9014517 	ldw	r4,1300(sp)
    14f0:	21000084 	addi	r4,r4,2
    14f4:	d9014515 	stw	r4,1300(sp)
    14f8:	d9414c17 	ldw	r5,1328(sp)
    14fc:	2940210c 	andi	r5,r5,132
    1500:	d9414e15 	stw	r5,1336(sp)
    1504:	28002d1e 	bne	r5,zero,15bc <___vfprintf_internal_r+0x4a4>
    1508:	d9814a17 	ldw	r6,1320(sp)
    150c:	d8814517 	ldw	r2,1300(sp)
    1510:	30a1c83a 	sub	r16,r6,r2
    1514:	0400290e 	bge	zero,r16,15bc <___vfprintf_internal_r+0x4a4>
    1518:	00800404 	movi	r2,16
    151c:	1404580e 	bge	r2,r16,2680 <___vfprintf_internal_r+0x1568>
    1520:	dc800e17 	ldw	r18,56(sp)
    1524:	dc400d17 	ldw	r17,52(sp)
    1528:	1027883a 	mov	r19,r2
    152c:	07000074 	movhi	fp,1
    1530:	e708a584 	addi	fp,fp,8854
    1534:	050001c4 	movi	r20,7
    1538:	00000306 	br	1548 <___vfprintf_internal_r+0x430>
    153c:	843ffc04 	addi	r16,r16,-16
    1540:	ad400204 	addi	r21,r21,8
    1544:	9c00130e 	bge	r19,r16,1594 <___vfprintf_internal_r+0x47c>
    1548:	94800404 	addi	r18,r18,16
    154c:	8c400044 	addi	r17,r17,1
    1550:	af000015 	stw	fp,0(r21)
    1554:	acc00115 	stw	r19,4(r21)
    1558:	dc800e15 	stw	r18,56(sp)
    155c:	dc400d15 	stw	r17,52(sp)
    1560:	a47ff60e 	bge	r20,r17,153c <___vfprintf_internal_r+0x424>
    1564:	d9014f17 	ldw	r4,1340(sp)
    1568:	b00b883a 	mov	r5,r22
    156c:	d9800c04 	addi	r6,sp,48
    1570:	d9c15115 	stw	r7,1348(sp)
    1574:	00010c00 	call	10c0 <__sprint_r>
    1578:	d9c15117 	ldw	r7,1348(sp)
    157c:	10009e1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1580:	843ffc04 	addi	r16,r16,-16
    1584:	dc800e17 	ldw	r18,56(sp)
    1588:	dc400d17 	ldw	r17,52(sp)
    158c:	dd401904 	addi	r21,sp,100
    1590:	9c3fed16 	blt	r19,r16,1548 <___vfprintf_internal_r+0x430>
    1594:	9425883a 	add	r18,r18,r16
    1598:	8c400044 	addi	r17,r17,1
    159c:	008001c4 	movi	r2,7
    15a0:	af000015 	stw	fp,0(r21)
    15a4:	ac000115 	stw	r16,4(r21)
    15a8:	dc800e15 	stw	r18,56(sp)
    15ac:	dc400d15 	stw	r17,52(sp)
    15b0:	1441f516 	blt	r2,r17,1d88 <___vfprintf_internal_r+0xc70>
    15b4:	ad400204 	addi	r21,r21,8
    15b8:	00000206 	br	15c4 <___vfprintf_internal_r+0x4ac>
    15bc:	dc800e17 	ldw	r18,56(sp)
    15c0:	dc400d17 	ldw	r17,52(sp)
    15c4:	d8800407 	ldb	r2,16(sp)
    15c8:	10000b26 	beq	r2,zero,15f8 <___vfprintf_internal_r+0x4e0>
    15cc:	00800044 	movi	r2,1
    15d0:	94800044 	addi	r18,r18,1
    15d4:	8c400044 	addi	r17,r17,1
    15d8:	a8800115 	stw	r2,4(r21)
    15dc:	d8c00404 	addi	r3,sp,16
    15e0:	008001c4 	movi	r2,7
    15e4:	a8c00015 	stw	r3,0(r21)
    15e8:	dc800e15 	stw	r18,56(sp)
    15ec:	dc400d15 	stw	r17,52(sp)
    15f0:	1441da16 	blt	r2,r17,1d5c <___vfprintf_internal_r+0xc44>
    15f4:	ad400204 	addi	r21,r21,8
    15f8:	d9015017 	ldw	r4,1344(sp)
    15fc:	20000b1e 	bne	r4,zero,162c <___vfprintf_internal_r+0x514>
    1600:	d8800444 	addi	r2,sp,17
    1604:	94800084 	addi	r18,r18,2
    1608:	8c400044 	addi	r17,r17,1
    160c:	a8800015 	stw	r2,0(r21)
    1610:	00c00084 	movi	r3,2
    1614:	008001c4 	movi	r2,7
    1618:	a8c00115 	stw	r3,4(r21)
    161c:	dc800e15 	stw	r18,56(sp)
    1620:	dc400d15 	stw	r17,52(sp)
    1624:	1441c216 	blt	r2,r17,1d30 <___vfprintf_internal_r+0xc18>
    1628:	ad400204 	addi	r21,r21,8
    162c:	d9414e17 	ldw	r5,1336(sp)
    1630:	00802004 	movi	r2,128
    1634:	2880b126 	beq	r5,r2,18fc <___vfprintf_internal_r+0x7e4>
    1638:	d8c14617 	ldw	r3,1304(sp)
    163c:	19e1c83a 	sub	r16,r3,r7
    1640:	0400260e 	bge	zero,r16,16dc <___vfprintf_internal_r+0x5c4>
    1644:	00800404 	movi	r2,16
    1648:	1403c90e 	bge	r2,r16,2570 <___vfprintf_internal_r+0x1458>
    164c:	1027883a 	mov	r19,r2
    1650:	07000074 	movhi	fp,1
    1654:	e708a184 	addi	fp,fp,8838
    1658:	050001c4 	movi	r20,7
    165c:	00000306 	br	166c <___vfprintf_internal_r+0x554>
    1660:	843ffc04 	addi	r16,r16,-16
    1664:	ad400204 	addi	r21,r21,8
    1668:	9c00130e 	bge	r19,r16,16b8 <___vfprintf_internal_r+0x5a0>
    166c:	94800404 	addi	r18,r18,16
    1670:	8c400044 	addi	r17,r17,1
    1674:	af000015 	stw	fp,0(r21)
    1678:	acc00115 	stw	r19,4(r21)
    167c:	dc800e15 	stw	r18,56(sp)
    1680:	dc400d15 	stw	r17,52(sp)
    1684:	a47ff60e 	bge	r20,r17,1660 <___vfprintf_internal_r+0x548>
    1688:	d9014f17 	ldw	r4,1340(sp)
    168c:	b00b883a 	mov	r5,r22
    1690:	d9800c04 	addi	r6,sp,48
    1694:	d9c15115 	stw	r7,1348(sp)
    1698:	00010c00 	call	10c0 <__sprint_r>
    169c:	d9c15117 	ldw	r7,1348(sp)
    16a0:	1000551e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    16a4:	843ffc04 	addi	r16,r16,-16
    16a8:	dc800e17 	ldw	r18,56(sp)
    16ac:	dc400d17 	ldw	r17,52(sp)
    16b0:	dd401904 	addi	r21,sp,100
    16b4:	9c3fed16 	blt	r19,r16,166c <___vfprintf_internal_r+0x554>
    16b8:	9425883a 	add	r18,r18,r16
    16bc:	8c400044 	addi	r17,r17,1
    16c0:	008001c4 	movi	r2,7
    16c4:	af000015 	stw	fp,0(r21)
    16c8:	ac000115 	stw	r16,4(r21)
    16cc:	dc800e15 	stw	r18,56(sp)
    16d0:	dc400d15 	stw	r17,52(sp)
    16d4:	14418216 	blt	r2,r17,1ce0 <___vfprintf_internal_r+0xbc8>
    16d8:	ad400204 	addi	r21,r21,8
    16dc:	d9014c17 	ldw	r4,1328(sp)
    16e0:	2080400c 	andi	r2,r4,256
    16e4:	10004a1e 	bne	r2,zero,1810 <___vfprintf_internal_r+0x6f8>
    16e8:	d9414117 	ldw	r5,1284(sp)
    16ec:	91e5883a 	add	r18,r18,r7
    16f0:	8c400044 	addi	r17,r17,1
    16f4:	008001c4 	movi	r2,7
    16f8:	a9400015 	stw	r5,0(r21)
    16fc:	a9c00115 	stw	r7,4(r21)
    1700:	dc800e15 	stw	r18,56(sp)
    1704:	dc400d15 	stw	r17,52(sp)
    1708:	14416716 	blt	r2,r17,1ca8 <___vfprintf_internal_r+0xb90>
    170c:	a8c00204 	addi	r3,r21,8
    1710:	d9814c17 	ldw	r6,1328(sp)
    1714:	3080010c 	andi	r2,r6,4
    1718:	10002826 	beq	r2,zero,17bc <___vfprintf_internal_r+0x6a4>
    171c:	d8814a17 	ldw	r2,1320(sp)
    1720:	d9014517 	ldw	r4,1300(sp)
    1724:	1121c83a 	sub	r16,r2,r4
    1728:	0400240e 	bge	zero,r16,17bc <___vfprintf_internal_r+0x6a4>
    172c:	00800404 	movi	r2,16
    1730:	14044f0e 	bge	r2,r16,2870 <___vfprintf_internal_r+0x1758>
    1734:	dc400d17 	ldw	r17,52(sp)
    1738:	1027883a 	mov	r19,r2
    173c:	07000074 	movhi	fp,1
    1740:	e708a584 	addi	fp,fp,8854
    1744:	050001c4 	movi	r20,7
    1748:	00000306 	br	1758 <___vfprintf_internal_r+0x640>
    174c:	843ffc04 	addi	r16,r16,-16
    1750:	18c00204 	addi	r3,r3,8
    1754:	9c00110e 	bge	r19,r16,179c <___vfprintf_internal_r+0x684>
    1758:	94800404 	addi	r18,r18,16
    175c:	8c400044 	addi	r17,r17,1
    1760:	1f000015 	stw	fp,0(r3)
    1764:	1cc00115 	stw	r19,4(r3)
    1768:	dc800e15 	stw	r18,56(sp)
    176c:	dc400d15 	stw	r17,52(sp)
    1770:	a47ff60e 	bge	r20,r17,174c <___vfprintf_internal_r+0x634>
    1774:	d9014f17 	ldw	r4,1340(sp)
    1778:	b00b883a 	mov	r5,r22
    177c:	d9800c04 	addi	r6,sp,48
    1780:	00010c00 	call	10c0 <__sprint_r>
    1784:	10001c1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1788:	843ffc04 	addi	r16,r16,-16
    178c:	dc800e17 	ldw	r18,56(sp)
    1790:	dc400d17 	ldw	r17,52(sp)
    1794:	d8c01904 	addi	r3,sp,100
    1798:	9c3fef16 	blt	r19,r16,1758 <___vfprintf_internal_r+0x640>
    179c:	9425883a 	add	r18,r18,r16
    17a0:	8c400044 	addi	r17,r17,1
    17a4:	008001c4 	movi	r2,7
    17a8:	1f000015 	stw	fp,0(r3)
    17ac:	1c000115 	stw	r16,4(r3)
    17b0:	dc800e15 	stw	r18,56(sp)
    17b4:	dc400d15 	stw	r17,52(sp)
    17b8:	1440cb16 	blt	r2,r17,1ae8 <___vfprintf_internal_r+0x9d0>
    17bc:	d8814a17 	ldw	r2,1320(sp)
    17c0:	d9414517 	ldw	r5,1300(sp)
    17c4:	1140010e 	bge	r2,r5,17cc <___vfprintf_internal_r+0x6b4>
    17c8:	2805883a 	mov	r2,r5
    17cc:	d9814b17 	ldw	r6,1324(sp)
    17d0:	308d883a 	add	r6,r6,r2
    17d4:	d9814b15 	stw	r6,1324(sp)
    17d8:	90013b1e 	bne	r18,zero,1cc8 <___vfprintf_internal_r+0xbb0>
    17dc:	d9c14017 	ldw	r7,1280(sp)
    17e0:	dd401904 	addi	r21,sp,100
    17e4:	d8000d15 	stw	zero,52(sp)
    17e8:	003ea706 	br	1288 <___vfprintf_internal_r+0x170>
    17ec:	d8800e17 	ldw	r2,56(sp)
    17f0:	10053f1e 	bne	r2,zero,2cf0 <___vfprintf_internal_r+0x1bd8>
    17f4:	d8000d15 	stw	zero,52(sp)
    17f8:	b080030b 	ldhu	r2,12(r22)
    17fc:	1080100c 	andi	r2,r2,64
    1800:	103e8726 	beq	r2,zero,1220 <___vfprintf_internal_r+0x108>
    1804:	00bfffc4 	movi	r2,-1
    1808:	d8814b15 	stw	r2,1324(sp)
    180c:	003e8406 	br	1220 <___vfprintf_internal_r+0x108>
    1810:	d9814d17 	ldw	r6,1332(sp)
    1814:	00801944 	movi	r2,101
    1818:	11806e16 	blt	r2,r6,19d4 <___vfprintf_internal_r+0x8bc>
    181c:	d9414717 	ldw	r5,1308(sp)
    1820:	00c00044 	movi	r3,1
    1824:	1943430e 	bge	r3,r5,2534 <___vfprintf_internal_r+0x141c>
    1828:	d8814117 	ldw	r2,1284(sp)
    182c:	94800044 	addi	r18,r18,1
    1830:	8c400044 	addi	r17,r17,1
    1834:	a8800015 	stw	r2,0(r21)
    1838:	008001c4 	movi	r2,7
    183c:	a8c00115 	stw	r3,4(r21)
    1840:	dc800e15 	stw	r18,56(sp)
    1844:	dc400d15 	stw	r17,52(sp)
    1848:	1441ca16 	blt	r2,r17,1f74 <___vfprintf_internal_r+0xe5c>
    184c:	a8c00204 	addi	r3,r21,8
    1850:	d9014917 	ldw	r4,1316(sp)
    1854:	00800044 	movi	r2,1
    1858:	94800044 	addi	r18,r18,1
    185c:	8c400044 	addi	r17,r17,1
    1860:	18800115 	stw	r2,4(r3)
    1864:	008001c4 	movi	r2,7
    1868:	19000015 	stw	r4,0(r3)
    186c:	dc800e15 	stw	r18,56(sp)
    1870:	dc400d15 	stw	r17,52(sp)
    1874:	1441b616 	blt	r2,r17,1f50 <___vfprintf_internal_r+0xe38>
    1878:	1cc00204 	addi	r19,r3,8
    187c:	d9014217 	ldw	r4,1288(sp)
    1880:	d9414317 	ldw	r5,1292(sp)
    1884:	000d883a 	mov	r6,zero
    1888:	000f883a 	mov	r7,zero
    188c:	000e9b80 	call	e9b8 <__nedf2>
    1890:	10017426 	beq	r2,zero,1e64 <___vfprintf_internal_r+0xd4c>
    1894:	d9414717 	ldw	r5,1308(sp)
    1898:	d9814117 	ldw	r6,1284(sp)
    189c:	8c400044 	addi	r17,r17,1
    18a0:	2c85883a 	add	r2,r5,r18
    18a4:	14bfffc4 	addi	r18,r2,-1
    18a8:	28bfffc4 	addi	r2,r5,-1
    18ac:	30c00044 	addi	r3,r6,1
    18b0:	98800115 	stw	r2,4(r19)
    18b4:	008001c4 	movi	r2,7
    18b8:	98c00015 	stw	r3,0(r19)
    18bc:	dc800e15 	stw	r18,56(sp)
    18c0:	dc400d15 	stw	r17,52(sp)
    18c4:	14418e16 	blt	r2,r17,1f00 <___vfprintf_internal_r+0xde8>
    18c8:	9cc00204 	addi	r19,r19,8
    18cc:	d9414817 	ldw	r5,1312(sp)
    18d0:	d8800804 	addi	r2,sp,32
    18d4:	8c400044 	addi	r17,r17,1
    18d8:	9165883a 	add	r18,r18,r5
    18dc:	98800015 	stw	r2,0(r19)
    18e0:	008001c4 	movi	r2,7
    18e4:	99400115 	stw	r5,4(r19)
    18e8:	dc800e15 	stw	r18,56(sp)
    18ec:	dc400d15 	stw	r17,52(sp)
    18f0:	1440ed16 	blt	r2,r17,1ca8 <___vfprintf_internal_r+0xb90>
    18f4:	98c00204 	addi	r3,r19,8
    18f8:	003f8506 	br	1710 <___vfprintf_internal_r+0x5f8>
    18fc:	d9814a17 	ldw	r6,1320(sp)
    1900:	d8814517 	ldw	r2,1300(sp)
    1904:	30a1c83a 	sub	r16,r6,r2
    1908:	043f4b0e 	bge	zero,r16,1638 <___vfprintf_internal_r+0x520>
    190c:	00800404 	movi	r2,16
    1910:	1404340e 	bge	r2,r16,29e4 <___vfprintf_internal_r+0x18cc>
    1914:	1027883a 	mov	r19,r2
    1918:	07000074 	movhi	fp,1
    191c:	e708a184 	addi	fp,fp,8838
    1920:	050001c4 	movi	r20,7
    1924:	00000306 	br	1934 <___vfprintf_internal_r+0x81c>
    1928:	843ffc04 	addi	r16,r16,-16
    192c:	ad400204 	addi	r21,r21,8
    1930:	9c00130e 	bge	r19,r16,1980 <___vfprintf_internal_r+0x868>
    1934:	94800404 	addi	r18,r18,16
    1938:	8c400044 	addi	r17,r17,1
    193c:	af000015 	stw	fp,0(r21)
    1940:	acc00115 	stw	r19,4(r21)
    1944:	dc800e15 	stw	r18,56(sp)
    1948:	dc400d15 	stw	r17,52(sp)
    194c:	a47ff60e 	bge	r20,r17,1928 <___vfprintf_internal_r+0x810>
    1950:	d9014f17 	ldw	r4,1340(sp)
    1954:	b00b883a 	mov	r5,r22
    1958:	d9800c04 	addi	r6,sp,48
    195c:	d9c15115 	stw	r7,1348(sp)
    1960:	00010c00 	call	10c0 <__sprint_r>
    1964:	d9c15117 	ldw	r7,1348(sp)
    1968:	103fa31e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    196c:	843ffc04 	addi	r16,r16,-16
    1970:	dc800e17 	ldw	r18,56(sp)
    1974:	dc400d17 	ldw	r17,52(sp)
    1978:	dd401904 	addi	r21,sp,100
    197c:	9c3fed16 	blt	r19,r16,1934 <___vfprintf_internal_r+0x81c>
    1980:	9425883a 	add	r18,r18,r16
    1984:	8c400044 	addi	r17,r17,1
    1988:	008001c4 	movi	r2,7
    198c:	af000015 	stw	fp,0(r21)
    1990:	ac000115 	stw	r16,4(r21)
    1994:	dc800e15 	stw	r18,56(sp)
    1998:	dc400d15 	stw	r17,52(sp)
    199c:	14416116 	blt	r2,r17,1f24 <___vfprintf_internal_r+0xe0c>
    19a0:	ad400204 	addi	r21,r21,8
    19a4:	003f2406 	br	1638 <___vfprintf_internal_r+0x520>
    19a8:	d9014f17 	ldw	r4,1340(sp)
    19ac:	00063080 	call	6308 <__sinit>
    19b0:	d9c15117 	ldw	r7,1348(sp)
    19b4:	003def06 	br	1174 <___vfprintf_internal_r+0x5c>
    19b8:	d9014f17 	ldw	r4,1340(sp)
    19bc:	b00b883a 	mov	r5,r22
    19c0:	d9c15115 	stw	r7,1348(sp)
    19c4:	00047680 	call	4768 <__swsetup_r>
    19c8:	d9c15117 	ldw	r7,1348(sp)
    19cc:	103dee26 	beq	r2,zero,1188 <___vfprintf_internal_r+0x70>
    19d0:	003f8c06 	br	1804 <___vfprintf_internal_r+0x6ec>
    19d4:	d9014217 	ldw	r4,1288(sp)
    19d8:	d9414317 	ldw	r5,1292(sp)
    19dc:	000d883a 	mov	r6,zero
    19e0:	000f883a 	mov	r7,zero
    19e4:	000e9300 	call	e930 <__eqdf2>
    19e8:	1000f21e 	bne	r2,zero,1db4 <___vfprintf_internal_r+0xc9c>
    19ec:	00800074 	movhi	r2,1
    19f0:	1088a104 	addi	r2,r2,8836
    19f4:	94800044 	addi	r18,r18,1
    19f8:	8c400044 	addi	r17,r17,1
    19fc:	a8800015 	stw	r2,0(r21)
    1a00:	00c00044 	movi	r3,1
    1a04:	008001c4 	movi	r2,7
    1a08:	a8c00115 	stw	r3,4(r21)
    1a0c:	dc800e15 	stw	r18,56(sp)
    1a10:	dc400d15 	stw	r17,52(sp)
    1a14:	1442fa16 	blt	r2,r17,2600 <___vfprintf_internal_r+0x14e8>
    1a18:	a8c00204 	addi	r3,r21,8
    1a1c:	d8800517 	ldw	r2,20(sp)
    1a20:	d9014717 	ldw	r4,1308(sp)
    1a24:	11015c0e 	bge	r2,r4,1f98 <___vfprintf_internal_r+0xe80>
    1a28:	dc400d17 	ldw	r17,52(sp)
    1a2c:	d9814917 	ldw	r6,1316(sp)
    1a30:	00800044 	movi	r2,1
    1a34:	94800044 	addi	r18,r18,1
    1a38:	8c400044 	addi	r17,r17,1
    1a3c:	18800115 	stw	r2,4(r3)
    1a40:	008001c4 	movi	r2,7
    1a44:	19800015 	stw	r6,0(r3)
    1a48:	dc800e15 	stw	r18,56(sp)
    1a4c:	dc400d15 	stw	r17,52(sp)
    1a50:	14431016 	blt	r2,r17,2694 <___vfprintf_internal_r+0x157c>
    1a54:	18c00204 	addi	r3,r3,8
    1a58:	d8814717 	ldw	r2,1308(sp)
    1a5c:	143fffc4 	addi	r16,r2,-1
    1a60:	043f2b0e 	bge	zero,r16,1710 <___vfprintf_internal_r+0x5f8>
    1a64:	00800404 	movi	r2,16
    1a68:	1402a20e 	bge	r2,r16,24f4 <___vfprintf_internal_r+0x13dc>
    1a6c:	dc400d17 	ldw	r17,52(sp)
    1a70:	1027883a 	mov	r19,r2
    1a74:	07000074 	movhi	fp,1
    1a78:	e708a184 	addi	fp,fp,8838
    1a7c:	050001c4 	movi	r20,7
    1a80:	00000306 	br	1a90 <___vfprintf_internal_r+0x978>
    1a84:	18c00204 	addi	r3,r3,8
    1a88:	843ffc04 	addi	r16,r16,-16
    1a8c:	9c029c0e 	bge	r19,r16,2500 <___vfprintf_internal_r+0x13e8>
    1a90:	94800404 	addi	r18,r18,16
    1a94:	8c400044 	addi	r17,r17,1
    1a98:	1f000015 	stw	fp,0(r3)
    1a9c:	1cc00115 	stw	r19,4(r3)
    1aa0:	dc800e15 	stw	r18,56(sp)
    1aa4:	dc400d15 	stw	r17,52(sp)
    1aa8:	a47ff60e 	bge	r20,r17,1a84 <___vfprintf_internal_r+0x96c>
    1aac:	d9014f17 	ldw	r4,1340(sp)
    1ab0:	b00b883a 	mov	r5,r22
    1ab4:	d9800c04 	addi	r6,sp,48
    1ab8:	00010c00 	call	10c0 <__sprint_r>
    1abc:	103f4e1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1ac0:	dc800e17 	ldw	r18,56(sp)
    1ac4:	dc400d17 	ldw	r17,52(sp)
    1ac8:	d8c01904 	addi	r3,sp,100
    1acc:	003fee06 	br	1a88 <___vfprintf_internal_r+0x970>
    1ad0:	d8802c0b 	ldhu	r2,176(sp)
    1ad4:	00ffffc4 	movi	r3,-1
    1ad8:	d8c14b15 	stw	r3,1324(sp)
    1adc:	1080100c 	andi	r2,r2,64
    1ae0:	103dcc1e 	bne	r2,zero,1214 <___vfprintf_internal_r+0xfc>
    1ae4:	003dce06 	br	1220 <___vfprintf_internal_r+0x108>
    1ae8:	d9014f17 	ldw	r4,1340(sp)
    1aec:	b00b883a 	mov	r5,r22
    1af0:	d9800c04 	addi	r6,sp,48
    1af4:	00010c00 	call	10c0 <__sprint_r>
    1af8:	103f3f1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1afc:	dc800e17 	ldw	r18,56(sp)
    1b00:	003f2e06 	br	17bc <___vfprintf_internal_r+0x6a4>
    1b04:	d9414c17 	ldw	r5,1328(sp)
    1b08:	29400414 	ori	r5,r5,16
    1b0c:	d9414c15 	stw	r5,1328(sp)
    1b10:	d9814c17 	ldw	r6,1328(sp)
    1b14:	3080080c 	andi	r2,r6,32
    1b18:	10014f1e 	bne	r2,zero,2058 <___vfprintf_internal_r+0xf40>
    1b1c:	d8c14c17 	ldw	r3,1328(sp)
    1b20:	1880040c 	andi	r2,r3,16
    1b24:	1002ea1e 	bne	r2,zero,26d0 <___vfprintf_internal_r+0x15b8>
    1b28:	d9014c17 	ldw	r4,1328(sp)
    1b2c:	2080100c 	andi	r2,r4,64
    1b30:	1002e726 	beq	r2,zero,26d0 <___vfprintf_internal_r+0x15b8>
    1b34:	3880000f 	ldh	r2,0(r7)
    1b38:	39c00104 	addi	r7,r7,4
    1b3c:	d9c14015 	stw	r7,1280(sp)
    1b40:	1023d7fa 	srai	r17,r2,31
    1b44:	1021883a 	mov	r16,r2
    1b48:	88037216 	blt	r17,zero,2914 <___vfprintf_internal_r+0x17fc>
    1b4c:	01000044 	movi	r4,1
    1b50:	98000416 	blt	r19,zero,1b64 <___vfprintf_internal_r+0xa4c>
    1b54:	d8c14c17 	ldw	r3,1328(sp)
    1b58:	00bfdfc4 	movi	r2,-129
    1b5c:	1886703a 	and	r3,r3,r2
    1b60:	d8c14c15 	stw	r3,1328(sp)
    1b64:	8444b03a 	or	r2,r16,r17
    1b68:	1002261e 	bne	r2,zero,2404 <___vfprintf_internal_r+0x12ec>
    1b6c:	9802251e 	bne	r19,zero,2404 <___vfprintf_internal_r+0x12ec>
    1b70:	20803fcc 	andi	r2,r4,255
    1b74:	10029b26 	beq	r2,zero,25e4 <___vfprintf_internal_r+0x14cc>
    1b78:	d8c01904 	addi	r3,sp,100
    1b7c:	dd000f04 	addi	r20,sp,60
    1b80:	d8c14115 	stw	r3,1284(sp)
    1b84:	d8c14117 	ldw	r3,1284(sp)
    1b88:	dcc14515 	stw	r19,1300(sp)
    1b8c:	a0c5c83a 	sub	r2,r20,r3
    1b90:	11c00a04 	addi	r7,r2,40
    1b94:	99c0010e 	bge	r19,r7,1b9c <___vfprintf_internal_r+0xa84>
    1b98:	d9c14515 	stw	r7,1300(sp)
    1b9c:	dcc14615 	stw	r19,1304(sp)
    1ba0:	d8800407 	ldb	r2,16(sp)
    1ba4:	103e4c26 	beq	r2,zero,14d8 <___vfprintf_internal_r+0x3c0>
    1ba8:	d8814517 	ldw	r2,1300(sp)
    1bac:	10800044 	addi	r2,r2,1
    1bb0:	d8814515 	stw	r2,1300(sp)
    1bb4:	003e4806 	br	14d8 <___vfprintf_internal_r+0x3c0>
    1bb8:	d9814c17 	ldw	r6,1328(sp)
    1bbc:	31800414 	ori	r6,r6,16
    1bc0:	d9814c15 	stw	r6,1328(sp)
    1bc4:	d8c14c17 	ldw	r3,1328(sp)
    1bc8:	1880080c 	andi	r2,r3,32
    1bcc:	1001271e 	bne	r2,zero,206c <___vfprintf_internal_r+0xf54>
    1bd0:	d9414c17 	ldw	r5,1328(sp)
    1bd4:	2880040c 	andi	r2,r5,16
    1bd8:	1002b61e 	bne	r2,zero,26b4 <___vfprintf_internal_r+0x159c>
    1bdc:	d9814c17 	ldw	r6,1328(sp)
    1be0:	3080100c 	andi	r2,r6,64
    1be4:	1002b326 	beq	r2,zero,26b4 <___vfprintf_internal_r+0x159c>
    1be8:	3c00000b 	ldhu	r16,0(r7)
    1bec:	0009883a 	mov	r4,zero
    1bf0:	39c00104 	addi	r7,r7,4
    1bf4:	0023883a 	mov	r17,zero
    1bf8:	d9c14015 	stw	r7,1280(sp)
    1bfc:	d8000405 	stb	zero,16(sp)
    1c00:	003fd306 	br	1b50 <___vfprintf_internal_r+0xa38>
    1c04:	d9014c17 	ldw	r4,1328(sp)
    1c08:	21000414 	ori	r4,r4,16
    1c0c:	d9014c15 	stw	r4,1328(sp)
    1c10:	d9414c17 	ldw	r5,1328(sp)
    1c14:	2880080c 	andi	r2,r5,32
    1c18:	1001081e 	bne	r2,zero,203c <___vfprintf_internal_r+0xf24>
    1c1c:	d8c14c17 	ldw	r3,1328(sp)
    1c20:	1880040c 	andi	r2,r3,16
    1c24:	1002b01e 	bne	r2,zero,26e8 <___vfprintf_internal_r+0x15d0>
    1c28:	d9014c17 	ldw	r4,1328(sp)
    1c2c:	2080100c 	andi	r2,r4,64
    1c30:	1002ad26 	beq	r2,zero,26e8 <___vfprintf_internal_r+0x15d0>
    1c34:	3c00000b 	ldhu	r16,0(r7)
    1c38:	01000044 	movi	r4,1
    1c3c:	39c00104 	addi	r7,r7,4
    1c40:	0023883a 	mov	r17,zero
    1c44:	d9c14015 	stw	r7,1280(sp)
    1c48:	d8000405 	stb	zero,16(sp)
    1c4c:	003fc006 	br	1b50 <___vfprintf_internal_r+0xa38>
    1c50:	d9014f17 	ldw	r4,1340(sp)
    1c54:	b00b883a 	mov	r5,r22
    1c58:	d9800c04 	addi	r6,sp,48
    1c5c:	00010c00 	call	10c0 <__sprint_r>
    1c60:	103ee51e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1c64:	dc800e17 	ldw	r18,56(sp)
    1c68:	d8c01904 	addi	r3,sp,100
    1c6c:	d9814c17 	ldw	r6,1328(sp)
    1c70:	3080004c 	andi	r2,r6,1
    1c74:	1005003a 	cmpeq	r2,r2,zero
    1c78:	103ea51e 	bne	r2,zero,1710 <___vfprintf_internal_r+0x5f8>
    1c7c:	00800044 	movi	r2,1
    1c80:	dc400d17 	ldw	r17,52(sp)
    1c84:	18800115 	stw	r2,4(r3)
    1c88:	d8814917 	ldw	r2,1316(sp)
    1c8c:	94800044 	addi	r18,r18,1
    1c90:	8c400044 	addi	r17,r17,1
    1c94:	18800015 	stw	r2,0(r3)
    1c98:	008001c4 	movi	r2,7
    1c9c:	dc800e15 	stw	r18,56(sp)
    1ca0:	dc400d15 	stw	r17,52(sp)
    1ca4:	14421e0e 	bge	r2,r17,2520 <___vfprintf_internal_r+0x1408>
    1ca8:	d9014f17 	ldw	r4,1340(sp)
    1cac:	b00b883a 	mov	r5,r22
    1cb0:	d9800c04 	addi	r6,sp,48
    1cb4:	00010c00 	call	10c0 <__sprint_r>
    1cb8:	103ecf1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1cbc:	dc800e17 	ldw	r18,56(sp)
    1cc0:	d8c01904 	addi	r3,sp,100
    1cc4:	003e9206 	br	1710 <___vfprintf_internal_r+0x5f8>
    1cc8:	d9014f17 	ldw	r4,1340(sp)
    1ccc:	b00b883a 	mov	r5,r22
    1cd0:	d9800c04 	addi	r6,sp,48
    1cd4:	00010c00 	call	10c0 <__sprint_r>
    1cd8:	103ec026 	beq	r2,zero,17dc <___vfprintf_internal_r+0x6c4>
    1cdc:	003ec606 	br	17f8 <___vfprintf_internal_r+0x6e0>
    1ce0:	d9014f17 	ldw	r4,1340(sp)
    1ce4:	b00b883a 	mov	r5,r22
    1ce8:	d9800c04 	addi	r6,sp,48
    1cec:	d9c15115 	stw	r7,1348(sp)
    1cf0:	00010c00 	call	10c0 <__sprint_r>
    1cf4:	d9c15117 	ldw	r7,1348(sp)
    1cf8:	103ebf1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1cfc:	dc800e17 	ldw	r18,56(sp)
    1d00:	dc400d17 	ldw	r17,52(sp)
    1d04:	dd401904 	addi	r21,sp,100
    1d08:	003e7406 	br	16dc <___vfprintf_internal_r+0x5c4>
    1d0c:	d9014f17 	ldw	r4,1340(sp)
    1d10:	b00b883a 	mov	r5,r22
    1d14:	d9800c04 	addi	r6,sp,48
    1d18:	d9c15115 	stw	r7,1348(sp)
    1d1c:	00010c00 	call	10c0 <__sprint_r>
    1d20:	d9c15117 	ldw	r7,1348(sp)
    1d24:	103eb41e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1d28:	dd401904 	addi	r21,sp,100
    1d2c:	003d6d06 	br	12e4 <___vfprintf_internal_r+0x1cc>
    1d30:	d9014f17 	ldw	r4,1340(sp)
    1d34:	b00b883a 	mov	r5,r22
    1d38:	d9800c04 	addi	r6,sp,48
    1d3c:	d9c15115 	stw	r7,1348(sp)
    1d40:	00010c00 	call	10c0 <__sprint_r>
    1d44:	d9c15117 	ldw	r7,1348(sp)
    1d48:	103eab1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1d4c:	dc800e17 	ldw	r18,56(sp)
    1d50:	dc400d17 	ldw	r17,52(sp)
    1d54:	dd401904 	addi	r21,sp,100
    1d58:	003e3406 	br	162c <___vfprintf_internal_r+0x514>
    1d5c:	d9014f17 	ldw	r4,1340(sp)
    1d60:	b00b883a 	mov	r5,r22
    1d64:	d9800c04 	addi	r6,sp,48
    1d68:	d9c15115 	stw	r7,1348(sp)
    1d6c:	00010c00 	call	10c0 <__sprint_r>
    1d70:	d9c15117 	ldw	r7,1348(sp)
    1d74:	103ea01e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1d78:	dc800e17 	ldw	r18,56(sp)
    1d7c:	dc400d17 	ldw	r17,52(sp)
    1d80:	dd401904 	addi	r21,sp,100
    1d84:	003e1c06 	br	15f8 <___vfprintf_internal_r+0x4e0>
    1d88:	d9014f17 	ldw	r4,1340(sp)
    1d8c:	b00b883a 	mov	r5,r22
    1d90:	d9800c04 	addi	r6,sp,48
    1d94:	d9c15115 	stw	r7,1348(sp)
    1d98:	00010c00 	call	10c0 <__sprint_r>
    1d9c:	d9c15117 	ldw	r7,1348(sp)
    1da0:	103e951e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1da4:	dc800e17 	ldw	r18,56(sp)
    1da8:	dc400d17 	ldw	r17,52(sp)
    1dac:	dd401904 	addi	r21,sp,100
    1db0:	003e0406 	br	15c4 <___vfprintf_internal_r+0x4ac>
    1db4:	d9000517 	ldw	r4,20(sp)
    1db8:	0102520e 	bge	zero,r4,2704 <___vfprintf_internal_r+0x15ec>
    1dbc:	d9814717 	ldw	r6,1308(sp)
    1dc0:	21807a16 	blt	r4,r6,1fac <___vfprintf_internal_r+0xe94>
    1dc4:	d8814117 	ldw	r2,1284(sp)
    1dc8:	91a5883a 	add	r18,r18,r6
    1dcc:	8c400044 	addi	r17,r17,1
    1dd0:	a8800015 	stw	r2,0(r21)
    1dd4:	008001c4 	movi	r2,7
    1dd8:	a9800115 	stw	r6,4(r21)
    1ddc:	dc800e15 	stw	r18,56(sp)
    1de0:	dc400d15 	stw	r17,52(sp)
    1de4:	1442f616 	blt	r2,r17,29c0 <___vfprintf_internal_r+0x18a8>
    1de8:	a8c00204 	addi	r3,r21,8
    1dec:	d9414717 	ldw	r5,1308(sp)
    1df0:	2161c83a 	sub	r16,r4,r5
    1df4:	043f9d0e 	bge	zero,r16,1c6c <___vfprintf_internal_r+0xb54>
    1df8:	00800404 	movi	r2,16
    1dfc:	1402130e 	bge	r2,r16,264c <___vfprintf_internal_r+0x1534>
    1e00:	dc400d17 	ldw	r17,52(sp)
    1e04:	1027883a 	mov	r19,r2
    1e08:	07000074 	movhi	fp,1
    1e0c:	e708a184 	addi	fp,fp,8838
    1e10:	050001c4 	movi	r20,7
    1e14:	00000306 	br	1e24 <___vfprintf_internal_r+0xd0c>
    1e18:	18c00204 	addi	r3,r3,8
    1e1c:	843ffc04 	addi	r16,r16,-16
    1e20:	9c020d0e 	bge	r19,r16,2658 <___vfprintf_internal_r+0x1540>
    1e24:	94800404 	addi	r18,r18,16
    1e28:	8c400044 	addi	r17,r17,1
    1e2c:	1f000015 	stw	fp,0(r3)
    1e30:	1cc00115 	stw	r19,4(r3)
    1e34:	dc800e15 	stw	r18,56(sp)
    1e38:	dc400d15 	stw	r17,52(sp)
    1e3c:	a47ff60e 	bge	r20,r17,1e18 <___vfprintf_internal_r+0xd00>
    1e40:	d9014f17 	ldw	r4,1340(sp)
    1e44:	b00b883a 	mov	r5,r22
    1e48:	d9800c04 	addi	r6,sp,48
    1e4c:	00010c00 	call	10c0 <__sprint_r>
    1e50:	103e691e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1e54:	dc800e17 	ldw	r18,56(sp)
    1e58:	dc400d17 	ldw	r17,52(sp)
    1e5c:	d8c01904 	addi	r3,sp,100
    1e60:	003fee06 	br	1e1c <___vfprintf_internal_r+0xd04>
    1e64:	d8814717 	ldw	r2,1308(sp)
    1e68:	143fffc4 	addi	r16,r2,-1
    1e6c:	043e970e 	bge	zero,r16,18cc <___vfprintf_internal_r+0x7b4>
    1e70:	00800404 	movi	r2,16
    1e74:	1400180e 	bge	r2,r16,1ed8 <___vfprintf_internal_r+0xdc0>
    1e78:	1029883a 	mov	r20,r2
    1e7c:	07000074 	movhi	fp,1
    1e80:	e708a184 	addi	fp,fp,8838
    1e84:	054001c4 	movi	r21,7
    1e88:	00000306 	br	1e98 <___vfprintf_internal_r+0xd80>
    1e8c:	9cc00204 	addi	r19,r19,8
    1e90:	843ffc04 	addi	r16,r16,-16
    1e94:	a400120e 	bge	r20,r16,1ee0 <___vfprintf_internal_r+0xdc8>
    1e98:	94800404 	addi	r18,r18,16
    1e9c:	8c400044 	addi	r17,r17,1
    1ea0:	9f000015 	stw	fp,0(r19)
    1ea4:	9d000115 	stw	r20,4(r19)
    1ea8:	dc800e15 	stw	r18,56(sp)
    1eac:	dc400d15 	stw	r17,52(sp)
    1eb0:	ac7ff60e 	bge	r21,r17,1e8c <___vfprintf_internal_r+0xd74>
    1eb4:	d9014f17 	ldw	r4,1340(sp)
    1eb8:	b00b883a 	mov	r5,r22
    1ebc:	d9800c04 	addi	r6,sp,48
    1ec0:	00010c00 	call	10c0 <__sprint_r>
    1ec4:	103e4c1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1ec8:	dc800e17 	ldw	r18,56(sp)
    1ecc:	dc400d17 	ldw	r17,52(sp)
    1ed0:	dcc01904 	addi	r19,sp,100
    1ed4:	003fee06 	br	1e90 <___vfprintf_internal_r+0xd78>
    1ed8:	07000074 	movhi	fp,1
    1edc:	e708a184 	addi	fp,fp,8838
    1ee0:	9425883a 	add	r18,r18,r16
    1ee4:	8c400044 	addi	r17,r17,1
    1ee8:	008001c4 	movi	r2,7
    1eec:	9f000015 	stw	fp,0(r19)
    1ef0:	9c000115 	stw	r16,4(r19)
    1ef4:	dc800e15 	stw	r18,56(sp)
    1ef8:	dc400d15 	stw	r17,52(sp)
    1efc:	147e720e 	bge	r2,r17,18c8 <___vfprintf_internal_r+0x7b0>
    1f00:	d9014f17 	ldw	r4,1340(sp)
    1f04:	b00b883a 	mov	r5,r22
    1f08:	d9800c04 	addi	r6,sp,48
    1f0c:	00010c00 	call	10c0 <__sprint_r>
    1f10:	103e391e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1f14:	dc800e17 	ldw	r18,56(sp)
    1f18:	dc400d17 	ldw	r17,52(sp)
    1f1c:	dcc01904 	addi	r19,sp,100
    1f20:	003e6a06 	br	18cc <___vfprintf_internal_r+0x7b4>
    1f24:	d9014f17 	ldw	r4,1340(sp)
    1f28:	b00b883a 	mov	r5,r22
    1f2c:	d9800c04 	addi	r6,sp,48
    1f30:	d9c15115 	stw	r7,1348(sp)
    1f34:	00010c00 	call	10c0 <__sprint_r>
    1f38:	d9c15117 	ldw	r7,1348(sp)
    1f3c:	103e2e1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1f40:	dc800e17 	ldw	r18,56(sp)
    1f44:	dc400d17 	ldw	r17,52(sp)
    1f48:	dd401904 	addi	r21,sp,100
    1f4c:	003dba06 	br	1638 <___vfprintf_internal_r+0x520>
    1f50:	d9014f17 	ldw	r4,1340(sp)
    1f54:	b00b883a 	mov	r5,r22
    1f58:	d9800c04 	addi	r6,sp,48
    1f5c:	00010c00 	call	10c0 <__sprint_r>
    1f60:	103e251e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1f64:	dc800e17 	ldw	r18,56(sp)
    1f68:	dc400d17 	ldw	r17,52(sp)
    1f6c:	dcc01904 	addi	r19,sp,100
    1f70:	003e4206 	br	187c <___vfprintf_internal_r+0x764>
    1f74:	d9014f17 	ldw	r4,1340(sp)
    1f78:	b00b883a 	mov	r5,r22
    1f7c:	d9800c04 	addi	r6,sp,48
    1f80:	00010c00 	call	10c0 <__sprint_r>
    1f84:	103e1c1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    1f88:	dc800e17 	ldw	r18,56(sp)
    1f8c:	dc400d17 	ldw	r17,52(sp)
    1f90:	d8c01904 	addi	r3,sp,100
    1f94:	003e2e06 	br	1850 <___vfprintf_internal_r+0x738>
    1f98:	d9414c17 	ldw	r5,1328(sp)
    1f9c:	2880004c 	andi	r2,r5,1
    1fa0:	1005003a 	cmpeq	r2,r2,zero
    1fa4:	103dda1e 	bne	r2,zero,1710 <___vfprintf_internal_r+0x5f8>
    1fa8:	003e9f06 	br	1a28 <___vfprintf_internal_r+0x910>
    1fac:	d8c14117 	ldw	r3,1284(sp)
    1fb0:	9125883a 	add	r18,r18,r4
    1fb4:	8c400044 	addi	r17,r17,1
    1fb8:	008001c4 	movi	r2,7
    1fbc:	a8c00015 	stw	r3,0(r21)
    1fc0:	a9000115 	stw	r4,4(r21)
    1fc4:	dc800e15 	stw	r18,56(sp)
    1fc8:	dc400d15 	stw	r17,52(sp)
    1fcc:	14426616 	blt	r2,r17,2968 <___vfprintf_internal_r+0x1850>
    1fd0:	a8c00204 	addi	r3,r21,8
    1fd4:	d9414917 	ldw	r5,1316(sp)
    1fd8:	00800044 	movi	r2,1
    1fdc:	94800044 	addi	r18,r18,1
    1fe0:	8c400044 	addi	r17,r17,1
    1fe4:	18800115 	stw	r2,4(r3)
    1fe8:	008001c4 	movi	r2,7
    1fec:	19400015 	stw	r5,0(r3)
    1ff0:	dc800e15 	stw	r18,56(sp)
    1ff4:	dc400d15 	stw	r17,52(sp)
    1ff8:	2021883a 	mov	r16,r4
    1ffc:	14425016 	blt	r2,r17,2940 <___vfprintf_internal_r+0x1828>
    2000:	19400204 	addi	r5,r3,8
    2004:	d9814717 	ldw	r6,1308(sp)
    2008:	8c400044 	addi	r17,r17,1
    200c:	dc400d15 	stw	r17,52(sp)
    2010:	3107c83a 	sub	r3,r6,r4
    2014:	d9014117 	ldw	r4,1284(sp)
    2018:	90e5883a 	add	r18,r18,r3
    201c:	28c00115 	stw	r3,4(r5)
    2020:	8105883a 	add	r2,r16,r4
    2024:	28800015 	stw	r2,0(r5)
    2028:	008001c4 	movi	r2,7
    202c:	dc800e15 	stw	r18,56(sp)
    2030:	147f1d16 	blt	r2,r17,1ca8 <___vfprintf_internal_r+0xb90>
    2034:	28c00204 	addi	r3,r5,8
    2038:	003db506 	br	1710 <___vfprintf_internal_r+0x5f8>
    203c:	3c000017 	ldw	r16,0(r7)
    2040:	3c400117 	ldw	r17,4(r7)
    2044:	39800204 	addi	r6,r7,8
    2048:	01000044 	movi	r4,1
    204c:	d9814015 	stw	r6,1280(sp)
    2050:	d8000405 	stb	zero,16(sp)
    2054:	003ebe06 	br	1b50 <___vfprintf_internal_r+0xa38>
    2058:	3c000017 	ldw	r16,0(r7)
    205c:	3c400117 	ldw	r17,4(r7)
    2060:	38800204 	addi	r2,r7,8
    2064:	d8814015 	stw	r2,1280(sp)
    2068:	003eb706 	br	1b48 <___vfprintf_internal_r+0xa30>
    206c:	3c000017 	ldw	r16,0(r7)
    2070:	3c400117 	ldw	r17,4(r7)
    2074:	39000204 	addi	r4,r7,8
    2078:	d9014015 	stw	r4,1280(sp)
    207c:	0009883a 	mov	r4,zero
    2080:	d8000405 	stb	zero,16(sp)
    2084:	003eb206 	br	1b50 <___vfprintf_internal_r+0xa38>
    2088:	38c00017 	ldw	r3,0(r7)
    208c:	39c00104 	addi	r7,r7,4
    2090:	d8c14a15 	stw	r3,1320(sp)
    2094:	1800d10e 	bge	r3,zero,23dc <___vfprintf_internal_r+0x12c4>
    2098:	00c7c83a 	sub	r3,zero,r3
    209c:	d8c14a15 	stw	r3,1320(sp)
    20a0:	d9014c17 	ldw	r4,1328(sp)
    20a4:	b8c00007 	ldb	r3,0(r23)
    20a8:	21000114 	ori	r4,r4,4
    20ac:	d9014c15 	stw	r4,1328(sp)
    20b0:	003c9806 	br	1314 <___vfprintf_internal_r+0x1fc>
    20b4:	d9814c17 	ldw	r6,1328(sp)
    20b8:	3080080c 	andi	r2,r6,32
    20bc:	1001f026 	beq	r2,zero,2880 <___vfprintf_internal_r+0x1768>
    20c0:	d9014b17 	ldw	r4,1324(sp)
    20c4:	38800017 	ldw	r2,0(r7)
    20c8:	39c00104 	addi	r7,r7,4
    20cc:	d9c14015 	stw	r7,1280(sp)
    20d0:	2007d7fa 	srai	r3,r4,31
    20d4:	d9c14017 	ldw	r7,1280(sp)
    20d8:	11000015 	stw	r4,0(r2)
    20dc:	10c00115 	stw	r3,4(r2)
    20e0:	003c6906 	br	1288 <___vfprintf_internal_r+0x170>
    20e4:	b8c00007 	ldb	r3,0(r23)
    20e8:	00801b04 	movi	r2,108
    20ec:	18824f26 	beq	r3,r2,2a2c <___vfprintf_internal_r+0x1914>
    20f0:	d9414c17 	ldw	r5,1328(sp)
    20f4:	29400414 	ori	r5,r5,16
    20f8:	d9414c15 	stw	r5,1328(sp)
    20fc:	003c8506 	br	1314 <___vfprintf_internal_r+0x1fc>
    2100:	d9814c17 	ldw	r6,1328(sp)
    2104:	b8c00007 	ldb	r3,0(r23)
    2108:	31800814 	ori	r6,r6,32
    210c:	d9814c15 	stw	r6,1328(sp)
    2110:	003c8006 	br	1314 <___vfprintf_internal_r+0x1fc>
    2114:	d8814c17 	ldw	r2,1328(sp)
    2118:	3c000017 	ldw	r16,0(r7)
    211c:	00c01e04 	movi	r3,120
    2120:	10800094 	ori	r2,r2,2
    2124:	d8814c15 	stw	r2,1328(sp)
    2128:	39c00104 	addi	r7,r7,4
    212c:	01400074 	movhi	r5,1
    2130:	29488a04 	addi	r5,r5,8744
    2134:	00800c04 	movi	r2,48
    2138:	0023883a 	mov	r17,zero
    213c:	01000084 	movi	r4,2
    2140:	d9c14015 	stw	r7,1280(sp)
    2144:	d8c14d15 	stw	r3,1332(sp)
    2148:	d9414415 	stw	r5,1296(sp)
    214c:	d8800445 	stb	r2,17(sp)
    2150:	d8c00485 	stb	r3,18(sp)
    2154:	d8000405 	stb	zero,16(sp)
    2158:	003e7d06 	br	1b50 <___vfprintf_internal_r+0xa38>
    215c:	d8814c17 	ldw	r2,1328(sp)
    2160:	b8c00007 	ldb	r3,0(r23)
    2164:	10801014 	ori	r2,r2,64
    2168:	d8814c15 	stw	r2,1328(sp)
    216c:	003c6906 	br	1314 <___vfprintf_internal_r+0x1fc>
    2170:	d9414c17 	ldw	r5,1328(sp)
    2174:	2880020c 	andi	r2,r5,8
    2178:	1001df26 	beq	r2,zero,28f8 <___vfprintf_internal_r+0x17e0>
    217c:	39800017 	ldw	r6,0(r7)
    2180:	38800204 	addi	r2,r7,8
    2184:	d8814015 	stw	r2,1280(sp)
    2188:	d9814215 	stw	r6,1288(sp)
    218c:	39c00117 	ldw	r7,4(r7)
    2190:	d9c14315 	stw	r7,1292(sp)
    2194:	d9014217 	ldw	r4,1288(sp)
    2198:	d9414317 	ldw	r5,1292(sp)
    219c:	00097800 	call	9780 <__isinfd>
    21a0:	10021726 	beq	r2,zero,2a00 <___vfprintf_internal_r+0x18e8>
    21a4:	d9014217 	ldw	r4,1288(sp)
    21a8:	d9414317 	ldw	r5,1292(sp)
    21ac:	000d883a 	mov	r6,zero
    21b0:	000f883a 	mov	r7,zero
    21b4:	000eb500 	call	eb50 <__ltdf2>
    21b8:	1002ca16 	blt	r2,zero,2ce4 <___vfprintf_internal_r+0x1bcc>
    21bc:	d9414d17 	ldw	r5,1332(sp)
    21c0:	008011c4 	movi	r2,71
    21c4:	11420a16 	blt	r2,r5,29f0 <___vfprintf_internal_r+0x18d8>
    21c8:	01800074 	movhi	r6,1
    21cc:	31888f04 	addi	r6,r6,8764
    21d0:	d9814115 	stw	r6,1284(sp)
    21d4:	d9014c17 	ldw	r4,1328(sp)
    21d8:	00c000c4 	movi	r3,3
    21dc:	00bfdfc4 	movi	r2,-129
    21e0:	2088703a 	and	r4,r4,r2
    21e4:	180f883a 	mov	r7,r3
    21e8:	d8c14515 	stw	r3,1300(sp)
    21ec:	d9014c15 	stw	r4,1328(sp)
    21f0:	d8014615 	stw	zero,1304(sp)
    21f4:	003e6a06 	br	1ba0 <___vfprintf_internal_r+0xa88>
    21f8:	38800017 	ldw	r2,0(r7)
    21fc:	00c00044 	movi	r3,1
    2200:	39c00104 	addi	r7,r7,4
    2204:	d9c14015 	stw	r7,1280(sp)
    2208:	d9000f04 	addi	r4,sp,60
    220c:	180f883a 	mov	r7,r3
    2210:	d8c14515 	stw	r3,1300(sp)
    2214:	d9014115 	stw	r4,1284(sp)
    2218:	d8800f05 	stb	r2,60(sp)
    221c:	d8000405 	stb	zero,16(sp)
    2220:	003cac06 	br	14d4 <___vfprintf_internal_r+0x3bc>
    2224:	01400074 	movhi	r5,1
    2228:	29489504 	addi	r5,r5,8788
    222c:	d9414415 	stw	r5,1296(sp)
    2230:	d9814c17 	ldw	r6,1328(sp)
    2234:	3080080c 	andi	r2,r6,32
    2238:	1000f926 	beq	r2,zero,2620 <___vfprintf_internal_r+0x1508>
    223c:	3c000017 	ldw	r16,0(r7)
    2240:	3c400117 	ldw	r17,4(r7)
    2244:	38800204 	addi	r2,r7,8
    2248:	d8814015 	stw	r2,1280(sp)
    224c:	d9414c17 	ldw	r5,1328(sp)
    2250:	2880004c 	andi	r2,r5,1
    2254:	1005003a 	cmpeq	r2,r2,zero
    2258:	1000b31e 	bne	r2,zero,2528 <___vfprintf_internal_r+0x1410>
    225c:	8444b03a 	or	r2,r16,r17
    2260:	1000b126 	beq	r2,zero,2528 <___vfprintf_internal_r+0x1410>
    2264:	d9814d17 	ldw	r6,1332(sp)
    2268:	29400094 	ori	r5,r5,2
    226c:	00800c04 	movi	r2,48
    2270:	01000084 	movi	r4,2
    2274:	d9414c15 	stw	r5,1328(sp)
    2278:	d8800445 	stb	r2,17(sp)
    227c:	d9800485 	stb	r6,18(sp)
    2280:	d8000405 	stb	zero,16(sp)
    2284:	003e3206 	br	1b50 <___vfprintf_internal_r+0xa38>
    2288:	01800074 	movhi	r6,1
    228c:	31888a04 	addi	r6,r6,8744
    2290:	d9814415 	stw	r6,1296(sp)
    2294:	003fe606 	br	2230 <___vfprintf_internal_r+0x1118>
    2298:	00800ac4 	movi	r2,43
    229c:	d8800405 	stb	r2,16(sp)
    22a0:	b8c00007 	ldb	r3,0(r23)
    22a4:	003c1b06 	br	1314 <___vfprintf_internal_r+0x1fc>
    22a8:	d8814c17 	ldw	r2,1328(sp)
    22ac:	b8c00007 	ldb	r3,0(r23)
    22b0:	10800054 	ori	r2,r2,1
    22b4:	d8814c15 	stw	r2,1328(sp)
    22b8:	003c1606 	br	1314 <___vfprintf_internal_r+0x1fc>
    22bc:	d8800407 	ldb	r2,16(sp)
    22c0:	1000461e 	bne	r2,zero,23dc <___vfprintf_internal_r+0x12c4>
    22c4:	00800804 	movi	r2,32
    22c8:	d8800405 	stb	r2,16(sp)
    22cc:	b8c00007 	ldb	r3,0(r23)
    22d0:	003c1006 	br	1314 <___vfprintf_internal_r+0x1fc>
    22d4:	d9814c17 	ldw	r6,1328(sp)
    22d8:	b8c00007 	ldb	r3,0(r23)
    22dc:	31800214 	ori	r6,r6,8
    22e0:	d9814c15 	stw	r6,1328(sp)
    22e4:	003c0b06 	br	1314 <___vfprintf_internal_r+0x1fc>
    22e8:	0007883a 	mov	r3,zero
    22ec:	01000244 	movi	r4,9
    22f0:	188002a4 	muli	r2,r3,10
    22f4:	b8c00007 	ldb	r3,0(r23)
    22f8:	d9814d17 	ldw	r6,1332(sp)
    22fc:	bdc00044 	addi	r23,r23,1
    2300:	d8c14d15 	stw	r3,1332(sp)
    2304:	d9414d17 	ldw	r5,1332(sp)
    2308:	3085883a 	add	r2,r6,r2
    230c:	10fff404 	addi	r3,r2,-48
    2310:	28bff404 	addi	r2,r5,-48
    2314:	20bff62e 	bgeu	r4,r2,22f0 <___vfprintf_internal_r+0x11d8>
    2318:	d8c14a15 	stw	r3,1320(sp)
    231c:	003bff06 	br	131c <___vfprintf_internal_r+0x204>
    2320:	d9414c17 	ldw	r5,1328(sp)
    2324:	b8c00007 	ldb	r3,0(r23)
    2328:	29402014 	ori	r5,r5,128
    232c:	d9414c15 	stw	r5,1328(sp)
    2330:	003bf806 	br	1314 <___vfprintf_internal_r+0x1fc>
    2334:	b8c00007 	ldb	r3,0(r23)
    2338:	00800a84 	movi	r2,42
    233c:	bdc00044 	addi	r23,r23,1
    2340:	18831526 	beq	r3,r2,2f98 <___vfprintf_internal_r+0x1e80>
    2344:	d8c14d15 	stw	r3,1332(sp)
    2348:	18bff404 	addi	r2,r3,-48
    234c:	00c00244 	movi	r3,9
    2350:	18827836 	bltu	r3,r2,2d34 <___vfprintf_internal_r+0x1c1c>
    2354:	000d883a 	mov	r6,zero
    2358:	308002a4 	muli	r2,r6,10
    235c:	b9800007 	ldb	r6,0(r23)
    2360:	d9414d17 	ldw	r5,1332(sp)
    2364:	bdc00044 	addi	r23,r23,1
    2368:	d9814d15 	stw	r6,1332(sp)
    236c:	d9014d17 	ldw	r4,1332(sp)
    2370:	1145883a 	add	r2,r2,r5
    2374:	11bff404 	addi	r6,r2,-48
    2378:	20bff404 	addi	r2,r4,-48
    237c:	18bff62e 	bgeu	r3,r2,2358 <___vfprintf_internal_r+0x1240>
    2380:	3027883a 	mov	r19,r6
    2384:	303be50e 	bge	r6,zero,131c <___vfprintf_internal_r+0x204>
    2388:	04ffffc4 	movi	r19,-1
    238c:	003be306 	br	131c <___vfprintf_internal_r+0x204>
    2390:	d8000405 	stb	zero,16(sp)
    2394:	39800017 	ldw	r6,0(r7)
    2398:	39c00104 	addi	r7,r7,4
    239c:	d9c14015 	stw	r7,1280(sp)
    23a0:	d9814115 	stw	r6,1284(sp)
    23a4:	3001c926 	beq	r6,zero,2acc <___vfprintf_internal_r+0x19b4>
    23a8:	98000e16 	blt	r19,zero,23e4 <___vfprintf_internal_r+0x12cc>
    23ac:	d9014117 	ldw	r4,1284(sp)
    23b0:	000b883a 	mov	r5,zero
    23b4:	980d883a 	mov	r6,r19
    23b8:	0007cbc0 	call	7cbc <memchr>
    23bc:	10025926 	beq	r2,zero,2d24 <___vfprintf_internal_r+0x1c0c>
    23c0:	d8c14117 	ldw	r3,1284(sp)
    23c4:	10cfc83a 	sub	r7,r2,r3
    23c8:	99c19e16 	blt	r19,r7,2a44 <___vfprintf_internal_r+0x192c>
    23cc:	d9c14515 	stw	r7,1300(sp)
    23d0:	38000916 	blt	r7,zero,23f8 <___vfprintf_internal_r+0x12e0>
    23d4:	d8014615 	stw	zero,1304(sp)
    23d8:	003df106 	br	1ba0 <___vfprintf_internal_r+0xa88>
    23dc:	b8c00007 	ldb	r3,0(r23)
    23e0:	003bcc06 	br	1314 <___vfprintf_internal_r+0x1fc>
    23e4:	d9014117 	ldw	r4,1284(sp)
    23e8:	0009c040 	call	9c04 <strlen>
    23ec:	d8814515 	stw	r2,1300(sp)
    23f0:	100f883a 	mov	r7,r2
    23f4:	103ff70e 	bge	r2,zero,23d4 <___vfprintf_internal_r+0x12bc>
    23f8:	d8014515 	stw	zero,1300(sp)
    23fc:	d8014615 	stw	zero,1304(sp)
    2400:	003de706 	br	1ba0 <___vfprintf_internal_r+0xa88>
    2404:	20c03fcc 	andi	r3,r4,255
    2408:	00800044 	movi	r2,1
    240c:	18802d26 	beq	r3,r2,24c4 <___vfprintf_internal_r+0x13ac>
    2410:	18800e36 	bltu	r3,r2,244c <___vfprintf_internal_r+0x1334>
    2414:	00800084 	movi	r2,2
    2418:	1880fa26 	beq	r3,r2,2804 <___vfprintf_internal_r+0x16ec>
    241c:	01000074 	movhi	r4,1
    2420:	21089a04 	addi	r4,r4,8808
    2424:	0009c040 	call	9c04 <strlen>
    2428:	100f883a 	mov	r7,r2
    242c:	dcc14515 	stw	r19,1300(sp)
    2430:	9880010e 	bge	r19,r2,2438 <___vfprintf_internal_r+0x1320>
    2434:	d8814515 	stw	r2,1300(sp)
    2438:	00800074 	movhi	r2,1
    243c:	10889a04 	addi	r2,r2,8808
    2440:	dcc14615 	stw	r19,1304(sp)
    2444:	d8814115 	stw	r2,1284(sp)
    2448:	003dd506 	br	1ba0 <___vfprintf_internal_r+0xa88>
    244c:	d9401904 	addi	r5,sp,100
    2450:	dd000f04 	addi	r20,sp,60
    2454:	d9414115 	stw	r5,1284(sp)
    2458:	880a977a 	slli	r5,r17,29
    245c:	d9814117 	ldw	r6,1284(sp)
    2460:	8004d0fa 	srli	r2,r16,3
    2464:	8806d0fa 	srli	r3,r17,3
    2468:	810001cc 	andi	r4,r16,7
    246c:	2884b03a 	or	r2,r5,r2
    2470:	31bfffc4 	addi	r6,r6,-1
    2474:	21000c04 	addi	r4,r4,48
    2478:	d9814115 	stw	r6,1284(sp)
    247c:	10cab03a 	or	r5,r2,r3
    2480:	31000005 	stb	r4,0(r6)
    2484:	1021883a 	mov	r16,r2
    2488:	1823883a 	mov	r17,r3
    248c:	283ff21e 	bne	r5,zero,2458 <___vfprintf_internal_r+0x1340>
    2490:	d8c14c17 	ldw	r3,1328(sp)
    2494:	1880004c 	andi	r2,r3,1
    2498:	1005003a 	cmpeq	r2,r2,zero
    249c:	103db91e 	bne	r2,zero,1b84 <___vfprintf_internal_r+0xa6c>
    24a0:	20803fcc 	andi	r2,r4,255
    24a4:	1080201c 	xori	r2,r2,128
    24a8:	10bfe004 	addi	r2,r2,-128
    24ac:	00c00c04 	movi	r3,48
    24b0:	10fdb426 	beq	r2,r3,1b84 <___vfprintf_internal_r+0xa6c>
    24b4:	31bfffc4 	addi	r6,r6,-1
    24b8:	d9814115 	stw	r6,1284(sp)
    24bc:	30c00005 	stb	r3,0(r6)
    24c0:	003db006 	br	1b84 <___vfprintf_internal_r+0xa6c>
    24c4:	88800068 	cmpgeui	r2,r17,1
    24c8:	10002c1e 	bne	r2,zero,257c <___vfprintf_internal_r+0x1464>
    24cc:	8800021e 	bne	r17,zero,24d8 <___vfprintf_internal_r+0x13c0>
    24d0:	00800244 	movi	r2,9
    24d4:	14002936 	bltu	r2,r16,257c <___vfprintf_internal_r+0x1464>
    24d8:	d90018c4 	addi	r4,sp,99
    24dc:	dd000f04 	addi	r20,sp,60
    24e0:	d9014115 	stw	r4,1284(sp)
    24e4:	d9014117 	ldw	r4,1284(sp)
    24e8:	80800c04 	addi	r2,r16,48
    24ec:	20800005 	stb	r2,0(r4)
    24f0:	003da406 	br	1b84 <___vfprintf_internal_r+0xa6c>
    24f4:	dc400d17 	ldw	r17,52(sp)
    24f8:	07000074 	movhi	fp,1
    24fc:	e708a184 	addi	fp,fp,8838
    2500:	9425883a 	add	r18,r18,r16
    2504:	8c400044 	addi	r17,r17,1
    2508:	008001c4 	movi	r2,7
    250c:	1f000015 	stw	fp,0(r3)
    2510:	1c000115 	stw	r16,4(r3)
    2514:	dc800e15 	stw	r18,56(sp)
    2518:	dc400d15 	stw	r17,52(sp)
    251c:	147de216 	blt	r2,r17,1ca8 <___vfprintf_internal_r+0xb90>
    2520:	18c00204 	addi	r3,r3,8
    2524:	003c7a06 	br	1710 <___vfprintf_internal_r+0x5f8>
    2528:	01000084 	movi	r4,2
    252c:	d8000405 	stb	zero,16(sp)
    2530:	003d8706 	br	1b50 <___vfprintf_internal_r+0xa38>
    2534:	d9814c17 	ldw	r6,1328(sp)
    2538:	30c4703a 	and	r2,r6,r3
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	103cb926 	beq	r2,zero,1828 <___vfprintf_internal_r+0x710>
    2544:	d9014117 	ldw	r4,1284(sp)
    2548:	94800044 	addi	r18,r18,1
    254c:	8c400044 	addi	r17,r17,1
    2550:	008001c4 	movi	r2,7
    2554:	a9000015 	stw	r4,0(r21)
    2558:	a8c00115 	stw	r3,4(r21)
    255c:	dc800e15 	stw	r18,56(sp)
    2560:	dc400d15 	stw	r17,52(sp)
    2564:	147e6616 	blt	r2,r17,1f00 <___vfprintf_internal_r+0xde8>
    2568:	acc00204 	addi	r19,r21,8
    256c:	003cd706 	br	18cc <___vfprintf_internal_r+0x7b4>
    2570:	07000074 	movhi	fp,1
    2574:	e708a184 	addi	fp,fp,8838
    2578:	003c4f06 	br	16b8 <___vfprintf_internal_r+0x5a0>
    257c:	dd000f04 	addi	r20,sp,60
    2580:	dc801904 	addi	r18,sp,100
    2584:	8009883a 	mov	r4,r16
    2588:	880b883a 	mov	r5,r17
    258c:	01800284 	movi	r6,10
    2590:	000f883a 	mov	r7,zero
    2594:	000d7700 	call	d770 <__umoddi3>
    2598:	12000c04 	addi	r8,r2,48
    259c:	94bfffc4 	addi	r18,r18,-1
    25a0:	8009883a 	mov	r4,r16
    25a4:	880b883a 	mov	r5,r17
    25a8:	01800284 	movi	r6,10
    25ac:	000f883a 	mov	r7,zero
    25b0:	92000005 	stb	r8,0(r18)
    25b4:	000d1940 	call	d194 <__udivdi3>
    25b8:	1009883a 	mov	r4,r2
    25bc:	1021883a 	mov	r16,r2
    25c0:	18800068 	cmpgeui	r2,r3,1
    25c4:	1823883a 	mov	r17,r3
    25c8:	103fee1e 	bne	r2,zero,2584 <___vfprintf_internal_r+0x146c>
    25cc:	1800021e 	bne	r3,zero,25d8 <___vfprintf_internal_r+0x14c0>
    25d0:	00800244 	movi	r2,9
    25d4:	113feb36 	bltu	r2,r4,2584 <___vfprintf_internal_r+0x146c>
    25d8:	94bfffc4 	addi	r18,r18,-1
    25dc:	dc814115 	stw	r18,1284(sp)
    25e0:	003fc006 	br	24e4 <___vfprintf_internal_r+0x13cc>
    25e4:	d9014c17 	ldw	r4,1328(sp)
    25e8:	2080004c 	andi	r2,r4,1
    25ec:	10009a1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x1740>
    25f0:	d9401904 	addi	r5,sp,100
    25f4:	dd000f04 	addi	r20,sp,60
    25f8:	d9414115 	stw	r5,1284(sp)
    25fc:	003d6106 	br	1b84 <___vfprintf_internal_r+0xa6c>
    2600:	d9014f17 	ldw	r4,1340(sp)
    2604:	b00b883a 	mov	r5,r22
    2608:	d9800c04 	addi	r6,sp,48
    260c:	00010c00 	call	10c0 <__sprint_r>
    2610:	103c791e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    2614:	dc800e17 	ldw	r18,56(sp)
    2618:	d8c01904 	addi	r3,sp,100
    261c:	003cff06 	br	1a1c <___vfprintf_internal_r+0x904>
    2620:	d8c14c17 	ldw	r3,1328(sp)
    2624:	1880040c 	andi	r2,r3,16
    2628:	1000711e 	bne	r2,zero,27f0 <___vfprintf_internal_r+0x16d8>
    262c:	d9014c17 	ldw	r4,1328(sp)
    2630:	2080100c 	andi	r2,r4,64
    2634:	10006e26 	beq	r2,zero,27f0 <___vfprintf_internal_r+0x16d8>
    2638:	3c00000b 	ldhu	r16,0(r7)
    263c:	0023883a 	mov	r17,zero
    2640:	39c00104 	addi	r7,r7,4
    2644:	d9c14015 	stw	r7,1280(sp)
    2648:	003f0006 	br	224c <___vfprintf_internal_r+0x1134>
    264c:	dc400d17 	ldw	r17,52(sp)
    2650:	07000074 	movhi	fp,1
    2654:	e708a184 	addi	fp,fp,8838
    2658:	9425883a 	add	r18,r18,r16
    265c:	8c400044 	addi	r17,r17,1
    2660:	008001c4 	movi	r2,7
    2664:	1f000015 	stw	fp,0(r3)
    2668:	1c000115 	stw	r16,4(r3)
    266c:	dc800e15 	stw	r18,56(sp)
    2670:	dc400d15 	stw	r17,52(sp)
    2674:	147d7616 	blt	r2,r17,1c50 <___vfprintf_internal_r+0xb38>
    2678:	18c00204 	addi	r3,r3,8
    267c:	003d7b06 	br	1c6c <___vfprintf_internal_r+0xb54>
    2680:	dc800e17 	ldw	r18,56(sp)
    2684:	dc400d17 	ldw	r17,52(sp)
    2688:	07000074 	movhi	fp,1
    268c:	e708a584 	addi	fp,fp,8854
    2690:	003bc006 	br	1594 <___vfprintf_internal_r+0x47c>
    2694:	d9014f17 	ldw	r4,1340(sp)
    2698:	b00b883a 	mov	r5,r22
    269c:	d9800c04 	addi	r6,sp,48
    26a0:	00010c00 	call	10c0 <__sprint_r>
    26a4:	103c541e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    26a8:	dc800e17 	ldw	r18,56(sp)
    26ac:	d8c01904 	addi	r3,sp,100
    26b0:	003ce906 	br	1a58 <___vfprintf_internal_r+0x940>
    26b4:	3c000017 	ldw	r16,0(r7)
    26b8:	0009883a 	mov	r4,zero
    26bc:	39c00104 	addi	r7,r7,4
    26c0:	0023883a 	mov	r17,zero
    26c4:	d9c14015 	stw	r7,1280(sp)
    26c8:	d8000405 	stb	zero,16(sp)
    26cc:	003d2006 	br	1b50 <___vfprintf_internal_r+0xa38>
    26d0:	38800017 	ldw	r2,0(r7)
    26d4:	39c00104 	addi	r7,r7,4
    26d8:	d9c14015 	stw	r7,1280(sp)
    26dc:	1023d7fa 	srai	r17,r2,31
    26e0:	1021883a 	mov	r16,r2
    26e4:	003d1806 	br	1b48 <___vfprintf_internal_r+0xa30>
    26e8:	3c000017 	ldw	r16,0(r7)
    26ec:	01000044 	movi	r4,1
    26f0:	39c00104 	addi	r7,r7,4
    26f4:	0023883a 	mov	r17,zero
    26f8:	d9c14015 	stw	r7,1280(sp)
    26fc:	d8000405 	stb	zero,16(sp)
    2700:	003d1306 	br	1b50 <___vfprintf_internal_r+0xa38>
    2704:	00800074 	movhi	r2,1
    2708:	1088a104 	addi	r2,r2,8836
    270c:	94800044 	addi	r18,r18,1
    2710:	8c400044 	addi	r17,r17,1
    2714:	a8800015 	stw	r2,0(r21)
    2718:	00c00044 	movi	r3,1
    271c:	008001c4 	movi	r2,7
    2720:	a8c00115 	stw	r3,4(r21)
    2724:	dc800e15 	stw	r18,56(sp)
    2728:	dc400d15 	stw	r17,52(sp)
    272c:	1440ca16 	blt	r2,r17,2a58 <___vfprintf_internal_r+0x1940>
    2730:	a8c00204 	addi	r3,r21,8
    2734:	2000061e 	bne	r4,zero,2750 <___vfprintf_internal_r+0x1638>
    2738:	d9414717 	ldw	r5,1308(sp)
    273c:	2800041e 	bne	r5,zero,2750 <___vfprintf_internal_r+0x1638>
    2740:	d9814c17 	ldw	r6,1328(sp)
    2744:	3080004c 	andi	r2,r6,1
    2748:	1005003a 	cmpeq	r2,r2,zero
    274c:	103bf01e 	bne	r2,zero,1710 <___vfprintf_internal_r+0x5f8>
    2750:	00800044 	movi	r2,1
    2754:	dc400d17 	ldw	r17,52(sp)
    2758:	18800115 	stw	r2,4(r3)
    275c:	d8814917 	ldw	r2,1316(sp)
    2760:	94800044 	addi	r18,r18,1
    2764:	8c400044 	addi	r17,r17,1
    2768:	18800015 	stw	r2,0(r3)
    276c:	008001c4 	movi	r2,7
    2770:	dc800e15 	stw	r18,56(sp)
    2774:	dc400d15 	stw	r17,52(sp)
    2778:	1440ca16 	blt	r2,r17,2aa4 <___vfprintf_internal_r+0x198c>
    277c:	18c00204 	addi	r3,r3,8
    2780:	0121c83a 	sub	r16,zero,r4
    2784:	0400500e 	bge	zero,r16,28c8 <___vfprintf_internal_r+0x17b0>
    2788:	00800404 	movi	r2,16
    278c:	1400800e 	bge	r2,r16,2990 <___vfprintf_internal_r+0x1878>
    2790:	1027883a 	mov	r19,r2
    2794:	07000074 	movhi	fp,1
    2798:	e708a184 	addi	fp,fp,8838
    279c:	050001c4 	movi	r20,7
    27a0:	00000306 	br	27b0 <___vfprintf_internal_r+0x1698>
    27a4:	18c00204 	addi	r3,r3,8
    27a8:	843ffc04 	addi	r16,r16,-16
    27ac:	9c007a0e 	bge	r19,r16,2998 <___vfprintf_internal_r+0x1880>
    27b0:	94800404 	addi	r18,r18,16
    27b4:	8c400044 	addi	r17,r17,1
    27b8:	1f000015 	stw	fp,0(r3)
    27bc:	1cc00115 	stw	r19,4(r3)
    27c0:	dc800e15 	stw	r18,56(sp)
    27c4:	dc400d15 	stw	r17,52(sp)
    27c8:	a47ff60e 	bge	r20,r17,27a4 <___vfprintf_internal_r+0x168c>
    27cc:	d9014f17 	ldw	r4,1340(sp)
    27d0:	b00b883a 	mov	r5,r22
    27d4:	d9800c04 	addi	r6,sp,48
    27d8:	00010c00 	call	10c0 <__sprint_r>
    27dc:	103c061e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    27e0:	dc800e17 	ldw	r18,56(sp)
    27e4:	dc400d17 	ldw	r17,52(sp)
    27e8:	d8c01904 	addi	r3,sp,100
    27ec:	003fee06 	br	27a8 <___vfprintf_internal_r+0x1690>
    27f0:	3c000017 	ldw	r16,0(r7)
    27f4:	0023883a 	mov	r17,zero
    27f8:	39c00104 	addi	r7,r7,4
    27fc:	d9c14015 	stw	r7,1280(sp)
    2800:	003e9206 	br	224c <___vfprintf_internal_r+0x1134>
    2804:	d9401904 	addi	r5,sp,100
    2808:	dd000f04 	addi	r20,sp,60
    280c:	d9414115 	stw	r5,1284(sp)
    2810:	d9814417 	ldw	r6,1296(sp)
    2814:	880a973a 	slli	r5,r17,28
    2818:	8004d13a 	srli	r2,r16,4
    281c:	810003cc 	andi	r4,r16,15
    2820:	3109883a 	add	r4,r6,r4
    2824:	2884b03a 	or	r2,r5,r2
    2828:	21400003 	ldbu	r5,0(r4)
    282c:	d9014117 	ldw	r4,1284(sp)
    2830:	8806d13a 	srli	r3,r17,4
    2834:	1021883a 	mov	r16,r2
    2838:	213fffc4 	addi	r4,r4,-1
    283c:	d9014115 	stw	r4,1284(sp)
    2840:	d9814117 	ldw	r6,1284(sp)
    2844:	10c8b03a 	or	r4,r2,r3
    2848:	1823883a 	mov	r17,r3
    284c:	31400005 	stb	r5,0(r6)
    2850:	203fef1e 	bne	r4,zero,2810 <___vfprintf_internal_r+0x16f8>
    2854:	003ccb06 	br	1b84 <___vfprintf_internal_r+0xa6c>
    2858:	00800c04 	movi	r2,48
    285c:	d98018c4 	addi	r6,sp,99
    2860:	dd000f04 	addi	r20,sp,60
    2864:	d88018c5 	stb	r2,99(sp)
    2868:	d9814115 	stw	r6,1284(sp)
    286c:	003cc506 	br	1b84 <___vfprintf_internal_r+0xa6c>
    2870:	dc400d17 	ldw	r17,52(sp)
    2874:	07000074 	movhi	fp,1
    2878:	e708a584 	addi	fp,fp,8854
    287c:	003bc706 	br	179c <___vfprintf_internal_r+0x684>
    2880:	d9414c17 	ldw	r5,1328(sp)
    2884:	2880040c 	andi	r2,r5,16
    2888:	10007c26 	beq	r2,zero,2a7c <___vfprintf_internal_r+0x1964>
    288c:	38800017 	ldw	r2,0(r7)
    2890:	39c00104 	addi	r7,r7,4
    2894:	d9c14015 	stw	r7,1280(sp)
    2898:	d9814b17 	ldw	r6,1324(sp)
    289c:	d9c14017 	ldw	r7,1280(sp)
    28a0:	11800015 	stw	r6,0(r2)
    28a4:	003a7806 	br	1288 <___vfprintf_internal_r+0x170>
    28a8:	d9014f17 	ldw	r4,1340(sp)
    28ac:	b00b883a 	mov	r5,r22
    28b0:	d9800c04 	addi	r6,sp,48
    28b4:	00010c00 	call	10c0 <__sprint_r>
    28b8:	103bcf1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    28bc:	dc800e17 	ldw	r18,56(sp)
    28c0:	dc400d17 	ldw	r17,52(sp)
    28c4:	d8c01904 	addi	r3,sp,100
    28c8:	d9014717 	ldw	r4,1308(sp)
    28cc:	d9414117 	ldw	r5,1284(sp)
    28d0:	8c400044 	addi	r17,r17,1
    28d4:	9125883a 	add	r18,r18,r4
    28d8:	008001c4 	movi	r2,7
    28dc:	19400015 	stw	r5,0(r3)
    28e0:	19000115 	stw	r4,4(r3)
    28e4:	dc800e15 	stw	r18,56(sp)
    28e8:	dc400d15 	stw	r17,52(sp)
    28ec:	147cee16 	blt	r2,r17,1ca8 <___vfprintf_internal_r+0xb90>
    28f0:	18c00204 	addi	r3,r3,8
    28f4:	003b8606 	br	1710 <___vfprintf_internal_r+0x5f8>
    28f8:	38c00017 	ldw	r3,0(r7)
    28fc:	39000204 	addi	r4,r7,8
    2900:	d9014015 	stw	r4,1280(sp)
    2904:	d8c14215 	stw	r3,1288(sp)
    2908:	39c00117 	ldw	r7,4(r7)
    290c:	d9c14315 	stw	r7,1292(sp)
    2910:	003e2006 	br	2194 <___vfprintf_internal_r+0x107c>
    2914:	0005883a 	mov	r2,zero
    2918:	1409c83a 	sub	r4,r2,r16
    291c:	1105803a 	cmpltu	r2,r2,r4
    2920:	044bc83a 	sub	r5,zero,r17
    2924:	2885c83a 	sub	r2,r5,r2
    2928:	2021883a 	mov	r16,r4
    292c:	1023883a 	mov	r17,r2
    2930:	01000044 	movi	r4,1
    2934:	00800b44 	movi	r2,45
    2938:	d8800405 	stb	r2,16(sp)
    293c:	003c8406 	br	1b50 <___vfprintf_internal_r+0xa38>
    2940:	d9014f17 	ldw	r4,1340(sp)
    2944:	b00b883a 	mov	r5,r22
    2948:	d9800c04 	addi	r6,sp,48
    294c:	00010c00 	call	10c0 <__sprint_r>
    2950:	103ba91e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    2954:	dc800e17 	ldw	r18,56(sp)
    2958:	dc400d17 	ldw	r17,52(sp)
    295c:	d9000517 	ldw	r4,20(sp)
    2960:	d9401904 	addi	r5,sp,100
    2964:	003da706 	br	2004 <___vfprintf_internal_r+0xeec>
    2968:	d9014f17 	ldw	r4,1340(sp)
    296c:	b00b883a 	mov	r5,r22
    2970:	d9800c04 	addi	r6,sp,48
    2974:	00010c00 	call	10c0 <__sprint_r>
    2978:	103b9f1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    297c:	dc800e17 	ldw	r18,56(sp)
    2980:	dc400d17 	ldw	r17,52(sp)
    2984:	d9000517 	ldw	r4,20(sp)
    2988:	d8c01904 	addi	r3,sp,100
    298c:	003d9106 	br	1fd4 <___vfprintf_internal_r+0xebc>
    2990:	07000074 	movhi	fp,1
    2994:	e708a184 	addi	fp,fp,8838
    2998:	9425883a 	add	r18,r18,r16
    299c:	8c400044 	addi	r17,r17,1
    29a0:	008001c4 	movi	r2,7
    29a4:	1f000015 	stw	fp,0(r3)
    29a8:	1c000115 	stw	r16,4(r3)
    29ac:	dc800e15 	stw	r18,56(sp)
    29b0:	dc400d15 	stw	r17,52(sp)
    29b4:	147fbc16 	blt	r2,r17,28a8 <___vfprintf_internal_r+0x1790>
    29b8:	18c00204 	addi	r3,r3,8
    29bc:	003fc206 	br	28c8 <___vfprintf_internal_r+0x17b0>
    29c0:	d9014f17 	ldw	r4,1340(sp)
    29c4:	b00b883a 	mov	r5,r22
    29c8:	d9800c04 	addi	r6,sp,48
    29cc:	00010c00 	call	10c0 <__sprint_r>
    29d0:	103b891e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    29d4:	dc800e17 	ldw	r18,56(sp)
    29d8:	d9000517 	ldw	r4,20(sp)
    29dc:	d8c01904 	addi	r3,sp,100
    29e0:	003d0206 	br	1dec <___vfprintf_internal_r+0xcd4>
    29e4:	07000074 	movhi	fp,1
    29e8:	e708a184 	addi	fp,fp,8838
    29ec:	003be406 	br	1980 <___vfprintf_internal_r+0x868>
    29f0:	00800074 	movhi	r2,1
    29f4:	10889004 	addi	r2,r2,8768
    29f8:	d8814115 	stw	r2,1284(sp)
    29fc:	003df506 	br	21d4 <___vfprintf_internal_r+0x10bc>
    2a00:	d9014217 	ldw	r4,1288(sp)
    2a04:	d9414317 	ldw	r5,1292(sp)
    2a08:	00097c00 	call	97c0 <__isnand>
    2a0c:	10003926 	beq	r2,zero,2af4 <___vfprintf_internal_r+0x19dc>
    2a10:	d9414d17 	ldw	r5,1332(sp)
    2a14:	008011c4 	movi	r2,71
    2a18:	1140ce16 	blt	r2,r5,2d54 <___vfprintf_internal_r+0x1c3c>
    2a1c:	01800074 	movhi	r6,1
    2a20:	31889104 	addi	r6,r6,8772
    2a24:	d9814115 	stw	r6,1284(sp)
    2a28:	003dea06 	br	21d4 <___vfprintf_internal_r+0x10bc>
    2a2c:	d9014c17 	ldw	r4,1328(sp)
    2a30:	bdc00044 	addi	r23,r23,1
    2a34:	b8c00007 	ldb	r3,0(r23)
    2a38:	21000814 	ori	r4,r4,32
    2a3c:	d9014c15 	stw	r4,1328(sp)
    2a40:	003a3406 	br	1314 <___vfprintf_internal_r+0x1fc>
    2a44:	dcc14515 	stw	r19,1300(sp)
    2a48:	98011016 	blt	r19,zero,2e8c <___vfprintf_internal_r+0x1d74>
    2a4c:	980f883a 	mov	r7,r19
    2a50:	d8014615 	stw	zero,1304(sp)
    2a54:	003c5206 	br	1ba0 <___vfprintf_internal_r+0xa88>
    2a58:	d9014f17 	ldw	r4,1340(sp)
    2a5c:	b00b883a 	mov	r5,r22
    2a60:	d9800c04 	addi	r6,sp,48
    2a64:	00010c00 	call	10c0 <__sprint_r>
    2a68:	103b631e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    2a6c:	dc800e17 	ldw	r18,56(sp)
    2a70:	d9000517 	ldw	r4,20(sp)
    2a74:	d8c01904 	addi	r3,sp,100
    2a78:	003f2e06 	br	2734 <___vfprintf_internal_r+0x161c>
    2a7c:	d8c14c17 	ldw	r3,1328(sp)
    2a80:	1880100c 	andi	r2,r3,64
    2a84:	1000a026 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x1bf0>
    2a88:	38800017 	ldw	r2,0(r7)
    2a8c:	39c00104 	addi	r7,r7,4
    2a90:	d9c14015 	stw	r7,1280(sp)
    2a94:	d9014b17 	ldw	r4,1324(sp)
    2a98:	d9c14017 	ldw	r7,1280(sp)
    2a9c:	1100000d 	sth	r4,0(r2)
    2aa0:	0039f906 	br	1288 <___vfprintf_internal_r+0x170>
    2aa4:	d9014f17 	ldw	r4,1340(sp)
    2aa8:	b00b883a 	mov	r5,r22
    2aac:	d9800c04 	addi	r6,sp,48
    2ab0:	00010c00 	call	10c0 <__sprint_r>
    2ab4:	103b501e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    2ab8:	dc800e17 	ldw	r18,56(sp)
    2abc:	dc400d17 	ldw	r17,52(sp)
    2ac0:	d9000517 	ldw	r4,20(sp)
    2ac4:	d8c01904 	addi	r3,sp,100
    2ac8:	003f2d06 	br	2780 <___vfprintf_internal_r+0x1668>
    2acc:	00800184 	movi	r2,6
    2ad0:	14c09a36 	bltu	r2,r19,2d3c <___vfprintf_internal_r+0x1c24>
    2ad4:	dcc14515 	stw	r19,1300(sp)
    2ad8:	9800010e 	bge	r19,zero,2ae0 <___vfprintf_internal_r+0x19c8>
    2adc:	d8014515 	stw	zero,1300(sp)
    2ae0:	00800074 	movhi	r2,1
    2ae4:	10889304 	addi	r2,r2,8780
    2ae8:	980f883a 	mov	r7,r19
    2aec:	d8814115 	stw	r2,1284(sp)
    2af0:	003a7806 	br	14d4 <___vfprintf_internal_r+0x3bc>
    2af4:	00bfffc4 	movi	r2,-1
    2af8:	9880e226 	beq	r19,r2,2e84 <___vfprintf_internal_r+0x1d6c>
    2afc:	d9414d17 	ldw	r5,1332(sp)
    2b00:	008019c4 	movi	r2,103
    2b04:	2880dc26 	beq	r5,r2,2e78 <___vfprintf_internal_r+0x1d60>
    2b08:	008011c4 	movi	r2,71
    2b0c:	2880da26 	beq	r5,r2,2e78 <___vfprintf_internal_r+0x1d60>
    2b10:	d9414c17 	ldw	r5,1328(sp)
    2b14:	d9014317 	ldw	r4,1292(sp)
    2b18:	d9814217 	ldw	r6,1288(sp)
    2b1c:	29404014 	ori	r5,r5,256
    2b20:	d9414c15 	stw	r5,1328(sp)
    2b24:	2000cc16 	blt	r4,zero,2e58 <___vfprintf_internal_r+0x1d40>
    2b28:	3021883a 	mov	r16,r6
    2b2c:	2023883a 	mov	r17,r4
    2b30:	0039883a 	mov	fp,zero
    2b34:	d9414d17 	ldw	r5,1332(sp)
    2b38:	00801984 	movi	r2,102
    2b3c:	2880b726 	beq	r5,r2,2e1c <___vfprintf_internal_r+0x1d04>
    2b40:	00801184 	movi	r2,70
    2b44:	2880b526 	beq	r5,r2,2e1c <___vfprintf_internal_r+0x1d04>
    2b48:	00801944 	movi	r2,101
    2b4c:	2880c826 	beq	r5,r2,2e70 <___vfprintf_internal_r+0x1d58>
    2b50:	00801144 	movi	r2,69
    2b54:	2880c626 	beq	r5,r2,2e70 <___vfprintf_internal_r+0x1d58>
    2b58:	9829883a 	mov	r20,r19
    2b5c:	d9014f17 	ldw	r4,1340(sp)
    2b60:	d8800504 	addi	r2,sp,20
    2b64:	880d883a 	mov	r6,r17
    2b68:	d8800115 	stw	r2,4(sp)
    2b6c:	d8c00604 	addi	r3,sp,24
    2b70:	d8800704 	addi	r2,sp,28
    2b74:	800b883a 	mov	r5,r16
    2b78:	01c00084 	movi	r7,2
    2b7c:	d8c00215 	stw	r3,8(sp)
    2b80:	d8800315 	stw	r2,12(sp)
    2b84:	dd000015 	stw	r20,0(sp)
    2b88:	0004abc0 	call	4abc <_dtoa_r>
    2b8c:	d9814d17 	ldw	r6,1332(sp)
    2b90:	d8814115 	stw	r2,1284(sp)
    2b94:	008019c4 	movi	r2,103
    2b98:	30809526 	beq	r6,r2,2df0 <___vfprintf_internal_r+0x1cd8>
    2b9c:	d8c14d17 	ldw	r3,1332(sp)
    2ba0:	008011c4 	movi	r2,71
    2ba4:	18809226 	beq	r3,r2,2df0 <___vfprintf_internal_r+0x1cd8>
    2ba8:	d9414117 	ldw	r5,1284(sp)
    2bac:	d9814d17 	ldw	r6,1332(sp)
    2bb0:	00801984 	movi	r2,102
    2bb4:	2d25883a 	add	r18,r5,r20
    2bb8:	30808626 	beq	r6,r2,2dd4 <___vfprintf_internal_r+0x1cbc>
    2bbc:	00801184 	movi	r2,70
    2bc0:	30808426 	beq	r6,r2,2dd4 <___vfprintf_internal_r+0x1cbc>
    2bc4:	000d883a 	mov	r6,zero
    2bc8:	000f883a 	mov	r7,zero
    2bcc:	880b883a 	mov	r5,r17
    2bd0:	8009883a 	mov	r4,r16
    2bd4:	000e9300 	call	e930 <__eqdf2>
    2bd8:	1000751e 	bne	r2,zero,2db0 <___vfprintf_internal_r+0x1c98>
    2bdc:	9005883a 	mov	r2,r18
    2be0:	dc800715 	stw	r18,28(sp)
    2be4:	d9014117 	ldw	r4,1284(sp)
    2be8:	d9414d17 	ldw	r5,1332(sp)
    2bec:	00c019c4 	movi	r3,103
    2bf0:	1125c83a 	sub	r18,r2,r4
    2bf4:	28c06826 	beq	r5,r3,2d98 <___vfprintf_internal_r+0x1c80>
    2bf8:	008011c4 	movi	r2,71
    2bfc:	28806626 	beq	r5,r2,2d98 <___vfprintf_internal_r+0x1c80>
    2c00:	d9000517 	ldw	r4,20(sp)
    2c04:	d8c14d17 	ldw	r3,1332(sp)
    2c08:	00801944 	movi	r2,101
    2c0c:	10c05516 	blt	r2,r3,2d64 <___vfprintf_internal_r+0x1c4c>
    2c10:	213fffc4 	addi	r4,r4,-1
    2c14:	d9000515 	stw	r4,20(sp)
    2c18:	d8c00805 	stb	r3,32(sp)
    2c1c:	2021883a 	mov	r16,r4
    2c20:	2000c116 	blt	r4,zero,2f28 <___vfprintf_internal_r+0x1e10>
    2c24:	00800ac4 	movi	r2,43
    2c28:	d8800845 	stb	r2,33(sp)
    2c2c:	00800244 	movi	r2,9
    2c30:	1400af0e 	bge	r2,r16,2ef0 <___vfprintf_internal_r+0x1dd8>
    2c34:	1027883a 	mov	r19,r2
    2c38:	dc400b84 	addi	r17,sp,46
    2c3c:	8009883a 	mov	r4,r16
    2c40:	01400284 	movi	r5,10
    2c44:	000f1140 	call	f114 <__modsi3>
    2c48:	10800c04 	addi	r2,r2,48
    2c4c:	8c7fffc4 	addi	r17,r17,-1
    2c50:	8009883a 	mov	r4,r16
    2c54:	01400284 	movi	r5,10
    2c58:	88800005 	stb	r2,0(r17)
    2c5c:	000f0b40 	call	f0b4 <__divsi3>
    2c60:	1021883a 	mov	r16,r2
    2c64:	98bff516 	blt	r19,r2,2c3c <___vfprintf_internal_r+0x1b24>
    2c68:	10c00c04 	addi	r3,r2,48
    2c6c:	d88009c4 	addi	r2,sp,39
    2c70:	108001c4 	addi	r2,r2,7
    2c74:	897fffc4 	addi	r5,r17,-1
    2c78:	88ffffc5 	stb	r3,-1(r17)
    2c7c:	2880a72e 	bgeu	r5,r2,2f1c <___vfprintf_internal_r+0x1e04>
    2c80:	1009883a 	mov	r4,r2
    2c84:	d9800804 	addi	r6,sp,32
    2c88:	d8c00884 	addi	r3,sp,34
    2c8c:	28800003 	ldbu	r2,0(r5)
    2c90:	29400044 	addi	r5,r5,1
    2c94:	18800005 	stb	r2,0(r3)
    2c98:	18c00044 	addi	r3,r3,1
    2c9c:	293ffb36 	bltu	r5,r4,2c8c <___vfprintf_internal_r+0x1b74>
    2ca0:	1987c83a 	sub	r3,r3,r6
    2ca4:	00800044 	movi	r2,1
    2ca8:	d8c14815 	stw	r3,1312(sp)
    2cac:	90cf883a 	add	r7,r18,r3
    2cb0:	1480960e 	bge	r2,r18,2f0c <___vfprintf_internal_r+0x1df4>
    2cb4:	39c00044 	addi	r7,r7,1
    2cb8:	d9c14515 	stw	r7,1300(sp)
    2cbc:	38003416 	blt	r7,zero,2d90 <___vfprintf_internal_r+0x1c78>
    2cc0:	e0803fcc 	andi	r2,fp,255
    2cc4:	1080201c 	xori	r2,r2,128
    2cc8:	10bfe004 	addi	r2,r2,-128
    2ccc:	10004e26 	beq	r2,zero,2e08 <___vfprintf_internal_r+0x1cf0>
    2cd0:	00800b44 	movi	r2,45
    2cd4:	dc814715 	stw	r18,1308(sp)
    2cd8:	d8014615 	stw	zero,1304(sp)
    2cdc:	d8800405 	stb	r2,16(sp)
    2ce0:	003bb106 	br	1ba8 <___vfprintf_internal_r+0xa90>
    2ce4:	00800b44 	movi	r2,45
    2ce8:	d8800405 	stb	r2,16(sp)
    2cec:	003d3306 	br	21bc <___vfprintf_internal_r+0x10a4>
    2cf0:	d9014f17 	ldw	r4,1340(sp)
    2cf4:	b00b883a 	mov	r5,r22
    2cf8:	d9800c04 	addi	r6,sp,48
    2cfc:	00010c00 	call	10c0 <__sprint_r>
    2d00:	103abd1e 	bne	r2,zero,17f8 <___vfprintf_internal_r+0x6e0>
    2d04:	003abb06 	br	17f4 <___vfprintf_internal_r+0x6dc>
    2d08:	38800017 	ldw	r2,0(r7)
    2d0c:	39c00104 	addi	r7,r7,4
    2d10:	d9c14015 	stw	r7,1280(sp)
    2d14:	d9414b17 	ldw	r5,1324(sp)
    2d18:	d9c14017 	ldw	r7,1280(sp)
    2d1c:	11400015 	stw	r5,0(r2)
    2d20:	00395906 	br	1288 <___vfprintf_internal_r+0x170>
    2d24:	980f883a 	mov	r7,r19
    2d28:	dcc14515 	stw	r19,1300(sp)
    2d2c:	d8014615 	stw	zero,1304(sp)
    2d30:	003b9b06 	br	1ba0 <___vfprintf_internal_r+0xa88>
    2d34:	0027883a 	mov	r19,zero
    2d38:	00397806 	br	131c <___vfprintf_internal_r+0x204>
    2d3c:	00c00074 	movhi	r3,1
    2d40:	18c89304 	addi	r3,r3,8780
    2d44:	100f883a 	mov	r7,r2
    2d48:	d8814515 	stw	r2,1300(sp)
    2d4c:	d8c14115 	stw	r3,1284(sp)
    2d50:	0039e006 	br	14d4 <___vfprintf_internal_r+0x3bc>
    2d54:	00800074 	movhi	r2,1
    2d58:	10889204 	addi	r2,r2,8776
    2d5c:	d8814115 	stw	r2,1284(sp)
    2d60:	003d1c06 	br	21d4 <___vfprintf_internal_r+0x10bc>
    2d64:	d9414d17 	ldw	r5,1332(sp)
    2d68:	00801984 	movi	r2,102
    2d6c:	28804926 	beq	r5,r2,2e94 <___vfprintf_internal_r+0x1d7c>
    2d70:	200f883a 	mov	r7,r4
    2d74:	24805716 	blt	r4,r18,2ed4 <___vfprintf_internal_r+0x1dbc>
    2d78:	d9414c17 	ldw	r5,1328(sp)
    2d7c:	2880004c 	andi	r2,r5,1
    2d80:	10000126 	beq	r2,zero,2d88 <___vfprintf_internal_r+0x1c70>
    2d84:	21c00044 	addi	r7,r4,1
    2d88:	d9c14515 	stw	r7,1300(sp)
    2d8c:	383fcc0e 	bge	r7,zero,2cc0 <___vfprintf_internal_r+0x1ba8>
    2d90:	d8014515 	stw	zero,1300(sp)
    2d94:	003fca06 	br	2cc0 <___vfprintf_internal_r+0x1ba8>
    2d98:	d9000517 	ldw	r4,20(sp)
    2d9c:	00bfff04 	movi	r2,-4
    2da0:	1100480e 	bge	r2,r4,2ec4 <___vfprintf_internal_r+0x1dac>
    2da4:	99004716 	blt	r19,r4,2ec4 <___vfprintf_internal_r+0x1dac>
    2da8:	d8c14d15 	stw	r3,1332(sp)
    2dac:	003ff006 	br	2d70 <___vfprintf_internal_r+0x1c58>
    2db0:	d8800717 	ldw	r2,28(sp)
    2db4:	14bf8b2e 	bgeu	r2,r18,2be4 <___vfprintf_internal_r+0x1acc>
    2db8:	9007883a 	mov	r3,r18
    2dbc:	01000c04 	movi	r4,48
    2dc0:	11000005 	stb	r4,0(r2)
    2dc4:	10800044 	addi	r2,r2,1
    2dc8:	d8800715 	stw	r2,28(sp)
    2dcc:	18bffc1e 	bne	r3,r2,2dc0 <___vfprintf_internal_r+0x1ca8>
    2dd0:	003f8406 	br	2be4 <___vfprintf_internal_r+0x1acc>
    2dd4:	d8814117 	ldw	r2,1284(sp)
    2dd8:	10c00007 	ldb	r3,0(r2)
    2ddc:	00800c04 	movi	r2,48
    2de0:	18805b26 	beq	r3,r2,2f50 <___vfprintf_internal_r+0x1e38>
    2de4:	d9000517 	ldw	r4,20(sp)
    2de8:	9125883a 	add	r18,r18,r4
    2dec:	003f7506 	br	2bc4 <___vfprintf_internal_r+0x1aac>
    2df0:	d9014c17 	ldw	r4,1328(sp)
    2df4:	2080004c 	andi	r2,r4,1
    2df8:	1005003a 	cmpeq	r2,r2,zero
    2dfc:	103f6a26 	beq	r2,zero,2ba8 <___vfprintf_internal_r+0x1a90>
    2e00:	d8800717 	ldw	r2,28(sp)
    2e04:	003f7706 	br	2be4 <___vfprintf_internal_r+0x1acc>
    2e08:	d9c14515 	stw	r7,1300(sp)
    2e0c:	38004d16 	blt	r7,zero,2f44 <___vfprintf_internal_r+0x1e2c>
    2e10:	dc814715 	stw	r18,1308(sp)
    2e14:	d8014615 	stw	zero,1304(sp)
    2e18:	003b6106 	br	1ba0 <___vfprintf_internal_r+0xa88>
    2e1c:	d9014f17 	ldw	r4,1340(sp)
    2e20:	d8800504 	addi	r2,sp,20
    2e24:	d8800115 	stw	r2,4(sp)
    2e28:	d8c00604 	addi	r3,sp,24
    2e2c:	d8800704 	addi	r2,sp,28
    2e30:	800b883a 	mov	r5,r16
    2e34:	880d883a 	mov	r6,r17
    2e38:	01c000c4 	movi	r7,3
    2e3c:	d8c00215 	stw	r3,8(sp)
    2e40:	d8800315 	stw	r2,12(sp)
    2e44:	dcc00015 	stw	r19,0(sp)
    2e48:	9829883a 	mov	r20,r19
    2e4c:	0004abc0 	call	4abc <_dtoa_r>
    2e50:	d8814115 	stw	r2,1284(sp)
    2e54:	003f5106 	br	2b9c <___vfprintf_internal_r+0x1a84>
    2e58:	d8c14217 	ldw	r3,1288(sp)
    2e5c:	d9014317 	ldw	r4,1292(sp)
    2e60:	07000b44 	movi	fp,45
    2e64:	1821883a 	mov	r16,r3
    2e68:	2460003c 	xorhi	r17,r4,32768
    2e6c:	003f3106 	br	2b34 <___vfprintf_internal_r+0x1a1c>
    2e70:	9d000044 	addi	r20,r19,1
    2e74:	003f3906 	br	2b5c <___vfprintf_internal_r+0x1a44>
    2e78:	983f251e 	bne	r19,zero,2b10 <___vfprintf_internal_r+0x19f8>
    2e7c:	04c00044 	movi	r19,1
    2e80:	003f2306 	br	2b10 <___vfprintf_internal_r+0x19f8>
    2e84:	04c00184 	movi	r19,6
    2e88:	003f2106 	br	2b10 <___vfprintf_internal_r+0x19f8>
    2e8c:	d8014515 	stw	zero,1300(sp)
    2e90:	003eee06 	br	2a4c <___vfprintf_internal_r+0x1934>
    2e94:	200f883a 	mov	r7,r4
    2e98:	0100370e 	bge	zero,r4,2f78 <___vfprintf_internal_r+0x1e60>
    2e9c:	9800031e 	bne	r19,zero,2eac <___vfprintf_internal_r+0x1d94>
    2ea0:	d9814c17 	ldw	r6,1328(sp)
    2ea4:	3080004c 	andi	r2,r6,1
    2ea8:	103fb726 	beq	r2,zero,2d88 <___vfprintf_internal_r+0x1c70>
    2eac:	20800044 	addi	r2,r4,1
    2eb0:	98a7883a 	add	r19,r19,r2
    2eb4:	dcc14515 	stw	r19,1300(sp)
    2eb8:	980f883a 	mov	r7,r19
    2ebc:	983f800e 	bge	r19,zero,2cc0 <___vfprintf_internal_r+0x1ba8>
    2ec0:	003fb306 	br	2d90 <___vfprintf_internal_r+0x1c78>
    2ec4:	d9814d17 	ldw	r6,1332(sp)
    2ec8:	31bfff84 	addi	r6,r6,-2
    2ecc:	d9814d15 	stw	r6,1332(sp)
    2ed0:	003f4c06 	br	2c04 <___vfprintf_internal_r+0x1aec>
    2ed4:	0100180e 	bge	zero,r4,2f38 <___vfprintf_internal_r+0x1e20>
    2ed8:	00800044 	movi	r2,1
    2edc:	1485883a 	add	r2,r2,r18
    2ee0:	d8814515 	stw	r2,1300(sp)
    2ee4:	100f883a 	mov	r7,r2
    2ee8:	103f750e 	bge	r2,zero,2cc0 <___vfprintf_internal_r+0x1ba8>
    2eec:	003fa806 	br	2d90 <___vfprintf_internal_r+0x1c78>
    2ef0:	80c00c04 	addi	r3,r16,48
    2ef4:	00800c04 	movi	r2,48
    2ef8:	d8c008c5 	stb	r3,35(sp)
    2efc:	d9800804 	addi	r6,sp,32
    2f00:	d8c00904 	addi	r3,sp,36
    2f04:	d8800885 	stb	r2,34(sp)
    2f08:	003f6506 	br	2ca0 <___vfprintf_internal_r+0x1b88>
    2f0c:	d9014c17 	ldw	r4,1328(sp)
    2f10:	2084703a 	and	r2,r4,r2
    2f14:	103f9c26 	beq	r2,zero,2d88 <___vfprintf_internal_r+0x1c70>
    2f18:	003f6606 	br	2cb4 <___vfprintf_internal_r+0x1b9c>
    2f1c:	d9800804 	addi	r6,sp,32
    2f20:	d8c00884 	addi	r3,sp,34
    2f24:	003f5e06 	br	2ca0 <___vfprintf_internal_r+0x1b88>
    2f28:	00800b44 	movi	r2,45
    2f2c:	0121c83a 	sub	r16,zero,r4
    2f30:	d8800845 	stb	r2,33(sp)
    2f34:	003f3d06 	br	2c2c <___vfprintf_internal_r+0x1b14>
    2f38:	00800084 	movi	r2,2
    2f3c:	1105c83a 	sub	r2,r2,r4
    2f40:	003fe606 	br	2edc <___vfprintf_internal_r+0x1dc4>
    2f44:	d8014515 	stw	zero,1300(sp)
    2f48:	dc814715 	stw	r18,1308(sp)
    2f4c:	003fb106 	br	2e14 <___vfprintf_internal_r+0x1cfc>
    2f50:	000d883a 	mov	r6,zero
    2f54:	000f883a 	mov	r7,zero
    2f58:	8009883a 	mov	r4,r16
    2f5c:	880b883a 	mov	r5,r17
    2f60:	000e9b80 	call	e9b8 <__nedf2>
    2f64:	103f9f26 	beq	r2,zero,2de4 <___vfprintf_internal_r+0x1ccc>
    2f68:	00800044 	movi	r2,1
    2f6c:	1509c83a 	sub	r4,r2,r20
    2f70:	d9000515 	stw	r4,20(sp)
    2f74:	003f9b06 	br	2de4 <___vfprintf_internal_r+0x1ccc>
    2f78:	98000d1e 	bne	r19,zero,2fb0 <___vfprintf_internal_r+0x1e98>
    2f7c:	d8c14c17 	ldw	r3,1328(sp)
    2f80:	1880004c 	andi	r2,r3,1
    2f84:	10000a1e 	bne	r2,zero,2fb0 <___vfprintf_internal_r+0x1e98>
    2f88:	01000044 	movi	r4,1
    2f8c:	200f883a 	mov	r7,r4
    2f90:	d9014515 	stw	r4,1300(sp)
    2f94:	003f4a06 	br	2cc0 <___vfprintf_internal_r+0x1ba8>
    2f98:	3cc00017 	ldw	r19,0(r7)
    2f9c:	39c00104 	addi	r7,r7,4
    2fa0:	983d0e0e 	bge	r19,zero,23dc <___vfprintf_internal_r+0x12c4>
    2fa4:	b8c00007 	ldb	r3,0(r23)
    2fa8:	04ffffc4 	movi	r19,-1
    2fac:	0038d906 	br	1314 <___vfprintf_internal_r+0x1fc>
    2fb0:	9cc00084 	addi	r19,r19,2
    2fb4:	dcc14515 	stw	r19,1300(sp)
    2fb8:	980f883a 	mov	r7,r19
    2fbc:	983f400e 	bge	r19,zero,2cc0 <___vfprintf_internal_r+0x1ba8>
    2fc0:	003f7306 	br	2d90 <___vfprintf_internal_r+0x1c78>

00002fc4 <__vfprintf_internal>:
    2fc4:	00800074 	movhi	r2,1
    2fc8:	1090f904 	addi	r2,r2,17380
    2fcc:	2013883a 	mov	r9,r4
    2fd0:	11000017 	ldw	r4,0(r2)
    2fd4:	2805883a 	mov	r2,r5
    2fd8:	300f883a 	mov	r7,r6
    2fdc:	480b883a 	mov	r5,r9
    2fe0:	100d883a 	mov	r6,r2
    2fe4:	00011181 	jmpi	1118 <___vfprintf_internal_r>

00002fe8 <__svfscanf_r>:
    2fe8:	deff4e04 	addi	sp,sp,-712
    2fec:	dd80ae15 	stw	r22,696(sp)
    2ff0:	dd00ac15 	stw	r20,688(sp)
    2ff4:	dc40a915 	stw	r17,676(sp)
    2ff8:	dc00a815 	stw	r16,672(sp)
    2ffc:	dfc0b115 	stw	ra,708(sp)
    3000:	df00b015 	stw	fp,704(sp)
    3004:	ddc0af15 	stw	r23,700(sp)
    3008:	dd40ad15 	stw	r21,692(sp)
    300c:	dcc0ab15 	stw	r19,684(sp)
    3010:	dc80aa15 	stw	r18,680(sp)
    3014:	202d883a 	mov	r22,r4
    3018:	2821883a 	mov	r16,r5
    301c:	d9c0a415 	stw	r7,656(sp)
    3020:	3029883a 	mov	r20,r6
    3024:	d800a215 	stw	zero,648(sp)
    3028:	0023883a 	mov	r17,zero
    302c:	d800a115 	stw	zero,644(sp)
    3030:	d800a015 	stw	zero,640(sp)
    3034:	a1000007 	ldb	r4,0(r20)
    3038:	d9000115 	stw	r4,4(sp)
    303c:	20001f26 	beq	r4,zero,30bc <__svfscanf_r+0xd4>
    3040:	04800074 	movhi	r18,1
    3044:	9490f804 	addi	r18,r18,17376
    3048:	91800017 	ldw	r6,0(r18)
    304c:	a5000044 	addi	r20,r20,1
    3050:	3107883a 	add	r3,r6,r4
    3054:	18800003 	ldbu	r2,0(r3)
    3058:	1080020c 	andi	r2,r2,8
    305c:	10002426 	beq	r2,zero,30f0 <__svfscanf_r+0x108>
    3060:	80c00117 	ldw	r3,4(r16)
    3064:	00c00e0e 	bge	zero,r3,30a0 <__svfscanf_r+0xb8>
    3068:	81400017 	ldw	r5,0(r16)
    306c:	90800017 	ldw	r2,0(r18)
    3070:	28c00003 	ldbu	r3,0(r5)
    3074:	1887883a 	add	r3,r3,r2
    3078:	19000003 	ldbu	r4,0(r3)
    307c:	2100020c 	andi	r4,r4,8
    3080:	203fec26 	beq	r4,zero,3034 <__svfscanf_r+0x4c>
    3084:	80c00117 	ldw	r3,4(r16)
    3088:	29800044 	addi	r6,r5,1
    308c:	8c400044 	addi	r17,r17,1
    3090:	18ffffc4 	addi	r3,r3,-1
    3094:	81800015 	stw	r6,0(r16)
    3098:	80c00115 	stw	r3,4(r16)
    309c:	00fff216 	blt	zero,r3,3068 <__svfscanf_r+0x80>
    30a0:	b009883a 	mov	r4,r22
    30a4:	800b883a 	mov	r5,r16
    30a8:	00095a00 	call	95a0 <__srefill_r>
    30ac:	103fee26 	beq	r2,zero,3068 <__svfscanf_r+0x80>
    30b0:	a1000007 	ldb	r4,0(r20)
    30b4:	d9000115 	stw	r4,4(sp)
    30b8:	203fe11e 	bne	r4,zero,3040 <__svfscanf_r+0x58>
    30bc:	d880a217 	ldw	r2,648(sp)
    30c0:	dfc0b117 	ldw	ra,708(sp)
    30c4:	df00b017 	ldw	fp,704(sp)
    30c8:	ddc0af17 	ldw	r23,700(sp)
    30cc:	dd80ae17 	ldw	r22,696(sp)
    30d0:	dd40ad17 	ldw	r21,692(sp)
    30d4:	dd00ac17 	ldw	r20,688(sp)
    30d8:	dcc0ab17 	ldw	r19,684(sp)
    30dc:	dc80aa17 	ldw	r18,680(sp)
    30e0:	dc40a917 	ldw	r17,676(sp)
    30e4:	dc00a817 	ldw	r16,672(sp)
    30e8:	dec0b204 	addi	sp,sp,712
    30ec:	f800283a 	ret
    30f0:	00800944 	movi	r2,37
    30f4:	20801626 	beq	r4,r2,3150 <__svfscanf_r+0x168>
    30f8:	80800117 	ldw	r2,4(r16)
    30fc:	00800b0e 	bge	zero,r2,312c <__svfscanf_r+0x144>
    3100:	81000017 	ldw	r4,0(r16)
    3104:	a0ffffc7 	ldb	r3,-1(r20)
    3108:	20800003 	ldbu	r2,0(r4)
    310c:	10ffeb1e 	bne	r2,r3,30bc <__svfscanf_r+0xd4>
    3110:	80c00117 	ldw	r3,4(r16)
    3114:	21800044 	addi	r6,r4,1
    3118:	8c400044 	addi	r17,r17,1
    311c:	18ffffc4 	addi	r3,r3,-1
    3120:	80c00115 	stw	r3,4(r16)
    3124:	81800015 	stw	r6,0(r16)
    3128:	003fc206 	br	3034 <__svfscanf_r+0x4c>
    312c:	b009883a 	mov	r4,r22
    3130:	800b883a 	mov	r5,r16
    3134:	00095a00 	call	95a0 <__srefill_r>
    3138:	103ff126 	beq	r2,zero,3100 <__svfscanf_r+0x118>
    313c:	d900a217 	ldw	r4,648(sp)
    3140:	2004c91e 	bne	r4,zero,4468 <__svfscanf_r+0x1480>
    3144:	00bfffc4 	movi	r2,-1
    3148:	d880a215 	stw	r2,648(sp)
    314c:	003fdb06 	br	30bc <__svfscanf_r+0xd4>
    3150:	d800a315 	stw	zero,652(sp)
    3154:	0027883a 	mov	r19,zero
    3158:	a0c00003 	ldbu	r3,0(r20)
    315c:	00801e04 	movi	r2,120
    3160:	a5000044 	addi	r20,r20,1
    3164:	19403fcc 	andi	r5,r3,255
    3168:	2940201c 	xori	r5,r5,128
    316c:	297fe004 	addi	r5,r5,-128
    3170:	10c08036 	bltu	r2,r3,3374 <__svfscanf_r+0x38c>
    3174:	18c5883a 	add	r2,r3,r3
    3178:	1085883a 	add	r2,r2,r2
    317c:	00c00034 	movhi	r3,0
    3180:	18cc6404 	addi	r3,r3,12688
    3184:	10c5883a 	add	r2,r2,r3
    3188:	11000017 	ldw	r4,0(r2)
    318c:	2000683a 	jmp	r4
    3190:	00003144 	movi	zero,197
    3194:	00003374 	movhi	zero,205
    3198:	00003374 	movhi	zero,205
    319c:	00003374 	movhi	zero,205
    31a0:	00003374 	movhi	zero,205
    31a4:	00003374 	movhi	zero,205
    31a8:	00003374 	movhi	zero,205
    31ac:	00003374 	movhi	zero,205
    31b0:	00003374 	movhi	zero,205
    31b4:	00003374 	movhi	zero,205
    31b8:	00003374 	movhi	zero,205
    31bc:	00003374 	movhi	zero,205
    31c0:	00003374 	movhi	zero,205
    31c4:	00003374 	movhi	zero,205
    31c8:	00003374 	movhi	zero,205
    31cc:	00003374 	movhi	zero,205
    31d0:	00003374 	movhi	zero,205
    31d4:	00003374 	movhi	zero,205
    31d8:	00003374 	movhi	zero,205
    31dc:	00003374 	movhi	zero,205
    31e0:	00003374 	movhi	zero,205
    31e4:	00003374 	movhi	zero,205
    31e8:	00003374 	movhi	zero,205
    31ec:	00003374 	movhi	zero,205
    31f0:	00003374 	movhi	zero,205
    31f4:	00003374 	movhi	zero,205
    31f8:	00003374 	movhi	zero,205
    31fc:	00003374 	movhi	zero,205
    3200:	00003374 	movhi	zero,205
    3204:	00003374 	movhi	zero,205
    3208:	00003374 	movhi	zero,205
    320c:	00003374 	movhi	zero,205
    3210:	00003374 	movhi	zero,205
    3214:	00003374 	movhi	zero,205
    3218:	00003374 	movhi	zero,205
    321c:	00003374 	movhi	zero,205
    3220:	00003374 	movhi	zero,205
    3224:	000030f8 	rdprs	zero,zero,195
    3228:	00003374 	movhi	zero,205
    322c:	00003374 	movhi	zero,205
    3230:	00003374 	movhi	zero,205
    3234:	00003374 	movhi	zero,205
    3238:	00004398 	cmpnei	zero,zero,270
    323c:	00003374 	movhi	zero,205
    3240:	00003374 	movhi	zero,205
    3244:	00003374 	movhi	zero,205
    3248:	00003374 	movhi	zero,205
    324c:	00003374 	movhi	zero,205
    3250:	00003d94 	movui	zero,246
    3254:	00003d94 	movui	zero,246
    3258:	00003d94 	movui	zero,246
    325c:	00003d94 	movui	zero,246
    3260:	00003d94 	movui	zero,246
    3264:	00003d94 	movui	zero,246
    3268:	00003d94 	movui	zero,246
    326c:	00003d94 	movui	zero,246
    3270:	00003d94 	movui	zero,246
    3274:	00003d94 	movui	zero,246
    3278:	00003374 	movhi	zero,205
    327c:	00003374 	movhi	zero,205
    3280:	00003374 	movhi	zero,205
    3284:	00003374 	movhi	zero,205
    3288:	00003374 	movhi	zero,205
    328c:	00003374 	movhi	zero,205
    3290:	00003374 	movhi	zero,205
    3294:	00003374 	movhi	zero,205
    3298:	00003374 	movhi	zero,205
    329c:	00003374 	movhi	zero,205
    32a0:	00004514 	movui	zero,276
    32a4:	0000450c 	andi	zero,zero,276
    32a8:	00003374 	movhi	zero,205
    32ac:	0000450c 	andi	zero,zero,276
    32b0:	00003374 	movhi	zero,205
    32b4:	00003374 	movhi	zero,205
    32b8:	00003374 	movhi	zero,205
    32bc:	00003374 	movhi	zero,205
    32c0:	000045a4 	muli	zero,zero,278
    32c4:	00003374 	movhi	zero,205
    32c8:	00003374 	movhi	zero,205
    32cc:	0000455c 	xori	zero,zero,277
    32d0:	00003374 	movhi	zero,205
    32d4:	00003374 	movhi	zero,205
    32d8:	00003374 	movhi	zero,205
    32dc:	00003374 	movhi	zero,205
    32e0:	00003374 	movhi	zero,205
    32e4:	00003374 	movhi	zero,205
    32e8:	00003374 	movhi	zero,205
    32ec:	00003374 	movhi	zero,205
    32f0:	000043a0 	cmpeqi	zero,zero,270
    32f4:	00003374 	movhi	zero,205
    32f8:	00003374 	movhi	zero,205
    32fc:	00004540 	call	454 <main+0x2a0>
    3300:	00003374 	movhi	zero,205
    3304:	00003374 	movhi	zero,205
    3308:	00003374 	movhi	zero,205
    330c:	00003374 	movhi	zero,205
    3310:	00003374 	movhi	zero,205
    3314:	00003374 	movhi	zero,205
    3318:	00003374 	movhi	zero,205
    331c:	00004534 	movhi	zero,276
    3320:	00004518 	cmpnei	zero,zero,276
    3324:	0000450c 	andi	zero,zero,276
    3328:	0000450c 	andi	zero,zero,276
    332c:	0000450c 	andi	zero,zero,276
    3330:	00004504 	movi	zero,276
    3334:	000045f8 	rdprs	zero,zero,279
    3338:	00003374 	movhi	zero,205
    333c:	00003374 	movhi	zero,205
    3340:	000045e4 	muli	zero,zero,279
    3344:	00003374 	movhi	zero,205
    3348:	0000457c 	xorhi	zero,zero,277
    334c:	00004560 	cmpeqi	zero,zero,277
    3350:	000045b4 	movhi	zero,278
    3354:	00003374 	movhi	zero,205
    3358:	00003374 	movhi	zero,205
    335c:	000045ac 	andhi	zero,zero,278
    3360:	00003374 	movhi	zero,205
    3364:	000038e4 	muli	zero,zero,227
    3368:	00003374 	movhi	zero,205
    336c:	00003374 	movhi	zero,205
    3370:	000043a0 	cmpeqi	zero,zero,270
    3374:	2987883a 	add	r3,r5,r6
    3378:	18800003 	ldbu	r2,0(r3)
    337c:	1080004c 	andi	r2,r2,1
    3380:	1005003a 	cmpeq	r2,r2,zero
    3384:	10002c26 	beq	r2,zero,3438 <__svfscanf_r+0x450>
    3388:	01000074 	movhi	r4,1
    338c:	212cb904 	addi	r4,r4,-19740
    3390:	00800284 	movi	r2,10
    3394:	d900a015 	stw	r4,640(sp)
    3398:	054000c4 	movi	r21,3
    339c:	d880a115 	stw	r2,644(sp)
    33a0:	80c00117 	ldw	r3,4(r16)
    33a4:	00c14a0e 	bge	zero,r3,38d0 <__svfscanf_r+0x8e8>
    33a8:	9880100c 	andi	r2,r19,64
    33ac:	10001326 	beq	r2,zero,33fc <__svfscanf_r+0x414>
    33b0:	00800104 	movi	r2,4
    33b4:	157f1f36 	bltu	r2,r21,3034 <__svfscanf_r+0x4c>
    33b8:	ad45883a 	add	r2,r21,r21
    33bc:	1085883a 	add	r2,r2,r2
    33c0:	00c00034 	movhi	r3,0
    33c4:	18ccf504 	addi	r3,r3,13268
    33c8:	10c5883a 	add	r2,r2,r3
    33cc:	11000017 	ldw	r4,0(r2)
    33d0:	2000683a 	jmp	r4
    33d4:	00003440 	call	344 <main+0x190>
    33d8:	0000354c 	andi	zero,zero,213
    33dc:	000035c0 	call	35c <main+0x1a8>
    33e0:	000038ac 	andhi	zero,zero,226
    33e4:	000036f8 	rdprs	zero,zero,219
    33e8:	b009883a 	mov	r4,r22
    33ec:	800b883a 	mov	r5,r16
    33f0:	00095a00 	call	95a0 <__srefill_r>
    33f4:	103f511e 	bne	r2,zero,313c <__svfscanf_r+0x154>
    33f8:	8c400044 	addi	r17,r17,1
    33fc:	81400017 	ldw	r5,0(r16)
    3400:	90800017 	ldw	r2,0(r18)
    3404:	28c00003 	ldbu	r3,0(r5)
    3408:	1887883a 	add	r3,r3,r2
    340c:	19000003 	ldbu	r4,0(r3)
    3410:	2100020c 	andi	r4,r4,8
    3414:	203fe626 	beq	r4,zero,33b0 <__svfscanf_r+0x3c8>
    3418:	80c00117 	ldw	r3,4(r16)
    341c:	18ffffc4 	addi	r3,r3,-1
    3420:	80c00115 	stw	r3,4(r16)
    3424:	00fff00e 	bge	zero,r3,33e8 <__svfscanf_r+0x400>
    3428:	29800044 	addi	r6,r5,1
    342c:	8c400044 	addi	r17,r17,1
    3430:	81800015 	stw	r6,0(r16)
    3434:	003ff106 	br	33fc <__svfscanf_r+0x414>
    3438:	9cc00054 	ori	r19,r19,1
    343c:	003fd206 	br	3388 <__svfscanf_r+0x3a0>
    3440:	d8c0a317 	ldw	r3,652(sp)
    3444:	1800021e 	bne	r3,zero,3450 <__svfscanf_r+0x468>
    3448:	01000044 	movi	r4,1
    344c:	d900a315 	stw	r4,652(sp)
    3450:	9880004c 	andi	r2,r19,1
    3454:	1005003a 	cmpeq	r2,r2,zero
    3458:	1003d91e 	bne	r2,zero,43c0 <__svfscanf_r+0x13d8>
    345c:	9d40040c 	andi	r21,r19,16
    3460:	a839003a 	cmpeq	fp,r21,zero
    3464:	e0042526 	beq	fp,zero,44fc <__svfscanf_r+0x1514>
    3468:	d880a417 	ldw	r2,656(sp)
    346c:	14c00017 	ldw	r19,0(r2)
    3470:	10800104 	addi	r2,r2,4
    3474:	d880a415 	stw	r2,656(sp)
    3478:	d8c0a317 	ldw	r3,652(sp)
    347c:	18041a26 	beq	r3,zero,44e8 <__svfscanf_r+0x1500>
    3480:	01000074 	movhi	r4,1
    3484:	2110fb04 	addi	r4,r4,17388
    3488:	20800017 	ldw	r2,0(r4)
    348c:	103f2b26 	beq	r2,zero,313c <__svfscanf_r+0x154>
    3490:	d8804404 	addi	r2,sp,272
    3494:	0025883a 	mov	r18,zero
    3498:	d880a615 	stw	r2,664(sp)
    349c:	05ffffc4 	movi	r23,-1
    34a0:	80800017 	ldw	r2,0(r16)
    34a4:	80c00117 	ldw	r3,4(r16)
    34a8:	d900a617 	ldw	r4,664(sp)
    34ac:	12000003 	ldbu	r8,0(r2)
    34b0:	18ffffc4 	addi	r3,r3,-1
    34b4:	11800044 	addi	r6,r2,1
    34b8:	248f883a 	add	r7,r4,r18
    34bc:	80c00115 	stw	r3,4(r16)
    34c0:	81800015 	stw	r6,0(r16)
    34c4:	3a000005 	stb	r8,0(r7)
    34c8:	d9000204 	addi	r4,sp,8
    34cc:	000b883a 	mov	r5,zero
    34d0:	01800204 	movi	r6,8
    34d4:	0007f200 	call	7f20 <memset>
    34d8:	d980a617 	ldw	r6,664(sp)
    34dc:	94800044 	addi	r18,r18,1
    34e0:	d8800204 	addi	r2,sp,8
    34e4:	b009883a 	mov	r4,r22
    34e8:	980b883a 	mov	r5,r19
    34ec:	900f883a 	mov	r7,r18
    34f0:	d8800015 	stw	r2,0(sp)
    34f4:	0007bbc0 	call	7bbc <_mbrtowc_r>
    34f8:	1007883a 	mov	r3,r2
    34fc:	15ff0f26 	beq	r2,r23,313c <__svfscanf_r+0x154>
    3500:	1003f11e 	bne	r2,zero,44c8 <__svfscanf_r+0x14e0>
    3504:	a800011e 	bne	r21,zero,350c <__svfscanf_r+0x524>
    3508:	98000015 	stw	zero,0(r19)
    350c:	d8c0a317 	ldw	r3,652(sp)
    3510:	8ca3883a 	add	r17,r17,r18
    3514:	18ffffc4 	addi	r3,r3,-1
    3518:	d8c0a315 	stw	r3,652(sp)
    351c:	e0000126 	beq	fp,zero,3524 <__svfscanf_r+0x53c>
    3520:	9cc00104 	addi	r19,r19,4
    3524:	0025883a 	mov	r18,zero
    3528:	80c00117 	ldw	r3,4(r16)
    352c:	00c3e90e 	bge	zero,r3,44d4 <__svfscanf_r+0x14ec>
    3530:	d900a317 	ldw	r4,652(sp)
    3534:	2003ec26 	beq	r4,zero,44e8 <__svfscanf_r+0x1500>
    3538:	00c00074 	movhi	r3,1
    353c:	18d0fb04 	addi	r3,r3,17388
    3540:	18800017 	ldw	r2,0(r3)
    3544:	90bfd61e 	bne	r18,r2,34a0 <__svfscanf_r+0x4b8>
    3548:	003efc06 	br	313c <__svfscanf_r+0x154>
    354c:	d880a317 	ldw	r2,652(sp)
    3550:	1000021e 	bne	r2,zero,355c <__svfscanf_r+0x574>
    3554:	00ffffc4 	movi	r3,-1
    3558:	d8c0a315 	stw	r3,652(sp)
    355c:	9880040c 	andi	r2,r19,16
    3560:	10036526 	beq	r2,zero,42f8 <__svfscanf_r+0x1310>
    3564:	0027883a 	mov	r19,zero
    3568:	dd400404 	addi	r21,sp,16
    356c:	81000017 	ldw	r4,0(r16)
    3570:	20800003 	ldbu	r2,0(r4)
    3574:	a885883a 	add	r2,r21,r2
    3578:	10c00007 	ldb	r3,0(r2)
    357c:	1803be26 	beq	r3,zero,4478 <__svfscanf_r+0x1490>
    3580:	80c00117 	ldw	r3,4(r16)
    3584:	21800044 	addi	r6,r4,1
    3588:	d900a317 	ldw	r4,652(sp)
    358c:	18ffffc4 	addi	r3,r3,-1
    3590:	9cc00044 	addi	r19,r19,1
    3594:	81800015 	stw	r6,0(r16)
    3598:	80c00115 	stw	r3,4(r16)
    359c:	24c3b626 	beq	r4,r19,4478 <__svfscanf_r+0x1490>
    35a0:	00fff216 	blt	zero,r3,356c <__svfscanf_r+0x584>
    35a4:	b009883a 	mov	r4,r22
    35a8:	800b883a 	mov	r5,r16
    35ac:	00095a00 	call	95a0 <__srefill_r>
    35b0:	103fee26 	beq	r2,zero,356c <__svfscanf_r+0x584>
    35b4:	983ee126 	beq	r19,zero,313c <__svfscanf_r+0x154>
    35b8:	8ce3883a 	add	r17,r17,r19
    35bc:	003e9d06 	br	3034 <__svfscanf_r+0x4c>
    35c0:	d900a317 	ldw	r4,652(sp)
    35c4:	2000021e 	bne	r4,zero,35d0 <__svfscanf_r+0x5e8>
    35c8:	00bfffc4 	movi	r2,-1
    35cc:	d880a315 	stw	r2,652(sp)
    35d0:	9880004c 	andi	r2,r19,1
    35d4:	1005003a 	cmpeq	r2,r2,zero
    35d8:	1001f41e 	bne	r2,zero,3dac <__svfscanf_r+0xdc4>
    35dc:	9dc0040c 	andi	r23,r19,16
    35e0:	b807003a 	cmpeq	r3,r23,zero
    35e4:	d8c0a515 	stw	r3,660(sp)
    35e8:	1803b21e 	bne	r3,zero,44b4 <__svfscanf_r+0x14cc>
    35ec:	dd400104 	addi	r21,sp,4
    35f0:	0027883a 	mov	r19,zero
    35f4:	073fffc4 	movi	fp,-1
    35f8:	81400017 	ldw	r5,0(r16)
    35fc:	90800017 	ldw	r2,0(r18)
    3600:	29c00003 	ldbu	r7,0(r5)
    3604:	38c03fcc 	andi	r3,r7,255
    3608:	1887883a 	add	r3,r3,r2
    360c:	19000003 	ldbu	r4,0(r3)
    3610:	2100020c 	andi	r4,r4,8
    3614:	2000321e 	bne	r4,zero,36e0 <__svfscanf_r+0x6f8>
    3618:	d8c0a317 	ldw	r3,652(sp)
    361c:	18003026 	beq	r3,zero,36e0 <__svfscanf_r+0x6f8>
    3620:	00800074 	movhi	r2,1
    3624:	1090fb04 	addi	r2,r2,17388
    3628:	10c00017 	ldw	r3,0(r2)
    362c:	98fec326 	beq	r19,r3,313c <__svfscanf_r+0x154>
    3630:	d8c04404 	addi	r3,sp,272
    3634:	80800117 	ldw	r2,4(r16)
    3638:	d8c0a615 	stw	r3,664(sp)
    363c:	d900a617 	ldw	r4,664(sp)
    3640:	10ffffc4 	addi	r3,r2,-1
    3644:	29800044 	addi	r6,r5,1
    3648:	80c00115 	stw	r3,4(r16)
    364c:	24c5883a 	add	r2,r4,r19
    3650:	81800015 	stw	r6,0(r16)
    3654:	d9000204 	addi	r4,sp,8
    3658:	000b883a 	mov	r5,zero
    365c:	01800204 	movi	r6,8
    3660:	11c00005 	stb	r7,0(r2)
    3664:	0007f200 	call	7f20 <memset>
    3668:	d980a617 	ldw	r6,664(sp)
    366c:	9cc00044 	addi	r19,r19,1
    3670:	d8800204 	addi	r2,sp,8
    3674:	b009883a 	mov	r4,r22
    3678:	a80b883a 	mov	r5,r21
    367c:	980f883a 	mov	r7,r19
    3680:	d8800015 	stw	r2,0(sp)
    3684:	0007bbc0 	call	7bbc <_mbrtowc_r>
    3688:	1007883a 	mov	r3,r2
    368c:	173eab26 	beq	r2,fp,313c <__svfscanf_r+0x154>
    3690:	1003851e 	bne	r2,zero,44a8 <__svfscanf_r+0x14c0>
    3694:	a8000015 	stw	zero,0(r21)
    3698:	a9000017 	ldw	r4,0(r21)
    369c:	00071f80 	call	71f8 <iswspace>
    36a0:	1003781e 	bne	r2,zero,4484 <__svfscanf_r+0x149c>
    36a4:	d900a317 	ldw	r4,652(sp)
    36a8:	d880a517 	ldw	r2,660(sp)
    36ac:	8ce3883a 	add	r17,r17,r19
    36b0:	213fffc4 	addi	r4,r4,-1
    36b4:	d900a315 	stw	r4,652(sp)
    36b8:	10000126 	beq	r2,zero,36c0 <__svfscanf_r+0x6d8>
    36bc:	ad400104 	addi	r21,r21,4
    36c0:	0027883a 	mov	r19,zero
    36c4:	80c00117 	ldw	r3,4(r16)
    36c8:	00ffcb16 	blt	zero,r3,35f8 <__svfscanf_r+0x610>
    36cc:	b009883a 	mov	r4,r22
    36d0:	800b883a 	mov	r5,r16
    36d4:	00095a00 	call	95a0 <__srefill_r>
    36d8:	103fc726 	beq	r2,zero,35f8 <__svfscanf_r+0x610>
    36dc:	983e971e 	bne	r19,zero,313c <__svfscanf_r+0x154>
    36e0:	b83e541e 	bne	r23,zero,3034 <__svfscanf_r+0x4c>
    36e4:	d900a217 	ldw	r4,648(sp)
    36e8:	a8000015 	stw	zero,0(r21)
    36ec:	21000044 	addi	r4,r4,1
    36f0:	d900a215 	stw	r4,648(sp)
    36f4:	003e4f06 	br	3034 <__svfscanf_r+0x4c>
    36f8:	d900a317 	ldw	r4,652(sp)
    36fc:	00805704 	movi	r2,348
    3700:	20ffffc4 	addi	r3,r4,-1
    3704:	10c1ed2e 	bgeu	r2,r3,3ebc <__svfscanf_r+0xed4>
    3708:	00805744 	movi	r2,349
    370c:	21bfa8c4 	addi	r6,r4,-349
    3710:	9d41e014 	ori	r21,r19,1920
    3714:	d880a315 	stw	r2,652(sp)
    3718:	d8c04404 	addi	r3,sp,272
    371c:	d8c0a615 	stw	r3,664(sp)
    3720:	182f883a 	mov	r23,r3
    3724:	d8009f15 	stw	zero,636(sp)
    3728:	d8009e15 	stw	zero,632(sp)
    372c:	d8009d15 	stw	zero,628(sp)
    3730:	d8009c15 	stw	zero,624(sp)
    3734:	0039883a 	mov	fp,zero
    3738:	0025883a 	mov	r18,zero
    373c:	80800017 	ldw	r2,0(r16)
    3740:	11400003 	ldbu	r5,0(r2)
    3744:	00801384 	movi	r2,78
    3748:	28fff544 	addi	r3,r5,-43
    374c:	18c03fcc 	andi	r3,r3,255
    3750:	10c07d36 	bltu	r2,r3,3948 <__svfscanf_r+0x960>
    3754:	18c5883a 	add	r2,r3,r3
    3758:	1085883a 	add	r2,r2,r2
    375c:	00c00034 	movhi	r3,0
    3760:	18cddc04 	addi	r3,r3,14192
    3764:	10c5883a 	add	r2,r2,r3
    3768:	11000017 	ldw	r4,0(r2)
    376c:	2000683a 	jmp	r4
    3770:	00003900 	call	390 <main+0x1dc>
    3774:	00003948 	cmpgei	zero,zero,229
    3778:	00003900 	call	390 <main+0x1dc>
    377c:	00003a94 	movui	zero,234
    3780:	00003948 	cmpgei	zero,zero,229
    3784:	00003acc 	andi	zero,zero,235
    3788:	00003b00 	call	3b0 <main+0x1fc>
    378c:	00003b00 	call	3b0 <main+0x1fc>
    3790:	00003b00 	call	3b0 <main+0x1fc>
    3794:	00003b00 	call	3b0 <main+0x1fc>
    3798:	00003b00 	call	3b0 <main+0x1fc>
    379c:	00003b00 	call	3b0 <main+0x1fc>
    37a0:	00003b00 	call	3b0 <main+0x1fc>
    37a4:	00003b00 	call	3b0 <main+0x1fc>
    37a8:	00003b00 	call	3b0 <main+0x1fc>
    37ac:	00003948 	cmpgei	zero,zero,229
    37b0:	00003948 	cmpgei	zero,zero,229
    37b4:	00003948 	cmpgei	zero,zero,229
    37b8:	00003948 	cmpgei	zero,zero,229
    37bc:	00003948 	cmpgei	zero,zero,229
    37c0:	00003948 	cmpgei	zero,zero,229
    37c4:	00003948 	cmpgei	zero,zero,229
    37c8:	00003b20 	cmpeqi	zero,zero,236
    37cc:	00003948 	cmpgei	zero,zero,229
    37d0:	00003948 	cmpgei	zero,zero,229
    37d4:	00003948 	cmpgei	zero,zero,229
    37d8:	00003b30 	cmpltui	zero,zero,236
    37dc:	00003bcc 	andi	zero,zero,239
    37e0:	00003948 	cmpgei	zero,zero,229
    37e4:	00003948 	cmpgei	zero,zero,229
    37e8:	00003be8 	cmpgeui	zero,zero,239
    37ec:	00003948 	cmpgei	zero,zero,229
    37f0:	00003948 	cmpgei	zero,zero,229
    37f4:	00003948 	cmpgei	zero,zero,229
    37f8:	00003948 	cmpgei	zero,zero,229
    37fc:	00003c14 	movui	zero,240
    3800:	00003948 	cmpgei	zero,zero,229
    3804:	00003948 	cmpgei	zero,zero,229
    3808:	00003948 	cmpgei	zero,zero,229
    380c:	00003948 	cmpgei	zero,zero,229
    3810:	00003948 	cmpgei	zero,zero,229
    3814:	00003c68 	cmpgeui	zero,zero,241
    3818:	00003948 	cmpgei	zero,zero,229
    381c:	00003948 	cmpgei	zero,zero,229
    3820:	00003948 	cmpgei	zero,zero,229
    3824:	00003948 	cmpgei	zero,zero,229
    3828:	00003d78 	rdprs	zero,zero,245
    382c:	00003948 	cmpgei	zero,zero,229
    3830:	00003948 	cmpgei	zero,zero,229
    3834:	00003948 	cmpgei	zero,zero,229
    3838:	00003948 	cmpgei	zero,zero,229
    383c:	00003948 	cmpgei	zero,zero,229
    3840:	00003948 	cmpgei	zero,zero,229
    3844:	00003948 	cmpgei	zero,zero,229
    3848:	00003b20 	cmpeqi	zero,zero,236
    384c:	00003948 	cmpgei	zero,zero,229
    3850:	00003948 	cmpgei	zero,zero,229
    3854:	00003948 	cmpgei	zero,zero,229
    3858:	00003b30 	cmpltui	zero,zero,236
    385c:	00003bcc 	andi	zero,zero,239
    3860:	00003948 	cmpgei	zero,zero,229
    3864:	00003948 	cmpgei	zero,zero,229
    3868:	00003be8 	cmpgeui	zero,zero,239
    386c:	00003948 	cmpgei	zero,zero,229
    3870:	00003948 	cmpgei	zero,zero,229
    3874:	00003948 	cmpgei	zero,zero,229
    3878:	00003948 	cmpgei	zero,zero,229
    387c:	00003c14 	movui	zero,240
    3880:	00003948 	cmpgei	zero,zero,229
    3884:	00003948 	cmpgei	zero,zero,229
    3888:	00003948 	cmpgei	zero,zero,229
    388c:	00003948 	cmpgei	zero,zero,229
    3890:	00003948 	cmpgei	zero,zero,229
    3894:	00003c68 	cmpgeui	zero,zero,241
    3898:	00003948 	cmpgei	zero,zero,229
    389c:	00003948 	cmpgei	zero,zero,229
    38a0:	00003948 	cmpgei	zero,zero,229
    38a4:	00003948 	cmpgei	zero,zero,229
    38a8:	00003d78 	rdprs	zero,zero,245
    38ac:	d900a317 	ldw	r4,652(sp)
    38b0:	00805704 	movi	r2,348
    38b4:	20ffffc4 	addi	r3,r4,-1
    38b8:	10c18c2e 	bgeu	r2,r3,3eec <__svfscanf_r+0xf04>
    38bc:	00805744 	movi	r2,349
    38c0:	257fa8c4 	addi	r21,r4,-349
    38c4:	9c836014 	ori	r18,r19,3456
    38c8:	d880a315 	stw	r2,652(sp)
    38cc:	0001a106 	br	3f54 <__svfscanf_r+0xf6c>
    38d0:	b009883a 	mov	r4,r22
    38d4:	800b883a 	mov	r5,r16
    38d8:	00095a00 	call	95a0 <__srefill_r>
    38dc:	103eb226 	beq	r2,zero,33a8 <__svfscanf_r+0x3c0>
    38e0:	003e1606 	br	313c <__svfscanf_r+0x154>
    38e4:	01000284 	movi	r4,10
    38e8:	00800074 	movhi	r2,1
    38ec:	10ae1904 	addi	r2,r2,-18332
    38f0:	054000c4 	movi	r21,3
    38f4:	d900a115 	stw	r4,644(sp)
    38f8:	d880a015 	stw	r2,640(sp)
    38fc:	003ea806 	br	33a0 <__svfscanf_r+0x3b8>
    3900:	a880200c 	andi	r2,r21,128
    3904:	10001026 	beq	r2,zero,3948 <__svfscanf_r+0x960>
    3908:	00bfdfc4 	movi	r2,-129
    390c:	a8aa703a 	and	r21,r21,r2
    3910:	b9400005 	stb	r5,0(r23)
    3914:	bdc00044 	addi	r23,r23,1
    3918:	80c00117 	ldw	r3,4(r16)
    391c:	8c400044 	addi	r17,r17,1
    3920:	18bfffc4 	addi	r2,r3,-1
    3924:	80800115 	stw	r2,4(r16)
    3928:	0080610e 	bge	zero,r2,3ab0 <__svfscanf_r+0xac8>
    392c:	80800017 	ldw	r2,0(r16)
    3930:	10800044 	addi	r2,r2,1
    3934:	80800015 	stw	r2,0(r16)
    3938:	d880a317 	ldw	r2,652(sp)
    393c:	10bfffc4 	addi	r2,r2,-1
    3940:	d880a315 	stw	r2,652(sp)
    3944:	103f7d1e 	bne	r2,zero,373c <__svfscanf_r+0x754>
    3948:	d8c09e17 	ldw	r3,632(sp)
    394c:	18000226 	beq	r3,zero,3958 <__svfscanf_r+0x970>
    3950:	00bfbfc4 	movi	r2,-257
    3954:	a8aa703a 	and	r21,r21,r2
    3958:	90ffffc4 	addi	r3,r18,-1
    395c:	00800044 	movi	r2,1
    3960:	10c0cd2e 	bgeu	r2,r3,3c98 <__svfscanf_r+0xcb0>
    3964:	e1003fcc 	andi	r4,fp,255
    3968:	2100201c 	xori	r4,r4,128
    396c:	213fe004 	addi	r4,r4,-128
    3970:	20ffffc4 	addi	r3,r4,-1
    3974:	00800184 	movi	r2,6
    3978:	10c01736 	bltu	r2,r3,39d8 <__svfscanf_r+0x9f0>
    397c:	00c00084 	movi	r3,2
    3980:	1900880e 	bge	r3,r4,3ba4 <__svfscanf_r+0xbbc>
    3984:	008000c4 	movi	r2,3
    3988:	1100130e 	bge	r2,r4,39d8 <__svfscanf_r+0x9f0>
    398c:	e4ffffc4 	addi	r19,fp,-1
    3990:	b825883a 	mov	r18,r23
    3994:	94bfffc4 	addi	r18,r18,-1
    3998:	91400007 	ldb	r5,0(r18)
    399c:	b009883a 	mov	r4,r22
    39a0:	800d883a 	mov	r6,r16
    39a4:	000be840 	call	be84 <_ungetc_r>
    39a8:	9cffffc4 	addi	r19,r19,-1
    39ac:	98c03fcc 	andi	r3,r19,255
    39b0:	18c0201c 	xori	r3,r3,128
    39b4:	18ffe004 	addi	r3,r3,-128
    39b8:	00800084 	movi	r2,2
    39bc:	18bff51e 	bne	r3,r2,3994 <__svfscanf_r+0x9ac>
    39c0:	e0bfff04 	addi	r2,fp,-4
    39c4:	10803fcc 	andi	r2,r2,255
    39c8:	b887c83a 	sub	r3,r23,r2
    39cc:	8885c83a 	sub	r2,r17,r2
    39d0:	147fffc4 	addi	r17,r2,-1
    39d4:	1dffffc4 	addi	r23,r3,-1
    39d8:	a880400c 	andi	r2,r21,256
    39dc:	10001226 	beq	r2,zero,3a28 <__svfscanf_r+0xa40>
    39e0:	a881000c 	andi	r2,r21,1024
    39e4:	1000651e 	bne	r2,zero,3b7c <__svfscanf_r+0xb94>
    39e8:	bdffffc4 	addi	r23,r23,-1
    39ec:	b9400007 	ldb	r5,0(r23)
    39f0:	00801944 	movi	r2,101
    39f4:	8c7fffc4 	addi	r17,r17,-1
    39f8:	28800826 	beq	r5,r2,3a1c <__svfscanf_r+0xa34>
    39fc:	00801144 	movi	r2,69
    3a00:	28800626 	beq	r5,r2,3a1c <__svfscanf_r+0xa34>
    3a04:	bdffffc4 	addi	r23,r23,-1
    3a08:	b009883a 	mov	r4,r22
    3a0c:	800d883a 	mov	r6,r16
    3a10:	000be840 	call	be84 <_ungetc_r>
    3a14:	b9400007 	ldb	r5,0(r23)
    3a18:	8c7fffc4 	addi	r17,r17,-1
    3a1c:	b009883a 	mov	r4,r22
    3a20:	800d883a 	mov	r6,r16
    3a24:	000be840 	call	be84 <_ungetc_r>
    3a28:	a880040c 	andi	r2,r21,16
    3a2c:	103d811e 	bne	r2,zero,3034 <__svfscanf_r+0x4c>
    3a30:	a8c1800c 	andi	r3,r21,1536
    3a34:	00810004 	movi	r2,1024
    3a38:	b8000005 	stb	zero,0(r23)
    3a3c:	1880bb26 	beq	r3,r2,3d2c <__svfscanf_r+0xd44>
    3a40:	d8809d17 	ldw	r2,628(sp)
    3a44:	1000a61e 	bne	r2,zero,3ce0 <__svfscanf_r+0xcf8>
    3a48:	d940a617 	ldw	r5,664(sp)
    3a4c:	b009883a 	mov	r4,r22
    3a50:	000d883a 	mov	r6,zero
    3a54:	0009cc00 	call	9cc0 <_strtod_r>
    3a58:	a900004c 	andi	r4,r21,1
    3a5c:	2009003a 	cmpeq	r4,r4,zero
    3a60:	1025883a 	mov	r18,r2
    3a64:	1827883a 	mov	r19,r3
    3a68:	2000951e 	bne	r4,zero,3cc0 <__svfscanf_r+0xcd8>
    3a6c:	d8c0a417 	ldw	r3,656(sp)
    3a70:	18800017 	ldw	r2,0(r3)
    3a74:	1d400104 	addi	r21,r3,4
    3a78:	14c00115 	stw	r19,4(r2)
    3a7c:	14800015 	stw	r18,0(r2)
    3a80:	d8c0a217 	ldw	r3,648(sp)
    3a84:	dd40a415 	stw	r21,656(sp)
    3a88:	18c00044 	addi	r3,r3,1
    3a8c:	d8c0a215 	stw	r3,648(sp)
    3a90:	003d6806 	br	3034 <__svfscanf_r+0x4c>
    3a94:	a880800c 	andi	r2,r21,512
    3a98:	103fab26 	beq	r2,zero,3948 <__svfscanf_r+0x960>
    3a9c:	d9009e17 	ldw	r4,632(sp)
    3aa0:	00bf5fc4 	movi	r2,-641
    3aa4:	a8aa703a 	and	r21,r21,r2
    3aa8:	d9009f15 	stw	r4,636(sp)
    3aac:	003f9806 	br	3910 <__svfscanf_r+0x928>
    3ab0:	b009883a 	mov	r4,r22
    3ab4:	800b883a 	mov	r5,r16
    3ab8:	d980a715 	stw	r6,668(sp)
    3abc:	00095a00 	call	95a0 <__srefill_r>
    3ac0:	d980a717 	ldw	r6,668(sp)
    3ac4:	103f9c26 	beq	r2,zero,3938 <__svfscanf_r+0x950>
    3ac8:	003f9f06 	br	3948 <__svfscanf_r+0x960>
    3acc:	a880400c 	andi	r2,r21,256
    3ad0:	10000b26 	beq	r2,zero,3b00 <__svfscanf_r+0xb18>
    3ad4:	00bfdfc4 	movi	r2,-129
    3ad8:	a8aa703a 	and	r21,r21,r2
    3adc:	d8809e17 	ldw	r2,632(sp)
    3ae0:	10800044 	addi	r2,r2,1
    3ae4:	d8809e15 	stw	r2,632(sp)
    3ae8:	303f8b26 	beq	r6,zero,3918 <__svfscanf_r+0x930>
    3aec:	d8c0a317 	ldw	r3,652(sp)
    3af0:	31bfffc4 	addi	r6,r6,-1
    3af4:	18c00044 	addi	r3,r3,1
    3af8:	d8c0a315 	stw	r3,652(sp)
    3afc:	003f8606 	br	3918 <__svfscanf_r+0x930>
    3b00:	e0803fcc 	andi	r2,fp,255
    3b04:	1080201c 	xori	r2,r2,128
    3b08:	10bfe004 	addi	r2,r2,-128
    3b0c:	9085883a 	add	r2,r18,r2
    3b10:	103f8d1e 	bne	r2,zero,3948 <__svfscanf_r+0x960>
    3b14:	00bf9fc4 	movi	r2,-385
    3b18:	a8aa703a 	and	r21,r21,r2
    3b1c:	003f7c06 	br	3910 <__svfscanf_r+0x928>
    3b20:	00800044 	movi	r2,1
    3b24:	90bf881e 	bne	r18,r2,3948 <__svfscanf_r+0x960>
    3b28:	04800084 	movi	r18,2
    3b2c:	003f7806 	br	3910 <__svfscanf_r+0x928>
    3b30:	a8c1400c 	andi	r3,r21,1280
    3b34:	00810004 	movi	r2,1024
    3b38:	18800426 	beq	r3,r2,3b4c <__svfscanf_r+0xb64>
    3b3c:	a884703a 	and	r2,r21,r2
    3b40:	103f8126 	beq	r2,zero,3948 <__svfscanf_r+0x960>
    3b44:	d8809e17 	ldw	r2,632(sp)
    3b48:	103f8326 	beq	r2,zero,3958 <__svfscanf_r+0x970>
    3b4c:	a880800c 	andi	r2,r21,512
    3b50:	1000051e 	bne	r2,zero,3b68 <__svfscanf_r+0xb80>
    3b54:	d8c09e17 	ldw	r3,632(sp)
    3b58:	d9009f17 	ldw	r4,636(sp)
    3b5c:	ddc09c15 	stw	r23,624(sp)
    3b60:	1907c83a 	sub	r3,r3,r4
    3b64:	d8c09d15 	stw	r3,628(sp)
    3b68:	00be7fc4 	movi	r2,-1537
    3b6c:	a884703a 	and	r2,r21,r2
    3b70:	15406014 	ori	r21,r2,384
    3b74:	d8009e15 	stw	zero,632(sp)
    3b78:	003f6506 	br	3910 <__svfscanf_r+0x928>
    3b7c:	d900a617 	ldw	r4,664(sp)
    3b80:	25fd4e2e 	bgeu	r4,r23,30bc <__svfscanf_r+0xd4>
    3b84:	bdffffc4 	addi	r23,r23,-1
    3b88:	b9400007 	ldb	r5,0(r23)
    3b8c:	b009883a 	mov	r4,r22
    3b90:	800d883a 	mov	r6,r16
    3b94:	000be840 	call	be84 <_ungetc_r>
    3b98:	d880a617 	ldw	r2,664(sp)
    3b9c:	15fff936 	bltu	r2,r23,3b84 <__svfscanf_r+0xb9c>
    3ba0:	003d4606 	br	30bc <__svfscanf_r+0xd4>
    3ba4:	d900a617 	ldw	r4,664(sp)
    3ba8:	25fd442e 	bgeu	r4,r23,30bc <__svfscanf_r+0xd4>
    3bac:	bdffffc4 	addi	r23,r23,-1
    3bb0:	b9400007 	ldb	r5,0(r23)
    3bb4:	b009883a 	mov	r4,r22
    3bb8:	800d883a 	mov	r6,r16
    3bbc:	000be840 	call	be84 <_ungetc_r>
    3bc0:	d8c0a617 	ldw	r3,664(sp)
    3bc4:	1dfff936 	bltu	r3,r23,3bac <__svfscanf_r+0xbc4>
    3bc8:	003d3c06 	br	30bc <__svfscanf_r+0xd4>
    3bcc:	e0c03fcc 	andi	r3,fp,255
    3bd0:	18c0201c 	xori	r3,r3,128
    3bd4:	18ffe004 	addi	r3,r3,-128
    3bd8:	00800084 	movi	r2,2
    3bdc:	18bf5a1e 	bne	r3,r2,3948 <__svfscanf_r+0x960>
    3be0:	070000c4 	movi	fp,3
    3be4:	003f4a06 	br	3910 <__svfscanf_r+0x928>
    3be8:	e0c03fcc 	andi	r3,fp,255
    3bec:	18c0201c 	xori	r3,r3,128
    3bf0:	18ffe004 	addi	r3,r3,-128
    3bf4:	1800231e 	bne	r3,zero,3c84 <__svfscanf_r+0xc9c>
    3bf8:	a8c1c00c 	andi	r3,r21,1792
    3bfc:	0081c004 	movi	r2,1792
    3c00:	18bf511e 	bne	r3,r2,3948 <__svfscanf_r+0x960>
    3c04:	00be1fc4 	movi	r2,-1921
    3c08:	a8aa703a 	and	r21,r21,r2
    3c0c:	07000044 	movi	fp,1
    3c10:	003f3f06 	br	3910 <__svfscanf_r+0x928>
    3c14:	9000101e 	bne	r18,zero,3c58 <__svfscanf_r+0xc70>
    3c18:	a8c1c00c 	andi	r3,r21,1792
    3c1c:	0081c004 	movi	r2,1792
    3c20:	18800926 	beq	r3,r2,3c48 <__svfscanf_r+0xc60>
    3c24:	e0c03fcc 	andi	r3,fp,255
    3c28:	18c0201c 	xori	r3,r3,128
    3c2c:	18ffe004 	addi	r3,r3,-128
    3c30:	00800044 	movi	r2,1
    3c34:	18800226 	beq	r3,r2,3c40 <__svfscanf_r+0xc58>
    3c38:	00800104 	movi	r2,4
    3c3c:	18bf421e 	bne	r3,r2,3948 <__svfscanf_r+0x960>
    3c40:	e7000044 	addi	fp,fp,1
    3c44:	003f3206 	br	3910 <__svfscanf_r+0x928>
    3c48:	00be1fc4 	movi	r2,-1921
    3c4c:	a8aa703a 	and	r21,r21,r2
    3c50:	04800044 	movi	r18,1
    3c54:	003f2e06 	br	3910 <__svfscanf_r+0x928>
    3c58:	00800084 	movi	r2,2
    3c5c:	90bff11e 	bne	r18,r2,3c24 <__svfscanf_r+0xc3c>
    3c60:	048000c4 	movi	r18,3
    3c64:	003f2a06 	br	3910 <__svfscanf_r+0x928>
    3c68:	e0c03fcc 	andi	r3,fp,255
    3c6c:	18c0201c 	xori	r3,r3,128
    3c70:	18ffe004 	addi	r3,r3,-128
    3c74:	00800184 	movi	r2,6
    3c78:	18bf331e 	bne	r3,r2,3948 <__svfscanf_r+0x960>
    3c7c:	070001c4 	movi	fp,7
    3c80:	003f2306 	br	3910 <__svfscanf_r+0x928>
    3c84:	008000c4 	movi	r2,3
    3c88:	18bfed26 	beq	r3,r2,3c40 <__svfscanf_r+0xc58>
    3c8c:	00800144 	movi	r2,5
    3c90:	18bfeb26 	beq	r3,r2,3c40 <__svfscanf_r+0xc58>
    3c94:	003f2c06 	br	3948 <__svfscanf_r+0x960>
    3c98:	d900a617 	ldw	r4,664(sp)
    3c9c:	25fd072e 	bgeu	r4,r23,30bc <__svfscanf_r+0xd4>
    3ca0:	bdffffc4 	addi	r23,r23,-1
    3ca4:	b9400007 	ldb	r5,0(r23)
    3ca8:	b009883a 	mov	r4,r22
    3cac:	800d883a 	mov	r6,r16
    3cb0:	000be840 	call	be84 <_ungetc_r>
    3cb4:	d880a617 	ldw	r2,664(sp)
    3cb8:	15fff936 	bltu	r2,r23,3ca0 <__svfscanf_r+0xcb8>
    3cbc:	003cff06 	br	30bc <__svfscanf_r+0xd4>
    3cc0:	a880008c 	andi	r2,r21,2
    3cc4:	10002026 	beq	r2,zero,3d48 <__svfscanf_r+0xd60>
    3cc8:	d900a417 	ldw	r4,656(sp)
    3ccc:	20800017 	ldw	r2,0(r4)
    3cd0:	25400104 	addi	r21,r4,4
    3cd4:	10c00115 	stw	r3,4(r2)
    3cd8:	14800015 	stw	r18,0(r2)
    3cdc:	003f6806 	br	3a80 <__svfscanf_r+0xa98>
    3ce0:	d8c09c17 	ldw	r3,624(sp)
    3ce4:	b009883a 	mov	r4,r22
    3ce8:	000d883a 	mov	r6,zero
    3cec:	19400044 	addi	r5,r3,1
    3cf0:	01c00284 	movi	r7,10
    3cf4:	000b2e40 	call	b2e4 <_strtol_r>
    3cf8:	d9009d17 	ldw	r4,628(sp)
    3cfc:	110dc83a 	sub	r6,r2,r4
    3d00:	d8c0a617 	ldw	r3,664(sp)
    3d04:	d9009c17 	ldw	r4,624(sp)
    3d08:	188054c4 	addi	r2,r3,339
    3d0c:	20800236 	bltu	r4,r2,3d18 <__svfscanf_r+0xd30>
    3d10:	18805484 	addi	r2,r3,338
    3d14:	d8809c15 	stw	r2,624(sp)
    3d18:	d9009c17 	ldw	r4,624(sp)
    3d1c:	01400074 	movhi	r5,1
    3d20:	2948aa04 	addi	r5,r5,8872
    3d24:	00099280 	call	9928 <sprintf>
    3d28:	003f4706 	br	3a48 <__svfscanf_r+0xa60>
    3d2c:	d8c09e17 	ldw	r3,632(sp)
    3d30:	d9009f17 	ldw	r4,636(sp)
    3d34:	1905c83a 	sub	r2,r3,r4
    3d38:	103f4326 	beq	r2,zero,3a48 <__svfscanf_r+0xa60>
    3d3c:	008dc83a 	sub	r6,zero,r2
    3d40:	ddc09c15 	stw	r23,624(sp)
    3d44:	003fee06 	br	3d00 <__svfscanf_r+0xd18>
    3d48:	d880a417 	ldw	r2,656(sp)
    3d4c:	9009883a 	mov	r4,r18
    3d50:	180b883a 	mov	r5,r3
    3d54:	15c00017 	ldw	r23,0(r2)
    3d58:	15400104 	addi	r21,r2,4
    3d5c:	00097c00 	call	97c0 <__isnand>
    3d60:	10021c1e 	bne	r2,zero,45d4 <__svfscanf_r+0x15ec>
    3d64:	980b883a 	mov	r5,r19
    3d68:	9009883a 	mov	r4,r18
    3d6c:	000ee300 	call	ee30 <__truncdfsf2>
    3d70:	b8800015 	stw	r2,0(r23)
    3d74:	003f4206 	br	3a80 <__svfscanf_r+0xa98>
    3d78:	e0c03fcc 	andi	r3,fp,255
    3d7c:	18c0201c 	xori	r3,r3,128
    3d80:	18ffe004 	addi	r3,r3,-128
    3d84:	008001c4 	movi	r2,7
    3d88:	18beef1e 	bne	r3,r2,3948 <__svfscanf_r+0x960>
    3d8c:	07000204 	movi	fp,8
    3d90:	003edf06 	br	3910 <__svfscanf_r+0x928>
    3d94:	d900a317 	ldw	r4,652(sp)
    3d98:	208002a4 	muli	r2,r4,10
    3d9c:	1145883a 	add	r2,r2,r5
    3da0:	10bff404 	addi	r2,r2,-48
    3da4:	d880a315 	stw	r2,652(sp)
    3da8:	003ceb06 	br	3158 <__svfscanf_r+0x170>
    3dac:	9880040c 	andi	r2,r19,16
    3db0:	10001426 	beq	r2,zero,3e04 <__svfscanf_r+0xe1c>
    3db4:	0027883a 	mov	r19,zero
    3db8:	00000906 	br	3de0 <__svfscanf_r+0xdf8>
    3dbc:	80c00117 	ldw	r3,4(r16)
    3dc0:	d880a317 	ldw	r2,652(sp)
    3dc4:	29800044 	addi	r6,r5,1
    3dc8:	18ffffc4 	addi	r3,r3,-1
    3dcc:	9cc00044 	addi	r19,r19,1
    3dd0:	81800015 	stw	r6,0(r16)
    3dd4:	80c00115 	stw	r3,4(r16)
    3dd8:	14fdf726 	beq	r2,r19,35b8 <__svfscanf_r+0x5d0>
    3ddc:	00c02c0e 	bge	zero,r3,3e90 <__svfscanf_r+0xea8>
    3de0:	81400017 	ldw	r5,0(r16)
    3de4:	90800017 	ldw	r2,0(r18)
    3de8:	28c00003 	ldbu	r3,0(r5)
    3dec:	1887883a 	add	r3,r3,r2
    3df0:	19000003 	ldbu	r4,0(r3)
    3df4:	2100020c 	andi	r4,r4,8
    3df8:	203ff026 	beq	r4,zero,3dbc <__svfscanf_r+0xdd4>
    3dfc:	8ce3883a 	add	r17,r17,r19
    3e00:	003c8c06 	br	3034 <__svfscanf_r+0x4c>
    3e04:	d8c0a417 	ldw	r3,656(sp)
    3e08:	1d400017 	ldw	r21,0(r3)
    3e0c:	a827883a 	mov	r19,r21
    3e10:	00000e06 	br	3e4c <__svfscanf_r+0xe64>
    3e14:	80800117 	ldw	r2,4(r16)
    3e18:	d900a317 	ldw	r4,652(sp)
    3e1c:	29800044 	addi	r6,r5,1
    3e20:	10ffffc4 	addi	r3,r2,-1
    3e24:	213fffc4 	addi	r4,r4,-1
    3e28:	d900a315 	stw	r4,652(sp)
    3e2c:	80c00115 	stw	r3,4(r16)
    3e30:	28800003 	ldbu	r2,0(r5)
    3e34:	98800005 	stb	r2,0(r19)
    3e38:	81800015 	stw	r6,0(r16)
    3e3c:	9cc00044 	addi	r19,r19,1
    3e40:	20000926 	beq	r4,zero,3e68 <__svfscanf_r+0xe80>
    3e44:	80800117 	ldw	r2,4(r16)
    3e48:	0080170e 	bge	zero,r2,3ea8 <__svfscanf_r+0xec0>
    3e4c:	81400017 	ldw	r5,0(r16)
    3e50:	90800017 	ldw	r2,0(r18)
    3e54:	28c00003 	ldbu	r3,0(r5)
    3e58:	1887883a 	add	r3,r3,r2
    3e5c:	19000003 	ldbu	r4,0(r3)
    3e60:	2100020c 	andi	r4,r4,8
    3e64:	203feb26 	beq	r4,zero,3e14 <__svfscanf_r+0xe2c>
    3e68:	9d45c83a 	sub	r2,r19,r21
    3e6c:	d8c0a217 	ldw	r3,648(sp)
    3e70:	88a3883a 	add	r17,r17,r2
    3e74:	d880a417 	ldw	r2,656(sp)
    3e78:	18c00044 	addi	r3,r3,1
    3e7c:	d8c0a215 	stw	r3,648(sp)
    3e80:	10800104 	addi	r2,r2,4
    3e84:	d880a415 	stw	r2,656(sp)
    3e88:	98000005 	stb	zero,0(r19)
    3e8c:	003c6906 	br	3034 <__svfscanf_r+0x4c>
    3e90:	b009883a 	mov	r4,r22
    3e94:	800b883a 	mov	r5,r16
    3e98:	00095a00 	call	95a0 <__srefill_r>
    3e9c:	103fd026 	beq	r2,zero,3de0 <__svfscanf_r+0xdf8>
    3ea0:	8ce3883a 	add	r17,r17,r19
    3ea4:	003c6306 	br	3034 <__svfscanf_r+0x4c>
    3ea8:	b009883a 	mov	r4,r22
    3eac:	800b883a 	mov	r5,r16
    3eb0:	00095a00 	call	95a0 <__srefill_r>
    3eb4:	103fe526 	beq	r2,zero,3e4c <__svfscanf_r+0xe64>
    3eb8:	003feb06 	br	3e68 <__svfscanf_r+0xe80>
    3ebc:	d900a317 	ldw	r4,652(sp)
    3ec0:	9d41e014 	ori	r21,r19,1920
    3ec4:	2000821e 	bne	r4,zero,40d0 <__svfscanf_r+0x10e8>
    3ec8:	d8c04404 	addi	r3,sp,272
    3ecc:	182f883a 	mov	r23,r3
    3ed0:	0039883a 	mov	fp,zero
    3ed4:	d8c0a615 	stw	r3,664(sp)
    3ed8:	d8009c15 	stw	zero,624(sp)
    3edc:	d8009d15 	stw	zero,628(sp)
    3ee0:	d8009f15 	stw	zero,636(sp)
    3ee4:	d8009e15 	stw	zero,632(sp)
    3ee8:	003e9e06 	br	3964 <__svfscanf_r+0x97c>
    3eec:	d900a317 	ldw	r4,652(sp)
    3ef0:	9c836014 	ori	r18,r19,3456
    3ef4:	2000161e 	bne	r4,zero,3f50 <__svfscanf_r+0xf68>
    3ef8:	d8804404 	addi	r2,sp,272
    3efc:	d880a615 	stw	r2,664(sp)
    3f00:	002f883a 	mov	r23,zero
    3f04:	1027883a 	mov	r19,r2
    3f08:	9080400c 	andi	r2,r18,256
    3f0c:	10000926 	beq	r2,zero,3f34 <__svfscanf_r+0xf4c>
    3f10:	d8c0a617 	ldw	r3,664(sp)
    3f14:	1cc0052e 	bgeu	r3,r19,3f2c <__svfscanf_r+0xf44>
    3f18:	9cffffc4 	addi	r19,r19,-1
    3f1c:	99400007 	ldb	r5,0(r19)
    3f20:	b009883a 	mov	r4,r22
    3f24:	800d883a 	mov	r6,r16
    3f28:	000be840 	call	be84 <_ungetc_r>
    3f2c:	d900a617 	ldw	r4,664(sp)
    3f30:	24fc6226 	beq	r4,r19,30bc <__svfscanf_r+0xd4>
    3f34:	9080040c 	andi	r2,r18,16
    3f38:	10006726 	beq	r2,zero,40d8 <__svfscanf_r+0x10f0>
    3f3c:	d8c0a617 	ldw	r3,664(sp)
    3f40:	98c5c83a 	sub	r2,r19,r3
    3f44:	b885883a 	add	r2,r23,r2
    3f48:	88a3883a 	add	r17,r17,r2
    3f4c:	003c3906 	br	3034 <__svfscanf_r+0x4c>
    3f50:	002b883a 	mov	r21,zero
    3f54:	d8c04404 	addi	r3,sp,272
    3f58:	d8c0a615 	stw	r3,664(sp)
    3f5c:	002f883a 	mov	r23,zero
    3f60:	1827883a 	mov	r19,r3
    3f64:	81800017 	ldw	r6,0(r16)
    3f68:	00c01344 	movi	r3,77
    3f6c:	31400003 	ldbu	r5,0(r6)
    3f70:	28bff544 	addi	r2,r5,-43
    3f74:	10803fcc 	andi	r2,r2,255
    3f78:	18bfe336 	bltu	r3,r2,3f08 <__svfscanf_r+0xf20>
    3f7c:	1085883a 	add	r2,r2,r2
    3f80:	1085883a 	add	r2,r2,r2
    3f84:	00c00034 	movhi	r3,0
    3f88:	18cfe604 	addi	r3,r3,16280
    3f8c:	10c5883a 	add	r2,r2,r3
    3f90:	11000017 	ldw	r4,0(r2)
    3f94:	2000683a 	jmp	r4
    3f98:	0000412c 	andhi	zero,zero,260
    3f9c:	00003f08 	cmpgei	zero,zero,252
    3fa0:	0000412c 	andhi	zero,zero,260
    3fa4:	00003f08 	cmpgei	zero,zero,252
    3fa8:	00003f08 	cmpgei	zero,zero,252
    3fac:	00004170 	cmpltui	zero,zero,261
    3fb0:	0000426c 	andhi	zero,zero,265
    3fb4:	0000426c 	andhi	zero,zero,265
    3fb8:	0000426c 	andhi	zero,zero,265
    3fbc:	0000426c 	andhi	zero,zero,265
    3fc0:	0000426c 	andhi	zero,zero,265
    3fc4:	0000426c 	andhi	zero,zero,265
    3fc8:	0000426c 	andhi	zero,zero,265
    3fcc:	00004294 	movui	zero,266
    3fd0:	00004294 	movui	zero,266
    3fd4:	00003f08 	cmpgei	zero,zero,252
    3fd8:	00003f08 	cmpgei	zero,zero,252
    3fdc:	00003f08 	cmpgei	zero,zero,252
    3fe0:	00003f08 	cmpgei	zero,zero,252
    3fe4:	00003f08 	cmpgei	zero,zero,252
    3fe8:	00003f08 	cmpgei	zero,zero,252
    3fec:	00003f08 	cmpgei	zero,zero,252
    3ff0:	000042c4 	movi	zero,267
    3ff4:	000042c4 	movi	zero,267
    3ff8:	000042c4 	movi	zero,267
    3ffc:	000042c4 	movi	zero,267
    4000:	000042c4 	movi	zero,267
    4004:	000042c4 	movi	zero,267
    4008:	00003f08 	cmpgei	zero,zero,252
    400c:	00003f08 	cmpgei	zero,zero,252
    4010:	00003f08 	cmpgei	zero,zero,252
    4014:	00003f08 	cmpgei	zero,zero,252
    4018:	00003f08 	cmpgei	zero,zero,252
    401c:	00003f08 	cmpgei	zero,zero,252
    4020:	00003f08 	cmpgei	zero,zero,252
    4024:	00003f08 	cmpgei	zero,zero,252
    4028:	00003f08 	cmpgei	zero,zero,252
    402c:	00003f08 	cmpgei	zero,zero,252
    4030:	00003f08 	cmpgei	zero,zero,252
    4034:	00003f08 	cmpgei	zero,zero,252
    4038:	00003f08 	cmpgei	zero,zero,252
    403c:	00003f08 	cmpgei	zero,zero,252
    4040:	00003f08 	cmpgei	zero,zero,252
    4044:	00003f08 	cmpgei	zero,zero,252
    4048:	00003f08 	cmpgei	zero,zero,252
    404c:	000042d4 	movui	zero,267
    4050:	00003f08 	cmpgei	zero,zero,252
    4054:	00003f08 	cmpgei	zero,zero,252
    4058:	00003f08 	cmpgei	zero,zero,252
    405c:	00003f08 	cmpgei	zero,zero,252
    4060:	00003f08 	cmpgei	zero,zero,252
    4064:	00003f08 	cmpgei	zero,zero,252
    4068:	00003f08 	cmpgei	zero,zero,252
    406c:	00003f08 	cmpgei	zero,zero,252
    4070:	000042c4 	movi	zero,267
    4074:	000042c4 	movi	zero,267
    4078:	000042c4 	movi	zero,267
    407c:	000042c4 	movi	zero,267
    4080:	000042c4 	movi	zero,267
    4084:	000042c4 	movi	zero,267
    4088:	00003f08 	cmpgei	zero,zero,252
    408c:	00003f08 	cmpgei	zero,zero,252
    4090:	00003f08 	cmpgei	zero,zero,252
    4094:	00003f08 	cmpgei	zero,zero,252
    4098:	00003f08 	cmpgei	zero,zero,252
    409c:	00003f08 	cmpgei	zero,zero,252
    40a0:	00003f08 	cmpgei	zero,zero,252
    40a4:	00003f08 	cmpgei	zero,zero,252
    40a8:	00003f08 	cmpgei	zero,zero,252
    40ac:	00003f08 	cmpgei	zero,zero,252
    40b0:	00003f08 	cmpgei	zero,zero,252
    40b4:	00003f08 	cmpgei	zero,zero,252
    40b8:	00003f08 	cmpgei	zero,zero,252
    40bc:	00003f08 	cmpgei	zero,zero,252
    40c0:	00003f08 	cmpgei	zero,zero,252
    40c4:	00003f08 	cmpgei	zero,zero,252
    40c8:	00003f08 	cmpgei	zero,zero,252
    40cc:	000042d4 	movui	zero,267
    40d0:	000d883a 	mov	r6,zero
    40d4:	003d9006 	br	3718 <__svfscanf_r+0x730>
    40d8:	98000005 	stb	zero,0(r19)
    40dc:	d8c0a017 	ldw	r3,640(sp)
    40e0:	d940a617 	ldw	r5,664(sp)
    40e4:	d9c0a117 	ldw	r7,644(sp)
    40e8:	b009883a 	mov	r4,r22
    40ec:	000d883a 	mov	r6,zero
    40f0:	183ee83a 	callr	r3
    40f4:	1007883a 	mov	r3,r2
    40f8:	9080080c 	andi	r2,r18,32
    40fc:	10004d1e 	bne	r2,zero,4234 <__svfscanf_r+0x124c>
    4100:	9080010c 	andi	r2,r18,4
    4104:	10003426 	beq	r2,zero,41d8 <__svfscanf_r+0x11f0>
    4108:	d900a417 	ldw	r4,656(sp)
    410c:	20800017 	ldw	r2,0(r4)
    4110:	21000104 	addi	r4,r4,4
    4114:	d900a415 	stw	r4,656(sp)
    4118:	10c0000d 	sth	r3,0(r2)
    411c:	d880a217 	ldw	r2,648(sp)
    4120:	10800044 	addi	r2,r2,1
    4124:	d880a215 	stw	r2,648(sp)
    4128:	003f8406 	br	3f3c <__svfscanf_r+0xf54>
    412c:	9080200c 	andi	r2,r18,128
    4130:	103f7526 	beq	r2,zero,3f08 <__svfscanf_r+0xf20>
    4134:	00bfdfc4 	movi	r2,-129
    4138:	90a4703a 	and	r18,r18,r2
    413c:	99400005 	stb	r5,0(r19)
    4140:	9cc00044 	addi	r19,r19,1
    4144:	80c00117 	ldw	r3,4(r16)
    4148:	18ffffc4 	addi	r3,r3,-1
    414c:	80c00115 	stw	r3,4(r16)
    4150:	00c0130e 	bge	zero,r3,41a0 <__svfscanf_r+0x11b8>
    4154:	31800044 	addi	r6,r6,1
    4158:	81800015 	stw	r6,0(r16)
    415c:	d880a317 	ldw	r2,652(sp)
    4160:	10bfffc4 	addi	r2,r2,-1
    4164:	d880a315 	stw	r2,652(sp)
    4168:	103f7e1e 	bne	r2,zero,3f64 <__svfscanf_r+0xf7c>
    416c:	003f6606 	br	3f08 <__svfscanf_r+0xf20>
    4170:	9082000c 	andi	r2,r18,2048
    4174:	103ff126 	beq	r2,zero,413c <__svfscanf_r+0x1154>
    4178:	d8c0a117 	ldw	r3,644(sp)
    417c:	1800031e 	bne	r3,zero,418c <__svfscanf_r+0x11a4>
    4180:	01000204 	movi	r4,8
    4184:	94808014 	ori	r18,r18,512
    4188:	d900a115 	stw	r4,644(sp)
    418c:	9081000c 	andi	r2,r18,1024
    4190:	10000826 	beq	r2,zero,41b4 <__svfscanf_r+0x11cc>
    4194:	00be9fc4 	movi	r2,-1409
    4198:	90a4703a 	and	r18,r18,r2
    419c:	003fe706 	br	413c <__svfscanf_r+0x1154>
    41a0:	b009883a 	mov	r4,r22
    41a4:	800b883a 	mov	r5,r16
    41a8:	00095a00 	call	95a0 <__srefill_r>
    41ac:	103feb26 	beq	r2,zero,415c <__svfscanf_r+0x1174>
    41b0:	003f5506 	br	3f08 <__svfscanf_r+0xf20>
    41b4:	a8000426 	beq	r21,zero,41c8 <__svfscanf_r+0x11e0>
    41b8:	d880a317 	ldw	r2,652(sp)
    41bc:	ad7fffc4 	addi	r21,r21,-1
    41c0:	10800044 	addi	r2,r2,1
    41c4:	d880a315 	stw	r2,652(sp)
    41c8:	00bf1fc4 	movi	r2,-897
    41cc:	90a4703a 	and	r18,r18,r2
    41d0:	bdc00044 	addi	r23,r23,1
    41d4:	003fdb06 	br	4144 <__svfscanf_r+0x115c>
    41d8:	9080004c 	andi	r2,r18,1
    41dc:	1005003a 	cmpeq	r2,r2,zero
    41e0:	10001426 	beq	r2,zero,4234 <__svfscanf_r+0x124c>
    41e4:	9080008c 	andi	r2,r18,2
    41e8:	10001226 	beq	r2,zero,4234 <__svfscanf_r+0x124c>
    41ec:	d8c0a017 	ldw	r3,640(sp)
    41f0:	00800074 	movhi	r2,1
    41f4:	10ae1904 	addi	r2,r2,-18332
    41f8:	18801426 	beq	r3,r2,424c <__svfscanf_r+0x1264>
    41fc:	d9c0a117 	ldw	r7,644(sp)
    4200:	d940a617 	ldw	r5,664(sp)
    4204:	000d883a 	mov	r6,zero
    4208:	b009883a 	mov	r4,r22
    420c:	000b54c0 	call	b54c <_strtoll_r>
    4210:	100d883a 	mov	r6,r2
    4214:	180f883a 	mov	r7,r3
    4218:	d900a417 	ldw	r4,656(sp)
    421c:	20800017 	ldw	r2,0(r4)
    4220:	21000104 	addi	r4,r4,4
    4224:	d900a415 	stw	r4,656(sp)
    4228:	11c00115 	stw	r7,4(r2)
    422c:	11800015 	stw	r6,0(r2)
    4230:	003fba06 	br	411c <__svfscanf_r+0x1134>
    4234:	d900a417 	ldw	r4,656(sp)
    4238:	20800017 	ldw	r2,0(r4)
    423c:	21000104 	addi	r4,r4,4
    4240:	d900a415 	stw	r4,656(sp)
    4244:	10c00015 	stw	r3,0(r2)
    4248:	003fb406 	br	411c <__svfscanf_r+0x1134>
    424c:	d9c0a117 	ldw	r7,644(sp)
    4250:	d940a617 	ldw	r5,664(sp)
    4254:	000d883a 	mov	r6,zero
    4258:	b009883a 	mov	r4,r22
    425c:	000bab80 	call	bab8 <_strtoull_r>
    4260:	100d883a 	mov	r6,r2
    4264:	180f883a 	mov	r7,r3
    4268:	003feb06 	br	4218 <__svfscanf_r+0x1230>
    426c:	d8c0a117 	ldw	r3,644(sp)
    4270:	18c5883a 	add	r2,r3,r3
    4274:	00c00074 	movhi	r3,1
    4278:	18c8ab84 	addi	r3,r3,8878
    427c:	10c5883a 	add	r2,r2,r3
    4280:	1080000f 	ldh	r2,0(r2)
    4284:	00fd1fc4 	movi	r3,-2945
    4288:	90e4703a 	and	r18,r18,r3
    428c:	d880a115 	stw	r2,644(sp)
    4290:	003faa06 	br	413c <__svfscanf_r+0x1154>
    4294:	d900a117 	ldw	r4,644(sp)
    4298:	00c00074 	movhi	r3,1
    429c:	18c8ab84 	addi	r3,r3,8878
    42a0:	2105883a 	add	r2,r4,r4
    42a4:	10c5883a 	add	r2,r2,r3
    42a8:	1080000f 	ldh	r2,0(r2)
    42ac:	00c00204 	movi	r3,8
    42b0:	d880a115 	stw	r2,644(sp)
    42b4:	18bf140e 	bge	r3,r2,3f08 <__svfscanf_r+0xf20>
    42b8:	00bd1fc4 	movi	r2,-2945
    42bc:	90a4703a 	and	r18,r18,r2
    42c0:	003f9e06 	br	413c <__svfscanf_r+0x1154>
    42c4:	d8c0a117 	ldw	r3,644(sp)
    42c8:	00800284 	movi	r2,10
    42cc:	10fffa16 	blt	r2,r3,42b8 <__svfscanf_r+0x12d0>
    42d0:	003f0d06 	br	3f08 <__svfscanf_r+0xf20>
    42d4:	90c1800c 	andi	r3,r18,1536
    42d8:	00808004 	movi	r2,512
    42dc:	18bf0a1e 	bne	r3,r2,3f08 <__svfscanf_r+0xf20>
    42e0:	00bf7fc4 	movi	r2,-513
    42e4:	9084703a 	and	r2,r18,r2
    42e8:	01000404 	movi	r4,16
    42ec:	14814014 	ori	r18,r2,1280
    42f0:	d900a115 	stw	r4,644(sp)
    42f4:	003f9106 	br	413c <__svfscanf_r+0x1154>
    42f8:	d880a417 	ldw	r2,656(sp)
    42fc:	dd400404 	addi	r21,sp,16
    4300:	14800017 	ldw	r18,0(r2)
    4304:	9027883a 	mov	r19,r18
    4308:	81000017 	ldw	r4,0(r16)
    430c:	20800003 	ldbu	r2,0(r4)
    4310:	a885883a 	add	r2,r21,r2
    4314:	10c00007 	ldb	r3,0(r2)
    4318:	18001426 	beq	r3,zero,436c <__svfscanf_r+0x1384>
    431c:	d8c0a317 	ldw	r3,652(sp)
    4320:	80800117 	ldw	r2,4(r16)
    4324:	21800044 	addi	r6,r4,1
    4328:	18ffffc4 	addi	r3,r3,-1
    432c:	d8c0a315 	stw	r3,652(sp)
    4330:	10ffffc4 	addi	r3,r2,-1
    4334:	80c00115 	stw	r3,4(r16)
    4338:	20800003 	ldbu	r2,0(r4)
    433c:	90800005 	stb	r2,0(r18)
    4340:	d900a317 	ldw	r4,652(sp)
    4344:	81800015 	stw	r6,0(r16)
    4348:	94800044 	addi	r18,r18,1
    434c:	20000726 	beq	r4,zero,436c <__svfscanf_r+0x1384>
    4350:	80800117 	ldw	r2,4(r16)
    4354:	00bfec16 	blt	zero,r2,4308 <__svfscanf_r+0x1320>
    4358:	b009883a 	mov	r4,r22
    435c:	800b883a 	mov	r5,r16
    4360:	00095a00 	call	95a0 <__srefill_r>
    4364:	103fe826 	beq	r2,zero,4308 <__svfscanf_r+0x1320>
    4368:	9cbb7426 	beq	r19,r18,313c <__svfscanf_r+0x154>
    436c:	94e7c83a 	sub	r19,r18,r19
    4370:	983b5226 	beq	r19,zero,30bc <__svfscanf_r+0xd4>
    4374:	90000005 	stb	zero,0(r18)
    4378:	d880a417 	ldw	r2,656(sp)
    437c:	d8c0a217 	ldw	r3,648(sp)
    4380:	8ce3883a 	add	r17,r17,r19
    4384:	10800104 	addi	r2,r2,4
    4388:	18c00044 	addi	r3,r3,1
    438c:	d880a415 	stw	r2,656(sp)
    4390:	d8c0a215 	stw	r3,648(sp)
    4394:	003b2706 	br	3034 <__svfscanf_r+0x4c>
    4398:	9cc00414 	ori	r19,r19,16
    439c:	003b6e06 	br	3158 <__svfscanf_r+0x170>
    43a0:	00c00404 	movi	r3,16
    43a4:	01000074 	movhi	r4,1
    43a8:	212e1904 	addi	r4,r4,-18332
    43ac:	9cc08014 	ori	r19,r19,512
    43b0:	054000c4 	movi	r21,3
    43b4:	d8c0a115 	stw	r3,644(sp)
    43b8:	d900a015 	stw	r4,640(sp)
    43bc:	003bf806 	br	33a0 <__svfscanf_r+0x3b8>
    43c0:	9880040c 	andi	r2,r19,16
    43c4:	10001926 	beq	r2,zero,442c <__svfscanf_r+0x1444>
    43c8:	0027883a 	mov	r19,zero
    43cc:	00000b06 	br	43fc <__svfscanf_r+0x1414>
    43d0:	80800017 	ldw	r2,0(r16)
    43d4:	b009883a 	mov	r4,r22
    43d8:	800b883a 	mov	r5,r16
    43dc:	148d883a 	add	r6,r2,r18
    43e0:	81800015 	stw	r6,0(r16)
    43e4:	9ca7883a 	add	r19,r19,r18
    43e8:	00095a00 	call	95a0 <__srefill_r>
    43ec:	103c711e 	bne	r2,zero,35b4 <__svfscanf_r+0x5cc>
    43f0:	d900a317 	ldw	r4,652(sp)
    43f4:	2489c83a 	sub	r4,r4,r18
    43f8:	d900a315 	stw	r4,652(sp)
    43fc:	84800117 	ldw	r18,4(r16)
    4400:	d8c0a317 	ldw	r3,652(sp)
    4404:	90fff216 	blt	r18,r3,43d0 <__svfscanf_r+0x13e8>
    4408:	d900a317 	ldw	r4,652(sp)
    440c:	80800017 	ldw	r2,0(r16)
    4410:	9927883a 	add	r19,r19,r4
    4414:	9107c83a 	sub	r3,r18,r4
    4418:	110d883a 	add	r6,r2,r4
    441c:	8ce3883a 	add	r17,r17,r19
    4420:	80c00115 	stw	r3,4(r16)
    4424:	81800015 	stw	r6,0(r16)
    4428:	003b0206 	br	3034 <__svfscanf_r+0x4c>
    442c:	d880a417 	ldw	r2,656(sp)
    4430:	d980a317 	ldw	r6,652(sp)
    4434:	01400044 	movi	r5,1
    4438:	11000017 	ldw	r4,0(r2)
    443c:	800f883a 	mov	r7,r16
    4440:	000675c0 	call	675c <fread>
    4444:	103b3d26 	beq	r2,zero,313c <__svfscanf_r+0x154>
    4448:	d8c0a417 	ldw	r3,656(sp)
    444c:	d900a217 	ldw	r4,648(sp)
    4450:	88a3883a 	add	r17,r17,r2
    4454:	18c00104 	addi	r3,r3,4
    4458:	21000044 	addi	r4,r4,1
    445c:	d8c0a415 	stw	r3,656(sp)
    4460:	d900a215 	stw	r4,648(sp)
    4464:	003af306 	br	3034 <__svfscanf_r+0x4c>
    4468:	8080030b 	ldhu	r2,12(r16)
    446c:	1080100c 	andi	r2,r2,64
    4470:	103b1226 	beq	r2,zero,30bc <__svfscanf_r+0xd4>
    4474:	003b3306 	br	3144 <__svfscanf_r+0x15c>
    4478:	983b1026 	beq	r19,zero,30bc <__svfscanf_r+0xd4>
    447c:	8ce3883a 	add	r17,r17,r19
    4480:	003aec06 	br	3034 <__svfscanf_r+0x4c>
    4484:	983c9626 	beq	r19,zero,36e0 <__svfscanf_r+0x6f8>
    4488:	9cffffc4 	addi	r19,r19,-1
    448c:	d8c04404 	addi	r3,sp,272
    4490:	1cc5883a 	add	r2,r3,r19
    4494:	11400003 	ldbu	r5,0(r2)
    4498:	b009883a 	mov	r4,r22
    449c:	800d883a 	mov	r6,r16
    44a0:	000be840 	call	be84 <_ungetc_r>
    44a4:	003ff706 	br	4484 <__svfscanf_r+0x149c>
    44a8:	00bfff84 	movi	r2,-2
    44ac:	18bc7a1e 	bne	r3,r2,3698 <__svfscanf_r+0x6b0>
    44b0:	003c8406 	br	36c4 <__svfscanf_r+0x6dc>
    44b4:	d900a417 	ldw	r4,656(sp)
    44b8:	25400017 	ldw	r21,0(r4)
    44bc:	21000104 	addi	r4,r4,4
    44c0:	d900a415 	stw	r4,656(sp)
    44c4:	003c4a06 	br	35f0 <__svfscanf_r+0x608>
    44c8:	00bfff84 	movi	r2,-2
    44cc:	18bc0f1e 	bne	r3,r2,350c <__svfscanf_r+0x524>
    44d0:	003c1506 	br	3528 <__svfscanf_r+0x540>
    44d4:	b009883a 	mov	r4,r22
    44d8:	800b883a 	mov	r5,r16
    44dc:	00095a00 	call	95a0 <__srefill_r>
    44e0:	103c1326 	beq	r2,zero,3530 <__svfscanf_r+0x548>
    44e4:	903b151e 	bne	r18,zero,313c <__svfscanf_r+0x154>
    44e8:	a83ad21e 	bne	r21,zero,3034 <__svfscanf_r+0x4c>
    44ec:	d880a217 	ldw	r2,648(sp)
    44f0:	10800044 	addi	r2,r2,1
    44f4:	d880a215 	stw	r2,648(sp)
    44f8:	003ace06 	br	3034 <__svfscanf_r+0x4c>
    44fc:	0027883a 	mov	r19,zero
    4500:	003bdd06 	br	3478 <__svfscanf_r+0x490>
    4504:	9cc00114 	ori	r19,r19,4
    4508:	003b1306 	br	3158 <__svfscanf_r+0x170>
    450c:	05400104 	movi	r21,4
    4510:	003ba306 	br	33a0 <__svfscanf_r+0x3b8>
    4514:	9cc00054 	ori	r19,r19,1
    4518:	00800074 	movhi	r2,1
    451c:	10acb904 	addi	r2,r2,-19740
    4520:	00c00284 	movi	r3,10
    4524:	054000c4 	movi	r21,3
    4528:	d880a015 	stw	r2,640(sp)
    452c:	d8c0a115 	stw	r3,644(sp)
    4530:	003b9b06 	br	33a0 <__svfscanf_r+0x3b8>
    4534:	9cc01014 	ori	r19,r19,64
    4538:	002b883a 	mov	r21,zero
    453c:	003b9806 	br	33a0 <__svfscanf_r+0x3b8>
    4540:	a00b883a 	mov	r5,r20
    4544:	d9000404 	addi	r4,sp,16
    4548:	00098600 	call	9860 <__sccl>
    454c:	1029883a 	mov	r20,r2
    4550:	9cc01014 	ori	r19,r19,64
    4554:	05400044 	movi	r21,1
    4558:	003b9106 	br	33a0 <__svfscanf_r+0x3b8>
    455c:	9cc00054 	ori	r19,r19,1
    4560:	00800204 	movi	r2,8
    4564:	00c00074 	movhi	r3,1
    4568:	18ee1904 	addi	r3,r3,-18332
    456c:	054000c4 	movi	r21,3
    4570:	d880a115 	stw	r2,644(sp)
    4574:	d8c0a015 	stw	r3,640(sp)
    4578:	003b8906 	br	33a0 <__svfscanf_r+0x3b8>
    457c:	9880040c 	andi	r2,r19,16
    4580:	103aac1e 	bne	r2,zero,3034 <__svfscanf_r+0x4c>
    4584:	9880010c 	andi	r2,r19,4
    4588:	10002426 	beq	r2,zero,461c <__svfscanf_r+0x1634>
    458c:	d900a417 	ldw	r4,656(sp)
    4590:	20800017 	ldw	r2,0(r4)
    4594:	21000104 	addi	r4,r4,4
    4598:	d900a415 	stw	r4,656(sp)
    459c:	1440000d 	sth	r17,0(r2)
    45a0:	003aa406 	br	3034 <__svfscanf_r+0x4c>
    45a4:	9cc00094 	ori	r19,r19,2
    45a8:	003aeb06 	br	3158 <__svfscanf_r+0x170>
    45ac:	05400084 	movi	r21,2
    45b0:	003b7b06 	br	33a0 <__svfscanf_r+0x3b8>
    45b4:	00800404 	movi	r2,16
    45b8:	00c00074 	movhi	r3,1
    45bc:	18ee1904 	addi	r3,r3,-18332
    45c0:	9cc08814 	ori	r19,r19,544
    45c4:	054000c4 	movi	r21,3
    45c8:	d880a115 	stw	r2,644(sp)
    45cc:	d8c0a015 	stw	r3,640(sp)
    45d0:	003b7306 	br	33a0 <__svfscanf_r+0x3b8>
    45d4:	0009883a 	mov	r4,zero
    45d8:	00099200 	call	9920 <nanf>
    45dc:	b8800015 	stw	r2,0(r23)
    45e0:	003d2706 	br	3a80 <__svfscanf_r+0xa98>
    45e4:	a0c00007 	ldb	r3,0(r20)
    45e8:	00801b04 	movi	r2,108
    45ec:	18800826 	beq	r3,r2,4610 <__svfscanf_r+0x1628>
    45f0:	9cc00054 	ori	r19,r19,1
    45f4:	003ad806 	br	3158 <__svfscanf_r+0x170>
    45f8:	01000074 	movhi	r4,1
    45fc:	212cb904 	addi	r4,r4,-19740
    4600:	054000c4 	movi	r21,3
    4604:	d900a015 	stw	r4,640(sp)
    4608:	d800a115 	stw	zero,644(sp)
    460c:	003b6406 	br	33a0 <__svfscanf_r+0x3b8>
    4610:	a5000044 	addi	r20,r20,1
    4614:	9cc00094 	ori	r19,r19,2
    4618:	003acf06 	br	3158 <__svfscanf_r+0x170>
    461c:	9880004c 	andi	r2,r19,1
    4620:	1005003a 	cmpeq	r2,r2,zero
    4624:	10000a26 	beq	r2,zero,4650 <__svfscanf_r+0x1668>
    4628:	9880008c 	andi	r2,r19,2
    462c:	10000826 	beq	r2,zero,4650 <__svfscanf_r+0x1668>
    4630:	d900a417 	ldw	r4,656(sp)
    4634:	8807d7fa 	srai	r3,r17,31
    4638:	20800017 	ldw	r2,0(r4)
    463c:	21000104 	addi	r4,r4,4
    4640:	d900a415 	stw	r4,656(sp)
    4644:	14400015 	stw	r17,0(r2)
    4648:	10c00115 	stw	r3,4(r2)
    464c:	003a7906 	br	3034 <__svfscanf_r+0x4c>
    4650:	d8c0a417 	ldw	r3,656(sp)
    4654:	18800017 	ldw	r2,0(r3)
    4658:	18c00104 	addi	r3,r3,4
    465c:	d8c0a415 	stw	r3,656(sp)
    4660:	14400015 	stw	r17,0(r2)
    4664:	003a7306 	br	3034 <__svfscanf_r+0x4c>

00004668 <__svfscanf>:
    4668:	00800074 	movhi	r2,1
    466c:	1090f904 	addi	r2,r2,17380
    4670:	2013883a 	mov	r9,r4
    4674:	11000017 	ldw	r4,0(r2)
    4678:	2805883a 	mov	r2,r5
    467c:	300f883a 	mov	r7,r6
    4680:	480b883a 	mov	r5,r9
    4684:	100d883a 	mov	r6,r2
    4688:	0002fe81 	jmpi	2fe8 <__svfscanf_r>

0000468c <_vfscanf_r>:
    468c:	defffb04 	addi	sp,sp,-20
    4690:	dcc00315 	stw	r19,12(sp)
    4694:	dc800215 	stw	r18,8(sp)
    4698:	dc400115 	stw	r17,4(sp)
    469c:	dc000015 	stw	r16,0(sp)
    46a0:	dfc00415 	stw	ra,16(sp)
    46a4:	2021883a 	mov	r16,r4
    46a8:	2823883a 	mov	r17,r5
    46ac:	3025883a 	mov	r18,r6
    46b0:	3827883a 	mov	r19,r7
    46b4:	20000226 	beq	r4,zero,46c0 <_vfscanf_r+0x34>
    46b8:	20800e17 	ldw	r2,56(r4)
    46bc:	10000b26 	beq	r2,zero,46ec <_vfscanf_r+0x60>
    46c0:	8009883a 	mov	r4,r16
    46c4:	880b883a 	mov	r5,r17
    46c8:	900d883a 	mov	r6,r18
    46cc:	980f883a 	mov	r7,r19
    46d0:	dfc00417 	ldw	ra,16(sp)
    46d4:	dcc00317 	ldw	r19,12(sp)
    46d8:	dc800217 	ldw	r18,8(sp)
    46dc:	dc400117 	ldw	r17,4(sp)
    46e0:	dc000017 	ldw	r16,0(sp)
    46e4:	dec00504 	addi	sp,sp,20
    46e8:	0002fe81 	jmpi	2fe8 <__svfscanf_r>
    46ec:	00063080 	call	6308 <__sinit>
    46f0:	003ff306 	br	46c0 <_vfscanf_r+0x34>

000046f4 <vfscanf>:
    46f4:	defffb04 	addi	sp,sp,-20
    46f8:	dcc00315 	stw	r19,12(sp)
    46fc:	04c00074 	movhi	r19,1
    4700:	9cd0f904 	addi	r19,r19,17380
    4704:	98c00017 	ldw	r3,0(r19)
    4708:	dc800215 	stw	r18,8(sp)
    470c:	dc400115 	stw	r17,4(sp)
    4710:	dc000015 	stw	r16,0(sp)
    4714:	dfc00415 	stw	ra,16(sp)
    4718:	2021883a 	mov	r16,r4
    471c:	2823883a 	mov	r17,r5
    4720:	3025883a 	mov	r18,r6
    4724:	18000326 	beq	r3,zero,4734 <vfscanf+0x40>
    4728:	18800e17 	ldw	r2,56(r3)
    472c:	1809883a 	mov	r4,r3
    4730:	10000b26 	beq	r2,zero,4760 <vfscanf+0x6c>
    4734:	99000017 	ldw	r4,0(r19)
    4738:	800b883a 	mov	r5,r16
    473c:	880d883a 	mov	r6,r17
    4740:	900f883a 	mov	r7,r18
    4744:	dfc00417 	ldw	ra,16(sp)
    4748:	dcc00317 	ldw	r19,12(sp)
    474c:	dc800217 	ldw	r18,8(sp)
    4750:	dc400117 	ldw	r17,4(sp)
    4754:	dc000017 	ldw	r16,0(sp)
    4758:	dec00504 	addi	sp,sp,20
    475c:	0002fe81 	jmpi	2fe8 <__svfscanf_r>
    4760:	00063080 	call	6308 <__sinit>
    4764:	003ff306 	br	4734 <vfscanf+0x40>

00004768 <__swsetup_r>:
    4768:	00800074 	movhi	r2,1
    476c:	1090f904 	addi	r2,r2,17380
    4770:	10c00017 	ldw	r3,0(r2)
    4774:	defffd04 	addi	sp,sp,-12
    4778:	dc400115 	stw	r17,4(sp)
    477c:	dc000015 	stw	r16,0(sp)
    4780:	dfc00215 	stw	ra,8(sp)
    4784:	2023883a 	mov	r17,r4
    4788:	2821883a 	mov	r16,r5
    478c:	18000226 	beq	r3,zero,4798 <__swsetup_r+0x30>
    4790:	18800e17 	ldw	r2,56(r3)
    4794:	10001f26 	beq	r2,zero,4814 <__swsetup_r+0xac>
    4798:	8100030b 	ldhu	r4,12(r16)
    479c:	2080020c 	andi	r2,r4,8
    47a0:	10002826 	beq	r2,zero,4844 <__swsetup_r+0xdc>
    47a4:	81400417 	ldw	r5,16(r16)
    47a8:	28001d26 	beq	r5,zero,4820 <__swsetup_r+0xb8>
    47ac:	2080004c 	andi	r2,r4,1
    47b0:	1005003a 	cmpeq	r2,r2,zero
    47b4:	10000b26 	beq	r2,zero,47e4 <__swsetup_r+0x7c>
    47b8:	2080008c 	andi	r2,r4,2
    47bc:	10001226 	beq	r2,zero,4808 <__swsetup_r+0xa0>
    47c0:	0005883a 	mov	r2,zero
    47c4:	80800215 	stw	r2,8(r16)
    47c8:	28000b26 	beq	r5,zero,47f8 <__swsetup_r+0x90>
    47cc:	0005883a 	mov	r2,zero
    47d0:	dfc00217 	ldw	ra,8(sp)
    47d4:	dc400117 	ldw	r17,4(sp)
    47d8:	dc000017 	ldw	r16,0(sp)
    47dc:	dec00304 	addi	sp,sp,12
    47e0:	f800283a 	ret
    47e4:	80800517 	ldw	r2,20(r16)
    47e8:	80000215 	stw	zero,8(r16)
    47ec:	0085c83a 	sub	r2,zero,r2
    47f0:	80800615 	stw	r2,24(r16)
    47f4:	283ff51e 	bne	r5,zero,47cc <__swsetup_r+0x64>
    47f8:	2080200c 	andi	r2,r4,128
    47fc:	103ff326 	beq	r2,zero,47cc <__swsetup_r+0x64>
    4800:	00bfffc4 	movi	r2,-1
    4804:	003ff206 	br	47d0 <__swsetup_r+0x68>
    4808:	80800517 	ldw	r2,20(r16)
    480c:	80800215 	stw	r2,8(r16)
    4810:	003fed06 	br	47c8 <__swsetup_r+0x60>
    4814:	1809883a 	mov	r4,r3
    4818:	00063080 	call	6308 <__sinit>
    481c:	003fde06 	br	4798 <__swsetup_r+0x30>
    4820:	20c0a00c 	andi	r3,r4,640
    4824:	00808004 	movi	r2,512
    4828:	18bfe026 	beq	r3,r2,47ac <__swsetup_r+0x44>
    482c:	8809883a 	mov	r4,r17
    4830:	800b883a 	mov	r5,r16
    4834:	00072e80 	call	72e8 <__smakebuf_r>
    4838:	8100030b 	ldhu	r4,12(r16)
    483c:	81400417 	ldw	r5,16(r16)
    4840:	003fda06 	br	47ac <__swsetup_r+0x44>
    4844:	2080040c 	andi	r2,r4,16
    4848:	103fed26 	beq	r2,zero,4800 <__swsetup_r+0x98>
    484c:	2080010c 	andi	r2,r4,4
    4850:	10001226 	beq	r2,zero,489c <__swsetup_r+0x134>
    4854:	81400c17 	ldw	r5,48(r16)
    4858:	28000526 	beq	r5,zero,4870 <__swsetup_r+0x108>
    485c:	80801004 	addi	r2,r16,64
    4860:	28800226 	beq	r5,r2,486c <__swsetup_r+0x104>
    4864:	8809883a 	mov	r4,r17
    4868:	00068c80 	call	68c8 <_free_r>
    486c:	80000c15 	stw	zero,48(r16)
    4870:	8080030b 	ldhu	r2,12(r16)
    4874:	81400417 	ldw	r5,16(r16)
    4878:	80000115 	stw	zero,4(r16)
    487c:	10bff6cc 	andi	r2,r2,65499
    4880:	8080030d 	sth	r2,12(r16)
    4884:	81400015 	stw	r5,0(r16)
    4888:	8080030b 	ldhu	r2,12(r16)
    488c:	10800214 	ori	r2,r2,8
    4890:	113fffcc 	andi	r4,r2,65535
    4894:	8080030d 	sth	r2,12(r16)
    4898:	003fc306 	br	47a8 <__swsetup_r+0x40>
    489c:	81400417 	ldw	r5,16(r16)
    48a0:	003ff906 	br	4888 <__swsetup_r+0x120>

000048a4 <quorem>:
    48a4:	28c00417 	ldw	r3,16(r5)
    48a8:	20800417 	ldw	r2,16(r4)
    48ac:	defff604 	addi	sp,sp,-40
    48b0:	ddc00715 	stw	r23,28(sp)
    48b4:	dd400515 	stw	r21,20(sp)
    48b8:	dfc00915 	stw	ra,36(sp)
    48bc:	df000815 	stw	fp,32(sp)
    48c0:	dd800615 	stw	r22,24(sp)
    48c4:	dd000415 	stw	r20,16(sp)
    48c8:	dcc00315 	stw	r19,12(sp)
    48cc:	dc800215 	stw	r18,8(sp)
    48d0:	dc400115 	stw	r17,4(sp)
    48d4:	dc000015 	stw	r16,0(sp)
    48d8:	202f883a 	mov	r23,r4
    48dc:	282b883a 	mov	r21,r5
    48e0:	10c07416 	blt	r2,r3,4ab4 <quorem+0x210>
    48e4:	1c7fffc4 	addi	r17,r3,-1
    48e8:	8c45883a 	add	r2,r17,r17
    48ec:	1085883a 	add	r2,r2,r2
    48f0:	2c000504 	addi	r16,r5,20
    48f4:	24c00504 	addi	r19,r4,20
    48f8:	14ed883a 	add	r22,r2,r19
    48fc:	80a5883a 	add	r18,r16,r2
    4900:	b7000017 	ldw	fp,0(r22)
    4904:	91400017 	ldw	r5,0(r18)
    4908:	e009883a 	mov	r4,fp
    490c:	29400044 	addi	r5,r5,1
    4910:	000f1740 	call	f174 <__udivsi3>
    4914:	1029883a 	mov	r20,r2
    4918:	10003c1e 	bne	r2,zero,4a0c <quorem+0x168>
    491c:	a80b883a 	mov	r5,r21
    4920:	b809883a 	mov	r4,r23
    4924:	00081140 	call	8114 <__mcmp>
    4928:	10002b16 	blt	r2,zero,49d8 <quorem+0x134>
    492c:	a5000044 	addi	r20,r20,1
    4930:	980f883a 	mov	r7,r19
    4934:	0011883a 	mov	r8,zero
    4938:	0009883a 	mov	r4,zero
    493c:	81400017 	ldw	r5,0(r16)
    4940:	38c00017 	ldw	r3,0(r7)
    4944:	84000104 	addi	r16,r16,4
    4948:	28bfffcc 	andi	r2,r5,65535
    494c:	2085883a 	add	r2,r4,r2
    4950:	11bfffcc 	andi	r6,r2,65535
    4954:	193fffcc 	andi	r4,r3,65535
    4958:	1004d43a 	srli	r2,r2,16
    495c:	280ad43a 	srli	r5,r5,16
    4960:	2189c83a 	sub	r4,r4,r6
    4964:	2209883a 	add	r4,r4,r8
    4968:	1806d43a 	srli	r3,r3,16
    496c:	288b883a 	add	r5,r5,r2
    4970:	200dd43a 	srai	r6,r4,16
    4974:	28bfffcc 	andi	r2,r5,65535
    4978:	1887c83a 	sub	r3,r3,r2
    497c:	1987883a 	add	r3,r3,r6
    4980:	3900000d 	sth	r4,0(r7)
    4984:	38c0008d 	sth	r3,2(r7)
    4988:	2808d43a 	srli	r4,r5,16
    498c:	39c00104 	addi	r7,r7,4
    4990:	1811d43a 	srai	r8,r3,16
    4994:	943fe92e 	bgeu	r18,r16,493c <quorem+0x98>
    4998:	8c45883a 	add	r2,r17,r17
    499c:	1085883a 	add	r2,r2,r2
    49a0:	9885883a 	add	r2,r19,r2
    49a4:	10c00017 	ldw	r3,0(r2)
    49a8:	18000b1e 	bne	r3,zero,49d8 <quorem+0x134>
    49ac:	113fff04 	addi	r4,r2,-4
    49b0:	9900082e 	bgeu	r19,r4,49d4 <quorem+0x130>
    49b4:	10bfff17 	ldw	r2,-4(r2)
    49b8:	10000326 	beq	r2,zero,49c8 <quorem+0x124>
    49bc:	00000506 	br	49d4 <quorem+0x130>
    49c0:	20800017 	ldw	r2,0(r4)
    49c4:	1000031e 	bne	r2,zero,49d4 <quorem+0x130>
    49c8:	213fff04 	addi	r4,r4,-4
    49cc:	8c7fffc4 	addi	r17,r17,-1
    49d0:	993ffb36 	bltu	r19,r4,49c0 <quorem+0x11c>
    49d4:	bc400415 	stw	r17,16(r23)
    49d8:	a005883a 	mov	r2,r20
    49dc:	dfc00917 	ldw	ra,36(sp)
    49e0:	df000817 	ldw	fp,32(sp)
    49e4:	ddc00717 	ldw	r23,28(sp)
    49e8:	dd800617 	ldw	r22,24(sp)
    49ec:	dd400517 	ldw	r21,20(sp)
    49f0:	dd000417 	ldw	r20,16(sp)
    49f4:	dcc00317 	ldw	r19,12(sp)
    49f8:	dc800217 	ldw	r18,8(sp)
    49fc:	dc400117 	ldw	r17,4(sp)
    4a00:	dc000017 	ldw	r16,0(sp)
    4a04:	dec00a04 	addi	sp,sp,40
    4a08:	f800283a 	ret
    4a0c:	980f883a 	mov	r7,r19
    4a10:	8011883a 	mov	r8,r16
    4a14:	0013883a 	mov	r9,zero
    4a18:	000d883a 	mov	r6,zero
    4a1c:	40c00017 	ldw	r3,0(r8)
    4a20:	39000017 	ldw	r4,0(r7)
    4a24:	42000104 	addi	r8,r8,4
    4a28:	18bfffcc 	andi	r2,r3,65535
    4a2c:	a085383a 	mul	r2,r20,r2
    4a30:	1806d43a 	srli	r3,r3,16
    4a34:	217fffcc 	andi	r5,r4,65535
    4a38:	3085883a 	add	r2,r6,r2
    4a3c:	11bfffcc 	andi	r6,r2,65535
    4a40:	a0c7383a 	mul	r3,r20,r3
    4a44:	1004d43a 	srli	r2,r2,16
    4a48:	298bc83a 	sub	r5,r5,r6
    4a4c:	2a4b883a 	add	r5,r5,r9
    4a50:	2008d43a 	srli	r4,r4,16
    4a54:	1887883a 	add	r3,r3,r2
    4a58:	280dd43a 	srai	r6,r5,16
    4a5c:	18bfffcc 	andi	r2,r3,65535
    4a60:	2089c83a 	sub	r4,r4,r2
    4a64:	2189883a 	add	r4,r4,r6
    4a68:	3900008d 	sth	r4,2(r7)
    4a6c:	3940000d 	sth	r5,0(r7)
    4a70:	180cd43a 	srli	r6,r3,16
    4a74:	39c00104 	addi	r7,r7,4
    4a78:	2013d43a 	srai	r9,r4,16
    4a7c:	923fe72e 	bgeu	r18,r8,4a1c <quorem+0x178>
    4a80:	e03fa61e 	bne	fp,zero,491c <quorem+0x78>
    4a84:	b0ffff04 	addi	r3,r22,-4
    4a88:	98c0082e 	bgeu	r19,r3,4aac <quorem+0x208>
    4a8c:	b0bfff17 	ldw	r2,-4(r22)
    4a90:	10000326 	beq	r2,zero,4aa0 <quorem+0x1fc>
    4a94:	00000506 	br	4aac <quorem+0x208>
    4a98:	18800017 	ldw	r2,0(r3)
    4a9c:	1000031e 	bne	r2,zero,4aac <quorem+0x208>
    4aa0:	18ffff04 	addi	r3,r3,-4
    4aa4:	8c7fffc4 	addi	r17,r17,-1
    4aa8:	98fffb36 	bltu	r19,r3,4a98 <quorem+0x1f4>
    4aac:	bc400415 	stw	r17,16(r23)
    4ab0:	003f9a06 	br	491c <quorem+0x78>
    4ab4:	0005883a 	mov	r2,zero
    4ab8:	003fc806 	br	49dc <quorem+0x138>

00004abc <_dtoa_r>:
    4abc:	22001017 	ldw	r8,64(r4)
    4ac0:	deffda04 	addi	sp,sp,-152
    4ac4:	dd402115 	stw	r21,132(sp)
    4ac8:	dd002015 	stw	r20,128(sp)
    4acc:	dc801e15 	stw	r18,120(sp)
    4ad0:	dc401d15 	stw	r17,116(sp)
    4ad4:	dfc02515 	stw	ra,148(sp)
    4ad8:	df002415 	stw	fp,144(sp)
    4adc:	ddc02315 	stw	r23,140(sp)
    4ae0:	dd802215 	stw	r22,136(sp)
    4ae4:	dcc01f15 	stw	r19,124(sp)
    4ae8:	dc001c15 	stw	r16,112(sp)
    4aec:	d9001615 	stw	r4,88(sp)
    4af0:	3023883a 	mov	r17,r6
    4af4:	2829883a 	mov	r20,r5
    4af8:	d9c01715 	stw	r7,92(sp)
    4afc:	dc802817 	ldw	r18,160(sp)
    4b00:	302b883a 	mov	r21,r6
    4b04:	40000a26 	beq	r8,zero,4b30 <_dtoa_r+0x74>
    4b08:	20801117 	ldw	r2,68(r4)
    4b0c:	400b883a 	mov	r5,r8
    4b10:	40800115 	stw	r2,4(r8)
    4b14:	20c01117 	ldw	r3,68(r4)
    4b18:	00800044 	movi	r2,1
    4b1c:	10c4983a 	sll	r2,r2,r3
    4b20:	40800215 	stw	r2,8(r8)
    4b24:	0007fb80 	call	7fb8 <_Bfree>
    4b28:	d8c01617 	ldw	r3,88(sp)
    4b2c:	18001015 	stw	zero,64(r3)
    4b30:	8800a316 	blt	r17,zero,4dc0 <_dtoa_r+0x304>
    4b34:	90000015 	stw	zero,0(r18)
    4b38:	a8dffc2c 	andhi	r3,r21,32752
    4b3c:	009ffc34 	movhi	r2,32752
    4b40:	18809126 	beq	r3,r2,4d88 <_dtoa_r+0x2cc>
    4b44:	000d883a 	mov	r6,zero
    4b48:	000f883a 	mov	r7,zero
    4b4c:	a009883a 	mov	r4,r20
    4b50:	a80b883a 	mov	r5,r21
    4b54:	dd001215 	stw	r20,72(sp)
    4b58:	dd401315 	stw	r21,76(sp)
    4b5c:	000e9b80 	call	e9b8 <__nedf2>
    4b60:	1000171e 	bne	r2,zero,4bc0 <_dtoa_r+0x104>
    4b64:	d9802717 	ldw	r6,156(sp)
    4b68:	00800044 	movi	r2,1
    4b6c:	30800015 	stw	r2,0(r6)
    4b70:	d8802917 	ldw	r2,164(sp)
    4b74:	10029b26 	beq	r2,zero,55e4 <_dtoa_r+0xb28>
    4b78:	d9002917 	ldw	r4,164(sp)
    4b7c:	00800074 	movhi	r2,1
    4b80:	1088a144 	addi	r2,r2,8837
    4b84:	10ffffc4 	addi	r3,r2,-1
    4b88:	20800015 	stw	r2,0(r4)
    4b8c:	1805883a 	mov	r2,r3
    4b90:	dfc02517 	ldw	ra,148(sp)
    4b94:	df002417 	ldw	fp,144(sp)
    4b98:	ddc02317 	ldw	r23,140(sp)
    4b9c:	dd802217 	ldw	r22,136(sp)
    4ba0:	dd402117 	ldw	r21,132(sp)
    4ba4:	dd002017 	ldw	r20,128(sp)
    4ba8:	dcc01f17 	ldw	r19,124(sp)
    4bac:	dc801e17 	ldw	r18,120(sp)
    4bb0:	dc401d17 	ldw	r17,116(sp)
    4bb4:	dc001c17 	ldw	r16,112(sp)
    4bb8:	dec02604 	addi	sp,sp,152
    4bbc:	f800283a 	ret
    4bc0:	d9001617 	ldw	r4,88(sp)
    4bc4:	d9401217 	ldw	r5,72(sp)
    4bc8:	d8800104 	addi	r2,sp,4
    4bcc:	a80d883a 	mov	r6,r21
    4bd0:	d9c00204 	addi	r7,sp,8
    4bd4:	d8800015 	stw	r2,0(sp)
    4bd8:	00085f40 	call	85f4 <__d2b>
    4bdc:	d8800715 	stw	r2,28(sp)
    4be0:	a804d53a 	srli	r2,r21,20
    4be4:	1101ffcc 	andi	r4,r2,2047
    4be8:	20008626 	beq	r4,zero,4e04 <_dtoa_r+0x348>
    4bec:	d8c01217 	ldw	r3,72(sp)
    4bf0:	00800434 	movhi	r2,16
    4bf4:	10bfffc4 	addi	r2,r2,-1
    4bf8:	ddc00117 	ldw	r23,4(sp)
    4bfc:	a884703a 	and	r2,r21,r2
    4c00:	1811883a 	mov	r8,r3
    4c04:	124ffc34 	orhi	r9,r2,16368
    4c08:	25bf0044 	addi	r22,r4,-1023
    4c0c:	d8000815 	stw	zero,32(sp)
    4c10:	0005883a 	mov	r2,zero
    4c14:	00cffe34 	movhi	r3,16376
    4c18:	480b883a 	mov	r5,r9
    4c1c:	4009883a 	mov	r4,r8
    4c20:	180f883a 	mov	r7,r3
    4c24:	100d883a 	mov	r6,r2
    4c28:	000e2200 	call	e220 <__subdf3>
    4c2c:	0218dbf4 	movhi	r8,25455
    4c30:	4210d844 	addi	r8,r8,17249
    4c34:	024ff4f4 	movhi	r9,16339
    4c38:	4a61e9c4 	addi	r9,r9,-30809
    4c3c:	480f883a 	mov	r7,r9
    4c40:	400d883a 	mov	r6,r8
    4c44:	180b883a 	mov	r5,r3
    4c48:	1009883a 	mov	r4,r2
    4c4c:	000e3140 	call	e314 <__muldf3>
    4c50:	0222d874 	movhi	r8,35681
    4c54:	42322cc4 	addi	r8,r8,-14157
    4c58:	024ff1f4 	movhi	r9,16327
    4c5c:	4a628a04 	addi	r9,r9,-30168
    4c60:	480f883a 	mov	r7,r9
    4c64:	400d883a 	mov	r6,r8
    4c68:	180b883a 	mov	r5,r3
    4c6c:	1009883a 	mov	r4,r2
    4c70:	000e2a00 	call	e2a0 <__adddf3>
    4c74:	b009883a 	mov	r4,r22
    4c78:	1021883a 	mov	r16,r2
    4c7c:	1823883a 	mov	r17,r3
    4c80:	000ec600 	call	ec60 <__floatsidf>
    4c84:	021427f4 	movhi	r8,20639
    4c88:	421e7ec4 	addi	r8,r8,31227
    4c8c:	024ff4f4 	movhi	r9,16339
    4c90:	4a5104c4 	addi	r9,r9,17427
    4c94:	480f883a 	mov	r7,r9
    4c98:	400d883a 	mov	r6,r8
    4c9c:	180b883a 	mov	r5,r3
    4ca0:	1009883a 	mov	r4,r2
    4ca4:	000e3140 	call	e314 <__muldf3>
    4ca8:	180f883a 	mov	r7,r3
    4cac:	880b883a 	mov	r5,r17
    4cb0:	100d883a 	mov	r6,r2
    4cb4:	8009883a 	mov	r4,r16
    4cb8:	000e2a00 	call	e2a0 <__adddf3>
    4cbc:	1009883a 	mov	r4,r2
    4cc0:	180b883a 	mov	r5,r3
    4cc4:	1021883a 	mov	r16,r2
    4cc8:	1823883a 	mov	r17,r3
    4ccc:	000ed580 	call	ed58 <__fixdfsi>
    4cd0:	000d883a 	mov	r6,zero
    4cd4:	000f883a 	mov	r7,zero
    4cd8:	8009883a 	mov	r4,r16
    4cdc:	880b883a 	mov	r5,r17
    4ce0:	d8800d15 	stw	r2,52(sp)
    4ce4:	000eb500 	call	eb50 <__ltdf2>
    4ce8:	10031716 	blt	r2,zero,5948 <_dtoa_r+0xe8c>
    4cec:	d8c00d17 	ldw	r3,52(sp)
    4cf0:	00800584 	movi	r2,22
    4cf4:	10c1482e 	bgeu	r2,r3,5218 <_dtoa_r+0x75c>
    4cf8:	01000044 	movi	r4,1
    4cfc:	d9000c15 	stw	r4,48(sp)
    4d00:	bd85c83a 	sub	r2,r23,r22
    4d04:	11bfffc4 	addi	r6,r2,-1
    4d08:	30030b16 	blt	r6,zero,5938 <_dtoa_r+0xe7c>
    4d0c:	d9800a15 	stw	r6,40(sp)
    4d10:	d8001115 	stw	zero,68(sp)
    4d14:	d8c00d17 	ldw	r3,52(sp)
    4d18:	1802ff16 	blt	r3,zero,5918 <_dtoa_r+0xe5c>
    4d1c:	d9000a17 	ldw	r4,40(sp)
    4d20:	d8c00915 	stw	r3,36(sp)
    4d24:	d8001015 	stw	zero,64(sp)
    4d28:	20c9883a 	add	r4,r4,r3
    4d2c:	d9000a15 	stw	r4,40(sp)
    4d30:	d9001717 	ldw	r4,92(sp)
    4d34:	00800244 	movi	r2,9
    4d38:	11004636 	bltu	r2,r4,4e54 <_dtoa_r+0x398>
    4d3c:	00800144 	movi	r2,5
    4d40:	11020416 	blt	r2,r4,5554 <_dtoa_r+0xa98>
    4d44:	04400044 	movi	r17,1
    4d48:	d8c01717 	ldw	r3,92(sp)
    4d4c:	00800144 	movi	r2,5
    4d50:	10c1ed36 	bltu	r2,r3,5508 <_dtoa_r+0xa4c>
    4d54:	18c5883a 	add	r2,r3,r3
    4d58:	1085883a 	add	r2,r2,r2
    4d5c:	00c00034 	movhi	r3,0
    4d60:	18d35c04 	addi	r3,r3,19824
    4d64:	10c5883a 	add	r2,r2,r3
    4d68:	11000017 	ldw	r4,0(r2)
    4d6c:	2000683a 	jmp	r4
    4d70:	00004e5c 	xori	zero,zero,313
    4d74:	00004e5c 	xori	zero,zero,313
    4d78:	0000585c 	xori	zero,zero,353
    4d7c:	00005834 	movhi	zero,352
    4d80:	00005878 	rdprs	zero,zero,353
    4d84:	00005884 	movi	zero,354
    4d88:	d9002717 	ldw	r4,156(sp)
    4d8c:	0089c3c4 	movi	r2,9999
    4d90:	20800015 	stw	r2,0(r4)
    4d94:	a0001026 	beq	r20,zero,4dd8 <_dtoa_r+0x31c>
    4d98:	00c00074 	movhi	r3,1
    4d9c:	18c95804 	addi	r3,r3,9568
    4da0:	d9802917 	ldw	r6,164(sp)
    4da4:	303f7926 	beq	r6,zero,4b8c <_dtoa_r+0xd0>
    4da8:	188000c7 	ldb	r2,3(r3)
    4dac:	190000c4 	addi	r4,r3,3
    4db0:	1000101e 	bne	r2,zero,4df4 <_dtoa_r+0x338>
    4db4:	d8802917 	ldw	r2,164(sp)
    4db8:	11000015 	stw	r4,0(r2)
    4dbc:	003f7306 	br	4b8c <_dtoa_r+0xd0>
    4dc0:	00a00034 	movhi	r2,32768
    4dc4:	10bfffc4 	addi	r2,r2,-1
    4dc8:	00c00044 	movi	r3,1
    4dcc:	88aa703a 	and	r21,r17,r2
    4dd0:	90c00015 	stw	r3,0(r18)
    4dd4:	003f5806 	br	4b38 <_dtoa_r+0x7c>
    4dd8:	00800434 	movhi	r2,16
    4ddc:	10bfffc4 	addi	r2,r2,-1
    4de0:	a884703a 	and	r2,r21,r2
    4de4:	103fec1e 	bne	r2,zero,4d98 <_dtoa_r+0x2dc>
    4de8:	00c00074 	movhi	r3,1
    4dec:	18c95504 	addi	r3,r3,9556
    4df0:	003feb06 	br	4da0 <_dtoa_r+0x2e4>
    4df4:	d8802917 	ldw	r2,164(sp)
    4df8:	19000204 	addi	r4,r3,8
    4dfc:	11000015 	stw	r4,0(r2)
    4e00:	003f6206 	br	4b8c <_dtoa_r+0xd0>
    4e04:	ddc00117 	ldw	r23,4(sp)
    4e08:	d8800217 	ldw	r2,8(sp)
    4e0c:	01000804 	movi	r4,32
    4e10:	b8c10c84 	addi	r3,r23,1074
    4e14:	18a3883a 	add	r17,r3,r2
    4e18:	2441b80e 	bge	r4,r17,54fc <_dtoa_r+0xa40>
    4e1c:	00c01004 	movi	r3,64
    4e20:	1c47c83a 	sub	r3,r3,r17
    4e24:	88bff804 	addi	r2,r17,-32
    4e28:	a8c6983a 	sll	r3,r21,r3
    4e2c:	a084d83a 	srl	r2,r20,r2
    4e30:	1888b03a 	or	r4,r3,r2
    4e34:	000eea40 	call	eea4 <__floatunsidf>
    4e38:	1011883a 	mov	r8,r2
    4e3c:	00bf8434 	movhi	r2,65040
    4e40:	01000044 	movi	r4,1
    4e44:	10d3883a 	add	r9,r2,r3
    4e48:	8dbef344 	addi	r22,r17,-1075
    4e4c:	d9000815 	stw	r4,32(sp)
    4e50:	003f6f06 	br	4c10 <_dtoa_r+0x154>
    4e54:	d8001715 	stw	zero,92(sp)
    4e58:	04400044 	movi	r17,1
    4e5c:	00bfffc4 	movi	r2,-1
    4e60:	00c00044 	movi	r3,1
    4e64:	d8800e15 	stw	r2,56(sp)
    4e68:	d8002615 	stw	zero,152(sp)
    4e6c:	d8800f15 	stw	r2,60(sp)
    4e70:	d8c00b15 	stw	r3,44(sp)
    4e74:	1021883a 	mov	r16,r2
    4e78:	d8801617 	ldw	r2,88(sp)
    4e7c:	10001115 	stw	zero,68(r2)
    4e80:	d8801617 	ldw	r2,88(sp)
    4e84:	11401117 	ldw	r5,68(r2)
    4e88:	1009883a 	mov	r4,r2
    4e8c:	00085380 	call	8538 <_Balloc>
    4e90:	d8c01617 	ldw	r3,88(sp)
    4e94:	d8800515 	stw	r2,20(sp)
    4e98:	18801015 	stw	r2,64(r3)
    4e9c:	00800384 	movi	r2,14
    4ea0:	14006836 	bltu	r2,r16,5044 <_dtoa_r+0x588>
    4ea4:	8805003a 	cmpeq	r2,r17,zero
    4ea8:	1000661e 	bne	r2,zero,5044 <_dtoa_r+0x588>
    4eac:	d9000d17 	ldw	r4,52(sp)
    4eb0:	0102300e 	bge	zero,r4,5774 <_dtoa_r+0xcb8>
    4eb4:	208003cc 	andi	r2,r4,15
    4eb8:	100490fa 	slli	r2,r2,3
    4ebc:	2025d13a 	srai	r18,r4,4
    4ec0:	00c00074 	movhi	r3,1
    4ec4:	18c96a04 	addi	r3,r3,9640
    4ec8:	10c5883a 	add	r2,r2,r3
    4ecc:	90c0040c 	andi	r3,r18,16
    4ed0:	14000017 	ldw	r16,0(r2)
    4ed4:	14400117 	ldw	r17,4(r2)
    4ed8:	18036a1e 	bne	r3,zero,5c84 <_dtoa_r+0x11c8>
    4edc:	05800084 	movi	r22,2
    4ee0:	90001026 	beq	r18,zero,4f24 <_dtoa_r+0x468>
    4ee4:	04c00074 	movhi	r19,1
    4ee8:	9cc99c04 	addi	r19,r19,9840
    4eec:	9080004c 	andi	r2,r18,1
    4ef0:	1005003a 	cmpeq	r2,r2,zero
    4ef4:	1000081e 	bne	r2,zero,4f18 <_dtoa_r+0x45c>
    4ef8:	99800017 	ldw	r6,0(r19)
    4efc:	99c00117 	ldw	r7,4(r19)
    4f00:	880b883a 	mov	r5,r17
    4f04:	8009883a 	mov	r4,r16
    4f08:	000e3140 	call	e314 <__muldf3>
    4f0c:	1021883a 	mov	r16,r2
    4f10:	b5800044 	addi	r22,r22,1
    4f14:	1823883a 	mov	r17,r3
    4f18:	9025d07a 	srai	r18,r18,1
    4f1c:	9cc00204 	addi	r19,r19,8
    4f20:	903ff21e 	bne	r18,zero,4eec <_dtoa_r+0x430>
    4f24:	a80b883a 	mov	r5,r21
    4f28:	a009883a 	mov	r4,r20
    4f2c:	880f883a 	mov	r7,r17
    4f30:	800d883a 	mov	r6,r16
    4f34:	000e6d80 	call	e6d8 <__divdf3>
    4f38:	1029883a 	mov	r20,r2
    4f3c:	182b883a 	mov	r21,r3
    4f40:	d8c00c17 	ldw	r3,48(sp)
    4f44:	1805003a 	cmpeq	r2,r3,zero
    4f48:	1000081e 	bne	r2,zero,4f6c <_dtoa_r+0x4b0>
    4f4c:	0005883a 	mov	r2,zero
    4f50:	00cffc34 	movhi	r3,16368
    4f54:	180f883a 	mov	r7,r3
    4f58:	a009883a 	mov	r4,r20
    4f5c:	a80b883a 	mov	r5,r21
    4f60:	100d883a 	mov	r6,r2
    4f64:	000eb500 	call	eb50 <__ltdf2>
    4f68:	1003fe16 	blt	r2,zero,5f64 <_dtoa_r+0x14a8>
    4f6c:	b009883a 	mov	r4,r22
    4f70:	000ec600 	call	ec60 <__floatsidf>
    4f74:	180b883a 	mov	r5,r3
    4f78:	1009883a 	mov	r4,r2
    4f7c:	a00d883a 	mov	r6,r20
    4f80:	a80f883a 	mov	r7,r21
    4f84:	000e3140 	call	e314 <__muldf3>
    4f88:	0011883a 	mov	r8,zero
    4f8c:	02500734 	movhi	r9,16412
    4f90:	1009883a 	mov	r4,r2
    4f94:	180b883a 	mov	r5,r3
    4f98:	480f883a 	mov	r7,r9
    4f9c:	400d883a 	mov	r6,r8
    4fa0:	000e2a00 	call	e2a0 <__adddf3>
    4fa4:	d9000f17 	ldw	r4,60(sp)
    4fa8:	102d883a 	mov	r22,r2
    4fac:	00bf3034 	movhi	r2,64704
    4fb0:	18b9883a 	add	fp,r3,r2
    4fb4:	e02f883a 	mov	r23,fp
    4fb8:	20028f1e 	bne	r4,zero,59f8 <_dtoa_r+0xf3c>
    4fbc:	0005883a 	mov	r2,zero
    4fc0:	00d00534 	movhi	r3,16404
    4fc4:	a009883a 	mov	r4,r20
    4fc8:	a80b883a 	mov	r5,r21
    4fcc:	180f883a 	mov	r7,r3
    4fd0:	100d883a 	mov	r6,r2
    4fd4:	000e2200 	call	e220 <__subdf3>
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	e00f883a 	mov	r7,fp
    4fe0:	180b883a 	mov	r5,r3
    4fe4:	b00d883a 	mov	r6,r22
    4fe8:	1025883a 	mov	r18,r2
    4fec:	1827883a 	mov	r19,r3
    4ff0:	000ea400 	call	ea40 <__gtdf2>
    4ff4:	00834f16 	blt	zero,r2,5d34 <_dtoa_r+0x1278>
    4ff8:	e0e0003c 	xorhi	r3,fp,32768
    4ffc:	9009883a 	mov	r4,r18
    5000:	980b883a 	mov	r5,r19
    5004:	180f883a 	mov	r7,r3
    5008:	b00d883a 	mov	r6,r22
    500c:	000eb500 	call	eb50 <__ltdf2>
    5010:	1000080e 	bge	r2,zero,5034 <_dtoa_r+0x578>
    5014:	0027883a 	mov	r19,zero
    5018:	0025883a 	mov	r18,zero
    501c:	d8802617 	ldw	r2,152(sp)
    5020:	df000517 	ldw	fp,20(sp)
    5024:	d8000615 	stw	zero,24(sp)
    5028:	0084303a 	nor	r2,zero,r2
    502c:	d8800d15 	stw	r2,52(sp)
    5030:	00019b06 	br	56a0 <_dtoa_r+0xbe4>
    5034:	d9801217 	ldw	r6,72(sp)
    5038:	d8801317 	ldw	r2,76(sp)
    503c:	3029883a 	mov	r20,r6
    5040:	102b883a 	mov	r21,r2
    5044:	d8c00217 	ldw	r3,8(sp)
    5048:	18008516 	blt	r3,zero,5260 <_dtoa_r+0x7a4>
    504c:	d9000d17 	ldw	r4,52(sp)
    5050:	00800384 	movi	r2,14
    5054:	11008216 	blt	r2,r4,5260 <_dtoa_r+0x7a4>
    5058:	200490fa 	slli	r2,r4,3
    505c:	d9802617 	ldw	r6,152(sp)
    5060:	00c00074 	movhi	r3,1
    5064:	18c96a04 	addi	r3,r3,9640
    5068:	10c5883a 	add	r2,r2,r3
    506c:	14800017 	ldw	r18,0(r2)
    5070:	14c00117 	ldw	r19,4(r2)
    5074:	30031e16 	blt	r6,zero,5cf0 <_dtoa_r+0x1234>
    5078:	d9000517 	ldw	r4,20(sp)
    507c:	d8c00f17 	ldw	r3,60(sp)
    5080:	a823883a 	mov	r17,r21
    5084:	a021883a 	mov	r16,r20
    5088:	192b883a 	add	r21,r3,r4
    508c:	2039883a 	mov	fp,r4
    5090:	00000f06 	br	50d0 <_dtoa_r+0x614>
    5094:	0005883a 	mov	r2,zero
    5098:	00d00934 	movhi	r3,16420
    509c:	5009883a 	mov	r4,r10
    50a0:	580b883a 	mov	r5,r11
    50a4:	180f883a 	mov	r7,r3
    50a8:	100d883a 	mov	r6,r2
    50ac:	000e3140 	call	e314 <__muldf3>
    50b0:	180b883a 	mov	r5,r3
    50b4:	000d883a 	mov	r6,zero
    50b8:	000f883a 	mov	r7,zero
    50bc:	1009883a 	mov	r4,r2
    50c0:	1021883a 	mov	r16,r2
    50c4:	1823883a 	mov	r17,r3
    50c8:	000e9b80 	call	e9b8 <__nedf2>
    50cc:	10004526 	beq	r2,zero,51e4 <_dtoa_r+0x728>
    50d0:	900d883a 	mov	r6,r18
    50d4:	980f883a 	mov	r7,r19
    50d8:	8009883a 	mov	r4,r16
    50dc:	880b883a 	mov	r5,r17
    50e0:	000e6d80 	call	e6d8 <__divdf3>
    50e4:	180b883a 	mov	r5,r3
    50e8:	1009883a 	mov	r4,r2
    50ec:	000ed580 	call	ed58 <__fixdfsi>
    50f0:	1009883a 	mov	r4,r2
    50f4:	1029883a 	mov	r20,r2
    50f8:	000ec600 	call	ec60 <__floatsidf>
    50fc:	180f883a 	mov	r7,r3
    5100:	9009883a 	mov	r4,r18
    5104:	980b883a 	mov	r5,r19
    5108:	100d883a 	mov	r6,r2
    510c:	000e3140 	call	e314 <__muldf3>
    5110:	180f883a 	mov	r7,r3
    5114:	880b883a 	mov	r5,r17
    5118:	8009883a 	mov	r4,r16
    511c:	100d883a 	mov	r6,r2
    5120:	000e2200 	call	e220 <__subdf3>
    5124:	1015883a 	mov	r10,r2
    5128:	a0800c04 	addi	r2,r20,48
    512c:	e0800005 	stb	r2,0(fp)
    5130:	e7000044 	addi	fp,fp,1
    5134:	1817883a 	mov	r11,r3
    5138:	e57fd61e 	bne	fp,r21,5094 <_dtoa_r+0x5d8>
    513c:	500d883a 	mov	r6,r10
    5140:	180f883a 	mov	r7,r3
    5144:	5009883a 	mov	r4,r10
    5148:	180b883a 	mov	r5,r3
    514c:	000e2a00 	call	e2a0 <__adddf3>
    5150:	100d883a 	mov	r6,r2
    5154:	9009883a 	mov	r4,r18
    5158:	980b883a 	mov	r5,r19
    515c:	180f883a 	mov	r7,r3
    5160:	1021883a 	mov	r16,r2
    5164:	1823883a 	mov	r17,r3
    5168:	000eb500 	call	eb50 <__ltdf2>
    516c:	10000816 	blt	r2,zero,5190 <_dtoa_r+0x6d4>
    5170:	980b883a 	mov	r5,r19
    5174:	800d883a 	mov	r6,r16
    5178:	880f883a 	mov	r7,r17
    517c:	9009883a 	mov	r4,r18
    5180:	000e9300 	call	e930 <__eqdf2>
    5184:	1000171e 	bne	r2,zero,51e4 <_dtoa_r+0x728>
    5188:	a080004c 	andi	r2,r20,1
    518c:	10001526 	beq	r2,zero,51e4 <_dtoa_r+0x728>
    5190:	d8800d17 	ldw	r2,52(sp)
    5194:	d8800415 	stw	r2,16(sp)
    5198:	e009883a 	mov	r4,fp
    519c:	213fffc4 	addi	r4,r4,-1
    51a0:	20c00007 	ldb	r3,0(r4)
    51a4:	00800e44 	movi	r2,57
    51a8:	1880081e 	bne	r3,r2,51cc <_dtoa_r+0x710>
    51ac:	d8800517 	ldw	r2,20(sp)
    51b0:	113ffa1e 	bne	r2,r4,519c <_dtoa_r+0x6e0>
    51b4:	d8c00417 	ldw	r3,16(sp)
    51b8:	d9800517 	ldw	r6,20(sp)
    51bc:	00800c04 	movi	r2,48
    51c0:	18c00044 	addi	r3,r3,1
    51c4:	d8c00415 	stw	r3,16(sp)
    51c8:	30800005 	stb	r2,0(r6)
    51cc:	20800003 	ldbu	r2,0(r4)
    51d0:	d8c00417 	ldw	r3,16(sp)
    51d4:	27000044 	addi	fp,r4,1
    51d8:	10800044 	addi	r2,r2,1
    51dc:	d8c00d15 	stw	r3,52(sp)
    51e0:	20800005 	stb	r2,0(r4)
    51e4:	d9001617 	ldw	r4,88(sp)
    51e8:	d9400717 	ldw	r5,28(sp)
    51ec:	0007fb80 	call	7fb8 <_Bfree>
    51f0:	e0000005 	stb	zero,0(fp)
    51f4:	d9800d17 	ldw	r6,52(sp)
    51f8:	d8c02717 	ldw	r3,156(sp)
    51fc:	d9002917 	ldw	r4,164(sp)
    5200:	30800044 	addi	r2,r6,1
    5204:	18800015 	stw	r2,0(r3)
    5208:	20029c26 	beq	r4,zero,5c7c <_dtoa_r+0x11c0>
    520c:	d8c00517 	ldw	r3,20(sp)
    5210:	27000015 	stw	fp,0(r4)
    5214:	003e5d06 	br	4b8c <_dtoa_r+0xd0>
    5218:	d9800d17 	ldw	r6,52(sp)
    521c:	00c00074 	movhi	r3,1
    5220:	18c96a04 	addi	r3,r3,9640
    5224:	d9001217 	ldw	r4,72(sp)
    5228:	300490fa 	slli	r2,r6,3
    522c:	d9401317 	ldw	r5,76(sp)
    5230:	10c5883a 	add	r2,r2,r3
    5234:	12000017 	ldw	r8,0(r2)
    5238:	12400117 	ldw	r9,4(r2)
    523c:	400d883a 	mov	r6,r8
    5240:	480f883a 	mov	r7,r9
    5244:	000eb500 	call	eb50 <__ltdf2>
    5248:	1000030e 	bge	r2,zero,5258 <_dtoa_r+0x79c>
    524c:	d8800d17 	ldw	r2,52(sp)
    5250:	10bfffc4 	addi	r2,r2,-1
    5254:	d8800d15 	stw	r2,52(sp)
    5258:	d8000c15 	stw	zero,48(sp)
    525c:	003ea806 	br	4d00 <_dtoa_r+0x244>
    5260:	d9000b17 	ldw	r4,44(sp)
    5264:	202cc03a 	cmpne	r22,r4,zero
    5268:	b000c71e 	bne	r22,zero,5588 <_dtoa_r+0xacc>
    526c:	dc001117 	ldw	r16,68(sp)
    5270:	dc801017 	ldw	r18,64(sp)
    5274:	0027883a 	mov	r19,zero
    5278:	04000b0e 	bge	zero,r16,52a8 <_dtoa_r+0x7ec>
    527c:	d8c00a17 	ldw	r3,40(sp)
    5280:	00c0090e 	bge	zero,r3,52a8 <_dtoa_r+0x7ec>
    5284:	8005883a 	mov	r2,r16
    5288:	1c011316 	blt	r3,r16,56d8 <_dtoa_r+0xc1c>
    528c:	d9000a17 	ldw	r4,40(sp)
    5290:	d9801117 	ldw	r6,68(sp)
    5294:	80a1c83a 	sub	r16,r16,r2
    5298:	2089c83a 	sub	r4,r4,r2
    529c:	308dc83a 	sub	r6,r6,r2
    52a0:	d9000a15 	stw	r4,40(sp)
    52a4:	d9801115 	stw	r6,68(sp)
    52a8:	d8801017 	ldw	r2,64(sp)
    52ac:	0080150e 	bge	zero,r2,5304 <_dtoa_r+0x848>
    52b0:	d8c00b17 	ldw	r3,44(sp)
    52b4:	1805003a 	cmpeq	r2,r3,zero
    52b8:	1001c91e 	bne	r2,zero,59e0 <_dtoa_r+0xf24>
    52bc:	04800e0e 	bge	zero,r18,52f8 <_dtoa_r+0x83c>
    52c0:	d9001617 	ldw	r4,88(sp)
    52c4:	980b883a 	mov	r5,r19
    52c8:	900d883a 	mov	r6,r18
    52cc:	0008d6c0 	call	8d6c <__pow5mult>
    52d0:	d9001617 	ldw	r4,88(sp)
    52d4:	d9800717 	ldw	r6,28(sp)
    52d8:	100b883a 	mov	r5,r2
    52dc:	1027883a 	mov	r19,r2
    52e0:	0008a480 	call	8a48 <__multiply>
    52e4:	d9001617 	ldw	r4,88(sp)
    52e8:	d9400717 	ldw	r5,28(sp)
    52ec:	1023883a 	mov	r17,r2
    52f0:	0007fb80 	call	7fb8 <_Bfree>
    52f4:	dc400715 	stw	r17,28(sp)
    52f8:	d9001017 	ldw	r4,64(sp)
    52fc:	248dc83a 	sub	r6,r4,r18
    5300:	30010e1e 	bne	r6,zero,573c <_dtoa_r+0xc80>
    5304:	d9001617 	ldw	r4,88(sp)
    5308:	04400044 	movi	r17,1
    530c:	880b883a 	mov	r5,r17
    5310:	0008c300 	call	8c30 <__i2b>
    5314:	d9800917 	ldw	r6,36(sp)
    5318:	1025883a 	mov	r18,r2
    531c:	0180040e 	bge	zero,r6,5330 <_dtoa_r+0x874>
    5320:	d9001617 	ldw	r4,88(sp)
    5324:	100b883a 	mov	r5,r2
    5328:	0008d6c0 	call	8d6c <__pow5mult>
    532c:	1025883a 	mov	r18,r2
    5330:	d8801717 	ldw	r2,92(sp)
    5334:	8880f30e 	bge	r17,r2,5704 <_dtoa_r+0xc48>
    5338:	0023883a 	mov	r17,zero
    533c:	d9800917 	ldw	r6,36(sp)
    5340:	30019e1e 	bne	r6,zero,59bc <_dtoa_r+0xf00>
    5344:	00c00044 	movi	r3,1
    5348:	d9000a17 	ldw	r4,40(sp)
    534c:	20c5883a 	add	r2,r4,r3
    5350:	10c007cc 	andi	r3,r2,31
    5354:	1800841e 	bne	r3,zero,5568 <_dtoa_r+0xaac>
    5358:	00800704 	movi	r2,28
    535c:	d9000a17 	ldw	r4,40(sp)
    5360:	d9801117 	ldw	r6,68(sp)
    5364:	80a1883a 	add	r16,r16,r2
    5368:	2089883a 	add	r4,r4,r2
    536c:	308d883a 	add	r6,r6,r2
    5370:	d9000a15 	stw	r4,40(sp)
    5374:	d9801115 	stw	r6,68(sp)
    5378:	d8801117 	ldw	r2,68(sp)
    537c:	0080050e 	bge	zero,r2,5394 <_dtoa_r+0x8d8>
    5380:	d9400717 	ldw	r5,28(sp)
    5384:	d9001617 	ldw	r4,88(sp)
    5388:	100d883a 	mov	r6,r2
    538c:	00088fc0 	call	88fc <__lshift>
    5390:	d8800715 	stw	r2,28(sp)
    5394:	d8c00a17 	ldw	r3,40(sp)
    5398:	00c0050e 	bge	zero,r3,53b0 <_dtoa_r+0x8f4>
    539c:	d9001617 	ldw	r4,88(sp)
    53a0:	900b883a 	mov	r5,r18
    53a4:	180d883a 	mov	r6,r3
    53a8:	00088fc0 	call	88fc <__lshift>
    53ac:	1025883a 	mov	r18,r2
    53b0:	d9000c17 	ldw	r4,48(sp)
    53b4:	2005003a 	cmpeq	r2,r4,zero
    53b8:	10016f26 	beq	r2,zero,5978 <_dtoa_r+0xebc>
    53bc:	d9000f17 	ldw	r4,60(sp)
    53c0:	0102170e 	bge	zero,r4,5c20 <_dtoa_r+0x1164>
    53c4:	d9800b17 	ldw	r6,44(sp)
    53c8:	3005003a 	cmpeq	r2,r6,zero
    53cc:	1000881e 	bne	r2,zero,55f0 <_dtoa_r+0xb34>
    53d0:	0400050e 	bge	zero,r16,53e8 <_dtoa_r+0x92c>
    53d4:	d9001617 	ldw	r4,88(sp)
    53d8:	980b883a 	mov	r5,r19
    53dc:	800d883a 	mov	r6,r16
    53e0:	00088fc0 	call	88fc <__lshift>
    53e4:	1027883a 	mov	r19,r2
    53e8:	8804c03a 	cmpne	r2,r17,zero
    53ec:	1002541e 	bne	r2,zero,5d40 <_dtoa_r+0x1284>
    53f0:	980b883a 	mov	r5,r19
    53f4:	dd800517 	ldw	r22,20(sp)
    53f8:	dcc00615 	stw	r19,24(sp)
    53fc:	a700004c 	andi	fp,r20,1
    5400:	2827883a 	mov	r19,r5
    5404:	d9000717 	ldw	r4,28(sp)
    5408:	900b883a 	mov	r5,r18
    540c:	00048a40 	call	48a4 <quorem>
    5410:	d9000717 	ldw	r4,28(sp)
    5414:	d9400617 	ldw	r5,24(sp)
    5418:	1023883a 	mov	r17,r2
    541c:	8dc00c04 	addi	r23,r17,48
    5420:	00081140 	call	8114 <__mcmp>
    5424:	d9001617 	ldw	r4,88(sp)
    5428:	900b883a 	mov	r5,r18
    542c:	980d883a 	mov	r6,r19
    5430:	1029883a 	mov	r20,r2
    5434:	00087700 	call	8770 <__mdiff>
    5438:	102b883a 	mov	r21,r2
    543c:	10800317 	ldw	r2,12(r2)
    5440:	1001281e 	bne	r2,zero,58e4 <_dtoa_r+0xe28>
    5444:	d9000717 	ldw	r4,28(sp)
    5448:	a80b883a 	mov	r5,r21
    544c:	00081140 	call	8114 <__mcmp>
    5450:	d9001617 	ldw	r4,88(sp)
    5454:	1021883a 	mov	r16,r2
    5458:	a80b883a 	mov	r5,r21
    545c:	0007fb80 	call	7fb8 <_Bfree>
    5460:	8000041e 	bne	r16,zero,5474 <_dtoa_r+0x9b8>
    5464:	d8801717 	ldw	r2,92(sp)
    5468:	1000021e 	bne	r2,zero,5474 <_dtoa_r+0x9b8>
    546c:	e004c03a 	cmpne	r2,fp,zero
    5470:	10011726 	beq	r2,zero,58d0 <_dtoa_r+0xe14>
    5474:	a0010616 	blt	r20,zero,5890 <_dtoa_r+0xdd4>
    5478:	a000041e 	bne	r20,zero,548c <_dtoa_r+0x9d0>
    547c:	d8c01717 	ldw	r3,92(sp)
    5480:	1800021e 	bne	r3,zero,548c <_dtoa_r+0x9d0>
    5484:	e004c03a 	cmpne	r2,fp,zero
    5488:	10010126 	beq	r2,zero,5890 <_dtoa_r+0xdd4>
    548c:	04023d16 	blt	zero,r16,5d84 <_dtoa_r+0x12c8>
    5490:	b5c00005 	stb	r23,0(r22)
    5494:	d9800517 	ldw	r6,20(sp)
    5498:	d9000f17 	ldw	r4,60(sp)
    549c:	b5800044 	addi	r22,r22,1
    54a0:	3105883a 	add	r2,r6,r4
    54a4:	b0806526 	beq	r22,r2,563c <_dtoa_r+0xb80>
    54a8:	d9400717 	ldw	r5,28(sp)
    54ac:	d9001617 	ldw	r4,88(sp)
    54b0:	01800284 	movi	r6,10
    54b4:	000f883a 	mov	r7,zero
    54b8:	0008c6c0 	call	8c6c <__multadd>
    54bc:	d8800715 	stw	r2,28(sp)
    54c0:	d8800617 	ldw	r2,24(sp)
    54c4:	14c10c26 	beq	r2,r19,58f8 <_dtoa_r+0xe3c>
    54c8:	d9400617 	ldw	r5,24(sp)
    54cc:	d9001617 	ldw	r4,88(sp)
    54d0:	01800284 	movi	r6,10
    54d4:	000f883a 	mov	r7,zero
    54d8:	0008c6c0 	call	8c6c <__multadd>
    54dc:	d9001617 	ldw	r4,88(sp)
    54e0:	980b883a 	mov	r5,r19
    54e4:	01800284 	movi	r6,10
    54e8:	000f883a 	mov	r7,zero
    54ec:	d8800615 	stw	r2,24(sp)
    54f0:	0008c6c0 	call	8c6c <__multadd>
    54f4:	1027883a 	mov	r19,r2
    54f8:	003fc206 	br	5404 <_dtoa_r+0x948>
    54fc:	2445c83a 	sub	r2,r4,r17
    5500:	a088983a 	sll	r4,r20,r2
    5504:	003e4b06 	br	4e34 <_dtoa_r+0x378>
    5508:	01bfffc4 	movi	r6,-1
    550c:	00800044 	movi	r2,1
    5510:	d9800e15 	stw	r6,56(sp)
    5514:	d9800f15 	stw	r6,60(sp)
    5518:	d8800b15 	stw	r2,44(sp)
    551c:	d8c01617 	ldw	r3,88(sp)
    5520:	008005c4 	movi	r2,23
    5524:	18001115 	stw	zero,68(r3)
    5528:	1580082e 	bgeu	r2,r22,554c <_dtoa_r+0xa90>
    552c:	00c00104 	movi	r3,4
    5530:	0009883a 	mov	r4,zero
    5534:	18c7883a 	add	r3,r3,r3
    5538:	18800504 	addi	r2,r3,20
    553c:	21000044 	addi	r4,r4,1
    5540:	b0bffc2e 	bgeu	r22,r2,5534 <_dtoa_r+0xa78>
    5544:	d9801617 	ldw	r6,88(sp)
    5548:	31001115 	stw	r4,68(r6)
    554c:	dc000f17 	ldw	r16,60(sp)
    5550:	003e4b06 	br	4e80 <_dtoa_r+0x3c4>
    5554:	d9801717 	ldw	r6,92(sp)
    5558:	0023883a 	mov	r17,zero
    555c:	31bfff04 	addi	r6,r6,-4
    5560:	d9801715 	stw	r6,92(sp)
    5564:	003df806 	br	4d48 <_dtoa_r+0x28c>
    5568:	00800804 	movi	r2,32
    556c:	10c9c83a 	sub	r4,r2,r3
    5570:	00c00104 	movi	r3,4
    5574:	19005a16 	blt	r3,r4,56e0 <_dtoa_r+0xc24>
    5578:	008000c4 	movi	r2,3
    557c:	113f7e16 	blt	r2,r4,5378 <_dtoa_r+0x8bc>
    5580:	20800704 	addi	r2,r4,28
    5584:	003f7506 	br	535c <_dtoa_r+0x8a0>
    5588:	d9801717 	ldw	r6,92(sp)
    558c:	00800044 	movi	r2,1
    5590:	1180a10e 	bge	r2,r6,5818 <_dtoa_r+0xd5c>
    5594:	d9800f17 	ldw	r6,60(sp)
    5598:	d8c01017 	ldw	r3,64(sp)
    559c:	30bfffc4 	addi	r2,r6,-1
    55a0:	1881c616 	blt	r3,r2,5cbc <_dtoa_r+0x1200>
    55a4:	18a5c83a 	sub	r18,r3,r2
    55a8:	d8800f17 	ldw	r2,60(sp)
    55ac:	10026216 	blt	r2,zero,5f38 <_dtoa_r+0x147c>
    55b0:	dc001117 	ldw	r16,68(sp)
    55b4:	1007883a 	mov	r3,r2
    55b8:	d9800a17 	ldw	r6,40(sp)
    55bc:	d8801117 	ldw	r2,68(sp)
    55c0:	d9001617 	ldw	r4,88(sp)
    55c4:	30cd883a 	add	r6,r6,r3
    55c8:	10c5883a 	add	r2,r2,r3
    55cc:	01400044 	movi	r5,1
    55d0:	d9800a15 	stw	r6,40(sp)
    55d4:	d8801115 	stw	r2,68(sp)
    55d8:	0008c300 	call	8c30 <__i2b>
    55dc:	1027883a 	mov	r19,r2
    55e0:	003f2506 	br	5278 <_dtoa_r+0x7bc>
    55e4:	00c00074 	movhi	r3,1
    55e8:	18c8a104 	addi	r3,r3,8836
    55ec:	003d6706 	br	4b8c <_dtoa_r+0xd0>
    55f0:	dd800517 	ldw	r22,20(sp)
    55f4:	04000044 	movi	r16,1
    55f8:	00000706 	br	5618 <_dtoa_r+0xb5c>
    55fc:	d9400717 	ldw	r5,28(sp)
    5600:	d9001617 	ldw	r4,88(sp)
    5604:	01800284 	movi	r6,10
    5608:	000f883a 	mov	r7,zero
    560c:	0008c6c0 	call	8c6c <__multadd>
    5610:	d8800715 	stw	r2,28(sp)
    5614:	84000044 	addi	r16,r16,1
    5618:	d9000717 	ldw	r4,28(sp)
    561c:	900b883a 	mov	r5,r18
    5620:	00048a40 	call	48a4 <quorem>
    5624:	15c00c04 	addi	r23,r2,48
    5628:	b5c00005 	stb	r23,0(r22)
    562c:	d8c00f17 	ldw	r3,60(sp)
    5630:	b5800044 	addi	r22,r22,1
    5634:	80fff116 	blt	r16,r3,55fc <_dtoa_r+0xb40>
    5638:	d8000615 	stw	zero,24(sp)
    563c:	d9400717 	ldw	r5,28(sp)
    5640:	d9001617 	ldw	r4,88(sp)
    5644:	01800044 	movi	r6,1
    5648:	00088fc0 	call	88fc <__lshift>
    564c:	1009883a 	mov	r4,r2
    5650:	900b883a 	mov	r5,r18
    5654:	d8800715 	stw	r2,28(sp)
    5658:	00081140 	call	8114 <__mcmp>
    565c:	00803c0e 	bge	zero,r2,5750 <_dtoa_r+0xc94>
    5660:	b009883a 	mov	r4,r22
    5664:	213fffc4 	addi	r4,r4,-1
    5668:	21400003 	ldbu	r5,0(r4)
    566c:	00800e44 	movi	r2,57
    5670:	28c03fcc 	andi	r3,r5,255
    5674:	18c0201c 	xori	r3,r3,128
    5678:	18ffe004 	addi	r3,r3,-128
    567c:	1881981e 	bne	r3,r2,5ce0 <_dtoa_r+0x1224>
    5680:	d9800517 	ldw	r6,20(sp)
    5684:	21bff71e 	bne	r4,r6,5664 <_dtoa_r+0xba8>
    5688:	d8800d17 	ldw	r2,52(sp)
    568c:	37000044 	addi	fp,r6,1
    5690:	10800044 	addi	r2,r2,1
    5694:	d8800d15 	stw	r2,52(sp)
    5698:	00800c44 	movi	r2,49
    569c:	30800005 	stb	r2,0(r6)
    56a0:	d9001617 	ldw	r4,88(sp)
    56a4:	900b883a 	mov	r5,r18
    56a8:	0007fb80 	call	7fb8 <_Bfree>
    56ac:	983ecd26 	beq	r19,zero,51e4 <_dtoa_r+0x728>
    56b0:	d8c00617 	ldw	r3,24(sp)
    56b4:	18000426 	beq	r3,zero,56c8 <_dtoa_r+0xc0c>
    56b8:	1cc00326 	beq	r3,r19,56c8 <_dtoa_r+0xc0c>
    56bc:	d9001617 	ldw	r4,88(sp)
    56c0:	180b883a 	mov	r5,r3
    56c4:	0007fb80 	call	7fb8 <_Bfree>
    56c8:	d9001617 	ldw	r4,88(sp)
    56cc:	980b883a 	mov	r5,r19
    56d0:	0007fb80 	call	7fb8 <_Bfree>
    56d4:	003ec306 	br	51e4 <_dtoa_r+0x728>
    56d8:	1805883a 	mov	r2,r3
    56dc:	003eeb06 	br	528c <_dtoa_r+0x7d0>
    56e0:	d9800a17 	ldw	r6,40(sp)
    56e4:	d8c01117 	ldw	r3,68(sp)
    56e8:	20bfff04 	addi	r2,r4,-4
    56ec:	308d883a 	add	r6,r6,r2
    56f0:	1887883a 	add	r3,r3,r2
    56f4:	80a1883a 	add	r16,r16,r2
    56f8:	d9800a15 	stw	r6,40(sp)
    56fc:	d8c01115 	stw	r3,68(sp)
    5700:	003f1d06 	br	5378 <_dtoa_r+0x8bc>
    5704:	a03f0c1e 	bne	r20,zero,5338 <_dtoa_r+0x87c>
    5708:	00800434 	movhi	r2,16
    570c:	10bfffc4 	addi	r2,r2,-1
    5710:	a884703a 	and	r2,r21,r2
    5714:	103f081e 	bne	r2,zero,5338 <_dtoa_r+0x87c>
    5718:	a89ffc2c 	andhi	r2,r21,32752
    571c:	103f0626 	beq	r2,zero,5338 <_dtoa_r+0x87c>
    5720:	d8c01117 	ldw	r3,68(sp)
    5724:	d9000a17 	ldw	r4,40(sp)
    5728:	18c00044 	addi	r3,r3,1
    572c:	21000044 	addi	r4,r4,1
    5730:	d8c01115 	stw	r3,68(sp)
    5734:	d9000a15 	stw	r4,40(sp)
    5738:	003f0006 	br	533c <_dtoa_r+0x880>
    573c:	d9400717 	ldw	r5,28(sp)
    5740:	d9001617 	ldw	r4,88(sp)
    5744:	0008d6c0 	call	8d6c <__pow5mult>
    5748:	d8800715 	stw	r2,28(sp)
    574c:	003eed06 	br	5304 <_dtoa_r+0x848>
    5750:	1000021e 	bne	r2,zero,575c <_dtoa_r+0xca0>
    5754:	b880004c 	andi	r2,r23,1
    5758:	103fc11e 	bne	r2,zero,5660 <_dtoa_r+0xba4>
    575c:	b5bfffc4 	addi	r22,r22,-1
    5760:	b0c00007 	ldb	r3,0(r22)
    5764:	00800c04 	movi	r2,48
    5768:	18bffc26 	beq	r3,r2,575c <_dtoa_r+0xca0>
    576c:	b7000044 	addi	fp,r22,1
    5770:	003fcb06 	br	56a0 <_dtoa_r+0xbe4>
    5774:	d9800d17 	ldw	r6,52(sp)
    5778:	018fc83a 	sub	r7,zero,r6
    577c:	3801f726 	beq	r7,zero,5f5c <_dtoa_r+0x14a0>
    5780:	398003cc 	andi	r6,r7,15
    5784:	300c90fa 	slli	r6,r6,3
    5788:	01400074 	movhi	r5,1
    578c:	29496a04 	addi	r5,r5,9640
    5790:	d9001217 	ldw	r4,72(sp)
    5794:	314d883a 	add	r6,r6,r5
    5798:	30c00117 	ldw	r3,4(r6)
    579c:	30800017 	ldw	r2,0(r6)
    57a0:	d9401317 	ldw	r5,76(sp)
    57a4:	3821d13a 	srai	r16,r7,4
    57a8:	100d883a 	mov	r6,r2
    57ac:	180f883a 	mov	r7,r3
    57b0:	000e3140 	call	e314 <__muldf3>
    57b4:	1011883a 	mov	r8,r2
    57b8:	1813883a 	mov	r9,r3
    57bc:	1029883a 	mov	r20,r2
    57c0:	182b883a 	mov	r21,r3
    57c4:	8001e526 	beq	r16,zero,5f5c <_dtoa_r+0x14a0>
    57c8:	05800084 	movi	r22,2
    57cc:	04400074 	movhi	r17,1
    57d0:	8c499c04 	addi	r17,r17,9840
    57d4:	8080004c 	andi	r2,r16,1
    57d8:	1005003a 	cmpeq	r2,r2,zero
    57dc:	1000081e 	bne	r2,zero,5800 <_dtoa_r+0xd44>
    57e0:	89800017 	ldw	r6,0(r17)
    57e4:	89c00117 	ldw	r7,4(r17)
    57e8:	480b883a 	mov	r5,r9
    57ec:	4009883a 	mov	r4,r8
    57f0:	000e3140 	call	e314 <__muldf3>
    57f4:	1011883a 	mov	r8,r2
    57f8:	b5800044 	addi	r22,r22,1
    57fc:	1813883a 	mov	r9,r3
    5800:	8021d07a 	srai	r16,r16,1
    5804:	8c400204 	addi	r17,r17,8
    5808:	803ff21e 	bne	r16,zero,57d4 <_dtoa_r+0xd18>
    580c:	4029883a 	mov	r20,r8
    5810:	482b883a 	mov	r21,r9
    5814:	003dca06 	br	4f40 <_dtoa_r+0x484>
    5818:	d9000817 	ldw	r4,32(sp)
    581c:	2005003a 	cmpeq	r2,r4,zero
    5820:	1001f61e 	bne	r2,zero,5ffc <_dtoa_r+0x1540>
    5824:	dc001117 	ldw	r16,68(sp)
    5828:	dc801017 	ldw	r18,64(sp)
    582c:	18c10cc4 	addi	r3,r3,1075
    5830:	003f6106 	br	55b8 <_dtoa_r+0xafc>
    5834:	d8000b15 	stw	zero,44(sp)
    5838:	d9802617 	ldw	r6,152(sp)
    583c:	d8c00d17 	ldw	r3,52(sp)
    5840:	30800044 	addi	r2,r6,1
    5844:	18ad883a 	add	r22,r3,r2
    5848:	b13fffc4 	addi	r4,r22,-1
    584c:	d9000e15 	stw	r4,56(sp)
    5850:	0581f60e 	bge	zero,r22,602c <_dtoa_r+0x1570>
    5854:	dd800f15 	stw	r22,60(sp)
    5858:	003f3006 	br	551c <_dtoa_r+0xa60>
    585c:	d8000b15 	stw	zero,44(sp)
    5860:	d9002617 	ldw	r4,152(sp)
    5864:	0101eb0e 	bge	zero,r4,6014 <_dtoa_r+0x1558>
    5868:	202d883a 	mov	r22,r4
    586c:	d9000e15 	stw	r4,56(sp)
    5870:	d9000f15 	stw	r4,60(sp)
    5874:	003f2906 	br	551c <_dtoa_r+0xa60>
    5878:	01800044 	movi	r6,1
    587c:	d9800b15 	stw	r6,44(sp)
    5880:	003ff706 	br	5860 <_dtoa_r+0xda4>
    5884:	01000044 	movi	r4,1
    5888:	d9000b15 	stw	r4,44(sp)
    588c:	003fea06 	br	5838 <_dtoa_r+0xd7c>
    5890:	04000c0e 	bge	zero,r16,58c4 <_dtoa_r+0xe08>
    5894:	d9400717 	ldw	r5,28(sp)
    5898:	d9001617 	ldw	r4,88(sp)
    589c:	01800044 	movi	r6,1
    58a0:	00088fc0 	call	88fc <__lshift>
    58a4:	1009883a 	mov	r4,r2
    58a8:	900b883a 	mov	r5,r18
    58ac:	d8800715 	stw	r2,28(sp)
    58b0:	00081140 	call	8114 <__mcmp>
    58b4:	0081e00e 	bge	zero,r2,6038 <_dtoa_r+0x157c>
    58b8:	bdc00044 	addi	r23,r23,1
    58bc:	00800e84 	movi	r2,58
    58c0:	b881a226 	beq	r23,r2,5f4c <_dtoa_r+0x1490>
    58c4:	b7000044 	addi	fp,r22,1
    58c8:	b5c00005 	stb	r23,0(r22)
    58cc:	003f7406 	br	56a0 <_dtoa_r+0xbe4>
    58d0:	00800e44 	movi	r2,57
    58d4:	b8819d26 	beq	r23,r2,5f4c <_dtoa_r+0x1490>
    58d8:	053ffa0e 	bge	zero,r20,58c4 <_dtoa_r+0xe08>
    58dc:	8dc00c44 	addi	r23,r17,49
    58e0:	003ff806 	br	58c4 <_dtoa_r+0xe08>
    58e4:	d9001617 	ldw	r4,88(sp)
    58e8:	a80b883a 	mov	r5,r21
    58ec:	04000044 	movi	r16,1
    58f0:	0007fb80 	call	7fb8 <_Bfree>
    58f4:	003edf06 	br	5474 <_dtoa_r+0x9b8>
    58f8:	d9001617 	ldw	r4,88(sp)
    58fc:	980b883a 	mov	r5,r19
    5900:	01800284 	movi	r6,10
    5904:	000f883a 	mov	r7,zero
    5908:	0008c6c0 	call	8c6c <__multadd>
    590c:	1027883a 	mov	r19,r2
    5910:	d8800615 	stw	r2,24(sp)
    5914:	003ebb06 	br	5404 <_dtoa_r+0x948>
    5918:	d9801117 	ldw	r6,68(sp)
    591c:	d8800d17 	ldw	r2,52(sp)
    5920:	d8000915 	stw	zero,36(sp)
    5924:	308dc83a 	sub	r6,r6,r2
    5928:	0087c83a 	sub	r3,zero,r2
    592c:	d9801115 	stw	r6,68(sp)
    5930:	d8c01015 	stw	r3,64(sp)
    5934:	003cfe06 	br	4d30 <_dtoa_r+0x274>
    5938:	018dc83a 	sub	r6,zero,r6
    593c:	d9801115 	stw	r6,68(sp)
    5940:	d8000a15 	stw	zero,40(sp)
    5944:	003cf306 	br	4d14 <_dtoa_r+0x258>
    5948:	d9000d17 	ldw	r4,52(sp)
    594c:	000ec600 	call	ec60 <__floatsidf>
    5950:	880b883a 	mov	r5,r17
    5954:	8009883a 	mov	r4,r16
    5958:	180f883a 	mov	r7,r3
    595c:	100d883a 	mov	r6,r2
    5960:	000e9b80 	call	e9b8 <__nedf2>
    5964:	103ce126 	beq	r2,zero,4cec <_dtoa_r+0x230>
    5968:	d9800d17 	ldw	r6,52(sp)
    596c:	31bfffc4 	addi	r6,r6,-1
    5970:	d9800d15 	stw	r6,52(sp)
    5974:	003cdd06 	br	4cec <_dtoa_r+0x230>
    5978:	d9000717 	ldw	r4,28(sp)
    597c:	900b883a 	mov	r5,r18
    5980:	00081140 	call	8114 <__mcmp>
    5984:	103e8d0e 	bge	r2,zero,53bc <_dtoa_r+0x900>
    5988:	d9400717 	ldw	r5,28(sp)
    598c:	d9001617 	ldw	r4,88(sp)
    5990:	01800284 	movi	r6,10
    5994:	000f883a 	mov	r7,zero
    5998:	0008c6c0 	call	8c6c <__multadd>
    599c:	d9800d17 	ldw	r6,52(sp)
    59a0:	d8800715 	stw	r2,28(sp)
    59a4:	31bfffc4 	addi	r6,r6,-1
    59a8:	d9800d15 	stw	r6,52(sp)
    59ac:	b001a71e 	bne	r22,zero,604c <_dtoa_r+0x1590>
    59b0:	d8800e17 	ldw	r2,56(sp)
    59b4:	d8800f15 	stw	r2,60(sp)
    59b8:	003e8006 	br	53bc <_dtoa_r+0x900>
    59bc:	90800417 	ldw	r2,16(r18)
    59c0:	1085883a 	add	r2,r2,r2
    59c4:	1085883a 	add	r2,r2,r2
    59c8:	1485883a 	add	r2,r2,r18
    59cc:	11000417 	ldw	r4,16(r2)
    59d0:	0007fe00 	call	7fe0 <__hi0bits>
    59d4:	00c00804 	movi	r3,32
    59d8:	1887c83a 	sub	r3,r3,r2
    59dc:	003e5a06 	br	5348 <_dtoa_r+0x88c>
    59e0:	d9400717 	ldw	r5,28(sp)
    59e4:	d9801017 	ldw	r6,64(sp)
    59e8:	d9001617 	ldw	r4,88(sp)
    59ec:	0008d6c0 	call	8d6c <__pow5mult>
    59f0:	d8800715 	stw	r2,28(sp)
    59f4:	003e4306 	br	5304 <_dtoa_r+0x848>
    59f8:	d9800f17 	ldw	r6,60(sp)
    59fc:	d8800d17 	ldw	r2,52(sp)
    5a00:	d9800315 	stw	r6,12(sp)
    5a04:	d8800415 	stw	r2,16(sp)
    5a08:	d8c00b17 	ldw	r3,44(sp)
    5a0c:	1805003a 	cmpeq	r2,r3,zero
    5a10:	1000e21e 	bne	r2,zero,5d9c <_dtoa_r+0x12e0>
    5a14:	d9000317 	ldw	r4,12(sp)
    5a18:	0005883a 	mov	r2,zero
    5a1c:	00cff834 	movhi	r3,16352
    5a20:	200c90fa 	slli	r6,r4,3
    5a24:	01000074 	movhi	r4,1
    5a28:	21096a04 	addi	r4,r4,9640
    5a2c:	180b883a 	mov	r5,r3
    5a30:	310d883a 	add	r6,r6,r4
    5a34:	327fff17 	ldw	r9,-4(r6)
    5a38:	323ffe17 	ldw	r8,-8(r6)
    5a3c:	1009883a 	mov	r4,r2
    5a40:	480f883a 	mov	r7,r9
    5a44:	400d883a 	mov	r6,r8
    5a48:	000e6d80 	call	e6d8 <__divdf3>
    5a4c:	180b883a 	mov	r5,r3
    5a50:	b00d883a 	mov	r6,r22
    5a54:	b80f883a 	mov	r7,r23
    5a58:	1009883a 	mov	r4,r2
    5a5c:	000e2200 	call	e220 <__subdf3>
    5a60:	a80b883a 	mov	r5,r21
    5a64:	a009883a 	mov	r4,r20
    5a68:	d8c01915 	stw	r3,100(sp)
    5a6c:	d8801815 	stw	r2,96(sp)
    5a70:	000ed580 	call	ed58 <__fixdfsi>
    5a74:	1009883a 	mov	r4,r2
    5a78:	1027883a 	mov	r19,r2
    5a7c:	000ec600 	call	ec60 <__floatsidf>
    5a80:	a80b883a 	mov	r5,r21
    5a84:	a009883a 	mov	r4,r20
    5a88:	180f883a 	mov	r7,r3
    5a8c:	100d883a 	mov	r6,r2
    5a90:	000e2200 	call	e220 <__subdf3>
    5a94:	d9801817 	ldw	r6,96(sp)
    5a98:	1823883a 	mov	r17,r3
    5a9c:	d8801415 	stw	r2,80(sp)
    5aa0:	302d883a 	mov	r22,r6
    5aa4:	d9800517 	ldw	r6,20(sp)
    5aa8:	9cc00c04 	addi	r19,r19,48
    5aac:	dc401515 	stw	r17,84(sp)
    5ab0:	d8c01917 	ldw	r3,100(sp)
    5ab4:	34c00005 	stb	r19,0(r6)
    5ab8:	d8800517 	ldw	r2,20(sp)
    5abc:	d9401917 	ldw	r5,100(sp)
    5ac0:	d9801417 	ldw	r6,80(sp)
    5ac4:	b009883a 	mov	r4,r22
    5ac8:	880f883a 	mov	r7,r17
    5acc:	182f883a 	mov	r23,r3
    5ad0:	17000044 	addi	fp,r2,1
    5ad4:	000ea400 	call	ea40 <__gtdf2>
    5ad8:	00804e16 	blt	zero,r2,5c14 <_dtoa_r+0x1158>
    5adc:	d9801417 	ldw	r6,80(sp)
    5ae0:	0005883a 	mov	r2,zero
    5ae4:	00cffc34 	movhi	r3,16368
    5ae8:	180b883a 	mov	r5,r3
    5aec:	880f883a 	mov	r7,r17
    5af0:	1009883a 	mov	r4,r2
    5af4:	000e2200 	call	e220 <__subdf3>
    5af8:	d9401917 	ldw	r5,100(sp)
    5afc:	180f883a 	mov	r7,r3
    5b00:	b009883a 	mov	r4,r22
    5b04:	100d883a 	mov	r6,r2
    5b08:	000ea400 	call	ea40 <__gtdf2>
    5b0c:	00bda216 	blt	zero,r2,5198 <_dtoa_r+0x6dc>
    5b10:	d8c00317 	ldw	r3,12(sp)
    5b14:	00800044 	movi	r2,1
    5b18:	10c01216 	blt	r2,r3,5b64 <_dtoa_r+0x10a8>
    5b1c:	003d4506 	br	5034 <_dtoa_r+0x578>
    5b20:	d9801417 	ldw	r6,80(sp)
    5b24:	0005883a 	mov	r2,zero
    5b28:	00cffc34 	movhi	r3,16368
    5b2c:	180b883a 	mov	r5,r3
    5b30:	880f883a 	mov	r7,r17
    5b34:	1009883a 	mov	r4,r2
    5b38:	000e2200 	call	e220 <__subdf3>
    5b3c:	d9c01b17 	ldw	r7,108(sp)
    5b40:	180b883a 	mov	r5,r3
    5b44:	1009883a 	mov	r4,r2
    5b48:	b00d883a 	mov	r6,r22
    5b4c:	000eb500 	call	eb50 <__ltdf2>
    5b50:	103d9116 	blt	r2,zero,5198 <_dtoa_r+0x6dc>
    5b54:	d9800517 	ldw	r6,20(sp)
    5b58:	d9000317 	ldw	r4,12(sp)
    5b5c:	3105883a 	add	r2,r6,r4
    5b60:	e0bd3426 	beq	fp,r2,5034 <_dtoa_r+0x578>
    5b64:	04500934 	movhi	r17,16420
    5b68:	0021883a 	mov	r16,zero
    5b6c:	b80b883a 	mov	r5,r23
    5b70:	b009883a 	mov	r4,r22
    5b74:	800d883a 	mov	r6,r16
    5b78:	880f883a 	mov	r7,r17
    5b7c:	000e3140 	call	e314 <__muldf3>
    5b80:	d9401517 	ldw	r5,84(sp)
    5b84:	d9001417 	ldw	r4,80(sp)
    5b88:	880f883a 	mov	r7,r17
    5b8c:	000d883a 	mov	r6,zero
    5b90:	d8801a15 	stw	r2,104(sp)
    5b94:	d8c01b15 	stw	r3,108(sp)
    5b98:	000e3140 	call	e314 <__muldf3>
    5b9c:	180b883a 	mov	r5,r3
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	1823883a 	mov	r17,r3
    5ba8:	1021883a 	mov	r16,r2
    5bac:	000ed580 	call	ed58 <__fixdfsi>
    5bb0:	1009883a 	mov	r4,r2
    5bb4:	102b883a 	mov	r21,r2
    5bb8:	000ec600 	call	ec60 <__floatsidf>
    5bbc:	880b883a 	mov	r5,r17
    5bc0:	8009883a 	mov	r4,r16
    5bc4:	180f883a 	mov	r7,r3
    5bc8:	100d883a 	mov	r6,r2
    5bcc:	000e2200 	call	e220 <__subdf3>
    5bd0:	1021883a 	mov	r16,r2
    5bd4:	d9001b17 	ldw	r4,108(sp)
    5bd8:	1823883a 	mov	r17,r3
    5bdc:	dc001415 	stw	r16,80(sp)
    5be0:	ad400c04 	addi	r21,r21,48
    5be4:	dc401515 	stw	r17,84(sp)
    5be8:	d8801a17 	ldw	r2,104(sp)
    5bec:	e5400005 	stb	r21,0(fp)
    5bf0:	202f883a 	mov	r23,r4
    5bf4:	d9c01b17 	ldw	r7,108(sp)
    5bf8:	d9001417 	ldw	r4,80(sp)
    5bfc:	880b883a 	mov	r5,r17
    5c00:	100d883a 	mov	r6,r2
    5c04:	102d883a 	mov	r22,r2
    5c08:	e7000044 	addi	fp,fp,1
    5c0c:	000eb500 	call	eb50 <__ltdf2>
    5c10:	103fc30e 	bge	r2,zero,5b20 <_dtoa_r+0x1064>
    5c14:	d9000417 	ldw	r4,16(sp)
    5c18:	d9000d15 	stw	r4,52(sp)
    5c1c:	003d7106 	br	51e4 <_dtoa_r+0x728>
    5c20:	d9801717 	ldw	r6,92(sp)
    5c24:	00800084 	movi	r2,2
    5c28:	11bde60e 	bge	r2,r6,53c4 <_dtoa_r+0x908>
    5c2c:	203cfb1e 	bne	r4,zero,501c <_dtoa_r+0x560>
    5c30:	d9001617 	ldw	r4,88(sp)
    5c34:	900b883a 	mov	r5,r18
    5c38:	01800144 	movi	r6,5
    5c3c:	000f883a 	mov	r7,zero
    5c40:	0008c6c0 	call	8c6c <__multadd>
    5c44:	d9000717 	ldw	r4,28(sp)
    5c48:	100b883a 	mov	r5,r2
    5c4c:	1025883a 	mov	r18,r2
    5c50:	00081140 	call	8114 <__mcmp>
    5c54:	00bcf10e 	bge	zero,r2,501c <_dtoa_r+0x560>
    5c58:	d8c00d17 	ldw	r3,52(sp)
    5c5c:	d9000517 	ldw	r4,20(sp)
    5c60:	d8000615 	stw	zero,24(sp)
    5c64:	18c00044 	addi	r3,r3,1
    5c68:	d8c00d15 	stw	r3,52(sp)
    5c6c:	00800c44 	movi	r2,49
    5c70:	27000044 	addi	fp,r4,1
    5c74:	20800005 	stb	r2,0(r4)
    5c78:	003e8906 	br	56a0 <_dtoa_r+0xbe4>
    5c7c:	d8c00517 	ldw	r3,20(sp)
    5c80:	003bc206 	br	4b8c <_dtoa_r+0xd0>
    5c84:	01800074 	movhi	r6,1
    5c88:	31899c04 	addi	r6,r6,9840
    5c8c:	30c00917 	ldw	r3,36(r6)
    5c90:	30800817 	ldw	r2,32(r6)
    5c94:	d9001217 	ldw	r4,72(sp)
    5c98:	d9401317 	ldw	r5,76(sp)
    5c9c:	180f883a 	mov	r7,r3
    5ca0:	100d883a 	mov	r6,r2
    5ca4:	000e6d80 	call	e6d8 <__divdf3>
    5ca8:	948003cc 	andi	r18,r18,15
    5cac:	058000c4 	movi	r22,3
    5cb0:	1029883a 	mov	r20,r2
    5cb4:	182b883a 	mov	r21,r3
    5cb8:	003c8906 	br	4ee0 <_dtoa_r+0x424>
    5cbc:	d9001017 	ldw	r4,64(sp)
    5cc0:	d9800917 	ldw	r6,36(sp)
    5cc4:	0025883a 	mov	r18,zero
    5cc8:	1105c83a 	sub	r2,r2,r4
    5ccc:	2089883a 	add	r4,r4,r2
    5cd0:	308d883a 	add	r6,r6,r2
    5cd4:	d9001015 	stw	r4,64(sp)
    5cd8:	d9800915 	stw	r6,36(sp)
    5cdc:	003e3206 	br	55a8 <_dtoa_r+0xaec>
    5ce0:	28800044 	addi	r2,r5,1
    5ce4:	27000044 	addi	fp,r4,1
    5ce8:	20800005 	stb	r2,0(r4)
    5cec:	003e6c06 	br	56a0 <_dtoa_r+0xbe4>
    5cf0:	d8800f17 	ldw	r2,60(sp)
    5cf4:	00bce016 	blt	zero,r2,5078 <_dtoa_r+0x5bc>
    5cf8:	d9800f17 	ldw	r6,60(sp)
    5cfc:	303cc51e 	bne	r6,zero,5014 <_dtoa_r+0x558>
    5d00:	0005883a 	mov	r2,zero
    5d04:	00d00534 	movhi	r3,16404
    5d08:	980b883a 	mov	r5,r19
    5d0c:	180f883a 	mov	r7,r3
    5d10:	9009883a 	mov	r4,r18
    5d14:	100d883a 	mov	r6,r2
    5d18:	000e3140 	call	e314 <__muldf3>
    5d1c:	180b883a 	mov	r5,r3
    5d20:	a80f883a 	mov	r7,r21
    5d24:	1009883a 	mov	r4,r2
    5d28:	a00d883a 	mov	r6,r20
    5d2c:	000eac80 	call	eac8 <__gedf2>
    5d30:	103cb80e 	bge	r2,zero,5014 <_dtoa_r+0x558>
    5d34:	0027883a 	mov	r19,zero
    5d38:	0025883a 	mov	r18,zero
    5d3c:	003fc606 	br	5c58 <_dtoa_r+0x119c>
    5d40:	99400117 	ldw	r5,4(r19)
    5d44:	d9001617 	ldw	r4,88(sp)
    5d48:	00085380 	call	8538 <_Balloc>
    5d4c:	99800417 	ldw	r6,16(r19)
    5d50:	11000304 	addi	r4,r2,12
    5d54:	99400304 	addi	r5,r19,12
    5d58:	318d883a 	add	r6,r6,r6
    5d5c:	318d883a 	add	r6,r6,r6
    5d60:	31800204 	addi	r6,r6,8
    5d64:	1023883a 	mov	r17,r2
    5d68:	0007da00 	call	7da0 <memcpy>
    5d6c:	d9001617 	ldw	r4,88(sp)
    5d70:	880b883a 	mov	r5,r17
    5d74:	01800044 	movi	r6,1
    5d78:	00088fc0 	call	88fc <__lshift>
    5d7c:	100b883a 	mov	r5,r2
    5d80:	003d9c06 	br	53f4 <_dtoa_r+0x938>
    5d84:	00800e44 	movi	r2,57
    5d88:	b8807026 	beq	r23,r2,5f4c <_dtoa_r+0x1490>
    5d8c:	b8800044 	addi	r2,r23,1
    5d90:	b7000044 	addi	fp,r22,1
    5d94:	b0800005 	stb	r2,0(r22)
    5d98:	003e4106 	br	56a0 <_dtoa_r+0xbe4>
    5d9c:	d8800317 	ldw	r2,12(sp)
    5da0:	01800074 	movhi	r6,1
    5da4:	31896a04 	addi	r6,r6,9640
    5da8:	b009883a 	mov	r4,r22
    5dac:	100e90fa 	slli	r7,r2,3
    5db0:	b80b883a 	mov	r5,r23
    5db4:	398f883a 	add	r7,r7,r6
    5db8:	38bffe17 	ldw	r2,-8(r7)
    5dbc:	d9800517 	ldw	r6,20(sp)
    5dc0:	38ffff17 	ldw	r3,-4(r7)
    5dc4:	37000044 	addi	fp,r6,1
    5dc8:	180f883a 	mov	r7,r3
    5dcc:	100d883a 	mov	r6,r2
    5dd0:	000e3140 	call	e314 <__muldf3>
    5dd4:	a80b883a 	mov	r5,r21
    5dd8:	a009883a 	mov	r4,r20
    5ddc:	182f883a 	mov	r23,r3
    5de0:	102d883a 	mov	r22,r2
    5de4:	000ed580 	call	ed58 <__fixdfsi>
    5de8:	1009883a 	mov	r4,r2
    5dec:	1027883a 	mov	r19,r2
    5df0:	000ec600 	call	ec60 <__floatsidf>
    5df4:	a80b883a 	mov	r5,r21
    5df8:	a009883a 	mov	r4,r20
    5dfc:	180f883a 	mov	r7,r3
    5e00:	100d883a 	mov	r6,r2
    5e04:	000e2200 	call	e220 <__subdf3>
    5e08:	180b883a 	mov	r5,r3
    5e0c:	d8c00517 	ldw	r3,20(sp)
    5e10:	9cc00c04 	addi	r19,r19,48
    5e14:	1009883a 	mov	r4,r2
    5e18:	1cc00005 	stb	r19,0(r3)
    5e1c:	2021883a 	mov	r16,r4
    5e20:	d9000317 	ldw	r4,12(sp)
    5e24:	00800044 	movi	r2,1
    5e28:	2823883a 	mov	r17,r5
    5e2c:	20802226 	beq	r4,r2,5eb8 <_dtoa_r+0x13fc>
    5e30:	1029883a 	mov	r20,r2
    5e34:	0005883a 	mov	r2,zero
    5e38:	00d00934 	movhi	r3,16420
    5e3c:	180f883a 	mov	r7,r3
    5e40:	100d883a 	mov	r6,r2
    5e44:	880b883a 	mov	r5,r17
    5e48:	8009883a 	mov	r4,r16
    5e4c:	000e3140 	call	e314 <__muldf3>
    5e50:	180b883a 	mov	r5,r3
    5e54:	1009883a 	mov	r4,r2
    5e58:	1823883a 	mov	r17,r3
    5e5c:	1021883a 	mov	r16,r2
    5e60:	000ed580 	call	ed58 <__fixdfsi>
    5e64:	1009883a 	mov	r4,r2
    5e68:	102b883a 	mov	r21,r2
    5e6c:	000ec600 	call	ec60 <__floatsidf>
    5e70:	880b883a 	mov	r5,r17
    5e74:	8009883a 	mov	r4,r16
    5e78:	180f883a 	mov	r7,r3
    5e7c:	100d883a 	mov	r6,r2
    5e80:	000e2200 	call	e220 <__subdf3>
    5e84:	180b883a 	mov	r5,r3
    5e88:	d8c00517 	ldw	r3,20(sp)
    5e8c:	1009883a 	mov	r4,r2
    5e90:	ad400c04 	addi	r21,r21,48
    5e94:	1d05883a 	add	r2,r3,r20
    5e98:	15400005 	stb	r21,0(r2)
    5e9c:	2021883a 	mov	r16,r4
    5ea0:	d9000317 	ldw	r4,12(sp)
    5ea4:	a5000044 	addi	r20,r20,1
    5ea8:	2823883a 	mov	r17,r5
    5eac:	a13fe11e 	bne	r20,r4,5e34 <_dtoa_r+0x1378>
    5eb0:	e505883a 	add	r2,fp,r20
    5eb4:	173fffc4 	addi	fp,r2,-1
    5eb8:	0025883a 	mov	r18,zero
    5ebc:	04cff834 	movhi	r19,16352
    5ec0:	b009883a 	mov	r4,r22
    5ec4:	b80b883a 	mov	r5,r23
    5ec8:	900d883a 	mov	r6,r18
    5ecc:	980f883a 	mov	r7,r19
    5ed0:	000e2a00 	call	e2a0 <__adddf3>
    5ed4:	180b883a 	mov	r5,r3
    5ed8:	1009883a 	mov	r4,r2
    5edc:	800d883a 	mov	r6,r16
    5ee0:	880f883a 	mov	r7,r17
    5ee4:	000eb500 	call	eb50 <__ltdf2>
    5ee8:	103cab16 	blt	r2,zero,5198 <_dtoa_r+0x6dc>
    5eec:	0009883a 	mov	r4,zero
    5ef0:	980b883a 	mov	r5,r19
    5ef4:	b80f883a 	mov	r7,r23
    5ef8:	b00d883a 	mov	r6,r22
    5efc:	000e2200 	call	e220 <__subdf3>
    5f00:	180b883a 	mov	r5,r3
    5f04:	880f883a 	mov	r7,r17
    5f08:	1009883a 	mov	r4,r2
    5f0c:	800d883a 	mov	r6,r16
    5f10:	000ea400 	call	ea40 <__gtdf2>
    5f14:	00bc470e 	bge	zero,r2,5034 <_dtoa_r+0x578>
    5f18:	00c00c04 	movi	r3,48
    5f1c:	e73fffc4 	addi	fp,fp,-1
    5f20:	e0800007 	ldb	r2,0(fp)
    5f24:	10fffd26 	beq	r2,r3,5f1c <_dtoa_r+0x1460>
    5f28:	d9800417 	ldw	r6,16(sp)
    5f2c:	e7000044 	addi	fp,fp,1
    5f30:	d9800d15 	stw	r6,52(sp)
    5f34:	003cab06 	br	51e4 <_dtoa_r+0x728>
    5f38:	d8c00f17 	ldw	r3,60(sp)
    5f3c:	d9001117 	ldw	r4,68(sp)
    5f40:	20e1c83a 	sub	r16,r4,r3
    5f44:	0007883a 	mov	r3,zero
    5f48:	003d9b06 	br	55b8 <_dtoa_r+0xafc>
    5f4c:	00800e44 	movi	r2,57
    5f50:	b0800005 	stb	r2,0(r22)
    5f54:	b5800044 	addi	r22,r22,1
    5f58:	003dc106 	br	5660 <_dtoa_r+0xba4>
    5f5c:	05800084 	movi	r22,2
    5f60:	003bf706 	br	4f40 <_dtoa_r+0x484>
    5f64:	d9000f17 	ldw	r4,60(sp)
    5f68:	013c000e 	bge	zero,r4,4f6c <_dtoa_r+0x4b0>
    5f6c:	d9800e17 	ldw	r6,56(sp)
    5f70:	01bc300e 	bge	zero,r6,5034 <_dtoa_r+0x578>
    5f74:	0005883a 	mov	r2,zero
    5f78:	00d00934 	movhi	r3,16420
    5f7c:	a80b883a 	mov	r5,r21
    5f80:	180f883a 	mov	r7,r3
    5f84:	a009883a 	mov	r4,r20
    5f88:	100d883a 	mov	r6,r2
    5f8c:	000e3140 	call	e314 <__muldf3>
    5f90:	b1000044 	addi	r4,r22,1
    5f94:	1021883a 	mov	r16,r2
    5f98:	1823883a 	mov	r17,r3
    5f9c:	000ec600 	call	ec60 <__floatsidf>
    5fa0:	880b883a 	mov	r5,r17
    5fa4:	8009883a 	mov	r4,r16
    5fa8:	180f883a 	mov	r7,r3
    5fac:	100d883a 	mov	r6,r2
    5fb0:	000e3140 	call	e314 <__muldf3>
    5fb4:	0011883a 	mov	r8,zero
    5fb8:	02500734 	movhi	r9,16412
    5fbc:	180b883a 	mov	r5,r3
    5fc0:	480f883a 	mov	r7,r9
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	400d883a 	mov	r6,r8
    5fcc:	000e2a00 	call	e2a0 <__adddf3>
    5fd0:	102d883a 	mov	r22,r2
    5fd4:	00bf3034 	movhi	r2,64704
    5fd8:	10ef883a 	add	r23,r2,r3
    5fdc:	d8800d17 	ldw	r2,52(sp)
    5fe0:	d8c00e17 	ldw	r3,56(sp)
    5fe4:	8029883a 	mov	r20,r16
    5fe8:	10bfffc4 	addi	r2,r2,-1
    5fec:	882b883a 	mov	r21,r17
    5ff0:	d8800415 	stw	r2,16(sp)
    5ff4:	d8c00315 	stw	r3,12(sp)
    5ff8:	003e8306 	br	5a08 <_dtoa_r+0xf4c>
    5ffc:	d8800117 	ldw	r2,4(sp)
    6000:	dc001117 	ldw	r16,68(sp)
    6004:	dc801017 	ldw	r18,64(sp)
    6008:	00c00d84 	movi	r3,54
    600c:	1887c83a 	sub	r3,r3,r2
    6010:	003d6906 	br	55b8 <_dtoa_r+0xafc>
    6014:	01800044 	movi	r6,1
    6018:	3021883a 	mov	r16,r6
    601c:	d9800f15 	stw	r6,60(sp)
    6020:	d9802615 	stw	r6,152(sp)
    6024:	d9800e15 	stw	r6,56(sp)
    6028:	003b9306 	br	4e78 <_dtoa_r+0x3bc>
    602c:	b021883a 	mov	r16,r22
    6030:	dd800f15 	stw	r22,60(sp)
    6034:	003b9006 	br	4e78 <_dtoa_r+0x3bc>
    6038:	103e221e 	bne	r2,zero,58c4 <_dtoa_r+0xe08>
    603c:	b880004c 	andi	r2,r23,1
    6040:	1005003a 	cmpeq	r2,r2,zero
    6044:	103e1f1e 	bne	r2,zero,58c4 <_dtoa_r+0xe08>
    6048:	003e1b06 	br	58b8 <_dtoa_r+0xdfc>
    604c:	d9001617 	ldw	r4,88(sp)
    6050:	980b883a 	mov	r5,r19
    6054:	01800284 	movi	r6,10
    6058:	000f883a 	mov	r7,zero
    605c:	0008c6c0 	call	8c6c <__multadd>
    6060:	d8c00e17 	ldw	r3,56(sp)
    6064:	1027883a 	mov	r19,r2
    6068:	d8c00f15 	stw	r3,60(sp)
    606c:	003cd306 	br	53bc <_dtoa_r+0x900>

00006070 <_fflush_r>:
    6070:	defffb04 	addi	sp,sp,-20
    6074:	dcc00315 	stw	r19,12(sp)
    6078:	dc800215 	stw	r18,8(sp)
    607c:	dfc00415 	stw	ra,16(sp)
    6080:	dc400115 	stw	r17,4(sp)
    6084:	dc000015 	stw	r16,0(sp)
    6088:	2027883a 	mov	r19,r4
    608c:	2825883a 	mov	r18,r5
    6090:	20000226 	beq	r4,zero,609c <_fflush_r+0x2c>
    6094:	20800e17 	ldw	r2,56(r4)
    6098:	10005626 	beq	r2,zero,61f4 <_fflush_r+0x184>
    609c:	9100030b 	ldhu	r4,12(r18)
    60a0:	20ffffcc 	andi	r3,r4,65535
    60a4:	18e0001c 	xori	r3,r3,32768
    60a8:	18e00004 	addi	r3,r3,-32768
    60ac:	1880020c 	andi	r2,r3,8
    60b0:	1000261e 	bne	r2,zero,614c <_fflush_r+0xdc>
    60b4:	90c00117 	ldw	r3,4(r18)
    60b8:	20820014 	ori	r2,r4,2048
    60bc:	9080030d 	sth	r2,12(r18)
    60c0:	1009883a 	mov	r4,r2
    60c4:	00c0400e 	bge	zero,r3,61c8 <_fflush_r+0x158>
    60c8:	92000a17 	ldw	r8,40(r18)
    60cc:	40004026 	beq	r8,zero,61d0 <_fflush_r+0x160>
    60d0:	2084000c 	andi	r2,r4,4096
    60d4:	10005326 	beq	r2,zero,6224 <_fflush_r+0x1b4>
    60d8:	94001417 	ldw	r16,80(r18)
    60dc:	9080030b 	ldhu	r2,12(r18)
    60e0:	1080010c 	andi	r2,r2,4
    60e4:	1000481e 	bne	r2,zero,6208 <_fflush_r+0x198>
    60e8:	91400717 	ldw	r5,28(r18)
    60ec:	9809883a 	mov	r4,r19
    60f0:	800d883a 	mov	r6,r16
    60f4:	000f883a 	mov	r7,zero
    60f8:	403ee83a 	callr	r8
    60fc:	8080261e 	bne	r16,r2,6198 <_fflush_r+0x128>
    6100:	9080030b 	ldhu	r2,12(r18)
    6104:	91000417 	ldw	r4,16(r18)
    6108:	90000115 	stw	zero,4(r18)
    610c:	10bdffcc 	andi	r2,r2,63487
    6110:	10ffffcc 	andi	r3,r2,65535
    6114:	18c4000c 	andi	r3,r3,4096
    6118:	9080030d 	sth	r2,12(r18)
    611c:	91000015 	stw	r4,0(r18)
    6120:	18002b26 	beq	r3,zero,61d0 <_fflush_r+0x160>
    6124:	0007883a 	mov	r3,zero
    6128:	1805883a 	mov	r2,r3
    612c:	94001415 	stw	r16,80(r18)
    6130:	dfc00417 	ldw	ra,16(sp)
    6134:	dcc00317 	ldw	r19,12(sp)
    6138:	dc800217 	ldw	r18,8(sp)
    613c:	dc400117 	ldw	r17,4(sp)
    6140:	dc000017 	ldw	r16,0(sp)
    6144:	dec00504 	addi	sp,sp,20
    6148:	f800283a 	ret
    614c:	94400417 	ldw	r17,16(r18)
    6150:	88001f26 	beq	r17,zero,61d0 <_fflush_r+0x160>
    6154:	90800017 	ldw	r2,0(r18)
    6158:	18c000cc 	andi	r3,r3,3
    615c:	94400015 	stw	r17,0(r18)
    6160:	1461c83a 	sub	r16,r2,r17
    6164:	18002526 	beq	r3,zero,61fc <_fflush_r+0x18c>
    6168:	0005883a 	mov	r2,zero
    616c:	90800215 	stw	r2,8(r18)
    6170:	0400170e 	bge	zero,r16,61d0 <_fflush_r+0x160>
    6174:	90c00917 	ldw	r3,36(r18)
    6178:	91400717 	ldw	r5,28(r18)
    617c:	880d883a 	mov	r6,r17
    6180:	800f883a 	mov	r7,r16
    6184:	9809883a 	mov	r4,r19
    6188:	183ee83a 	callr	r3
    618c:	88a3883a 	add	r17,r17,r2
    6190:	80a1c83a 	sub	r16,r16,r2
    6194:	00bff616 	blt	zero,r2,6170 <_fflush_r+0x100>
    6198:	9080030b 	ldhu	r2,12(r18)
    619c:	00ffffc4 	movi	r3,-1
    61a0:	10801014 	ori	r2,r2,64
    61a4:	9080030d 	sth	r2,12(r18)
    61a8:	1805883a 	mov	r2,r3
    61ac:	dfc00417 	ldw	ra,16(sp)
    61b0:	dcc00317 	ldw	r19,12(sp)
    61b4:	dc800217 	ldw	r18,8(sp)
    61b8:	dc400117 	ldw	r17,4(sp)
    61bc:	dc000017 	ldw	r16,0(sp)
    61c0:	dec00504 	addi	sp,sp,20
    61c4:	f800283a 	ret
    61c8:	90800f17 	ldw	r2,60(r18)
    61cc:	00bfbe16 	blt	zero,r2,60c8 <_fflush_r+0x58>
    61d0:	0007883a 	mov	r3,zero
    61d4:	1805883a 	mov	r2,r3
    61d8:	dfc00417 	ldw	ra,16(sp)
    61dc:	dcc00317 	ldw	r19,12(sp)
    61e0:	dc800217 	ldw	r18,8(sp)
    61e4:	dc400117 	ldw	r17,4(sp)
    61e8:	dc000017 	ldw	r16,0(sp)
    61ec:	dec00504 	addi	sp,sp,20
    61f0:	f800283a 	ret
    61f4:	00063080 	call	6308 <__sinit>
    61f8:	003fa806 	br	609c <_fflush_r+0x2c>
    61fc:	90800517 	ldw	r2,20(r18)
    6200:	90800215 	stw	r2,8(r18)
    6204:	003fda06 	br	6170 <_fflush_r+0x100>
    6208:	90800117 	ldw	r2,4(r18)
    620c:	90c00c17 	ldw	r3,48(r18)
    6210:	80a1c83a 	sub	r16,r16,r2
    6214:	183fb426 	beq	r3,zero,60e8 <_fflush_r+0x78>
    6218:	90800f17 	ldw	r2,60(r18)
    621c:	80a1c83a 	sub	r16,r16,r2
    6220:	003fb106 	br	60e8 <_fflush_r+0x78>
    6224:	91400717 	ldw	r5,28(r18)
    6228:	9809883a 	mov	r4,r19
    622c:	000d883a 	mov	r6,zero
    6230:	01c00044 	movi	r7,1
    6234:	403ee83a 	callr	r8
    6238:	1021883a 	mov	r16,r2
    623c:	00bfffc4 	movi	r2,-1
    6240:	80800226 	beq	r16,r2,624c <_fflush_r+0x1dc>
    6244:	92000a17 	ldw	r8,40(r18)
    6248:	003fa406 	br	60dc <_fflush_r+0x6c>
    624c:	98c00017 	ldw	r3,0(r19)
    6250:	00800744 	movi	r2,29
    6254:	18bfde26 	beq	r3,r2,61d0 <_fflush_r+0x160>
    6258:	9080030b 	ldhu	r2,12(r18)
    625c:	8007883a 	mov	r3,r16
    6260:	10801014 	ori	r2,r2,64
    6264:	9080030d 	sth	r2,12(r18)
    6268:	003fcf06 	br	61a8 <_fflush_r+0x138>

0000626c <fflush>:
    626c:	01400034 	movhi	r5,0
    6270:	29581c04 	addi	r5,r5,24688
    6274:	2007883a 	mov	r3,r4
    6278:	20000526 	beq	r4,zero,6290 <fflush+0x24>
    627c:	00800074 	movhi	r2,1
    6280:	1090f904 	addi	r2,r2,17380
    6284:	11000017 	ldw	r4,0(r2)
    6288:	180b883a 	mov	r5,r3
    628c:	00060701 	jmpi	6070 <_fflush_r>
    6290:	00800074 	movhi	r2,1
    6294:	1090fa04 	addi	r2,r2,17384
    6298:	11000017 	ldw	r4,0(r2)
    629c:	00070781 	jmpi	7078 <_fwalk_reent>

000062a0 <std>:
    62a0:	00800074 	movhi	r2,1
    62a4:	10a67f04 	addi	r2,r2,-26116
    62a8:	20800b15 	stw	r2,44(r4)
    62ac:	00800074 	movhi	r2,1
    62b0:	10a6ba04 	addi	r2,r2,-25880
    62b4:	20800815 	stw	r2,32(r4)
    62b8:	00c00074 	movhi	r3,1
    62bc:	18e69b04 	addi	r3,r3,-26004
    62c0:	00800074 	movhi	r2,1
    62c4:	10a68104 	addi	r2,r2,-26108
    62c8:	2140030d 	sth	r5,12(r4)
    62cc:	2180038d 	sth	r6,14(r4)
    62d0:	20c00915 	stw	r3,36(r4)
    62d4:	20800a15 	stw	r2,40(r4)
    62d8:	20000015 	stw	zero,0(r4)
    62dc:	20000115 	stw	zero,4(r4)
    62e0:	20000215 	stw	zero,8(r4)
    62e4:	20000415 	stw	zero,16(r4)
    62e8:	20000515 	stw	zero,20(r4)
    62ec:	20000615 	stw	zero,24(r4)
    62f0:	21000715 	stw	r4,28(r4)
    62f4:	f800283a 	ret

000062f8 <__sfp_lock_acquire>:
    62f8:	f800283a 	ret

000062fc <__sfp_lock_release>:
    62fc:	f800283a 	ret

00006300 <__sinit_lock_acquire>:
    6300:	f800283a 	ret

00006304 <__sinit_lock_release>:
    6304:	f800283a 	ret

00006308 <__sinit>:
    6308:	20800e17 	ldw	r2,56(r4)
    630c:	defffd04 	addi	sp,sp,-12
    6310:	dc400115 	stw	r17,4(sp)
    6314:	dc000015 	stw	r16,0(sp)
    6318:	dfc00215 	stw	ra,8(sp)
    631c:	04400044 	movi	r17,1
    6320:	01400104 	movi	r5,4
    6324:	000d883a 	mov	r6,zero
    6328:	2021883a 	mov	r16,r4
    632c:	2200bb04 	addi	r8,r4,748
    6330:	200f883a 	mov	r7,r4
    6334:	10000526 	beq	r2,zero,634c <__sinit+0x44>
    6338:	dfc00217 	ldw	ra,8(sp)
    633c:	dc400117 	ldw	r17,4(sp)
    6340:	dc000017 	ldw	r16,0(sp)
    6344:	dec00304 	addi	sp,sp,12
    6348:	f800283a 	ret
    634c:	21000117 	ldw	r4,4(r4)
    6350:	00800034 	movhi	r2,0
    6354:	1098fb04 	addi	r2,r2,25580
    6358:	00c000c4 	movi	r3,3
    635c:	80800f15 	stw	r2,60(r16)
    6360:	80c0b915 	stw	r3,740(r16)
    6364:	8200ba15 	stw	r8,744(r16)
    6368:	84400e15 	stw	r17,56(r16)
    636c:	8000b815 	stw	zero,736(r16)
    6370:	00062a00 	call	62a0 <std>
    6374:	81000217 	ldw	r4,8(r16)
    6378:	880d883a 	mov	r6,r17
    637c:	800f883a 	mov	r7,r16
    6380:	01400284 	movi	r5,10
    6384:	00062a00 	call	62a0 <std>
    6388:	81000317 	ldw	r4,12(r16)
    638c:	800f883a 	mov	r7,r16
    6390:	01400484 	movi	r5,18
    6394:	01800084 	movi	r6,2
    6398:	dfc00217 	ldw	ra,8(sp)
    639c:	dc400117 	ldw	r17,4(sp)
    63a0:	dc000017 	ldw	r16,0(sp)
    63a4:	dec00304 	addi	sp,sp,12
    63a8:	00062a01 	jmpi	62a0 <std>

000063ac <__fp_lock>:
    63ac:	0005883a 	mov	r2,zero
    63b0:	f800283a 	ret

000063b4 <__fp_unlock>:
    63b4:	0005883a 	mov	r2,zero
    63b8:	f800283a 	ret

000063bc <__fp_unlock_all>:
    63bc:	00800074 	movhi	r2,1
    63c0:	1090f904 	addi	r2,r2,17380
    63c4:	11000017 	ldw	r4,0(r2)
    63c8:	01400034 	movhi	r5,0
    63cc:	2958ed04 	addi	r5,r5,25524
    63d0:	00071401 	jmpi	7140 <_fwalk>

000063d4 <__fp_lock_all>:
    63d4:	00800074 	movhi	r2,1
    63d8:	1090f904 	addi	r2,r2,17380
    63dc:	11000017 	ldw	r4,0(r2)
    63e0:	01400034 	movhi	r5,0
    63e4:	2958eb04 	addi	r5,r5,25516
    63e8:	00071401 	jmpi	7140 <_fwalk>

000063ec <_cleanup_r>:
    63ec:	01400074 	movhi	r5,1
    63f0:	2970ba04 	addi	r5,r5,-15640
    63f4:	00071401 	jmpi	7140 <_fwalk>

000063f8 <_cleanup>:
    63f8:	00800074 	movhi	r2,1
    63fc:	1090fa04 	addi	r2,r2,17384
    6400:	11000017 	ldw	r4,0(r2)
    6404:	00063ec1 	jmpi	63ec <_cleanup_r>

00006408 <__sfmoreglue>:
    6408:	defffc04 	addi	sp,sp,-16
    640c:	dc400115 	stw	r17,4(sp)
    6410:	2c401724 	muli	r17,r5,92
    6414:	dc800215 	stw	r18,8(sp)
    6418:	2825883a 	mov	r18,r5
    641c:	89400304 	addi	r5,r17,12
    6420:	dc000015 	stw	r16,0(sp)
    6424:	dfc00315 	stw	ra,12(sp)
    6428:	000747c0 	call	747c <_malloc_r>
    642c:	0021883a 	mov	r16,zero
    6430:	880d883a 	mov	r6,r17
    6434:	000b883a 	mov	r5,zero
    6438:	10000626 	beq	r2,zero,6454 <__sfmoreglue+0x4c>
    643c:	11000304 	addi	r4,r2,12
    6440:	14800115 	stw	r18,4(r2)
    6444:	10000015 	stw	zero,0(r2)
    6448:	11000215 	stw	r4,8(r2)
    644c:	1021883a 	mov	r16,r2
    6450:	0007f200 	call	7f20 <memset>
    6454:	8005883a 	mov	r2,r16
    6458:	dfc00317 	ldw	ra,12(sp)
    645c:	dc800217 	ldw	r18,8(sp)
    6460:	dc400117 	ldw	r17,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00404 	addi	sp,sp,16
    646c:	f800283a 	ret

00006470 <__sfp>:
    6470:	defffd04 	addi	sp,sp,-12
    6474:	00800074 	movhi	r2,1
    6478:	1090fa04 	addi	r2,r2,17384
    647c:	dc000015 	stw	r16,0(sp)
    6480:	14000017 	ldw	r16,0(r2)
    6484:	dc400115 	stw	r17,4(sp)
    6488:	dfc00215 	stw	ra,8(sp)
    648c:	80800e17 	ldw	r2,56(r16)
    6490:	2023883a 	mov	r17,r4
    6494:	10002626 	beq	r2,zero,6530 <__sfp+0xc0>
    6498:	8400b804 	addi	r16,r16,736
    649c:	80800117 	ldw	r2,4(r16)
    64a0:	81000217 	ldw	r4,8(r16)
    64a4:	10ffffc4 	addi	r3,r2,-1
    64a8:	18000916 	blt	r3,zero,64d0 <__sfp+0x60>
    64ac:	2080030f 	ldh	r2,12(r4)
    64b0:	10000b26 	beq	r2,zero,64e0 <__sfp+0x70>
    64b4:	017fffc4 	movi	r5,-1
    64b8:	00000206 	br	64c4 <__sfp+0x54>
    64bc:	2080030f 	ldh	r2,12(r4)
    64c0:	10000726 	beq	r2,zero,64e0 <__sfp+0x70>
    64c4:	18ffffc4 	addi	r3,r3,-1
    64c8:	21001704 	addi	r4,r4,92
    64cc:	197ffb1e 	bne	r3,r5,64bc <__sfp+0x4c>
    64d0:	80800017 	ldw	r2,0(r16)
    64d4:	10001926 	beq	r2,zero,653c <__sfp+0xcc>
    64d8:	1021883a 	mov	r16,r2
    64dc:	003fef06 	br	649c <__sfp+0x2c>
    64e0:	00bfffc4 	movi	r2,-1
    64e4:	00c00044 	movi	r3,1
    64e8:	2080038d 	sth	r2,14(r4)
    64ec:	20c0030d 	sth	r3,12(r4)
    64f0:	20000015 	stw	zero,0(r4)
    64f4:	20000215 	stw	zero,8(r4)
    64f8:	20000115 	stw	zero,4(r4)
    64fc:	20000415 	stw	zero,16(r4)
    6500:	20000515 	stw	zero,20(r4)
    6504:	20000615 	stw	zero,24(r4)
    6508:	20000c15 	stw	zero,48(r4)
    650c:	20000d15 	stw	zero,52(r4)
    6510:	20001115 	stw	zero,68(r4)
    6514:	20001215 	stw	zero,72(r4)
    6518:	2005883a 	mov	r2,r4
    651c:	dfc00217 	ldw	ra,8(sp)
    6520:	dc400117 	ldw	r17,4(sp)
    6524:	dc000017 	ldw	r16,0(sp)
    6528:	dec00304 	addi	sp,sp,12
    652c:	f800283a 	ret
    6530:	8009883a 	mov	r4,r16
    6534:	00063080 	call	6308 <__sinit>
    6538:	003fd706 	br	6498 <__sfp+0x28>
    653c:	8809883a 	mov	r4,r17
    6540:	01400104 	movi	r5,4
    6544:	00064080 	call	6408 <__sfmoreglue>
    6548:	80800015 	stw	r2,0(r16)
    654c:	103fe21e 	bne	r2,zero,64d8 <__sfp+0x68>
    6550:	00800304 	movi	r2,12
    6554:	0009883a 	mov	r4,zero
    6558:	88800015 	stw	r2,0(r17)
    655c:	003fee06 	br	6518 <__sfp+0xa8>

00006560 <_fread_r>:
    6560:	defff504 	addi	sp,sp,-44
    6564:	ddc00815 	stw	r23,32(sp)
    6568:	39af383a 	mul	r23,r7,r6
    656c:	df000915 	stw	fp,36(sp)
    6570:	dd800715 	stw	r22,28(sp)
    6574:	dcc00415 	stw	r19,16(sp)
    6578:	dc000115 	stw	r16,4(sp)
    657c:	dfc00a15 	stw	ra,40(sp)
    6580:	dd400615 	stw	r21,24(sp)
    6584:	dd000515 	stw	r20,20(sp)
    6588:	dc800315 	stw	r18,12(sp)
    658c:	dc400215 	stw	r17,8(sp)
    6590:	d9800015 	stw	r6,0(sp)
    6594:	3839883a 	mov	fp,r7
    6598:	2821883a 	mov	r16,r5
    659c:	202d883a 	mov	r22,r4
    65a0:	dcc00b17 	ldw	r19,44(sp)
    65a4:	b8005926 	beq	r23,zero,670c <_fread_r+0x1ac>
    65a8:	20000226 	beq	r4,zero,65b4 <_fread_r+0x54>
    65ac:	20800e17 	ldw	r2,56(r4)
    65b0:	10005826 	beq	r2,zero,6714 <_fread_r+0x1b4>
    65b4:	9c400117 	ldw	r17,4(r19)
    65b8:	88005916 	blt	r17,zero,6720 <_fread_r+0x1c0>
    65bc:	9880030b 	ldhu	r2,12(r19)
    65c0:	8029883a 	mov	r20,r16
    65c4:	1080008c 	andi	r2,r2,2
    65c8:	1000221e 	bne	r2,zero,6654 <_fread_r+0xf4>
    65cc:	b825883a 	mov	r18,r23
    65d0:	00000106 	br	65d8 <_fread_r+0x78>
    65d4:	9c400117 	ldw	r17,4(r19)
    65d8:	a009883a 	mov	r4,r20
    65dc:	880d883a 	mov	r6,r17
    65e0:	8c80542e 	bgeu	r17,r18,6734 <_fread_r+0x1d4>
    65e4:	99400017 	ldw	r5,0(r19)
    65e8:	a469883a 	add	r20,r20,r17
    65ec:	9465c83a 	sub	r18,r18,r17
    65f0:	0007da00 	call	7da0 <memcpy>
    65f4:	98800017 	ldw	r2,0(r19)
    65f8:	b009883a 	mov	r4,r22
    65fc:	980b883a 	mov	r5,r19
    6600:	1461883a 	add	r16,r2,r17
    6604:	9c000015 	stw	r16,0(r19)
    6608:	00095a00 	call	95a0 <__srefill_r>
    660c:	103ff126 	beq	r2,zero,65d4 <_fread_r+0x74>
    6610:	d9400017 	ldw	r5,0(sp)
    6614:	bc89c83a 	sub	r4,r23,r18
    6618:	000f1740 	call	f174 <__udivsi3>
    661c:	1039883a 	mov	fp,r2
    6620:	e005883a 	mov	r2,fp
    6624:	dfc00a17 	ldw	ra,40(sp)
    6628:	df000917 	ldw	fp,36(sp)
    662c:	ddc00817 	ldw	r23,32(sp)
    6630:	dd800717 	ldw	r22,28(sp)
    6634:	dd400617 	ldw	r21,24(sp)
    6638:	dd000517 	ldw	r20,20(sp)
    663c:	dcc00417 	ldw	r19,16(sp)
    6640:	dc800317 	ldw	r18,12(sp)
    6644:	dc400217 	ldw	r17,8(sp)
    6648:	dc000117 	ldw	r16,4(sp)
    664c:	dec00b04 	addi	sp,sp,44
    6650:	f800283a 	ret
    6654:	b825883a 	mov	r18,r23
    6658:	8dc03436 	bltu	r17,r23,672c <_fread_r+0x1cc>
    665c:	99400017 	ldw	r5,0(r19)
    6660:	a009883a 	mov	r4,r20
    6664:	900d883a 	mov	r6,r18
    6668:	0007da00 	call	7da0 <memcpy>
    666c:	9c000017 	ldw	r16,0(r19)
    6670:	98800117 	ldw	r2,4(r19)
    6674:	99400c17 	ldw	r5,48(r19)
    6678:	84a1883a 	add	r16,r16,r18
    667c:	14a3c83a 	sub	r17,r2,r18
    6680:	a4ab883a 	add	r21,r20,r18
    6684:	9c400115 	stw	r17,4(r19)
    6688:	9c000015 	stw	r16,0(r19)
    668c:	bca9c83a 	sub	r20,r23,r18
    6690:	28000826 	beq	r5,zero,66b4 <_fread_r+0x154>
    6694:	a03fe226 	beq	r20,zero,6620 <_fread_r+0xc0>
    6698:	98801004 	addi	r2,r19,64
    669c:	28800326 	beq	r5,r2,66ac <_fread_r+0x14c>
    66a0:	b009883a 	mov	r4,r22
    66a4:	00068c80 	call	68c8 <_free_r>
    66a8:	9c000017 	ldw	r16,0(r19)
    66ac:	98000c15 	stw	zero,48(r19)
    66b0:	00000106 	br	66b8 <_fread_r+0x158>
    66b4:	a03fda26 	beq	r20,zero,6620 <_fread_r+0xc0>
    66b8:	9c800417 	ldw	r18,16(r19)
    66bc:	9c400517 	ldw	r17,20(r19)
    66c0:	9d400015 	stw	r21,0(r19)
    66c4:	9d400415 	stw	r21,16(r19)
    66c8:	9d000515 	stw	r20,20(r19)
    66cc:	b009883a 	mov	r4,r22
    66d0:	980b883a 	mov	r5,r19
    66d4:	00095a00 	call	95a0 <__srefill_r>
    66d8:	98c00117 	ldw	r3,4(r19)
    66dc:	9c800415 	stw	r18,16(r19)
    66e0:	9c400515 	stw	r17,20(r19)
    66e4:	a8eb883a 	add	r21,r21,r3
    66e8:	9c000015 	stw	r16,0(r19)
    66ec:	a0e9c83a 	sub	r20,r20,r3
    66f0:	98000115 	stw	zero,4(r19)
    66f4:	103fef26 	beq	r2,zero,66b4 <_fread_r+0x154>
    66f8:	d9400017 	ldw	r5,0(sp)
    66fc:	bd09c83a 	sub	r4,r23,r20
    6700:	000f1740 	call	f174 <__udivsi3>
    6704:	1039883a 	mov	fp,r2
    6708:	003fc506 	br	6620 <_fread_r+0xc0>
    670c:	0039883a 	mov	fp,zero
    6710:	003fc306 	br	6620 <_fread_r+0xc0>
    6714:	00063080 	call	6308 <__sinit>
    6718:	9c400117 	ldw	r17,4(r19)
    671c:	883fa70e 	bge	r17,zero,65bc <_fread_r+0x5c>
    6720:	0023883a 	mov	r17,zero
    6724:	98000115 	stw	zero,4(r19)
    6728:	003fa406 	br	65bc <_fread_r+0x5c>
    672c:	8825883a 	mov	r18,r17
    6730:	003fca06 	br	665c <_fread_r+0xfc>
    6734:	99400017 	ldw	r5,0(r19)
    6738:	900d883a 	mov	r6,r18
    673c:	0007da00 	call	7da0 <memcpy>
    6740:	98c00117 	ldw	r3,4(r19)
    6744:	98800017 	ldw	r2,0(r19)
    6748:	1c87c83a 	sub	r3,r3,r18
    674c:	1485883a 	add	r2,r2,r18
    6750:	98800015 	stw	r2,0(r19)
    6754:	98c00115 	stw	r3,4(r19)
    6758:	003fb106 	br	6620 <_fread_r+0xc0>

0000675c <fread>:
    675c:	00800074 	movhi	r2,1
    6760:	1090f904 	addi	r2,r2,17380
    6764:	2017883a 	mov	r11,r4
    6768:	11000017 	ldw	r4,0(r2)
    676c:	defffe04 	addi	sp,sp,-8
    6770:	3013883a 	mov	r9,r6
    6774:	2805883a 	mov	r2,r5
    6778:	d9c00015 	stw	r7,0(sp)
    677c:	580b883a 	mov	r5,r11
    6780:	100d883a 	mov	r6,r2
    6784:	480f883a 	mov	r7,r9
    6788:	dfc00115 	stw	ra,4(sp)
    678c:	00065600 	call	6560 <_fread_r>
    6790:	dfc00117 	ldw	ra,4(sp)
    6794:	dec00204 	addi	sp,sp,8
    6798:	f800283a 	ret

0000679c <_malloc_trim_r>:
    679c:	defffb04 	addi	sp,sp,-20
    67a0:	dcc00315 	stw	r19,12(sp)
    67a4:	04c00074 	movhi	r19,1
    67a8:	9ccb0004 	addi	r19,r19,11264
    67ac:	dc800215 	stw	r18,8(sp)
    67b0:	dc400115 	stw	r17,4(sp)
    67b4:	dc000015 	stw	r16,0(sp)
    67b8:	2823883a 	mov	r17,r5
    67bc:	2025883a 	mov	r18,r4
    67c0:	dfc00415 	stw	ra,16(sp)
    67c4:	000f7440 	call	f744 <__malloc_lock>
    67c8:	98800217 	ldw	r2,8(r19)
    67cc:	9009883a 	mov	r4,r18
    67d0:	000b883a 	mov	r5,zero
    67d4:	10c00117 	ldw	r3,4(r2)
    67d8:	00bfff04 	movi	r2,-4
    67dc:	18a0703a 	and	r16,r3,r2
    67e0:	8463c83a 	sub	r17,r16,r17
    67e4:	8c43fbc4 	addi	r17,r17,4079
    67e8:	8822d33a 	srli	r17,r17,12
    67ec:	0083ffc4 	movi	r2,4095
    67f0:	8c7fffc4 	addi	r17,r17,-1
    67f4:	8822933a 	slli	r17,r17,12
    67f8:	1440060e 	bge	r2,r17,6814 <_malloc_trim_r+0x78>
    67fc:	00097f00 	call	97f0 <_sbrk_r>
    6800:	98c00217 	ldw	r3,8(r19)
    6804:	9009883a 	mov	r4,r18
    6808:	044bc83a 	sub	r5,zero,r17
    680c:	80c7883a 	add	r3,r16,r3
    6810:	10c00926 	beq	r2,r3,6838 <_malloc_trim_r+0x9c>
    6814:	000f7480 	call	f748 <__malloc_unlock>
    6818:	0005883a 	mov	r2,zero
    681c:	dfc00417 	ldw	ra,16(sp)
    6820:	dcc00317 	ldw	r19,12(sp)
    6824:	dc800217 	ldw	r18,8(sp)
    6828:	dc400117 	ldw	r17,4(sp)
    682c:	dc000017 	ldw	r16,0(sp)
    6830:	dec00504 	addi	sp,sp,20
    6834:	f800283a 	ret
    6838:	9009883a 	mov	r4,r18
    683c:	00097f00 	call	97f0 <_sbrk_r>
    6840:	844dc83a 	sub	r6,r16,r17
    6844:	00ffffc4 	movi	r3,-1
    6848:	9009883a 	mov	r4,r18
    684c:	000b883a 	mov	r5,zero
    6850:	01c00074 	movhi	r7,1
    6854:	39d82204 	addi	r7,r7,24712
    6858:	31800054 	ori	r6,r6,1
    685c:	10c00926 	beq	r2,r3,6884 <_malloc_trim_r+0xe8>
    6860:	38800017 	ldw	r2,0(r7)
    6864:	98c00217 	ldw	r3,8(r19)
    6868:	9009883a 	mov	r4,r18
    686c:	1445c83a 	sub	r2,r2,r17
    6870:	38800015 	stw	r2,0(r7)
    6874:	19800115 	stw	r6,4(r3)
    6878:	000f7480 	call	f748 <__malloc_unlock>
    687c:	00800044 	movi	r2,1
    6880:	003fe606 	br	681c <_malloc_trim_r+0x80>
    6884:	00097f00 	call	97f0 <_sbrk_r>
    6888:	99800217 	ldw	r6,8(r19)
    688c:	100f883a 	mov	r7,r2
    6890:	9009883a 	mov	r4,r18
    6894:	1187c83a 	sub	r3,r2,r6
    6898:	008003c4 	movi	r2,15
    689c:	19400054 	ori	r5,r3,1
    68a0:	10ffdc0e 	bge	r2,r3,6814 <_malloc_trim_r+0x78>
    68a4:	00800074 	movhi	r2,1
    68a8:	1090fe04 	addi	r2,r2,17400
    68ac:	10c00017 	ldw	r3,0(r2)
    68b0:	00800074 	movhi	r2,1
    68b4:	10982204 	addi	r2,r2,24712
    68b8:	31400115 	stw	r5,4(r6)
    68bc:	38c7c83a 	sub	r3,r7,r3
    68c0:	10c00015 	stw	r3,0(r2)
    68c4:	003fd306 	br	6814 <_malloc_trim_r+0x78>

000068c8 <_free_r>:
    68c8:	defffd04 	addi	sp,sp,-12
    68cc:	dc400115 	stw	r17,4(sp)
    68d0:	dc000015 	stw	r16,0(sp)
    68d4:	dfc00215 	stw	ra,8(sp)
    68d8:	2821883a 	mov	r16,r5
    68dc:	2023883a 	mov	r17,r4
    68e0:	28005a26 	beq	r5,zero,6a4c <_free_r+0x184>
    68e4:	000f7440 	call	f744 <__malloc_lock>
    68e8:	823ffe04 	addi	r8,r16,-8
    68ec:	41400117 	ldw	r5,4(r8)
    68f0:	00bfff84 	movi	r2,-2
    68f4:	02800074 	movhi	r10,1
    68f8:	528b0004 	addi	r10,r10,11264
    68fc:	288e703a 	and	r7,r5,r2
    6900:	41cd883a 	add	r6,r8,r7
    6904:	30c00117 	ldw	r3,4(r6)
    6908:	51000217 	ldw	r4,8(r10)
    690c:	00bfff04 	movi	r2,-4
    6910:	1892703a 	and	r9,r3,r2
    6914:	5017883a 	mov	r11,r10
    6918:	31006726 	beq	r6,r4,6ab8 <_free_r+0x1f0>
    691c:	2880004c 	andi	r2,r5,1
    6920:	1005003a 	cmpeq	r2,r2,zero
    6924:	32400115 	stw	r9,4(r6)
    6928:	10001a1e 	bne	r2,zero,6994 <_free_r+0xcc>
    692c:	000b883a 	mov	r5,zero
    6930:	3247883a 	add	r3,r6,r9
    6934:	18800117 	ldw	r2,4(r3)
    6938:	1080004c 	andi	r2,r2,1
    693c:	1000231e 	bne	r2,zero,69cc <_free_r+0x104>
    6940:	280ac03a 	cmpne	r5,r5,zero
    6944:	3a4f883a 	add	r7,r7,r9
    6948:	2800451e 	bne	r5,zero,6a60 <_free_r+0x198>
    694c:	31000217 	ldw	r4,8(r6)
    6950:	00800074 	movhi	r2,1
    6954:	108b0204 	addi	r2,r2,11272
    6958:	20807b26 	beq	r4,r2,6b48 <_free_r+0x280>
    695c:	30800317 	ldw	r2,12(r6)
    6960:	3a07883a 	add	r3,r7,r8
    6964:	19c00015 	stw	r7,0(r3)
    6968:	11000215 	stw	r4,8(r2)
    696c:	20800315 	stw	r2,12(r4)
    6970:	38800054 	ori	r2,r7,1
    6974:	40800115 	stw	r2,4(r8)
    6978:	28001a26 	beq	r5,zero,69e4 <_free_r+0x11c>
    697c:	8809883a 	mov	r4,r17
    6980:	dfc00217 	ldw	ra,8(sp)
    6984:	dc400117 	ldw	r17,4(sp)
    6988:	dc000017 	ldw	r16,0(sp)
    698c:	dec00304 	addi	sp,sp,12
    6990:	000f7481 	jmpi	f748 <__malloc_unlock>
    6994:	80bffe17 	ldw	r2,-8(r16)
    6998:	50c00204 	addi	r3,r10,8
    699c:	4091c83a 	sub	r8,r8,r2
    69a0:	41000217 	ldw	r4,8(r8)
    69a4:	388f883a 	add	r7,r7,r2
    69a8:	20c06126 	beq	r4,r3,6b30 <_free_r+0x268>
    69ac:	40800317 	ldw	r2,12(r8)
    69b0:	3247883a 	add	r3,r6,r9
    69b4:	000b883a 	mov	r5,zero
    69b8:	11000215 	stw	r4,8(r2)
    69bc:	20800315 	stw	r2,12(r4)
    69c0:	18800117 	ldw	r2,4(r3)
    69c4:	1080004c 	andi	r2,r2,1
    69c8:	103fdd26 	beq	r2,zero,6940 <_free_r+0x78>
    69cc:	38800054 	ori	r2,r7,1
    69d0:	3a07883a 	add	r3,r7,r8
    69d4:	280ac03a 	cmpne	r5,r5,zero
    69d8:	40800115 	stw	r2,4(r8)
    69dc:	19c00015 	stw	r7,0(r3)
    69e0:	283fe61e 	bne	r5,zero,697c <_free_r+0xb4>
    69e4:	00807fc4 	movi	r2,511
    69e8:	11c01f2e 	bgeu	r2,r7,6a68 <_free_r+0x1a0>
    69ec:	3806d27a 	srli	r3,r7,9
    69f0:	1800481e 	bne	r3,zero,6b14 <_free_r+0x24c>
    69f4:	3804d0fa 	srli	r2,r7,3
    69f8:	100690fa 	slli	r3,r2,3
    69fc:	1acd883a 	add	r6,r3,r11
    6a00:	31400217 	ldw	r5,8(r6)
    6a04:	31405926 	beq	r6,r5,6b6c <_free_r+0x2a4>
    6a08:	28800117 	ldw	r2,4(r5)
    6a0c:	00ffff04 	movi	r3,-4
    6a10:	10c4703a 	and	r2,r2,r3
    6a14:	3880022e 	bgeu	r7,r2,6a20 <_free_r+0x158>
    6a18:	29400217 	ldw	r5,8(r5)
    6a1c:	317ffa1e 	bne	r6,r5,6a08 <_free_r+0x140>
    6a20:	29800317 	ldw	r6,12(r5)
    6a24:	41800315 	stw	r6,12(r8)
    6a28:	41400215 	stw	r5,8(r8)
    6a2c:	8809883a 	mov	r4,r17
    6a30:	2a000315 	stw	r8,12(r5)
    6a34:	32000215 	stw	r8,8(r6)
    6a38:	dfc00217 	ldw	ra,8(sp)
    6a3c:	dc400117 	ldw	r17,4(sp)
    6a40:	dc000017 	ldw	r16,0(sp)
    6a44:	dec00304 	addi	sp,sp,12
    6a48:	000f7481 	jmpi	f748 <__malloc_unlock>
    6a4c:	dfc00217 	ldw	ra,8(sp)
    6a50:	dc400117 	ldw	r17,4(sp)
    6a54:	dc000017 	ldw	r16,0(sp)
    6a58:	dec00304 	addi	sp,sp,12
    6a5c:	f800283a 	ret
    6a60:	31000217 	ldw	r4,8(r6)
    6a64:	003fbd06 	br	695c <_free_r+0x94>
    6a68:	3806d0fa 	srli	r3,r7,3
    6a6c:	00800044 	movi	r2,1
    6a70:	51400117 	ldw	r5,4(r10)
    6a74:	180890fa 	slli	r4,r3,3
    6a78:	1807d0ba 	srai	r3,r3,2
    6a7c:	22c9883a 	add	r4,r4,r11
    6a80:	21800217 	ldw	r6,8(r4)
    6a84:	10c4983a 	sll	r2,r2,r3
    6a88:	41000315 	stw	r4,12(r8)
    6a8c:	41800215 	stw	r6,8(r8)
    6a90:	288ab03a 	or	r5,r5,r2
    6a94:	22000215 	stw	r8,8(r4)
    6a98:	8809883a 	mov	r4,r17
    6a9c:	51400115 	stw	r5,4(r10)
    6aa0:	32000315 	stw	r8,12(r6)
    6aa4:	dfc00217 	ldw	ra,8(sp)
    6aa8:	dc400117 	ldw	r17,4(sp)
    6aac:	dc000017 	ldw	r16,0(sp)
    6ab0:	dec00304 	addi	sp,sp,12
    6ab4:	000f7481 	jmpi	f748 <__malloc_unlock>
    6ab8:	2880004c 	andi	r2,r5,1
    6abc:	3a4d883a 	add	r6,r7,r9
    6ac0:	1000071e 	bne	r2,zero,6ae0 <_free_r+0x218>
    6ac4:	80bffe17 	ldw	r2,-8(r16)
    6ac8:	4091c83a 	sub	r8,r8,r2
    6acc:	41000317 	ldw	r4,12(r8)
    6ad0:	40c00217 	ldw	r3,8(r8)
    6ad4:	308d883a 	add	r6,r6,r2
    6ad8:	20c00215 	stw	r3,8(r4)
    6adc:	19000315 	stw	r4,12(r3)
    6ae0:	00800074 	movhi	r2,1
    6ae4:	1090fd04 	addi	r2,r2,17396
    6ae8:	11000017 	ldw	r4,0(r2)
    6aec:	30c00054 	ori	r3,r6,1
    6af0:	52000215 	stw	r8,8(r10)
    6af4:	40c00115 	stw	r3,4(r8)
    6af8:	313fa036 	bltu	r6,r4,697c <_free_r+0xb4>
    6afc:	00800074 	movhi	r2,1
    6b00:	10981804 	addi	r2,r2,24672
    6b04:	11400017 	ldw	r5,0(r2)
    6b08:	8809883a 	mov	r4,r17
    6b0c:	000679c0 	call	679c <_malloc_trim_r>
    6b10:	003f9a06 	br	697c <_free_r+0xb4>
    6b14:	00800104 	movi	r2,4
    6b18:	10c0072e 	bgeu	r2,r3,6b38 <_free_r+0x270>
    6b1c:	00800504 	movi	r2,20
    6b20:	10c01936 	bltu	r2,r3,6b88 <_free_r+0x2c0>
    6b24:	188016c4 	addi	r2,r3,91
    6b28:	100690fa 	slli	r3,r2,3
    6b2c:	003fb306 	br	69fc <_free_r+0x134>
    6b30:	01400044 	movi	r5,1
    6b34:	003f7e06 	br	6930 <_free_r+0x68>
    6b38:	3804d1ba 	srli	r2,r7,6
    6b3c:	10800e04 	addi	r2,r2,56
    6b40:	100690fa 	slli	r3,r2,3
    6b44:	003fad06 	br	69fc <_free_r+0x134>
    6b48:	22000315 	stw	r8,12(r4)
    6b4c:	22000215 	stw	r8,8(r4)
    6b50:	3a05883a 	add	r2,r7,r8
    6b54:	38c00054 	ori	r3,r7,1
    6b58:	11c00015 	stw	r7,0(r2)
    6b5c:	41000215 	stw	r4,8(r8)
    6b60:	40c00115 	stw	r3,4(r8)
    6b64:	41000315 	stw	r4,12(r8)
    6b68:	003f8406 	br	697c <_free_r+0xb4>
    6b6c:	1005d0ba 	srai	r2,r2,2
    6b70:	00c00044 	movi	r3,1
    6b74:	51000117 	ldw	r4,4(r10)
    6b78:	1886983a 	sll	r3,r3,r2
    6b7c:	20c8b03a 	or	r4,r4,r3
    6b80:	51000115 	stw	r4,4(r10)
    6b84:	003fa706 	br	6a24 <_free_r+0x15c>
    6b88:	00801504 	movi	r2,84
    6b8c:	10c00436 	bltu	r2,r3,6ba0 <_free_r+0x2d8>
    6b90:	3804d33a 	srli	r2,r7,12
    6b94:	10801b84 	addi	r2,r2,110
    6b98:	100690fa 	slli	r3,r2,3
    6b9c:	003f9706 	br	69fc <_free_r+0x134>
    6ba0:	00805504 	movi	r2,340
    6ba4:	10c00436 	bltu	r2,r3,6bb8 <_free_r+0x2f0>
    6ba8:	3804d3fa 	srli	r2,r7,15
    6bac:	10801dc4 	addi	r2,r2,119
    6bb0:	100690fa 	slli	r3,r2,3
    6bb4:	003f9106 	br	69fc <_free_r+0x134>
    6bb8:	00815504 	movi	r2,1364
    6bbc:	10c0032e 	bgeu	r2,r3,6bcc <_free_r+0x304>
    6bc0:	00801f84 	movi	r2,126
    6bc4:	00c0fc04 	movi	r3,1008
    6bc8:	003f8c06 	br	69fc <_free_r+0x134>
    6bcc:	3804d4ba 	srli	r2,r7,18
    6bd0:	10801f04 	addi	r2,r2,124
    6bd4:	100690fa 	slli	r3,r2,3
    6bd8:	003f8806 	br	69fc <_free_r+0x134>

00006bdc <__sfvwrite_r>:
    6bdc:	30800217 	ldw	r2,8(r6)
    6be0:	defff504 	addi	sp,sp,-44
    6be4:	df000915 	stw	fp,36(sp)
    6be8:	dd800715 	stw	r22,28(sp)
    6bec:	dc800315 	stw	r18,12(sp)
    6bf0:	dfc00a15 	stw	ra,40(sp)
    6bf4:	ddc00815 	stw	r23,32(sp)
    6bf8:	dd400615 	stw	r21,24(sp)
    6bfc:	dd000515 	stw	r20,20(sp)
    6c00:	dcc00415 	stw	r19,16(sp)
    6c04:	dc400215 	stw	r17,8(sp)
    6c08:	dc000115 	stw	r16,4(sp)
    6c0c:	302d883a 	mov	r22,r6
    6c10:	2039883a 	mov	fp,r4
    6c14:	2825883a 	mov	r18,r5
    6c18:	10001c26 	beq	r2,zero,6c8c <__sfvwrite_r+0xb0>
    6c1c:	29c0030b 	ldhu	r7,12(r5)
    6c20:	3880020c 	andi	r2,r7,8
    6c24:	10002726 	beq	r2,zero,6cc4 <__sfvwrite_r+0xe8>
    6c28:	28800417 	ldw	r2,16(r5)
    6c2c:	10002526 	beq	r2,zero,6cc4 <__sfvwrite_r+0xe8>
    6c30:	3880008c 	andi	r2,r7,2
    6c34:	b5400017 	ldw	r21,0(r22)
    6c38:	10002826 	beq	r2,zero,6cdc <__sfvwrite_r+0x100>
    6c3c:	0021883a 	mov	r16,zero
    6c40:	0023883a 	mov	r17,zero
    6c44:	880d883a 	mov	r6,r17
    6c48:	e009883a 	mov	r4,fp
    6c4c:	00810004 	movi	r2,1024
    6c50:	80006e26 	beq	r16,zero,6e0c <__sfvwrite_r+0x230>
    6c54:	800f883a 	mov	r7,r16
    6c58:	91400717 	ldw	r5,28(r18)
    6c5c:	1400012e 	bgeu	r2,r16,6c64 <__sfvwrite_r+0x88>
    6c60:	100f883a 	mov	r7,r2
    6c64:	90c00917 	ldw	r3,36(r18)
    6c68:	183ee83a 	callr	r3
    6c6c:	1007883a 	mov	r3,r2
    6c70:	80a1c83a 	sub	r16,r16,r2
    6c74:	88a3883a 	add	r17,r17,r2
    6c78:	00806d0e 	bge	zero,r2,6e30 <__sfvwrite_r+0x254>
    6c7c:	b0800217 	ldw	r2,8(r22)
    6c80:	10c5c83a 	sub	r2,r2,r3
    6c84:	b0800215 	stw	r2,8(r22)
    6c88:	103fee1e 	bne	r2,zero,6c44 <__sfvwrite_r+0x68>
    6c8c:	0009883a 	mov	r4,zero
    6c90:	2005883a 	mov	r2,r4
    6c94:	dfc00a17 	ldw	ra,40(sp)
    6c98:	df000917 	ldw	fp,36(sp)
    6c9c:	ddc00817 	ldw	r23,32(sp)
    6ca0:	dd800717 	ldw	r22,28(sp)
    6ca4:	dd400617 	ldw	r21,24(sp)
    6ca8:	dd000517 	ldw	r20,20(sp)
    6cac:	dcc00417 	ldw	r19,16(sp)
    6cb0:	dc800317 	ldw	r18,12(sp)
    6cb4:	dc400217 	ldw	r17,8(sp)
    6cb8:	dc000117 	ldw	r16,4(sp)
    6cbc:	dec00b04 	addi	sp,sp,44
    6cc0:	f800283a 	ret
    6cc4:	00047680 	call	4768 <__swsetup_r>
    6cc8:	1000e41e 	bne	r2,zero,705c <__sfvwrite_r+0x480>
    6ccc:	91c0030b 	ldhu	r7,12(r18)
    6cd0:	b5400017 	ldw	r21,0(r22)
    6cd4:	3880008c 	andi	r2,r7,2
    6cd8:	103fd81e 	bne	r2,zero,6c3c <__sfvwrite_r+0x60>
    6cdc:	3880004c 	andi	r2,r7,1
    6ce0:	1005003a 	cmpeq	r2,r2,zero
    6ce4:	10005726 	beq	r2,zero,6e44 <__sfvwrite_r+0x268>
    6ce8:	0029883a 	mov	r20,zero
    6cec:	002f883a 	mov	r23,zero
    6cf0:	a0004226 	beq	r20,zero,6dfc <__sfvwrite_r+0x220>
    6cf4:	3880800c 	andi	r2,r7,512
    6cf8:	94000217 	ldw	r16,8(r18)
    6cfc:	10008b26 	beq	r2,zero,6f2c <__sfvwrite_r+0x350>
    6d00:	800d883a 	mov	r6,r16
    6d04:	a400a536 	bltu	r20,r16,6f9c <__sfvwrite_r+0x3c0>
    6d08:	3881200c 	andi	r2,r7,1152
    6d0c:	10002726 	beq	r2,zero,6dac <__sfvwrite_r+0x1d0>
    6d10:	90800517 	ldw	r2,20(r18)
    6d14:	92000417 	ldw	r8,16(r18)
    6d18:	91400017 	ldw	r5,0(r18)
    6d1c:	1087883a 	add	r3,r2,r2
    6d20:	1887883a 	add	r3,r3,r2
    6d24:	1808d7fa 	srli	r4,r3,31
    6d28:	2a21c83a 	sub	r16,r5,r8
    6d2c:	80800044 	addi	r2,r16,1
    6d30:	20c9883a 	add	r4,r4,r3
    6d34:	2027d07a 	srai	r19,r4,1
    6d38:	a085883a 	add	r2,r20,r2
    6d3c:	980d883a 	mov	r6,r19
    6d40:	9880022e 	bgeu	r19,r2,6d4c <__sfvwrite_r+0x170>
    6d44:	1027883a 	mov	r19,r2
    6d48:	100d883a 	mov	r6,r2
    6d4c:	3881000c 	andi	r2,r7,1024
    6d50:	1000b826 	beq	r2,zero,7034 <__sfvwrite_r+0x458>
    6d54:	300b883a 	mov	r5,r6
    6d58:	e009883a 	mov	r4,fp
    6d5c:	000747c0 	call	747c <_malloc_r>
    6d60:	10003126 	beq	r2,zero,6e28 <__sfvwrite_r+0x24c>
    6d64:	91400417 	ldw	r5,16(r18)
    6d68:	1009883a 	mov	r4,r2
    6d6c:	800d883a 	mov	r6,r16
    6d70:	1023883a 	mov	r17,r2
    6d74:	0007da00 	call	7da0 <memcpy>
    6d78:	90c0030b 	ldhu	r3,12(r18)
    6d7c:	00beffc4 	movi	r2,-1025
    6d80:	1886703a 	and	r3,r3,r2
    6d84:	18c02014 	ori	r3,r3,128
    6d88:	90c0030d 	sth	r3,12(r18)
    6d8c:	9c07c83a 	sub	r3,r19,r16
    6d90:	8c05883a 	add	r2,r17,r16
    6d94:	a00d883a 	mov	r6,r20
    6d98:	a021883a 	mov	r16,r20
    6d9c:	90800015 	stw	r2,0(r18)
    6da0:	90c00215 	stw	r3,8(r18)
    6da4:	94400415 	stw	r17,16(r18)
    6da8:	94c00515 	stw	r19,20(r18)
    6dac:	91000017 	ldw	r4,0(r18)
    6db0:	b80b883a 	mov	r5,r23
    6db4:	a023883a 	mov	r17,r20
    6db8:	0007e400 	call	7e40 <memmove>
    6dbc:	90c00217 	ldw	r3,8(r18)
    6dc0:	90800017 	ldw	r2,0(r18)
    6dc4:	a027883a 	mov	r19,r20
    6dc8:	1c07c83a 	sub	r3,r3,r16
    6dcc:	1405883a 	add	r2,r2,r16
    6dd0:	90c00215 	stw	r3,8(r18)
    6dd4:	a021883a 	mov	r16,r20
    6dd8:	90800015 	stw	r2,0(r18)
    6ddc:	b0800217 	ldw	r2,8(r22)
    6de0:	1405c83a 	sub	r2,r2,r16
    6de4:	b0800215 	stw	r2,8(r22)
    6de8:	103fa826 	beq	r2,zero,6c8c <__sfvwrite_r+0xb0>
    6dec:	a469c83a 	sub	r20,r20,r17
    6df0:	91c0030b 	ldhu	r7,12(r18)
    6df4:	bcef883a 	add	r23,r23,r19
    6df8:	a03fbe1e 	bne	r20,zero,6cf4 <__sfvwrite_r+0x118>
    6dfc:	adc00017 	ldw	r23,0(r21)
    6e00:	ad000117 	ldw	r20,4(r21)
    6e04:	ad400204 	addi	r21,r21,8
    6e08:	003fb906 	br	6cf0 <__sfvwrite_r+0x114>
    6e0c:	ac400017 	ldw	r17,0(r21)
    6e10:	ac000117 	ldw	r16,4(r21)
    6e14:	ad400204 	addi	r21,r21,8
    6e18:	003f8a06 	br	6c44 <__sfvwrite_r+0x68>
    6e1c:	91400417 	ldw	r5,16(r18)
    6e20:	e009883a 	mov	r4,fp
    6e24:	00068c80 	call	68c8 <_free_r>
    6e28:	00800304 	movi	r2,12
    6e2c:	e0800015 	stw	r2,0(fp)
    6e30:	9080030b 	ldhu	r2,12(r18)
    6e34:	013fffc4 	movi	r4,-1
    6e38:	10801014 	ori	r2,r2,64
    6e3c:	9080030d 	sth	r2,12(r18)
    6e40:	003f9306 	br	6c90 <__sfvwrite_r+0xb4>
    6e44:	0027883a 	mov	r19,zero
    6e48:	002f883a 	mov	r23,zero
    6e4c:	d8000015 	stw	zero,0(sp)
    6e50:	0029883a 	mov	r20,zero
    6e54:	98001e26 	beq	r19,zero,6ed0 <__sfvwrite_r+0x2f4>
    6e58:	d8c00017 	ldw	r3,0(sp)
    6e5c:	1804c03a 	cmpne	r2,r3,zero
    6e60:	10005e26 	beq	r2,zero,6fdc <__sfvwrite_r+0x400>
    6e64:	9821883a 	mov	r16,r19
    6e68:	a4c0012e 	bgeu	r20,r19,6e70 <__sfvwrite_r+0x294>
    6e6c:	a021883a 	mov	r16,r20
    6e70:	91000017 	ldw	r4,0(r18)
    6e74:	90800417 	ldw	r2,16(r18)
    6e78:	91800217 	ldw	r6,8(r18)
    6e7c:	91c00517 	ldw	r7,20(r18)
    6e80:	1100022e 	bgeu	r2,r4,6e8c <__sfvwrite_r+0x2b0>
    6e84:	31e3883a 	add	r17,r6,r7
    6e88:	8c001616 	blt	r17,r16,6ee4 <__sfvwrite_r+0x308>
    6e8c:	81c03816 	blt	r16,r7,6f70 <__sfvwrite_r+0x394>
    6e90:	90c00917 	ldw	r3,36(r18)
    6e94:	91400717 	ldw	r5,28(r18)
    6e98:	e009883a 	mov	r4,fp
    6e9c:	b80d883a 	mov	r6,r23
    6ea0:	183ee83a 	callr	r3
    6ea4:	1023883a 	mov	r17,r2
    6ea8:	00bfe10e 	bge	zero,r2,6e30 <__sfvwrite_r+0x254>
    6eac:	a469c83a 	sub	r20,r20,r17
    6eb0:	a0001826 	beq	r20,zero,6f14 <__sfvwrite_r+0x338>
    6eb4:	b0800217 	ldw	r2,8(r22)
    6eb8:	1445c83a 	sub	r2,r2,r17
    6ebc:	b0800215 	stw	r2,8(r22)
    6ec0:	103f7226 	beq	r2,zero,6c8c <__sfvwrite_r+0xb0>
    6ec4:	9c67c83a 	sub	r19,r19,r17
    6ec8:	bc6f883a 	add	r23,r23,r17
    6ecc:	983fe21e 	bne	r19,zero,6e58 <__sfvwrite_r+0x27c>
    6ed0:	adc00017 	ldw	r23,0(r21)
    6ed4:	acc00117 	ldw	r19,4(r21)
    6ed8:	ad400204 	addi	r21,r21,8
    6edc:	d8000015 	stw	zero,0(sp)
    6ee0:	003fdc06 	br	6e54 <__sfvwrite_r+0x278>
    6ee4:	b80b883a 	mov	r5,r23
    6ee8:	880d883a 	mov	r6,r17
    6eec:	0007e400 	call	7e40 <memmove>
    6ef0:	90c00017 	ldw	r3,0(r18)
    6ef4:	e009883a 	mov	r4,fp
    6ef8:	900b883a 	mov	r5,r18
    6efc:	1c47883a 	add	r3,r3,r17
    6f00:	90c00015 	stw	r3,0(r18)
    6f04:	00060700 	call	6070 <_fflush_r>
    6f08:	103fc91e 	bne	r2,zero,6e30 <__sfvwrite_r+0x254>
    6f0c:	a469c83a 	sub	r20,r20,r17
    6f10:	a03fe81e 	bne	r20,zero,6eb4 <__sfvwrite_r+0x2d8>
    6f14:	e009883a 	mov	r4,fp
    6f18:	900b883a 	mov	r5,r18
    6f1c:	00060700 	call	6070 <_fflush_r>
    6f20:	103fc31e 	bne	r2,zero,6e30 <__sfvwrite_r+0x254>
    6f24:	d8000015 	stw	zero,0(sp)
    6f28:	003fe206 	br	6eb4 <__sfvwrite_r+0x2d8>
    6f2c:	91000017 	ldw	r4,0(r18)
    6f30:	90800417 	ldw	r2,16(r18)
    6f34:	1100022e 	bgeu	r2,r4,6f40 <__sfvwrite_r+0x364>
    6f38:	8023883a 	mov	r17,r16
    6f3c:	85003136 	bltu	r16,r20,7004 <__sfvwrite_r+0x428>
    6f40:	91c00517 	ldw	r7,20(r18)
    6f44:	a1c01836 	bltu	r20,r7,6fa8 <__sfvwrite_r+0x3cc>
    6f48:	90c00917 	ldw	r3,36(r18)
    6f4c:	91400717 	ldw	r5,28(r18)
    6f50:	e009883a 	mov	r4,fp
    6f54:	b80d883a 	mov	r6,r23
    6f58:	183ee83a 	callr	r3
    6f5c:	1021883a 	mov	r16,r2
    6f60:	00bfb30e 	bge	zero,r2,6e30 <__sfvwrite_r+0x254>
    6f64:	1023883a 	mov	r17,r2
    6f68:	1027883a 	mov	r19,r2
    6f6c:	003f9b06 	br	6ddc <__sfvwrite_r+0x200>
    6f70:	b80b883a 	mov	r5,r23
    6f74:	800d883a 	mov	r6,r16
    6f78:	0007e400 	call	7e40 <memmove>
    6f7c:	90c00217 	ldw	r3,8(r18)
    6f80:	90800017 	ldw	r2,0(r18)
    6f84:	8023883a 	mov	r17,r16
    6f88:	1c07c83a 	sub	r3,r3,r16
    6f8c:	1405883a 	add	r2,r2,r16
    6f90:	90c00215 	stw	r3,8(r18)
    6f94:	90800015 	stw	r2,0(r18)
    6f98:	003fc406 	br	6eac <__sfvwrite_r+0x2d0>
    6f9c:	a00d883a 	mov	r6,r20
    6fa0:	a021883a 	mov	r16,r20
    6fa4:	003f8106 	br	6dac <__sfvwrite_r+0x1d0>
    6fa8:	b80b883a 	mov	r5,r23
    6fac:	a00d883a 	mov	r6,r20
    6fb0:	0007e400 	call	7e40 <memmove>
    6fb4:	90c00217 	ldw	r3,8(r18)
    6fb8:	90800017 	ldw	r2,0(r18)
    6fbc:	a021883a 	mov	r16,r20
    6fc0:	1d07c83a 	sub	r3,r3,r20
    6fc4:	1505883a 	add	r2,r2,r20
    6fc8:	a023883a 	mov	r17,r20
    6fcc:	a027883a 	mov	r19,r20
    6fd0:	90c00215 	stw	r3,8(r18)
    6fd4:	90800015 	stw	r2,0(r18)
    6fd8:	003f8006 	br	6ddc <__sfvwrite_r+0x200>
    6fdc:	b809883a 	mov	r4,r23
    6fe0:	01400284 	movi	r5,10
    6fe4:	980d883a 	mov	r6,r19
    6fe8:	0007cbc0 	call	7cbc <memchr>
    6fec:	10001726 	beq	r2,zero,704c <__sfvwrite_r+0x470>
    6ff0:	15c5c83a 	sub	r2,r2,r23
    6ff4:	15000044 	addi	r20,r2,1
    6ff8:	00800044 	movi	r2,1
    6ffc:	d8800015 	stw	r2,0(sp)
    7000:	003f9806 	br	6e64 <__sfvwrite_r+0x288>
    7004:	b80b883a 	mov	r5,r23
    7008:	800d883a 	mov	r6,r16
    700c:	0007e400 	call	7e40 <memmove>
    7010:	90c00017 	ldw	r3,0(r18)
    7014:	e009883a 	mov	r4,fp
    7018:	900b883a 	mov	r5,r18
    701c:	1c07883a 	add	r3,r3,r16
    7020:	90c00015 	stw	r3,0(r18)
    7024:	8027883a 	mov	r19,r16
    7028:	00060700 	call	6070 <_fflush_r>
    702c:	103f6b26 	beq	r2,zero,6ddc <__sfvwrite_r+0x200>
    7030:	003f7f06 	br	6e30 <__sfvwrite_r+0x254>
    7034:	400b883a 	mov	r5,r8
    7038:	e009883a 	mov	r4,fp
    703c:	0008fac0 	call	8fac <_realloc_r>
    7040:	103f7626 	beq	r2,zero,6e1c <__sfvwrite_r+0x240>
    7044:	1023883a 	mov	r17,r2
    7048:	003f5006 	br	6d8c <__sfvwrite_r+0x1b0>
    704c:	00c00044 	movi	r3,1
    7050:	9d000044 	addi	r20,r19,1
    7054:	d8c00015 	stw	r3,0(sp)
    7058:	003f8206 	br	6e64 <__sfvwrite_r+0x288>
    705c:	9080030b 	ldhu	r2,12(r18)
    7060:	00c00244 	movi	r3,9
    7064:	013fffc4 	movi	r4,-1
    7068:	10801014 	ori	r2,r2,64
    706c:	9080030d 	sth	r2,12(r18)
    7070:	e0c00015 	stw	r3,0(fp)
    7074:	003f0606 	br	6c90 <__sfvwrite_r+0xb4>

00007078 <_fwalk_reent>:
    7078:	defff704 	addi	sp,sp,-36
    707c:	dcc00315 	stw	r19,12(sp)
    7080:	24c0b804 	addi	r19,r4,736
    7084:	dd800615 	stw	r22,24(sp)
    7088:	dd400515 	stw	r21,20(sp)
    708c:	dfc00815 	stw	ra,32(sp)
    7090:	ddc00715 	stw	r23,28(sp)
    7094:	dd000415 	stw	r20,16(sp)
    7098:	dc800215 	stw	r18,8(sp)
    709c:	dc400115 	stw	r17,4(sp)
    70a0:	dc000015 	stw	r16,0(sp)
    70a4:	202b883a 	mov	r21,r4
    70a8:	282d883a 	mov	r22,r5
    70ac:	00062f80 	call	62f8 <__sfp_lock_acquire>
    70b0:	98002126 	beq	r19,zero,7138 <_fwalk_reent+0xc0>
    70b4:	002f883a 	mov	r23,zero
    70b8:	9c800117 	ldw	r18,4(r19)
    70bc:	9c000217 	ldw	r16,8(r19)
    70c0:	90bfffc4 	addi	r2,r18,-1
    70c4:	10000d16 	blt	r2,zero,70fc <_fwalk_reent+0x84>
    70c8:	0023883a 	mov	r17,zero
    70cc:	053fffc4 	movi	r20,-1
    70d0:	8080030f 	ldh	r2,12(r16)
    70d4:	8c400044 	addi	r17,r17,1
    70d8:	10000626 	beq	r2,zero,70f4 <_fwalk_reent+0x7c>
    70dc:	8080038f 	ldh	r2,14(r16)
    70e0:	800b883a 	mov	r5,r16
    70e4:	a809883a 	mov	r4,r21
    70e8:	15000226 	beq	r2,r20,70f4 <_fwalk_reent+0x7c>
    70ec:	b03ee83a 	callr	r22
    70f0:	b8aeb03a 	or	r23,r23,r2
    70f4:	84001704 	addi	r16,r16,92
    70f8:	947ff51e 	bne	r18,r17,70d0 <_fwalk_reent+0x58>
    70fc:	9cc00017 	ldw	r19,0(r19)
    7100:	983fed1e 	bne	r19,zero,70b8 <_fwalk_reent+0x40>
    7104:	00062fc0 	call	62fc <__sfp_lock_release>
    7108:	b805883a 	mov	r2,r23
    710c:	dfc00817 	ldw	ra,32(sp)
    7110:	ddc00717 	ldw	r23,28(sp)
    7114:	dd800617 	ldw	r22,24(sp)
    7118:	dd400517 	ldw	r21,20(sp)
    711c:	dd000417 	ldw	r20,16(sp)
    7120:	dcc00317 	ldw	r19,12(sp)
    7124:	dc800217 	ldw	r18,8(sp)
    7128:	dc400117 	ldw	r17,4(sp)
    712c:	dc000017 	ldw	r16,0(sp)
    7130:	dec00904 	addi	sp,sp,36
    7134:	f800283a 	ret
    7138:	002f883a 	mov	r23,zero
    713c:	003ff106 	br	7104 <_fwalk_reent+0x8c>

00007140 <_fwalk>:
    7140:	defff804 	addi	sp,sp,-32
    7144:	dcc00315 	stw	r19,12(sp)
    7148:	24c0b804 	addi	r19,r4,736
    714c:	dd400515 	stw	r21,20(sp)
    7150:	dfc00715 	stw	ra,28(sp)
    7154:	dd800615 	stw	r22,24(sp)
    7158:	dd000415 	stw	r20,16(sp)
    715c:	dc800215 	stw	r18,8(sp)
    7160:	dc400115 	stw	r17,4(sp)
    7164:	dc000015 	stw	r16,0(sp)
    7168:	282b883a 	mov	r21,r5
    716c:	00062f80 	call	62f8 <__sfp_lock_acquire>
    7170:	98001f26 	beq	r19,zero,71f0 <_fwalk+0xb0>
    7174:	002d883a 	mov	r22,zero
    7178:	9c800117 	ldw	r18,4(r19)
    717c:	9c000217 	ldw	r16,8(r19)
    7180:	90bfffc4 	addi	r2,r18,-1
    7184:	10000c16 	blt	r2,zero,71b8 <_fwalk+0x78>
    7188:	0023883a 	mov	r17,zero
    718c:	053fffc4 	movi	r20,-1
    7190:	8080030f 	ldh	r2,12(r16)
    7194:	8c400044 	addi	r17,r17,1
    7198:	10000526 	beq	r2,zero,71b0 <_fwalk+0x70>
    719c:	8080038f 	ldh	r2,14(r16)
    71a0:	8009883a 	mov	r4,r16
    71a4:	15000226 	beq	r2,r20,71b0 <_fwalk+0x70>
    71a8:	a83ee83a 	callr	r21
    71ac:	b0acb03a 	or	r22,r22,r2
    71b0:	84001704 	addi	r16,r16,92
    71b4:	947ff61e 	bne	r18,r17,7190 <_fwalk+0x50>
    71b8:	9cc00017 	ldw	r19,0(r19)
    71bc:	983fee1e 	bne	r19,zero,7178 <_fwalk+0x38>
    71c0:	00062fc0 	call	62fc <__sfp_lock_release>
    71c4:	b005883a 	mov	r2,r22
    71c8:	dfc00717 	ldw	ra,28(sp)
    71cc:	dd800617 	ldw	r22,24(sp)
    71d0:	dd400517 	ldw	r21,20(sp)
    71d4:	dd000417 	ldw	r20,16(sp)
    71d8:	dcc00317 	ldw	r19,12(sp)
    71dc:	dc800217 	ldw	r18,8(sp)
    71e0:	dc400117 	ldw	r17,4(sp)
    71e4:	dc000017 	ldw	r16,0(sp)
    71e8:	dec00804 	addi	sp,sp,32
    71ec:	f800283a 	ret
    71f0:	002d883a 	mov	r22,zero
    71f4:	003ff206 	br	71c0 <_fwalk+0x80>

000071f8 <iswspace>:
    71f8:	00803fc4 	movi	r2,255
    71fc:	0007883a 	mov	r3,zero
    7200:	11000636 	bltu	r2,r4,721c <iswspace+0x24>
    7204:	00800074 	movhi	r2,1
    7208:	1090f804 	addi	r2,r2,17376
    720c:	10c00017 	ldw	r3,0(r2)
    7210:	1907883a 	add	r3,r3,r4
    7214:	18800003 	ldbu	r2,0(r3)
    7218:	10c0020c 	andi	r3,r2,8
    721c:	1805883a 	mov	r2,r3
    7220:	f800283a 	ret

00007224 <__locale_charset>:
    7224:	d0a00417 	ldw	r2,-32752(gp)
    7228:	f800283a 	ret

0000722c <_localeconv_r>:
    722c:	00800074 	movhi	r2,1
    7230:	10895e04 	addi	r2,r2,9592
    7234:	f800283a 	ret

00007238 <localeconv>:
    7238:	00800074 	movhi	r2,1
    723c:	1090f904 	addi	r2,r2,17380
    7240:	11000017 	ldw	r4,0(r2)
    7244:	000722c1 	jmpi	722c <_localeconv_r>

00007248 <_setlocale_r>:
    7248:	defffc04 	addi	sp,sp,-16
    724c:	00c00074 	movhi	r3,1
    7250:	18c95904 	addi	r3,r3,9572
    7254:	dc800215 	stw	r18,8(sp)
    7258:	dc400115 	stw	r17,4(sp)
    725c:	dc000015 	stw	r16,0(sp)
    7260:	2023883a 	mov	r17,r4
    7264:	2825883a 	mov	r18,r5
    7268:	dfc00315 	stw	ra,12(sp)
    726c:	3021883a 	mov	r16,r6
    7270:	3009883a 	mov	r4,r6
    7274:	180b883a 	mov	r5,r3
    7278:	30000926 	beq	r6,zero,72a0 <_setlocale_r+0x58>
    727c:	0009b480 	call	9b48 <strcmp>
    7280:	8009883a 	mov	r4,r16
    7284:	01400074 	movhi	r5,1
    7288:	29482204 	addi	r5,r5,8328
    728c:	10000b1e 	bne	r2,zero,72bc <_setlocale_r+0x74>
    7290:	8c000d15 	stw	r16,52(r17)
    7294:	8c800c15 	stw	r18,48(r17)
    7298:	00c00074 	movhi	r3,1
    729c:	18c95904 	addi	r3,r3,9572
    72a0:	1805883a 	mov	r2,r3
    72a4:	dfc00317 	ldw	ra,12(sp)
    72a8:	dc800217 	ldw	r18,8(sp)
    72ac:	dc400117 	ldw	r17,4(sp)
    72b0:	dc000017 	ldw	r16,0(sp)
    72b4:	dec00404 	addi	sp,sp,16
    72b8:	f800283a 	ret
    72bc:	0009b480 	call	9b48 <strcmp>
    72c0:	0007883a 	mov	r3,zero
    72c4:	103ff226 	beq	r2,zero,7290 <_setlocale_r+0x48>
    72c8:	003ff506 	br	72a0 <_setlocale_r+0x58>

000072cc <setlocale>:
    72cc:	01800074 	movhi	r6,1
    72d0:	3190f904 	addi	r6,r6,17380
    72d4:	2007883a 	mov	r3,r4
    72d8:	31000017 	ldw	r4,0(r6)
    72dc:	280d883a 	mov	r6,r5
    72e0:	180b883a 	mov	r5,r3
    72e4:	00072481 	jmpi	7248 <_setlocale_r>

000072e8 <__smakebuf_r>:
    72e8:	2880030b 	ldhu	r2,12(r5)
    72ec:	deffed04 	addi	sp,sp,-76
    72f0:	dc401015 	stw	r17,64(sp)
    72f4:	1080008c 	andi	r2,r2,2
    72f8:	dc000f15 	stw	r16,60(sp)
    72fc:	dfc01215 	stw	ra,72(sp)
    7300:	dc801115 	stw	r18,68(sp)
    7304:	2821883a 	mov	r16,r5
    7308:	2023883a 	mov	r17,r4
    730c:	10000b26 	beq	r2,zero,733c <__smakebuf_r+0x54>
    7310:	28c010c4 	addi	r3,r5,67
    7314:	00800044 	movi	r2,1
    7318:	28800515 	stw	r2,20(r5)
    731c:	28c00415 	stw	r3,16(r5)
    7320:	28c00015 	stw	r3,0(r5)
    7324:	dfc01217 	ldw	ra,72(sp)
    7328:	dc801117 	ldw	r18,68(sp)
    732c:	dc401017 	ldw	r17,64(sp)
    7330:	dc000f17 	ldw	r16,60(sp)
    7334:	dec01304 	addi	sp,sp,76
    7338:	f800283a 	ret
    733c:	2940038f 	ldh	r5,14(r5)
    7340:	28002116 	blt	r5,zero,73c8 <__smakebuf_r+0xe0>
    7344:	d80d883a 	mov	r6,sp
    7348:	000c2fc0 	call	c2fc <_fstat_r>
    734c:	10001e16 	blt	r2,zero,73c8 <__smakebuf_r+0xe0>
    7350:	d8800117 	ldw	r2,4(sp)
    7354:	00e00014 	movui	r3,32768
    7358:	113c000c 	andi	r4,r2,61440
    735c:	20c03126 	beq	r4,r3,7424 <__smakebuf_r+0x13c>
    7360:	8080030b 	ldhu	r2,12(r16)
    7364:	00c80004 	movi	r3,8192
    7368:	10820014 	ori	r2,r2,2048
    736c:	8080030d 	sth	r2,12(r16)
    7370:	20c01e26 	beq	r4,r3,73ec <__smakebuf_r+0x104>
    7374:	04810004 	movi	r18,1024
    7378:	8809883a 	mov	r4,r17
    737c:	900b883a 	mov	r5,r18
    7380:	000747c0 	call	747c <_malloc_r>
    7384:	1009883a 	mov	r4,r2
    7388:	10003126 	beq	r2,zero,7450 <__smakebuf_r+0x168>
    738c:	80c0030b 	ldhu	r3,12(r16)
    7390:	00800034 	movhi	r2,0
    7394:	1098fb04 	addi	r2,r2,25580
    7398:	88800f15 	stw	r2,60(r17)
    739c:	18c02014 	ori	r3,r3,128
    73a0:	84800515 	stw	r18,20(r16)
    73a4:	80c0030d 	sth	r3,12(r16)
    73a8:	81000415 	stw	r4,16(r16)
    73ac:	81000015 	stw	r4,0(r16)
    73b0:	dfc01217 	ldw	ra,72(sp)
    73b4:	dc801117 	ldw	r18,68(sp)
    73b8:	dc401017 	ldw	r17,64(sp)
    73bc:	dc000f17 	ldw	r16,60(sp)
    73c0:	dec01304 	addi	sp,sp,76
    73c4:	f800283a 	ret
    73c8:	80c0030b 	ldhu	r3,12(r16)
    73cc:	1880200c 	andi	r2,r3,128
    73d0:	10000426 	beq	r2,zero,73e4 <__smakebuf_r+0xfc>
    73d4:	04801004 	movi	r18,64
    73d8:	18820014 	ori	r2,r3,2048
    73dc:	8080030d 	sth	r2,12(r16)
    73e0:	003fe506 	br	7378 <__smakebuf_r+0x90>
    73e4:	04810004 	movi	r18,1024
    73e8:	003ffb06 	br	73d8 <__smakebuf_r+0xf0>
    73ec:	8140038f 	ldh	r5,14(r16)
    73f0:	8809883a 	mov	r4,r17
    73f4:	000cef80 	call	cef8 <_isatty_r>
    73f8:	103fde26 	beq	r2,zero,7374 <__smakebuf_r+0x8c>
    73fc:	8080030b 	ldhu	r2,12(r16)
    7400:	80c010c4 	addi	r3,r16,67
    7404:	04810004 	movi	r18,1024
    7408:	10800054 	ori	r2,r2,1
    740c:	8080030d 	sth	r2,12(r16)
    7410:	00800044 	movi	r2,1
    7414:	80c00415 	stw	r3,16(r16)
    7418:	80800515 	stw	r2,20(r16)
    741c:	80c00015 	stw	r3,0(r16)
    7420:	003fd506 	br	7378 <__smakebuf_r+0x90>
    7424:	80c00a17 	ldw	r3,40(r16)
    7428:	00800074 	movhi	r2,1
    742c:	10a68104 	addi	r2,r2,-26108
    7430:	18bfcb1e 	bne	r3,r2,7360 <__smakebuf_r+0x78>
    7434:	8080030b 	ldhu	r2,12(r16)
    7438:	00c10004 	movi	r3,1024
    743c:	1825883a 	mov	r18,r3
    7440:	10c4b03a 	or	r2,r2,r3
    7444:	8080030d 	sth	r2,12(r16)
    7448:	80c01315 	stw	r3,76(r16)
    744c:	003fca06 	br	7378 <__smakebuf_r+0x90>
    7450:	8100030b 	ldhu	r4,12(r16)
    7454:	2080800c 	andi	r2,r4,512
    7458:	103fb21e 	bne	r2,zero,7324 <__smakebuf_r+0x3c>
    745c:	80c010c4 	addi	r3,r16,67
    7460:	21000094 	ori	r4,r4,2
    7464:	00800044 	movi	r2,1
    7468:	80800515 	stw	r2,20(r16)
    746c:	8100030d 	sth	r4,12(r16)
    7470:	80c00415 	stw	r3,16(r16)
    7474:	80c00015 	stw	r3,0(r16)
    7478:	003faa06 	br	7324 <__smakebuf_r+0x3c>

0000747c <_malloc_r>:
    747c:	defff604 	addi	sp,sp,-40
    7480:	28c002c4 	addi	r3,r5,11
    7484:	00800584 	movi	r2,22
    7488:	dc800215 	stw	r18,8(sp)
    748c:	dfc00915 	stw	ra,36(sp)
    7490:	df000815 	stw	fp,32(sp)
    7494:	ddc00715 	stw	r23,28(sp)
    7498:	dd800615 	stw	r22,24(sp)
    749c:	dd400515 	stw	r21,20(sp)
    74a0:	dd000415 	stw	r20,16(sp)
    74a4:	dcc00315 	stw	r19,12(sp)
    74a8:	dc400115 	stw	r17,4(sp)
    74ac:	dc000015 	stw	r16,0(sp)
    74b0:	2025883a 	mov	r18,r4
    74b4:	10c01236 	bltu	r2,r3,7500 <_malloc_r+0x84>
    74b8:	04400404 	movi	r17,16
    74bc:	8940142e 	bgeu	r17,r5,7510 <_malloc_r+0x94>
    74c0:	00800304 	movi	r2,12
    74c4:	0007883a 	mov	r3,zero
    74c8:	90800015 	stw	r2,0(r18)
    74cc:	1805883a 	mov	r2,r3
    74d0:	dfc00917 	ldw	ra,36(sp)
    74d4:	df000817 	ldw	fp,32(sp)
    74d8:	ddc00717 	ldw	r23,28(sp)
    74dc:	dd800617 	ldw	r22,24(sp)
    74e0:	dd400517 	ldw	r21,20(sp)
    74e4:	dd000417 	ldw	r20,16(sp)
    74e8:	dcc00317 	ldw	r19,12(sp)
    74ec:	dc800217 	ldw	r18,8(sp)
    74f0:	dc400117 	ldw	r17,4(sp)
    74f4:	dc000017 	ldw	r16,0(sp)
    74f8:	dec00a04 	addi	sp,sp,40
    74fc:	f800283a 	ret
    7500:	00bffe04 	movi	r2,-8
    7504:	18a2703a 	and	r17,r3,r2
    7508:	883fed16 	blt	r17,zero,74c0 <_malloc_r+0x44>
    750c:	897fec36 	bltu	r17,r5,74c0 <_malloc_r+0x44>
    7510:	9009883a 	mov	r4,r18
    7514:	000f7440 	call	f744 <__malloc_lock>
    7518:	00807dc4 	movi	r2,503
    751c:	14402b2e 	bgeu	r2,r17,75cc <_malloc_r+0x150>
    7520:	8806d27a 	srli	r3,r17,9
    7524:	18003f1e 	bne	r3,zero,7624 <_malloc_r+0x1a8>
    7528:	880cd0fa 	srli	r6,r17,3
    752c:	300490fa 	slli	r2,r6,3
    7530:	02c00074 	movhi	r11,1
    7534:	5acb0004 	addi	r11,r11,11264
    7538:	12cb883a 	add	r5,r2,r11
    753c:	2c000317 	ldw	r16,12(r5)
    7540:	580f883a 	mov	r7,r11
    7544:	2c00041e 	bne	r5,r16,7558 <_malloc_r+0xdc>
    7548:	00000a06 	br	7574 <_malloc_r+0xf8>
    754c:	1800860e 	bge	r3,zero,7768 <_malloc_r+0x2ec>
    7550:	84000317 	ldw	r16,12(r16)
    7554:	2c000726 	beq	r5,r16,7574 <_malloc_r+0xf8>
    7558:	80800117 	ldw	r2,4(r16)
    755c:	00ffff04 	movi	r3,-4
    7560:	10c8703a 	and	r4,r2,r3
    7564:	2447c83a 	sub	r3,r4,r17
    7568:	008003c4 	movi	r2,15
    756c:	10fff70e 	bge	r2,r3,754c <_malloc_r+0xd0>
    7570:	31bfffc4 	addi	r6,r6,-1
    7574:	32400044 	addi	r9,r6,1
    7578:	02800074 	movhi	r10,1
    757c:	528b0204 	addi	r10,r10,11272
    7580:	54000217 	ldw	r16,8(r10)
    7584:	8280a026 	beq	r16,r10,7808 <_malloc_r+0x38c>
    7588:	80800117 	ldw	r2,4(r16)
    758c:	00ffff04 	movi	r3,-4
    7590:	10ca703a 	and	r5,r2,r3
    7594:	2c4dc83a 	sub	r6,r5,r17
    7598:	008003c4 	movi	r2,15
    759c:	11808316 	blt	r2,r6,77ac <_malloc_r+0x330>
    75a0:	52800315 	stw	r10,12(r10)
    75a4:	52800215 	stw	r10,8(r10)
    75a8:	30002916 	blt	r6,zero,7650 <_malloc_r+0x1d4>
    75ac:	8147883a 	add	r3,r16,r5
    75b0:	18800117 	ldw	r2,4(r3)
    75b4:	9009883a 	mov	r4,r18
    75b8:	10800054 	ori	r2,r2,1
    75bc:	18800115 	stw	r2,4(r3)
    75c0:	000f7480 	call	f748 <__malloc_unlock>
    75c4:	80c00204 	addi	r3,r16,8
    75c8:	003fc006 	br	74cc <_malloc_r+0x50>
    75cc:	02c00074 	movhi	r11,1
    75d0:	5acb0004 	addi	r11,r11,11264
    75d4:	8ac5883a 	add	r2,r17,r11
    75d8:	14000317 	ldw	r16,12(r2)
    75dc:	580f883a 	mov	r7,r11
    75e0:	8806d0fa 	srli	r3,r17,3
    75e4:	14006c26 	beq	r2,r16,7798 <_malloc_r+0x31c>
    75e8:	80c00117 	ldw	r3,4(r16)
    75ec:	00bfff04 	movi	r2,-4
    75f0:	81800317 	ldw	r6,12(r16)
    75f4:	1886703a 	and	r3,r3,r2
    75f8:	80c7883a 	add	r3,r16,r3
    75fc:	18800117 	ldw	r2,4(r3)
    7600:	81400217 	ldw	r5,8(r16)
    7604:	9009883a 	mov	r4,r18
    7608:	10800054 	ori	r2,r2,1
    760c:	18800115 	stw	r2,4(r3)
    7610:	31400215 	stw	r5,8(r6)
    7614:	29800315 	stw	r6,12(r5)
    7618:	000f7480 	call	f748 <__malloc_unlock>
    761c:	80c00204 	addi	r3,r16,8
    7620:	003faa06 	br	74cc <_malloc_r+0x50>
    7624:	00800104 	movi	r2,4
    7628:	10c0052e 	bgeu	r2,r3,7640 <_malloc_r+0x1c4>
    762c:	00800504 	movi	r2,20
    7630:	10c07836 	bltu	r2,r3,7814 <_malloc_r+0x398>
    7634:	198016c4 	addi	r6,r3,91
    7638:	300490fa 	slli	r2,r6,3
    763c:	003fbc06 	br	7530 <_malloc_r+0xb4>
    7640:	8804d1ba 	srli	r2,r17,6
    7644:	11800e04 	addi	r6,r2,56
    7648:	300490fa 	slli	r2,r6,3
    764c:	003fb806 	br	7530 <_malloc_r+0xb4>
    7650:	00807fc4 	movi	r2,511
    7654:	1140bb36 	bltu	r2,r5,7944 <_malloc_r+0x4c8>
    7658:	2806d0fa 	srli	r3,r5,3
    765c:	573ffe04 	addi	fp,r10,-8
    7660:	00800044 	movi	r2,1
    7664:	180890fa 	slli	r4,r3,3
    7668:	1807d0ba 	srai	r3,r3,2
    766c:	e1c00117 	ldw	r7,4(fp)
    7670:	5909883a 	add	r4,r11,r4
    7674:	21400217 	ldw	r5,8(r4)
    7678:	10c4983a 	sll	r2,r2,r3
    767c:	81000315 	stw	r4,12(r16)
    7680:	81400215 	stw	r5,8(r16)
    7684:	388eb03a 	or	r7,r7,r2
    7688:	2c000315 	stw	r16,12(r5)
    768c:	24000215 	stw	r16,8(r4)
    7690:	e1c00115 	stw	r7,4(fp)
    7694:	4807883a 	mov	r3,r9
    7698:	4800cd16 	blt	r9,zero,79d0 <_malloc_r+0x554>
    769c:	1807d0ba 	srai	r3,r3,2
    76a0:	00800044 	movi	r2,1
    76a4:	10c8983a 	sll	r4,r2,r3
    76a8:	39004436 	bltu	r7,r4,77bc <_malloc_r+0x340>
    76ac:	21c4703a 	and	r2,r4,r7
    76b0:	10000a1e 	bne	r2,zero,76dc <_malloc_r+0x260>
    76b4:	2109883a 	add	r4,r4,r4
    76b8:	00bfff04 	movi	r2,-4
    76bc:	4884703a 	and	r2,r9,r2
    76c0:	3906703a 	and	r3,r7,r4
    76c4:	12400104 	addi	r9,r2,4
    76c8:	1800041e 	bne	r3,zero,76dc <_malloc_r+0x260>
    76cc:	2109883a 	add	r4,r4,r4
    76d0:	3904703a 	and	r2,r7,r4
    76d4:	4a400104 	addi	r9,r9,4
    76d8:	103ffc26 	beq	r2,zero,76cc <_malloc_r+0x250>
    76dc:	480490fa 	slli	r2,r9,3
    76e0:	4819883a 	mov	r12,r9
    76e4:	023fff04 	movi	r8,-4
    76e8:	589b883a 	add	r13,r11,r2
    76ec:	6807883a 	mov	r3,r13
    76f0:	014003c4 	movi	r5,15
    76f4:	1c000317 	ldw	r16,12(r3)
    76f8:	1c00041e 	bne	r3,r16,770c <_malloc_r+0x290>
    76fc:	0000a706 	br	799c <_malloc_r+0x520>
    7700:	3000ab0e 	bge	r6,zero,79b0 <_malloc_r+0x534>
    7704:	84000317 	ldw	r16,12(r16)
    7708:	1c00a426 	beq	r3,r16,799c <_malloc_r+0x520>
    770c:	80800117 	ldw	r2,4(r16)
    7710:	1204703a 	and	r2,r2,r8
    7714:	144dc83a 	sub	r6,r2,r17
    7718:	29bff90e 	bge	r5,r6,7700 <_malloc_r+0x284>
    771c:	81000317 	ldw	r4,12(r16)
    7720:	80c00217 	ldw	r3,8(r16)
    7724:	89400054 	ori	r5,r17,1
    7728:	8445883a 	add	r2,r16,r17
    772c:	20c00215 	stw	r3,8(r4)
    7730:	19000315 	stw	r4,12(r3)
    7734:	81400115 	stw	r5,4(r16)
    7738:	1187883a 	add	r3,r2,r6
    773c:	31000054 	ori	r4,r6,1
    7740:	50800315 	stw	r2,12(r10)
    7744:	50800215 	stw	r2,8(r10)
    7748:	19800015 	stw	r6,0(r3)
    774c:	11000115 	stw	r4,4(r2)
    7750:	12800215 	stw	r10,8(r2)
    7754:	12800315 	stw	r10,12(r2)
    7758:	9009883a 	mov	r4,r18
    775c:	000f7480 	call	f748 <__malloc_unlock>
    7760:	80c00204 	addi	r3,r16,8
    7764:	003f5906 	br	74cc <_malloc_r+0x50>
    7768:	8109883a 	add	r4,r16,r4
    776c:	20800117 	ldw	r2,4(r4)
    7770:	80c00217 	ldw	r3,8(r16)
    7774:	81400317 	ldw	r5,12(r16)
    7778:	10800054 	ori	r2,r2,1
    777c:	20800115 	stw	r2,4(r4)
    7780:	28c00215 	stw	r3,8(r5)
    7784:	19400315 	stw	r5,12(r3)
    7788:	9009883a 	mov	r4,r18
    778c:	000f7480 	call	f748 <__malloc_unlock>
    7790:	80c00204 	addi	r3,r16,8
    7794:	003f4d06 	br	74cc <_malloc_r+0x50>
    7798:	80800204 	addi	r2,r16,8
    779c:	14000317 	ldw	r16,12(r2)
    77a0:	143f911e 	bne	r2,r16,75e8 <_malloc_r+0x16c>
    77a4:	1a400084 	addi	r9,r3,2
    77a8:	003f7306 	br	7578 <_malloc_r+0xfc>
    77ac:	88c00054 	ori	r3,r17,1
    77b0:	8445883a 	add	r2,r16,r17
    77b4:	80c00115 	stw	r3,4(r16)
    77b8:	003fdf06 	br	7738 <_malloc_r+0x2bc>
    77bc:	e4000217 	ldw	r16,8(fp)
    77c0:	00bfff04 	movi	r2,-4
    77c4:	80c00117 	ldw	r3,4(r16)
    77c8:	802d883a 	mov	r22,r16
    77cc:	18aa703a 	and	r21,r3,r2
    77d0:	ac401636 	bltu	r21,r17,782c <_malloc_r+0x3b0>
    77d4:	ac49c83a 	sub	r4,r21,r17
    77d8:	008003c4 	movi	r2,15
    77dc:	1100130e 	bge	r2,r4,782c <_malloc_r+0x3b0>
    77e0:	88800054 	ori	r2,r17,1
    77e4:	8447883a 	add	r3,r16,r17
    77e8:	80800115 	stw	r2,4(r16)
    77ec:	20800054 	ori	r2,r4,1
    77f0:	18800115 	stw	r2,4(r3)
    77f4:	e0c00215 	stw	r3,8(fp)
    77f8:	9009883a 	mov	r4,r18
    77fc:	000f7480 	call	f748 <__malloc_unlock>
    7800:	80c00204 	addi	r3,r16,8
    7804:	003f3106 	br	74cc <_malloc_r+0x50>
    7808:	39c00117 	ldw	r7,4(r7)
    780c:	573ffe04 	addi	fp,r10,-8
    7810:	003fa006 	br	7694 <_malloc_r+0x218>
    7814:	00801504 	movi	r2,84
    7818:	10c06736 	bltu	r2,r3,79b8 <_malloc_r+0x53c>
    781c:	8804d33a 	srli	r2,r17,12
    7820:	11801b84 	addi	r6,r2,110
    7824:	300490fa 	slli	r2,r6,3
    7828:	003f4106 	br	7530 <_malloc_r+0xb4>
    782c:	d0a72017 	ldw	r2,-25472(gp)
    7830:	d0e00617 	ldw	r3,-32744(gp)
    7834:	053fffc4 	movi	r20,-1
    7838:	10800404 	addi	r2,r2,16
    783c:	88a7883a 	add	r19,r17,r2
    7840:	1d000326 	beq	r3,r20,7850 <_malloc_r+0x3d4>
    7844:	98c3ffc4 	addi	r3,r19,4095
    7848:	00bc0004 	movi	r2,-4096
    784c:	18a6703a 	and	r19,r3,r2
    7850:	9009883a 	mov	r4,r18
    7854:	980b883a 	mov	r5,r19
    7858:	00097f00 	call	97f0 <_sbrk_r>
    785c:	1009883a 	mov	r4,r2
    7860:	15000426 	beq	r2,r20,7874 <_malloc_r+0x3f8>
    7864:	854b883a 	add	r5,r16,r21
    7868:	1029883a 	mov	r20,r2
    786c:	11405a2e 	bgeu	r2,r5,79d8 <_malloc_r+0x55c>
    7870:	87000c26 	beq	r16,fp,78a4 <_malloc_r+0x428>
    7874:	e4000217 	ldw	r16,8(fp)
    7878:	80c00117 	ldw	r3,4(r16)
    787c:	00bfff04 	movi	r2,-4
    7880:	1884703a 	and	r2,r3,r2
    7884:	14400336 	bltu	r2,r17,7894 <_malloc_r+0x418>
    7888:	1449c83a 	sub	r4,r2,r17
    788c:	008003c4 	movi	r2,15
    7890:	113fd316 	blt	r2,r4,77e0 <_malloc_r+0x364>
    7894:	9009883a 	mov	r4,r18
    7898:	000f7480 	call	f748 <__malloc_unlock>
    789c:	0007883a 	mov	r3,zero
    78a0:	003f0a06 	br	74cc <_malloc_r+0x50>
    78a4:	05c00074 	movhi	r23,1
    78a8:	bdd82204 	addi	r23,r23,24712
    78ac:	b8800017 	ldw	r2,0(r23)
    78b0:	988d883a 	add	r6,r19,r2
    78b4:	b9800015 	stw	r6,0(r23)
    78b8:	d0e00617 	ldw	r3,-32744(gp)
    78bc:	00bfffc4 	movi	r2,-1
    78c0:	18808e26 	beq	r3,r2,7afc <_malloc_r+0x680>
    78c4:	2145c83a 	sub	r2,r4,r5
    78c8:	3085883a 	add	r2,r6,r2
    78cc:	b8800015 	stw	r2,0(r23)
    78d0:	20c001cc 	andi	r3,r4,7
    78d4:	18005f1e 	bne	r3,zero,7a54 <_malloc_r+0x5d8>
    78d8:	000b883a 	mov	r5,zero
    78dc:	a4c5883a 	add	r2,r20,r19
    78e0:	1083ffcc 	andi	r2,r2,4095
    78e4:	00c40004 	movi	r3,4096
    78e8:	1887c83a 	sub	r3,r3,r2
    78ec:	28e7883a 	add	r19,r5,r3
    78f0:	9009883a 	mov	r4,r18
    78f4:	980b883a 	mov	r5,r19
    78f8:	00097f00 	call	97f0 <_sbrk_r>
    78fc:	1007883a 	mov	r3,r2
    7900:	00bfffc4 	movi	r2,-1
    7904:	18807a26 	beq	r3,r2,7af0 <_malloc_r+0x674>
    7908:	1d05c83a 	sub	r2,r3,r20
    790c:	9885883a 	add	r2,r19,r2
    7910:	10c00054 	ori	r3,r2,1
    7914:	b8800017 	ldw	r2,0(r23)
    7918:	a021883a 	mov	r16,r20
    791c:	a0c00115 	stw	r3,4(r20)
    7920:	9885883a 	add	r2,r19,r2
    7924:	b8800015 	stw	r2,0(r23)
    7928:	e5000215 	stw	r20,8(fp)
    792c:	b7003626 	beq	r22,fp,7a08 <_malloc_r+0x58c>
    7930:	018003c4 	movi	r6,15
    7934:	35404b36 	bltu	r6,r21,7a64 <_malloc_r+0x5e8>
    7938:	00800044 	movi	r2,1
    793c:	a0800115 	stw	r2,4(r20)
    7940:	003fcd06 	br	7878 <_malloc_r+0x3fc>
    7944:	2808d27a 	srli	r4,r5,9
    7948:	2000371e 	bne	r4,zero,7a28 <_malloc_r+0x5ac>
    794c:	2808d0fa 	srli	r4,r5,3
    7950:	200690fa 	slli	r3,r4,3
    7954:	1ad1883a 	add	r8,r3,r11
    7958:	41800217 	ldw	r6,8(r8)
    795c:	41805b26 	beq	r8,r6,7acc <_malloc_r+0x650>
    7960:	30800117 	ldw	r2,4(r6)
    7964:	00ffff04 	movi	r3,-4
    7968:	10c4703a 	and	r2,r2,r3
    796c:	2880022e 	bgeu	r5,r2,7978 <_malloc_r+0x4fc>
    7970:	31800217 	ldw	r6,8(r6)
    7974:	41bffa1e 	bne	r8,r6,7960 <_malloc_r+0x4e4>
    7978:	32000317 	ldw	r8,12(r6)
    797c:	39c00117 	ldw	r7,4(r7)
    7980:	82000315 	stw	r8,12(r16)
    7984:	81800215 	stw	r6,8(r16)
    7988:	07000074 	movhi	fp,1
    798c:	e70b0004 	addi	fp,fp,11264
    7990:	34000315 	stw	r16,12(r6)
    7994:	44000215 	stw	r16,8(r8)
    7998:	003f3e06 	br	7694 <_malloc_r+0x218>
    799c:	63000044 	addi	r12,r12,1
    79a0:	608000cc 	andi	r2,r12,3
    79a4:	10005d26 	beq	r2,zero,7b1c <_malloc_r+0x6a0>
    79a8:	18c00204 	addi	r3,r3,8
    79ac:	003f5106 	br	76f4 <_malloc_r+0x278>
    79b0:	8089883a 	add	r4,r16,r2
    79b4:	003f6d06 	br	776c <_malloc_r+0x2f0>
    79b8:	00805504 	movi	r2,340
    79bc:	10c02036 	bltu	r2,r3,7a40 <_malloc_r+0x5c4>
    79c0:	8804d3fa 	srli	r2,r17,15
    79c4:	11801dc4 	addi	r6,r2,119
    79c8:	300490fa 	slli	r2,r6,3
    79cc:	003ed806 	br	7530 <_malloc_r+0xb4>
    79d0:	48c000c4 	addi	r3,r9,3
    79d4:	003f3106 	br	769c <_malloc_r+0x220>
    79d8:	05c00074 	movhi	r23,1
    79dc:	bdd82204 	addi	r23,r23,24712
    79e0:	b8800017 	ldw	r2,0(r23)
    79e4:	988d883a 	add	r6,r19,r2
    79e8:	b9800015 	stw	r6,0(r23)
    79ec:	293fb21e 	bne	r5,r4,78b8 <_malloc_r+0x43c>
    79f0:	2083ffcc 	andi	r2,r4,4095
    79f4:	103fb01e 	bne	r2,zero,78b8 <_malloc_r+0x43c>
    79f8:	e4000217 	ldw	r16,8(fp)
    79fc:	9d45883a 	add	r2,r19,r21
    7a00:	10800054 	ori	r2,r2,1
    7a04:	80800115 	stw	r2,4(r16)
    7a08:	b8c00017 	ldw	r3,0(r23)
    7a0c:	d0a72117 	ldw	r2,-25468(gp)
    7a10:	10c0012e 	bgeu	r2,r3,7a18 <_malloc_r+0x59c>
    7a14:	d0e72115 	stw	r3,-25468(gp)
    7a18:	d0a72217 	ldw	r2,-25464(gp)
    7a1c:	10ff962e 	bgeu	r2,r3,7878 <_malloc_r+0x3fc>
    7a20:	d0e72215 	stw	r3,-25464(gp)
    7a24:	003f9406 	br	7878 <_malloc_r+0x3fc>
    7a28:	00800104 	movi	r2,4
    7a2c:	11001e36 	bltu	r2,r4,7aa8 <_malloc_r+0x62c>
    7a30:	2804d1ba 	srli	r2,r5,6
    7a34:	11000e04 	addi	r4,r2,56
    7a38:	200690fa 	slli	r3,r4,3
    7a3c:	003fc506 	br	7954 <_malloc_r+0x4d8>
    7a40:	00815504 	movi	r2,1364
    7a44:	10c01d2e 	bgeu	r2,r3,7abc <_malloc_r+0x640>
    7a48:	01801f84 	movi	r6,126
    7a4c:	0080fc04 	movi	r2,1008
    7a50:	003eb706 	br	7530 <_malloc_r+0xb4>
    7a54:	00800204 	movi	r2,8
    7a58:	10cbc83a 	sub	r5,r2,r3
    7a5c:	2169883a 	add	r20,r4,r5
    7a60:	003f9e06 	br	78dc <_malloc_r+0x460>
    7a64:	00bffe04 	movi	r2,-8
    7a68:	a93ffd04 	addi	r4,r21,-12
    7a6c:	2088703a 	and	r4,r4,r2
    7a70:	b10b883a 	add	r5,r22,r4
    7a74:	00c00144 	movi	r3,5
    7a78:	28c00215 	stw	r3,8(r5)
    7a7c:	28c00115 	stw	r3,4(r5)
    7a80:	b0800117 	ldw	r2,4(r22)
    7a84:	1080004c 	andi	r2,r2,1
    7a88:	2084b03a 	or	r2,r4,r2
    7a8c:	b0800115 	stw	r2,4(r22)
    7a90:	313fdd2e 	bgeu	r6,r4,7a08 <_malloc_r+0x58c>
    7a94:	b1400204 	addi	r5,r22,8
    7a98:	9009883a 	mov	r4,r18
    7a9c:	00068c80 	call	68c8 <_free_r>
    7aa0:	e4000217 	ldw	r16,8(fp)
    7aa4:	003fd806 	br	7a08 <_malloc_r+0x58c>
    7aa8:	00800504 	movi	r2,20
    7aac:	11001536 	bltu	r2,r4,7b04 <_malloc_r+0x688>
    7ab0:	210016c4 	addi	r4,r4,91
    7ab4:	200690fa 	slli	r3,r4,3
    7ab8:	003fa606 	br	7954 <_malloc_r+0x4d8>
    7abc:	8804d4ba 	srli	r2,r17,18
    7ac0:	11801f04 	addi	r6,r2,124
    7ac4:	300490fa 	slli	r2,r6,3
    7ac8:	003e9906 	br	7530 <_malloc_r+0xb4>
    7acc:	2009d0ba 	srai	r4,r4,2
    7ad0:	01400074 	movhi	r5,1
    7ad4:	294b0004 	addi	r5,r5,11264
    7ad8:	00c00044 	movi	r3,1
    7adc:	28800117 	ldw	r2,4(r5)
    7ae0:	1906983a 	sll	r3,r3,r4
    7ae4:	10c4b03a 	or	r2,r2,r3
    7ae8:	28800115 	stw	r2,4(r5)
    7aec:	003fa306 	br	797c <_malloc_r+0x500>
    7af0:	0027883a 	mov	r19,zero
    7af4:	00c00044 	movi	r3,1
    7af8:	003f8606 	br	7914 <_malloc_r+0x498>
    7afc:	d1200615 	stw	r4,-32744(gp)
    7b00:	003f7306 	br	78d0 <_malloc_r+0x454>
    7b04:	00801504 	movi	r2,84
    7b08:	11001936 	bltu	r2,r4,7b70 <_malloc_r+0x6f4>
    7b0c:	2804d33a 	srli	r2,r5,12
    7b10:	11001b84 	addi	r4,r2,110
    7b14:	200690fa 	slli	r3,r4,3
    7b18:	003f8e06 	br	7954 <_malloc_r+0x4d8>
    7b1c:	480b883a 	mov	r5,r9
    7b20:	6807883a 	mov	r3,r13
    7b24:	288000cc 	andi	r2,r5,3
    7b28:	18fffe04 	addi	r3,r3,-8
    7b2c:	297fffc4 	addi	r5,r5,-1
    7b30:	10001526 	beq	r2,zero,7b88 <_malloc_r+0x70c>
    7b34:	18800217 	ldw	r2,8(r3)
    7b38:	10fffa26 	beq	r2,r3,7b24 <_malloc_r+0x6a8>
    7b3c:	2109883a 	add	r4,r4,r4
    7b40:	393f1e36 	bltu	r7,r4,77bc <_malloc_r+0x340>
    7b44:	203f1d26 	beq	r4,zero,77bc <_malloc_r+0x340>
    7b48:	21c4703a 	and	r2,r4,r7
    7b4c:	10000226 	beq	r2,zero,7b58 <_malloc_r+0x6dc>
    7b50:	6013883a 	mov	r9,r12
    7b54:	003ee106 	br	76dc <_malloc_r+0x260>
    7b58:	2109883a 	add	r4,r4,r4
    7b5c:	3904703a 	and	r2,r7,r4
    7b60:	63000104 	addi	r12,r12,4
    7b64:	103ffc26 	beq	r2,zero,7b58 <_malloc_r+0x6dc>
    7b68:	6013883a 	mov	r9,r12
    7b6c:	003edb06 	br	76dc <_malloc_r+0x260>
    7b70:	00805504 	movi	r2,340
    7b74:	11000836 	bltu	r2,r4,7b98 <_malloc_r+0x71c>
    7b78:	2804d3fa 	srli	r2,r5,15
    7b7c:	11001dc4 	addi	r4,r2,119
    7b80:	200690fa 	slli	r3,r4,3
    7b84:	003f7306 	br	7954 <_malloc_r+0x4d8>
    7b88:	0104303a 	nor	r2,zero,r4
    7b8c:	388e703a 	and	r7,r7,r2
    7b90:	e1c00115 	stw	r7,4(fp)
    7b94:	003fe906 	br	7b3c <_malloc_r+0x6c0>
    7b98:	00815504 	movi	r2,1364
    7b9c:	1100032e 	bgeu	r2,r4,7bac <_malloc_r+0x730>
    7ba0:	01001f84 	movi	r4,126
    7ba4:	00c0fc04 	movi	r3,1008
    7ba8:	003f6a06 	br	7954 <_malloc_r+0x4d8>
    7bac:	2804d4ba 	srli	r2,r5,18
    7bb0:	11001f04 	addi	r4,r2,124
    7bb4:	200690fa 	slli	r3,r4,3
    7bb8:	003f6606 	br	7954 <_malloc_r+0x4d8>

00007bbc <_mbrtowc_r>:
    7bbc:	defffc04 	addi	sp,sp,-16
    7bc0:	dc400215 	stw	r17,8(sp)
    7bc4:	dc000115 	stw	r16,4(sp)
    7bc8:	dfc00315 	stw	ra,12(sp)
    7bcc:	dc000417 	ldw	r16,16(sp)
    7bd0:	2023883a 	mov	r17,r4
    7bd4:	30000f26 	beq	r6,zero,7c14 <_mbrtowc_r+0x58>
    7bd8:	dc000015 	stw	r16,0(sp)
    7bdc:	0007c7c0 	call	7c7c <_mbtowc_r>
    7be0:	1007883a 	mov	r3,r2
    7be4:	00bfffc4 	movi	r2,-1
    7be8:	1809883a 	mov	r4,r3
    7bec:	1880111e 	bne	r3,r2,7c34 <_mbrtowc_r+0x78>
    7bf0:	80000015 	stw	zero,0(r16)
    7bf4:	00802284 	movi	r2,138
    7bf8:	88800015 	stw	r2,0(r17)
    7bfc:	2005883a 	mov	r2,r4
    7c00:	dfc00317 	ldw	ra,12(sp)
    7c04:	dc400217 	ldw	r17,8(sp)
    7c08:	dc000117 	ldw	r16,4(sp)
    7c0c:	dec00404 	addi	sp,sp,16
    7c10:	f800283a 	ret
    7c14:	000b883a 	mov	r5,zero
    7c18:	01800074 	movhi	r6,1
    7c1c:	31882204 	addi	r6,r6,8328
    7c20:	01c00044 	movi	r7,1
    7c24:	dc000015 	stw	r16,0(sp)
    7c28:	0007c7c0 	call	7c7c <_mbtowc_r>
    7c2c:	1007883a 	mov	r3,r2
    7c30:	003fec06 	br	7be4 <_mbrtowc_r+0x28>
    7c34:	1809883a 	mov	r4,r3
    7c38:	003ff006 	br	7bfc <_mbrtowc_r+0x40>

00007c3c <mbrtowc>:
    7c3c:	00800074 	movhi	r2,1
    7c40:	1090f904 	addi	r2,r2,17380
    7c44:	2017883a 	mov	r11,r4
    7c48:	11000017 	ldw	r4,0(r2)
    7c4c:	defffe04 	addi	sp,sp,-8
    7c50:	3013883a 	mov	r9,r6
    7c54:	2805883a 	mov	r2,r5
    7c58:	d9c00015 	stw	r7,0(sp)
    7c5c:	580b883a 	mov	r5,r11
    7c60:	100d883a 	mov	r6,r2
    7c64:	480f883a 	mov	r7,r9
    7c68:	dfc00115 	stw	ra,4(sp)
    7c6c:	0007bbc0 	call	7bbc <_mbrtowc_r>
    7c70:	dfc00117 	ldw	ra,4(sp)
    7c74:	dec00204 	addi	sp,sp,8
    7c78:	f800283a 	ret

00007c7c <_mbtowc_r>:
    7c7c:	deffff04 	addi	sp,sp,-4
    7c80:	0005883a 	mov	r2,zero
    7c84:	28000326 	beq	r5,zero,7c94 <_mbtowc_r+0x18>
    7c88:	3000041e 	bne	r6,zero,7c9c <_mbtowc_r+0x20>
    7c8c:	dec00104 	addi	sp,sp,4
    7c90:	f800283a 	ret
    7c94:	d80b883a 	mov	r5,sp
    7c98:	303ffc26 	beq	r6,zero,7c8c <_mbtowc_r+0x10>
    7c9c:	00bfff84 	movi	r2,-2
    7ca0:	383ffa26 	beq	r7,zero,7c8c <_mbtowc_r+0x10>
    7ca4:	30800003 	ldbu	r2,0(r6)
    7ca8:	28800015 	stw	r2,0(r5)
    7cac:	30c00003 	ldbu	r3,0(r6)
    7cb0:	1804c03a 	cmpne	r2,r3,zero
    7cb4:	dec00104 	addi	sp,sp,4
    7cb8:	f800283a 	ret

00007cbc <memchr>:
    7cbc:	008000c4 	movi	r2,3
    7cc0:	29403fcc 	andi	r5,r5,255
    7cc4:	2007883a 	mov	r3,r4
    7cc8:	1180022e 	bgeu	r2,r6,7cd4 <memchr+0x18>
    7ccc:	2084703a 	and	r2,r4,r2
    7cd0:	10000b26 	beq	r2,zero,7d00 <memchr+0x44>
    7cd4:	313fffc4 	addi	r4,r6,-1
    7cd8:	3000051e 	bne	r6,zero,7cf0 <memchr+0x34>
    7cdc:	00002c06 	br	7d90 <memchr+0xd4>
    7ce0:	213fffc4 	addi	r4,r4,-1
    7ce4:	00bfffc4 	movi	r2,-1
    7ce8:	18c00044 	addi	r3,r3,1
    7cec:	20802826 	beq	r4,r2,7d90 <memchr+0xd4>
    7cf0:	18800003 	ldbu	r2,0(r3)
    7cf4:	28bffa1e 	bne	r5,r2,7ce0 <memchr+0x24>
    7cf8:	1805883a 	mov	r2,r3
    7cfc:	f800283a 	ret
    7d00:	0011883a 	mov	r8,zero
    7d04:	0007883a 	mov	r3,zero
    7d08:	01c00104 	movi	r7,4
    7d0c:	4004923a 	slli	r2,r8,8
    7d10:	18c00044 	addi	r3,r3,1
    7d14:	1151883a 	add	r8,r2,r5
    7d18:	19fffc1e 	bne	r3,r7,7d0c <memchr+0x50>
    7d1c:	02bfbff4 	movhi	r10,65279
    7d20:	52bfbfc4 	addi	r10,r10,-257
    7d24:	02602074 	movhi	r9,32897
    7d28:	4a602004 	addi	r9,r9,-32640
    7d2c:	02c000c4 	movi	r11,3
    7d30:	20800017 	ldw	r2,0(r4)
    7d34:	31bfff04 	addi	r6,r6,-4
    7d38:	200f883a 	mov	r7,r4
    7d3c:	1204f03a 	xor	r2,r2,r8
    7d40:	1287883a 	add	r3,r2,r10
    7d44:	1a46703a 	and	r3,r3,r9
    7d48:	0084303a 	nor	r2,zero,r2
    7d4c:	10c4703a 	and	r2,r2,r3
    7d50:	10000b26 	beq	r2,zero,7d80 <memchr+0xc4>
    7d54:	20800003 	ldbu	r2,0(r4)
    7d58:	28800f26 	beq	r5,r2,7d98 <memchr+0xdc>
    7d5c:	20800043 	ldbu	r2,1(r4)
    7d60:	21c00044 	addi	r7,r4,1
    7d64:	28800c26 	beq	r5,r2,7d98 <memchr+0xdc>
    7d68:	20800083 	ldbu	r2,2(r4)
    7d6c:	21c00084 	addi	r7,r4,2
    7d70:	28800926 	beq	r5,r2,7d98 <memchr+0xdc>
    7d74:	208000c3 	ldbu	r2,3(r4)
    7d78:	21c000c4 	addi	r7,r4,3
    7d7c:	28800626 	beq	r5,r2,7d98 <memchr+0xdc>
    7d80:	21000104 	addi	r4,r4,4
    7d84:	59bfea36 	bltu	r11,r6,7d30 <memchr+0x74>
    7d88:	2007883a 	mov	r3,r4
    7d8c:	003fd106 	br	7cd4 <memchr+0x18>
    7d90:	0005883a 	mov	r2,zero
    7d94:	f800283a 	ret
    7d98:	3805883a 	mov	r2,r7
    7d9c:	f800283a 	ret

00007da0 <memcpy>:
    7da0:	01c003c4 	movi	r7,15
    7da4:	2007883a 	mov	r3,r4
    7da8:	3980032e 	bgeu	r7,r6,7db8 <memcpy+0x18>
    7dac:	2904b03a 	or	r2,r5,r4
    7db0:	108000cc 	andi	r2,r2,3
    7db4:	10000926 	beq	r2,zero,7ddc <memcpy+0x3c>
    7db8:	30000626 	beq	r6,zero,7dd4 <memcpy+0x34>
    7dbc:	30cd883a 	add	r6,r6,r3
    7dc0:	28800003 	ldbu	r2,0(r5)
    7dc4:	29400044 	addi	r5,r5,1
    7dc8:	18800005 	stb	r2,0(r3)
    7dcc:	18c00044 	addi	r3,r3,1
    7dd0:	30fffb1e 	bne	r6,r3,7dc0 <memcpy+0x20>
    7dd4:	2005883a 	mov	r2,r4
    7dd8:	f800283a 	ret
    7ddc:	3811883a 	mov	r8,r7
    7de0:	200f883a 	mov	r7,r4
    7de4:	28c00017 	ldw	r3,0(r5)
    7de8:	31bffc04 	addi	r6,r6,-16
    7dec:	38c00015 	stw	r3,0(r7)
    7df0:	28800117 	ldw	r2,4(r5)
    7df4:	38800115 	stw	r2,4(r7)
    7df8:	28c00217 	ldw	r3,8(r5)
    7dfc:	38c00215 	stw	r3,8(r7)
    7e00:	28800317 	ldw	r2,12(r5)
    7e04:	29400404 	addi	r5,r5,16
    7e08:	38800315 	stw	r2,12(r7)
    7e0c:	39c00404 	addi	r7,r7,16
    7e10:	41bff436 	bltu	r8,r6,7de4 <memcpy+0x44>
    7e14:	008000c4 	movi	r2,3
    7e18:	1180072e 	bgeu	r2,r6,7e38 <memcpy+0x98>
    7e1c:	1007883a 	mov	r3,r2
    7e20:	28800017 	ldw	r2,0(r5)
    7e24:	31bfff04 	addi	r6,r6,-4
    7e28:	29400104 	addi	r5,r5,4
    7e2c:	38800015 	stw	r2,0(r7)
    7e30:	39c00104 	addi	r7,r7,4
    7e34:	19bffa36 	bltu	r3,r6,7e20 <memcpy+0x80>
    7e38:	3807883a 	mov	r3,r7
    7e3c:	003fde06 	br	7db8 <memcpy+0x18>

00007e40 <memmove>:
    7e40:	2807883a 	mov	r3,r5
    7e44:	2011883a 	mov	r8,r4
    7e48:	29000c2e 	bgeu	r5,r4,7e7c <memmove+0x3c>
    7e4c:	298f883a 	add	r7,r5,r6
    7e50:	21c00a2e 	bgeu	r4,r7,7e7c <memmove+0x3c>
    7e54:	30000726 	beq	r6,zero,7e74 <memmove+0x34>
    7e58:	2187883a 	add	r3,r4,r6
    7e5c:	198dc83a 	sub	r6,r3,r6
    7e60:	39ffffc4 	addi	r7,r7,-1
    7e64:	38800003 	ldbu	r2,0(r7)
    7e68:	18ffffc4 	addi	r3,r3,-1
    7e6c:	18800005 	stb	r2,0(r3)
    7e70:	19bffb1e 	bne	r3,r6,7e60 <memmove+0x20>
    7e74:	2005883a 	mov	r2,r4
    7e78:	f800283a 	ret
    7e7c:	01c003c4 	movi	r7,15
    7e80:	39800a36 	bltu	r7,r6,7eac <memmove+0x6c>
    7e84:	303ffb26 	beq	r6,zero,7e74 <memmove+0x34>
    7e88:	400f883a 	mov	r7,r8
    7e8c:	320d883a 	add	r6,r6,r8
    7e90:	28800003 	ldbu	r2,0(r5)
    7e94:	29400044 	addi	r5,r5,1
    7e98:	38800005 	stb	r2,0(r7)
    7e9c:	39c00044 	addi	r7,r7,1
    7ea0:	39bffb1e 	bne	r7,r6,7e90 <memmove+0x50>
    7ea4:	2005883a 	mov	r2,r4
    7ea8:	f800283a 	ret
    7eac:	1904b03a 	or	r2,r3,r4
    7eb0:	108000cc 	andi	r2,r2,3
    7eb4:	103ff31e 	bne	r2,zero,7e84 <memmove+0x44>
    7eb8:	3811883a 	mov	r8,r7
    7ebc:	180b883a 	mov	r5,r3
    7ec0:	200f883a 	mov	r7,r4
    7ec4:	28c00017 	ldw	r3,0(r5)
    7ec8:	31bffc04 	addi	r6,r6,-16
    7ecc:	38c00015 	stw	r3,0(r7)
    7ed0:	28800117 	ldw	r2,4(r5)
    7ed4:	38800115 	stw	r2,4(r7)
    7ed8:	28c00217 	ldw	r3,8(r5)
    7edc:	38c00215 	stw	r3,8(r7)
    7ee0:	28800317 	ldw	r2,12(r5)
    7ee4:	29400404 	addi	r5,r5,16
    7ee8:	38800315 	stw	r2,12(r7)
    7eec:	39c00404 	addi	r7,r7,16
    7ef0:	41bff436 	bltu	r8,r6,7ec4 <memmove+0x84>
    7ef4:	008000c4 	movi	r2,3
    7ef8:	1180072e 	bgeu	r2,r6,7f18 <memmove+0xd8>
    7efc:	1007883a 	mov	r3,r2
    7f00:	28800017 	ldw	r2,0(r5)
    7f04:	31bfff04 	addi	r6,r6,-4
    7f08:	29400104 	addi	r5,r5,4
    7f0c:	38800015 	stw	r2,0(r7)
    7f10:	39c00104 	addi	r7,r7,4
    7f14:	19bffa36 	bltu	r3,r6,7f00 <memmove+0xc0>
    7f18:	3811883a 	mov	r8,r7
    7f1c:	003fd906 	br	7e84 <memmove+0x44>

00007f20 <memset>:
    7f20:	008000c4 	movi	r2,3
    7f24:	29403fcc 	andi	r5,r5,255
    7f28:	2007883a 	mov	r3,r4
    7f2c:	1180022e 	bgeu	r2,r6,7f38 <memset+0x18>
    7f30:	2084703a 	and	r2,r4,r2
    7f34:	10000826 	beq	r2,zero,7f58 <memset+0x38>
    7f38:	30000526 	beq	r6,zero,7f50 <memset+0x30>
    7f3c:	2805883a 	mov	r2,r5
    7f40:	30cd883a 	add	r6,r6,r3
    7f44:	18800005 	stb	r2,0(r3)
    7f48:	18c00044 	addi	r3,r3,1
    7f4c:	19bffd1e 	bne	r3,r6,7f44 <memset+0x24>
    7f50:	2005883a 	mov	r2,r4
    7f54:	f800283a 	ret
    7f58:	2804923a 	slli	r2,r5,8
    7f5c:	020003c4 	movi	r8,15
    7f60:	200f883a 	mov	r7,r4
    7f64:	2884b03a 	or	r2,r5,r2
    7f68:	1006943a 	slli	r3,r2,16
    7f6c:	10c6b03a 	or	r3,r2,r3
    7f70:	41800a2e 	bgeu	r8,r6,7f9c <memset+0x7c>
    7f74:	4005883a 	mov	r2,r8
    7f78:	31bffc04 	addi	r6,r6,-16
    7f7c:	38c00015 	stw	r3,0(r7)
    7f80:	38c00115 	stw	r3,4(r7)
    7f84:	38c00215 	stw	r3,8(r7)
    7f88:	38c00315 	stw	r3,12(r7)
    7f8c:	39c00404 	addi	r7,r7,16
    7f90:	11bff936 	bltu	r2,r6,7f78 <memset+0x58>
    7f94:	008000c4 	movi	r2,3
    7f98:	1180052e 	bgeu	r2,r6,7fb0 <memset+0x90>
    7f9c:	31bfff04 	addi	r6,r6,-4
    7fa0:	008000c4 	movi	r2,3
    7fa4:	38c00015 	stw	r3,0(r7)
    7fa8:	39c00104 	addi	r7,r7,4
    7fac:	11bffb36 	bltu	r2,r6,7f9c <memset+0x7c>
    7fb0:	3807883a 	mov	r3,r7
    7fb4:	003fe006 	br	7f38 <memset+0x18>

00007fb8 <_Bfree>:
    7fb8:	28000826 	beq	r5,zero,7fdc <_Bfree+0x24>
    7fbc:	28800117 	ldw	r2,4(r5)
    7fc0:	21001317 	ldw	r4,76(r4)
    7fc4:	1085883a 	add	r2,r2,r2
    7fc8:	1085883a 	add	r2,r2,r2
    7fcc:	1105883a 	add	r2,r2,r4
    7fd0:	10c00017 	ldw	r3,0(r2)
    7fd4:	28c00015 	stw	r3,0(r5)
    7fd8:	11400015 	stw	r5,0(r2)
    7fdc:	f800283a 	ret

00007fe0 <__hi0bits>:
    7fe0:	20bfffec 	andhi	r2,r4,65535
    7fe4:	10001426 	beq	r2,zero,8038 <__hi0bits+0x58>
    7fe8:	0007883a 	mov	r3,zero
    7fec:	20bfc02c 	andhi	r2,r4,65280
    7ff0:	1000021e 	bne	r2,zero,7ffc <__hi0bits+0x1c>
    7ff4:	2008923a 	slli	r4,r4,8
    7ff8:	18c00204 	addi	r3,r3,8
    7ffc:	20bc002c 	andhi	r2,r4,61440
    8000:	1000021e 	bne	r2,zero,800c <__hi0bits+0x2c>
    8004:	2008913a 	slli	r4,r4,4
    8008:	18c00104 	addi	r3,r3,4
    800c:	20b0002c 	andhi	r2,r4,49152
    8010:	1000031e 	bne	r2,zero,8020 <__hi0bits+0x40>
    8014:	2105883a 	add	r2,r4,r4
    8018:	18c00084 	addi	r3,r3,2
    801c:	1089883a 	add	r4,r2,r2
    8020:	20000316 	blt	r4,zero,8030 <__hi0bits+0x50>
    8024:	2090002c 	andhi	r2,r4,16384
    8028:	10000626 	beq	r2,zero,8044 <__hi0bits+0x64>
    802c:	18c00044 	addi	r3,r3,1
    8030:	1805883a 	mov	r2,r3
    8034:	f800283a 	ret
    8038:	2008943a 	slli	r4,r4,16
    803c:	00c00404 	movi	r3,16
    8040:	003fea06 	br	7fec <__hi0bits+0xc>
    8044:	00c00804 	movi	r3,32
    8048:	1805883a 	mov	r2,r3
    804c:	f800283a 	ret

00008050 <__lo0bits>:
    8050:	20c00017 	ldw	r3,0(r4)
    8054:	188001cc 	andi	r2,r3,7
    8058:	10000a26 	beq	r2,zero,8084 <__lo0bits+0x34>
    805c:	1880004c 	andi	r2,r3,1
    8060:	1005003a 	cmpeq	r2,r2,zero
    8064:	10002126 	beq	r2,zero,80ec <__lo0bits+0x9c>
    8068:	1880008c 	andi	r2,r3,2
    806c:	1000251e 	bne	r2,zero,8104 <__lo0bits+0xb4>
    8070:	1804d0ba 	srli	r2,r3,2
    8074:	01400084 	movi	r5,2
    8078:	20800015 	stw	r2,0(r4)
    807c:	2805883a 	mov	r2,r5
    8080:	f800283a 	ret
    8084:	18bfffcc 	andi	r2,r3,65535
    8088:	10001526 	beq	r2,zero,80e0 <__lo0bits+0x90>
    808c:	000b883a 	mov	r5,zero
    8090:	18803fcc 	andi	r2,r3,255
    8094:	1000021e 	bne	r2,zero,80a0 <__lo0bits+0x50>
    8098:	1806d23a 	srli	r3,r3,8
    809c:	29400204 	addi	r5,r5,8
    80a0:	188003cc 	andi	r2,r3,15
    80a4:	1000021e 	bne	r2,zero,80b0 <__lo0bits+0x60>
    80a8:	1806d13a 	srli	r3,r3,4
    80ac:	29400104 	addi	r5,r5,4
    80b0:	188000cc 	andi	r2,r3,3
    80b4:	1000021e 	bne	r2,zero,80c0 <__lo0bits+0x70>
    80b8:	1806d0ba 	srli	r3,r3,2
    80bc:	29400084 	addi	r5,r5,2
    80c0:	1880004c 	andi	r2,r3,1
    80c4:	1000031e 	bne	r2,zero,80d4 <__lo0bits+0x84>
    80c8:	1806d07a 	srli	r3,r3,1
    80cc:	18000a26 	beq	r3,zero,80f8 <__lo0bits+0xa8>
    80d0:	29400044 	addi	r5,r5,1
    80d4:	2805883a 	mov	r2,r5
    80d8:	20c00015 	stw	r3,0(r4)
    80dc:	f800283a 	ret
    80e0:	1806d43a 	srli	r3,r3,16
    80e4:	01400404 	movi	r5,16
    80e8:	003fe906 	br	8090 <__lo0bits+0x40>
    80ec:	000b883a 	mov	r5,zero
    80f0:	2805883a 	mov	r2,r5
    80f4:	f800283a 	ret
    80f8:	01400804 	movi	r5,32
    80fc:	2805883a 	mov	r2,r5
    8100:	f800283a 	ret
    8104:	1804d07a 	srli	r2,r3,1
    8108:	01400044 	movi	r5,1
    810c:	20800015 	stw	r2,0(r4)
    8110:	003fda06 	br	807c <__lo0bits+0x2c>

00008114 <__mcmp>:
    8114:	20800417 	ldw	r2,16(r4)
    8118:	28c00417 	ldw	r3,16(r5)
    811c:	10cfc83a 	sub	r7,r2,r3
    8120:	38000c1e 	bne	r7,zero,8154 <__mcmp+0x40>
    8124:	18c5883a 	add	r2,r3,r3
    8128:	1085883a 	add	r2,r2,r2
    812c:	10c00504 	addi	r3,r2,20
    8130:	21000504 	addi	r4,r4,20
    8134:	28cb883a 	add	r5,r5,r3
    8138:	2085883a 	add	r2,r4,r2
    813c:	10bfff04 	addi	r2,r2,-4
    8140:	297fff04 	addi	r5,r5,-4
    8144:	11800017 	ldw	r6,0(r2)
    8148:	28c00017 	ldw	r3,0(r5)
    814c:	30c0031e 	bne	r6,r3,815c <__mcmp+0x48>
    8150:	20bffa36 	bltu	r4,r2,813c <__mcmp+0x28>
    8154:	3805883a 	mov	r2,r7
    8158:	f800283a 	ret
    815c:	30c00336 	bltu	r6,r3,816c <__mcmp+0x58>
    8160:	01c00044 	movi	r7,1
    8164:	3805883a 	mov	r2,r7
    8168:	f800283a 	ret
    816c:	01ffffc4 	movi	r7,-1
    8170:	003ff806 	br	8154 <__mcmp+0x40>

00008174 <__ulp>:
    8174:	295ffc2c 	andhi	r5,r5,32752
    8178:	013f3034 	movhi	r4,64704
    817c:	290b883a 	add	r5,r5,r4
    8180:	0145c83a 	sub	r2,zero,r5
    8184:	1007d53a 	srai	r3,r2,20
    8188:	000d883a 	mov	r6,zero
    818c:	0140040e 	bge	zero,r5,81a0 <__ulp+0x2c>
    8190:	280f883a 	mov	r7,r5
    8194:	3807883a 	mov	r3,r7
    8198:	3005883a 	mov	r2,r6
    819c:	f800283a 	ret
    81a0:	008004c4 	movi	r2,19
    81a4:	193ffb04 	addi	r4,r3,-20
    81a8:	10c00c0e 	bge	r2,r3,81dc <__ulp+0x68>
    81ac:	008007c4 	movi	r2,31
    81b0:	1107c83a 	sub	r3,r2,r4
    81b4:	00800784 	movi	r2,30
    81b8:	01400044 	movi	r5,1
    81bc:	11000216 	blt	r2,r4,81c8 <__ulp+0x54>
    81c0:	00800044 	movi	r2,1
    81c4:	10ca983a 	sll	r5,r2,r3
    81c8:	000f883a 	mov	r7,zero
    81cc:	280d883a 	mov	r6,r5
    81d0:	3807883a 	mov	r3,r7
    81d4:	3005883a 	mov	r2,r6
    81d8:	f800283a 	ret
    81dc:	00800234 	movhi	r2,8
    81e0:	10cfd83a 	sra	r7,r2,r3
    81e4:	000d883a 	mov	r6,zero
    81e8:	3005883a 	mov	r2,r6
    81ec:	3807883a 	mov	r3,r7
    81f0:	f800283a 	ret

000081f4 <__b2d>:
    81f4:	20800417 	ldw	r2,16(r4)
    81f8:	defff904 	addi	sp,sp,-28
    81fc:	dd000415 	stw	r20,16(sp)
    8200:	1085883a 	add	r2,r2,r2
    8204:	25000504 	addi	r20,r4,20
    8208:	1085883a 	add	r2,r2,r2
    820c:	dc000015 	stw	r16,0(sp)
    8210:	a0a1883a 	add	r16,r20,r2
    8214:	dd400515 	stw	r21,20(sp)
    8218:	857fff17 	ldw	r21,-4(r16)
    821c:	dc400115 	stw	r17,4(sp)
    8220:	dfc00615 	stw	ra,24(sp)
    8224:	a809883a 	mov	r4,r21
    8228:	2823883a 	mov	r17,r5
    822c:	dcc00315 	stw	r19,12(sp)
    8230:	dc800215 	stw	r18,8(sp)
    8234:	0007fe00 	call	7fe0 <__hi0bits>
    8238:	100b883a 	mov	r5,r2
    823c:	00800804 	movi	r2,32
    8240:	1145c83a 	sub	r2,r2,r5
    8244:	88800015 	stw	r2,0(r17)
    8248:	00800284 	movi	r2,10
    824c:	80ffff04 	addi	r3,r16,-4
    8250:	11401416 	blt	r2,r5,82a4 <__b2d+0xb0>
    8254:	008002c4 	movi	r2,11
    8258:	1149c83a 	sub	r4,r2,r5
    825c:	a0c02736 	bltu	r20,r3,82fc <__b2d+0x108>
    8260:	000d883a 	mov	r6,zero
    8264:	28800544 	addi	r2,r5,21
    8268:	a906d83a 	srl	r3,r21,r4
    826c:	a884983a 	sll	r2,r21,r2
    8270:	1ccffc34 	orhi	r19,r3,16368
    8274:	11a4b03a 	or	r18,r2,r6
    8278:	9005883a 	mov	r2,r18
    827c:	9807883a 	mov	r3,r19
    8280:	dfc00617 	ldw	ra,24(sp)
    8284:	dd400517 	ldw	r21,20(sp)
    8288:	dd000417 	ldw	r20,16(sp)
    828c:	dcc00317 	ldw	r19,12(sp)
    8290:	dc800217 	ldw	r18,8(sp)
    8294:	dc400117 	ldw	r17,4(sp)
    8298:	dc000017 	ldw	r16,0(sp)
    829c:	dec00704 	addi	sp,sp,28
    82a0:	f800283a 	ret
    82a4:	a0c00e36 	bltu	r20,r3,82e0 <__b2d+0xec>
    82a8:	293ffd44 	addi	r4,r5,-11
    82ac:	000d883a 	mov	r6,zero
    82b0:	20000f26 	beq	r4,zero,82f0 <__b2d+0xfc>
    82b4:	00800804 	movi	r2,32
    82b8:	110bc83a 	sub	r5,r2,r4
    82bc:	a0c01236 	bltu	r20,r3,8308 <__b2d+0x114>
    82c0:	000f883a 	mov	r7,zero
    82c4:	a904983a 	sll	r2,r21,r4
    82c8:	3146d83a 	srl	r3,r6,r5
    82cc:	3108983a 	sll	r4,r6,r4
    82d0:	108ffc34 	orhi	r2,r2,16368
    82d4:	18a6b03a 	or	r19,r3,r2
    82d8:	3924b03a 	or	r18,r7,r4
    82dc:	003fe606 	br	8278 <__b2d+0x84>
    82e0:	293ffd44 	addi	r4,r5,-11
    82e4:	81bffe17 	ldw	r6,-8(r16)
    82e8:	80fffe04 	addi	r3,r16,-8
    82ec:	203ff11e 	bne	r4,zero,82b4 <__b2d+0xc0>
    82f0:	accffc34 	orhi	r19,r21,16368
    82f4:	3025883a 	mov	r18,r6
    82f8:	003fdf06 	br	8278 <__b2d+0x84>
    82fc:	18bfff17 	ldw	r2,-4(r3)
    8300:	110cd83a 	srl	r6,r2,r4
    8304:	003fd706 	br	8264 <__b2d+0x70>
    8308:	18bfff17 	ldw	r2,-4(r3)
    830c:	114ed83a 	srl	r7,r2,r5
    8310:	003fec06 	br	82c4 <__b2d+0xd0>

00008314 <__ratio>:
    8314:	defff904 	addi	sp,sp,-28
    8318:	dc400215 	stw	r17,8(sp)
    831c:	2823883a 	mov	r17,r5
    8320:	d80b883a 	mov	r5,sp
    8324:	dfc00615 	stw	ra,24(sp)
    8328:	dd000515 	stw	r20,20(sp)
    832c:	dcc00415 	stw	r19,16(sp)
    8330:	dc800315 	stw	r18,12(sp)
    8334:	2025883a 	mov	r18,r4
    8338:	00081f40 	call	81f4 <__b2d>
    833c:	8809883a 	mov	r4,r17
    8340:	d9400104 	addi	r5,sp,4
    8344:	1027883a 	mov	r19,r2
    8348:	1829883a 	mov	r20,r3
    834c:	00081f40 	call	81f4 <__b2d>
    8350:	89000417 	ldw	r4,16(r17)
    8354:	91c00417 	ldw	r7,16(r18)
    8358:	d9800117 	ldw	r6,4(sp)
    835c:	180b883a 	mov	r5,r3
    8360:	390fc83a 	sub	r7,r7,r4
    8364:	1009883a 	mov	r4,r2
    8368:	d8800017 	ldw	r2,0(sp)
    836c:	380e917a 	slli	r7,r7,5
    8370:	2011883a 	mov	r8,r4
    8374:	1185c83a 	sub	r2,r2,r6
    8378:	11c5883a 	add	r2,r2,r7
    837c:	1006953a 	slli	r3,r2,20
    8380:	2813883a 	mov	r9,r5
    8384:	00800d0e 	bge	zero,r2,83bc <__ratio+0xa8>
    8388:	1d29883a 	add	r20,r3,r20
    838c:	a00b883a 	mov	r5,r20
    8390:	480f883a 	mov	r7,r9
    8394:	9809883a 	mov	r4,r19
    8398:	400d883a 	mov	r6,r8
    839c:	000e6d80 	call	e6d8 <__divdf3>
    83a0:	dfc00617 	ldw	ra,24(sp)
    83a4:	dd000517 	ldw	r20,20(sp)
    83a8:	dcc00417 	ldw	r19,16(sp)
    83ac:	dc800317 	ldw	r18,12(sp)
    83b0:	dc400217 	ldw	r17,8(sp)
    83b4:	dec00704 	addi	sp,sp,28
    83b8:	f800283a 	ret
    83bc:	28d3c83a 	sub	r9,r5,r3
    83c0:	003ff206 	br	838c <__ratio+0x78>

000083c4 <_mprec_log10>:
    83c4:	defffe04 	addi	sp,sp,-8
    83c8:	008005c4 	movi	r2,23
    83cc:	dc000015 	stw	r16,0(sp)
    83d0:	dfc00115 	stw	ra,4(sp)
    83d4:	2021883a 	mov	r16,r4
    83d8:	11000c16 	blt	r2,r4,840c <_mprec_log10+0x48>
    83dc:	200490fa 	slli	r2,r4,3
    83e0:	00c00074 	movhi	r3,1
    83e4:	18c96a04 	addi	r3,r3,9640
    83e8:	10c5883a 	add	r2,r2,r3
    83ec:	12400117 	ldw	r9,4(r2)
    83f0:	12000017 	ldw	r8,0(r2)
    83f4:	4807883a 	mov	r3,r9
    83f8:	4005883a 	mov	r2,r8
    83fc:	dfc00117 	ldw	ra,4(sp)
    8400:	dc000017 	ldw	r16,0(sp)
    8404:	dec00204 	addi	sp,sp,8
    8408:	f800283a 	ret
    840c:	0011883a 	mov	r8,zero
    8410:	024ffc34 	movhi	r9,16368
    8414:	0005883a 	mov	r2,zero
    8418:	00d00934 	movhi	r3,16420
    841c:	480b883a 	mov	r5,r9
    8420:	4009883a 	mov	r4,r8
    8424:	180f883a 	mov	r7,r3
    8428:	100d883a 	mov	r6,r2
    842c:	000e3140 	call	e314 <__muldf3>
    8430:	843fffc4 	addi	r16,r16,-1
    8434:	1011883a 	mov	r8,r2
    8438:	1813883a 	mov	r9,r3
    843c:	803ff51e 	bne	r16,zero,8414 <_mprec_log10+0x50>
    8440:	4005883a 	mov	r2,r8
    8444:	4807883a 	mov	r3,r9
    8448:	dfc00117 	ldw	ra,4(sp)
    844c:	dc000017 	ldw	r16,0(sp)
    8450:	dec00204 	addi	sp,sp,8
    8454:	f800283a 	ret

00008458 <__copybits>:
    8458:	297fffc4 	addi	r5,r5,-1
    845c:	30800417 	ldw	r2,16(r6)
    8460:	280bd17a 	srai	r5,r5,5
    8464:	31800504 	addi	r6,r6,20
    8468:	1085883a 	add	r2,r2,r2
    846c:	294b883a 	add	r5,r5,r5
    8470:	294b883a 	add	r5,r5,r5
    8474:	1085883a 	add	r2,r2,r2
    8478:	290b883a 	add	r5,r5,r4
    847c:	3087883a 	add	r3,r6,r2
    8480:	29400104 	addi	r5,r5,4
    8484:	30c0052e 	bgeu	r6,r3,849c <__copybits+0x44>
    8488:	30800017 	ldw	r2,0(r6)
    848c:	31800104 	addi	r6,r6,4
    8490:	20800015 	stw	r2,0(r4)
    8494:	21000104 	addi	r4,r4,4
    8498:	30fffb36 	bltu	r6,r3,8488 <__copybits+0x30>
    849c:	2140032e 	bgeu	r4,r5,84ac <__copybits+0x54>
    84a0:	20000015 	stw	zero,0(r4)
    84a4:	21000104 	addi	r4,r4,4
    84a8:	217ffd36 	bltu	r4,r5,84a0 <__copybits+0x48>
    84ac:	f800283a 	ret

000084b0 <__any_on>:
    84b0:	20800417 	ldw	r2,16(r4)
    84b4:	2807d17a 	srai	r3,r5,5
    84b8:	21000504 	addi	r4,r4,20
    84bc:	10c00d0e 	bge	r2,r3,84f4 <__any_on+0x44>
    84c0:	1085883a 	add	r2,r2,r2
    84c4:	1085883a 	add	r2,r2,r2
    84c8:	208d883a 	add	r6,r4,r2
    84cc:	2180182e 	bgeu	r4,r6,8530 <__any_on+0x80>
    84d0:	30bfff17 	ldw	r2,-4(r6)
    84d4:	30ffff04 	addi	r3,r6,-4
    84d8:	1000041e 	bne	r2,zero,84ec <__any_on+0x3c>
    84dc:	20c0142e 	bgeu	r4,r3,8530 <__any_on+0x80>
    84e0:	18ffff04 	addi	r3,r3,-4
    84e4:	18800017 	ldw	r2,0(r3)
    84e8:	103ffc26 	beq	r2,zero,84dc <__any_on+0x2c>
    84ec:	00800044 	movi	r2,1
    84f0:	f800283a 	ret
    84f4:	18800a0e 	bge	r3,r2,8520 <__any_on+0x70>
    84f8:	294007cc 	andi	r5,r5,31
    84fc:	28000826 	beq	r5,zero,8520 <__any_on+0x70>
    8500:	18c5883a 	add	r2,r3,r3
    8504:	1085883a 	add	r2,r2,r2
    8508:	208d883a 	add	r6,r4,r2
    850c:	30c00017 	ldw	r3,0(r6)
    8510:	1944d83a 	srl	r2,r3,r5
    8514:	1144983a 	sll	r2,r2,r5
    8518:	18bff41e 	bne	r3,r2,84ec <__any_on+0x3c>
    851c:	003feb06 	br	84cc <__any_on+0x1c>
    8520:	18c5883a 	add	r2,r3,r3
    8524:	1085883a 	add	r2,r2,r2
    8528:	208d883a 	add	r6,r4,r2
    852c:	003fe706 	br	84cc <__any_on+0x1c>
    8530:	0005883a 	mov	r2,zero
    8534:	f800283a 	ret

00008538 <_Balloc>:
    8538:	20c01317 	ldw	r3,76(r4)
    853c:	defffb04 	addi	sp,sp,-20
    8540:	dcc00315 	stw	r19,12(sp)
    8544:	dc800215 	stw	r18,8(sp)
    8548:	dfc00415 	stw	ra,16(sp)
    854c:	2825883a 	mov	r18,r5
    8550:	dc400115 	stw	r17,4(sp)
    8554:	dc000015 	stw	r16,0(sp)
    8558:	2027883a 	mov	r19,r4
    855c:	01800404 	movi	r6,16
    8560:	01400104 	movi	r5,4
    8564:	18001726 	beq	r3,zero,85c4 <_Balloc+0x8c>
    8568:	01400044 	movi	r5,1
    856c:	9485883a 	add	r2,r18,r18
    8570:	2ca2983a 	sll	r17,r5,r18
    8574:	1085883a 	add	r2,r2,r2
    8578:	10c7883a 	add	r3,r2,r3
    857c:	1c000017 	ldw	r16,0(r3)
    8580:	8c4d883a 	add	r6,r17,r17
    8584:	318d883a 	add	r6,r6,r6
    8588:	9809883a 	mov	r4,r19
    858c:	31800504 	addi	r6,r6,20
    8590:	80001226 	beq	r16,zero,85dc <_Balloc+0xa4>
    8594:	80800017 	ldw	r2,0(r16)
    8598:	18800015 	stw	r2,0(r3)
    859c:	80000415 	stw	zero,16(r16)
    85a0:	80000315 	stw	zero,12(r16)
    85a4:	8005883a 	mov	r2,r16
    85a8:	dfc00417 	ldw	ra,16(sp)
    85ac:	dcc00317 	ldw	r19,12(sp)
    85b0:	dc800217 	ldw	r18,8(sp)
    85b4:	dc400117 	ldw	r17,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00504 	addi	sp,sp,20
    85c0:	f800283a 	ret
    85c4:	000c0b40 	call	c0b4 <_calloc_r>
    85c8:	1007883a 	mov	r3,r2
    85cc:	0021883a 	mov	r16,zero
    85d0:	98801315 	stw	r2,76(r19)
    85d4:	103fe41e 	bne	r2,zero,8568 <_Balloc+0x30>
    85d8:	003ff206 	br	85a4 <_Balloc+0x6c>
    85dc:	000c0b40 	call	c0b4 <_calloc_r>
    85e0:	103ff026 	beq	r2,zero,85a4 <_Balloc+0x6c>
    85e4:	1021883a 	mov	r16,r2
    85e8:	14800115 	stw	r18,4(r2)
    85ec:	14400215 	stw	r17,8(r2)
    85f0:	003fea06 	br	859c <_Balloc+0x64>

000085f4 <__d2b>:
    85f4:	defff504 	addi	sp,sp,-44
    85f8:	dcc00515 	stw	r19,20(sp)
    85fc:	04c00044 	movi	r19,1
    8600:	dc000215 	stw	r16,8(sp)
    8604:	2821883a 	mov	r16,r5
    8608:	980b883a 	mov	r5,r19
    860c:	ddc00915 	stw	r23,36(sp)
    8610:	dd800815 	stw	r22,32(sp)
    8614:	dd400715 	stw	r21,28(sp)
    8618:	dd000615 	stw	r20,24(sp)
    861c:	dc800415 	stw	r18,16(sp)
    8620:	dc400315 	stw	r17,12(sp)
    8624:	dfc00a15 	stw	ra,40(sp)
    8628:	3023883a 	mov	r17,r6
    862c:	382d883a 	mov	r22,r7
    8630:	ddc00b17 	ldw	r23,44(sp)
    8634:	00085380 	call	8538 <_Balloc>
    8638:	1025883a 	mov	r18,r2
    863c:	00a00034 	movhi	r2,32768
    8640:	10bfffc4 	addi	r2,r2,-1
    8644:	8888703a 	and	r4,r17,r2
    8648:	202ad53a 	srli	r21,r4,20
    864c:	00800434 	movhi	r2,16
    8650:	10bfffc4 	addi	r2,r2,-1
    8654:	8886703a 	and	r3,r17,r2
    8658:	a829003a 	cmpeq	r20,r21,zero
    865c:	800b883a 	mov	r5,r16
    8660:	d8c00115 	stw	r3,4(sp)
    8664:	94000504 	addi	r16,r18,20
    8668:	a000021e 	bne	r20,zero,8674 <__d2b+0x80>
    866c:	18c00434 	orhi	r3,r3,16
    8670:	d8c00115 	stw	r3,4(sp)
    8674:	28002726 	beq	r5,zero,8714 <__d2b+0x120>
    8678:	d809883a 	mov	r4,sp
    867c:	d9400015 	stw	r5,0(sp)
    8680:	00080500 	call	8050 <__lo0bits>
    8684:	100d883a 	mov	r6,r2
    8688:	10003526 	beq	r2,zero,8760 <__d2b+0x16c>
    868c:	d8c00117 	ldw	r3,4(sp)
    8690:	00800804 	movi	r2,32
    8694:	1185c83a 	sub	r2,r2,r6
    8698:	d9000017 	ldw	r4,0(sp)
    869c:	1886983a 	sll	r3,r3,r2
    86a0:	1906b03a 	or	r3,r3,r4
    86a4:	90c00515 	stw	r3,20(r18)
    86a8:	d8c00117 	ldw	r3,4(sp)
    86ac:	1986d83a 	srl	r3,r3,r6
    86b0:	d8c00115 	stw	r3,4(sp)
    86b4:	180b003a 	cmpeq	r5,r3,zero
    86b8:	00800084 	movi	r2,2
    86bc:	114bc83a 	sub	r5,r2,r5
    86c0:	80c00115 	stw	r3,4(r16)
    86c4:	91400415 	stw	r5,16(r18)
    86c8:	a0001a1e 	bne	r20,zero,8734 <__d2b+0x140>
    86cc:	3545883a 	add	r2,r6,r21
    86d0:	10bef344 	addi	r2,r2,-1075
    86d4:	00c00d44 	movi	r3,53
    86d8:	b0800015 	stw	r2,0(r22)
    86dc:	1987c83a 	sub	r3,r3,r6
    86e0:	b8c00015 	stw	r3,0(r23)
    86e4:	9005883a 	mov	r2,r18
    86e8:	dfc00a17 	ldw	ra,40(sp)
    86ec:	ddc00917 	ldw	r23,36(sp)
    86f0:	dd800817 	ldw	r22,32(sp)
    86f4:	dd400717 	ldw	r21,28(sp)
    86f8:	dd000617 	ldw	r20,24(sp)
    86fc:	dcc00517 	ldw	r19,20(sp)
    8700:	dc800417 	ldw	r18,16(sp)
    8704:	dc400317 	ldw	r17,12(sp)
    8708:	dc000217 	ldw	r16,8(sp)
    870c:	dec00b04 	addi	sp,sp,44
    8710:	f800283a 	ret
    8714:	d9000104 	addi	r4,sp,4
    8718:	00080500 	call	8050 <__lo0bits>
    871c:	11800804 	addi	r6,r2,32
    8720:	d8800117 	ldw	r2,4(sp)
    8724:	94c00415 	stw	r19,16(r18)
    8728:	980b883a 	mov	r5,r19
    872c:	90800515 	stw	r2,20(r18)
    8730:	a03fe626 	beq	r20,zero,86cc <__d2b+0xd8>
    8734:	2945883a 	add	r2,r5,r5
    8738:	1085883a 	add	r2,r2,r2
    873c:	1405883a 	add	r2,r2,r16
    8740:	113fff17 	ldw	r4,-4(r2)
    8744:	30fef384 	addi	r3,r6,-1074
    8748:	2820917a 	slli	r16,r5,5
    874c:	b0c00015 	stw	r3,0(r22)
    8750:	0007fe00 	call	7fe0 <__hi0bits>
    8754:	80a1c83a 	sub	r16,r16,r2
    8758:	bc000015 	stw	r16,0(r23)
    875c:	003fe106 	br	86e4 <__d2b+0xf0>
    8760:	d8800017 	ldw	r2,0(sp)
    8764:	90800515 	stw	r2,20(r18)
    8768:	d8c00117 	ldw	r3,4(sp)
    876c:	003fd106 	br	86b4 <__d2b+0xc0>

00008770 <__mdiff>:
    8770:	defffb04 	addi	sp,sp,-20
    8774:	dc000015 	stw	r16,0(sp)
    8778:	2821883a 	mov	r16,r5
    877c:	dc800215 	stw	r18,8(sp)
    8780:	300b883a 	mov	r5,r6
    8784:	2025883a 	mov	r18,r4
    8788:	8009883a 	mov	r4,r16
    878c:	dc400115 	stw	r17,4(sp)
    8790:	dfc00415 	stw	ra,16(sp)
    8794:	dcc00315 	stw	r19,12(sp)
    8798:	3023883a 	mov	r17,r6
    879c:	00081140 	call	8114 <__mcmp>
    87a0:	10004226 	beq	r2,zero,88ac <__mdiff+0x13c>
    87a4:	10005016 	blt	r2,zero,88e8 <__mdiff+0x178>
    87a8:	0027883a 	mov	r19,zero
    87ac:	81400117 	ldw	r5,4(r16)
    87b0:	9009883a 	mov	r4,r18
    87b4:	00085380 	call	8538 <_Balloc>
    87b8:	1019883a 	mov	r12,r2
    87bc:	82800417 	ldw	r10,16(r16)
    87c0:	88800417 	ldw	r2,16(r17)
    87c4:	81800504 	addi	r6,r16,20
    87c8:	5287883a 	add	r3,r10,r10
    87cc:	1085883a 	add	r2,r2,r2
    87d0:	18c7883a 	add	r3,r3,r3
    87d4:	1085883a 	add	r2,r2,r2
    87d8:	8a000504 	addi	r8,r17,20
    87dc:	64c00315 	stw	r19,12(r12)
    87e0:	30db883a 	add	r13,r6,r3
    87e4:	4097883a 	add	r11,r8,r2
    87e8:	61c00504 	addi	r7,r12,20
    87ec:	0013883a 	mov	r9,zero
    87f0:	31000017 	ldw	r4,0(r6)
    87f4:	41400017 	ldw	r5,0(r8)
    87f8:	42000104 	addi	r8,r8,4
    87fc:	20bfffcc 	andi	r2,r4,65535
    8800:	28ffffcc 	andi	r3,r5,65535
    8804:	10c5c83a 	sub	r2,r2,r3
    8808:	1245883a 	add	r2,r2,r9
    880c:	2008d43a 	srli	r4,r4,16
    8810:	280ad43a 	srli	r5,r5,16
    8814:	1007d43a 	srai	r3,r2,16
    8818:	3880000d 	sth	r2,0(r7)
    881c:	2149c83a 	sub	r4,r4,r5
    8820:	20c9883a 	add	r4,r4,r3
    8824:	3900008d 	sth	r4,2(r7)
    8828:	31800104 	addi	r6,r6,4
    882c:	39c00104 	addi	r7,r7,4
    8830:	2013d43a 	srai	r9,r4,16
    8834:	42ffee36 	bltu	r8,r11,87f0 <__mdiff+0x80>
    8838:	33400c2e 	bgeu	r6,r13,886c <__mdiff+0xfc>
    883c:	30800017 	ldw	r2,0(r6)
    8840:	31800104 	addi	r6,r6,4
    8844:	10ffffcc 	andi	r3,r2,65535
    8848:	1a47883a 	add	r3,r3,r9
    884c:	1004d43a 	srli	r2,r2,16
    8850:	1809d43a 	srai	r4,r3,16
    8854:	38c0000d 	sth	r3,0(r7)
    8858:	1105883a 	add	r2,r2,r4
    885c:	3880008d 	sth	r2,2(r7)
    8860:	1013d43a 	srai	r9,r2,16
    8864:	39c00104 	addi	r7,r7,4
    8868:	337ff436 	bltu	r6,r13,883c <__mdiff+0xcc>
    886c:	38bfff17 	ldw	r2,-4(r7)
    8870:	38ffff04 	addi	r3,r7,-4
    8874:	1000041e 	bne	r2,zero,8888 <__mdiff+0x118>
    8878:	18ffff04 	addi	r3,r3,-4
    887c:	18800017 	ldw	r2,0(r3)
    8880:	52bfffc4 	addi	r10,r10,-1
    8884:	103ffc26 	beq	r2,zero,8878 <__mdiff+0x108>
    8888:	6005883a 	mov	r2,r12
    888c:	62800415 	stw	r10,16(r12)
    8890:	dfc00417 	ldw	ra,16(sp)
    8894:	dcc00317 	ldw	r19,12(sp)
    8898:	dc800217 	ldw	r18,8(sp)
    889c:	dc400117 	ldw	r17,4(sp)
    88a0:	dc000017 	ldw	r16,0(sp)
    88a4:	dec00504 	addi	sp,sp,20
    88a8:	f800283a 	ret
    88ac:	9009883a 	mov	r4,r18
    88b0:	000b883a 	mov	r5,zero
    88b4:	00085380 	call	8538 <_Balloc>
    88b8:	1019883a 	mov	r12,r2
    88bc:	00800044 	movi	r2,1
    88c0:	60800415 	stw	r2,16(r12)
    88c4:	6005883a 	mov	r2,r12
    88c8:	60000515 	stw	zero,20(r12)
    88cc:	dfc00417 	ldw	ra,16(sp)
    88d0:	dcc00317 	ldw	r19,12(sp)
    88d4:	dc800217 	ldw	r18,8(sp)
    88d8:	dc400117 	ldw	r17,4(sp)
    88dc:	dc000017 	ldw	r16,0(sp)
    88e0:	dec00504 	addi	sp,sp,20
    88e4:	f800283a 	ret
    88e8:	880d883a 	mov	r6,r17
    88ec:	04c00044 	movi	r19,1
    88f0:	8023883a 	mov	r17,r16
    88f4:	3021883a 	mov	r16,r6
    88f8:	003fac06 	br	87ac <__mdiff+0x3c>

000088fc <__lshift>:
    88fc:	defff904 	addi	sp,sp,-28
    8900:	28800417 	ldw	r2,16(r5)
    8904:	dc000015 	stw	r16,0(sp)
    8908:	3021d17a 	srai	r16,r6,5
    890c:	28c00217 	ldw	r3,8(r5)
    8910:	10800044 	addi	r2,r2,1
    8914:	dc400115 	stw	r17,4(sp)
    8918:	80a3883a 	add	r17,r16,r2
    891c:	dd400515 	stw	r21,20(sp)
    8920:	dd000415 	stw	r20,16(sp)
    8924:	dc800215 	stw	r18,8(sp)
    8928:	dfc00615 	stw	ra,24(sp)
    892c:	2825883a 	mov	r18,r5
    8930:	dcc00315 	stw	r19,12(sp)
    8934:	3029883a 	mov	r20,r6
    8938:	202b883a 	mov	r21,r4
    893c:	29400117 	ldw	r5,4(r5)
    8940:	1c40030e 	bge	r3,r17,8950 <__lshift+0x54>
    8944:	18c7883a 	add	r3,r3,r3
    8948:	29400044 	addi	r5,r5,1
    894c:	1c7ffd16 	blt	r3,r17,8944 <__lshift+0x48>
    8950:	a809883a 	mov	r4,r21
    8954:	00085380 	call	8538 <_Balloc>
    8958:	1027883a 	mov	r19,r2
    895c:	11400504 	addi	r5,r2,20
    8960:	0400090e 	bge	zero,r16,8988 <__lshift+0x8c>
    8964:	2805883a 	mov	r2,r5
    8968:	0007883a 	mov	r3,zero
    896c:	18c00044 	addi	r3,r3,1
    8970:	10000015 	stw	zero,0(r2)
    8974:	10800104 	addi	r2,r2,4
    8978:	80fffc1e 	bne	r16,r3,896c <__lshift+0x70>
    897c:	8405883a 	add	r2,r16,r16
    8980:	1085883a 	add	r2,r2,r2
    8984:	288b883a 	add	r5,r5,r2
    8988:	90800417 	ldw	r2,16(r18)
    898c:	91000504 	addi	r4,r18,20
    8990:	a18007cc 	andi	r6,r20,31
    8994:	1085883a 	add	r2,r2,r2
    8998:	1085883a 	add	r2,r2,r2
    899c:	208f883a 	add	r7,r4,r2
    89a0:	30001e26 	beq	r6,zero,8a1c <__lshift+0x120>
    89a4:	00800804 	movi	r2,32
    89a8:	1191c83a 	sub	r8,r2,r6
    89ac:	0007883a 	mov	r3,zero
    89b0:	20800017 	ldw	r2,0(r4)
    89b4:	1184983a 	sll	r2,r2,r6
    89b8:	1884b03a 	or	r2,r3,r2
    89bc:	28800015 	stw	r2,0(r5)
    89c0:	20c00017 	ldw	r3,0(r4)
    89c4:	21000104 	addi	r4,r4,4
    89c8:	29400104 	addi	r5,r5,4
    89cc:	1a06d83a 	srl	r3,r3,r8
    89d0:	21fff736 	bltu	r4,r7,89b0 <__lshift+0xb4>
    89d4:	28c00015 	stw	r3,0(r5)
    89d8:	18000126 	beq	r3,zero,89e0 <__lshift+0xe4>
    89dc:	8c400044 	addi	r17,r17,1
    89e0:	88bfffc4 	addi	r2,r17,-1
    89e4:	98800415 	stw	r2,16(r19)
    89e8:	a809883a 	mov	r4,r21
    89ec:	900b883a 	mov	r5,r18
    89f0:	0007fb80 	call	7fb8 <_Bfree>
    89f4:	9805883a 	mov	r2,r19
    89f8:	dfc00617 	ldw	ra,24(sp)
    89fc:	dd400517 	ldw	r21,20(sp)
    8a00:	dd000417 	ldw	r20,16(sp)
    8a04:	dcc00317 	ldw	r19,12(sp)
    8a08:	dc800217 	ldw	r18,8(sp)
    8a0c:	dc400117 	ldw	r17,4(sp)
    8a10:	dc000017 	ldw	r16,0(sp)
    8a14:	dec00704 	addi	sp,sp,28
    8a18:	f800283a 	ret
    8a1c:	20800017 	ldw	r2,0(r4)
    8a20:	21000104 	addi	r4,r4,4
    8a24:	28800015 	stw	r2,0(r5)
    8a28:	29400104 	addi	r5,r5,4
    8a2c:	21ffec2e 	bgeu	r4,r7,89e0 <__lshift+0xe4>
    8a30:	20800017 	ldw	r2,0(r4)
    8a34:	21000104 	addi	r4,r4,4
    8a38:	28800015 	stw	r2,0(r5)
    8a3c:	29400104 	addi	r5,r5,4
    8a40:	21fff636 	bltu	r4,r7,8a1c <__lshift+0x120>
    8a44:	003fe606 	br	89e0 <__lshift+0xe4>

00008a48 <__multiply>:
    8a48:	defff904 	addi	sp,sp,-28
    8a4c:	dcc00315 	stw	r19,12(sp)
    8a50:	dc800215 	stw	r18,8(sp)
    8a54:	2cc00417 	ldw	r19,16(r5)
    8a58:	34800417 	ldw	r18,16(r6)
    8a5c:	dd000415 	stw	r20,16(sp)
    8a60:	dc400115 	stw	r17,4(sp)
    8a64:	dfc00615 	stw	ra,24(sp)
    8a68:	dd400515 	stw	r21,20(sp)
    8a6c:	dc000015 	stw	r16,0(sp)
    8a70:	2823883a 	mov	r17,r5
    8a74:	3029883a 	mov	r20,r6
    8a78:	9c80040e 	bge	r19,r18,8a8c <__multiply+0x44>
    8a7c:	9027883a 	mov	r19,r18
    8a80:	2c800417 	ldw	r18,16(r5)
    8a84:	2829883a 	mov	r20,r5
    8a88:	3023883a 	mov	r17,r6
    8a8c:	88800217 	ldw	r2,8(r17)
    8a90:	9ca1883a 	add	r16,r19,r18
    8a94:	89400117 	ldw	r5,4(r17)
    8a98:	1400010e 	bge	r2,r16,8aa0 <__multiply+0x58>
    8a9c:	29400044 	addi	r5,r5,1
    8aa0:	00085380 	call	8538 <_Balloc>
    8aa4:	102b883a 	mov	r21,r2
    8aa8:	8405883a 	add	r2,r16,r16
    8aac:	1085883a 	add	r2,r2,r2
    8ab0:	a9000504 	addi	r4,r21,20
    8ab4:	209d883a 	add	r14,r4,r2
    8ab8:	2380042e 	bgeu	r4,r14,8acc <__multiply+0x84>
    8abc:	2005883a 	mov	r2,r4
    8ac0:	10000015 	stw	zero,0(r2)
    8ac4:	10800104 	addi	r2,r2,4
    8ac8:	13bffd36 	bltu	r2,r14,8ac0 <__multiply+0x78>
    8acc:	9485883a 	add	r2,r18,r18
    8ad0:	9cc7883a 	add	r3,r19,r19
    8ad4:	a1800504 	addi	r6,r20,20
    8ad8:	1085883a 	add	r2,r2,r2
    8adc:	8b400504 	addi	r13,r17,20
    8ae0:	18c7883a 	add	r3,r3,r3
    8ae4:	309f883a 	add	r15,r6,r2
    8ae8:	68d7883a 	add	r11,r13,r3
    8aec:	33c03b2e 	bgeu	r6,r15,8bdc <__multiply+0x194>
    8af0:	2019883a 	mov	r12,r4
    8af4:	30800017 	ldw	r2,0(r6)
    8af8:	127fffcc 	andi	r9,r2,65535
    8afc:	48001826 	beq	r9,zero,8b60 <__multiply+0x118>
    8b00:	6811883a 	mov	r8,r13
    8b04:	600f883a 	mov	r7,r12
    8b08:	0015883a 	mov	r10,zero
    8b0c:	40c00017 	ldw	r3,0(r8)
    8b10:	39400017 	ldw	r5,0(r7)
    8b14:	42000104 	addi	r8,r8,4
    8b18:	193fffcc 	andi	r4,r3,65535
    8b1c:	4909383a 	mul	r4,r9,r4
    8b20:	1806d43a 	srli	r3,r3,16
    8b24:	28bfffcc 	andi	r2,r5,65535
    8b28:	5085883a 	add	r2,r10,r2
    8b2c:	2089883a 	add	r4,r4,r2
    8b30:	48c7383a 	mul	r3,r9,r3
    8b34:	280ad43a 	srli	r5,r5,16
    8b38:	2004d43a 	srli	r2,r4,16
    8b3c:	3900000d 	sth	r4,0(r7)
    8b40:	1947883a 	add	r3,r3,r5
    8b44:	10c5883a 	add	r2,r2,r3
    8b48:	3880008d 	sth	r2,2(r7)
    8b4c:	1014d43a 	srli	r10,r2,16
    8b50:	39c00104 	addi	r7,r7,4
    8b54:	42ffed36 	bltu	r8,r11,8b0c <__multiply+0xc4>
    8b58:	3a800015 	stw	r10,0(r7)
    8b5c:	30800017 	ldw	r2,0(r6)
    8b60:	1012d43a 	srli	r9,r2,16
    8b64:	48001926 	beq	r9,zero,8bcc <__multiply+0x184>
    8b68:	60800017 	ldw	r2,0(r12)
    8b6c:	6811883a 	mov	r8,r13
    8b70:	600f883a 	mov	r7,r12
    8b74:	0015883a 	mov	r10,zero
    8b78:	100b883a 	mov	r5,r2
    8b7c:	41000017 	ldw	r4,0(r8)
    8b80:	2806d43a 	srli	r3,r5,16
    8b84:	3880000d 	sth	r2,0(r7)
    8b88:	20bfffcc 	andi	r2,r4,65535
    8b8c:	4885383a 	mul	r2,r9,r2
    8b90:	50c7883a 	add	r3,r10,r3
    8b94:	2008d43a 	srli	r4,r4,16
    8b98:	10c5883a 	add	r2,r2,r3
    8b9c:	3880008d 	sth	r2,2(r7)
    8ba0:	39c00104 	addi	r7,r7,4
    8ba4:	39400017 	ldw	r5,0(r7)
    8ba8:	4909383a 	mul	r4,r9,r4
    8bac:	1004d43a 	srli	r2,r2,16
    8bb0:	28ffffcc 	andi	r3,r5,65535
    8bb4:	20c9883a 	add	r4,r4,r3
    8bb8:	1105883a 	add	r2,r2,r4
    8bbc:	42000104 	addi	r8,r8,4
    8bc0:	1014d43a 	srli	r10,r2,16
    8bc4:	42ffed36 	bltu	r8,r11,8b7c <__multiply+0x134>
    8bc8:	38800015 	stw	r2,0(r7)
    8bcc:	31800104 	addi	r6,r6,4
    8bd0:	33c0022e 	bgeu	r6,r15,8bdc <__multiply+0x194>
    8bd4:	63000104 	addi	r12,r12,4
    8bd8:	003fc606 	br	8af4 <__multiply+0xac>
    8bdc:	0400090e 	bge	zero,r16,8c04 <__multiply+0x1bc>
    8be0:	70bfff17 	ldw	r2,-4(r14)
    8be4:	70ffff04 	addi	r3,r14,-4
    8be8:	10000326 	beq	r2,zero,8bf8 <__multiply+0x1b0>
    8bec:	00000506 	br	8c04 <__multiply+0x1bc>
    8bf0:	18800017 	ldw	r2,0(r3)
    8bf4:	1000031e 	bne	r2,zero,8c04 <__multiply+0x1bc>
    8bf8:	843fffc4 	addi	r16,r16,-1
    8bfc:	18ffff04 	addi	r3,r3,-4
    8c00:	803ffb1e 	bne	r16,zero,8bf0 <__multiply+0x1a8>
    8c04:	a805883a 	mov	r2,r21
    8c08:	ac000415 	stw	r16,16(r21)
    8c0c:	dfc00617 	ldw	ra,24(sp)
    8c10:	dd400517 	ldw	r21,20(sp)
    8c14:	dd000417 	ldw	r20,16(sp)
    8c18:	dcc00317 	ldw	r19,12(sp)
    8c1c:	dc800217 	ldw	r18,8(sp)
    8c20:	dc400117 	ldw	r17,4(sp)
    8c24:	dc000017 	ldw	r16,0(sp)
    8c28:	dec00704 	addi	sp,sp,28
    8c2c:	f800283a 	ret

00008c30 <__i2b>:
    8c30:	defffd04 	addi	sp,sp,-12
    8c34:	dc000015 	stw	r16,0(sp)
    8c38:	04000044 	movi	r16,1
    8c3c:	dc800115 	stw	r18,4(sp)
    8c40:	2825883a 	mov	r18,r5
    8c44:	800b883a 	mov	r5,r16
    8c48:	dfc00215 	stw	ra,8(sp)
    8c4c:	00085380 	call	8538 <_Balloc>
    8c50:	14000415 	stw	r16,16(r2)
    8c54:	14800515 	stw	r18,20(r2)
    8c58:	dfc00217 	ldw	ra,8(sp)
    8c5c:	dc800117 	ldw	r18,4(sp)
    8c60:	dc000017 	ldw	r16,0(sp)
    8c64:	dec00304 	addi	sp,sp,12
    8c68:	f800283a 	ret

00008c6c <__multadd>:
    8c6c:	defffa04 	addi	sp,sp,-24
    8c70:	dc800215 	stw	r18,8(sp)
    8c74:	2c800417 	ldw	r18,16(r5)
    8c78:	dd000415 	stw	r20,16(sp)
    8c7c:	dcc00315 	stw	r19,12(sp)
    8c80:	dc000015 	stw	r16,0(sp)
    8c84:	dfc00515 	stw	ra,20(sp)
    8c88:	3821883a 	mov	r16,r7
    8c8c:	dc400115 	stw	r17,4(sp)
    8c90:	2827883a 	mov	r19,r5
    8c94:	2029883a 	mov	r20,r4
    8c98:	2a000504 	addi	r8,r5,20
    8c9c:	000f883a 	mov	r7,zero
    8ca0:	40800017 	ldw	r2,0(r8)
    8ca4:	39c00044 	addi	r7,r7,1
    8ca8:	10ffffcc 	andi	r3,r2,65535
    8cac:	1987383a 	mul	r3,r3,r6
    8cb0:	1004d43a 	srli	r2,r2,16
    8cb4:	1c07883a 	add	r3,r3,r16
    8cb8:	180ad43a 	srli	r5,r3,16
    8cbc:	1185383a 	mul	r2,r2,r6
    8cc0:	18ffffcc 	andi	r3,r3,65535
    8cc4:	1145883a 	add	r2,r2,r5
    8cc8:	1008943a 	slli	r4,r2,16
    8ccc:	1020d43a 	srli	r16,r2,16
    8cd0:	20c9883a 	add	r4,r4,r3
    8cd4:	41000015 	stw	r4,0(r8)
    8cd8:	42000104 	addi	r8,r8,4
    8cdc:	3cbff016 	blt	r7,r18,8ca0 <__multadd+0x34>
    8ce0:	80000826 	beq	r16,zero,8d04 <__multadd+0x98>
    8ce4:	98800217 	ldw	r2,8(r19)
    8ce8:	90800f0e 	bge	r18,r2,8d28 <__multadd+0xbc>
    8cec:	9485883a 	add	r2,r18,r18
    8cf0:	1085883a 	add	r2,r2,r2
    8cf4:	14c5883a 	add	r2,r2,r19
    8cf8:	90c00044 	addi	r3,r18,1
    8cfc:	14000515 	stw	r16,20(r2)
    8d00:	98c00415 	stw	r3,16(r19)
    8d04:	9805883a 	mov	r2,r19
    8d08:	dfc00517 	ldw	ra,20(sp)
    8d0c:	dd000417 	ldw	r20,16(sp)
    8d10:	dcc00317 	ldw	r19,12(sp)
    8d14:	dc800217 	ldw	r18,8(sp)
    8d18:	dc400117 	ldw	r17,4(sp)
    8d1c:	dc000017 	ldw	r16,0(sp)
    8d20:	dec00604 	addi	sp,sp,24
    8d24:	f800283a 	ret
    8d28:	99400117 	ldw	r5,4(r19)
    8d2c:	a009883a 	mov	r4,r20
    8d30:	29400044 	addi	r5,r5,1
    8d34:	00085380 	call	8538 <_Balloc>
    8d38:	99800417 	ldw	r6,16(r19)
    8d3c:	99400304 	addi	r5,r19,12
    8d40:	11000304 	addi	r4,r2,12
    8d44:	318d883a 	add	r6,r6,r6
    8d48:	318d883a 	add	r6,r6,r6
    8d4c:	31800204 	addi	r6,r6,8
    8d50:	1023883a 	mov	r17,r2
    8d54:	0007da00 	call	7da0 <memcpy>
    8d58:	980b883a 	mov	r5,r19
    8d5c:	a009883a 	mov	r4,r20
    8d60:	0007fb80 	call	7fb8 <_Bfree>
    8d64:	8827883a 	mov	r19,r17
    8d68:	003fe006 	br	8cec <__multadd+0x80>

00008d6c <__pow5mult>:
    8d6c:	defffa04 	addi	sp,sp,-24
    8d70:	308000cc 	andi	r2,r6,3
    8d74:	dd000415 	stw	r20,16(sp)
    8d78:	dcc00315 	stw	r19,12(sp)
    8d7c:	dc000015 	stw	r16,0(sp)
    8d80:	dfc00515 	stw	ra,20(sp)
    8d84:	dc800215 	stw	r18,8(sp)
    8d88:	dc400115 	stw	r17,4(sp)
    8d8c:	3021883a 	mov	r16,r6
    8d90:	2027883a 	mov	r19,r4
    8d94:	2829883a 	mov	r20,r5
    8d98:	10002b1e 	bne	r2,zero,8e48 <__pow5mult+0xdc>
    8d9c:	8025d0ba 	srai	r18,r16,2
    8da0:	90001b26 	beq	r18,zero,8e10 <__pow5mult+0xa4>
    8da4:	9c001217 	ldw	r16,72(r19)
    8da8:	8000081e 	bne	r16,zero,8dcc <__pow5mult+0x60>
    8dac:	00003006 	br	8e70 <__pow5mult+0x104>
    8db0:	800b883a 	mov	r5,r16
    8db4:	800d883a 	mov	r6,r16
    8db8:	9809883a 	mov	r4,r19
    8dbc:	90001426 	beq	r18,zero,8e10 <__pow5mult+0xa4>
    8dc0:	80800017 	ldw	r2,0(r16)
    8dc4:	10001b26 	beq	r2,zero,8e34 <__pow5mult+0xc8>
    8dc8:	1021883a 	mov	r16,r2
    8dcc:	9080004c 	andi	r2,r18,1
    8dd0:	1005003a 	cmpeq	r2,r2,zero
    8dd4:	9025d07a 	srai	r18,r18,1
    8dd8:	800d883a 	mov	r6,r16
    8ddc:	9809883a 	mov	r4,r19
    8de0:	a00b883a 	mov	r5,r20
    8de4:	103ff21e 	bne	r2,zero,8db0 <__pow5mult+0x44>
    8de8:	0008a480 	call	8a48 <__multiply>
    8dec:	a00b883a 	mov	r5,r20
    8df0:	9809883a 	mov	r4,r19
    8df4:	1023883a 	mov	r17,r2
    8df8:	0007fb80 	call	7fb8 <_Bfree>
    8dfc:	8829883a 	mov	r20,r17
    8e00:	800b883a 	mov	r5,r16
    8e04:	800d883a 	mov	r6,r16
    8e08:	9809883a 	mov	r4,r19
    8e0c:	903fec1e 	bne	r18,zero,8dc0 <__pow5mult+0x54>
    8e10:	a005883a 	mov	r2,r20
    8e14:	dfc00517 	ldw	ra,20(sp)
    8e18:	dd000417 	ldw	r20,16(sp)
    8e1c:	dcc00317 	ldw	r19,12(sp)
    8e20:	dc800217 	ldw	r18,8(sp)
    8e24:	dc400117 	ldw	r17,4(sp)
    8e28:	dc000017 	ldw	r16,0(sp)
    8e2c:	dec00604 	addi	sp,sp,24
    8e30:	f800283a 	ret
    8e34:	0008a480 	call	8a48 <__multiply>
    8e38:	80800015 	stw	r2,0(r16)
    8e3c:	1021883a 	mov	r16,r2
    8e40:	10000015 	stw	zero,0(r2)
    8e44:	003fe106 	br	8dcc <__pow5mult+0x60>
    8e48:	1085883a 	add	r2,r2,r2
    8e4c:	00c00074 	movhi	r3,1
    8e50:	18c9b004 	addi	r3,r3,9920
    8e54:	1085883a 	add	r2,r2,r2
    8e58:	10c5883a 	add	r2,r2,r3
    8e5c:	11bfff17 	ldw	r6,-4(r2)
    8e60:	000f883a 	mov	r7,zero
    8e64:	0008c6c0 	call	8c6c <__multadd>
    8e68:	1029883a 	mov	r20,r2
    8e6c:	003fcb06 	br	8d9c <__pow5mult+0x30>
    8e70:	9809883a 	mov	r4,r19
    8e74:	01409c44 	movi	r5,625
    8e78:	0008c300 	call	8c30 <__i2b>
    8e7c:	98801215 	stw	r2,72(r19)
    8e80:	1021883a 	mov	r16,r2
    8e84:	10000015 	stw	zero,0(r2)
    8e88:	003fd006 	br	8dcc <__pow5mult+0x60>

00008e8c <__s2b>:
    8e8c:	defff904 	addi	sp,sp,-28
    8e90:	dcc00315 	stw	r19,12(sp)
    8e94:	dc800215 	stw	r18,8(sp)
    8e98:	2827883a 	mov	r19,r5
    8e9c:	2025883a 	mov	r18,r4
    8ea0:	01400244 	movi	r5,9
    8ea4:	39000204 	addi	r4,r7,8
    8ea8:	dd000415 	stw	r20,16(sp)
    8eac:	dc400115 	stw	r17,4(sp)
    8eb0:	dfc00615 	stw	ra,24(sp)
    8eb4:	dd400515 	stw	r21,20(sp)
    8eb8:	dc000015 	stw	r16,0(sp)
    8ebc:	3829883a 	mov	r20,r7
    8ec0:	3023883a 	mov	r17,r6
    8ec4:	000f0b40 	call	f0b4 <__divsi3>
    8ec8:	00c00044 	movi	r3,1
    8ecc:	1880350e 	bge	r3,r2,8fa4 <__s2b+0x118>
    8ed0:	000b883a 	mov	r5,zero
    8ed4:	18c7883a 	add	r3,r3,r3
    8ed8:	29400044 	addi	r5,r5,1
    8edc:	18bffd16 	blt	r3,r2,8ed4 <__s2b+0x48>
    8ee0:	9009883a 	mov	r4,r18
    8ee4:	00085380 	call	8538 <_Balloc>
    8ee8:	1011883a 	mov	r8,r2
    8eec:	d8800717 	ldw	r2,28(sp)
    8ef0:	00c00044 	movi	r3,1
    8ef4:	01800244 	movi	r6,9
    8ef8:	40800515 	stw	r2,20(r8)
    8efc:	40c00415 	stw	r3,16(r8)
    8f00:	3440260e 	bge	r6,r17,8f9c <__s2b+0x110>
    8f04:	3021883a 	mov	r16,r6
    8f08:	99ab883a 	add	r21,r19,r6
    8f0c:	9c05883a 	add	r2,r19,r16
    8f10:	11c00007 	ldb	r7,0(r2)
    8f14:	400b883a 	mov	r5,r8
    8f18:	9009883a 	mov	r4,r18
    8f1c:	39fff404 	addi	r7,r7,-48
    8f20:	01800284 	movi	r6,10
    8f24:	0008c6c0 	call	8c6c <__multadd>
    8f28:	84000044 	addi	r16,r16,1
    8f2c:	1011883a 	mov	r8,r2
    8f30:	8c3ff61e 	bne	r17,r16,8f0c <__s2b+0x80>
    8f34:	ac45883a 	add	r2,r21,r17
    8f38:	117ffe04 	addi	r5,r2,-8
    8f3c:	880d883a 	mov	r6,r17
    8f40:	35000c0e 	bge	r6,r20,8f74 <__s2b+0xe8>
    8f44:	a185c83a 	sub	r2,r20,r6
    8f48:	2821883a 	mov	r16,r5
    8f4c:	28a3883a 	add	r17,r5,r2
    8f50:	81c00007 	ldb	r7,0(r16)
    8f54:	400b883a 	mov	r5,r8
    8f58:	9009883a 	mov	r4,r18
    8f5c:	39fff404 	addi	r7,r7,-48
    8f60:	01800284 	movi	r6,10
    8f64:	0008c6c0 	call	8c6c <__multadd>
    8f68:	84000044 	addi	r16,r16,1
    8f6c:	1011883a 	mov	r8,r2
    8f70:	847ff71e 	bne	r16,r17,8f50 <__s2b+0xc4>
    8f74:	4005883a 	mov	r2,r8
    8f78:	dfc00617 	ldw	ra,24(sp)
    8f7c:	dd400517 	ldw	r21,20(sp)
    8f80:	dd000417 	ldw	r20,16(sp)
    8f84:	dcc00317 	ldw	r19,12(sp)
    8f88:	dc800217 	ldw	r18,8(sp)
    8f8c:	dc400117 	ldw	r17,4(sp)
    8f90:	dc000017 	ldw	r16,0(sp)
    8f94:	dec00704 	addi	sp,sp,28
    8f98:	f800283a 	ret
    8f9c:	99400284 	addi	r5,r19,10
    8fa0:	003fe706 	br	8f40 <__s2b+0xb4>
    8fa4:	000b883a 	mov	r5,zero
    8fa8:	003fcd06 	br	8ee0 <__s2b+0x54>

00008fac <_realloc_r>:
    8fac:	defff404 	addi	sp,sp,-48
    8fb0:	dd800815 	stw	r22,32(sp)
    8fb4:	dc800415 	stw	r18,16(sp)
    8fb8:	dc400315 	stw	r17,12(sp)
    8fbc:	dfc00b15 	stw	ra,44(sp)
    8fc0:	df000a15 	stw	fp,40(sp)
    8fc4:	ddc00915 	stw	r23,36(sp)
    8fc8:	dd400715 	stw	r21,28(sp)
    8fcc:	dd000615 	stw	r20,24(sp)
    8fd0:	dcc00515 	stw	r19,20(sp)
    8fd4:	dc000215 	stw	r16,8(sp)
    8fd8:	2825883a 	mov	r18,r5
    8fdc:	3023883a 	mov	r17,r6
    8fe0:	202d883a 	mov	r22,r4
    8fe4:	2800c926 	beq	r5,zero,930c <_realloc_r+0x360>
    8fe8:	000f7440 	call	f744 <__malloc_lock>
    8fec:	943ffe04 	addi	r16,r18,-8
    8ff0:	88c002c4 	addi	r3,r17,11
    8ff4:	00800584 	movi	r2,22
    8ff8:	82000117 	ldw	r8,4(r16)
    8ffc:	10c01b2e 	bgeu	r2,r3,906c <_realloc_r+0xc0>
    9000:	00bffe04 	movi	r2,-8
    9004:	188e703a 	and	r7,r3,r2
    9008:	3839883a 	mov	fp,r7
    900c:	38001a16 	blt	r7,zero,9078 <_realloc_r+0xcc>
    9010:	e4401936 	bltu	fp,r17,9078 <_realloc_r+0xcc>
    9014:	013fff04 	movi	r4,-4
    9018:	4126703a 	and	r19,r8,r4
    901c:	99c02616 	blt	r19,r7,90b8 <_realloc_r+0x10c>
    9020:	802b883a 	mov	r21,r16
    9024:	9829883a 	mov	r20,r19
    9028:	84000204 	addi	r16,r16,8
    902c:	a80f883a 	mov	r7,r21
    9030:	a70dc83a 	sub	r6,r20,fp
    9034:	008003c4 	movi	r2,15
    9038:	1180c136 	bltu	r2,r6,9340 <_realloc_r+0x394>
    903c:	38800117 	ldw	r2,4(r7)
    9040:	a549883a 	add	r4,r20,r21
    9044:	1080004c 	andi	r2,r2,1
    9048:	a084b03a 	or	r2,r20,r2
    904c:	38800115 	stw	r2,4(r7)
    9050:	20c00117 	ldw	r3,4(r4)
    9054:	18c00054 	ori	r3,r3,1
    9058:	20c00115 	stw	r3,4(r4)
    905c:	b009883a 	mov	r4,r22
    9060:	000f7480 	call	f748 <__malloc_unlock>
    9064:	8023883a 	mov	r17,r16
    9068:	00000606 	br	9084 <_realloc_r+0xd8>
    906c:	01c00404 	movi	r7,16
    9070:	3839883a 	mov	fp,r7
    9074:	e47fe72e 	bgeu	fp,r17,9014 <_realloc_r+0x68>
    9078:	00800304 	movi	r2,12
    907c:	0023883a 	mov	r17,zero
    9080:	b0800015 	stw	r2,0(r22)
    9084:	8805883a 	mov	r2,r17
    9088:	dfc00b17 	ldw	ra,44(sp)
    908c:	df000a17 	ldw	fp,40(sp)
    9090:	ddc00917 	ldw	r23,36(sp)
    9094:	dd800817 	ldw	r22,32(sp)
    9098:	dd400717 	ldw	r21,28(sp)
    909c:	dd000617 	ldw	r20,24(sp)
    90a0:	dcc00517 	ldw	r19,20(sp)
    90a4:	dc800417 	ldw	r18,16(sp)
    90a8:	dc400317 	ldw	r17,12(sp)
    90ac:	dc000217 	ldw	r16,8(sp)
    90b0:	dec00c04 	addi	sp,sp,48
    90b4:	f800283a 	ret
    90b8:	00800074 	movhi	r2,1
    90bc:	108b0004 	addi	r2,r2,11264
    90c0:	12400217 	ldw	r9,8(r2)
    90c4:	84cd883a 	add	r6,r16,r19
    90c8:	802b883a 	mov	r21,r16
    90cc:	3240b926 	beq	r6,r9,93b4 <_realloc_r+0x408>
    90d0:	31400117 	ldw	r5,4(r6)
    90d4:	00bfff84 	movi	r2,-2
    90d8:	2884703a 	and	r2,r5,r2
    90dc:	1185883a 	add	r2,r2,r6
    90e0:	10c00117 	ldw	r3,4(r2)
    90e4:	18c0004c 	andi	r3,r3,1
    90e8:	1807003a 	cmpeq	r3,r3,zero
    90ec:	1800a326 	beq	r3,zero,937c <_realloc_r+0x3d0>
    90f0:	2908703a 	and	r4,r5,r4
    90f4:	9929883a 	add	r20,r19,r4
    90f8:	a1c0a30e 	bge	r20,r7,9388 <_realloc_r+0x3dc>
    90fc:	4080004c 	andi	r2,r8,1
    9100:	1000551e 	bne	r2,zero,9258 <_realloc_r+0x2ac>
    9104:	80800017 	ldw	r2,0(r16)
    9108:	80afc83a 	sub	r23,r16,r2
    910c:	b8c00117 	ldw	r3,4(r23)
    9110:	00bfff04 	movi	r2,-4
    9114:	1884703a 	and	r2,r3,r2
    9118:	30002e26 	beq	r6,zero,91d4 <_realloc_r+0x228>
    911c:	3240b926 	beq	r6,r9,9404 <_realloc_r+0x458>
    9120:	98a9883a 	add	r20,r19,r2
    9124:	2509883a 	add	r4,r4,r20
    9128:	d9000015 	stw	r4,0(sp)
    912c:	21c02a16 	blt	r4,r7,91d8 <_realloc_r+0x22c>
    9130:	30800317 	ldw	r2,12(r6)
    9134:	30c00217 	ldw	r3,8(r6)
    9138:	01400904 	movi	r5,36
    913c:	99bfff04 	addi	r6,r19,-4
    9140:	18800315 	stw	r2,12(r3)
    9144:	10c00215 	stw	r3,8(r2)
    9148:	b9000317 	ldw	r4,12(r23)
    914c:	b8800217 	ldw	r2,8(r23)
    9150:	b82b883a 	mov	r21,r23
    9154:	bc000204 	addi	r16,r23,8
    9158:	20800215 	stw	r2,8(r4)
    915c:	11000315 	stw	r4,12(r2)
    9160:	2980e436 	bltu	r5,r6,94f4 <_realloc_r+0x548>
    9164:	008004c4 	movi	r2,19
    9168:	9009883a 	mov	r4,r18
    916c:	8011883a 	mov	r8,r16
    9170:	11800f2e 	bgeu	r2,r6,91b0 <_realloc_r+0x204>
    9174:	90800017 	ldw	r2,0(r18)
    9178:	ba000404 	addi	r8,r23,16
    917c:	91000204 	addi	r4,r18,8
    9180:	b8800215 	stw	r2,8(r23)
    9184:	90c00117 	ldw	r3,4(r18)
    9188:	008006c4 	movi	r2,27
    918c:	b8c00315 	stw	r3,12(r23)
    9190:	1180072e 	bgeu	r2,r6,91b0 <_realloc_r+0x204>
    9194:	90c00217 	ldw	r3,8(r18)
    9198:	ba000604 	addi	r8,r23,24
    919c:	91000404 	addi	r4,r18,16
    91a0:	b8c00415 	stw	r3,16(r23)
    91a4:	90800317 	ldw	r2,12(r18)
    91a8:	b8800515 	stw	r2,20(r23)
    91ac:	3140e726 	beq	r6,r5,954c <_realloc_r+0x5a0>
    91b0:	20800017 	ldw	r2,0(r4)
    91b4:	dd000017 	ldw	r20,0(sp)
    91b8:	b80f883a 	mov	r7,r23
    91bc:	40800015 	stw	r2,0(r8)
    91c0:	20c00117 	ldw	r3,4(r4)
    91c4:	40c00115 	stw	r3,4(r8)
    91c8:	20800217 	ldw	r2,8(r4)
    91cc:	40800215 	stw	r2,8(r8)
    91d0:	003f9706 	br	9030 <_realloc_r+0x84>
    91d4:	98a9883a 	add	r20,r19,r2
    91d8:	a1c01f16 	blt	r20,r7,9258 <_realloc_r+0x2ac>
    91dc:	b8c00317 	ldw	r3,12(r23)
    91e0:	b8800217 	ldw	r2,8(r23)
    91e4:	99bfff04 	addi	r6,r19,-4
    91e8:	01400904 	movi	r5,36
    91ec:	b82b883a 	mov	r21,r23
    91f0:	18800215 	stw	r2,8(r3)
    91f4:	10c00315 	stw	r3,12(r2)
    91f8:	bc000204 	addi	r16,r23,8
    91fc:	2980c336 	bltu	r5,r6,950c <_realloc_r+0x560>
    9200:	008004c4 	movi	r2,19
    9204:	9009883a 	mov	r4,r18
    9208:	8011883a 	mov	r8,r16
    920c:	11800f2e 	bgeu	r2,r6,924c <_realloc_r+0x2a0>
    9210:	90800017 	ldw	r2,0(r18)
    9214:	ba000404 	addi	r8,r23,16
    9218:	91000204 	addi	r4,r18,8
    921c:	b8800215 	stw	r2,8(r23)
    9220:	90c00117 	ldw	r3,4(r18)
    9224:	008006c4 	movi	r2,27
    9228:	b8c00315 	stw	r3,12(r23)
    922c:	1180072e 	bgeu	r2,r6,924c <_realloc_r+0x2a0>
    9230:	90c00217 	ldw	r3,8(r18)
    9234:	ba000604 	addi	r8,r23,24
    9238:	91000404 	addi	r4,r18,16
    923c:	b8c00415 	stw	r3,16(r23)
    9240:	90800317 	ldw	r2,12(r18)
    9244:	b8800515 	stw	r2,20(r23)
    9248:	3140c726 	beq	r6,r5,9568 <_realloc_r+0x5bc>
    924c:	20800017 	ldw	r2,0(r4)
    9250:	b80f883a 	mov	r7,r23
    9254:	003fd906 	br	91bc <_realloc_r+0x210>
    9258:	880b883a 	mov	r5,r17
    925c:	b009883a 	mov	r4,r22
    9260:	000747c0 	call	747c <_malloc_r>
    9264:	1023883a 	mov	r17,r2
    9268:	10002526 	beq	r2,zero,9300 <_realloc_r+0x354>
    926c:	80800117 	ldw	r2,4(r16)
    9270:	00ffff84 	movi	r3,-2
    9274:	893ffe04 	addi	r4,r17,-8
    9278:	10c4703a 	and	r2,r2,r3
    927c:	8085883a 	add	r2,r16,r2
    9280:	20809526 	beq	r4,r2,94d8 <_realloc_r+0x52c>
    9284:	99bfff04 	addi	r6,r19,-4
    9288:	01c00904 	movi	r7,36
    928c:	39804536 	bltu	r7,r6,93a4 <_realloc_r+0x3f8>
    9290:	008004c4 	movi	r2,19
    9294:	9009883a 	mov	r4,r18
    9298:	880b883a 	mov	r5,r17
    929c:	11800f2e 	bgeu	r2,r6,92dc <_realloc_r+0x330>
    92a0:	90800017 	ldw	r2,0(r18)
    92a4:	89400204 	addi	r5,r17,8
    92a8:	91000204 	addi	r4,r18,8
    92ac:	88800015 	stw	r2,0(r17)
    92b0:	90c00117 	ldw	r3,4(r18)
    92b4:	008006c4 	movi	r2,27
    92b8:	88c00115 	stw	r3,4(r17)
    92bc:	1180072e 	bgeu	r2,r6,92dc <_realloc_r+0x330>
    92c0:	90c00217 	ldw	r3,8(r18)
    92c4:	89400404 	addi	r5,r17,16
    92c8:	91000404 	addi	r4,r18,16
    92cc:	88c00215 	stw	r3,8(r17)
    92d0:	90800317 	ldw	r2,12(r18)
    92d4:	88800315 	stw	r2,12(r17)
    92d8:	31c09126 	beq	r6,r7,9520 <_realloc_r+0x574>
    92dc:	20800017 	ldw	r2,0(r4)
    92e0:	28800015 	stw	r2,0(r5)
    92e4:	20c00117 	ldw	r3,4(r4)
    92e8:	28c00115 	stw	r3,4(r5)
    92ec:	20800217 	ldw	r2,8(r4)
    92f0:	28800215 	stw	r2,8(r5)
    92f4:	900b883a 	mov	r5,r18
    92f8:	b009883a 	mov	r4,r22
    92fc:	00068c80 	call	68c8 <_free_r>
    9300:	b009883a 	mov	r4,r22
    9304:	000f7480 	call	f748 <__malloc_unlock>
    9308:	003f5e06 	br	9084 <_realloc_r+0xd8>
    930c:	300b883a 	mov	r5,r6
    9310:	dfc00b17 	ldw	ra,44(sp)
    9314:	df000a17 	ldw	fp,40(sp)
    9318:	ddc00917 	ldw	r23,36(sp)
    931c:	dd800817 	ldw	r22,32(sp)
    9320:	dd400717 	ldw	r21,28(sp)
    9324:	dd000617 	ldw	r20,24(sp)
    9328:	dcc00517 	ldw	r19,20(sp)
    932c:	dc800417 	ldw	r18,16(sp)
    9330:	dc400317 	ldw	r17,12(sp)
    9334:	dc000217 	ldw	r16,8(sp)
    9338:	dec00c04 	addi	sp,sp,48
    933c:	000747c1 	jmpi	747c <_malloc_r>
    9340:	38800117 	ldw	r2,4(r7)
    9344:	e54b883a 	add	r5,fp,r21
    9348:	31000054 	ori	r4,r6,1
    934c:	1080004c 	andi	r2,r2,1
    9350:	1704b03a 	or	r2,r2,fp
    9354:	38800115 	stw	r2,4(r7)
    9358:	29000115 	stw	r4,4(r5)
    935c:	2987883a 	add	r3,r5,r6
    9360:	18800117 	ldw	r2,4(r3)
    9364:	29400204 	addi	r5,r5,8
    9368:	b009883a 	mov	r4,r22
    936c:	10800054 	ori	r2,r2,1
    9370:	18800115 	stw	r2,4(r3)
    9374:	00068c80 	call	68c8 <_free_r>
    9378:	003f3806 	br	905c <_realloc_r+0xb0>
    937c:	000d883a 	mov	r6,zero
    9380:	0009883a 	mov	r4,zero
    9384:	003f5d06 	br	90fc <_realloc_r+0x150>
    9388:	30c00217 	ldw	r3,8(r6)
    938c:	30800317 	ldw	r2,12(r6)
    9390:	800f883a 	mov	r7,r16
    9394:	84000204 	addi	r16,r16,8
    9398:	10c00215 	stw	r3,8(r2)
    939c:	18800315 	stw	r2,12(r3)
    93a0:	003f2306 	br	9030 <_realloc_r+0x84>
    93a4:	8809883a 	mov	r4,r17
    93a8:	900b883a 	mov	r5,r18
    93ac:	0007e400 	call	7e40 <memmove>
    93b0:	003fd006 	br	92f4 <_realloc_r+0x348>
    93b4:	30800117 	ldw	r2,4(r6)
    93b8:	e0c00404 	addi	r3,fp,16
    93bc:	1108703a 	and	r4,r2,r4
    93c0:	9905883a 	add	r2,r19,r4
    93c4:	10ff4d16 	blt	r2,r3,90fc <_realloc_r+0x150>
    93c8:	1705c83a 	sub	r2,r2,fp
    93cc:	870b883a 	add	r5,r16,fp
    93d0:	10800054 	ori	r2,r2,1
    93d4:	28800115 	stw	r2,4(r5)
    93d8:	80c00117 	ldw	r3,4(r16)
    93dc:	00800074 	movhi	r2,1
    93e0:	108b0004 	addi	r2,r2,11264
    93e4:	b009883a 	mov	r4,r22
    93e8:	18c0004c 	andi	r3,r3,1
    93ec:	e0c6b03a 	or	r3,fp,r3
    93f0:	11400215 	stw	r5,8(r2)
    93f4:	80c00115 	stw	r3,4(r16)
    93f8:	000f7480 	call	f748 <__malloc_unlock>
    93fc:	84400204 	addi	r17,r16,8
    9400:	003f2006 	br	9084 <_realloc_r+0xd8>
    9404:	98a9883a 	add	r20,r19,r2
    9408:	2509883a 	add	r4,r4,r20
    940c:	e0800404 	addi	r2,fp,16
    9410:	d9000115 	stw	r4,4(sp)
    9414:	20bf7016 	blt	r4,r2,91d8 <_realloc_r+0x22c>
    9418:	b8c00317 	ldw	r3,12(r23)
    941c:	b8800217 	ldw	r2,8(r23)
    9420:	99bfff04 	addi	r6,r19,-4
    9424:	01400904 	movi	r5,36
    9428:	18800215 	stw	r2,8(r3)
    942c:	10c00315 	stw	r3,12(r2)
    9430:	bc400204 	addi	r17,r23,8
    9434:	29804136 	bltu	r5,r6,953c <_realloc_r+0x590>
    9438:	008004c4 	movi	r2,19
    943c:	9009883a 	mov	r4,r18
    9440:	880f883a 	mov	r7,r17
    9444:	11800f2e 	bgeu	r2,r6,9484 <_realloc_r+0x4d8>
    9448:	90800017 	ldw	r2,0(r18)
    944c:	b9c00404 	addi	r7,r23,16
    9450:	91000204 	addi	r4,r18,8
    9454:	b8800215 	stw	r2,8(r23)
    9458:	90c00117 	ldw	r3,4(r18)
    945c:	008006c4 	movi	r2,27
    9460:	b8c00315 	stw	r3,12(r23)
    9464:	1180072e 	bgeu	r2,r6,9484 <_realloc_r+0x4d8>
    9468:	90c00217 	ldw	r3,8(r18)
    946c:	b9c00604 	addi	r7,r23,24
    9470:	91000404 	addi	r4,r18,16
    9474:	b8c00415 	stw	r3,16(r23)
    9478:	90800317 	ldw	r2,12(r18)
    947c:	b8800515 	stw	r2,20(r23)
    9480:	31404026 	beq	r6,r5,9584 <_realloc_r+0x5d8>
    9484:	20800017 	ldw	r2,0(r4)
    9488:	38800015 	stw	r2,0(r7)
    948c:	20c00117 	ldw	r3,4(r4)
    9490:	38c00115 	stw	r3,4(r7)
    9494:	20800217 	ldw	r2,8(r4)
    9498:	38800215 	stw	r2,8(r7)
    949c:	d8c00117 	ldw	r3,4(sp)
    94a0:	bf0b883a 	add	r5,r23,fp
    94a4:	b009883a 	mov	r4,r22
    94a8:	1f05c83a 	sub	r2,r3,fp
    94ac:	10800054 	ori	r2,r2,1
    94b0:	28800115 	stw	r2,4(r5)
    94b4:	b8c00117 	ldw	r3,4(r23)
    94b8:	00800074 	movhi	r2,1
    94bc:	108b0004 	addi	r2,r2,11264
    94c0:	11400215 	stw	r5,8(r2)
    94c4:	18c0004c 	andi	r3,r3,1
    94c8:	e0c6b03a 	or	r3,fp,r3
    94cc:	b8c00115 	stw	r3,4(r23)
    94d0:	000f7480 	call	f748 <__malloc_unlock>
    94d4:	003eeb06 	br	9084 <_realloc_r+0xd8>
    94d8:	20800117 	ldw	r2,4(r4)
    94dc:	00ffff04 	movi	r3,-4
    94e0:	800f883a 	mov	r7,r16
    94e4:	10c4703a 	and	r2,r2,r3
    94e8:	98a9883a 	add	r20,r19,r2
    94ec:	84000204 	addi	r16,r16,8
    94f0:	003ecf06 	br	9030 <_realloc_r+0x84>
    94f4:	900b883a 	mov	r5,r18
    94f8:	8009883a 	mov	r4,r16
    94fc:	0007e400 	call	7e40 <memmove>
    9500:	dd000017 	ldw	r20,0(sp)
    9504:	b80f883a 	mov	r7,r23
    9508:	003ec906 	br	9030 <_realloc_r+0x84>
    950c:	900b883a 	mov	r5,r18
    9510:	8009883a 	mov	r4,r16
    9514:	0007e400 	call	7e40 <memmove>
    9518:	b80f883a 	mov	r7,r23
    951c:	003ec406 	br	9030 <_realloc_r+0x84>
    9520:	90c00417 	ldw	r3,16(r18)
    9524:	89400604 	addi	r5,r17,24
    9528:	91000604 	addi	r4,r18,24
    952c:	88c00415 	stw	r3,16(r17)
    9530:	90800517 	ldw	r2,20(r18)
    9534:	88800515 	stw	r2,20(r17)
    9538:	003f6806 	br	92dc <_realloc_r+0x330>
    953c:	900b883a 	mov	r5,r18
    9540:	8809883a 	mov	r4,r17
    9544:	0007e400 	call	7e40 <memmove>
    9548:	003fd406 	br	949c <_realloc_r+0x4f0>
    954c:	90c00417 	ldw	r3,16(r18)
    9550:	91000604 	addi	r4,r18,24
    9554:	ba000804 	addi	r8,r23,32
    9558:	b8c00615 	stw	r3,24(r23)
    955c:	90800517 	ldw	r2,20(r18)
    9560:	b8800715 	stw	r2,28(r23)
    9564:	003f1206 	br	91b0 <_realloc_r+0x204>
    9568:	90c00417 	ldw	r3,16(r18)
    956c:	91000604 	addi	r4,r18,24
    9570:	ba000804 	addi	r8,r23,32
    9574:	b8c00615 	stw	r3,24(r23)
    9578:	90800517 	ldw	r2,20(r18)
    957c:	b8800715 	stw	r2,28(r23)
    9580:	003f3206 	br	924c <_realloc_r+0x2a0>
    9584:	90c00417 	ldw	r3,16(r18)
    9588:	91000604 	addi	r4,r18,24
    958c:	b9c00804 	addi	r7,r23,32
    9590:	b8c00615 	stw	r3,24(r23)
    9594:	90800517 	ldw	r2,20(r18)
    9598:	b8800715 	stw	r2,28(r23)
    959c:	003fb906 	br	9484 <_realloc_r+0x4d8>

000095a0 <__srefill_r>:
    95a0:	defffd04 	addi	sp,sp,-12
    95a4:	dc400115 	stw	r17,4(sp)
    95a8:	dc000015 	stw	r16,0(sp)
    95ac:	dfc00215 	stw	ra,8(sp)
    95b0:	2023883a 	mov	r17,r4
    95b4:	2821883a 	mov	r16,r5
    95b8:	20000226 	beq	r4,zero,95c4 <__srefill_r+0x24>
    95bc:	20800e17 	ldw	r2,56(r4)
    95c0:	10004126 	beq	r2,zero,96c8 <__srefill_r+0x128>
    95c4:	80c0030b 	ldhu	r3,12(r16)
    95c8:	80000115 	stw	zero,4(r16)
    95cc:	1880080c 	andi	r2,r3,32
    95d0:	1000361e 	bne	r2,zero,96ac <__srefill_r+0x10c>
    95d4:	1880010c 	andi	r2,r3,4
    95d8:	1000211e 	bne	r2,zero,9660 <__srefill_r+0xc0>
    95dc:	1880040c 	andi	r2,r3,16
    95e0:	10005026 	beq	r2,zero,9724 <__srefill_r+0x184>
    95e4:	1880020c 	andi	r2,r3,8
    95e8:	1000541e 	bne	r2,zero,973c <__srefill_r+0x19c>
    95ec:	8080030b 	ldhu	r2,12(r16)
    95f0:	10800114 	ori	r2,r2,4
    95f4:	8080030d 	sth	r2,12(r16)
    95f8:	80800417 	ldw	r2,16(r16)
    95fc:	10004526 	beq	r2,zero,9714 <__srefill_r+0x174>
    9600:	8080030b 	ldhu	r2,12(r16)
    9604:	108000cc 	andi	r2,r2,3
    9608:	1000361e 	bne	r2,zero,96e4 <__srefill_r+0x144>
    960c:	81800417 	ldw	r6,16(r16)
    9610:	80c00817 	ldw	r3,32(r16)
    9614:	81400717 	ldw	r5,28(r16)
    9618:	81c00517 	ldw	r7,20(r16)
    961c:	8809883a 	mov	r4,r17
    9620:	81800015 	stw	r6,0(r16)
    9624:	183ee83a 	callr	r3
    9628:	80c0030b 	ldhu	r3,12(r16)
    962c:	1009883a 	mov	r4,r2
    9630:	80800115 	stw	r2,4(r16)
    9634:	00b7ffc4 	movi	r2,-8193
    9638:	1884703a 	and	r2,r3,r2
    963c:	8080030d 	sth	r2,12(r16)
    9640:	0100230e 	bge	zero,r4,96d0 <__srefill_r+0x130>
    9644:	0009883a 	mov	r4,zero
    9648:	2005883a 	mov	r2,r4
    964c:	dfc00217 	ldw	ra,8(sp)
    9650:	dc400117 	ldw	r17,4(sp)
    9654:	dc000017 	ldw	r16,0(sp)
    9658:	dec00304 	addi	sp,sp,12
    965c:	f800283a 	ret
    9660:	81400c17 	ldw	r5,48(r16)
    9664:	283fe426 	beq	r5,zero,95f8 <__srefill_r+0x58>
    9668:	80801004 	addi	r2,r16,64
    966c:	28800226 	beq	r5,r2,9678 <__srefill_r+0xd8>
    9670:	8809883a 	mov	r4,r17
    9674:	00068c80 	call	68c8 <_free_r>
    9678:	80800f17 	ldw	r2,60(r16)
    967c:	80000c15 	stw	zero,48(r16)
    9680:	80800115 	stw	r2,4(r16)
    9684:	103fdc26 	beq	r2,zero,95f8 <__srefill_r+0x58>
    9688:	80800e17 	ldw	r2,56(r16)
    968c:	0009883a 	mov	r4,zero
    9690:	80800015 	stw	r2,0(r16)
    9694:	2005883a 	mov	r2,r4
    9698:	dfc00217 	ldw	ra,8(sp)
    969c:	dc400117 	ldw	r17,4(sp)
    96a0:	dc000017 	ldw	r16,0(sp)
    96a4:	dec00304 	addi	sp,sp,12
    96a8:	f800283a 	ret
    96ac:	013fffc4 	movi	r4,-1
    96b0:	2005883a 	mov	r2,r4
    96b4:	dfc00217 	ldw	ra,8(sp)
    96b8:	dc400117 	ldw	r17,4(sp)
    96bc:	dc000017 	ldw	r16,0(sp)
    96c0:	dec00304 	addi	sp,sp,12
    96c4:	f800283a 	ret
    96c8:	00063080 	call	6308 <__sinit>
    96cc:	003fbd06 	br	95c4 <__srefill_r+0x24>
    96d0:	20000b1e 	bne	r4,zero,9700 <__srefill_r+0x160>
    96d4:	10800814 	ori	r2,r2,32
    96d8:	013fffc4 	movi	r4,-1
    96dc:	8080030d 	sth	r2,12(r16)
    96e0:	003fd906 	br	9648 <__srefill_r+0xa8>
    96e4:	00800074 	movhi	r2,1
    96e8:	1090fa04 	addi	r2,r2,17384
    96ec:	11000017 	ldw	r4,0(r2)
    96f0:	01400074 	movhi	r5,1
    96f4:	2965d904 	addi	r5,r5,-26780
    96f8:	00071400 	call	7140 <_fwalk>
    96fc:	003fc306 	br	960c <__srefill_r+0x6c>
    9700:	10801014 	ori	r2,r2,64
    9704:	013fffc4 	movi	r4,-1
    9708:	8080030d 	sth	r2,12(r16)
    970c:	80000115 	stw	zero,4(r16)
    9710:	003fcd06 	br	9648 <__srefill_r+0xa8>
    9714:	8809883a 	mov	r4,r17
    9718:	800b883a 	mov	r5,r16
    971c:	00072e80 	call	72e8 <__smakebuf_r>
    9720:	003fb706 	br	9600 <__srefill_r+0x60>
    9724:	18c01014 	ori	r3,r3,64
    9728:	00800244 	movi	r2,9
    972c:	013fffc4 	movi	r4,-1
    9730:	88800015 	stw	r2,0(r17)
    9734:	80c0030d 	sth	r3,12(r16)
    9738:	003fc306 	br	9648 <__srefill_r+0xa8>
    973c:	8809883a 	mov	r4,r17
    9740:	800b883a 	mov	r5,r16
    9744:	00060700 	call	6070 <_fflush_r>
    9748:	103fd81e 	bne	r2,zero,96ac <__srefill_r+0x10c>
    974c:	8080030b 	ldhu	r2,12(r16)
    9750:	80000215 	stw	zero,8(r16)
    9754:	80000615 	stw	zero,24(r16)
    9758:	10bffdcc 	andi	r2,r2,65527
    975c:	8080030d 	sth	r2,12(r16)
    9760:	003fa206 	br	95ec <__srefill_r+0x4c>

00009764 <lflush>:
    9764:	20c0030b 	ldhu	r3,12(r4)
    9768:	01400244 	movi	r5,9
    976c:	0005883a 	mov	r2,zero
    9770:	18c0024c 	andi	r3,r3,9
    9774:	19400126 	beq	r3,r5,977c <lflush+0x18>
    9778:	f800283a 	ret
    977c:	000626c1 	jmpi	626c <fflush>

00009780 <__isinfd>:
    9780:	200d883a 	mov	r6,r4
    9784:	0109c83a 	sub	r4,zero,r4
    9788:	2188b03a 	or	r4,r4,r6
    978c:	2008d7fa 	srli	r4,r4,31
    9790:	00a00034 	movhi	r2,32768
    9794:	10bfffc4 	addi	r2,r2,-1
    9798:	1144703a 	and	r2,r2,r5
    979c:	2088b03a 	or	r4,r4,r2
    97a0:	009ffc34 	movhi	r2,32752
    97a4:	1105c83a 	sub	r2,r2,r4
    97a8:	0087c83a 	sub	r3,zero,r2
    97ac:	10c4b03a 	or	r2,r2,r3
    97b0:	1004d7fa 	srli	r2,r2,31
    97b4:	00c00044 	movi	r3,1
    97b8:	1885c83a 	sub	r2,r3,r2
    97bc:	f800283a 	ret

000097c0 <__isnand>:
    97c0:	200d883a 	mov	r6,r4
    97c4:	0109c83a 	sub	r4,zero,r4
    97c8:	2188b03a 	or	r4,r4,r6
    97cc:	2008d7fa 	srli	r4,r4,31
    97d0:	00a00034 	movhi	r2,32768
    97d4:	10bfffc4 	addi	r2,r2,-1
    97d8:	1144703a 	and	r2,r2,r5
    97dc:	2088b03a 	or	r4,r4,r2
    97e0:	009ffc34 	movhi	r2,32752
    97e4:	1105c83a 	sub	r2,r2,r4
    97e8:	1004d7fa 	srli	r2,r2,31
    97ec:	f800283a 	ret

000097f0 <_sbrk_r>:
    97f0:	defffd04 	addi	sp,sp,-12
    97f4:	dc000015 	stw	r16,0(sp)
    97f8:	04000074 	movhi	r16,1
    97fc:	84181b04 	addi	r16,r16,24684
    9800:	dc400115 	stw	r17,4(sp)
    9804:	80000015 	stw	zero,0(r16)
    9808:	2023883a 	mov	r17,r4
    980c:	2809883a 	mov	r4,r5
    9810:	dfc00215 	stw	ra,8(sp)
    9814:	000fa6c0 	call	fa6c <sbrk>
    9818:	1007883a 	mov	r3,r2
    981c:	00bfffc4 	movi	r2,-1
    9820:	18800626 	beq	r3,r2,983c <_sbrk_r+0x4c>
    9824:	1805883a 	mov	r2,r3
    9828:	dfc00217 	ldw	ra,8(sp)
    982c:	dc400117 	ldw	r17,4(sp)
    9830:	dc000017 	ldw	r16,0(sp)
    9834:	dec00304 	addi	sp,sp,12
    9838:	f800283a 	ret
    983c:	80800017 	ldw	r2,0(r16)
    9840:	103ff826 	beq	r2,zero,9824 <_sbrk_r+0x34>
    9844:	88800015 	stw	r2,0(r17)
    9848:	1805883a 	mov	r2,r3
    984c:	dfc00217 	ldw	ra,8(sp)
    9850:	dc400117 	ldw	r17,4(sp)
    9854:	dc000017 	ldw	r16,0(sp)
    9858:	dec00304 	addi	sp,sp,12
    985c:	f800283a 	ret

00009860 <__sccl>:
    9860:	28c00003 	ldbu	r3,0(r5)
    9864:	00801784 	movi	r2,94
    9868:	2a000044 	addi	r8,r5,1
    986c:	18802526 	beq	r3,r2,9904 <__sccl+0xa4>
    9870:	180f883a 	mov	r7,r3
    9874:	0013883a 	mov	r9,zero
    9878:	000d883a 	mov	r6,zero
    987c:	0007883a 	mov	r3,zero
    9880:	01404004 	movi	r5,256
    9884:	1905883a 	add	r2,r3,r4
    9888:	18c00044 	addi	r3,r3,1
    988c:	11800005 	stb	r6,0(r2)
    9890:	197ffc1e 	bne	r3,r5,9884 <__sccl+0x24>
    9894:	38000c26 	beq	r7,zero,98c8 <__sccl+0x68>
    9898:	00800044 	movi	r2,1
    989c:	124dc83a 	sub	r6,r2,r9
    98a0:	3905883a 	add	r2,r7,r4
    98a4:	11800005 	stb	r6,0(r2)
    98a8:	41400044 	addi	r5,r8,1
    98ac:	02400b44 	movi	r9,45
    98b0:	02801744 	movi	r10,93
    98b4:	28bfffc3 	ldbu	r2,-1(r5)
    98b8:	2811883a 	mov	r8,r5
    98bc:	12400726 	beq	r2,r9,98dc <__sccl+0x7c>
    98c0:	12800226 	beq	r2,r10,98cc <__sccl+0x6c>
    98c4:	1000031e 	bne	r2,zero,98d4 <__sccl+0x74>
    98c8:	423fffc4 	addi	r8,r8,-1
    98cc:	4005883a 	mov	r2,r8
    98d0:	f800283a 	ret
    98d4:	100f883a 	mov	r7,r2
    98d8:	003ff106 	br	98a0 <__sccl+0x40>
    98dc:	28c00003 	ldbu	r3,0(r5)
    98e0:	1a800d26 	beq	r3,r10,9918 <__sccl+0xb8>
    98e4:	19c00c16 	blt	r3,r7,9918 <__sccl+0xb8>
    98e8:	21c5883a 	add	r2,r4,r7
    98ec:	39c00044 	addi	r7,r7,1
    98f0:	11800045 	stb	r6,1(r2)
    98f4:	10800044 	addi	r2,r2,1
    98f8:	38fffc16 	blt	r7,r3,98ec <__sccl+0x8c>
    98fc:	29400084 	addi	r5,r5,2
    9900:	003fec06 	br	98b4 <__sccl+0x54>
    9904:	29c00043 	ldbu	r7,1(r5)
    9908:	02400044 	movi	r9,1
    990c:	2a000084 	addi	r8,r5,2
    9910:	480d883a 	mov	r6,r9
    9914:	003fd906 	br	987c <__sccl+0x1c>
    9918:	01c00b44 	movi	r7,45
    991c:	003fe006 	br	98a0 <__sccl+0x40>

00009920 <nanf>:
    9920:	009ff034 	movhi	r2,32704
    9924:	f800283a 	ret

00009928 <sprintf>:
    9928:	deffe504 	addi	sp,sp,-108
    992c:	2013883a 	mov	r9,r4
    9930:	dfc01815 	stw	ra,96(sp)
    9934:	d9801915 	stw	r6,100(sp)
    9938:	d9c01a15 	stw	r7,104(sp)
    993c:	d8801904 	addi	r2,sp,100
    9940:	d8800015 	stw	r2,0(sp)
    9944:	00800074 	movhi	r2,1
    9948:	1090f904 	addi	r2,r2,17380
    994c:	11000017 	ldw	r4,0(r2)
    9950:	d9c00017 	ldw	r7,0(sp)
    9954:	00808204 	movi	r2,520
    9958:	00e00034 	movhi	r3,32768
    995c:	18ffffc4 	addi	r3,r3,-1
    9960:	280d883a 	mov	r6,r5
    9964:	d880040d 	sth	r2,16(sp)
    9968:	d9400104 	addi	r5,sp,4
    996c:	00bfffc4 	movi	r2,-1
    9970:	d8c00615 	stw	r3,24(sp)
    9974:	d8c00315 	stw	r3,12(sp)
    9978:	da400515 	stw	r9,20(sp)
    997c:	d880048d 	sth	r2,18(sp)
    9980:	da400115 	stw	r9,4(sp)
    9984:	00011180 	call	1118 <___vfprintf_internal_r>
    9988:	d8c00117 	ldw	r3,4(sp)
    998c:	18000005 	stb	zero,0(r3)
    9990:	dfc01817 	ldw	ra,96(sp)
    9994:	dec01b04 	addi	sp,sp,108
    9998:	f800283a 	ret

0000999c <_sprintf_r>:
    999c:	deffe604 	addi	sp,sp,-104
    99a0:	2813883a 	mov	r9,r5
    99a4:	dfc01815 	stw	ra,96(sp)
    99a8:	d9c01915 	stw	r7,100(sp)
    99ac:	d8801904 	addi	r2,sp,100
    99b0:	d8800015 	stw	r2,0(sp)
    99b4:	100f883a 	mov	r7,r2
    99b8:	00808204 	movi	r2,520
    99bc:	00e00034 	movhi	r3,32768
    99c0:	18ffffc4 	addi	r3,r3,-1
    99c4:	d880040d 	sth	r2,16(sp)
    99c8:	d9400104 	addi	r5,sp,4
    99cc:	00bfffc4 	movi	r2,-1
    99d0:	d8c00615 	stw	r3,24(sp)
    99d4:	d8c00315 	stw	r3,12(sp)
    99d8:	da400515 	stw	r9,20(sp)
    99dc:	d880048d 	sth	r2,18(sp)
    99e0:	da400115 	stw	r9,4(sp)
    99e4:	00011180 	call	1118 <___vfprintf_internal_r>
    99e8:	d8c00117 	ldw	r3,4(sp)
    99ec:	18000005 	stb	zero,0(r3)
    99f0:	dfc01817 	ldw	ra,96(sp)
    99f4:	dec01a04 	addi	sp,sp,104
    99f8:	f800283a 	ret

000099fc <__sclose>:
    99fc:	2940038f 	ldh	r5,14(r5)
    9a00:	000c1681 	jmpi	c168 <_close_r>

00009a04 <__sseek>:
    9a04:	defffe04 	addi	sp,sp,-8
    9a08:	dc000015 	stw	r16,0(sp)
    9a0c:	2821883a 	mov	r16,r5
    9a10:	2940038f 	ldh	r5,14(r5)
    9a14:	dfc00115 	stw	ra,4(sp)
    9a18:	000cf680 	call	cf68 <_lseek_r>
    9a1c:	1007883a 	mov	r3,r2
    9a20:	00bfffc4 	movi	r2,-1
    9a24:	18800926 	beq	r3,r2,9a4c <__sseek+0x48>
    9a28:	8080030b 	ldhu	r2,12(r16)
    9a2c:	80c01415 	stw	r3,80(r16)
    9a30:	10840014 	ori	r2,r2,4096
    9a34:	8080030d 	sth	r2,12(r16)
    9a38:	1805883a 	mov	r2,r3
    9a3c:	dfc00117 	ldw	ra,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00204 	addi	sp,sp,8
    9a48:	f800283a 	ret
    9a4c:	8080030b 	ldhu	r2,12(r16)
    9a50:	10bbffcc 	andi	r2,r2,61439
    9a54:	8080030d 	sth	r2,12(r16)
    9a58:	1805883a 	mov	r2,r3
    9a5c:	dfc00117 	ldw	ra,4(sp)
    9a60:	dc000017 	ldw	r16,0(sp)
    9a64:	dec00204 	addi	sp,sp,8
    9a68:	f800283a 	ret

00009a6c <__swrite>:
    9a6c:	2880030b 	ldhu	r2,12(r5)
    9a70:	defffb04 	addi	sp,sp,-20
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	1080400c 	andi	r2,r2,256
    9a7c:	dc800215 	stw	r18,8(sp)
    9a80:	dc400115 	stw	r17,4(sp)
    9a84:	dc000015 	stw	r16,0(sp)
    9a88:	3027883a 	mov	r19,r6
    9a8c:	3825883a 	mov	r18,r7
    9a90:	dfc00415 	stw	ra,16(sp)
    9a94:	2821883a 	mov	r16,r5
    9a98:	000d883a 	mov	r6,zero
    9a9c:	01c00084 	movi	r7,2
    9aa0:	2023883a 	mov	r17,r4
    9aa4:	10000226 	beq	r2,zero,9ab0 <__swrite+0x44>
    9aa8:	2940038f 	ldh	r5,14(r5)
    9aac:	000cf680 	call	cf68 <_lseek_r>
    9ab0:	8080030b 	ldhu	r2,12(r16)
    9ab4:	8140038f 	ldh	r5,14(r16)
    9ab8:	8809883a 	mov	r4,r17
    9abc:	10bbffcc 	andi	r2,r2,61439
    9ac0:	980d883a 	mov	r6,r19
    9ac4:	900f883a 	mov	r7,r18
    9ac8:	8080030d 	sth	r2,12(r16)
    9acc:	dfc00417 	ldw	ra,16(sp)
    9ad0:	dcc00317 	ldw	r19,12(sp)
    9ad4:	dc800217 	ldw	r18,8(sp)
    9ad8:	dc400117 	ldw	r17,4(sp)
    9adc:	dc000017 	ldw	r16,0(sp)
    9ae0:	dec00504 	addi	sp,sp,20
    9ae4:	000c03c1 	jmpi	c03c <_write_r>

00009ae8 <__sread>:
    9ae8:	defffe04 	addi	sp,sp,-8
    9aec:	dc000015 	stw	r16,0(sp)
    9af0:	2821883a 	mov	r16,r5
    9af4:	2940038f 	ldh	r5,14(r5)
    9af8:	dfc00115 	stw	ra,4(sp)
    9afc:	000cfe00 	call	cfe0 <_read_r>
    9b00:	1007883a 	mov	r3,r2
    9b04:	10000816 	blt	r2,zero,9b28 <__sread+0x40>
    9b08:	80801417 	ldw	r2,80(r16)
    9b0c:	10c5883a 	add	r2,r2,r3
    9b10:	80801415 	stw	r2,80(r16)
    9b14:	1805883a 	mov	r2,r3
    9b18:	dfc00117 	ldw	ra,4(sp)
    9b1c:	dc000017 	ldw	r16,0(sp)
    9b20:	dec00204 	addi	sp,sp,8
    9b24:	f800283a 	ret
    9b28:	8080030b 	ldhu	r2,12(r16)
    9b2c:	10bbffcc 	andi	r2,r2,61439
    9b30:	8080030d 	sth	r2,12(r16)
    9b34:	1805883a 	mov	r2,r3
    9b38:	dfc00117 	ldw	ra,4(sp)
    9b3c:	dc000017 	ldw	r16,0(sp)
    9b40:	dec00204 	addi	sp,sp,8
    9b44:	f800283a 	ret

00009b48 <strcmp>:
    9b48:	2144b03a 	or	r2,r4,r5
    9b4c:	108000cc 	andi	r2,r2,3
    9b50:	10001d1e 	bne	r2,zero,9bc8 <strcmp+0x80>
    9b54:	200f883a 	mov	r7,r4
    9b58:	28800017 	ldw	r2,0(r5)
    9b5c:	21000017 	ldw	r4,0(r4)
    9b60:	280d883a 	mov	r6,r5
    9b64:	2080161e 	bne	r4,r2,9bc0 <strcmp+0x78>
    9b68:	023fbff4 	movhi	r8,65279
    9b6c:	423fbfc4 	addi	r8,r8,-257
    9b70:	2207883a 	add	r3,r4,r8
    9b74:	01602074 	movhi	r5,32897
    9b78:	29602004 	addi	r5,r5,-32640
    9b7c:	1946703a 	and	r3,r3,r5
    9b80:	0104303a 	nor	r2,zero,r4
    9b84:	10c4703a 	and	r2,r2,r3
    9b88:	10001c1e 	bne	r2,zero,9bfc <strcmp+0xb4>
    9b8c:	4013883a 	mov	r9,r8
    9b90:	2811883a 	mov	r8,r5
    9b94:	00000106 	br	9b9c <strcmp+0x54>
    9b98:	1800181e 	bne	r3,zero,9bfc <strcmp+0xb4>
    9b9c:	39c00104 	addi	r7,r7,4
    9ba0:	39000017 	ldw	r4,0(r7)
    9ba4:	31800104 	addi	r6,r6,4
    9ba8:	31400017 	ldw	r5,0(r6)
    9bac:	2245883a 	add	r2,r4,r9
    9bb0:	1204703a 	and	r2,r2,r8
    9bb4:	0106303a 	nor	r3,zero,r4
    9bb8:	1886703a 	and	r3,r3,r2
    9bbc:	217ff626 	beq	r4,r5,9b98 <strcmp+0x50>
    9bc0:	3809883a 	mov	r4,r7
    9bc4:	300b883a 	mov	r5,r6
    9bc8:	20c00007 	ldb	r3,0(r4)
    9bcc:	1800051e 	bne	r3,zero,9be4 <strcmp+0x9c>
    9bd0:	00000606 	br	9bec <strcmp+0xa4>
    9bd4:	21000044 	addi	r4,r4,1
    9bd8:	20c00007 	ldb	r3,0(r4)
    9bdc:	29400044 	addi	r5,r5,1
    9be0:	18000226 	beq	r3,zero,9bec <strcmp+0xa4>
    9be4:	28800007 	ldb	r2,0(r5)
    9be8:	18bffa26 	beq	r3,r2,9bd4 <strcmp+0x8c>
    9bec:	20c00003 	ldbu	r3,0(r4)
    9bf0:	28800003 	ldbu	r2,0(r5)
    9bf4:	1885c83a 	sub	r2,r3,r2
    9bf8:	f800283a 	ret
    9bfc:	0005883a 	mov	r2,zero
    9c00:	f800283a 	ret

00009c04 <strlen>:
    9c04:	208000cc 	andi	r2,r4,3
    9c08:	2011883a 	mov	r8,r4
    9c0c:	1000161e 	bne	r2,zero,9c68 <strlen+0x64>
    9c10:	20c00017 	ldw	r3,0(r4)
    9c14:	017fbff4 	movhi	r5,65279
    9c18:	297fbfc4 	addi	r5,r5,-257
    9c1c:	01e02074 	movhi	r7,32897
    9c20:	39e02004 	addi	r7,r7,-32640
    9c24:	1945883a 	add	r2,r3,r5
    9c28:	11c4703a 	and	r2,r2,r7
    9c2c:	00c6303a 	nor	r3,zero,r3
    9c30:	1886703a 	and	r3,r3,r2
    9c34:	18000c1e 	bne	r3,zero,9c68 <strlen+0x64>
    9c38:	280d883a 	mov	r6,r5
    9c3c:	380b883a 	mov	r5,r7
    9c40:	21000104 	addi	r4,r4,4
    9c44:	20800017 	ldw	r2,0(r4)
    9c48:	1187883a 	add	r3,r2,r6
    9c4c:	1946703a 	and	r3,r3,r5
    9c50:	0084303a 	nor	r2,zero,r2
    9c54:	10c4703a 	and	r2,r2,r3
    9c58:	103ff926 	beq	r2,zero,9c40 <strlen+0x3c>
    9c5c:	20800007 	ldb	r2,0(r4)
    9c60:	10000326 	beq	r2,zero,9c70 <strlen+0x6c>
    9c64:	21000044 	addi	r4,r4,1
    9c68:	20800007 	ldb	r2,0(r4)
    9c6c:	103ffd1e 	bne	r2,zero,9c64 <strlen+0x60>
    9c70:	2205c83a 	sub	r2,r4,r8
    9c74:	f800283a 	ret

00009c78 <match>:
    9c78:	21800017 	ldw	r6,0(r4)
    9c7c:	01c01004 	movi	r7,64
    9c80:	02001684 	movi	r8,90
    9c84:	28800007 	ldb	r2,0(r5)
    9c88:	29400044 	addi	r5,r5,1
    9c8c:	10000826 	beq	r2,zero,9cb0 <match+0x38>
    9c90:	31800044 	addi	r6,r6,1
    9c94:	30c00007 	ldb	r3,0(r6)
    9c98:	38c0020e 	bge	r7,r3,9ca4 <match+0x2c>
    9c9c:	40c00116 	blt	r8,r3,9ca4 <match+0x2c>
    9ca0:	18c00804 	addi	r3,r3,32
    9ca4:	18bff726 	beq	r3,r2,9c84 <match+0xc>
    9ca8:	0005883a 	mov	r2,zero
    9cac:	f800283a 	ret
    9cb0:	30800044 	addi	r2,r6,1
    9cb4:	20800015 	stw	r2,0(r4)
    9cb8:	00800044 	movi	r2,1
    9cbc:	f800283a 	ret

00009cc0 <_strtod_r>:
    9cc0:	deffde04 	addi	sp,sp,-136
    9cc4:	df002015 	stw	fp,128(sp)
    9cc8:	dd401d15 	stw	r21,116(sp)
    9ccc:	dc401915 	stw	r17,100(sp)
    9cd0:	dfc02115 	stw	ra,132(sp)
    9cd4:	ddc01f15 	stw	r23,124(sp)
    9cd8:	dd801e15 	stw	r22,120(sp)
    9cdc:	dd001c15 	stw	r20,112(sp)
    9ce0:	dcc01b15 	stw	r19,108(sp)
    9ce4:	dc801a15 	stw	r18,104(sp)
    9ce8:	dc001815 	stw	r16,96(sp)
    9cec:	2823883a 	mov	r17,r5
    9cf0:	202b883a 	mov	r21,r4
    9cf4:	d9801515 	stw	r6,84(sp)
    9cf8:	d8000915 	stw	zero,36(sp)
    9cfc:	d8000a15 	stw	zero,40(sp)
    9d00:	d9400415 	stw	r5,16(sp)
    9d04:	df000904 	addi	fp,sp,36
    9d08:	da000417 	ldw	r8,16(sp)
    9d0c:	00800b44 	movi	r2,45
    9d10:	40c00003 	ldbu	r3,0(r8)
    9d14:	10c03536 	bltu	r2,r3,9dec <_strtod_r+0x12c>
    9d18:	18c5883a 	add	r2,r3,r3
    9d1c:	1085883a 	add	r2,r2,r2
    9d20:	00c00074 	movhi	r3,1
    9d24:	18e74d04 	addi	r3,r3,-25292
    9d28:	10c5883a 	add	r2,r2,r3
    9d2c:	11000017 	ldw	r4,0(r2)
    9d30:	2000683a 	jmp	r4
    9d34:	00009f28 	cmpgeui	zero,zero,636
    9d38:	00009dec 	andhi	zero,zero,631
    9d3c:	00009dec 	andhi	zero,zero,631
    9d40:	00009dec 	andhi	zero,zero,631
    9d44:	00009dec 	andhi	zero,zero,631
    9d48:	00009dec 	andhi	zero,zero,631
    9d4c:	00009dec 	andhi	zero,zero,631
    9d50:	00009dec 	andhi	zero,zero,631
    9d54:	00009dec 	andhi	zero,zero,631
    9d58:	0000a240 	call	a24 <__pack_f+0x3c>
    9d5c:	0000a240 	call	a24 <__pack_f+0x3c>
    9d60:	0000a240 	call	a24 <__pack_f+0x3c>
    9d64:	0000a240 	call	a24 <__pack_f+0x3c>
    9d68:	0000a240 	call	a24 <__pack_f+0x3c>
    9d6c:	00009dec 	andhi	zero,zero,631
    9d70:	00009dec 	andhi	zero,zero,631
    9d74:	00009dec 	andhi	zero,zero,631
    9d78:	00009dec 	andhi	zero,zero,631
    9d7c:	00009dec 	andhi	zero,zero,631
    9d80:	00009dec 	andhi	zero,zero,631
    9d84:	00009dec 	andhi	zero,zero,631
    9d88:	00009dec 	andhi	zero,zero,631
    9d8c:	00009dec 	andhi	zero,zero,631
    9d90:	00009dec 	andhi	zero,zero,631
    9d94:	00009dec 	andhi	zero,zero,631
    9d98:	00009dec 	andhi	zero,zero,631
    9d9c:	00009dec 	andhi	zero,zero,631
    9da0:	00009dec 	andhi	zero,zero,631
    9da4:	00009dec 	andhi	zero,zero,631
    9da8:	00009dec 	andhi	zero,zero,631
    9dac:	00009dec 	andhi	zero,zero,631
    9db0:	00009dec 	andhi	zero,zero,631
    9db4:	0000a240 	call	a24 <__pack_f+0x3c>
    9db8:	00009dec 	andhi	zero,zero,631
    9dbc:	00009dec 	andhi	zero,zero,631
    9dc0:	00009dec 	andhi	zero,zero,631
    9dc4:	00009dec 	andhi	zero,zero,631
    9dc8:	00009dec 	andhi	zero,zero,631
    9dcc:	00009dec 	andhi	zero,zero,631
    9dd0:	00009dec 	andhi	zero,zero,631
    9dd4:	00009dec 	andhi	zero,zero,631
    9dd8:	00009dec 	andhi	zero,zero,631
    9ddc:	00009dec 	andhi	zero,zero,631
    9de0:	0000a220 	cmpeqi	zero,zero,648
    9de4:	00009dec 	andhi	zero,zero,631
    9de8:	0000a24c 	andi	zero,zero,649
    9dec:	d8001115 	stw	zero,68(sp)
    9df0:	40c00007 	ldb	r3,0(r8)
    9df4:	00800c04 	movi	r2,48
    9df8:	1880d026 	beq	r3,r2,a13c <_strtod_r+0x47c>
    9dfc:	001f883a 	mov	r15,zero
    9e00:	41000007 	ldb	r4,0(r8)
    9e04:	00c00bc4 	movi	r3,47
    9e08:	402d883a 	mov	r22,r8
    9e0c:	1903470e 	bge	r3,r4,ab2c <_strtod_r+0xe6c>
    9e10:	00800e44 	movi	r2,57
    9e14:	11034516 	blt	r2,r4,ab2c <_strtod_r+0xe6c>
    9e18:	180f883a 	mov	r7,r3
    9e1c:	1013883a 	mov	r9,r2
    9e20:	4007883a 	mov	r3,r8
    9e24:	000d883a 	mov	r6,zero
    9e28:	0029883a 	mov	r20,zero
    9e2c:	0021883a 	mov	r16,zero
    9e30:	01400204 	movi	r5,8
    9e34:	028003c4 	movi	r10,15
    9e38:	29803116 	blt	r5,r6,9f00 <_strtod_r+0x240>
    9e3c:	a08002a4 	muli	r2,r20,10
    9e40:	1105883a 	add	r2,r2,r4
    9e44:	153ff404 	addi	r20,r2,-48
    9e48:	1a000044 	addi	r8,r3,1
    9e4c:	da000415 	stw	r8,16(sp)
    9e50:	41000007 	ldb	r4,0(r8)
    9e54:	31800044 	addi	r6,r6,1
    9e58:	4007883a 	mov	r3,r8
    9e5c:	3900010e 	bge	r7,r4,9e64 <_strtod_r+0x1a4>
    9e60:	493ff50e 	bge	r9,r4,9e38 <_strtod_r+0x178>
    9e64:	00800b84 	movi	r2,46
    9e68:	2080c126 	beq	r4,r2,a170 <_strtod_r+0x4b0>
    9e6c:	3027883a 	mov	r19,r6
    9e70:	0025883a 	mov	r18,zero
    9e74:	0015883a 	mov	r10,zero
    9e78:	000f883a 	mov	r7,zero
    9e7c:	00801944 	movi	r2,101
    9e80:	20802426 	beq	r4,r2,9f14 <_strtod_r+0x254>
    9e84:	00801144 	movi	r2,69
    9e88:	20802226 	beq	r4,r2,9f14 <_strtod_r+0x254>
    9e8c:	9816c03a 	cmpne	r11,r19,zero
    9e90:	000b883a 	mov	r5,zero
    9e94:	5800631e 	bne	r11,zero,a024 <_strtod_r+0x364>
    9e98:	3800c126 	beq	r7,zero,a1a0 <_strtod_r+0x4e0>
    9e9c:	d8c01517 	ldw	r3,84(sp)
    9ea0:	18000226 	beq	r3,zero,9eac <_strtod_r+0x1ec>
    9ea4:	d8800417 	ldw	r2,16(sp)
    9ea8:	18800015 	stw	r2,0(r3)
    9eac:	d9001117 	ldw	r4,68(sp)
    9eb0:	2005003a 	cmpeq	r2,r4,zero
    9eb4:	10001f1e 	bne	r2,zero,9f34 <_strtod_r+0x274>
    9eb8:	e0800017 	ldw	r2,0(fp)
    9ebc:	e0c00117 	ldw	r3,4(fp)
    9ec0:	1009883a 	mov	r4,r2
    9ec4:	1960003c 	xorhi	r5,r3,32768
    9ec8:	2005883a 	mov	r2,r4
    9ecc:	2807883a 	mov	r3,r5
    9ed0:	dfc02117 	ldw	ra,132(sp)
    9ed4:	df002017 	ldw	fp,128(sp)
    9ed8:	ddc01f17 	ldw	r23,124(sp)
    9edc:	dd801e17 	ldw	r22,120(sp)
    9ee0:	dd401d17 	ldw	r21,116(sp)
    9ee4:	dd001c17 	ldw	r20,112(sp)
    9ee8:	dcc01b17 	ldw	r19,108(sp)
    9eec:	dc801a17 	ldw	r18,104(sp)
    9ef0:	dc401917 	ldw	r17,100(sp)
    9ef4:	dc001817 	ldw	r16,96(sp)
    9ef8:	dec02204 	addi	sp,sp,136
    9efc:	f800283a 	ret
    9f00:	51bfd116 	blt	r10,r6,9e48 <_strtod_r+0x188>
    9f04:	808002a4 	muli	r2,r16,10
    9f08:	1105883a 	add	r2,r2,r4
    9f0c:	143ff404 	addi	r16,r2,-48
    9f10:	003fcd06 	br	9e48 <_strtod_r+0x188>
    9f14:	9816c03a 	cmpne	r11,r19,zero
    9f18:	5800091e 	bne	r11,zero,9f40 <_strtod_r+0x280>
    9f1c:	3800081e 	bne	r7,zero,9f40 <_strtod_r+0x280>
    9f20:	7805003a 	cmpeq	r2,r15,zero
    9f24:	10000626 	beq	r2,zero,9f40 <_strtod_r+0x280>
    9f28:	d8001115 	stw	zero,68(sp)
    9f2c:	dc400415 	stw	r17,16(sp)
    9f30:	003fda06 	br	9e9c <_strtod_r+0x1dc>
    9f34:	e1000017 	ldw	r4,0(fp)
    9f38:	e1400117 	ldw	r5,4(fp)
    9f3c:	003fe206 	br	9ec8 <_strtod_r+0x208>
    9f40:	dc400417 	ldw	r17,16(sp)
    9f44:	00800ac4 	movi	r2,43
    9f48:	8a000044 	addi	r8,r17,1
    9f4c:	da000415 	stw	r8,16(sp)
    9f50:	88c00047 	ldb	r3,1(r17)
    9f54:	4009883a 	mov	r4,r8
    9f58:	1880bf26 	beq	r3,r2,a258 <_strtod_r+0x598>
    9f5c:	00800b44 	movi	r2,45
    9f60:	18834526 	beq	r3,r2,ac78 <_strtod_r+0xfb8>
    9f64:	1809883a 	mov	r4,r3
    9f68:	20fff404 	addi	r3,r4,-48
    9f6c:	00800244 	movi	r2,9
    9f70:	001d883a 	mov	r14,zero
    9f74:	10c0bf36 	bltu	r2,r3,a274 <_strtod_r+0x5b4>
    9f78:	00800c04 	movi	r2,48
    9f7c:	2080061e 	bne	r4,r2,9f98 <_strtod_r+0x2d8>
    9f80:	da000417 	ldw	r8,16(sp)
    9f84:	2005883a 	mov	r2,r4
    9f88:	42000044 	addi	r8,r8,1
    9f8c:	da000415 	stw	r8,16(sp)
    9f90:	41000007 	ldb	r4,0(r8)
    9f94:	20bffc26 	beq	r4,r2,9f88 <_strtod_r+0x2c8>
    9f98:	20fff3c4 	addi	r3,r4,-49
    9f9c:	00800204 	movi	r2,8
    9fa0:	10ffbb36 	bltu	r2,r3,9e90 <_strtod_r+0x1d0>
    9fa4:	da000417 	ldw	r8,16(sp)
    9fa8:	227ff404 	addi	r9,r4,-48
    9fac:	03000bc4 	movi	r12,47
    9fb0:	4007883a 	mov	r3,r8
    9fb4:	42000044 	addi	r8,r8,1
    9fb8:	da000415 	stw	r8,16(sp)
    9fbc:	41000007 	ldb	r4,0(r8)
    9fc0:	61000d0e 	bge	r12,r4,9ff8 <_strtod_r+0x338>
    9fc4:	00800e44 	movi	r2,57
    9fc8:	11000b16 	blt	r2,r4,9ff8 <_strtod_r+0x338>
    9fcc:	601b883a 	mov	r13,r12
    9fd0:	1019883a 	mov	r12,r2
    9fd4:	00000106 	br	9fdc <_strtod_r+0x31c>
    9fd8:	61000716 	blt	r12,r4,9ff8 <_strtod_r+0x338>
    9fdc:	488002a4 	muli	r2,r9,10
    9fe0:	42000044 	addi	r8,r8,1
    9fe4:	da000415 	stw	r8,16(sp)
    9fe8:	2085883a 	add	r2,r4,r2
    9fec:	41000007 	ldb	r4,0(r8)
    9ff0:	127ff404 	addi	r9,r2,-48
    9ff4:	693ff816 	blt	r13,r4,9fd8 <_strtod_r+0x318>
    9ff8:	40c7c83a 	sub	r3,r8,r3
    9ffc:	00800204 	movi	r2,8
    a000:	10c2e416 	blt	r2,r3,ab94 <_strtod_r+0xed4>
    a004:	009387c4 	movi	r2,19999
    a008:	480b883a 	mov	r5,r9
    a00c:	1240010e 	bge	r2,r9,a014 <_strtod_r+0x354>
    a010:	100b883a 	mov	r5,r2
    a014:	7005003a 	cmpeq	r2,r14,zero
    a018:	103f9e1e 	bne	r2,zero,9e94 <_strtod_r+0x1d4>
    a01c:	014bc83a 	sub	r5,zero,r5
    a020:	583f9d26 	beq	r11,zero,9e98 <_strtod_r+0x1d8>
    a024:	2a8bc83a 	sub	r5,r5,r10
    a028:	d9400f15 	stw	r5,60(sp)
    a02c:	30007a1e 	bne	r6,zero,a218 <_strtod_r+0x558>
    a030:	dcc01215 	stw	r19,72(sp)
    a034:	00800404 	movi	r2,16
    a038:	9825883a 	mov	r18,r19
    a03c:	14c0010e 	bge	r2,r19,a044 <_strtod_r+0x384>
    a040:	1025883a 	mov	r18,r2
    a044:	a009883a 	mov	r4,r20
    a048:	000eea40 	call	eea4 <__floatunsidf>
    a04c:	100f883a 	mov	r7,r2
    a050:	e0800015 	stw	r2,0(fp)
    a054:	00800244 	movi	r2,9
    a058:	e0c00115 	stw	r3,4(fp)
    a05c:	1480160e 	bge	r2,r18,a0b8 <_strtod_r+0x3f8>
    a060:	900c90fa 	slli	r6,r18,3
    a064:	01000074 	movhi	r4,1
    a068:	21096a04 	addi	r4,r4,9640
    a06c:	180b883a 	mov	r5,r3
    a070:	310d883a 	add	r6,r6,r4
    a074:	30ffef17 	ldw	r3,-68(r6)
    a078:	30bfee17 	ldw	r2,-72(r6)
    a07c:	3809883a 	mov	r4,r7
    a080:	180f883a 	mov	r7,r3
    a084:	100d883a 	mov	r6,r2
    a088:	000e3140 	call	e314 <__muldf3>
    a08c:	8009883a 	mov	r4,r16
    a090:	1823883a 	mov	r17,r3
    a094:	1021883a 	mov	r16,r2
    a098:	000eea40 	call	eea4 <__floatunsidf>
    a09c:	880b883a 	mov	r5,r17
    a0a0:	180f883a 	mov	r7,r3
    a0a4:	8009883a 	mov	r4,r16
    a0a8:	100d883a 	mov	r6,r2
    a0ac:	000e2a00 	call	e2a0 <__adddf3>
    a0b0:	e0c00115 	stw	r3,4(fp)
    a0b4:	e0800015 	stw	r2,0(fp)
    a0b8:	010003c4 	movi	r4,15
    a0bc:	24c09816 	blt	r4,r19,a320 <_strtod_r+0x660>
    a0c0:	d9800f17 	ldw	r6,60(sp)
    a0c4:	303f7526 	beq	r6,zero,9e9c <_strtod_r+0x1dc>
    a0c8:	0183be0e 	bge	zero,r6,afc4 <_strtod_r+0x1304>
    a0cc:	00800584 	movi	r2,22
    a0d0:	1182b20e 	bge	r2,r6,ab9c <_strtod_r+0xedc>
    a0d4:	d8c00f17 	ldw	r3,60(sp)
    a0d8:	24e3c83a 	sub	r17,r4,r19
    a0dc:	88800584 	addi	r2,r17,22
    a0e0:	10c08f16 	blt	r2,r3,a320 <_strtod_r+0x660>
    a0e4:	880890fa 	slli	r4,r17,3
    a0e8:	04000074 	movhi	r16,1
    a0ec:	84096a04 	addi	r16,r16,9640
    a0f0:	e0800017 	ldw	r2,0(fp)
    a0f4:	2409883a 	add	r4,r4,r16
    a0f8:	22000017 	ldw	r8,0(r4)
    a0fc:	22400117 	ldw	r9,4(r4)
    a100:	e0c00117 	ldw	r3,4(fp)
    a104:	1009883a 	mov	r4,r2
    a108:	480f883a 	mov	r7,r9
    a10c:	180b883a 	mov	r5,r3
    a110:	400d883a 	mov	r6,r8
    a114:	000e3140 	call	e314 <__muldf3>
    a118:	d9000f17 	ldw	r4,60(sp)
    a11c:	180b883a 	mov	r5,r3
    a120:	2455c83a 	sub	r10,r4,r17
    a124:	501490fa 	slli	r10,r10,3
    a128:	1009883a 	mov	r4,r2
    a12c:	5415883a 	add	r10,r10,r16
    a130:	52000017 	ldw	r8,0(r10)
    a134:	52400117 	ldw	r9,4(r10)
    a138:	0002a206 	br	abc4 <_strtod_r+0xf04>
    a13c:	40c00047 	ldb	r3,1(r8)
    a140:	00801604 	movi	r2,88
    a144:	18804e26 	beq	r3,r2,a280 <_strtod_r+0x5c0>
    a148:	00801e04 	movi	r2,120
    a14c:	18804c26 	beq	r3,r2,a280 <_strtod_r+0x5c0>
    a150:	42000044 	addi	r8,r8,1
    a154:	da000415 	stw	r8,16(sp)
    a158:	40c00007 	ldb	r3,0(r8)
    a15c:	00800c04 	movi	r2,48
    a160:	18bffb26 	beq	r3,r2,a150 <_strtod_r+0x490>
    a164:	183f4d26 	beq	r3,zero,9e9c <_strtod_r+0x1dc>
    a168:	03c00044 	movi	r15,1
    a16c:	003f2406 	br	9e00 <_strtod_r+0x140>
    a170:	42000044 	addi	r8,r8,1
    a174:	da000415 	stw	r8,16(sp)
    a178:	19000047 	ldb	r4,1(r3)
    a17c:	3000b726 	beq	r6,zero,a45c <_strtod_r+0x79c>
    a180:	3027883a 	mov	r19,r6
    a184:	0015883a 	mov	r10,zero
    a188:	000f883a 	mov	r7,zero
    a18c:	227ff404 	addi	r9,r4,-48
    a190:	00800244 	movi	r2,9
    a194:	1242592e 	bgeu	r2,r9,aafc <_strtod_r+0xe3c>
    a198:	04800044 	movi	r18,1
    a19c:	003f3706 	br	9e7c <_strtod_r+0x1bc>
    a1a0:	7804c03a 	cmpne	r2,r15,zero
    a1a4:	103f3d1e 	bne	r2,zero,9e9c <_strtod_r+0x1dc>
    a1a8:	9004c03a 	cmpne	r2,r18,zero
    a1ac:	103f5e1e 	bne	r2,zero,9f28 <_strtod_r+0x268>
    a1b0:	00801384 	movi	r2,78
    a1b4:	2083a226 	beq	r4,r2,b040 <_strtod_r+0x1380>
    a1b8:	11039d16 	blt	r2,r4,b030 <_strtod_r+0x1370>
    a1bc:	00801244 	movi	r2,73
    a1c0:	20bf591e 	bne	r4,r2,9f28 <_strtod_r+0x268>
    a1c4:	dc000404 	addi	r16,sp,16
    a1c8:	8009883a 	mov	r4,r16
    a1cc:	01400074 	movhi	r5,1
    a1d0:	2949b304 	addi	r5,r5,9932
    a1d4:	0009c780 	call	9c78 <match>
    a1d8:	103f5326 	beq	r2,zero,9f28 <_strtod_r+0x268>
    a1dc:	d8800417 	ldw	r2,16(sp)
    a1e0:	8009883a 	mov	r4,r16
    a1e4:	01400074 	movhi	r5,1
    a1e8:	2949b404 	addi	r5,r5,9936
    a1ec:	123fffc4 	addi	r8,r2,-1
    a1f0:	da000415 	stw	r8,16(sp)
    a1f4:	0009c780 	call	9c78 <match>
    a1f8:	1000031e 	bne	r2,zero,a208 <_strtod_r+0x548>
    a1fc:	d8800417 	ldw	r2,16(sp)
    a200:	12000044 	addi	r8,r2,1
    a204:	da000415 	stw	r8,16(sp)
    a208:	019ffc34 	movhi	r6,32752
    a20c:	e1800115 	stw	r6,4(fp)
    a210:	e0000015 	stw	zero,0(fp)
    a214:	003f2106 	br	9e9c <_strtod_r+0x1dc>
    a218:	d9801215 	stw	r6,72(sp)
    a21c:	003f8506 	br	a034 <_strtod_r+0x374>
    a220:	d8001115 	stw	zero,68(sp)
    a224:	42000044 	addi	r8,r8,1
    a228:	da000415 	stw	r8,16(sp)
    a22c:	40800007 	ldb	r2,0(r8)
    a230:	103eef1e 	bne	r2,zero,9df0 <_strtod_r+0x130>
    a234:	d8001115 	stw	zero,68(sp)
    a238:	dc400415 	stw	r17,16(sp)
    a23c:	003f1706 	br	9e9c <_strtod_r+0x1dc>
    a240:	42000044 	addi	r8,r8,1
    a244:	da000415 	stw	r8,16(sp)
    a248:	003eaf06 	br	9d08 <_strtod_r+0x48>
    a24c:	00800044 	movi	r2,1
    a250:	d8801115 	stw	r2,68(sp)
    a254:	003ff306 	br	a224 <_strtod_r+0x564>
    a258:	001d883a 	mov	r14,zero
    a25c:	42000044 	addi	r8,r8,1
    a260:	da000415 	stw	r8,16(sp)
    a264:	21000047 	ldb	r4,1(r4)
    a268:	00800244 	movi	r2,9
    a26c:	20fff404 	addi	r3,r4,-48
    a270:	10ff412e 	bgeu	r2,r3,9f78 <_strtod_r+0x2b8>
    a274:	000b883a 	mov	r5,zero
    a278:	dc400415 	stw	r17,16(sp)
    a27c:	003f0506 	br	9e94 <_strtod_r+0x1d4>
    a280:	d8c01117 	ldw	r3,68(sp)
    a284:	04800074 	movhi	r18,1
    a288:	948c0704 	addi	r18,r18,12316
    a28c:	d8800504 	addi	r2,sp,20
    a290:	a809883a 	mov	r4,r21
    a294:	d9400404 	addi	r5,sp,16
    a298:	900d883a 	mov	r6,r18
    a29c:	d9c00604 	addi	r7,sp,24
    a2a0:	d8800015 	stw	r2,0(sp)
    a2a4:	d8c00115 	stw	r3,4(sp)
    a2a8:	000c4ac0 	call	c4ac <__gethex>
    a2ac:	140001cc 	andi	r16,r2,7
    a2b0:	1027883a 	mov	r19,r2
    a2b4:	803ef926 	beq	r16,zero,9e9c <_strtod_r+0x1dc>
    a2b8:	05000184 	movi	r20,6
    a2bc:	853f1a26 	beq	r16,r20,9f28 <_strtod_r+0x268>
    a2c0:	d9800517 	ldw	r6,20(sp)
    a2c4:	30000626 	beq	r6,zero,a2e0 <_strtod_r+0x620>
    a2c8:	91400017 	ldw	r5,0(r18)
    a2cc:	d9000d04 	addi	r4,sp,52
    a2d0:	00084580 	call	8458 <__copybits>
    a2d4:	d9400517 	ldw	r5,20(sp)
    a2d8:	a809883a 	mov	r4,r21
    a2dc:	0007fb80 	call	7fb8 <_Bfree>
    a2e0:	d9400617 	ldw	r5,24(sp)
    a2e4:	a4024136 	bltu	r20,r16,abec <_strtod_r+0xf2c>
    a2e8:	8405883a 	add	r2,r16,r16
    a2ec:	1085883a 	add	r2,r2,r2
    a2f0:	00c00074 	movhi	r3,1
    a2f4:	18e8c104 	addi	r3,r3,-23804
    a2f8:	10c5883a 	add	r2,r2,r3
    a2fc:	11000017 	ldw	r4,0(r2)
    a300:	2000683a 	jmp	r4
    a304:	0000ac2c 	andhi	zero,zero,688
    a308:	0000ac38 	rdprs	zero,zero,688
    a30c:	0000abdc 	xori	zero,zero,687
    a310:	0000ac04 	movi	zero,688
    a314:	0000ac14 	movui	zero,688
    a318:	0000ac38 	rdprs	zero,zero,688
    a31c:	0000ac2c 	andhi	zero,zero,688
    a320:	d8c00f17 	ldw	r3,60(sp)
    a324:	9c85c83a 	sub	r2,r19,r18
    a328:	18a1883a 	add	r16,r3,r2
    a32c:	0402d00e 	bge	zero,r16,ae70 <_strtod_r+0x11b0>
    a330:	814003cc 	andi	r5,r16,15
    a334:	28000f26 	beq	r5,zero,a374 <_strtod_r+0x6b4>
    a338:	280a90fa 	slli	r5,r5,3
    a33c:	01000074 	movhi	r4,1
    a340:	21096a04 	addi	r4,r4,9640
    a344:	e0800017 	ldw	r2,0(fp)
    a348:	290b883a 	add	r5,r5,r4
    a34c:	2a000017 	ldw	r8,0(r5)
    a350:	e0c00117 	ldw	r3,4(fp)
    a354:	2a400117 	ldw	r9,4(r5)
    a358:	1009883a 	mov	r4,r2
    a35c:	180b883a 	mov	r5,r3
    a360:	480f883a 	mov	r7,r9
    a364:	400d883a 	mov	r6,r8
    a368:	000e3140 	call	e314 <__muldf3>
    a36c:	e0c00115 	stw	r3,4(fp)
    a370:	e0800015 	stw	r2,0(fp)
    a374:	00bffc04 	movi	r2,-16
    a378:	808c703a 	and	r6,r16,r2
    a37c:	30005b26 	beq	r6,zero,a4ec <_strtod_r+0x82c>
    a380:	00804d04 	movi	r2,308
    a384:	1181fd16 	blt	r2,r6,ab7c <_strtod_r+0xebc>
    a388:	3021d13a 	srai	r16,r6,4
    a38c:	00800044 	movi	r2,1
    a390:	1403610e 	bge	r2,r16,b118 <_strtod_r+0x1458>
    a394:	102f883a 	mov	r23,r2
    a398:	0025883a 	mov	r18,zero
    a39c:	04400074 	movhi	r17,1
    a3a0:	8c499c04 	addi	r17,r17,9840
    a3a4:	8080004c 	andi	r2,r16,1
    a3a8:	1005003a 	cmpeq	r2,r2,zero
    a3ac:	1000091e 	bne	r2,zero,a3d4 <_strtod_r+0x714>
    a3b0:	e0800017 	ldw	r2,0(fp)
    a3b4:	e0c00117 	ldw	r3,4(fp)
    a3b8:	89800017 	ldw	r6,0(r17)
    a3bc:	89c00117 	ldw	r7,4(r17)
    a3c0:	180b883a 	mov	r5,r3
    a3c4:	1009883a 	mov	r4,r2
    a3c8:	000e3140 	call	e314 <__muldf3>
    a3cc:	e0c00115 	stw	r3,4(fp)
    a3d0:	e0800015 	stw	r2,0(fp)
    a3d4:	8021d07a 	srai	r16,r16,1
    a3d8:	94800044 	addi	r18,r18,1
    a3dc:	8c400204 	addi	r17,r17,8
    a3e0:	bc3ff016 	blt	r23,r16,a3a4 <_strtod_r+0x6e4>
    a3e4:	900e90fa 	slli	r7,r18,3
    a3e8:	01800074 	movhi	r6,1
    a3ec:	31899c04 	addi	r6,r6,9840
    a3f0:	e2000117 	ldw	r8,4(fp)
    a3f4:	398f883a 	add	r7,r7,r6
    a3f8:	38800017 	ldw	r2,0(r7)
    a3fc:	38c00117 	ldw	r3,4(r7)
    a400:	e1000017 	ldw	r4,0(fp)
    a404:	01bf2c34 	movhi	r6,64688
    a408:	418d883a 	add	r6,r8,r6
    a40c:	300b883a 	mov	r5,r6
    a410:	180f883a 	mov	r7,r3
    a414:	100d883a 	mov	r6,r2
    a418:	000e3140 	call	e314 <__muldf3>
    a41c:	1009883a 	mov	r4,r2
    a420:	180b883a 	mov	r5,r3
    a424:	199ffc2c 	andhi	r6,r3,32752
    a428:	009f2834 	movhi	r2,31904
    a42c:	e1000015 	stw	r4,0(fp)
    a430:	e1400115 	stw	r5,4(fp)
    a434:	1181d136 	bltu	r2,r6,ab7c <_strtod_r+0xebc>
    a438:	009f2434 	movhi	r2,31888
    a43c:	1183202e 	bgeu	r2,r6,b0c0 <_strtod_r+0x1400>
    a440:	d8001415 	stw	zero,80(sp)
    a444:	019ffc34 	movhi	r6,32752
    a448:	31bfffc4 	addi	r6,r6,-1
    a44c:	01ffffc4 	movi	r7,-1
    a450:	e1800115 	stw	r6,4(fp)
    a454:	e1c00015 	stw	r7,0(fp)
    a458:	00002506 	br	a4f0 <_strtod_r+0x830>
    a45c:	00800c04 	movi	r2,48
    a460:	2083151e 	bne	r4,r2,b0b8 <_strtod_r+0x13f8>
    a464:	2005883a 	mov	r2,r4
    a468:	000f883a 	mov	r7,zero
    a46c:	42000044 	addi	r8,r8,1
    a470:	da000415 	stw	r8,16(sp)
    a474:	41000007 	ldb	r4,0(r8)
    a478:	39c00044 	addi	r7,r7,1
    a47c:	20bffb26 	beq	r4,r2,a46c <_strtod_r+0x7ac>
    a480:	20fff3c4 	addi	r3,r4,-49
    a484:	00800204 	movi	r2,8
    a488:	10c1b836 	bltu	r2,r3,ab6c <_strtod_r+0xeac>
    a48c:	dd800417 	ldw	r22,16(sp)
    a490:	3815883a 	mov	r10,r7
    a494:	227ff404 	addi	r9,r4,-48
    a498:	b011883a 	mov	r8,r22
    a49c:	0027883a 	mov	r19,zero
    a4a0:	01c00044 	movi	r7,1
    a4a4:	4801fe26 	beq	r9,zero,aca0 <_strtod_r+0xfe0>
    a4a8:	00800044 	movi	r2,1
    a4ac:	51d5883a 	add	r10,r10,r7
    a4b0:	11c31f0e 	bge	r2,r7,b130 <_strtod_r+0x1470>
    a4b4:	1009883a 	mov	r4,r2
    a4b8:	9807883a 	mov	r3,r19
    a4bc:	02c00204 	movi	r11,8
    a4c0:	03000404 	movi	r12,16
    a4c4:	00000306 	br	a4d4 <_strtod_r+0x814>
    a4c8:	a50002a4 	muli	r20,r20,10
    a4cc:	21000044 	addi	r4,r4,1
    a4d0:	21c1eb26 	beq	r4,r7,ac80 <_strtod_r+0xfc0>
    a4d4:	18c00044 	addi	r3,r3,1
    a4d8:	18bfffc4 	addi	r2,r3,-1
    a4dc:	58bffa0e 	bge	r11,r2,a4c8 <_strtod_r+0x808>
    a4e0:	60fffa16 	blt	r12,r3,a4cc <_strtod_r+0x80c>
    a4e4:	840002a4 	muli	r16,r16,10
    a4e8:	003ff806 	br	a4cc <_strtod_r+0x80c>
    a4ec:	d8001415 	stw	zero,80(sp)
    a4f0:	d9801217 	ldw	r6,72(sp)
    a4f4:	a809883a 	mov	r4,r21
    a4f8:	b00b883a 	mov	r5,r22
    a4fc:	980f883a 	mov	r7,r19
    a500:	dd000015 	stw	r20,0(sp)
    a504:	0008e8c0 	call	8e8c <__s2b>
    a508:	d9800f17 	ldw	r6,60(sp)
    a50c:	11000304 	addi	r4,r2,12
    a510:	d8801015 	stw	r2,64(sp)
    a514:	300c803a 	cmplt	r6,r6,zero
    a518:	d9001715 	stw	r4,92(sp)
    a51c:	d9801615 	stw	r6,88(sp)
    a520:	d8801017 	ldw	r2,64(sp)
    a524:	a809883a 	mov	r4,r21
    a528:	11400117 	ldw	r5,4(r2)
    a52c:	00085380 	call	8538 <_Balloc>
    a530:	d8c01017 	ldw	r3,64(sp)
    a534:	d9401717 	ldw	r5,92(sp)
    a538:	11000304 	addi	r4,r2,12
    a53c:	19800417 	ldw	r6,16(r3)
    a540:	102f883a 	mov	r23,r2
    a544:	318d883a 	add	r6,r6,r6
    a548:	318d883a 	add	r6,r6,r6
    a54c:	31800204 	addi	r6,r6,8
    a550:	0007da00 	call	7da0 <memcpy>
    a554:	e2000017 	ldw	r8,0(fp)
    a558:	e2400117 	ldw	r9,4(fp)
    a55c:	d9800304 	addi	r6,sp,12
    a560:	400b883a 	mov	r5,r8
    a564:	a809883a 	mov	r4,r21
    a568:	d9c00204 	addi	r7,sp,8
    a56c:	d9800015 	stw	r6,0(sp)
    a570:	480d883a 	mov	r6,r9
    a574:	00085f40 	call	85f4 <__d2b>
    a578:	a809883a 	mov	r4,r21
    a57c:	01400044 	movi	r5,1
    a580:	d8800515 	stw	r2,20(sp)
    a584:	0008c300 	call	8c30 <__i2b>
    a588:	102d883a 	mov	r22,r2
    a58c:	d8801617 	ldw	r2,88(sp)
    a590:	1001051e 	bne	r2,zero,a9a8 <_strtod_r+0xce8>
    a594:	dd000f17 	ldw	r20,60(sp)
    a598:	000f883a 	mov	r7,zero
    a59c:	0013883a 	mov	r9,zero
    a5a0:	a011883a 	mov	r8,r20
    a5a4:	d8800217 	ldw	r2,8(sp)
    a5a8:	1000fd16 	blt	r2,zero,a9a0 <_strtod_r+0xce0>
    a5ac:	388f883a 	add	r7,r7,r2
    a5b0:	d9801417 	ldw	r6,80(sp)
    a5b4:	d9400317 	ldw	r5,12(sp)
    a5b8:	00ff0084 	movi	r3,-1022
    a5bc:	1189c83a 	sub	r4,r2,r6
    a5c0:	2145883a 	add	r2,r4,r5
    a5c4:	10bfffc4 	addi	r2,r2,-1
    a5c8:	10c09f0e 	bge	r2,r3,a848 <_strtod_r+0xb88>
    a5cc:	21810cc4 	addi	r6,r4,1075
    a5d0:	d8c01417 	ldw	r3,80(sp)
    a5d4:	4185883a 	add	r2,r8,r6
    a5d8:	39a1883a 	add	r16,r7,r6
    a5dc:	18a5883a 	add	r18,r3,r2
    a5e0:	3807883a 	mov	r3,r7
    a5e4:	81c0010e 	bge	r16,r7,a5ec <_strtod_r+0x92c>
    a5e8:	8007883a 	mov	r3,r16
    a5ec:	9005883a 	mov	r2,r18
    a5f0:	1c80010e 	bge	r3,r18,a5f8 <_strtod_r+0x938>
    a5f4:	1805883a 	mov	r2,r3
    a5f8:	0080e70e 	bge	zero,r2,a998 <_strtod_r+0xcd8>
    a5fc:	38a7c83a 	sub	r19,r7,r2
    a600:	80a1c83a 	sub	r16,r16,r2
    a604:	90a5c83a 	sub	r18,r18,r2
    a608:	02400e0e 	bge	zero,r9,a644 <_strtod_r+0x984>
    a60c:	480d883a 	mov	r6,r9
    a610:	b00b883a 	mov	r5,r22
    a614:	a809883a 	mov	r4,r21
    a618:	0008d6c0 	call	8d6c <__pow5mult>
    a61c:	d9800517 	ldw	r6,20(sp)
    a620:	a809883a 	mov	r4,r21
    a624:	100b883a 	mov	r5,r2
    a628:	102d883a 	mov	r22,r2
    a62c:	0008a480 	call	8a48 <__multiply>
    a630:	d9400517 	ldw	r5,20(sp)
    a634:	1023883a 	mov	r17,r2
    a638:	a809883a 	mov	r4,r21
    a63c:	0007fb80 	call	7fb8 <_Bfree>
    a640:	dc400515 	stw	r17,20(sp)
    a644:	0400050e 	bge	zero,r16,a65c <_strtod_r+0x99c>
    a648:	d9400517 	ldw	r5,20(sp)
    a64c:	800d883a 	mov	r6,r16
    a650:	a809883a 	mov	r4,r21
    a654:	00088fc0 	call	88fc <__lshift>
    a658:	d8800515 	stw	r2,20(sp)
    a65c:	a000741e 	bne	r20,zero,a830 <_strtod_r+0xb70>
    a660:	0480050e 	bge	zero,r18,a678 <_strtod_r+0x9b8>
    a664:	b80b883a 	mov	r5,r23
    a668:	900d883a 	mov	r6,r18
    a66c:	a809883a 	mov	r4,r21
    a670:	00088fc0 	call	88fc <__lshift>
    a674:	102f883a 	mov	r23,r2
    a678:	04c0050e 	bge	zero,r19,a690 <_strtod_r+0x9d0>
    a67c:	b00b883a 	mov	r5,r22
    a680:	980d883a 	mov	r6,r19
    a684:	a809883a 	mov	r4,r21
    a688:	00088fc0 	call	88fc <__lshift>
    a68c:	102d883a 	mov	r22,r2
    a690:	d9400517 	ldw	r5,20(sp)
    a694:	a809883a 	mov	r4,r21
    a698:	b80d883a 	mov	r6,r23
    a69c:	00087700 	call	8770 <__mdiff>
    a6a0:	11000317 	ldw	r4,12(r2)
    a6a4:	b00b883a 	mov	r5,r22
    a6a8:	10000315 	stw	zero,12(r2)
    a6ac:	d9001315 	stw	r4,76(sp)
    a6b0:	1009883a 	mov	r4,r2
    a6b4:	1029883a 	mov	r20,r2
    a6b8:	00081140 	call	8114 <__mcmp>
    a6bc:	10017c16 	blt	r2,zero,acb0 <_strtod_r+0xff0>
    a6c0:	1001af26 	beq	r2,zero,ad80 <_strtod_r+0x10c0>
    a6c4:	a009883a 	mov	r4,r20
    a6c8:	b00b883a 	mov	r5,r22
    a6cc:	00083140 	call	8314 <__ratio>
    a6d0:	0011883a 	mov	r8,zero
    a6d4:	02500034 	movhi	r9,16384
    a6d8:	480f883a 	mov	r7,r9
    a6dc:	1009883a 	mov	r4,r2
    a6e0:	180b883a 	mov	r5,r3
    a6e4:	400d883a 	mov	r6,r8
    a6e8:	1021883a 	mov	r16,r2
    a6ec:	1823883a 	mov	r17,r3
    a6f0:	000ebd80 	call	ebd8 <__ledf2>
    a6f4:	00805716 	blt	zero,r2,a854 <_strtod_r+0xb94>
    a6f8:	d9801317 	ldw	r6,76(sp)
    a6fc:	3025003a 	cmpeq	r18,r6,zero
    a700:	90008b1e 	bne	r18,zero,a930 <_strtod_r+0xc70>
    a704:	008ffc34 	movhi	r2,16368
    a708:	0021883a 	mov	r16,zero
    a70c:	1023883a 	mov	r17,r2
    a710:	d8000715 	stw	zero,28(sp)
    a714:	d8800815 	stw	r2,32(sp)
    a718:	e1c00117 	ldw	r7,4(fp)
    a71c:	009ff834 	movhi	r2,32736
    a720:	3cdffc2c 	andhi	r19,r7,32752
    a724:	98805e26 	beq	r19,r2,a8a0 <_strtod_r+0xbe0>
    a728:	d8801417 	ldw	r2,80(sp)
    a72c:	10001b26 	beq	r2,zero,a79c <_strtod_r+0xadc>
    a730:	0081a834 	movhi	r2,1696
    a734:	14c01936 	bltu	r2,r19,a79c <_strtod_r+0xadc>
    a738:	00bff034 	movhi	r2,65472
    a73c:	00d07834 	movhi	r3,16864
    a740:	18ffffc4 	addi	r3,r3,-1
    a744:	180f883a 	mov	r7,r3
    a748:	8009883a 	mov	r4,r16
    a74c:	880b883a 	mov	r5,r17
    a750:	100d883a 	mov	r6,r2
    a754:	000ebd80 	call	ebd8 <__ledf2>
    a758:	00800b16 	blt	zero,r2,a788 <_strtod_r+0xac8>
    a75c:	880b883a 	mov	r5,r17
    a760:	8009883a 	mov	r4,r16
    a764:	000d0f00 	call	d0f0 <__fixunsdfsi>
    a768:	1000df1e 	bne	r2,zero,aae8 <_strtod_r+0xe28>
    a76c:	0021883a 	mov	r16,zero
    a770:	044ffc34 	movhi	r17,16368
    a774:	9000d91e 	bne	r18,zero,aadc <_strtod_r+0xe1c>
    a778:	8005883a 	mov	r2,r16
    a77c:	8807883a 	mov	r3,r17
    a780:	d8c00815 	stw	r3,32(sp)
    a784:	d8800715 	stw	r2,28(sp)
    a788:	d8800817 	ldw	r2,32(sp)
    a78c:	00c1ac34 	movhi	r3,1712
    a790:	14c5c83a 	sub	r2,r2,r19
    a794:	10c5883a 	add	r2,r2,r3
    a798:	d8800815 	stw	r2,32(sp)
    a79c:	e0800017 	ldw	r2,0(fp)
    a7a0:	e0c00117 	ldw	r3,4(fp)
    a7a4:	1009883a 	mov	r4,r2
    a7a8:	180b883a 	mov	r5,r3
    a7ac:	00081740 	call	8174 <__ulp>
    a7b0:	d9800717 	ldw	r6,28(sp)
    a7b4:	d9c00817 	ldw	r7,32(sp)
    a7b8:	180b883a 	mov	r5,r3
    a7bc:	1009883a 	mov	r4,r2
    a7c0:	000e3140 	call	e314 <__muldf3>
    a7c4:	e2000017 	ldw	r8,0(fp)
    a7c8:	e2400117 	ldw	r9,4(fp)
    a7cc:	180b883a 	mov	r5,r3
    a7d0:	1009883a 	mov	r4,r2
    a7d4:	480f883a 	mov	r7,r9
    a7d8:	400d883a 	mov	r6,r8
    a7dc:	000e2a00 	call	e2a0 <__adddf3>
    a7e0:	e0c00115 	stw	r3,4(fp)
    a7e4:	e0800015 	stw	r2,0(fp)
    a7e8:	d8c01417 	ldw	r3,80(sp)
    a7ec:	e4800117 	ldw	r18,4(fp)
    a7f0:	1800021e 	bne	r3,zero,a7fc <_strtod_r+0xb3c>
    a7f4:	909ffc2c 	andhi	r2,r18,32752
    a7f8:	98807b26 	beq	r19,r2,a9e8 <_strtod_r+0xd28>
    a7fc:	d9400517 	ldw	r5,20(sp)
    a800:	a809883a 	mov	r4,r21
    a804:	0007fb80 	call	7fb8 <_Bfree>
    a808:	a809883a 	mov	r4,r21
    a80c:	b80b883a 	mov	r5,r23
    a810:	0007fb80 	call	7fb8 <_Bfree>
    a814:	a809883a 	mov	r4,r21
    a818:	b00b883a 	mov	r5,r22
    a81c:	0007fb80 	call	7fb8 <_Bfree>
    a820:	a809883a 	mov	r4,r21
    a824:	a00b883a 	mov	r5,r20
    a828:	0007fb80 	call	7fb8 <_Bfree>
    a82c:	003f3c06 	br	a520 <_strtod_r+0x860>
    a830:	b80b883a 	mov	r5,r23
    a834:	a00d883a 	mov	r6,r20
    a838:	a809883a 	mov	r4,r21
    a83c:	0008d6c0 	call	8d6c <__pow5mult>
    a840:	102f883a 	mov	r23,r2
    a844:	003f8606 	br	a660 <_strtod_r+0x9a0>
    a848:	00800d84 	movi	r2,54
    a84c:	114dc83a 	sub	r6,r2,r5
    a850:	003f5f06 	br	a5d0 <_strtod_r+0x910>
    a854:	0005883a 	mov	r2,zero
    a858:	00cff834 	movhi	r3,16352
    a85c:	880b883a 	mov	r5,r17
    a860:	8009883a 	mov	r4,r16
    a864:	100d883a 	mov	r6,r2
    a868:	180f883a 	mov	r7,r3
    a86c:	000e3140 	call	e314 <__muldf3>
    a870:	d9801317 	ldw	r6,76(sp)
    a874:	1021883a 	mov	r16,r2
    a878:	1823883a 	mov	r17,r3
    a87c:	3025003a 	cmpeq	r18,r6,zero
    a880:	90000126 	beq	r18,zero,a888 <_strtod_r+0xbc8>
    a884:	18e0003c 	xorhi	r3,r3,32768
    a888:	d8800715 	stw	r2,28(sp)
    a88c:	d8c00815 	stw	r3,32(sp)
    a890:	e1c00117 	ldw	r7,4(fp)
    a894:	009ff834 	movhi	r2,32736
    a898:	3cdffc2c 	andhi	r19,r7,32752
    a89c:	98bfa21e 	bne	r19,r2,a728 <_strtod_r+0xa68>
    a8a0:	e1000017 	ldw	r4,0(fp)
    a8a4:	01bf2c34 	movhi	r6,64688
    a8a8:	398d883a 	add	r6,r7,r6
    a8ac:	d9000b15 	stw	r4,44(sp)
    a8b0:	d9c00c15 	stw	r7,48(sp)
    a8b4:	300b883a 	mov	r5,r6
    a8b8:	e1800115 	stw	r6,4(fp)
    a8bc:	00081740 	call	8174 <__ulp>
    a8c0:	d9800717 	ldw	r6,28(sp)
    a8c4:	d9c00817 	ldw	r7,32(sp)
    a8c8:	180b883a 	mov	r5,r3
    a8cc:	1009883a 	mov	r4,r2
    a8d0:	000e3140 	call	e314 <__muldf3>
    a8d4:	e2000017 	ldw	r8,0(fp)
    a8d8:	e2400117 	ldw	r9,4(fp)
    a8dc:	180b883a 	mov	r5,r3
    a8e0:	1009883a 	mov	r4,r2
    a8e4:	480f883a 	mov	r7,r9
    a8e8:	400d883a 	mov	r6,r8
    a8ec:	000e2a00 	call	e2a0 <__adddf3>
    a8f0:	1009883a 	mov	r4,r2
    a8f4:	180b883a 	mov	r5,r3
    a8f8:	009f2834 	movhi	r2,31904
    a8fc:	10bfffc4 	addi	r2,r2,-1
    a900:	18dffc2c 	andhi	r3,r3,32752
    a904:	e1000015 	stw	r4,0(fp)
    a908:	e1400115 	stw	r5,4(fp)
    a90c:	10c06f2e 	bgeu	r2,r3,aacc <_strtod_r+0xe0c>
    a910:	d8800c17 	ldw	r2,48(sp)
    a914:	011ffc34 	movhi	r4,32752
    a918:	213fffc4 	addi	r4,r4,-1
    a91c:	11007a26 	beq	r2,r4,ab08 <_strtod_r+0xe48>
    a920:	01ffffc4 	movi	r7,-1
    a924:	e1000115 	stw	r4,4(fp)
    a928:	e1c00015 	stw	r7,0(fp)
    a92c:	003fb306 	br	a7fc <_strtod_r+0xb3c>
    a930:	e0c00017 	ldw	r3,0(fp)
    a934:	1800221e 	bne	r3,zero,a9c0 <_strtod_r+0xd00>
    a938:	e0800117 	ldw	r2,4(fp)
    a93c:	00c00434 	movhi	r3,16
    a940:	18ffffc4 	addi	r3,r3,-1
    a944:	10c4703a 	and	r2,r2,r3
    a948:	1000211e 	bne	r2,zero,a9d0 <_strtod_r+0xd10>
    a94c:	0005883a 	mov	r2,zero
    a950:	00cffc34 	movhi	r3,16368
    a954:	180f883a 	mov	r7,r3
    a958:	8009883a 	mov	r4,r16
    a95c:	880b883a 	mov	r5,r17
    a960:	100d883a 	mov	r6,r2
    a964:	000eb500 	call	eb50 <__ltdf2>
    a968:	10013c16 	blt	r2,zero,ae5c <_strtod_r+0x119c>
    a96c:	0005883a 	mov	r2,zero
    a970:	00cff834 	movhi	r3,16352
    a974:	880b883a 	mov	r5,r17
    a978:	8009883a 	mov	r4,r16
    a97c:	180f883a 	mov	r7,r3
    a980:	100d883a 	mov	r6,r2
    a984:	000e3140 	call	e314 <__muldf3>
    a988:	1823883a 	mov	r17,r3
    a98c:	1021883a 	mov	r16,r2
    a990:	18e0003c 	xorhi	r3,r3,32768
    a994:	003fbc06 	br	a888 <_strtod_r+0xbc8>
    a998:	3827883a 	mov	r19,r7
    a99c:	003f1a06 	br	a608 <_strtod_r+0x948>
    a9a0:	4091c83a 	sub	r8,r8,r2
    a9a4:	003f0206 	br	a5b0 <_strtod_r+0x8f0>
    a9a8:	d8c00f17 	ldw	r3,60(sp)
    a9ac:	0011883a 	mov	r8,zero
    a9b0:	0029883a 	mov	r20,zero
    a9b4:	00d3c83a 	sub	r9,zero,r3
    a9b8:	480f883a 	mov	r7,r9
    a9bc:	003ef906 	br	a5a4 <_strtod_r+0x8e4>
    a9c0:	00800044 	movi	r2,1
    a9c4:	1880021e 	bne	r3,r2,a9d0 <_strtod_r+0xd10>
    a9c8:	e0800117 	ldw	r2,4(fp)
    a9cc:	1000a526 	beq	r2,zero,ac64 <_strtod_r+0xfa4>
    a9d0:	00affc34 	movhi	r2,49136
    a9d4:	0021883a 	mov	r16,zero
    a9d8:	044ffc34 	movhi	r17,16368
    a9dc:	d8800815 	stw	r2,32(sp)
    a9e0:	d8000715 	stw	zero,28(sp)
    a9e4:	003f4c06 	br	a718 <_strtod_r+0xa58>
    a9e8:	880b883a 	mov	r5,r17
    a9ec:	8009883a 	mov	r4,r16
    a9f0:	000ed580 	call	ed58 <__fixdfsi>
    a9f4:	1009883a 	mov	r4,r2
    a9f8:	000ec600 	call	ec60 <__floatsidf>
    a9fc:	880b883a 	mov	r5,r17
    aa00:	8009883a 	mov	r4,r16
    aa04:	100d883a 	mov	r6,r2
    aa08:	180f883a 	mov	r7,r3
    aa0c:	000e2200 	call	e220 <__subdf3>
    aa10:	d9001317 	ldw	r4,76(sp)
    aa14:	100b883a 	mov	r5,r2
    aa18:	180d883a 	mov	r6,r3
    aa1c:	1021883a 	mov	r16,r2
    aa20:	1823883a 	mov	r17,r3
    aa24:	2000061e 	bne	r4,zero,aa40 <_strtod_r+0xd80>
    aa28:	e0800017 	ldw	r2,0(fp)
    aa2c:	1000041e 	bne	r2,zero,aa40 <_strtod_r+0xd80>
    aa30:	00c00434 	movhi	r3,16
    aa34:	18ffffc4 	addi	r3,r3,-1
    aa38:	90c4703a 	and	r2,r18,r3
    aa3c:	10004026 	beq	r2,zero,ab40 <_strtod_r+0xe80>
    aa40:	00a52834 	movhi	r2,38048
    aa44:	108d6544 	addi	r2,r2,13717
    aa48:	00cff834 	movhi	r3,16352
    aa4c:	18ffffc4 	addi	r3,r3,-1
    aa50:	180f883a 	mov	r7,r3
    aa54:	8009883a 	mov	r4,r16
    aa58:	880b883a 	mov	r5,r17
    aa5c:	100d883a 	mov	r6,r2
    aa60:	000eb500 	call	eb50 <__ltdf2>
    aa64:	10000916 	blt	r2,zero,aa8c <_strtod_r+0xdcc>
    aa68:	008d6c34 	movhi	r2,13744
    aa6c:	10b94d44 	addi	r2,r2,-6859
    aa70:	00cff834 	movhi	r3,16352
    aa74:	880b883a 	mov	r5,r17
    aa78:	180f883a 	mov	r7,r3
    aa7c:	8009883a 	mov	r4,r16
    aa80:	100d883a 	mov	r6,r2
    aa84:	000ea400 	call	ea40 <__gtdf2>
    aa88:	00bf5c0e 	bge	zero,r2,a7fc <_strtod_r+0xb3c>
    aa8c:	d9400517 	ldw	r5,20(sp)
    aa90:	a809883a 	mov	r4,r21
    aa94:	0007fb80 	call	7fb8 <_Bfree>
    aa98:	a809883a 	mov	r4,r21
    aa9c:	b80b883a 	mov	r5,r23
    aaa0:	0007fb80 	call	7fb8 <_Bfree>
    aaa4:	a809883a 	mov	r4,r21
    aaa8:	b00b883a 	mov	r5,r22
    aaac:	0007fb80 	call	7fb8 <_Bfree>
    aab0:	d9401017 	ldw	r5,64(sp)
    aab4:	a809883a 	mov	r4,r21
    aab8:	0007fb80 	call	7fb8 <_Bfree>
    aabc:	a809883a 	mov	r4,r21
    aac0:	a00b883a 	mov	r5,r20
    aac4:	0007fb80 	call	7fb8 <_Bfree>
    aac8:	003cf406 	br	9e9c <_strtod_r+0x1dc>
    aacc:	0080d434 	movhi	r2,848
    aad0:	288d883a 	add	r6,r5,r2
    aad4:	e1800115 	stw	r6,4(fp)
    aad8:	003f4306 	br	a7e8 <_strtod_r+0xb28>
    aadc:	8005883a 	mov	r2,r16
    aae0:	88e0003c 	xorhi	r3,r17,32768
    aae4:	003f2606 	br	a780 <_strtod_r+0xac0>
    aae8:	1009883a 	mov	r4,r2
    aaec:	000eea40 	call	eea4 <__floatunsidf>
    aaf0:	1021883a 	mov	r16,r2
    aaf4:	1823883a 	mov	r17,r3
    aaf8:	003f1e06 	br	a774 <_strtod_r+0xab4>
    aafc:	da000417 	ldw	r8,16(sp)
    ab00:	39c00044 	addi	r7,r7,1
    ab04:	003e6706 	br	a4a4 <_strtod_r+0x7e4>
    ab08:	d8c00b17 	ldw	r3,44(sp)
    ab0c:	00bfffc4 	movi	r2,-1
    ab10:	18bf831e 	bne	r3,r2,a920 <_strtod_r+0xc60>
    ab14:	00c00884 	movi	r3,34
    ab18:	a8c00015 	stw	r3,0(r21)
    ab1c:	009ffc34 	movhi	r2,32752
    ab20:	e0800115 	stw	r2,4(fp)
    ab24:	e0000015 	stw	zero,0(fp)
    ab28:	003fd806 	br	aa8c <_strtod_r+0xdcc>
    ab2c:	4007883a 	mov	r3,r8
    ab30:	000d883a 	mov	r6,zero
    ab34:	0029883a 	mov	r20,zero
    ab38:	0021883a 	mov	r16,zero
    ab3c:	003cc906 	br	9e64 <_strtod_r+0x1a4>
    ab40:	00a52834 	movhi	r2,38048
    ab44:	108d6544 	addi	r2,r2,13717
    ab48:	00cff434 	movhi	r3,16336
    ab4c:	18ffffc4 	addi	r3,r3,-1
    ab50:	2809883a 	mov	r4,r5
    ab54:	180f883a 	mov	r7,r3
    ab58:	300b883a 	mov	r5,r6
    ab5c:	100d883a 	mov	r6,r2
    ab60:	000eb500 	call	eb50 <__ltdf2>
    ab64:	103f250e 	bge	r2,zero,a7fc <_strtod_r+0xb3c>
    ab68:	003fc806 	br	aa8c <_strtod_r+0xdcc>
    ab6c:	0027883a 	mov	r19,zero
    ab70:	04800044 	movi	r18,1
    ab74:	0015883a 	mov	r10,zero
    ab78:	003cc006 	br	9e7c <_strtod_r+0x1bc>
    ab7c:	00800884 	movi	r2,34
    ab80:	a8800015 	stw	r2,0(r21)
    ab84:	019ffc34 	movhi	r6,32752
    ab88:	e1800115 	stw	r6,4(fp)
    ab8c:	e0000015 	stw	zero,0(fp)
    ab90:	003cc206 	br	9e9c <_strtod_r+0x1dc>
    ab94:	015387c4 	movi	r5,19999
    ab98:	003d1e06 	br	a014 <_strtod_r+0x354>
    ab9c:	300a90fa 	slli	r5,r6,3
    aba0:	e0800017 	ldw	r2,0(fp)
    aba4:	e0c00117 	ldw	r3,4(fp)
    aba8:	01000074 	movhi	r4,1
    abac:	21096a04 	addi	r4,r4,9640
    abb0:	290b883a 	add	r5,r5,r4
    abb4:	2a000017 	ldw	r8,0(r5)
    abb8:	2a400117 	ldw	r9,4(r5)
    abbc:	1009883a 	mov	r4,r2
    abc0:	180b883a 	mov	r5,r3
    abc4:	480f883a 	mov	r7,r9
    abc8:	400d883a 	mov	r6,r8
    abcc:	000e3140 	call	e314 <__muldf3>
    abd0:	e0c00115 	stw	r3,4(fp)
    abd4:	e0800015 	stw	r2,0(fp)
    abd8:	003cb006 	br	9e9c <_strtod_r+0x1dc>
    abdc:	d8800d17 	ldw	r2,52(sp)
    abe0:	e0800015 	stw	r2,0(fp)
    abe4:	d8c00e17 	ldw	r3,56(sp)
    abe8:	e0c00115 	stw	r3,4(fp)
    abec:	9880020c 	andi	r2,r19,8
    abf0:	103caa26 	beq	r2,zero,9e9c <_strtod_r+0x1dc>
    abf4:	e0800117 	ldw	r2,4(fp)
    abf8:	10a00034 	orhi	r2,r2,32768
    abfc:	e0800115 	stw	r2,4(fp)
    ac00:	003ca606 	br	9e9c <_strtod_r+0x1dc>
    ac04:	009ffc34 	movhi	r2,32752
    ac08:	e0800115 	stw	r2,4(fp)
    ac0c:	e0000015 	stw	zero,0(fp)
    ac10:	003ff606 	br	abec <_strtod_r+0xf2c>
    ac14:	00a00034 	movhi	r2,32768
    ac18:	10bfffc4 	addi	r2,r2,-1
    ac1c:	00ffffc4 	movi	r3,-1
    ac20:	e0800115 	stw	r2,4(fp)
    ac24:	e0c00015 	stw	r3,0(fp)
    ac28:	003ff006 	br	abec <_strtod_r+0xf2c>
    ac2c:	e0000115 	stw	zero,4(fp)
    ac30:	e0000015 	stw	zero,0(fp)
    ac34:	003fed06 	br	abec <_strtod_r+0xf2c>
    ac38:	d8800e17 	ldw	r2,56(sp)
    ac3c:	29010cc4 	addi	r4,r5,1075
    ac40:	00fffc34 	movhi	r3,65520
    ac44:	18ffffc4 	addi	r3,r3,-1
    ac48:	2008953a 	slli	r4,r4,20
    ac4c:	10c4703a 	and	r2,r2,r3
    ac50:	d8c00d17 	ldw	r3,52(sp)
    ac54:	1104b03a 	or	r2,r2,r4
    ac58:	e0800115 	stw	r2,4(fp)
    ac5c:	e0c00015 	stw	r3,0(fp)
    ac60:	003fe206 	br	abec <_strtod_r+0xf2c>
    ac64:	00800884 	movi	r2,34
    ac68:	a8800015 	stw	r2,0(r21)
    ac6c:	e0000015 	stw	zero,0(fp)
    ac70:	e0000115 	stw	zero,4(fp)
    ac74:	003f8506 	br	aa8c <_strtod_r+0xdcc>
    ac78:	03800044 	movi	r14,1
    ac7c:	003d7706 	br	a25c <_strtod_r+0x59c>
    ac80:	99c5883a 	add	r2,r19,r7
    ac84:	11ffffc4 	addi	r7,r2,-1
    ac88:	00800204 	movi	r2,8
    ac8c:	3cc00044 	addi	r19,r7,1
    ac90:	11c0df16 	blt	r2,r7,b010 <_strtod_r+0x1350>
    ac94:	a08002a4 	muli	r2,r20,10
    ac98:	000f883a 	mov	r7,zero
    ac9c:	1269883a 	add	r20,r2,r9
    aca0:	42000044 	addi	r8,r8,1
    aca4:	da000415 	stw	r8,16(sp)
    aca8:	41000007 	ldb	r4,0(r8)
    acac:	003d3706 	br	a18c <_strtod_r+0x4cc>
    acb0:	d9801317 	ldw	r6,76(sp)
    acb4:	3000511e 	bne	r6,zero,adfc <_strtod_r+0x113c>
    acb8:	e0800017 	ldw	r2,0(fp)
    acbc:	1000d81e 	bne	r2,zero,b020 <_strtod_r+0x1360>
    acc0:	e0c00117 	ldw	r3,4(fp)
    acc4:	01000434 	movhi	r4,16
    acc8:	213fffc4 	addi	r4,r4,-1
    accc:	1904703a 	and	r2,r3,r4
    acd0:	1000b01e 	bne	r2,zero,af94 <_strtod_r+0x12d4>
    acd4:	18dffc2c 	andhi	r3,r3,32752
    acd8:	0081ac34 	movhi	r2,1712
    acdc:	10c1102e 	bgeu	r2,r3,b120 <_strtod_r+0x1460>
    ace0:	a0800517 	ldw	r2,20(r20)
    ace4:	1000031e 	bne	r2,zero,acf4 <_strtod_r+0x1034>
    ace8:	a0c00417 	ldw	r3,16(r20)
    acec:	00800044 	movi	r2,1
    acf0:	10c0420e 	bge	r2,r3,adfc <_strtod_r+0x113c>
    acf4:	a00b883a 	mov	r5,r20
    acf8:	a809883a 	mov	r4,r21
    acfc:	01800044 	movi	r6,1
    ad00:	00088fc0 	call	88fc <__lshift>
    ad04:	1009883a 	mov	r4,r2
    ad08:	b00b883a 	mov	r5,r22
    ad0c:	1029883a 	mov	r20,r2
    ad10:	00081140 	call	8114 <__mcmp>
    ad14:	0080c20e 	bge	zero,r2,b020 <_strtod_r+0x1360>
    ad18:	e1800117 	ldw	r6,4(fp)
    ad1c:	d9001417 	ldw	r4,80(sp)
    ad20:	2013003a 	cmpeq	r9,r4,zero
    ad24:	4800ef1e 	bne	r9,zero,b0e4 <_strtod_r+0x1424>
    ad28:	30dffc2c 	andhi	r3,r6,32752
    ad2c:	0081ac34 	movhi	r2,1712
    ad30:	10c0ec36 	bltu	r2,r3,b0e4 <_strtod_r+0x1424>
    ad34:	0080dc34 	movhi	r2,880
    ad38:	10ffca2e 	bgeu	r2,r3,ac64 <_strtod_r+0xfa4>
    ad3c:	e0800017 	ldw	r2,0(fp)
    ad40:	e0c00117 	ldw	r3,4(fp)
    ad44:	020e5434 	movhi	r8,14672
    ad48:	000d883a 	mov	r6,zero
    ad4c:	400f883a 	mov	r7,r8
    ad50:	180b883a 	mov	r5,r3
    ad54:	1009883a 	mov	r4,r2
    ad58:	da000c15 	stw	r8,48(sp)
    ad5c:	d8000b15 	stw	zero,44(sp)
    ad60:	000e3140 	call	e314 <__muldf3>
    ad64:	e0800015 	stw	r2,0(fp)
    ad68:	e0c00115 	stw	r3,4(fp)
    ad6c:	183f471e 	bne	r3,zero,aa8c <_strtod_r+0xdcc>
    ad70:	103f461e 	bne	r2,zero,aa8c <_strtod_r+0xdcc>
    ad74:	00800884 	movi	r2,34
    ad78:	a8800015 	stw	r2,0(r21)
    ad7c:	003f4306 	br	aa8c <_strtod_r+0xdcc>
    ad80:	d8801317 	ldw	r2,76(sp)
    ad84:	1025003a 	cmpeq	r18,r2,zero
    ad88:	9000861e 	bne	r18,zero,afa4 <_strtod_r+0x12e4>
    ad8c:	e1400117 	ldw	r5,4(fp)
    ad90:	00c00434 	movhi	r3,16
    ad94:	18ffffc4 	addi	r3,r3,-1
    ad98:	28c4703a 	and	r2,r5,r3
    ad9c:	10c01b26 	beq	r2,r3,ae0c <_strtod_r+0x114c>
    ada0:	e1c00017 	ldw	r7,0(fp)
    ada4:	3880004c 	andi	r2,r7,1
    ada8:	1005003a 	cmpeq	r2,r2,zero
    adac:	1000791e 	bne	r2,zero,af94 <_strtod_r+0x12d4>
    adb0:	9000b126 	beq	r18,zero,b078 <_strtod_r+0x13b8>
    adb4:	e4400117 	ldw	r17,4(fp)
    adb8:	3809883a 	mov	r4,r7
    adbc:	3821883a 	mov	r16,r7
    adc0:	880b883a 	mov	r5,r17
    adc4:	00081740 	call	8174 <__ulp>
    adc8:	180f883a 	mov	r7,r3
    adcc:	880b883a 	mov	r5,r17
    add0:	8009883a 	mov	r4,r16
    add4:	100d883a 	mov	r6,r2
    add8:	000e2200 	call	e220 <__subdf3>
    addc:	1009883a 	mov	r4,r2
    ade0:	000d883a 	mov	r6,zero
    ade4:	000f883a 	mov	r7,zero
    ade8:	180b883a 	mov	r5,r3
    adec:	e0800015 	stw	r2,0(fp)
    adf0:	e0c00115 	stw	r3,4(fp)
    adf4:	000e9b80 	call	e9b8 <__nedf2>
    adf8:	103f9a26 	beq	r2,zero,ac64 <_strtod_r+0xfa4>
    adfc:	d9001417 	ldw	r4,80(sp)
    ae00:	2013003a 	cmpeq	r9,r4,zero
    ae04:	483f211e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    ae08:	003fcc06 	br	ad3c <_strtod_r+0x107c>
    ae0c:	d9001417 	ldw	r4,80(sp)
    ae10:	e1c00017 	ldw	r7,0(fp)
    ae14:	2013003a 	cmpeq	r9,r4,zero
    ae18:	4800bd1e 	bne	r9,zero,b110 <_strtod_r+0x1450>
    ae1c:	28dffc2c 	andhi	r3,r5,32752
    ae20:	0081a834 	movhi	r2,1696
    ae24:	10c0ba36 	bltu	r2,r3,b110 <_strtod_r+0x1450>
    ae28:	1804d53a 	srli	r2,r3,20
    ae2c:	00c01ac4 	movi	r3,107
    ae30:	013fffc4 	movi	r4,-1
    ae34:	1887c83a 	sub	r3,r3,r2
    ae38:	20c4983a 	sll	r2,r4,r3
    ae3c:	11ffd91e 	bne	r2,r7,ada4 <_strtod_r+0x10e4>
    ae40:	28dffc2c 	andhi	r3,r5,32752
    ae44:	00800434 	movhi	r2,16
    ae48:	188d883a 	add	r6,r3,r2
    ae4c:	e1800115 	stw	r6,4(fp)
    ae50:	e0000015 	stw	zero,0(fp)
    ae54:	483f0d1e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    ae58:	003fb806 	br	ad3c <_strtod_r+0x107c>
    ae5c:	0021883a 	mov	r16,zero
    ae60:	0005883a 	mov	r2,zero
    ae64:	044ff834 	movhi	r17,16352
    ae68:	00eff834 	movhi	r3,49120
    ae6c:	003e8606 	br	a888 <_strtod_r+0xbc8>
    ae70:	803d9e26 	beq	r16,zero,a4ec <_strtod_r+0x82c>
    ae74:	0421c83a 	sub	r16,zero,r16
    ae78:	814003cc 	andi	r5,r16,15
    ae7c:	28000f26 	beq	r5,zero,aebc <_strtod_r+0x11fc>
    ae80:	280a90fa 	slli	r5,r5,3
    ae84:	01000074 	movhi	r4,1
    ae88:	21096a04 	addi	r4,r4,9640
    ae8c:	e0800017 	ldw	r2,0(fp)
    ae90:	290b883a 	add	r5,r5,r4
    ae94:	2a000017 	ldw	r8,0(r5)
    ae98:	e0c00117 	ldw	r3,4(fp)
    ae9c:	2a400117 	ldw	r9,4(r5)
    aea0:	1009883a 	mov	r4,r2
    aea4:	180b883a 	mov	r5,r3
    aea8:	480f883a 	mov	r7,r9
    aeac:	400d883a 	mov	r6,r8
    aeb0:	000e6d80 	call	e6d8 <__divdf3>
    aeb4:	e0c00115 	stw	r3,4(fp)
    aeb8:	e0800015 	stw	r2,0(fp)
    aebc:	8021d13a 	srai	r16,r16,4
    aec0:	803d8a26 	beq	r16,zero,a4ec <_strtod_r+0x82c>
    aec4:	008007c4 	movi	r2,31
    aec8:	14002d16 	blt	r2,r16,af80 <_strtod_r+0x12c0>
    aecc:	8080040c 	andi	r2,r16,16
    aed0:	10009926 	beq	r2,zero,b138 <_strtod_r+0x1478>
    aed4:	00801a84 	movi	r2,106
    aed8:	d8801415 	stw	r2,80(sp)
    aedc:	0400110e 	bge	zero,r16,af24 <_strtod_r+0x1264>
    aee0:	04400074 	movhi	r17,1
    aee4:	8c49b704 	addi	r17,r17,9948
    aee8:	8080004c 	andi	r2,r16,1
    aeec:	1005003a 	cmpeq	r2,r2,zero
    aef0:	1000091e 	bne	r2,zero,af18 <_strtod_r+0x1258>
    aef4:	e0800017 	ldw	r2,0(fp)
    aef8:	e0c00117 	ldw	r3,4(fp)
    aefc:	89800017 	ldw	r6,0(r17)
    af00:	89c00117 	ldw	r7,4(r17)
    af04:	180b883a 	mov	r5,r3
    af08:	1009883a 	mov	r4,r2
    af0c:	000e3140 	call	e314 <__muldf3>
    af10:	e0c00115 	stw	r3,4(fp)
    af14:	e0800015 	stw	r2,0(fp)
    af18:	8021d07a 	srai	r16,r16,1
    af1c:	8c400204 	addi	r17,r17,8
    af20:	043ff116 	blt	zero,r16,aee8 <_strtod_r+0x1228>
    af24:	d8c01417 	ldw	r3,80(sp)
    af28:	18000d26 	beq	r3,zero,af60 <_strtod_r+0x12a0>
    af2c:	e1000117 	ldw	r4,4(fp)
    af30:	00c01ac4 	movi	r3,107
    af34:	209ffc2c 	andhi	r2,r4,32752
    af38:	1004d53a 	srli	r2,r2,20
    af3c:	1887c83a 	sub	r3,r3,r2
    af40:	00c0070e 	bge	zero,r3,af60 <_strtod_r+0x12a0>
    af44:	008007c4 	movi	r2,31
    af48:	10c0900e 	bge	r2,r3,b18c <_strtod_r+0x14cc>
    af4c:	00800d04 	movi	r2,52
    af50:	e0000015 	stw	zero,0(fp)
    af54:	10c0870e 	bge	r2,r3,b174 <_strtod_r+0x14b4>
    af58:	0180dc34 	movhi	r6,880
    af5c:	e1800115 	stw	r6,4(fp)
    af60:	e0800017 	ldw	r2,0(fp)
    af64:	e0c00117 	ldw	r3,4(fp)
    af68:	000d883a 	mov	r6,zero
    af6c:	000f883a 	mov	r7,zero
    af70:	180b883a 	mov	r5,r3
    af74:	1009883a 	mov	r4,r2
    af78:	000e9b80 	call	e9b8 <__nedf2>
    af7c:	103d5c1e 	bne	r2,zero,a4f0 <_strtod_r+0x830>
    af80:	00800884 	movi	r2,34
    af84:	a8800015 	stw	r2,0(r21)
    af88:	e0000015 	stw	zero,0(fp)
    af8c:	e0000115 	stw	zero,4(fp)
    af90:	003bc206 	br	9e9c <_strtod_r+0x1dc>
    af94:	d8801417 	ldw	r2,80(sp)
    af98:	1013003a 	cmpeq	r9,r2,zero
    af9c:	483ebb1e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    afa0:	003f6606 	br	ad3c <_strtod_r+0x107c>
    afa4:	e1800117 	ldw	r6,4(fp)
    afa8:	00c00434 	movhi	r3,16
    afac:	18ffffc4 	addi	r3,r3,-1
    afb0:	30c4703a 	and	r2,r6,r3
    afb4:	103f7a1e 	bne	r2,zero,ada0 <_strtod_r+0x10e0>
    afb8:	e1c00017 	ldw	r7,0(fp)
    afbc:	383f791e 	bne	r7,zero,ada4 <_strtod_r+0x10e4>
    afc0:	003f5606 	br	ad1c <_strtod_r+0x105c>
    afc4:	d9800f17 	ldw	r6,60(sp)
    afc8:	00bffa84 	movi	r2,-22
    afcc:	30bcd416 	blt	r6,r2,a320 <_strtod_r+0x660>
    afd0:	317ffe24 	muli	r5,r6,-8
    afd4:	01000074 	movhi	r4,1
    afd8:	21096a04 	addi	r4,r4,9640
    afdc:	e0800017 	ldw	r2,0(fp)
    afe0:	290b883a 	add	r5,r5,r4
    afe4:	2a000017 	ldw	r8,0(r5)
    afe8:	e0c00117 	ldw	r3,4(fp)
    afec:	2a400117 	ldw	r9,4(r5)
    aff0:	1009883a 	mov	r4,r2
    aff4:	180b883a 	mov	r5,r3
    aff8:	480f883a 	mov	r7,r9
    affc:	400d883a 	mov	r6,r8
    b000:	000e6d80 	call	e6d8 <__divdf3>
    b004:	e0c00115 	stw	r3,4(fp)
    b008:	e0800015 	stw	r2,0(fp)
    b00c:	003ba306 	br	9e9c <_strtod_r+0x1dc>
    b010:	00800404 	movi	r2,16
    b014:	14c02f0e 	bge	r2,r19,b0d4 <_strtod_r+0x1414>
    b018:	000f883a 	mov	r7,zero
    b01c:	003f2006 	br	aca0 <_strtod_r+0xfe0>
    b020:	d9801417 	ldw	r6,80(sp)
    b024:	3013003a 	cmpeq	r9,r6,zero
    b028:	483e981e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    b02c:	003f4306 	br	ad3c <_strtod_r+0x107c>
    b030:	00801a44 	movi	r2,105
    b034:	20bc6326 	beq	r4,r2,a1c4 <_strtod_r+0x504>
    b038:	00801b84 	movi	r2,110
    b03c:	20bbba1e 	bne	r4,r2,9f28 <_strtod_r+0x268>
    b040:	dc000404 	addi	r16,sp,16
    b044:	8009883a 	mov	r4,r16
    b048:	01400074 	movhi	r5,1
    b04c:	2949b604 	addi	r5,r5,9944
    b050:	0009c780 	call	9c78 <match>
    b054:	103bb426 	beq	r2,zero,9f28 <_strtod_r+0x268>
    b058:	d8800417 	ldw	r2,16(sp)
    b05c:	00c00a04 	movi	r3,40
    b060:	11000007 	ldb	r4,0(r2)
    b064:	20c03626 	beq	r4,r3,b140 <_strtod_r+0x1480>
    b068:	01bffe34 	movhi	r6,65528
    b06c:	e1800115 	stw	r6,4(fp)
    b070:	e0000015 	stw	zero,0(fp)
    b074:	003b8906 	br	9e9c <_strtod_r+0x1dc>
    b078:	e4400117 	ldw	r17,4(fp)
    b07c:	3809883a 	mov	r4,r7
    b080:	3821883a 	mov	r16,r7
    b084:	880b883a 	mov	r5,r17
    b088:	00081740 	call	8174 <__ulp>
    b08c:	100d883a 	mov	r6,r2
    b090:	880b883a 	mov	r5,r17
    b094:	180f883a 	mov	r7,r3
    b098:	8009883a 	mov	r4,r16
    b09c:	000e2a00 	call	e2a0 <__adddf3>
    b0a0:	d9801417 	ldw	r6,80(sp)
    b0a4:	e0c00115 	stw	r3,4(fp)
    b0a8:	e0800015 	stw	r2,0(fp)
    b0ac:	3013003a 	cmpeq	r9,r6,zero
    b0b0:	483e761e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    b0b4:	003f2106 	br	ad3c <_strtod_r+0x107c>
    b0b8:	000f883a 	mov	r7,zero
    b0bc:	003cf006 	br	a480 <_strtod_r+0x7c0>
    b0c0:	0080d434 	movhi	r2,848
    b0c4:	188d883a 	add	r6,r3,r2
    b0c8:	d8001415 	stw	zero,80(sp)
    b0cc:	e1800115 	stw	r6,4(fp)
    b0d0:	003d0706 	br	a4f0 <_strtod_r+0x830>
    b0d4:	808002a4 	muli	r2,r16,10
    b0d8:	000f883a 	mov	r7,zero
    b0dc:	1261883a 	add	r16,r2,r9
    b0e0:	003eef06 	br	aca0 <_strtod_r+0xfe0>
    b0e4:	309ffc2c 	andhi	r2,r6,32752
    b0e8:	00fffc34 	movhi	r3,65520
    b0ec:	10c5883a 	add	r2,r2,r3
    b0f0:	00c00434 	movhi	r3,16
    b0f4:	18ffffc4 	addi	r3,r3,-1
    b0f8:	10ccb03a 	or	r6,r2,r3
    b0fc:	01ffffc4 	movi	r7,-1
    b100:	e1800115 	stw	r6,4(fp)
    b104:	e1c00015 	stw	r7,0(fp)
    b108:	483e601e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    b10c:	003f0b06 	br	ad3c <_strtod_r+0x107c>
    b110:	00bfffc4 	movi	r2,-1
    b114:	003f4906 	br	ae3c <_strtod_r+0x117c>
    b118:	0025883a 	mov	r18,zero
    b11c:	003cb106 	br	a3e4 <_strtod_r+0x724>
    b120:	d8c01417 	ldw	r3,80(sp)
    b124:	1813003a 	cmpeq	r9,r3,zero
    b128:	483e581e 	bne	r9,zero,aa8c <_strtod_r+0xdcc>
    b12c:	003f0306 	br	ad3c <_strtod_r+0x107c>
    b130:	980f883a 	mov	r7,r19
    b134:	003ed406 	br	ac88 <_strtod_r+0xfc8>
    b138:	d8001415 	stw	zero,80(sp)
    b13c:	003f6706 	br	aedc <_strtod_r+0x121c>
    b140:	8009883a 	mov	r4,r16
    b144:	01400074 	movhi	r5,1
    b148:	294c0204 	addi	r5,r5,12296
    b14c:	d9800d04 	addi	r6,sp,52
    b150:	000ccb00 	call	ccb0 <__hexnan>
    b154:	00c00144 	movi	r3,5
    b158:	10ffc31e 	bne	r2,r3,b068 <_strtod_r+0x13a8>
    b15c:	d8800e17 	ldw	r2,56(sp)
    b160:	d9c00d17 	ldw	r7,52(sp)
    b164:	119ffc34 	orhi	r6,r2,32752
    b168:	e1800115 	stw	r6,4(fp)
    b16c:	e1c00015 	stw	r7,0(fp)
    b170:	003b4a06 	br	9e9c <_strtod_r+0x1dc>
    b174:	18fff804 	addi	r3,r3,-32
    b178:	00bfffc4 	movi	r2,-1
    b17c:	10c4983a 	sll	r2,r2,r3
    b180:	208c703a 	and	r6,r4,r2
    b184:	e1800115 	stw	r6,4(fp)
    b188:	003f7506 	br	af60 <_strtod_r+0x12a0>
    b18c:	00bfffc4 	movi	r2,-1
    b190:	10c4983a 	sll	r2,r2,r3
    b194:	e0c00017 	ldw	r3,0(fp)
    b198:	188e703a 	and	r7,r3,r2
    b19c:	e1c00015 	stw	r7,0(fp)
    b1a0:	003f6f06 	br	af60 <_strtod_r+0x12a0>

0000b1a4 <strtof>:
    b1a4:	defffa04 	addi	sp,sp,-24
    b1a8:	dd000415 	stw	r20,16(sp)
    b1ac:	05000074 	movhi	r20,1
    b1b0:	a510f904 	addi	r20,r20,17380
    b1b4:	2007883a 	mov	r3,r4
    b1b8:	a1000017 	ldw	r4,0(r20)
    b1bc:	280d883a 	mov	r6,r5
    b1c0:	180b883a 	mov	r5,r3
    b1c4:	dfc00515 	stw	ra,20(sp)
    b1c8:	dcc00315 	stw	r19,12(sp)
    b1cc:	dc800215 	stw	r18,8(sp)
    b1d0:	dc400115 	stw	r17,4(sp)
    b1d4:	dc000015 	stw	r16,0(sp)
    b1d8:	0009cc00 	call	9cc0 <_strtod_r>
    b1dc:	180b883a 	mov	r5,r3
    b1e0:	1009883a 	mov	r4,r2
    b1e4:	1823883a 	mov	r17,r3
    b1e8:	1021883a 	mov	r16,r2
    b1ec:	000ee300 	call	ee30 <__truncdfsf2>
    b1f0:	1009883a 	mov	r4,r2
    b1f4:	000b883a 	mov	r5,zero
    b1f8:	1025883a 	mov	r18,r2
    b1fc:	1027883a 	mov	r19,r2
    b200:	000dd200 	call	dd20 <__nesf2>
    b204:	000d883a 	mov	r6,zero
    b208:	000f883a 	mov	r7,zero
    b20c:	8009883a 	mov	r4,r16
    b210:	880b883a 	mov	r5,r17
    b214:	10000e1e 	bne	r2,zero,b250 <strtof+0xac>
    b218:	000e9b80 	call	e9b8 <__nedf2>
    b21c:	10000c26 	beq	r2,zero,b250 <strtof+0xac>
    b220:	a0c00017 	ldw	r3,0(r20)
    b224:	00800884 	movi	r2,34
    b228:	18800015 	stw	r2,0(r3)
    b22c:	9805883a 	mov	r2,r19
    b230:	dfc00517 	ldw	ra,20(sp)
    b234:	dd000417 	ldw	r20,16(sp)
    b238:	dcc00317 	ldw	r19,12(sp)
    b23c:	dc800217 	ldw	r18,8(sp)
    b240:	dc400117 	ldw	r17,4(sp)
    b244:	dc000017 	ldw	r16,0(sp)
    b248:	dec00604 	addi	sp,sp,24
    b24c:	f800283a 	ret
    b250:	9009883a 	mov	r4,r18
    b254:	015fe034 	movhi	r5,32640
    b258:	297fffc4 	addi	r5,r5,-1
    b25c:	000dd980 	call	dd98 <__gtsf2>
    b260:	00ffffc4 	movi	r3,-1
    b264:	011ffc34 	movhi	r4,32752
    b268:	213fffc4 	addi	r4,r4,-1
    b26c:	200f883a 	mov	r7,r4
    b270:	180d883a 	mov	r6,r3
    b274:	8009883a 	mov	r4,r16
    b278:	880b883a 	mov	r5,r17
    b27c:	00800f16 	blt	zero,r2,b2bc <strtof+0x118>
    b280:	9009883a 	mov	r4,r18
    b284:	017fe034 	movhi	r5,65408
    b288:	297fffc4 	addi	r5,r5,-1
    b28c:	00007cc0 	call	7cc <__ltsf2>
    b290:	023fffc4 	movi	r8,-1
    b294:	027ffc34 	movhi	r9,65520
    b298:	4a7fffc4 	addi	r9,r9,-1
    b29c:	880b883a 	mov	r5,r17
    b2a0:	480f883a 	mov	r7,r9
    b2a4:	8009883a 	mov	r4,r16
    b2a8:	400d883a 	mov	r6,r8
    b2ac:	103fdf0e 	bge	r2,zero,b22c <strtof+0x88>
    b2b0:	000eb500 	call	eb50 <__ltdf2>
    b2b4:	103fda0e 	bge	r2,zero,b220 <strtof+0x7c>
    b2b8:	003fdc06 	br	b22c <strtof+0x88>
    b2bc:	000ea400 	call	ea40 <__gtdf2>
    b2c0:	00bfd70e 	bge	zero,r2,b220 <strtof+0x7c>
    b2c4:	003fee06 	br	b280 <strtof+0xdc>

0000b2c8 <strtod>:
    b2c8:	01800074 	movhi	r6,1
    b2cc:	3190f904 	addi	r6,r6,17380
    b2d0:	2007883a 	mov	r3,r4
    b2d4:	31000017 	ldw	r4,0(r6)
    b2d8:	280d883a 	mov	r6,r5
    b2dc:	180b883a 	mov	r5,r3
    b2e0:	0009cc01 	jmpi	9cc0 <_strtod_r>

0000b2e4 <_strtol_r>:
    b2e4:	defff304 	addi	sp,sp,-52
    b2e8:	00800074 	movhi	r2,1
    b2ec:	1090f804 	addi	r2,r2,17376
    b2f0:	dcc00615 	stw	r19,24(sp)
    b2f4:	14c00017 	ldw	r19,0(r2)
    b2f8:	ddc00a15 	stw	r23,40(sp)
    b2fc:	dc000315 	stw	r16,12(sp)
    b300:	dfc00c15 	stw	ra,48(sp)
    b304:	df000b15 	stw	fp,44(sp)
    b308:	dd800915 	stw	r22,36(sp)
    b30c:	dd400815 	stw	r21,32(sp)
    b310:	dd000715 	stw	r20,28(sp)
    b314:	dc800515 	stw	r18,20(sp)
    b318:	dc400415 	stw	r17,16(sp)
    b31c:	282f883a 	mov	r23,r5
    b320:	d9000015 	stw	r4,0(sp)
    b324:	d9800115 	stw	r6,4(sp)
    b328:	2821883a 	mov	r16,r5
    b32c:	84400007 	ldb	r17,0(r16)
    b330:	84000044 	addi	r16,r16,1
    b334:	9c47883a 	add	r3,r19,r17
    b338:	18800003 	ldbu	r2,0(r3)
    b33c:	1080020c 	andi	r2,r2,8
    b340:	103ffa1e 	bne	r2,zero,b32c <_strtol_r+0x48>
    b344:	00800b44 	movi	r2,45
    b348:	88805c26 	beq	r17,r2,b4bc <_strtol_r+0x1d8>
    b34c:	00800ac4 	movi	r2,43
    b350:	88805726 	beq	r17,r2,b4b0 <_strtol_r+0x1cc>
    b354:	0039883a 	mov	fp,zero
    b358:	3807003a 	cmpeq	r3,r7,zero
    b35c:	1800431e 	bne	r3,zero,b46c <_strtol_r+0x188>
    b360:	00800404 	movi	r2,16
    b364:	38804126 	beq	r7,r2,b46c <_strtol_r+0x188>
    b368:	3829883a 	mov	r20,r7
    b36c:	e02cc03a 	cmpne	r22,fp,zero
    b370:	b0004b1e 	bne	r22,zero,b4a0 <_strtol_r+0x1bc>
    b374:	04a00034 	movhi	r18,32768
    b378:	94bfffc4 	addi	r18,r18,-1
    b37c:	9009883a 	mov	r4,r18
    b380:	a00b883a 	mov	r5,r20
    b384:	d9c00215 	stw	r7,8(sp)
    b388:	000f17c0 	call	f17c <__umodsi3>
    b38c:	9009883a 	mov	r4,r18
    b390:	a00b883a 	mov	r5,r20
    b394:	102b883a 	mov	r21,r2
    b398:	000f1740 	call	f174 <__udivsi3>
    b39c:	1011883a 	mov	r8,r2
    b3a0:	9c45883a 	add	r2,r19,r17
    b3a4:	11000003 	ldbu	r4,0(r2)
    b3a8:	000b883a 	mov	r5,zero
    b3ac:	000d883a 	mov	r6,zero
    b3b0:	20c0010c 	andi	r3,r4,4
    b3b4:	d9c00217 	ldw	r7,8(sp)
    b3b8:	18000e26 	beq	r3,zero,b3f4 <_strtol_r+0x110>
    b3bc:	88fff404 	addi	r3,r17,-48
    b3c0:	19c0140e 	bge	r3,r7,b414 <_strtol_r+0x130>
    b3c4:	30003116 	blt	r6,zero,b48c <_strtol_r+0x1a8>
    b3c8:	41403036 	bltu	r8,r5,b48c <_strtol_r+0x1a8>
    b3cc:	2a002e26 	beq	r5,r8,b488 <_strtol_r+0x1a4>
    b3d0:	2d05383a 	mul	r2,r5,r20
    b3d4:	01800044 	movi	r6,1
    b3d8:	10cb883a 	add	r5,r2,r3
    b3dc:	84400007 	ldb	r17,0(r16)
    b3e0:	84000044 	addi	r16,r16,1
    b3e4:	9c45883a 	add	r2,r19,r17
    b3e8:	11000003 	ldbu	r4,0(r2)
    b3ec:	20c0010c 	andi	r3,r4,4
    b3f0:	183ff21e 	bne	r3,zero,b3bc <_strtol_r+0xd8>
    b3f4:	208000cc 	andi	r2,r4,3
    b3f8:	10000626 	beq	r2,zero,b414 <_strtol_r+0x130>
    b3fc:	2080004c 	andi	r2,r4,1
    b400:	1005003a 	cmpeq	r2,r2,zero
    b404:	1000231e 	bne	r2,zero,b494 <_strtol_r+0x1b0>
    b408:	00800dc4 	movi	r2,55
    b40c:	8887c83a 	sub	r3,r17,r2
    b410:	19ffec16 	blt	r3,r7,b3c4 <_strtol_r+0xe0>
    b414:	30002d16 	blt	r6,zero,b4cc <_strtol_r+0x1e8>
    b418:	b000231e 	bne	r22,zero,b4a8 <_strtol_r+0x1c4>
    b41c:	2807883a 	mov	r3,r5
    b420:	d8800117 	ldw	r2,4(sp)
    b424:	10000426 	beq	r2,zero,b438 <_strtol_r+0x154>
    b428:	30000126 	beq	r6,zero,b430 <_strtol_r+0x14c>
    b42c:	85ffffc4 	addi	r23,r16,-1
    b430:	d9000117 	ldw	r4,4(sp)
    b434:	25c00015 	stw	r23,0(r4)
    b438:	1805883a 	mov	r2,r3
    b43c:	dfc00c17 	ldw	ra,48(sp)
    b440:	df000b17 	ldw	fp,44(sp)
    b444:	ddc00a17 	ldw	r23,40(sp)
    b448:	dd800917 	ldw	r22,36(sp)
    b44c:	dd400817 	ldw	r21,32(sp)
    b450:	dd000717 	ldw	r20,28(sp)
    b454:	dcc00617 	ldw	r19,24(sp)
    b458:	dc800517 	ldw	r18,20(sp)
    b45c:	dc400417 	ldw	r17,16(sp)
    b460:	dc000317 	ldw	r16,12(sp)
    b464:	dec00d04 	addi	sp,sp,52
    b468:	f800283a 	ret
    b46c:	00800c04 	movi	r2,48
    b470:	88801d26 	beq	r17,r2,b4e8 <_strtol_r+0x204>
    b474:	183fbc26 	beq	r3,zero,b368 <_strtol_r+0x84>
    b478:	00800c04 	movi	r2,48
    b47c:	88802726 	beq	r17,r2,b51c <_strtol_r+0x238>
    b480:	01c00284 	movi	r7,10
    b484:	003fb806 	br	b368 <_strtol_r+0x84>
    b488:	a8ffd10e 	bge	r21,r3,b3d0 <_strtol_r+0xec>
    b48c:	01bfffc4 	movi	r6,-1
    b490:	003fd206 	br	b3dc <_strtol_r+0xf8>
    b494:	008015c4 	movi	r2,87
    b498:	8887c83a 	sub	r3,r17,r2
    b49c:	003fdc06 	br	b410 <_strtol_r+0x12c>
    b4a0:	04a00034 	movhi	r18,32768
    b4a4:	003fb506 	br	b37c <_strtol_r+0x98>
    b4a8:	0147c83a 	sub	r3,zero,r5
    b4ac:	003fdc06 	br	b420 <_strtol_r+0x13c>
    b4b0:	84400007 	ldb	r17,0(r16)
    b4b4:	84000044 	addi	r16,r16,1
    b4b8:	003fa606 	br	b354 <_strtol_r+0x70>
    b4bc:	84400007 	ldb	r17,0(r16)
    b4c0:	07000044 	movi	fp,1
    b4c4:	84000044 	addi	r16,r16,1
    b4c8:	003fa306 	br	b358 <_strtol_r+0x74>
    b4cc:	e005003a 	cmpeq	r2,fp,zero
    b4d0:	10000f1e 	bne	r2,zero,b510 <_strtol_r+0x22c>
    b4d4:	00e00034 	movhi	r3,32768
    b4d8:	d9000017 	ldw	r4,0(sp)
    b4dc:	00800884 	movi	r2,34
    b4e0:	20800015 	stw	r2,0(r4)
    b4e4:	003fce06 	br	b420 <_strtol_r+0x13c>
    b4e8:	81000007 	ldb	r4,0(r16)
    b4ec:	00801e04 	movi	r2,120
    b4f0:	20800226 	beq	r4,r2,b4fc <_strtol_r+0x218>
    b4f4:	00801604 	movi	r2,88
    b4f8:	20bfde1e 	bne	r4,r2,b474 <_strtol_r+0x190>
    b4fc:	84400047 	ldb	r17,1(r16)
    b500:	01c00404 	movi	r7,16
    b504:	84000084 	addi	r16,r16,2
    b508:	3829883a 	mov	r20,r7
    b50c:	003f9706 	br	b36c <_strtol_r+0x88>
    b510:	00e00034 	movhi	r3,32768
    b514:	18ffffc4 	addi	r3,r3,-1
    b518:	003fef06 	br	b4d8 <_strtol_r+0x1f4>
    b51c:	01c00204 	movi	r7,8
    b520:	3829883a 	mov	r20,r7
    b524:	003f9106 	br	b36c <_strtol_r+0x88>

0000b528 <strtol>:
    b528:	00800074 	movhi	r2,1
    b52c:	1090f904 	addi	r2,r2,17380
    b530:	2013883a 	mov	r9,r4
    b534:	11000017 	ldw	r4,0(r2)
    b538:	2805883a 	mov	r2,r5
    b53c:	300f883a 	mov	r7,r6
    b540:	480b883a 	mov	r5,r9
    b544:	100d883a 	mov	r6,r2
    b548:	000b2e41 	jmpi	b2e4 <_strtol_r>

0000b54c <_strtoll_r>:
    b54c:	defff004 	addi	sp,sp,-64
    b550:	00800074 	movhi	r2,1
    b554:	1090f804 	addi	r2,r2,17376
    b558:	df000e15 	stw	fp,56(sp)
    b55c:	17000017 	ldw	fp,0(r2)
    b560:	ddc00d15 	stw	r23,52(sp)
    b564:	dd000a15 	stw	r20,40(sp)
    b568:	dfc00f15 	stw	ra,60(sp)
    b56c:	dd800c15 	stw	r22,48(sp)
    b570:	dd400b15 	stw	r21,44(sp)
    b574:	dcc00915 	stw	r19,36(sp)
    b578:	dc800815 	stw	r18,32(sp)
    b57c:	dc400715 	stw	r17,28(sp)
    b580:	dc000615 	stw	r16,24(sp)
    b584:	d9400315 	stw	r5,12(sp)
    b588:	d9000215 	stw	r4,8(sp)
    b58c:	d9800415 	stw	r6,16(sp)
    b590:	382f883a 	mov	r23,r7
    b594:	2829883a 	mov	r20,r5
    b598:	a4c00007 	ldb	r19,0(r20)
    b59c:	a5000044 	addi	r20,r20,1
    b5a0:	e4c7883a 	add	r3,fp,r19
    b5a4:	18800003 	ldbu	r2,0(r3)
    b5a8:	1080020c 	andi	r2,r2,8
    b5ac:	103ffa1e 	bne	r2,zero,b598 <_strtoll_r+0x4c>
    b5b0:	00800b44 	movi	r2,45
    b5b4:	98808826 	beq	r19,r2,b7d8 <_strtoll_r+0x28c>
    b5b8:	00800ac4 	movi	r2,43
    b5bc:	98808326 	beq	r19,r2,b7cc <_strtoll_r+0x280>
    b5c0:	d8000115 	stw	zero,4(sp)
    b5c4:	b807003a 	cmpeq	r3,r23,zero
    b5c8:	18005f1e 	bne	r3,zero,b748 <_strtoll_r+0x1fc>
    b5cc:	00800404 	movi	r2,16
    b5d0:	b8805d26 	beq	r23,r2,b748 <_strtoll_r+0x1fc>
    b5d4:	b82dd7fa 	srai	r22,r23,31
    b5d8:	b82b883a 	mov	r21,r23
    b5dc:	d8c00117 	ldw	r3,4(sp)
    b5e0:	1806c03a 	cmpne	r3,r3,zero
    b5e4:	d8c00515 	stw	r3,20(sp)
    b5e8:	1800631e 	bne	r3,zero,b778 <_strtoll_r+0x22c>
    b5ec:	043fffc4 	movi	r16,-1
    b5f0:	04600034 	movhi	r17,32768
    b5f4:	8c7fffc4 	addi	r17,r17,-1
    b5f8:	880b883a 	mov	r5,r17
    b5fc:	8009883a 	mov	r4,r16
    b600:	a80d883a 	mov	r6,r21
    b604:	b00f883a 	mov	r7,r22
    b608:	000d7700 	call	d770 <__umoddi3>
    b60c:	880b883a 	mov	r5,r17
    b610:	8009883a 	mov	r4,r16
    b614:	b00f883a 	mov	r7,r22
    b618:	a80d883a 	mov	r6,r21
    b61c:	d8800015 	stw	r2,0(sp)
    b620:	000d1940 	call	d194 <__udivdi3>
    b624:	1023883a 	mov	r17,r2
    b628:	e4c5883a 	add	r2,fp,r19
    b62c:	11000003 	ldbu	r4,0(r2)
    b630:	1825883a 	mov	r18,r3
    b634:	0015883a 	mov	r10,zero
    b638:	20c0010c 	andi	r3,r4,4
    b63c:	0017883a 	mov	r11,zero
    b640:	000f883a 	mov	r7,zero
    b644:	18001a26 	beq	r3,zero,b6b0 <_strtoll_r+0x164>
    b648:	9c3ff404 	addi	r16,r19,-48
    b64c:	85c0200e 	bge	r16,r23,b6d0 <_strtoll_r+0x184>
    b650:	38003b16 	blt	r7,zero,b740 <_strtoll_r+0x1f4>
    b654:	92c03a36 	bltu	r18,r11,b740 <_strtoll_r+0x1f4>
    b658:	5c803826 	beq	r11,r18,b73c <_strtoll_r+0x1f0>
    b65c:	54404c26 	beq	r10,r17,b790 <_strtoll_r+0x244>
    b660:	580b883a 	mov	r5,r11
    b664:	5009883a 	mov	r4,r10
    b668:	a80d883a 	mov	r6,r21
    b66c:	b00f883a 	mov	r7,r22
    b670:	000d0580 	call	d058 <__muldi3>
    b674:	8013d7fa 	srai	r9,r16,31
    b678:	100d883a 	mov	r6,r2
    b67c:	1405883a 	add	r2,r2,r16
    b680:	118d803a 	cmpltu	r6,r2,r6
    b684:	1a47883a 	add	r3,r3,r9
    b688:	30cd883a 	add	r6,r6,r3
    b68c:	1015883a 	mov	r10,r2
    b690:	3017883a 	mov	r11,r6
    b694:	01c00044 	movi	r7,1
    b698:	a4c00007 	ldb	r19,0(r20)
    b69c:	a5000044 	addi	r20,r20,1
    b6a0:	e4c5883a 	add	r2,fp,r19
    b6a4:	11000003 	ldbu	r4,0(r2)
    b6a8:	20c0010c 	andi	r3,r4,4
    b6ac:	183fe61e 	bne	r3,zero,b648 <_strtoll_r+0xfc>
    b6b0:	208000cc 	andi	r2,r4,3
    b6b4:	10000626 	beq	r2,zero,b6d0 <_strtoll_r+0x184>
    b6b8:	2080004c 	andi	r2,r4,1
    b6bc:	1005003a 	cmpeq	r2,r2,zero
    b6c0:	1000301e 	bne	r2,zero,b784 <_strtoll_r+0x238>
    b6c4:	02000dc4 	movi	r8,55
    b6c8:	9a21c83a 	sub	r16,r19,r8
    b6cc:	85ffe016 	blt	r16,r23,b650 <_strtoll_r+0x104>
    b6d0:	38004616 	blt	r7,zero,b7ec <_strtoll_r+0x2a0>
    b6d4:	d8800517 	ldw	r2,20(sp)
    b6d8:	1000341e 	bne	r2,zero,b7ac <_strtoll_r+0x260>
    b6dc:	500b883a 	mov	r5,r10
    b6e0:	580d883a 	mov	r6,r11
    b6e4:	d8c00417 	ldw	r3,16(sp)
    b6e8:	18000626 	beq	r3,zero,b704 <_strtoll_r+0x1b8>
    b6ec:	38000226 	beq	r7,zero,b6f8 <_strtoll_r+0x1ac>
    b6f0:	a53fffc4 	addi	r20,r20,-1
    b6f4:	dd000315 	stw	r20,12(sp)
    b6f8:	d8c00317 	ldw	r3,12(sp)
    b6fc:	d8800417 	ldw	r2,16(sp)
    b700:	10c00015 	stw	r3,0(r2)
    b704:	2805883a 	mov	r2,r5
    b708:	3007883a 	mov	r3,r6
    b70c:	dfc00f17 	ldw	ra,60(sp)
    b710:	df000e17 	ldw	fp,56(sp)
    b714:	ddc00d17 	ldw	r23,52(sp)
    b718:	dd800c17 	ldw	r22,48(sp)
    b71c:	dd400b17 	ldw	r21,44(sp)
    b720:	dd000a17 	ldw	r20,40(sp)
    b724:	dcc00917 	ldw	r19,36(sp)
    b728:	dc800817 	ldw	r18,32(sp)
    b72c:	dc400717 	ldw	r17,28(sp)
    b730:	dc000617 	ldw	r16,24(sp)
    b734:	dec01004 	addi	sp,sp,64
    b738:	f800283a 	ret
    b73c:	8abfc72e 	bgeu	r17,r10,b65c <_strtoll_r+0x110>
    b740:	01ffffc4 	movi	r7,-1
    b744:	003fd406 	br	b698 <_strtoll_r+0x14c>
    b748:	00800c04 	movi	r2,48
    b74c:	98803226 	beq	r19,r2,b818 <_strtoll_r+0x2cc>
    b750:	183fa026 	beq	r3,zero,b5d4 <_strtoll_r+0x88>
    b754:	00800c04 	movi	r2,48
    b758:	98803e26 	beq	r19,r2,b854 <_strtoll_r+0x308>
    b75c:	d8c00117 	ldw	r3,4(sp)
    b760:	05c00284 	movi	r23,10
    b764:	b82b883a 	mov	r21,r23
    b768:	1806c03a 	cmpne	r3,r3,zero
    b76c:	002d883a 	mov	r22,zero
    b770:	d8c00515 	stw	r3,20(sp)
    b774:	183f9d26 	beq	r3,zero,b5ec <_strtoll_r+0xa0>
    b778:	0021883a 	mov	r16,zero
    b77c:	04600034 	movhi	r17,32768
    b780:	003f9d06 	br	b5f8 <_strtoll_r+0xac>
    b784:	020015c4 	movi	r8,87
    b788:	9a21c83a 	sub	r16,r19,r8
    b78c:	003fcf06 	br	b6cc <_strtoll_r+0x180>
    b790:	5cbfb31e 	bne	r11,r18,b660 <_strtoll_r+0x114>
    b794:	d8800017 	ldw	r2,0(sp)
    b798:	143fb10e 	bge	r2,r16,b660 <_strtoll_r+0x114>
    b79c:	8815883a 	mov	r10,r17
    b7a0:	9017883a 	mov	r11,r18
    b7a4:	01ffffc4 	movi	r7,-1
    b7a8:	003fbb06 	br	b698 <_strtoll_r+0x14c>
    b7ac:	0009883a 	mov	r4,zero
    b7b0:	2285c83a 	sub	r2,r4,r10
    b7b4:	2089803a 	cmpltu	r4,r4,r2
    b7b8:	02c7c83a 	sub	r3,zero,r11
    b7bc:	1909c83a 	sub	r4,r3,r4
    b7c0:	100b883a 	mov	r5,r2
    b7c4:	200d883a 	mov	r6,r4
    b7c8:	003fc606 	br	b6e4 <_strtoll_r+0x198>
    b7cc:	a4c00007 	ldb	r19,0(r20)
    b7d0:	a5000044 	addi	r20,r20,1
    b7d4:	003f7a06 	br	b5c0 <_strtoll_r+0x74>
    b7d8:	a4c00007 	ldb	r19,0(r20)
    b7dc:	00800044 	movi	r2,1
    b7e0:	a5000044 	addi	r20,r20,1
    b7e4:	d8800115 	stw	r2,4(sp)
    b7e8:	003f7606 	br	b5c4 <_strtoll_r+0x78>
    b7ec:	d8c00117 	ldw	r3,4(sp)
    b7f0:	1805003a 	cmpeq	r2,r3,zero
    b7f4:	1000131e 	bne	r2,zero,b844 <_strtoll_r+0x2f8>
    b7f8:	0005883a 	mov	r2,zero
    b7fc:	00e00034 	movhi	r3,32768
    b800:	100b883a 	mov	r5,r2
    b804:	180d883a 	mov	r6,r3
    b808:	d8c00217 	ldw	r3,8(sp)
    b80c:	00800884 	movi	r2,34
    b810:	18800015 	stw	r2,0(r3)
    b814:	003fb306 	br	b6e4 <_strtoll_r+0x198>
    b818:	a1000007 	ldb	r4,0(r20)
    b81c:	00801e04 	movi	r2,120
    b820:	20800226 	beq	r4,r2,b82c <_strtoll_r+0x2e0>
    b824:	00801604 	movi	r2,88
    b828:	20bfc91e 	bne	r4,r2,b750 <_strtoll_r+0x204>
    b82c:	a4c00047 	ldb	r19,1(r20)
    b830:	05c00404 	movi	r23,16
    b834:	b82b883a 	mov	r21,r23
    b838:	a5000084 	addi	r20,r20,2
    b83c:	002d883a 	mov	r22,zero
    b840:	003f6606 	br	b5dc <_strtoll_r+0x90>
    b844:	017fffc4 	movi	r5,-1
    b848:	01a00034 	movhi	r6,32768
    b84c:	31bfffc4 	addi	r6,r6,-1
    b850:	003fed06 	br	b808 <_strtoll_r+0x2bc>
    b854:	05c00204 	movi	r23,8
    b858:	b82b883a 	mov	r21,r23
    b85c:	002d883a 	mov	r22,zero
    b860:	003f5e06 	br	b5dc <_strtoll_r+0x90>

0000b864 <_strtoul_r>:
    b864:	defff604 	addi	sp,sp,-40
    b868:	00800074 	movhi	r2,1
    b86c:	1090f804 	addi	r2,r2,17376
    b870:	dd000415 	stw	r20,16(sp)
    b874:	15000017 	ldw	r20,0(r2)
    b878:	ddc00715 	stw	r23,28(sp)
    b87c:	dd800615 	stw	r22,24(sp)
    b880:	dd400515 	stw	r21,20(sp)
    b884:	dc800215 	stw	r18,8(sp)
    b888:	dc000015 	stw	r16,0(sp)
    b88c:	dfc00915 	stw	ra,36(sp)
    b890:	df000815 	stw	fp,32(sp)
    b894:	dcc00315 	stw	r19,12(sp)
    b898:	dc400115 	stw	r17,4(sp)
    b89c:	282b883a 	mov	r21,r5
    b8a0:	202f883a 	mov	r23,r4
    b8a4:	302d883a 	mov	r22,r6
    b8a8:	3825883a 	mov	r18,r7
    b8ac:	2821883a 	mov	r16,r5
    b8b0:	84400007 	ldb	r17,0(r16)
    b8b4:	84000044 	addi	r16,r16,1
    b8b8:	a447883a 	add	r3,r20,r17
    b8bc:	18800003 	ldbu	r2,0(r3)
    b8c0:	1080020c 	andi	r2,r2,8
    b8c4:	103ffa1e 	bne	r2,zero,b8b0 <_strtoul_r+0x4c>
    b8c8:	00800b44 	movi	r2,45
    b8cc:	88805626 	beq	r17,r2,ba28 <_strtoul_r+0x1c4>
    b8d0:	00800ac4 	movi	r2,43
    b8d4:	88805126 	beq	r17,r2,ba1c <_strtoul_r+0x1b8>
    b8d8:	0039883a 	mov	fp,zero
    b8dc:	9007003a 	cmpeq	r3,r18,zero
    b8e0:	18003b1e 	bne	r3,zero,b9d0 <_strtoul_r+0x16c>
    b8e4:	00800404 	movi	r2,16
    b8e8:	90803926 	beq	r18,r2,b9d0 <_strtoul_r+0x16c>
    b8ec:	013fffc4 	movi	r4,-1
    b8f0:	900b883a 	mov	r5,r18
    b8f4:	000f1740 	call	f174 <__udivsi3>
    b8f8:	013fffc4 	movi	r4,-1
    b8fc:	900b883a 	mov	r5,r18
    b900:	1027883a 	mov	r19,r2
    b904:	000f17c0 	call	f17c <__umodsi3>
    b908:	1011883a 	mov	r8,r2
    b90c:	900f883a 	mov	r7,r18
    b910:	a445883a 	add	r2,r20,r17
    b914:	11000003 	ldbu	r4,0(r2)
    b918:	000b883a 	mov	r5,zero
    b91c:	000d883a 	mov	r6,zero
    b920:	20c0010c 	andi	r3,r4,4
    b924:	18000e26 	beq	r3,zero,b960 <_strtoul_r+0xfc>
    b928:	88fff404 	addi	r3,r17,-48
    b92c:	1c80140e 	bge	r3,r18,b980 <_strtoul_r+0x11c>
    b930:	30003316 	blt	r6,zero,ba00 <_strtoul_r+0x19c>
    b934:	99403236 	bltu	r19,r5,ba00 <_strtoul_r+0x19c>
    b938:	2cc03026 	beq	r5,r19,b9fc <_strtoul_r+0x198>
    b93c:	29c5383a 	mul	r2,r5,r7
    b940:	01800044 	movi	r6,1
    b944:	10cb883a 	add	r5,r2,r3
    b948:	84400007 	ldb	r17,0(r16)
    b94c:	84000044 	addi	r16,r16,1
    b950:	a445883a 	add	r2,r20,r17
    b954:	11000003 	ldbu	r4,0(r2)
    b958:	20c0010c 	andi	r3,r4,4
    b95c:	183ff21e 	bne	r3,zero,b928 <_strtoul_r+0xc4>
    b960:	208000cc 	andi	r2,r4,3
    b964:	10000626 	beq	r2,zero,b980 <_strtoul_r+0x11c>
    b968:	2080004c 	andi	r2,r4,1
    b96c:	1005003a 	cmpeq	r2,r2,zero
    b970:	1000251e 	bne	r2,zero,ba08 <_strtoul_r+0x1a4>
    b974:	00800dc4 	movi	r2,55
    b978:	8887c83a 	sub	r3,r17,r2
    b97c:	1cbfec16 	blt	r3,r18,b930 <_strtoul_r+0xcc>
    b980:	3000400e 	bge	r6,zero,ba84 <_strtoul_r+0x220>
    b984:	00800884 	movi	r2,34
    b988:	017fffc4 	movi	r5,-1
    b98c:	b8800015 	stw	r2,0(r23)
    b990:	b0000226 	beq	r22,zero,b99c <_strtoul_r+0x138>
    b994:	30001f1e 	bne	r6,zero,ba14 <_strtoul_r+0x1b0>
    b998:	b5400015 	stw	r21,0(r22)
    b99c:	2805883a 	mov	r2,r5
    b9a0:	dfc00917 	ldw	ra,36(sp)
    b9a4:	df000817 	ldw	fp,32(sp)
    b9a8:	ddc00717 	ldw	r23,28(sp)
    b9ac:	dd800617 	ldw	r22,24(sp)
    b9b0:	dd400517 	ldw	r21,20(sp)
    b9b4:	dd000417 	ldw	r20,16(sp)
    b9b8:	dcc00317 	ldw	r19,12(sp)
    b9bc:	dc800217 	ldw	r18,8(sp)
    b9c0:	dc400117 	ldw	r17,4(sp)
    b9c4:	dc000017 	ldw	r16,0(sp)
    b9c8:	dec00a04 	addi	sp,sp,40
    b9cc:	f800283a 	ret
    b9d0:	00800c04 	movi	r2,48
    b9d4:	88801826 	beq	r17,r2,ba38 <_strtoul_r+0x1d4>
    b9d8:	183fc426 	beq	r3,zero,b8ec <_strtoul_r+0x88>
    b9dc:	00800c04 	movi	r2,48
    b9e0:	88802226 	beq	r17,r2,ba6c <_strtoul_r+0x208>
    b9e4:	04800284 	movi	r18,10
    b9e8:	900f883a 	mov	r7,r18
    b9ec:	04c666b4 	movhi	r19,6554
    b9f0:	9ce66644 	addi	r19,r19,-26215
    b9f4:	02000144 	movi	r8,5
    b9f8:	003fc506 	br	b910 <_strtoul_r+0xac>
    b9fc:	40ffcf0e 	bge	r8,r3,b93c <_strtoul_r+0xd8>
    ba00:	01bfffc4 	movi	r6,-1
    ba04:	003fd006 	br	b948 <_strtoul_r+0xe4>
    ba08:	008015c4 	movi	r2,87
    ba0c:	8887c83a 	sub	r3,r17,r2
    ba10:	003fda06 	br	b97c <_strtoul_r+0x118>
    ba14:	857fffc4 	addi	r21,r16,-1
    ba18:	003fdf06 	br	b998 <_strtoul_r+0x134>
    ba1c:	84400007 	ldb	r17,0(r16)
    ba20:	84000044 	addi	r16,r16,1
    ba24:	003fac06 	br	b8d8 <_strtoul_r+0x74>
    ba28:	84400007 	ldb	r17,0(r16)
    ba2c:	07000044 	movi	fp,1
    ba30:	84000044 	addi	r16,r16,1
    ba34:	003fa906 	br	b8dc <_strtoul_r+0x78>
    ba38:	81000007 	ldb	r4,0(r16)
    ba3c:	00801e04 	movi	r2,120
    ba40:	20800226 	beq	r4,r2,ba4c <_strtoul_r+0x1e8>
    ba44:	00801604 	movi	r2,88
    ba48:	20bfe31e 	bne	r4,r2,b9d8 <_strtoul_r+0x174>
    ba4c:	84400047 	ldb	r17,1(r16)
    ba50:	04800404 	movi	r18,16
    ba54:	84000084 	addi	r16,r16,2
    ba58:	900f883a 	mov	r7,r18
    ba5c:	04c40034 	movhi	r19,4096
    ba60:	9cffffc4 	addi	r19,r19,-1
    ba64:	020003c4 	movi	r8,15
    ba68:	003fa906 	br	b910 <_strtoul_r+0xac>
    ba6c:	04800204 	movi	r18,8
    ba70:	900f883a 	mov	r7,r18
    ba74:	04c80034 	movhi	r19,8192
    ba78:	9cffffc4 	addi	r19,r19,-1
    ba7c:	020001c4 	movi	r8,7
    ba80:	003fa306 	br	b910 <_strtoul_r+0xac>
    ba84:	e005003a 	cmpeq	r2,fp,zero
    ba88:	103fc11e 	bne	r2,zero,b990 <_strtoul_r+0x12c>
    ba8c:	014bc83a 	sub	r5,zero,r5
    ba90:	003fbf06 	br	b990 <_strtoul_r+0x12c>

0000ba94 <strtoul>:
    ba94:	00800074 	movhi	r2,1
    ba98:	1090f904 	addi	r2,r2,17380
    ba9c:	2013883a 	mov	r9,r4
    baa0:	11000017 	ldw	r4,0(r2)
    baa4:	2805883a 	mov	r2,r5
    baa8:	300f883a 	mov	r7,r6
    baac:	480b883a 	mov	r5,r9
    bab0:	100d883a 	mov	r6,r2
    bab4:	000b8641 	jmpi	b864 <_strtoul_r>

0000bab8 <_strtoull_r>:
    bab8:	defff104 	addi	sp,sp,-60
    babc:	00800074 	movhi	r2,1
    bac0:	1090f804 	addi	r2,r2,17376
    bac4:	df000d15 	stw	fp,52(sp)
    bac8:	17000017 	ldw	fp,0(r2)
    bacc:	ddc00c15 	stw	r23,48(sp)
    bad0:	dcc00815 	stw	r19,32(sp)
    bad4:	dfc00e15 	stw	ra,56(sp)
    bad8:	dd800b15 	stw	r22,44(sp)
    badc:	dd400a15 	stw	r21,40(sp)
    bae0:	dd000915 	stw	r20,36(sp)
    bae4:	dc800715 	stw	r18,28(sp)
    bae8:	dc400615 	stw	r17,24(sp)
    baec:	dc000515 	stw	r16,20(sp)
    baf0:	d9400215 	stw	r5,8(sp)
    baf4:	d9000115 	stw	r4,4(sp)
    baf8:	d9800315 	stw	r6,12(sp)
    bafc:	382f883a 	mov	r23,r7
    bb00:	2827883a 	mov	r19,r5
    bb04:	9d000007 	ldb	r20,0(r19)
    bb08:	9cc00044 	addi	r19,r19,1
    bb0c:	e507883a 	add	r3,fp,r20
    bb10:	18800003 	ldbu	r2,0(r3)
    bb14:	1080020c 	andi	r2,r2,8
    bb18:	103ffa1e 	bne	r2,zero,bb04 <_strtoull_r+0x4c>
    bb1c:	00800b44 	movi	r2,45
    bb20:	a0807a26 	beq	r20,r2,bd0c <_strtoull_r+0x254>
    bb24:	00800ac4 	movi	r2,43
    bb28:	a0807526 	beq	r20,r2,bd00 <_strtoull_r+0x248>
    bb2c:	d8000015 	stw	zero,0(sp)
    bb30:	b807003a 	cmpeq	r3,r23,zero
    bb34:	18005a1e 	bne	r3,zero,bca0 <_strtoull_r+0x1e8>
    bb38:	00800404 	movi	r2,16
    bb3c:	b8805826 	beq	r23,r2,bca0 <_strtoull_r+0x1e8>
    bb40:	b82dd7fa 	srai	r22,r23,31
    bb44:	043fffc4 	movi	r16,-1
    bb48:	8009883a 	mov	r4,r16
    bb4c:	800b883a 	mov	r5,r16
    bb50:	b80d883a 	mov	r6,r23
    bb54:	b00f883a 	mov	r7,r22
    bb58:	000d1940 	call	d194 <__udivdi3>
    bb5c:	8009883a 	mov	r4,r16
    bb60:	800b883a 	mov	r5,r16
    bb64:	b80d883a 	mov	r6,r23
    bb68:	b00f883a 	mov	r7,r22
    bb6c:	1023883a 	mov	r17,r2
    bb70:	1825883a 	mov	r18,r3
    bb74:	000d7700 	call	d770 <__umoddi3>
    bb78:	b82b883a 	mov	r21,r23
    bb7c:	1019883a 	mov	r12,r2
    bb80:	e505883a 	add	r2,fp,r20
    bb84:	11000003 	ldbu	r4,0(r2)
    bb88:	0015883a 	mov	r10,zero
    bb8c:	0017883a 	mov	r11,zero
    bb90:	20c0010c 	andi	r3,r4,4
    bb94:	000d883a 	mov	r6,zero
    bb98:	18001c26 	beq	r3,zero,bc0c <_strtoull_r+0x154>
    bb9c:	a43ff404 	addi	r16,r20,-48
    bba0:	85c0220e 	bge	r16,r23,bc2c <_strtoull_r+0x174>
    bba4:	30003c16 	blt	r6,zero,bc98 <_strtoull_r+0x1e0>
    bba8:	92c03b36 	bltu	r18,r11,bc98 <_strtoull_r+0x1e0>
    bbac:	5c803926 	beq	r11,r18,bc94 <_strtoull_r+0x1dc>
    bbb0:	54404c26 	beq	r10,r17,bce4 <_strtoull_r+0x22c>
    bbb4:	580b883a 	mov	r5,r11
    bbb8:	5009883a 	mov	r4,r10
    bbbc:	a80d883a 	mov	r6,r21
    bbc0:	b00f883a 	mov	r7,r22
    bbc4:	db000415 	stw	r12,16(sp)
    bbc8:	000d0580 	call	d058 <__muldi3>
    bbcc:	8013d7fa 	srai	r9,r16,31
    bbd0:	100d883a 	mov	r6,r2
    bbd4:	1405883a 	add	r2,r2,r16
    bbd8:	118d803a 	cmpltu	r6,r2,r6
    bbdc:	1a47883a 	add	r3,r3,r9
    bbe0:	db000417 	ldw	r12,16(sp)
    bbe4:	30cd883a 	add	r6,r6,r3
    bbe8:	3017883a 	mov	r11,r6
    bbec:	1015883a 	mov	r10,r2
    bbf0:	01800044 	movi	r6,1
    bbf4:	9d000007 	ldb	r20,0(r19)
    bbf8:	9cc00044 	addi	r19,r19,1
    bbfc:	e505883a 	add	r2,fp,r20
    bc00:	11000003 	ldbu	r4,0(r2)
    bc04:	20c0010c 	andi	r3,r4,4
    bc08:	183fe41e 	bne	r3,zero,bb9c <_strtoull_r+0xe4>
    bc0c:	208000cc 	andi	r2,r4,3
    bc10:	10000626 	beq	r2,zero,bc2c <_strtoull_r+0x174>
    bc14:	2080004c 	andi	r2,r4,1
    bc18:	1005003a 	cmpeq	r2,r2,zero
    bc1c:	10002e1e 	bne	r2,zero,bcd8 <_strtoull_r+0x220>
    bc20:	02000dc4 	movi	r8,55
    bc24:	a221c83a 	sub	r16,r20,r8
    bc28:	85ffde16 	blt	r16,r23,bba4 <_strtoull_r+0xec>
    bc2c:	3000530e 	bge	r6,zero,bd7c <_strtoull_r+0x2c4>
    bc30:	d8c00117 	ldw	r3,4(sp)
    bc34:	02bfffc4 	movi	r10,-1
    bc38:	00800884 	movi	r2,34
    bc3c:	5017883a 	mov	r11,r10
    bc40:	18800015 	stw	r2,0(r3)
    bc44:	d8800317 	ldw	r2,12(sp)
    bc48:	10000426 	beq	r2,zero,bc5c <_strtoull_r+0x1a4>
    bc4c:	3000291e 	bne	r6,zero,bcf4 <_strtoull_r+0x23c>
    bc50:	d8800217 	ldw	r2,8(sp)
    bc54:	d8c00317 	ldw	r3,12(sp)
    bc58:	18800015 	stw	r2,0(r3)
    bc5c:	5005883a 	mov	r2,r10
    bc60:	5807883a 	mov	r3,r11
    bc64:	dfc00e17 	ldw	ra,56(sp)
    bc68:	df000d17 	ldw	fp,52(sp)
    bc6c:	ddc00c17 	ldw	r23,48(sp)
    bc70:	dd800b17 	ldw	r22,44(sp)
    bc74:	dd400a17 	ldw	r21,40(sp)
    bc78:	dd000917 	ldw	r20,36(sp)
    bc7c:	dcc00817 	ldw	r19,32(sp)
    bc80:	dc800717 	ldw	r18,28(sp)
    bc84:	dc400617 	ldw	r17,24(sp)
    bc88:	dc000517 	ldw	r16,20(sp)
    bc8c:	dec00f04 	addi	sp,sp,60
    bc90:	f800283a 	ret
    bc94:	8abfc62e 	bgeu	r17,r10,bbb0 <_strtoull_r+0xf8>
    bc98:	01bfffc4 	movi	r6,-1
    bc9c:	003fd506 	br	bbf4 <_strtoull_r+0x13c>
    bca0:	00800c04 	movi	r2,48
    bca4:	a0801e26 	beq	r20,r2,bd20 <_strtoull_r+0x268>
    bca8:	183fa526 	beq	r3,zero,bb40 <_strtoull_r+0x88>
    bcac:	00800c04 	movi	r2,48
    bcb0:	a0802a26 	beq	r20,r2,bd5c <_strtoull_r+0x2a4>
    bcb4:	05c00284 	movi	r23,10
    bcb8:	b82b883a 	mov	r21,r23
    bcbc:	046666b4 	movhi	r17,39322
    bcc0:	8c666644 	addi	r17,r17,-26215
    bcc4:	002d883a 	mov	r22,zero
    bcc8:	048666b4 	movhi	r18,6554
    bccc:	94a66644 	addi	r18,r18,-26215
    bcd0:	03000144 	movi	r12,5
    bcd4:	003faa06 	br	bb80 <_strtoull_r+0xc8>
    bcd8:	020015c4 	movi	r8,87
    bcdc:	a221c83a 	sub	r16,r20,r8
    bce0:	003fd106 	br	bc28 <_strtoull_r+0x170>
    bce4:	5cbfb31e 	bne	r11,r18,bbb4 <_strtoull_r+0xfc>
    bce8:	643fb20e 	bge	r12,r16,bbb4 <_strtoull_r+0xfc>
    bcec:	01bfffc4 	movi	r6,-1
    bcf0:	003fc006 	br	bbf4 <_strtoull_r+0x13c>
    bcf4:	9cffffc4 	addi	r19,r19,-1
    bcf8:	dcc00215 	stw	r19,8(sp)
    bcfc:	003fd406 	br	bc50 <_strtoull_r+0x198>
    bd00:	9d000007 	ldb	r20,0(r19)
    bd04:	9cc00044 	addi	r19,r19,1
    bd08:	003f8806 	br	bb2c <_strtoull_r+0x74>
    bd0c:	9d000007 	ldb	r20,0(r19)
    bd10:	00800044 	movi	r2,1
    bd14:	9cc00044 	addi	r19,r19,1
    bd18:	d8800015 	stw	r2,0(sp)
    bd1c:	003f8406 	br	bb30 <_strtoull_r+0x78>
    bd20:	99000007 	ldb	r4,0(r19)
    bd24:	00801e04 	movi	r2,120
    bd28:	20800226 	beq	r4,r2,bd34 <_strtoull_r+0x27c>
    bd2c:	00801604 	movi	r2,88
    bd30:	20bfdd1e 	bne	r4,r2,bca8 <_strtoull_r+0x1f0>
    bd34:	9d000047 	ldb	r20,1(r19)
    bd38:	05c00404 	movi	r23,16
    bd3c:	b82b883a 	mov	r21,r23
    bd40:	047fffc4 	movi	r17,-1
    bd44:	9cc00084 	addi	r19,r19,2
    bd48:	002d883a 	mov	r22,zero
    bd4c:	04840034 	movhi	r18,4096
    bd50:	94bfffc4 	addi	r18,r18,-1
    bd54:	030003c4 	movi	r12,15
    bd58:	003f8906 	br	bb80 <_strtoull_r+0xc8>
    bd5c:	05c00204 	movi	r23,8
    bd60:	b82b883a 	mov	r21,r23
    bd64:	047fffc4 	movi	r17,-1
    bd68:	002d883a 	mov	r22,zero
    bd6c:	04880034 	movhi	r18,8192
    bd70:	94bfffc4 	addi	r18,r18,-1
    bd74:	030001c4 	movi	r12,7
    bd78:	003f8106 	br	bb80 <_strtoull_r+0xc8>
    bd7c:	d8c00017 	ldw	r3,0(sp)
    bd80:	1805003a 	cmpeq	r2,r3,zero
    bd84:	103faf1e 	bne	r2,zero,bc44 <_strtoull_r+0x18c>
    bd88:	0009883a 	mov	r4,zero
    bd8c:	2285c83a 	sub	r2,r4,r10
    bd90:	02c7c83a 	sub	r3,zero,r11
    bd94:	2089803a 	cmpltu	r4,r4,r2
    bd98:	1909c83a 	sub	r4,r3,r4
    bd9c:	1015883a 	mov	r10,r2
    bda0:	2017883a 	mov	r11,r4
    bda4:	003fa706 	br	bc44 <_strtoull_r+0x18c>

0000bda8 <__submore>:
    bda8:	defffa04 	addi	sp,sp,-24
    bdac:	28c00c17 	ldw	r3,48(r5)
    bdb0:	dc800215 	stw	r18,8(sp)
    bdb4:	2825883a 	mov	r18,r5
    bdb8:	dc000015 	stw	r16,0(sp)
    bdbc:	90801004 	addi	r2,r18,64
    bdc0:	04010004 	movi	r16,1024
    bdc4:	dfc00515 	stw	ra,20(sp)
    bdc8:	dd000415 	stw	r20,16(sp)
    bdcc:	dcc00315 	stw	r19,12(sp)
    bdd0:	dc400115 	stw	r17,4(sp)
    bdd4:	800b883a 	mov	r5,r16
    bdd8:	18801b26 	beq	r3,r2,be48 <__submore+0xa0>
    bddc:	94400d17 	ldw	r17,52(r18)
    bde0:	180b883a 	mov	r5,r3
    bde4:	8c69883a 	add	r20,r17,r17
    bde8:	a00d883a 	mov	r6,r20
    bdec:	0008fac0 	call	8fac <_realloc_r>
    bdf0:	1467883a 	add	r19,r2,r17
    bdf4:	1021883a 	mov	r16,r2
    bdf8:	880d883a 	mov	r6,r17
    bdfc:	9809883a 	mov	r4,r19
    be00:	100b883a 	mov	r5,r2
    be04:	10000e26 	beq	r2,zero,be40 <__submore+0x98>
    be08:	0007da00 	call	7da0 <memcpy>
    be0c:	000d883a 	mov	r6,zero
    be10:	95000d15 	stw	r20,52(r18)
    be14:	94c00015 	stw	r19,0(r18)
    be18:	94000c15 	stw	r16,48(r18)
    be1c:	3005883a 	mov	r2,r6
    be20:	dfc00517 	ldw	ra,20(sp)
    be24:	dd000417 	ldw	r20,16(sp)
    be28:	dcc00317 	ldw	r19,12(sp)
    be2c:	dc800217 	ldw	r18,8(sp)
    be30:	dc400117 	ldw	r17,4(sp)
    be34:	dc000017 	ldw	r16,0(sp)
    be38:	dec00604 	addi	sp,sp,24
    be3c:	f800283a 	ret
    be40:	01bfffc4 	movi	r6,-1
    be44:	003ff506 	br	be1c <__submore+0x74>
    be48:	000747c0 	call	747c <_malloc_r>
    be4c:	1009883a 	mov	r4,r2
    be50:	1140ff44 	addi	r5,r2,1021
    be54:	000d883a 	mov	r6,zero
    be58:	103ff926 	beq	r2,zero,be40 <__submore+0x98>
    be5c:	90801083 	ldbu	r2,66(r18)
    be60:	94000d15 	stw	r16,52(r18)
    be64:	91000c15 	stw	r4,48(r18)
    be68:	28800085 	stb	r2,2(r5)
    be6c:	90c01043 	ldbu	r3,65(r18)
    be70:	28c00045 	stb	r3,1(r5)
    be74:	90801003 	ldbu	r2,64(r18)
    be78:	2080ff45 	stb	r2,1021(r4)
    be7c:	91400015 	stw	r5,0(r18)
    be80:	003fe606 	br	be1c <__submore+0x74>

0000be84 <_ungetc_r>:
    be84:	defffc04 	addi	sp,sp,-16
    be88:	00bfffc4 	movi	r2,-1
    be8c:	dc400215 	stw	r17,8(sp)
    be90:	dc000115 	stw	r16,4(sp)
    be94:	dfc00315 	stw	ra,12(sp)
    be98:	2821883a 	mov	r16,r5
    be9c:	2023883a 	mov	r17,r4
    bea0:	28801826 	beq	r5,r2,bf04 <_ungetc_r+0x80>
    bea4:	20000226 	beq	r4,zero,beb0 <_ungetc_r+0x2c>
    bea8:	20800e17 	ldw	r2,56(r4)
    beac:	10001b26 	beq	r2,zero,bf1c <_ungetc_r+0x98>
    beb0:	3100030b 	ldhu	r4,12(r6)
    beb4:	00bff7c4 	movi	r2,-33
    beb8:	2084703a 	and	r2,r4,r2
    bebc:	117fffcc 	andi	r5,r2,65535
    bec0:	28c0010c 	andi	r3,r5,4
    bec4:	1009883a 	mov	r4,r2
    bec8:	3080030d 	sth	r2,12(r6)
    becc:	18003526 	beq	r3,zero,bfa4 <_ungetc_r+0x120>
    bed0:	30800c17 	ldw	r2,48(r6)
    bed4:	84003fcc 	andi	r16,r16,255
    bed8:	10001426 	beq	r2,zero,bf2c <_ungetc_r+0xa8>
    bedc:	30c00117 	ldw	r3,4(r6)
    bee0:	30800d17 	ldw	r2,52(r6)
    bee4:	1880380e 	bge	r3,r2,bfc8 <_ungetc_r+0x144>
    bee8:	30c00017 	ldw	r3,0(r6)
    beec:	19ffffc4 	addi	r7,r3,-1
    bef0:	31c00015 	stw	r7,0(r6)
    bef4:	1c3fffc5 	stb	r16,-1(r3)
    bef8:	30800117 	ldw	r2,4(r6)
    befc:	10800044 	addi	r2,r2,1
    bf00:	30800115 	stw	r2,4(r6)
    bf04:	8005883a 	mov	r2,r16
    bf08:	dfc00317 	ldw	ra,12(sp)
    bf0c:	dc400217 	ldw	r17,8(sp)
    bf10:	dc000117 	ldw	r16,4(sp)
    bf14:	dec00404 	addi	sp,sp,16
    bf18:	f800283a 	ret
    bf1c:	d9800015 	stw	r6,0(sp)
    bf20:	00063080 	call	6308 <__sinit>
    bf24:	d9800017 	ldw	r6,0(sp)
    bf28:	003fe106 	br	beb0 <_ungetc_r+0x2c>
    bf2c:	30800417 	ldw	r2,16(r6)
    bf30:	10002326 	beq	r2,zero,bfc0 <_ungetc_r+0x13c>
    bf34:	31c00017 	ldw	r7,0(r6)
    bf38:	11c0022e 	bgeu	r2,r7,bf44 <_ungetc_r+0xc0>
    bf3c:	38bfffc3 	ldbu	r2,-1(r7)
    bf40:	80801226 	beq	r16,r2,bf8c <_ungetc_r+0x108>
    bf44:	30c00117 	ldw	r3,4(r6)
    bf48:	00800044 	movi	r2,1
    bf4c:	30800115 	stw	r2,4(r6)
    bf50:	008000c4 	movi	r2,3
    bf54:	31001004 	addi	r4,r6,64
    bf58:	31401084 	addi	r5,r6,66
    bf5c:	30800d15 	stw	r2,52(r6)
    bf60:	8005883a 	mov	r2,r16
    bf64:	30c00f15 	stw	r3,60(r6)
    bf68:	31c00e15 	stw	r7,56(r6)
    bf6c:	31000c15 	stw	r4,48(r6)
    bf70:	31400015 	stw	r5,0(r6)
    bf74:	34001085 	stb	r16,66(r6)
    bf78:	dfc00317 	ldw	ra,12(sp)
    bf7c:	dc400217 	ldw	r17,8(sp)
    bf80:	dc000117 	ldw	r16,4(sp)
    bf84:	dec00404 	addi	sp,sp,16
    bf88:	f800283a 	ret
    bf8c:	30800117 	ldw	r2,4(r6)
    bf90:	39ffffc4 	addi	r7,r7,-1
    bf94:	31c00015 	stw	r7,0(r6)
    bf98:	10800044 	addi	r2,r2,1
    bf9c:	30800115 	stw	r2,4(r6)
    bfa0:	003fd806 	br	bf04 <_ungetc_r+0x80>
    bfa4:	2880040c 	andi	r2,r5,16
    bfa8:	10000d26 	beq	r2,zero,bfe0 <_ungetc_r+0x15c>
    bfac:	2880020c 	andi	r2,r5,8
    bfb0:	10000d1e 	bne	r2,zero,bfe8 <_ungetc_r+0x164>
    bfb4:	20800114 	ori	r2,r4,4
    bfb8:	3080030d 	sth	r2,12(r6)
    bfbc:	003fc406 	br	bed0 <_ungetc_r+0x4c>
    bfc0:	31c00017 	ldw	r7,0(r6)
    bfc4:	003fdf06 	br	bf44 <_ungetc_r+0xc0>
    bfc8:	300b883a 	mov	r5,r6
    bfcc:	8809883a 	mov	r4,r17
    bfd0:	d9800015 	stw	r6,0(sp)
    bfd4:	000bda80 	call	bda8 <__submore>
    bfd8:	d9800017 	ldw	r6,0(sp)
    bfdc:	103fc226 	beq	r2,zero,bee8 <_ungetc_r+0x64>
    bfe0:	043fffc4 	movi	r16,-1
    bfe4:	003fc706 	br	bf04 <_ungetc_r+0x80>
    bfe8:	300b883a 	mov	r5,r6
    bfec:	8809883a 	mov	r4,r17
    bff0:	d9800015 	stw	r6,0(sp)
    bff4:	00060700 	call	6070 <_fflush_r>
    bff8:	d9800017 	ldw	r6,0(sp)
    bffc:	103ff81e 	bne	r2,zero,bfe0 <_ungetc_r+0x15c>
    c000:	3100030b 	ldhu	r4,12(r6)
    c004:	00bffdc4 	movi	r2,-9
    c008:	30000215 	stw	zero,8(r6)
    c00c:	2084703a 	and	r2,r4,r2
    c010:	1009883a 	mov	r4,r2
    c014:	3080030d 	sth	r2,12(r6)
    c018:	30000615 	stw	zero,24(r6)
    c01c:	003fe506 	br	bfb4 <_ungetc_r+0x130>

0000c020 <ungetc>:
    c020:	01800074 	movhi	r6,1
    c024:	3190f904 	addi	r6,r6,17380
    c028:	2007883a 	mov	r3,r4
    c02c:	31000017 	ldw	r4,0(r6)
    c030:	280d883a 	mov	r6,r5
    c034:	180b883a 	mov	r5,r3
    c038:	000be841 	jmpi	be84 <_ungetc_r>

0000c03c <_write_r>:
    c03c:	defffd04 	addi	sp,sp,-12
    c040:	dc000015 	stw	r16,0(sp)
    c044:	04000074 	movhi	r16,1
    c048:	84181b04 	addi	r16,r16,24684
    c04c:	dc400115 	stw	r17,4(sp)
    c050:	80000015 	stw	zero,0(r16)
    c054:	2023883a 	mov	r17,r4
    c058:	2809883a 	mov	r4,r5
    c05c:	300b883a 	mov	r5,r6
    c060:	380d883a 	mov	r6,r7
    c064:	dfc00215 	stw	ra,8(sp)
    c068:	000fabc0 	call	fabc <write>
    c06c:	1007883a 	mov	r3,r2
    c070:	00bfffc4 	movi	r2,-1
    c074:	18800626 	beq	r3,r2,c090 <_write_r+0x54>
    c078:	1805883a 	mov	r2,r3
    c07c:	dfc00217 	ldw	ra,8(sp)
    c080:	dc400117 	ldw	r17,4(sp)
    c084:	dc000017 	ldw	r16,0(sp)
    c088:	dec00304 	addi	sp,sp,12
    c08c:	f800283a 	ret
    c090:	80800017 	ldw	r2,0(r16)
    c094:	103ff826 	beq	r2,zero,c078 <_write_r+0x3c>
    c098:	88800015 	stw	r2,0(r17)
    c09c:	1805883a 	mov	r2,r3
    c0a0:	dfc00217 	ldw	ra,8(sp)
    c0a4:	dc400117 	ldw	r17,4(sp)
    c0a8:	dc000017 	ldw	r16,0(sp)
    c0ac:	dec00304 	addi	sp,sp,12
    c0b0:	f800283a 	ret

0000c0b4 <_calloc_r>:
    c0b4:	298b383a 	mul	r5,r5,r6
    c0b8:	defffe04 	addi	sp,sp,-8
    c0bc:	dc000015 	stw	r16,0(sp)
    c0c0:	dfc00115 	stw	ra,4(sp)
    c0c4:	000747c0 	call	747c <_malloc_r>
    c0c8:	1021883a 	mov	r16,r2
    c0cc:	01c00904 	movi	r7,36
    c0d0:	10000d26 	beq	r2,zero,c108 <_calloc_r+0x54>
    c0d4:	10ffff17 	ldw	r3,-4(r2)
    c0d8:	1009883a 	mov	r4,r2
    c0dc:	00bfff04 	movi	r2,-4
    c0e0:	1886703a 	and	r3,r3,r2
    c0e4:	1887883a 	add	r3,r3,r2
    c0e8:	180d883a 	mov	r6,r3
    c0ec:	000b883a 	mov	r5,zero
    c0f0:	38c01736 	bltu	r7,r3,c150 <_calloc_r+0x9c>
    c0f4:	008004c4 	movi	r2,19
    c0f8:	10c00836 	bltu	r2,r3,c11c <_calloc_r+0x68>
    c0fc:	20000215 	stw	zero,8(r4)
    c100:	20000015 	stw	zero,0(r4)
    c104:	20000115 	stw	zero,4(r4)
    c108:	8005883a 	mov	r2,r16
    c10c:	dfc00117 	ldw	ra,4(sp)
    c110:	dc000017 	ldw	r16,0(sp)
    c114:	dec00204 	addi	sp,sp,8
    c118:	f800283a 	ret
    c11c:	008006c4 	movi	r2,27
    c120:	80000015 	stw	zero,0(r16)
    c124:	80000115 	stw	zero,4(r16)
    c128:	81000204 	addi	r4,r16,8
    c12c:	10fff32e 	bgeu	r2,r3,c0fc <_calloc_r+0x48>
    c130:	80000215 	stw	zero,8(r16)
    c134:	80000315 	stw	zero,12(r16)
    c138:	81000404 	addi	r4,r16,16
    c13c:	19ffef1e 	bne	r3,r7,c0fc <_calloc_r+0x48>
    c140:	81000604 	addi	r4,r16,24
    c144:	80000415 	stw	zero,16(r16)
    c148:	80000515 	stw	zero,20(r16)
    c14c:	003feb06 	br	c0fc <_calloc_r+0x48>
    c150:	0007f200 	call	7f20 <memset>
    c154:	8005883a 	mov	r2,r16
    c158:	dfc00117 	ldw	ra,4(sp)
    c15c:	dc000017 	ldw	r16,0(sp)
    c160:	dec00204 	addi	sp,sp,8
    c164:	f800283a 	ret

0000c168 <_close_r>:
    c168:	defffd04 	addi	sp,sp,-12
    c16c:	dc000015 	stw	r16,0(sp)
    c170:	04000074 	movhi	r16,1
    c174:	84181b04 	addi	r16,r16,24684
    c178:	dc400115 	stw	r17,4(sp)
    c17c:	80000015 	stw	zero,0(r16)
    c180:	2023883a 	mov	r17,r4
    c184:	2809883a 	mov	r4,r5
    c188:	dfc00215 	stw	ra,8(sp)
    c18c:	000f3b00 	call	f3b0 <close>
    c190:	1007883a 	mov	r3,r2
    c194:	00bfffc4 	movi	r2,-1
    c198:	18800626 	beq	r3,r2,c1b4 <_close_r+0x4c>
    c19c:	1805883a 	mov	r2,r3
    c1a0:	dfc00217 	ldw	ra,8(sp)
    c1a4:	dc400117 	ldw	r17,4(sp)
    c1a8:	dc000017 	ldw	r16,0(sp)
    c1ac:	dec00304 	addi	sp,sp,12
    c1b0:	f800283a 	ret
    c1b4:	80800017 	ldw	r2,0(r16)
    c1b8:	103ff826 	beq	r2,zero,c19c <_close_r+0x34>
    c1bc:	88800015 	stw	r2,0(r17)
    c1c0:	1805883a 	mov	r2,r3
    c1c4:	dfc00217 	ldw	ra,8(sp)
    c1c8:	dc400117 	ldw	r17,4(sp)
    c1cc:	dc000017 	ldw	r16,0(sp)
    c1d0:	dec00304 	addi	sp,sp,12
    c1d4:	f800283a 	ret

0000c1d8 <_fclose_r>:
    c1d8:	defffc04 	addi	sp,sp,-16
    c1dc:	dc400115 	stw	r17,4(sp)
    c1e0:	dc000015 	stw	r16,0(sp)
    c1e4:	dfc00315 	stw	ra,12(sp)
    c1e8:	dc800215 	stw	r18,8(sp)
    c1ec:	2821883a 	mov	r16,r5
    c1f0:	2023883a 	mov	r17,r4
    c1f4:	28002926 	beq	r5,zero,c29c <_fclose_r+0xc4>
    c1f8:	00062f80 	call	62f8 <__sfp_lock_acquire>
    c1fc:	88000226 	beq	r17,zero,c208 <_fclose_r+0x30>
    c200:	88800e17 	ldw	r2,56(r17)
    c204:	10002d26 	beq	r2,zero,c2bc <_fclose_r+0xe4>
    c208:	8080030f 	ldh	r2,12(r16)
    c20c:	10002226 	beq	r2,zero,c298 <_fclose_r+0xc0>
    c210:	8809883a 	mov	r4,r17
    c214:	800b883a 	mov	r5,r16
    c218:	00060700 	call	6070 <_fflush_r>
    c21c:	1025883a 	mov	r18,r2
    c220:	80800b17 	ldw	r2,44(r16)
    c224:	10000426 	beq	r2,zero,c238 <_fclose_r+0x60>
    c228:	81400717 	ldw	r5,28(r16)
    c22c:	8809883a 	mov	r4,r17
    c230:	103ee83a 	callr	r2
    c234:	10002a16 	blt	r2,zero,c2e0 <_fclose_r+0x108>
    c238:	8080030b 	ldhu	r2,12(r16)
    c23c:	1080200c 	andi	r2,r2,128
    c240:	1000231e 	bne	r2,zero,c2d0 <_fclose_r+0xf8>
    c244:	81400c17 	ldw	r5,48(r16)
    c248:	28000526 	beq	r5,zero,c260 <_fclose_r+0x88>
    c24c:	80801004 	addi	r2,r16,64
    c250:	28800226 	beq	r5,r2,c25c <_fclose_r+0x84>
    c254:	8809883a 	mov	r4,r17
    c258:	00068c80 	call	68c8 <_free_r>
    c25c:	80000c15 	stw	zero,48(r16)
    c260:	81401117 	ldw	r5,68(r16)
    c264:	28000326 	beq	r5,zero,c274 <_fclose_r+0x9c>
    c268:	8809883a 	mov	r4,r17
    c26c:	00068c80 	call	68c8 <_free_r>
    c270:	80001115 	stw	zero,68(r16)
    c274:	8000030d 	sth	zero,12(r16)
    c278:	00062fc0 	call	62fc <__sfp_lock_release>
    c27c:	9005883a 	mov	r2,r18
    c280:	dfc00317 	ldw	ra,12(sp)
    c284:	dc800217 	ldw	r18,8(sp)
    c288:	dc400117 	ldw	r17,4(sp)
    c28c:	dc000017 	ldw	r16,0(sp)
    c290:	dec00404 	addi	sp,sp,16
    c294:	f800283a 	ret
    c298:	00062fc0 	call	62fc <__sfp_lock_release>
    c29c:	0025883a 	mov	r18,zero
    c2a0:	9005883a 	mov	r2,r18
    c2a4:	dfc00317 	ldw	ra,12(sp)
    c2a8:	dc800217 	ldw	r18,8(sp)
    c2ac:	dc400117 	ldw	r17,4(sp)
    c2b0:	dc000017 	ldw	r16,0(sp)
    c2b4:	dec00404 	addi	sp,sp,16
    c2b8:	f800283a 	ret
    c2bc:	8809883a 	mov	r4,r17
    c2c0:	00063080 	call	6308 <__sinit>
    c2c4:	8080030f 	ldh	r2,12(r16)
    c2c8:	103fd11e 	bne	r2,zero,c210 <_fclose_r+0x38>
    c2cc:	003ff206 	br	c298 <_fclose_r+0xc0>
    c2d0:	81400417 	ldw	r5,16(r16)
    c2d4:	8809883a 	mov	r4,r17
    c2d8:	00068c80 	call	68c8 <_free_r>
    c2dc:	003fd906 	br	c244 <_fclose_r+0x6c>
    c2e0:	04bfffc4 	movi	r18,-1
    c2e4:	003fd406 	br	c238 <_fclose_r+0x60>

0000c2e8 <fclose>:
    c2e8:	00800074 	movhi	r2,1
    c2ec:	1090f904 	addi	r2,r2,17380
    c2f0:	200b883a 	mov	r5,r4
    c2f4:	11000017 	ldw	r4,0(r2)
    c2f8:	000c1d81 	jmpi	c1d8 <_fclose_r>

0000c2fc <_fstat_r>:
    c2fc:	defffd04 	addi	sp,sp,-12
    c300:	dc000015 	stw	r16,0(sp)
    c304:	04000074 	movhi	r16,1
    c308:	84181b04 	addi	r16,r16,24684
    c30c:	dc400115 	stw	r17,4(sp)
    c310:	80000015 	stw	zero,0(r16)
    c314:	2023883a 	mov	r17,r4
    c318:	2809883a 	mov	r4,r5
    c31c:	300b883a 	mov	r5,r6
    c320:	dfc00215 	stw	ra,8(sp)
    c324:	000f4940 	call	f494 <fstat>
    c328:	1007883a 	mov	r3,r2
    c32c:	00bfffc4 	movi	r2,-1
    c330:	18800626 	beq	r3,r2,c34c <_fstat_r+0x50>
    c334:	1805883a 	mov	r2,r3
    c338:	dfc00217 	ldw	ra,8(sp)
    c33c:	dc400117 	ldw	r17,4(sp)
    c340:	dc000017 	ldw	r16,0(sp)
    c344:	dec00304 	addi	sp,sp,12
    c348:	f800283a 	ret
    c34c:	80800017 	ldw	r2,0(r16)
    c350:	103ff826 	beq	r2,zero,c334 <_fstat_r+0x38>
    c354:	88800015 	stw	r2,0(r17)
    c358:	1805883a 	mov	r2,r3
    c35c:	dfc00217 	ldw	ra,8(sp)
    c360:	dc400117 	ldw	r17,4(sp)
    c364:	dc000017 	ldw	r16,0(sp)
    c368:	dec00304 	addi	sp,sp,12
    c36c:	f800283a 	ret

0000c370 <htinit>:
    c370:	28800003 	ldbu	r2,0(r5)
    c374:	10000626 	beq	r2,zero,c390 <htinit+0x20>
    c378:	1105883a 	add	r2,r2,r4
    c37c:	11800005 	stb	r6,0(r2)
    c380:	28800043 	ldbu	r2,1(r5)
    c384:	31800044 	addi	r6,r6,1
    c388:	29400044 	addi	r5,r5,1
    c38c:	103ffa1e 	bne	r2,zero,c378 <htinit+0x8>
    c390:	f800283a 	ret

0000c394 <__hexdig_init>:
    c394:	defffd04 	addi	sp,sp,-12
    c398:	dc400015 	stw	r17,0(sp)
    c39c:	04400074 	movhi	r17,1
    c3a0:	8c582c04 	addi	r17,r17,24752
    c3a4:	dcc00115 	stw	r19,4(sp)
    c3a8:	8809883a 	mov	r4,r17
    c3ac:	04c00684 	movi	r19,26
    c3b0:	01400074 	movhi	r5,1
    c3b4:	2949c104 	addi	r5,r5,9988
    c3b8:	01800404 	movi	r6,16
    c3bc:	dfc00215 	stw	ra,8(sp)
    c3c0:	000c3700 	call	c370 <htinit>
    c3c4:	980d883a 	mov	r6,r19
    c3c8:	8809883a 	mov	r4,r17
    c3cc:	01400074 	movhi	r5,1
    c3d0:	2949c404 	addi	r5,r5,10000
    c3d4:	000c3700 	call	c370 <htinit>
    c3d8:	8809883a 	mov	r4,r17
    c3dc:	980d883a 	mov	r6,r19
    c3e0:	01400074 	movhi	r5,1
    c3e4:	2949c604 	addi	r5,r5,10008
    c3e8:	dfc00217 	ldw	ra,8(sp)
    c3ec:	dcc00117 	ldw	r19,4(sp)
    c3f0:	dc400017 	ldw	r17,0(sp)
    c3f4:	dec00304 	addi	sp,sp,12
    c3f8:	000c3701 	jmpi	c370 <htinit>

0000c3fc <rshift>:
    c3fc:	2807d17a 	srai	r3,r5,5
    c400:	20800417 	ldw	r2,16(r4)
    c404:	22400504 	addi	r9,r4,20
    c408:	480f883a 	mov	r7,r9
    c40c:	1880190e 	bge	r3,r2,c474 <rshift+0x78>
    c410:	1085883a 	add	r2,r2,r2
    c414:	18c7883a 	add	r3,r3,r3
    c418:	1085883a 	add	r2,r2,r2
    c41c:	18c7883a 	add	r3,r3,r3
    c420:	294007cc 	andi	r5,r5,31
    c424:	4891883a 	add	r8,r9,r2
    c428:	48cd883a 	add	r6,r9,r3
    c42c:	28001726 	beq	r5,zero,c48c <rshift+0x90>
    c430:	30c00017 	ldw	r3,0(r6)
    c434:	00800804 	movi	r2,32
    c438:	31800104 	addi	r6,r6,4
    c43c:	1155c83a 	sub	r10,r2,r5
    c440:	1946d83a 	srl	r3,r3,r5
    c444:	3200092e 	bgeu	r6,r8,c46c <rshift+0x70>
    c448:	30800017 	ldw	r2,0(r6)
    c44c:	1284983a 	sll	r2,r2,r10
    c450:	10c4b03a 	or	r2,r2,r3
    c454:	38800015 	stw	r2,0(r7)
    c458:	30c00017 	ldw	r3,0(r6)
    c45c:	31800104 	addi	r6,r6,4
    c460:	39c00104 	addi	r7,r7,4
    c464:	1946d83a 	srl	r3,r3,r5
    c468:	323ff736 	bltu	r6,r8,c448 <rshift+0x4c>
    c46c:	38c00015 	stw	r3,0(r7)
    c470:	18000c1e 	bne	r3,zero,c4a4 <rshift+0xa8>
    c474:	3a45c83a 	sub	r2,r7,r9
    c478:	1005d0ba 	srai	r2,r2,2
    c47c:	20800415 	stw	r2,16(r4)
    c480:	1000011e 	bne	r2,zero,c488 <rshift+0x8c>
    c484:	20000515 	stw	zero,20(r4)
    c488:	f800283a 	ret
    c48c:	323ff92e 	bgeu	r6,r8,c474 <rshift+0x78>
    c490:	30800017 	ldw	r2,0(r6)
    c494:	31800104 	addi	r6,r6,4
    c498:	38800015 	stw	r2,0(r7)
    c49c:	39c00104 	addi	r7,r7,4
    c4a0:	003ffa06 	br	c48c <rshift+0x90>
    c4a4:	39c00104 	addi	r7,r7,4
    c4a8:	003ff206 	br	c474 <rshift+0x78>

0000c4ac <__gethex>:
    c4ac:	defff304 	addi	sp,sp,-52
    c4b0:	dd400815 	stw	r21,32(sp)
    c4b4:	dd000715 	stw	r20,28(sp)
    c4b8:	dcc00615 	stw	r19,24(sp)
    c4bc:	dc400415 	stw	r17,16(sp)
    c4c0:	dfc00c15 	stw	ra,48(sp)
    c4c4:	df000b15 	stw	fp,44(sp)
    c4c8:	ddc00a15 	stw	r23,40(sp)
    c4cc:	dd800915 	stw	r22,36(sp)
    c4d0:	dc800515 	stw	r18,20(sp)
    c4d4:	dc000315 	stw	r16,12(sp)
    c4d8:	04400074 	movhi	r17,1
    c4dc:	8c582c04 	addi	r17,r17,24752
    c4e0:	88800c03 	ldbu	r2,48(r17)
    c4e4:	202b883a 	mov	r21,r4
    c4e8:	2827883a 	mov	r19,r5
    c4ec:	3029883a 	mov	r20,r6
    c4f0:	d9c00115 	stw	r7,4(sp)
    c4f4:	10006e26 	beq	r2,zero,c6b0 <__gethex+0x204>
    c4f8:	99800017 	ldw	r6,0(r19)
    c4fc:	00800c04 	movi	r2,48
    c500:	31000083 	ldbu	r4,2(r6)
    c504:	30c00084 	addi	r3,r6,2
    c508:	20806f1e 	bne	r4,r2,c6c8 <__gethex+0x21c>
    c50c:	200b883a 	mov	r5,r4
    c510:	3007883a 	mov	r3,r6
    c514:	188000c3 	ldbu	r2,3(r3)
    c518:	18c00044 	addi	r3,r3,1
    c51c:	1009883a 	mov	r4,r2
    c520:	117ffc26 	beq	r2,r5,c514 <__gethex+0x68>
    c524:	1997c83a 	sub	r11,r3,r6
    c528:	19400084 	addi	r5,r3,2
    c52c:	2445883a 	add	r2,r4,r17
    c530:	10c00003 	ldbu	r3,0(r2)
    c534:	18002d26 	beq	r3,zero,c5ec <__gethex+0x140>
    c538:	29000003 	ldbu	r4,0(r5)
    c53c:	2825883a 	mov	r18,r5
    c540:	000d883a 	mov	r6,zero
    c544:	0013883a 	mov	r9,zero
    c548:	21003fcc 	andi	r4,r4,255
    c54c:	2445883a 	add	r2,r4,r17
    c550:	10c00003 	ldbu	r3,0(r2)
    c554:	18000526 	beq	r3,zero,c56c <__gethex+0xc0>
    c558:	29400044 	addi	r5,r5,1
    c55c:	29000003 	ldbu	r4,0(r5)
    c560:	2445883a 	add	r2,r4,r17
    c564:	10c00003 	ldbu	r3,0(r2)
    c568:	183ffb1e 	bne	r3,zero,c558 <__gethex+0xac>
    c56c:	00800b84 	movi	r2,46
    c570:	20805826 	beq	r4,r2,c6d4 <__gethex+0x228>
    c574:	30007a26 	beq	r6,zero,c760 <__gethex+0x2b4>
    c578:	2985c83a 	sub	r2,r5,r6
    c57c:	1085883a 	add	r2,r2,r2
    c580:	1085883a 	add	r2,r2,r2
    c584:	00adc83a 	sub	r22,zero,r2
    c588:	2821883a 	mov	r16,r5
    c58c:	80c00003 	ldbu	r3,0(r16)
    c590:	00801404 	movi	r2,80
    c594:	18801e26 	beq	r3,r2,c610 <__gethex+0x164>
    c598:	00801c04 	movi	r2,112
    c59c:	18801c26 	beq	r3,r2,c610 <__gethex+0x164>
    c5a0:	800d883a 	mov	r6,r16
    c5a4:	4805003a 	cmpeq	r2,r9,zero
    c5a8:	99800015 	stw	r6,0(r19)
    c5ac:	1000861e 	bne	r2,zero,c7c8 <__gethex+0x31c>
    c5b0:	58003d26 	beq	r11,zero,c6a8 <__gethex+0x1fc>
    c5b4:	0025883a 	mov	r18,zero
    c5b8:	9005883a 	mov	r2,r18
    c5bc:	dfc00c17 	ldw	ra,48(sp)
    c5c0:	df000b17 	ldw	fp,44(sp)
    c5c4:	ddc00a17 	ldw	r23,40(sp)
    c5c8:	dd800917 	ldw	r22,36(sp)
    c5cc:	dd400817 	ldw	r21,32(sp)
    c5d0:	dd000717 	ldw	r20,28(sp)
    c5d4:	dcc00617 	ldw	r19,24(sp)
    c5d8:	dc800517 	ldw	r18,20(sp)
    c5dc:	dc400417 	ldw	r17,16(sp)
    c5e0:	dc000317 	ldw	r16,12(sp)
    c5e4:	dec00d04 	addi	sp,sp,52
    c5e8:	f800283a 	ret
    c5ec:	00800b84 	movi	r2,46
    c5f0:	20804a26 	beq	r4,r2,c71c <__gethex+0x270>
    c5f4:	2821883a 	mov	r16,r5
    c5f8:	80c00003 	ldbu	r3,0(r16)
    c5fc:	00801404 	movi	r2,80
    c600:	2825883a 	mov	r18,r5
    c604:	02400044 	movi	r9,1
    c608:	002d883a 	mov	r22,zero
    c60c:	18bfe21e 	bne	r3,r2,c598 <__gethex+0xec>
    c610:	80c00043 	ldbu	r3,1(r16)
    c614:	00800ac4 	movi	r2,43
    c618:	81000044 	addi	r4,r16,1
    c61c:	18804a26 	beq	r3,r2,c748 <__gethex+0x29c>
    c620:	00800b44 	movi	r2,45
    c624:	18804c26 	beq	r3,r2,c758 <__gethex+0x2ac>
    c628:	0015883a 	mov	r10,zero
    c62c:	1c45883a 	add	r2,r3,r17
    c630:	10800003 	ldbu	r2,0(r2)
    c634:	103fda26 	beq	r2,zero,c5a0 <__gethex+0xf4>
    c638:	02000644 	movi	r8,25
    c63c:	40bfd816 	blt	r8,r2,c5a0 <__gethex+0xf4>
    c640:	20c00043 	ldbu	r3,1(r4)
    c644:	11fffc04 	addi	r7,r2,-16
    c648:	00800074 	movhi	r2,1
    c64c:	10982c04 	addi	r2,r2,24752
    c650:	1887883a 	add	r3,r3,r2
    c654:	18800003 	ldbu	r2,0(r3)
    c658:	21800044 	addi	r6,r4,1
    c65c:	10000d26 	beq	r2,zero,c694 <__gethex+0x1e8>
    c660:	100b883a 	mov	r5,r2
    c664:	4080020e 	bge	r8,r2,c670 <__gethex+0x1c4>
    c668:	00000a06 	br	c694 <__gethex+0x1e8>
    c66c:	41000916 	blt	r8,r4,c694 <__gethex+0x1e8>
    c670:	31800044 	addi	r6,r6,1
    c674:	30800003 	ldbu	r2,0(r6)
    c678:	38c002a4 	muli	r3,r7,10
    c67c:	1445883a 	add	r2,r2,r17
    c680:	11000003 	ldbu	r4,0(r2)
    c684:	1947883a 	add	r3,r3,r5
    c688:	19fffc04 	addi	r7,r3,-16
    c68c:	200b883a 	mov	r5,r4
    c690:	203ff61e 	bne	r4,zero,c66c <__gethex+0x1c0>
    c694:	5005003a 	cmpeq	r2,r10,zero
    c698:	1000011e 	bne	r2,zero,c6a0 <__gethex+0x1f4>
    c69c:	01cfc83a 	sub	r7,zero,r7
    c6a0:	b1ed883a 	add	r22,r22,r7
    c6a4:	003fbf06 	br	c5a4 <__gethex+0xf8>
    c6a8:	04800184 	movi	r18,6
    c6ac:	003fc206 	br	c5b8 <__gethex+0x10c>
    c6b0:	000c3940 	call	c394 <__hexdig_init>
    c6b4:	99800017 	ldw	r6,0(r19)
    c6b8:	00800c04 	movi	r2,48
    c6bc:	31000083 	ldbu	r4,2(r6)
    c6c0:	30c00084 	addi	r3,r6,2
    c6c4:	20bf9126 	beq	r4,r2,c50c <__gethex+0x60>
    c6c8:	180b883a 	mov	r5,r3
    c6cc:	0017883a 	mov	r11,zero
    c6d0:	003f9606 	br	c52c <__gethex+0x80>
    c6d4:	303fa81e 	bne	r6,zero,c578 <__gethex+0xcc>
    c6d8:	29400044 	addi	r5,r5,1
    c6dc:	28800003 	ldbu	r2,0(r5)
    c6e0:	1445883a 	add	r2,r2,r17
    c6e4:	10c00003 	ldbu	r3,0(r2)
    c6e8:	1800ad26 	beq	r3,zero,c9a0 <__gethex+0x4f4>
    c6ec:	2809883a 	mov	r4,r5
    c6f0:	21000044 	addi	r4,r4,1
    c6f4:	20800003 	ldbu	r2,0(r4)
    c6f8:	1445883a 	add	r2,r2,r17
    c6fc:	10c00003 	ldbu	r3,0(r2)
    c700:	183ffb1e 	bne	r3,zero,c6f0 <__gethex+0x244>
    c704:	2145c83a 	sub	r2,r4,r5
    c708:	1085883a 	add	r2,r2,r2
    c70c:	1085883a 	add	r2,r2,r2
    c710:	00adc83a 	sub	r22,zero,r2
    c714:	200b883a 	mov	r5,r4
    c718:	003f9b06 	br	c588 <__gethex+0xdc>
    c71c:	29000043 	ldbu	r4,1(r5)
    c720:	00800074 	movhi	r2,1
    c724:	10982c04 	addi	r2,r2,24752
    c728:	2c000044 	addi	r16,r5,1
    c72c:	2085883a 	add	r2,r4,r2
    c730:	10c00003 	ldbu	r3,0(r2)
    c734:	18000d1e 	bne	r3,zero,c76c <__gethex+0x2c0>
    c738:	2825883a 	mov	r18,r5
    c73c:	02400044 	movi	r9,1
    c740:	002d883a 	mov	r22,zero
    c744:	003f9106 	br	c58c <__gethex+0xe0>
    c748:	0015883a 	mov	r10,zero
    c74c:	21000044 	addi	r4,r4,1
    c750:	20c00003 	ldbu	r3,0(r4)
    c754:	003fb506 	br	c62c <__gethex+0x180>
    c758:	02800044 	movi	r10,1
    c75c:	003ffb06 	br	c74c <__gethex+0x2a0>
    c760:	2821883a 	mov	r16,r5
    c764:	002d883a 	mov	r22,zero
    c768:	003f8806 	br	c58c <__gethex+0xe0>
    c76c:	00800c04 	movi	r2,48
    c770:	20800e1e 	bne	r4,r2,c7ac <__gethex+0x300>
    c774:	2007883a 	mov	r3,r4
    c778:	800b883a 	mov	r5,r16
    c77c:	29400044 	addi	r5,r5,1
    c780:	29000003 	ldbu	r4,0(r5)
    c784:	20803fcc 	andi	r2,r4,255
    c788:	10fffc26 	beq	r2,r3,c77c <__gethex+0x2d0>
    c78c:	1445883a 	add	r2,r2,r17
    c790:	10c00003 	ldbu	r3,0(r2)
    c794:	1800071e 	bne	r3,zero,c7b4 <__gethex+0x308>
    c798:	02c00044 	movi	r11,1
    c79c:	800d883a 	mov	r6,r16
    c7a0:	2825883a 	mov	r18,r5
    c7a4:	5813883a 	mov	r9,r11
    c7a8:	003f6706 	br	c548 <__gethex+0x9c>
    c7ac:	81000003 	ldbu	r4,0(r16)
    c7b0:	800b883a 	mov	r5,r16
    c7b4:	800d883a 	mov	r6,r16
    c7b8:	2825883a 	mov	r18,r5
    c7bc:	02c00044 	movi	r11,1
    c7c0:	0013883a 	mov	r9,zero
    c7c4:	003f6006 	br	c548 <__gethex+0x9c>
    c7c8:	8485c83a 	sub	r2,r16,r18
    c7cc:	10bfffc4 	addi	r2,r2,-1
    c7d0:	00c001c4 	movi	r3,7
    c7d4:	1880700e 	bge	r3,r2,c998 <__gethex+0x4ec>
    c7d8:	000b883a 	mov	r5,zero
    c7dc:	1005d07a 	srai	r2,r2,1
    c7e0:	29400044 	addi	r5,r5,1
    c7e4:	18bffd16 	blt	r3,r2,c7dc <__gethex+0x330>
    c7e8:	a809883a 	mov	r4,r21
    c7ec:	00085380 	call	8538 <_Balloc>
    c7f0:	1027883a 	mov	r19,r2
    c7f4:	10800504 	addi	r2,r2,20
    c7f8:	d8800215 	stw	r2,8(sp)
    c7fc:	9400522e 	bgeu	r18,r16,c948 <__gethex+0x49c>
    c800:	da000217 	ldw	r8,8(sp)
    c804:	800b883a 	mov	r5,r16
    c808:	000f883a 	mov	r7,zero
    c80c:	0009883a 	mov	r4,zero
    c810:	02400b84 	movi	r9,46
    c814:	02800804 	movi	r10,32
    c818:	297fffc4 	addi	r5,r5,-1
    c81c:	28c00003 	ldbu	r3,0(r5)
    c820:	1a400826 	beq	r3,r9,c844 <__gethex+0x398>
    c824:	380d883a 	mov	r6,r7
    c828:	3a802726 	beq	r7,r10,c8c8 <__gethex+0x41c>
    c82c:	39c00104 	addi	r7,r7,4
    c830:	1c47883a 	add	r3,r3,r17
    c834:	18800003 	ldbu	r2,0(r3)
    c838:	108003cc 	andi	r2,r2,15
    c83c:	1184983a 	sll	r2,r2,r6
    c840:	2088b03a 	or	r4,r4,r2
    c844:	917ff436 	bltu	r18,r5,c818 <__gethex+0x36c>
    c848:	d8c00217 	ldw	r3,8(sp)
    c84c:	40800104 	addi	r2,r8,4
    c850:	41000015 	stw	r4,0(r8)
    c854:	10c5c83a 	sub	r2,r2,r3
    c858:	1021d0ba 	srai	r16,r2,2
    c85c:	9c000415 	stw	r16,16(r19)
    c860:	0007fe00 	call	7fe0 <__hi0bits>
    c864:	8006917a 	slli	r3,r16,5
    c868:	a5c00017 	ldw	r23,0(r20)
    c86c:	1885c83a 	sub	r2,r3,r2
    c870:	b8801c16 	blt	r23,r2,c8e4 <__gethex+0x438>
    c874:	15c00a16 	blt	r2,r23,c8a0 <__gethex+0x3f4>
    c878:	0039883a 	mov	fp,zero
    c87c:	a0800217 	ldw	r2,8(r20)
    c880:	1580340e 	bge	r2,r22,c954 <__gethex+0x4a8>
    c884:	a809883a 	mov	r4,r21
    c888:	980b883a 	mov	r5,r19
    c88c:	0007fb80 	call	7fb8 <_Bfree>
    c890:	d8c00d17 	ldw	r3,52(sp)
    c894:	048028c4 	movi	r18,163
    c898:	18000015 	stw	zero,0(r3)
    c89c:	003f4606 	br	c5b8 <__gethex+0x10c>
    c8a0:	b8a1c83a 	sub	r16,r23,r2
    c8a4:	980b883a 	mov	r5,r19
    c8a8:	a809883a 	mov	r4,r21
    c8ac:	800d883a 	mov	r6,r16
    c8b0:	00088fc0 	call	88fc <__lshift>
    c8b4:	1027883a 	mov	r19,r2
    c8b8:	b42dc83a 	sub	r22,r22,r16
    c8bc:	10800504 	addi	r2,r2,20
    c8c0:	d8800215 	stw	r2,8(sp)
    c8c4:	003fec06 	br	c878 <__gethex+0x3cc>
    c8c8:	41000015 	stw	r4,0(r8)
    c8cc:	28c00003 	ldbu	r3,0(r5)
    c8d0:	01c00104 	movi	r7,4
    c8d4:	000d883a 	mov	r6,zero
    c8d8:	41d1883a 	add	r8,r8,r7
    c8dc:	0009883a 	mov	r4,zero
    c8e0:	003fd306 	br	c830 <__gethex+0x384>
    c8e4:	15e1c83a 	sub	r16,r2,r23
    c8e8:	9809883a 	mov	r4,r19
    c8ec:	800b883a 	mov	r5,r16
    c8f0:	00084b00 	call	84b0 <__any_on>
    c8f4:	1000061e 	bne	r2,zero,c910 <__gethex+0x464>
    c8f8:	0039883a 	mov	fp,zero
    c8fc:	9809883a 	mov	r4,r19
    c900:	800b883a 	mov	r5,r16
    c904:	000c3fc0 	call	c3fc <rshift>
    c908:	b42d883a 	add	r22,r22,r16
    c90c:	003fdb06 	br	c87c <__gethex+0x3d0>
    c910:	817fffc4 	addi	r5,r16,-1
    c914:	2805d17a 	srai	r2,r5,5
    c918:	d8c00217 	ldw	r3,8(sp)
    c91c:	290007cc 	andi	r4,r5,31
    c920:	1085883a 	add	r2,r2,r2
    c924:	1085883a 	add	r2,r2,r2
    c928:	01800044 	movi	r6,1
    c92c:	10c5883a 	add	r2,r2,r3
    c930:	3108983a 	sll	r4,r6,r4
    c934:	10c00017 	ldw	r3,0(r2)
    c938:	20c8703a 	and	r4,r4,r3
    c93c:	20001a1e 	bne	r4,zero,c9a8 <__gethex+0x4fc>
    c940:	3039883a 	mov	fp,r6
    c944:	003fed06 	br	c8fc <__gethex+0x450>
    c948:	1011883a 	mov	r8,r2
    c94c:	0009883a 	mov	r4,zero
    c950:	003fbd06 	br	c848 <__gethex+0x39c>
    c954:	a1000117 	ldw	r4,4(r20)
    c958:	b1001a16 	blt	r22,r4,c9c4 <__gethex+0x518>
    c95c:	04800044 	movi	r18,1
    c960:	e0000826 	beq	fp,zero,c984 <__gethex+0x4d8>
    c964:	a1000317 	ldw	r4,12(r20)
    c968:	00800084 	movi	r2,2
    c96c:	20809426 	beq	r4,r2,cbc0 <__gethex+0x714>
    c970:	008000c4 	movi	r2,3
    c974:	20805826 	beq	r4,r2,cad8 <__gethex+0x62c>
    c978:	00800044 	movi	r2,1
    c97c:	20803f26 	beq	r4,r2,ca7c <__gethex+0x5d0>
    c980:	94800414 	ori	r18,r18,16
    c984:	d8800d17 	ldw	r2,52(sp)
    c988:	d8c00117 	ldw	r3,4(sp)
    c98c:	14c00015 	stw	r19,0(r2)
    c990:	1d800015 	stw	r22,0(r3)
    c994:	003f0806 	br	c5b8 <__gethex+0x10c>
    c998:	000b883a 	mov	r5,zero
    c99c:	003f9206 	br	c7e8 <__gethex+0x33c>
    c9a0:	002d883a 	mov	r22,zero
    c9a4:	003ef806 	br	c588 <__gethex+0xdc>
    c9a8:	3140160e 	bge	r6,r5,ca04 <__gethex+0x558>
    c9ac:	9809883a 	mov	r4,r19
    c9b0:	817fff84 	addi	r5,r16,-2
    c9b4:	00084b00 	call	84b0 <__any_on>
    c9b8:	10001226 	beq	r2,zero,ca04 <__gethex+0x558>
    c9bc:	070000c4 	movi	fp,3
    c9c0:	003fce06 	br	c8fc <__gethex+0x450>
    c9c4:	25a3c83a 	sub	r17,r4,r22
    c9c8:	8dc01016 	blt	r17,r23,ca0c <__gethex+0x560>
    c9cc:	a0c00317 	ldw	r3,12(r20)
    c9d0:	00800084 	movi	r2,2
    c9d4:	18809326 	beq	r3,r2,cc24 <__gethex+0x778>
    c9d8:	008000c4 	movi	r2,3
    c9dc:	18808e26 	beq	r3,r2,cc18 <__gethex+0x76c>
    c9e0:	00800044 	movi	r2,1
    c9e4:	18807b26 	beq	r3,r2,cbd4 <__gethex+0x728>
    c9e8:	a809883a 	mov	r4,r21
    c9ec:	980b883a 	mov	r5,r19
    c9f0:	0007fb80 	call	7fb8 <_Bfree>
    c9f4:	d8c00d17 	ldw	r3,52(sp)
    c9f8:	04801404 	movi	r18,80
    c9fc:	18000015 	stw	zero,0(r3)
    ca00:	003eed06 	br	c5b8 <__gethex+0x10c>
    ca04:	07000084 	movi	fp,2
    ca08:	003fbc06 	br	c8fc <__gethex+0x450>
    ca0c:	8c3fffc4 	addi	r16,r17,-1
    ca10:	e0001426 	beq	fp,zero,ca64 <__gethex+0x5b8>
    ca14:	07000044 	movi	fp,1
    ca18:	8005d17a 	srai	r2,r16,5
    ca1c:	d8c00217 	ldw	r3,8(sp)
    ca20:	814007cc 	andi	r5,r16,31
    ca24:	1085883a 	add	r2,r2,r2
    ca28:	1085883a 	add	r2,r2,r2
    ca2c:	10c5883a 	add	r2,r2,r3
    ca30:	00c00044 	movi	r3,1
    ca34:	1946983a 	sll	r3,r3,r5
    ca38:	11000017 	ldw	r4,0(r2)
    ca3c:	1906703a 	and	r3,r3,r4
    ca40:	18000126 	beq	r3,zero,ca48 <__gethex+0x59c>
    ca44:	e7000094 	ori	fp,fp,2
    ca48:	880b883a 	mov	r5,r17
    ca4c:	9809883a 	mov	r4,r19
    ca50:	000c3fc0 	call	c3fc <rshift>
    ca54:	a5800117 	ldw	r22,4(r20)
    ca58:	bc6fc83a 	sub	r23,r23,r17
    ca5c:	04800084 	movi	r18,2
    ca60:	003fbf06 	br	c960 <__gethex+0x4b4>
    ca64:	043fec0e 	bge	zero,r16,ca18 <__gethex+0x56c>
    ca68:	9809883a 	mov	r4,r19
    ca6c:	800b883a 	mov	r5,r16
    ca70:	00084b00 	call	84b0 <__any_on>
    ca74:	1039883a 	mov	fp,r2
    ca78:	003fe706 	br	ca18 <__gethex+0x56c>
    ca7c:	e080008c 	andi	r2,fp,2
    ca80:	103fbf26 	beq	r2,zero,c980 <__gethex+0x4d4>
    ca84:	d8c00217 	ldw	r3,8(sp)
    ca88:	18800017 	ldw	r2,0(r3)
    ca8c:	e084b03a 	or	r2,fp,r2
    ca90:	1104703a 	and	r2,r2,r4
    ca94:	103fba26 	beq	r2,zero,c980 <__gethex+0x4d4>
    ca98:	9c000417 	ldw	r16,16(r19)
    ca9c:	d8c00217 	ldw	r3,8(sp)
    caa0:	017fffc4 	movi	r5,-1
    caa4:	8405883a 	add	r2,r16,r16
    caa8:	10b9883a 	add	fp,r2,r2
    caac:	1f09883a 	add	r4,r3,fp
    cab0:	dc000015 	stw	r16,0(sp)
    cab4:	00000306 	br	cac4 <__gethex+0x618>
    cab8:	18000015 	stw	zero,0(r3)
    cabc:	18c00104 	addi	r3,r3,4
    cac0:	1900082e 	bgeu	r3,r4,cae4 <__gethex+0x638>
    cac4:	18800017 	ldw	r2,0(r3)
    cac8:	117ffb26 	beq	r2,r5,cab8 <__gethex+0x60c>
    cacc:	10800044 	addi	r2,r2,1
    cad0:	18800015 	stw	r2,0(r3)
    cad4:	00001f06 	br	cb54 <__gethex+0x6a8>
    cad8:	d8800e17 	ldw	r2,56(sp)
    cadc:	103fa826 	beq	r2,zero,c980 <__gethex+0x4d4>
    cae0:	003fed06 	br	ca98 <__gethex+0x5ec>
    cae4:	98800217 	ldw	r2,8(r19)
    cae8:	80801316 	blt	r16,r2,cb38 <__gethex+0x68c>
    caec:	99400117 	ldw	r5,4(r19)
    caf0:	a809883a 	mov	r4,r21
    caf4:	29400044 	addi	r5,r5,1
    caf8:	00085380 	call	8538 <_Balloc>
    cafc:	99800417 	ldw	r6,16(r19)
    cb00:	99400304 	addi	r5,r19,12
    cb04:	11000304 	addi	r4,r2,12
    cb08:	318d883a 	add	r6,r6,r6
    cb0c:	318d883a 	add	r6,r6,r6
    cb10:	31800204 	addi	r6,r6,8
    cb14:	1023883a 	mov	r17,r2
    cb18:	0007da00 	call	7da0 <memcpy>
    cb1c:	980b883a 	mov	r5,r19
    cb20:	a809883a 	mov	r4,r21
    cb24:	0007fb80 	call	7fb8 <_Bfree>
    cb28:	8c000417 	ldw	r16,16(r17)
    cb2c:	88800504 	addi	r2,r17,20
    cb30:	8827883a 	mov	r19,r17
    cb34:	d8800215 	stw	r2,8(sp)
    cb38:	8405883a 	add	r2,r16,r16
    cb3c:	1085883a 	add	r2,r2,r2
    cb40:	14c5883a 	add	r2,r2,r19
    cb44:	84000044 	addi	r16,r16,1
    cb48:	00c00044 	movi	r3,1
    cb4c:	10c00515 	stw	r3,20(r2)
    cb50:	9c000415 	stw	r16,16(r19)
    cb54:	00800084 	movi	r2,2
    cb58:	90801426 	beq	r18,r2,cbac <__gethex+0x700>
    cb5c:	d8800017 	ldw	r2,0(sp)
    cb60:	14000b16 	blt	r2,r16,cb90 <__gethex+0x6e4>
    cb64:	bc0007cc 	andi	r16,r23,31
    cb68:	8000021e 	bne	r16,zero,cb74 <__gethex+0x6c8>
    cb6c:	94800814 	ori	r18,r18,32
    cb70:	003f8406 	br	c984 <__gethex+0x4d8>
    cb74:	d8c00217 	ldw	r3,8(sp)
    cb78:	1f05883a 	add	r2,r3,fp
    cb7c:	113fff17 	ldw	r4,-4(r2)
    cb80:	0007fe00 	call	7fe0 <__hi0bits>
    cb84:	00c00804 	movi	r3,32
    cb88:	1c07c83a 	sub	r3,r3,r16
    cb8c:	10fff70e 	bge	r2,r3,cb6c <__gethex+0x6c0>
    cb90:	9809883a 	mov	r4,r19
    cb94:	01400044 	movi	r5,1
    cb98:	000c3fc0 	call	c3fc <rshift>
    cb9c:	a0800217 	ldw	r2,8(r20)
    cba0:	b5800044 	addi	r22,r22,1
    cba4:	15bf3716 	blt	r2,r22,c884 <__gethex+0x3d8>
    cba8:	003ff006 	br	cb6c <__gethex+0x6c0>
    cbac:	a0800017 	ldw	r2,0(r20)
    cbb0:	10bfffc4 	addi	r2,r2,-1
    cbb4:	b8801e26 	beq	r23,r2,cc30 <__gethex+0x784>
    cbb8:	04800884 	movi	r18,34
    cbbc:	003f7106 	br	c984 <__gethex+0x4d8>
    cbc0:	d8c00e17 	ldw	r3,56(sp)
    cbc4:	00800044 	movi	r2,1
    cbc8:	10c5c83a 	sub	r2,r2,r3
    cbcc:	103f6c26 	beq	r2,zero,c980 <__gethex+0x4d4>
    cbd0:	003fb106 	br	ca98 <__gethex+0x5ec>
    cbd4:	bc7f841e 	bne	r23,r17,c9e8 <__gethex+0x53c>
    cbd8:	1dc0050e 	bge	r3,r23,cbf0 <__gethex+0x744>
    cbdc:	b8cbc83a 	sub	r5,r23,r3
    cbe0:	9809883a 	mov	r4,r19
    cbe4:	00084b00 	call	84b0 <__any_on>
    cbe8:	103f7f26 	beq	r2,zero,c9e8 <__gethex+0x53c>
    cbec:	a1000117 	ldw	r4,4(r20)
    cbf0:	d8800117 	ldw	r2,4(sp)
    cbf4:	d8c00217 	ldw	r3,8(sp)
    cbf8:	04000044 	movi	r16,1
    cbfc:	11000015 	stw	r4,0(r2)
    cc00:	d8800d17 	ldw	r2,52(sp)
    cc04:	04801884 	movi	r18,98
    cc08:	1c000015 	stw	r16,0(r3)
    cc0c:	14c00015 	stw	r19,0(r2)
    cc10:	9c000415 	stw	r16,16(r19)
    cc14:	003e6806 	br	c5b8 <__gethex+0x10c>
    cc18:	d8c00e17 	ldw	r3,56(sp)
    cc1c:	183f7226 	beq	r3,zero,c9e8 <__gethex+0x53c>
    cc20:	003ff306 	br	cbf0 <__gethex+0x744>
    cc24:	d8800e17 	ldw	r2,56(sp)
    cc28:	103ff126 	beq	r2,zero,cbf0 <__gethex+0x744>
    cc2c:	003f6e06 	br	c9e8 <__gethex+0x53c>
    cc30:	b805d17a 	srai	r2,r23,5
    cc34:	d8c00217 	ldw	r3,8(sp)
    cc38:	b94007cc 	andi	r5,r23,31
    cc3c:	1085883a 	add	r2,r2,r2
    cc40:	1085883a 	add	r2,r2,r2
    cc44:	10c5883a 	add	r2,r2,r3
    cc48:	00c00044 	movi	r3,1
    cc4c:	1946983a 	sll	r3,r3,r5
    cc50:	11000017 	ldw	r4,0(r2)
    cc54:	1906703a 	and	r3,r3,r4
    cc58:	183fd726 	beq	r3,zero,cbb8 <__gethex+0x70c>
    cc5c:	04800844 	movi	r18,33
    cc60:	003f4806 	br	c984 <__gethex+0x4d8>

0000cc64 <L_shift>:
    cc64:	00800204 	movi	r2,8
    cc68:	1185c83a 	sub	r2,r2,r6
    cc6c:	1085883a 	add	r2,r2,r2
    cc70:	21c00017 	ldw	r7,0(r4)
    cc74:	1093883a 	add	r9,r2,r2
    cc78:	00800804 	movi	r2,32
    cc7c:	200d883a 	mov	r6,r4
    cc80:	1251c83a 	sub	r8,r2,r9
    cc84:	31800104 	addi	r6,r6,4
    cc88:	3805883a 	mov	r2,r7
    cc8c:	31c00017 	ldw	r7,0(r6)
    cc90:	3a08983a 	sll	r4,r7,r8
    cc94:	3a46d83a 	srl	r3,r7,r9
    cc98:	1104b03a 	or	r2,r2,r4
    cc9c:	180f883a 	mov	r7,r3
    cca0:	30bfff15 	stw	r2,-4(r6)
    cca4:	30c00015 	stw	r3,0(r6)
    cca8:	317ff636 	bltu	r6,r5,cc84 <L_shift+0x20>
    ccac:	f800283a 	ret

0000ccb0 <__hexnan>:
    ccb0:	defff404 	addi	sp,sp,-48
    ccb4:	dd800815 	stw	r22,32(sp)
    ccb8:	05800074 	movhi	r22,1
    ccbc:	b5982c04 	addi	r22,r22,24752
    ccc0:	b0800c03 	ldbu	r2,48(r22)
    ccc4:	dcc00515 	stw	r19,20(sp)
    ccc8:	dc000215 	stw	r16,8(sp)
    cccc:	dfc00b15 	stw	ra,44(sp)
    ccd0:	df000a15 	stw	fp,40(sp)
    ccd4:	ddc00915 	stw	r23,36(sp)
    ccd8:	dd400715 	stw	r21,28(sp)
    ccdc:	dd000615 	stw	r20,24(sp)
    cce0:	dc800415 	stw	r18,16(sp)
    cce4:	dc400315 	stw	r17,12(sp)
    cce8:	d9000115 	stw	r4,4(sp)
    ccec:	2821883a 	mov	r16,r5
    ccf0:	3027883a 	mov	r19,r6
    ccf4:	10007426 	beq	r2,zero,cec8 <__hexnan+0x218>
    ccf8:	80c00017 	ldw	r3,0(r16)
    ccfc:	1805d17a 	srai	r2,r3,5
    cd00:	18c007cc 	andi	r3,r3,31
    cd04:	1839003a 	cmpeq	fp,r3,zero
    cd08:	1085883a 	add	r2,r2,r2
    cd0c:	1085883a 	add	r2,r2,r2
    cd10:	d8c00015 	stw	r3,0(sp)
    cd14:	14c5883a 	add	r2,r2,r19
    cd18:	e000011e 	bne	fp,zero,cd20 <__hexnan+0x70>
    cd1c:	10800104 	addi	r2,r2,4
    cd20:	d8c00117 	ldw	r3,4(sp)
    cd24:	153fff04 	addi	r20,r2,-4
    cd28:	a021883a 	mov	r16,r20
    cd2c:	1c400017 	ldw	r17,0(r3)
    cd30:	a02b883a 	mov	r21,r20
    cd34:	0025883a 	mov	r18,zero
    cd38:	002f883a 	mov	r23,zero
    cd3c:	000d883a 	mov	r6,zero
    cd40:	103fff15 	stw	zero,-4(r2)
    cd44:	8c400044 	addi	r17,r17,1
    cd48:	89000003 	ldbu	r4,0(r17)
    cd4c:	20000e26 	beq	r4,zero,cd88 <__hexnan+0xd8>
    cd50:	2585883a 	add	r2,r4,r22
    cd54:	10c00003 	ldbu	r3,0(r2)
    cd58:	18002e1e 	bne	r3,zero,ce14 <__hexnan+0x164>
    cd5c:	00800804 	movi	r2,32
    cd60:	11005536 	bltu	r2,r4,ceb8 <__hexnan+0x208>
    cd64:	bcbff70e 	bge	r23,r18,cd44 <__hexnan+0x94>
    cd68:	8540022e 	bgeu	r16,r21,cd74 <__hexnan+0xc4>
    cd6c:	008001c4 	movi	r2,7
    cd70:	11803c0e 	bge	r2,r6,ce64 <__hexnan+0x1b4>
    cd74:	9c003536 	bltu	r19,r16,ce4c <__hexnan+0x19c>
    cd78:	8c400044 	addi	r17,r17,1
    cd7c:	89000003 	ldbu	r4,0(r17)
    cd80:	01800204 	movi	r6,8
    cd84:	203ff21e 	bne	r4,zero,cd50 <__hexnan+0xa0>
    cd88:	90004d26 	beq	r18,zero,cec0 <__hexnan+0x210>
    cd8c:	85404336 	bltu	r16,r21,ce9c <__hexnan+0x1ec>
    cd90:	9c00382e 	bgeu	r19,r16,ce74 <__hexnan+0x1c4>
    cd94:	9807883a 	mov	r3,r19
    cd98:	80800017 	ldw	r2,0(r16)
    cd9c:	84000104 	addi	r16,r16,4
    cda0:	18800015 	stw	r2,0(r3)
    cda4:	18c00104 	addi	r3,r3,4
    cda8:	a43ffb2e 	bgeu	r20,r16,cd98 <__hexnan+0xe8>
    cdac:	18000015 	stw	zero,0(r3)
    cdb0:	18c00104 	addi	r3,r3,4
    cdb4:	a0fffd2e 	bgeu	r20,r3,cdac <__hexnan+0xfc>
    cdb8:	a0800017 	ldw	r2,0(r20)
    cdbc:	1000071e 	bne	r2,zero,cddc <__hexnan+0x12c>
    cdc0:	9d004326 	beq	r19,r20,ced0 <__hexnan+0x220>
    cdc4:	a007883a 	mov	r3,r20
    cdc8:	00000106 	br	cdd0 <__hexnan+0x120>
    cdcc:	98c04026 	beq	r19,r3,ced0 <__hexnan+0x220>
    cdd0:	18ffff04 	addi	r3,r3,-4
    cdd4:	18800017 	ldw	r2,0(r3)
    cdd8:	103ffc26 	beq	r2,zero,cdcc <__hexnan+0x11c>
    cddc:	00c00144 	movi	r3,5
    cde0:	1805883a 	mov	r2,r3
    cde4:	dfc00b17 	ldw	ra,44(sp)
    cde8:	df000a17 	ldw	fp,40(sp)
    cdec:	ddc00917 	ldw	r23,36(sp)
    cdf0:	dd800817 	ldw	r22,32(sp)
    cdf4:	dd400717 	ldw	r21,28(sp)
    cdf8:	dd000617 	ldw	r20,24(sp)
    cdfc:	dcc00517 	ldw	r19,20(sp)
    ce00:	dc800417 	ldw	r18,16(sp)
    ce04:	dc400317 	ldw	r17,12(sp)
    ce08:	dc000217 	ldw	r16,8(sp)
    ce0c:	dec00c04 	addi	sp,sp,48
    ce10:	f800283a 	ret
    ce14:	31800044 	addi	r6,r6,1
    ce18:	00800204 	movi	r2,8
    ce1c:	94800044 	addi	r18,r18,1
    ce20:	1180040e 	bge	r2,r6,ce34 <__hexnan+0x184>
    ce24:	9c3fc72e 	bgeu	r19,r16,cd44 <__hexnan+0x94>
    ce28:	843fff04 	addi	r16,r16,-4
    ce2c:	80000015 	stw	zero,0(r16)
    ce30:	01800044 	movi	r6,1
    ce34:	80800017 	ldw	r2,0(r16)
    ce38:	18c003cc 	andi	r3,r3,15
    ce3c:	1004913a 	slli	r2,r2,4
    ce40:	10c4b03a 	or	r2,r2,r3
    ce44:	80800015 	stw	r2,0(r16)
    ce48:	003fbe06 	br	cd44 <__hexnan+0x94>
    ce4c:	843fff04 	addi	r16,r16,-4
    ce50:	802b883a 	mov	r21,r16
    ce54:	902f883a 	mov	r23,r18
    ce58:	000d883a 	mov	r6,zero
    ce5c:	80000015 	stw	zero,0(r16)
    ce60:	003fb806 	br	cd44 <__hexnan+0x94>
    ce64:	8009883a 	mov	r4,r16
    ce68:	a80b883a 	mov	r5,r21
    ce6c:	000cc640 	call	cc64 <L_shift>
    ce70:	003fc006 	br	cd74 <__hexnan+0xc4>
    ce74:	e03fd01e 	bne	fp,zero,cdb8 <__hexnan+0x108>
    ce78:	d8c00017 	ldw	r3,0(sp)
    ce7c:	00800804 	movi	r2,32
    ce80:	10c5c83a 	sub	r2,r2,r3
    ce84:	00ffffc4 	movi	r3,-1
    ce88:	1886d83a 	srl	r3,r3,r2
    ce8c:	a0800017 	ldw	r2,0(r20)
    ce90:	10c4703a 	and	r2,r2,r3
    ce94:	a0800015 	stw	r2,0(r20)
    ce98:	003fc806 	br	cdbc <__hexnan+0x10c>
    ce9c:	008001c4 	movi	r2,7
    cea0:	11bfbb16 	blt	r2,r6,cd90 <__hexnan+0xe0>
    cea4:	a80b883a 	mov	r5,r21
    cea8:	8009883a 	mov	r4,r16
    ceac:	000cc640 	call	cc64 <L_shift>
    ceb0:	9c3ff02e 	bgeu	r19,r16,ce74 <__hexnan+0x1c4>
    ceb4:	003fb706 	br	cd94 <__hexnan+0xe4>
    ceb8:	00800a44 	movi	r2,41
    cebc:	20800826 	beq	r4,r2,cee0 <__hexnan+0x230>
    cec0:	00c00104 	movi	r3,4
    cec4:	003fc606 	br	cde0 <__hexnan+0x130>
    cec8:	000c3940 	call	c394 <__hexdig_init>
    cecc:	003f8a06 	br	ccf8 <__hexnan+0x48>
    ced0:	00800044 	movi	r2,1
    ced4:	00c00144 	movi	r3,5
    ced8:	98800015 	stw	r2,0(r19)
    cedc:	003fc006 	br	cde0 <__hexnan+0x130>
    cee0:	903ff726 	beq	r18,zero,cec0 <__hexnan+0x210>
    cee4:	d8c00117 	ldw	r3,4(sp)
    cee8:	88800044 	addi	r2,r17,1
    ceec:	18800015 	stw	r2,0(r3)
    cef0:	857fa72e 	bgeu	r16,r21,cd90 <__hexnan+0xe0>
    cef4:	003fe906 	br	ce9c <__hexnan+0x1ec>

0000cef8 <_isatty_r>:
    cef8:	defffd04 	addi	sp,sp,-12
    cefc:	dc000015 	stw	r16,0(sp)
    cf00:	04000074 	movhi	r16,1
    cf04:	84181b04 	addi	r16,r16,24684
    cf08:	dc400115 	stw	r17,4(sp)
    cf0c:	80000015 	stw	zero,0(r16)
    cf10:	2023883a 	mov	r17,r4
    cf14:	2809883a 	mov	r4,r5
    cf18:	dfc00215 	stw	ra,8(sp)
    cf1c:	000f5140 	call	f514 <isatty>
    cf20:	1007883a 	mov	r3,r2
    cf24:	00bfffc4 	movi	r2,-1
    cf28:	18800626 	beq	r3,r2,cf44 <_isatty_r+0x4c>
    cf2c:	1805883a 	mov	r2,r3
    cf30:	dfc00217 	ldw	ra,8(sp)
    cf34:	dc400117 	ldw	r17,4(sp)
    cf38:	dc000017 	ldw	r16,0(sp)
    cf3c:	dec00304 	addi	sp,sp,12
    cf40:	f800283a 	ret
    cf44:	80800017 	ldw	r2,0(r16)
    cf48:	103ff826 	beq	r2,zero,cf2c <_isatty_r+0x34>
    cf4c:	88800015 	stw	r2,0(r17)
    cf50:	1805883a 	mov	r2,r3
    cf54:	dfc00217 	ldw	ra,8(sp)
    cf58:	dc400117 	ldw	r17,4(sp)
    cf5c:	dc000017 	ldw	r16,0(sp)
    cf60:	dec00304 	addi	sp,sp,12
    cf64:	f800283a 	ret

0000cf68 <_lseek_r>:
    cf68:	defffd04 	addi	sp,sp,-12
    cf6c:	dc000015 	stw	r16,0(sp)
    cf70:	04000074 	movhi	r16,1
    cf74:	84181b04 	addi	r16,r16,24684
    cf78:	dc400115 	stw	r17,4(sp)
    cf7c:	80000015 	stw	zero,0(r16)
    cf80:	2023883a 	mov	r17,r4
    cf84:	2809883a 	mov	r4,r5
    cf88:	300b883a 	mov	r5,r6
    cf8c:	380d883a 	mov	r6,r7
    cf90:	dfc00215 	stw	ra,8(sp)
    cf94:	000f65c0 	call	f65c <lseek>
    cf98:	1007883a 	mov	r3,r2
    cf9c:	00bfffc4 	movi	r2,-1
    cfa0:	18800626 	beq	r3,r2,cfbc <_lseek_r+0x54>
    cfa4:	1805883a 	mov	r2,r3
    cfa8:	dfc00217 	ldw	ra,8(sp)
    cfac:	dc400117 	ldw	r17,4(sp)
    cfb0:	dc000017 	ldw	r16,0(sp)
    cfb4:	dec00304 	addi	sp,sp,12
    cfb8:	f800283a 	ret
    cfbc:	80800017 	ldw	r2,0(r16)
    cfc0:	103ff826 	beq	r2,zero,cfa4 <_lseek_r+0x3c>
    cfc4:	88800015 	stw	r2,0(r17)
    cfc8:	1805883a 	mov	r2,r3
    cfcc:	dfc00217 	ldw	ra,8(sp)
    cfd0:	dc400117 	ldw	r17,4(sp)
    cfd4:	dc000017 	ldw	r16,0(sp)
    cfd8:	dec00304 	addi	sp,sp,12
    cfdc:	f800283a 	ret

0000cfe0 <_read_r>:
    cfe0:	defffd04 	addi	sp,sp,-12
    cfe4:	dc000015 	stw	r16,0(sp)
    cfe8:	04000074 	movhi	r16,1
    cfec:	84181b04 	addi	r16,r16,24684
    cff0:	dc400115 	stw	r17,4(sp)
    cff4:	80000015 	stw	zero,0(r16)
    cff8:	2023883a 	mov	r17,r4
    cffc:	2809883a 	mov	r4,r5
    d000:	300b883a 	mov	r5,r6
    d004:	380d883a 	mov	r6,r7
    d008:	dfc00215 	stw	ra,8(sp)
    d00c:	000f9500 	call	f950 <read>
    d010:	1007883a 	mov	r3,r2
    d014:	00bfffc4 	movi	r2,-1
    d018:	18800626 	beq	r3,r2,d034 <_read_r+0x54>
    d01c:	1805883a 	mov	r2,r3
    d020:	dfc00217 	ldw	ra,8(sp)
    d024:	dc400117 	ldw	r17,4(sp)
    d028:	dc000017 	ldw	r16,0(sp)
    d02c:	dec00304 	addi	sp,sp,12
    d030:	f800283a 	ret
    d034:	80800017 	ldw	r2,0(r16)
    d038:	103ff826 	beq	r2,zero,d01c <_read_r+0x3c>
    d03c:	88800015 	stw	r2,0(r17)
    d040:	1805883a 	mov	r2,r3
    d044:	dfc00217 	ldw	ra,8(sp)
    d048:	dc400117 	ldw	r17,4(sp)
    d04c:	dc000017 	ldw	r16,0(sp)
    d050:	dec00304 	addi	sp,sp,12
    d054:	f800283a 	ret

0000d058 <__muldi3>:
    d058:	2011883a 	mov	r8,r4
    d05c:	427fffcc 	andi	r9,r8,65535
    d060:	4018d43a 	srli	r12,r8,16
    d064:	32bfffcc 	andi	r10,r6,65535
    d068:	3016d43a 	srli	r11,r6,16
    d06c:	4a85383a 	mul	r2,r9,r10
    d070:	6295383a 	mul	r10,r12,r10
    d074:	4ad3383a 	mul	r9,r9,r11
    d078:	113fffcc 	andi	r4,r2,65535
    d07c:	1004d43a 	srli	r2,r2,16
    d080:	4a93883a 	add	r9,r9,r10
    d084:	3807883a 	mov	r3,r7
    d088:	1245883a 	add	r2,r2,r9
    d08c:	280f883a 	mov	r7,r5
    d090:	180b883a 	mov	r5,r3
    d094:	1006943a 	slli	r3,r2,16
    d098:	defffd04 	addi	sp,sp,-12
    d09c:	dc800215 	stw	r18,8(sp)
    d0a0:	1907883a 	add	r3,r3,r4
    d0a4:	dc400115 	stw	r17,4(sp)
    d0a8:	dc000015 	stw	r16,0(sp)
    d0ac:	4165383a 	mul	r18,r8,r5
    d0b0:	31e3383a 	mul	r17,r6,r7
    d0b4:	1012d43a 	srli	r9,r2,16
    d0b8:	62d9383a 	mul	r12,r12,r11
    d0bc:	181f883a 	mov	r15,r3
    d0c0:	1280022e 	bgeu	r2,r10,d0cc <__muldi3+0x74>
    d0c4:	00800074 	movhi	r2,1
    d0c8:	6099883a 	add	r12,r12,r2
    d0cc:	624d883a 	add	r6,r12,r9
    d0d0:	9187883a 	add	r3,r18,r6
    d0d4:	88c7883a 	add	r3,r17,r3
    d0d8:	7805883a 	mov	r2,r15
    d0dc:	dc800217 	ldw	r18,8(sp)
    d0e0:	dc400117 	ldw	r17,4(sp)
    d0e4:	dc000017 	ldw	r16,0(sp)
    d0e8:	dec00304 	addi	sp,sp,12
    d0ec:	f800283a 	ret

0000d0f0 <__fixunsdfsi>:
    d0f0:	defffb04 	addi	sp,sp,-20
    d0f4:	dc400115 	stw	r17,4(sp)
    d0f8:	dc000015 	stw	r16,0(sp)
    d0fc:	04507834 	movhi	r17,16864
    d100:	0021883a 	mov	r16,zero
    d104:	800d883a 	mov	r6,r16
    d108:	880f883a 	mov	r7,r17
    d10c:	dcc00315 	stw	r19,12(sp)
    d110:	dc800215 	stw	r18,8(sp)
    d114:	2827883a 	mov	r19,r5
    d118:	2025883a 	mov	r18,r4
    d11c:	dfc00415 	stw	ra,16(sp)
    d120:	000eac80 	call	eac8 <__gedf2>
    d124:	000d883a 	mov	r6,zero
    d128:	880f883a 	mov	r7,r17
    d12c:	980b883a 	mov	r5,r19
    d130:	9009883a 	mov	r4,r18
    d134:	10000d16 	blt	r2,zero,d16c <__fixunsdfsi+0x7c>
    d138:	000e2200 	call	e220 <__subdf3>
    d13c:	180b883a 	mov	r5,r3
    d140:	1009883a 	mov	r4,r2
    d144:	000ed580 	call	ed58 <__fixdfsi>
    d148:	00e00034 	movhi	r3,32768
    d14c:	10c5883a 	add	r2,r2,r3
    d150:	dfc00417 	ldw	ra,16(sp)
    d154:	dcc00317 	ldw	r19,12(sp)
    d158:	dc800217 	ldw	r18,8(sp)
    d15c:	dc400117 	ldw	r17,4(sp)
    d160:	dc000017 	ldw	r16,0(sp)
    d164:	dec00504 	addi	sp,sp,20
    d168:	f800283a 	ret
    d16c:	980b883a 	mov	r5,r19
    d170:	9009883a 	mov	r4,r18
    d174:	000ed580 	call	ed58 <__fixdfsi>
    d178:	dfc00417 	ldw	ra,16(sp)
    d17c:	dcc00317 	ldw	r19,12(sp)
    d180:	dc800217 	ldw	r18,8(sp)
    d184:	dc400117 	ldw	r17,4(sp)
    d188:	dc000017 	ldw	r16,0(sp)
    d18c:	dec00504 	addi	sp,sp,20
    d190:	f800283a 	ret

0000d194 <__udivdi3>:
    d194:	defff004 	addi	sp,sp,-64
    d198:	2005883a 	mov	r2,r4
    d19c:	3011883a 	mov	r8,r6
    d1a0:	df000e15 	stw	fp,56(sp)
    d1a4:	dd000a15 	stw	r20,40(sp)
    d1a8:	dc000615 	stw	r16,24(sp)
    d1ac:	dfc00f15 	stw	ra,60(sp)
    d1b0:	ddc00d15 	stw	r23,52(sp)
    d1b4:	dd800c15 	stw	r22,48(sp)
    d1b8:	dd400b15 	stw	r21,44(sp)
    d1bc:	dcc00915 	stw	r19,36(sp)
    d1c0:	dc800815 	stw	r18,32(sp)
    d1c4:	dc400715 	stw	r17,28(sp)
    d1c8:	4021883a 	mov	r16,r8
    d1cc:	1039883a 	mov	fp,r2
    d1d0:	2829883a 	mov	r20,r5
    d1d4:	38003b1e 	bne	r7,zero,d2c4 <__udivdi3+0x130>
    d1d8:	2a005c36 	bltu	r5,r8,d34c <__udivdi3+0x1b8>
    d1dc:	4000a626 	beq	r8,zero,d478 <__udivdi3+0x2e4>
    d1e0:	00bfffd4 	movui	r2,65535
    d1e4:	14009e36 	bltu	r2,r16,d460 <__udivdi3+0x2cc>
    d1e8:	00803fc4 	movi	r2,255
    d1ec:	14013d36 	bltu	r2,r16,d6e4 <__udivdi3+0x550>
    d1f0:	000b883a 	mov	r5,zero
    d1f4:	0005883a 	mov	r2,zero
    d1f8:	8084d83a 	srl	r2,r16,r2
    d1fc:	01000074 	movhi	r4,1
    d200:	21084a04 	addi	r4,r4,8488
    d204:	01800804 	movi	r6,32
    d208:	1105883a 	add	r2,r2,r4
    d20c:	10c00003 	ldbu	r3,0(r2)
    d210:	28c7883a 	add	r3,r5,r3
    d214:	30edc83a 	sub	r22,r6,r3
    d218:	b000ee1e 	bne	r22,zero,d5d4 <__udivdi3+0x440>
    d21c:	802ad43a 	srli	r21,r16,16
    d220:	00800044 	movi	r2,1
    d224:	a423c83a 	sub	r17,r20,r16
    d228:	85ffffcc 	andi	r23,r16,65535
    d22c:	d8800315 	stw	r2,12(sp)
    d230:	8809883a 	mov	r4,r17
    d234:	a80b883a 	mov	r5,r21
    d238:	000f1740 	call	f174 <__udivsi3>
    d23c:	8809883a 	mov	r4,r17
    d240:	a80b883a 	mov	r5,r21
    d244:	102d883a 	mov	r22,r2
    d248:	000f17c0 	call	f17c <__umodsi3>
    d24c:	1004943a 	slli	r2,r2,16
    d250:	e006d43a 	srli	r3,fp,16
    d254:	bda3383a 	mul	r17,r23,r22
    d258:	10c4b03a 	or	r2,r2,r3
    d25c:	1440042e 	bgeu	r2,r17,d270 <__udivdi3+0xdc>
    d260:	1405883a 	add	r2,r2,r16
    d264:	b5bfffc4 	addi	r22,r22,-1
    d268:	14000136 	bltu	r2,r16,d270 <__udivdi3+0xdc>
    d26c:	14413d36 	bltu	r2,r17,d764 <__udivdi3+0x5d0>
    d270:	1463c83a 	sub	r17,r2,r17
    d274:	8809883a 	mov	r4,r17
    d278:	a80b883a 	mov	r5,r21
    d27c:	000f1740 	call	f174 <__udivsi3>
    d280:	8809883a 	mov	r4,r17
    d284:	a80b883a 	mov	r5,r21
    d288:	1029883a 	mov	r20,r2
    d28c:	000f17c0 	call	f17c <__umodsi3>
    d290:	1004943a 	slli	r2,r2,16
    d294:	bd09383a 	mul	r4,r23,r20
    d298:	e0ffffcc 	andi	r3,fp,65535
    d29c:	10c4b03a 	or	r2,r2,r3
    d2a0:	1100042e 	bgeu	r2,r4,d2b4 <__udivdi3+0x120>
    d2a4:	8085883a 	add	r2,r16,r2
    d2a8:	a53fffc4 	addi	r20,r20,-1
    d2ac:	14000136 	bltu	r2,r16,d2b4 <__udivdi3+0x120>
    d2b0:	11012036 	bltu	r2,r4,d734 <__udivdi3+0x5a0>
    d2b4:	b004943a 	slli	r2,r22,16
    d2b8:	d9000317 	ldw	r4,12(sp)
    d2bc:	a084b03a 	or	r2,r20,r2
    d2c0:	00001506 	br	d318 <__udivdi3+0x184>
    d2c4:	380d883a 	mov	r6,r7
    d2c8:	29c06236 	bltu	r5,r7,d454 <__udivdi3+0x2c0>
    d2cc:	00bfffd4 	movui	r2,65535
    d2d0:	11c05a36 	bltu	r2,r7,d43c <__udivdi3+0x2a8>
    d2d4:	00803fc4 	movi	r2,255
    d2d8:	11c0fc36 	bltu	r2,r7,d6cc <__udivdi3+0x538>
    d2dc:	000b883a 	mov	r5,zero
    d2e0:	0005883a 	mov	r2,zero
    d2e4:	3084d83a 	srl	r2,r6,r2
    d2e8:	01000074 	movhi	r4,1
    d2ec:	21084a04 	addi	r4,r4,8488
    d2f0:	01c00804 	movi	r7,32
    d2f4:	1105883a 	add	r2,r2,r4
    d2f8:	10c00003 	ldbu	r3,0(r2)
    d2fc:	28c7883a 	add	r3,r5,r3
    d300:	38efc83a 	sub	r23,r7,r3
    d304:	b800691e 	bne	r23,zero,d4ac <__udivdi3+0x318>
    d308:	35000136 	bltu	r6,r20,d310 <__udivdi3+0x17c>
    d30c:	e4005136 	bltu	fp,r16,d454 <__udivdi3+0x2c0>
    d310:	00800044 	movi	r2,1
    d314:	0009883a 	mov	r4,zero
    d318:	2007883a 	mov	r3,r4
    d31c:	dfc00f17 	ldw	ra,60(sp)
    d320:	df000e17 	ldw	fp,56(sp)
    d324:	ddc00d17 	ldw	r23,52(sp)
    d328:	dd800c17 	ldw	r22,48(sp)
    d32c:	dd400b17 	ldw	r21,44(sp)
    d330:	dd000a17 	ldw	r20,40(sp)
    d334:	dcc00917 	ldw	r19,36(sp)
    d338:	dc800817 	ldw	r18,32(sp)
    d33c:	dc400717 	ldw	r17,28(sp)
    d340:	dc000617 	ldw	r16,24(sp)
    d344:	dec01004 	addi	sp,sp,64
    d348:	f800283a 	ret
    d34c:	00bfffd4 	movui	r2,65535
    d350:	12005036 	bltu	r2,r8,d494 <__udivdi3+0x300>
    d354:	00803fc4 	movi	r2,255
    d358:	1200e836 	bltu	r2,r8,d6fc <__udivdi3+0x568>
    d35c:	000b883a 	mov	r5,zero
    d360:	0005883a 	mov	r2,zero
    d364:	8084d83a 	srl	r2,r16,r2
    d368:	01000074 	movhi	r4,1
    d36c:	21084a04 	addi	r4,r4,8488
    d370:	01800804 	movi	r6,32
    d374:	1105883a 	add	r2,r2,r4
    d378:	10c00003 	ldbu	r3,0(r2)
    d37c:	28c7883a 	add	r3,r5,r3
    d380:	30cbc83a 	sub	r5,r6,r3
    d384:	28000626 	beq	r5,zero,d3a0 <__udivdi3+0x20c>
    d388:	3145c83a 	sub	r2,r6,r5
    d38c:	e084d83a 	srl	r2,fp,r2
    d390:	a146983a 	sll	r3,r20,r5
    d394:	e178983a 	sll	fp,fp,r5
    d398:	8160983a 	sll	r16,r16,r5
    d39c:	18a8b03a 	or	r20,r3,r2
    d3a0:	802ad43a 	srli	r21,r16,16
    d3a4:	a009883a 	mov	r4,r20
    d3a8:	85ffffcc 	andi	r23,r16,65535
    d3ac:	a80b883a 	mov	r5,r21
    d3b0:	000f1740 	call	f174 <__udivsi3>
    d3b4:	a009883a 	mov	r4,r20
    d3b8:	a80b883a 	mov	r5,r21
    d3bc:	102d883a 	mov	r22,r2
    d3c0:	000f17c0 	call	f17c <__umodsi3>
    d3c4:	1004943a 	slli	r2,r2,16
    d3c8:	e006d43a 	srli	r3,fp,16
    d3cc:	bda3383a 	mul	r17,r23,r22
    d3d0:	10c4b03a 	or	r2,r2,r3
    d3d4:	1440042e 	bgeu	r2,r17,d3e8 <__udivdi3+0x254>
    d3d8:	1405883a 	add	r2,r2,r16
    d3dc:	b5bfffc4 	addi	r22,r22,-1
    d3e0:	14000136 	bltu	r2,r16,d3e8 <__udivdi3+0x254>
    d3e4:	1440d536 	bltu	r2,r17,d73c <__udivdi3+0x5a8>
    d3e8:	1463c83a 	sub	r17,r2,r17
    d3ec:	8809883a 	mov	r4,r17
    d3f0:	a80b883a 	mov	r5,r21
    d3f4:	000f1740 	call	f174 <__udivsi3>
    d3f8:	8809883a 	mov	r4,r17
    d3fc:	a80b883a 	mov	r5,r21
    d400:	1029883a 	mov	r20,r2
    d404:	000f17c0 	call	f17c <__umodsi3>
    d408:	1004943a 	slli	r2,r2,16
    d40c:	bd09383a 	mul	r4,r23,r20
    d410:	e0ffffcc 	andi	r3,fp,65535
    d414:	10c4b03a 	or	r2,r2,r3
    d418:	1100042e 	bgeu	r2,r4,d42c <__udivdi3+0x298>
    d41c:	8085883a 	add	r2,r16,r2
    d420:	a53fffc4 	addi	r20,r20,-1
    d424:	14000136 	bltu	r2,r16,d42c <__udivdi3+0x298>
    d428:	1100c736 	bltu	r2,r4,d748 <__udivdi3+0x5b4>
    d42c:	b004943a 	slli	r2,r22,16
    d430:	0009883a 	mov	r4,zero
    d434:	a084b03a 	or	r2,r20,r2
    d438:	003fb706 	br	d318 <__udivdi3+0x184>
    d43c:	00804034 	movhi	r2,256
    d440:	10bfffc4 	addi	r2,r2,-1
    d444:	11c0a436 	bltu	r2,r7,d6d8 <__udivdi3+0x544>
    d448:	01400404 	movi	r5,16
    d44c:	2805883a 	mov	r2,r5
    d450:	003fa406 	br	d2e4 <__udivdi3+0x150>
    d454:	0005883a 	mov	r2,zero
    d458:	0009883a 	mov	r4,zero
    d45c:	003fae06 	br	d318 <__udivdi3+0x184>
    d460:	00804034 	movhi	r2,256
    d464:	10bfffc4 	addi	r2,r2,-1
    d468:	1400a136 	bltu	r2,r16,d6f0 <__udivdi3+0x55c>
    d46c:	01400404 	movi	r5,16
    d470:	2805883a 	mov	r2,r5
    d474:	003f6006 	br	d1f8 <__udivdi3+0x64>
    d478:	01000044 	movi	r4,1
    d47c:	000b883a 	mov	r5,zero
    d480:	000f1740 	call	f174 <__udivsi3>
    d484:	1021883a 	mov	r16,r2
    d488:	00bfffd4 	movui	r2,65535
    d48c:	143ff436 	bltu	r2,r16,d460 <__udivdi3+0x2cc>
    d490:	003f5506 	br	d1e8 <__udivdi3+0x54>
    d494:	00804034 	movhi	r2,256
    d498:	10bfffc4 	addi	r2,r2,-1
    d49c:	12009a36 	bltu	r2,r8,d708 <__udivdi3+0x574>
    d4a0:	01400404 	movi	r5,16
    d4a4:	2805883a 	mov	r2,r5
    d4a8:	003fae06 	br	d364 <__udivdi3+0x1d0>
    d4ac:	3dc5c83a 	sub	r2,r7,r23
    d4b0:	35c8983a 	sll	r4,r6,r23
    d4b4:	8086d83a 	srl	r3,r16,r2
    d4b8:	a0a2d83a 	srl	r17,r20,r2
    d4bc:	e084d83a 	srl	r2,fp,r2
    d4c0:	20eab03a 	or	r21,r4,r3
    d4c4:	a82cd43a 	srli	r22,r21,16
    d4c8:	a5c6983a 	sll	r3,r20,r23
    d4cc:	8809883a 	mov	r4,r17
    d4d0:	b00b883a 	mov	r5,r22
    d4d4:	1886b03a 	or	r3,r3,r2
    d4d8:	d8c00215 	stw	r3,8(sp)
    d4dc:	000f1740 	call	f174 <__udivsi3>
    d4e0:	8809883a 	mov	r4,r17
    d4e4:	b00b883a 	mov	r5,r22
    d4e8:	1029883a 	mov	r20,r2
    d4ec:	000f17c0 	call	f17c <__umodsi3>
    d4f0:	a8ffffcc 	andi	r3,r21,65535
    d4f4:	d8c00515 	stw	r3,20(sp)
    d4f8:	d9000217 	ldw	r4,8(sp)
    d4fc:	d9400517 	ldw	r5,20(sp)
    d500:	1004943a 	slli	r2,r2,16
    d504:	2006d43a 	srli	r3,r4,16
    d508:	85e0983a 	sll	r16,r16,r23
    d50c:	2d23383a 	mul	r17,r5,r20
    d510:	10c4b03a 	or	r2,r2,r3
    d514:	dc000015 	stw	r16,0(sp)
    d518:	1440032e 	bgeu	r2,r17,d528 <__udivdi3+0x394>
    d51c:	1545883a 	add	r2,r2,r21
    d520:	a53fffc4 	addi	r20,r20,-1
    d524:	15407f2e 	bgeu	r2,r21,d724 <__udivdi3+0x590>
    d528:	1463c83a 	sub	r17,r2,r17
    d52c:	8809883a 	mov	r4,r17
    d530:	b00b883a 	mov	r5,r22
    d534:	000f1740 	call	f174 <__udivsi3>
    d538:	8809883a 	mov	r4,r17
    d53c:	b00b883a 	mov	r5,r22
    d540:	1021883a 	mov	r16,r2
    d544:	000f17c0 	call	f17c <__umodsi3>
    d548:	d8c00517 	ldw	r3,20(sp)
    d54c:	d9000217 	ldw	r4,8(sp)
    d550:	1004943a 	slli	r2,r2,16
    d554:	1c0f383a 	mul	r7,r3,r16
    d558:	20ffffcc 	andi	r3,r4,65535
    d55c:	10e2b03a 	or	r17,r2,r3
    d560:	89c0032e 	bgeu	r17,r7,d570 <__udivdi3+0x3dc>
    d564:	8d63883a 	add	r17,r17,r21
    d568:	843fffc4 	addi	r16,r16,-1
    d56c:	8d40692e 	bgeu	r17,r21,d714 <__udivdi3+0x580>
    d570:	a008943a 	slli	r4,r20,16
    d574:	d9400017 	ldw	r5,0(sp)
    d578:	89e3c83a 	sub	r17,r17,r7
    d57c:	8110b03a 	or	r8,r16,r4
    d580:	280cd43a 	srli	r6,r5,16
    d584:	28ffffcc 	andi	r3,r5,65535
    d588:	40bfffcc 	andi	r2,r8,65535
    d58c:	400ad43a 	srli	r5,r8,16
    d590:	10d3383a 	mul	r9,r2,r3
    d594:	1185383a 	mul	r2,r2,r6
    d598:	28c7383a 	mul	r3,r5,r3
    d59c:	4808d43a 	srli	r4,r9,16
    d5a0:	298b383a 	mul	r5,r5,r6
    d5a4:	10c5883a 	add	r2,r2,r3
    d5a8:	2089883a 	add	r4,r4,r2
    d5ac:	20c0022e 	bgeu	r4,r3,d5b8 <__udivdi3+0x424>
    d5b0:	00800074 	movhi	r2,1
    d5b4:	288b883a 	add	r5,r5,r2
    d5b8:	2004d43a 	srli	r2,r4,16
    d5bc:	288b883a 	add	r5,r5,r2
    d5c0:	89403f36 	bltu	r17,r5,d6c0 <__udivdi3+0x52c>
    d5c4:	89403926 	beq	r17,r5,d6ac <__udivdi3+0x518>
    d5c8:	4005883a 	mov	r2,r8
    d5cc:	0009883a 	mov	r4,zero
    d5d0:	003f5106 	br	d318 <__udivdi3+0x184>
    d5d4:	85a0983a 	sll	r16,r16,r22
    d5d8:	3585c83a 	sub	r2,r6,r22
    d5dc:	a0a2d83a 	srl	r17,r20,r2
    d5e0:	802ad43a 	srli	r21,r16,16
    d5e4:	e084d83a 	srl	r2,fp,r2
    d5e8:	a586983a 	sll	r3,r20,r22
    d5ec:	8809883a 	mov	r4,r17
    d5f0:	a80b883a 	mov	r5,r21
    d5f4:	1886b03a 	or	r3,r3,r2
    d5f8:	d8c00115 	stw	r3,4(sp)
    d5fc:	000f1740 	call	f174 <__udivsi3>
    d600:	8809883a 	mov	r4,r17
    d604:	a80b883a 	mov	r5,r21
    d608:	d8800415 	stw	r2,16(sp)
    d60c:	000f17c0 	call	f17c <__umodsi3>
    d610:	d9000117 	ldw	r4,4(sp)
    d614:	d9400417 	ldw	r5,16(sp)
    d618:	1004943a 	slli	r2,r2,16
    d61c:	85ffffcc 	andi	r23,r16,65535
    d620:	2006d43a 	srli	r3,r4,16
    d624:	b963383a 	mul	r17,r23,r5
    d628:	10c4b03a 	or	r2,r2,r3
    d62c:	1440042e 	bgeu	r2,r17,d640 <__udivdi3+0x4ac>
    d630:	297fffc4 	addi	r5,r5,-1
    d634:	1405883a 	add	r2,r2,r16
    d638:	d9400415 	stw	r5,16(sp)
    d63c:	1400442e 	bgeu	r2,r16,d750 <__udivdi3+0x5bc>
    d640:	1463c83a 	sub	r17,r2,r17
    d644:	8809883a 	mov	r4,r17
    d648:	a80b883a 	mov	r5,r21
    d64c:	000f1740 	call	f174 <__udivsi3>
    d650:	8809883a 	mov	r4,r17
    d654:	a80b883a 	mov	r5,r21
    d658:	1029883a 	mov	r20,r2
    d65c:	000f17c0 	call	f17c <__umodsi3>
    d660:	d9400117 	ldw	r5,4(sp)
    d664:	1004943a 	slli	r2,r2,16
    d668:	bd09383a 	mul	r4,r23,r20
    d66c:	28ffffcc 	andi	r3,r5,65535
    d670:	10c6b03a 	or	r3,r2,r3
    d674:	1900062e 	bgeu	r3,r4,d690 <__udivdi3+0x4fc>
    d678:	1c07883a 	add	r3,r3,r16
    d67c:	a53fffc4 	addi	r20,r20,-1
    d680:	1c000336 	bltu	r3,r16,d690 <__udivdi3+0x4fc>
    d684:	1900022e 	bgeu	r3,r4,d690 <__udivdi3+0x4fc>
    d688:	a53fffc4 	addi	r20,r20,-1
    d68c:	1c07883a 	add	r3,r3,r16
    d690:	d9400417 	ldw	r5,16(sp)
    d694:	e5b8983a 	sll	fp,fp,r22
    d698:	1923c83a 	sub	r17,r3,r4
    d69c:	2804943a 	slli	r2,r5,16
    d6a0:	a0a8b03a 	or	r20,r20,r2
    d6a4:	dd000315 	stw	r20,12(sp)
    d6a8:	003ee106 	br	d230 <__udivdi3+0x9c>
    d6ac:	2004943a 	slli	r2,r4,16
    d6b0:	e5c8983a 	sll	r4,fp,r23
    d6b4:	48ffffcc 	andi	r3,r9,65535
    d6b8:	10c5883a 	add	r2,r2,r3
    d6bc:	20bfc22e 	bgeu	r4,r2,d5c8 <__udivdi3+0x434>
    d6c0:	40bfffc4 	addi	r2,r8,-1
    d6c4:	0009883a 	mov	r4,zero
    d6c8:	003f1306 	br	d318 <__udivdi3+0x184>
    d6cc:	01400204 	movi	r5,8
    d6d0:	2805883a 	mov	r2,r5
    d6d4:	003f0306 	br	d2e4 <__udivdi3+0x150>
    d6d8:	01400604 	movi	r5,24
    d6dc:	2805883a 	mov	r2,r5
    d6e0:	003f0006 	br	d2e4 <__udivdi3+0x150>
    d6e4:	01400204 	movi	r5,8
    d6e8:	2805883a 	mov	r2,r5
    d6ec:	003ec206 	br	d1f8 <__udivdi3+0x64>
    d6f0:	01400604 	movi	r5,24
    d6f4:	2805883a 	mov	r2,r5
    d6f8:	003ebf06 	br	d1f8 <__udivdi3+0x64>
    d6fc:	01400204 	movi	r5,8
    d700:	2805883a 	mov	r2,r5
    d704:	003f1706 	br	d364 <__udivdi3+0x1d0>
    d708:	01400604 	movi	r5,24
    d70c:	2805883a 	mov	r2,r5
    d710:	003f1406 	br	d364 <__udivdi3+0x1d0>
    d714:	89ff962e 	bgeu	r17,r7,d570 <__udivdi3+0x3dc>
    d718:	8d63883a 	add	r17,r17,r21
    d71c:	843fffc4 	addi	r16,r16,-1
    d720:	003f9306 	br	d570 <__udivdi3+0x3dc>
    d724:	147f802e 	bgeu	r2,r17,d528 <__udivdi3+0x394>
    d728:	a53fffc4 	addi	r20,r20,-1
    d72c:	1545883a 	add	r2,r2,r21
    d730:	003f7d06 	br	d528 <__udivdi3+0x394>
    d734:	a53fffc4 	addi	r20,r20,-1
    d738:	003ede06 	br	d2b4 <__udivdi3+0x120>
    d73c:	b5bfffc4 	addi	r22,r22,-1
    d740:	1405883a 	add	r2,r2,r16
    d744:	003f2806 	br	d3e8 <__udivdi3+0x254>
    d748:	a53fffc4 	addi	r20,r20,-1
    d74c:	003f3706 	br	d42c <__udivdi3+0x298>
    d750:	147fbb2e 	bgeu	r2,r17,d640 <__udivdi3+0x4ac>
    d754:	297fffc4 	addi	r5,r5,-1
    d758:	1405883a 	add	r2,r2,r16
    d75c:	d9400415 	stw	r5,16(sp)
    d760:	003fb706 	br	d640 <__udivdi3+0x4ac>
    d764:	b5bfffc4 	addi	r22,r22,-1
    d768:	1405883a 	add	r2,r2,r16
    d76c:	003ec006 	br	d270 <__udivdi3+0xdc>

0000d770 <__umoddi3>:
    d770:	defff104 	addi	sp,sp,-60
    d774:	dd800b15 	stw	r22,44(sp)
    d778:	dd000915 	stw	r20,36(sp)
    d77c:	dc000515 	stw	r16,20(sp)
    d780:	dfc00e15 	stw	ra,56(sp)
    d784:	df000d15 	stw	fp,52(sp)
    d788:	ddc00c15 	stw	r23,48(sp)
    d78c:	dd400a15 	stw	r21,40(sp)
    d790:	dcc00815 	stw	r19,32(sp)
    d794:	dc800715 	stw	r18,28(sp)
    d798:	dc400615 	stw	r17,24(sp)
    d79c:	3021883a 	mov	r16,r6
    d7a0:	202d883a 	mov	r22,r4
    d7a4:	2829883a 	mov	r20,r5
    d7a8:	38002b1e 	bne	r7,zero,d858 <__umoddi3+0xe8>
    d7ac:	29805036 	bltu	r5,r6,d8f0 <__umoddi3+0x180>
    d7b0:	30008a26 	beq	r6,zero,d9dc <__umoddi3+0x26c>
    d7b4:	00bfffd4 	movui	r2,65535
    d7b8:	14008236 	bltu	r2,r16,d9c4 <__umoddi3+0x254>
    d7bc:	00803fc4 	movi	r2,255
    d7c0:	14013636 	bltu	r2,r16,dc9c <__umoddi3+0x52c>
    d7c4:	000b883a 	mov	r5,zero
    d7c8:	0005883a 	mov	r2,zero
    d7cc:	8084d83a 	srl	r2,r16,r2
    d7d0:	01000074 	movhi	r4,1
    d7d4:	21084a04 	addi	r4,r4,8488
    d7d8:	01800804 	movi	r6,32
    d7dc:	1105883a 	add	r2,r2,r4
    d7e0:	10c00003 	ldbu	r3,0(r2)
    d7e4:	28c7883a 	add	r3,r5,r3
    d7e8:	30efc83a 	sub	r23,r6,r3
    d7ec:	b800941e 	bne	r23,zero,da40 <__umoddi3+0x2d0>
    d7f0:	802ad43a 	srli	r21,r16,16
    d7f4:	a423c83a 	sub	r17,r20,r16
    d7f8:	0039883a 	mov	fp,zero
    d7fc:	853fffcc 	andi	r20,r16,65535
    d800:	8809883a 	mov	r4,r17
    d804:	a80b883a 	mov	r5,r21
    d808:	000f1740 	call	f174 <__udivsi3>
    d80c:	8809883a 	mov	r4,r17
    d810:	a80b883a 	mov	r5,r21
    d814:	a0a3383a 	mul	r17,r20,r2
    d818:	000f17c0 	call	f17c <__umodsi3>
    d81c:	1004943a 	slli	r2,r2,16
    d820:	b006d43a 	srli	r3,r22,16
    d824:	10c4b03a 	or	r2,r2,r3
    d828:	1440032e 	bgeu	r2,r17,d838 <__umoddi3+0xc8>
    d82c:	1405883a 	add	r2,r2,r16
    d830:	14000136 	bltu	r2,r16,d838 <__umoddi3+0xc8>
    d834:	14413536 	bltu	r2,r17,dd0c <__umoddi3+0x59c>
    d838:	1463c83a 	sub	r17,r2,r17
    d83c:	8809883a 	mov	r4,r17
    d840:	a80b883a 	mov	r5,r21
    d844:	000f1740 	call	f174 <__udivsi3>
    d848:	8809883a 	mov	r4,r17
    d84c:	a0a3383a 	mul	r17,r20,r2
    d850:	a80b883a 	mov	r5,r21
    d854:	00004d06 	br	d98c <__umoddi3+0x21c>
    d858:	380d883a 	mov	r6,r7
    d85c:	29c0102e 	bgeu	r5,r7,d8a0 <__umoddi3+0x130>
    d860:	2011883a 	mov	r8,r4
    d864:	2813883a 	mov	r9,r5
    d868:	4005883a 	mov	r2,r8
    d86c:	4807883a 	mov	r3,r9
    d870:	dfc00e17 	ldw	ra,56(sp)
    d874:	df000d17 	ldw	fp,52(sp)
    d878:	ddc00c17 	ldw	r23,48(sp)
    d87c:	dd800b17 	ldw	r22,44(sp)
    d880:	dd400a17 	ldw	r21,40(sp)
    d884:	dd000917 	ldw	r20,36(sp)
    d888:	dcc00817 	ldw	r19,32(sp)
    d88c:	dc800717 	ldw	r18,28(sp)
    d890:	dc400617 	ldw	r17,24(sp)
    d894:	dc000517 	ldw	r16,20(sp)
    d898:	dec00f04 	addi	sp,sp,60
    d89c:	f800283a 	ret
    d8a0:	00bfffd4 	movui	r2,65535
    d8a4:	11c05a36 	bltu	r2,r7,da10 <__umoddi3+0x2a0>
    d8a8:	00803fc4 	movi	r2,255
    d8ac:	11c0fe36 	bltu	r2,r7,dca8 <__umoddi3+0x538>
    d8b0:	000b883a 	mov	r5,zero
    d8b4:	0005883a 	mov	r2,zero
    d8b8:	3084d83a 	srl	r2,r6,r2
    d8bc:	01000074 	movhi	r4,1
    d8c0:	21084a04 	addi	r4,r4,8488
    d8c4:	01c00804 	movi	r7,32
    d8c8:	1105883a 	add	r2,r2,r4
    d8cc:	10c00003 	ldbu	r3,0(r2)
    d8d0:	28c7883a 	add	r3,r5,r3
    d8d4:	38ebc83a 	sub	r21,r7,r3
    d8d8:	a800851e 	bne	r21,zero,daf0 <__umoddi3+0x380>
    d8dc:	35005236 	bltu	r6,r20,da28 <__umoddi3+0x2b8>
    d8e0:	b400512e 	bgeu	r22,r16,da28 <__umoddi3+0x2b8>
    d8e4:	b011883a 	mov	r8,r22
    d8e8:	a013883a 	mov	r9,r20
    d8ec:	003fde06 	br	d868 <__umoddi3+0xf8>
    d8f0:	00bfffd4 	movui	r2,65535
    d8f4:	11804036 	bltu	r2,r6,d9f8 <__umoddi3+0x288>
    d8f8:	00803fc4 	movi	r2,255
    d8fc:	1180ed36 	bltu	r2,r6,dcb4 <__umoddi3+0x544>
    d900:	000b883a 	mov	r5,zero
    d904:	0005883a 	mov	r2,zero
    d908:	8084d83a 	srl	r2,r16,r2
    d90c:	01000074 	movhi	r4,1
    d910:	21084a04 	addi	r4,r4,8488
    d914:	01800804 	movi	r6,32
    d918:	1105883a 	add	r2,r2,r4
    d91c:	10c00003 	ldbu	r3,0(r2)
    d920:	28c7883a 	add	r3,r5,r3
    d924:	30c7c83a 	sub	r3,r6,r3
    d928:	1800bf1e 	bne	r3,zero,dc28 <__umoddi3+0x4b8>
    d92c:	0039883a 	mov	fp,zero
    d930:	802ad43a 	srli	r21,r16,16
    d934:	a009883a 	mov	r4,r20
    d938:	85ffffcc 	andi	r23,r16,65535
    d93c:	a80b883a 	mov	r5,r21
    d940:	000f1740 	call	f174 <__udivsi3>
    d944:	a009883a 	mov	r4,r20
    d948:	a80b883a 	mov	r5,r21
    d94c:	b8a3383a 	mul	r17,r23,r2
    d950:	000f17c0 	call	f17c <__umodsi3>
    d954:	1004943a 	slli	r2,r2,16
    d958:	b006d43a 	srli	r3,r22,16
    d95c:	10c4b03a 	or	r2,r2,r3
    d960:	1440032e 	bgeu	r2,r17,d970 <__umoddi3+0x200>
    d964:	1405883a 	add	r2,r2,r16
    d968:	14000136 	bltu	r2,r16,d970 <__umoddi3+0x200>
    d96c:	1440e536 	bltu	r2,r17,dd04 <__umoddi3+0x594>
    d970:	1463c83a 	sub	r17,r2,r17
    d974:	8809883a 	mov	r4,r17
    d978:	a80b883a 	mov	r5,r21
    d97c:	000f1740 	call	f174 <__udivsi3>
    d980:	8809883a 	mov	r4,r17
    d984:	b8a3383a 	mul	r17,r23,r2
    d988:	a80b883a 	mov	r5,r21
    d98c:	000f17c0 	call	f17c <__umodsi3>
    d990:	1004943a 	slli	r2,r2,16
    d994:	b0ffffcc 	andi	r3,r22,65535
    d998:	10c4b03a 	or	r2,r2,r3
    d99c:	1440042e 	bgeu	r2,r17,d9b0 <__umoddi3+0x240>
    d9a0:	1405883a 	add	r2,r2,r16
    d9a4:	14000236 	bltu	r2,r16,d9b0 <__umoddi3+0x240>
    d9a8:	1440012e 	bgeu	r2,r17,d9b0 <__umoddi3+0x240>
    d9ac:	1405883a 	add	r2,r2,r16
    d9b0:	1445c83a 	sub	r2,r2,r17
    d9b4:	1724d83a 	srl	r18,r2,fp
    d9b8:	0013883a 	mov	r9,zero
    d9bc:	9011883a 	mov	r8,r18
    d9c0:	003fa906 	br	d868 <__umoddi3+0xf8>
    d9c4:	00804034 	movhi	r2,256
    d9c8:	10bfffc4 	addi	r2,r2,-1
    d9cc:	1400b036 	bltu	r2,r16,dc90 <__umoddi3+0x520>
    d9d0:	01400404 	movi	r5,16
    d9d4:	2805883a 	mov	r2,r5
    d9d8:	003f7c06 	br	d7cc <__umoddi3+0x5c>
    d9dc:	01000044 	movi	r4,1
    d9e0:	000b883a 	mov	r5,zero
    d9e4:	000f1740 	call	f174 <__udivsi3>
    d9e8:	1021883a 	mov	r16,r2
    d9ec:	00bfffd4 	movui	r2,65535
    d9f0:	143ff436 	bltu	r2,r16,d9c4 <__umoddi3+0x254>
    d9f4:	003f7106 	br	d7bc <__umoddi3+0x4c>
    d9f8:	00804034 	movhi	r2,256
    d9fc:	10bfffc4 	addi	r2,r2,-1
    da00:	1180af36 	bltu	r2,r6,dcc0 <__umoddi3+0x550>
    da04:	01400404 	movi	r5,16
    da08:	2805883a 	mov	r2,r5
    da0c:	003fbe06 	br	d908 <__umoddi3+0x198>
    da10:	00804034 	movhi	r2,256
    da14:	10bfffc4 	addi	r2,r2,-1
    da18:	11c0ac36 	bltu	r2,r7,dccc <__umoddi3+0x55c>
    da1c:	01400404 	movi	r5,16
    da20:	2805883a 	mov	r2,r5
    da24:	003fa406 	br	d8b8 <__umoddi3+0x148>
    da28:	b409c83a 	sub	r4,r22,r16
    da2c:	b105803a 	cmpltu	r2,r22,r4
    da30:	a187c83a 	sub	r3,r20,r6
    da34:	18a9c83a 	sub	r20,r3,r2
    da38:	202d883a 	mov	r22,r4
    da3c:	003fa906 	br	d8e4 <__umoddi3+0x174>
    da40:	85e0983a 	sll	r16,r16,r23
    da44:	35c5c83a 	sub	r2,r6,r23
    da48:	a0a2d83a 	srl	r17,r20,r2
    da4c:	802ad43a 	srli	r21,r16,16
    da50:	b084d83a 	srl	r2,r22,r2
    da54:	a5c6983a 	sll	r3,r20,r23
    da58:	8809883a 	mov	r4,r17
    da5c:	a80b883a 	mov	r5,r21
    da60:	1886b03a 	or	r3,r3,r2
    da64:	d8c00115 	stw	r3,4(sp)
    da68:	853fffcc 	andi	r20,r16,65535
    da6c:	000f1740 	call	f174 <__udivsi3>
    da70:	8809883a 	mov	r4,r17
    da74:	a80b883a 	mov	r5,r21
    da78:	a0a3383a 	mul	r17,r20,r2
    da7c:	000f17c0 	call	f17c <__umodsi3>
    da80:	d9000117 	ldw	r4,4(sp)
    da84:	1004943a 	slli	r2,r2,16
    da88:	b839883a 	mov	fp,r23
    da8c:	2006d43a 	srli	r3,r4,16
    da90:	10c4b03a 	or	r2,r2,r3
    da94:	1440022e 	bgeu	r2,r17,daa0 <__umoddi3+0x330>
    da98:	1405883a 	add	r2,r2,r16
    da9c:	1400962e 	bgeu	r2,r16,dcf8 <__umoddi3+0x588>
    daa0:	1463c83a 	sub	r17,r2,r17
    daa4:	8809883a 	mov	r4,r17
    daa8:	a80b883a 	mov	r5,r21
    daac:	000f1740 	call	f174 <__udivsi3>
    dab0:	8809883a 	mov	r4,r17
    dab4:	a80b883a 	mov	r5,r21
    dab8:	a0a3383a 	mul	r17,r20,r2
    dabc:	000f17c0 	call	f17c <__umodsi3>
    dac0:	d9400117 	ldw	r5,4(sp)
    dac4:	1004943a 	slli	r2,r2,16
    dac8:	28ffffcc 	andi	r3,r5,65535
    dacc:	10c4b03a 	or	r2,r2,r3
    dad0:	1440042e 	bgeu	r2,r17,dae4 <__umoddi3+0x374>
    dad4:	1405883a 	add	r2,r2,r16
    dad8:	14000236 	bltu	r2,r16,dae4 <__umoddi3+0x374>
    dadc:	1440012e 	bgeu	r2,r17,dae4 <__umoddi3+0x374>
    dae0:	1405883a 	add	r2,r2,r16
    dae4:	b5ec983a 	sll	r22,r22,r23
    dae8:	1463c83a 	sub	r17,r2,r17
    daec:	003f4406 	br	d800 <__umoddi3+0x90>
    daf0:	3d4fc83a 	sub	r7,r7,r21
    daf4:	3546983a 	sll	r3,r6,r21
    daf8:	81c4d83a 	srl	r2,r16,r7
    dafc:	a1e2d83a 	srl	r17,r20,r7
    db00:	a54c983a 	sll	r6,r20,r21
    db04:	18aeb03a 	or	r23,r3,r2
    db08:	b828d43a 	srli	r20,r23,16
    db0c:	b1c4d83a 	srl	r2,r22,r7
    db10:	8809883a 	mov	r4,r17
    db14:	a00b883a 	mov	r5,r20
    db18:	308cb03a 	or	r6,r6,r2
    db1c:	d9c00315 	stw	r7,12(sp)
    db20:	d9800215 	stw	r6,8(sp)
    db24:	000f1740 	call	f174 <__udivsi3>
    db28:	8809883a 	mov	r4,r17
    db2c:	a00b883a 	mov	r5,r20
    db30:	1039883a 	mov	fp,r2
    db34:	000f17c0 	call	f17c <__umodsi3>
    db38:	b8ffffcc 	andi	r3,r23,65535
    db3c:	d8c00415 	stw	r3,16(sp)
    db40:	d9000217 	ldw	r4,8(sp)
    db44:	d9400417 	ldw	r5,16(sp)
    db48:	1004943a 	slli	r2,r2,16
    db4c:	2006d43a 	srli	r3,r4,16
    db50:	8560983a 	sll	r16,r16,r21
    db54:	2f23383a 	mul	r17,r5,fp
    db58:	10c4b03a 	or	r2,r2,r3
    db5c:	dc000015 	stw	r16,0(sp)
    db60:	b56c983a 	sll	r22,r22,r21
    db64:	1440032e 	bgeu	r2,r17,db74 <__umoddi3+0x404>
    db68:	15c5883a 	add	r2,r2,r23
    db6c:	e73fffc4 	addi	fp,fp,-1
    db70:	15c05d2e 	bgeu	r2,r23,dce8 <__umoddi3+0x578>
    db74:	1463c83a 	sub	r17,r2,r17
    db78:	8809883a 	mov	r4,r17
    db7c:	a00b883a 	mov	r5,r20
    db80:	000f1740 	call	f174 <__udivsi3>
    db84:	8809883a 	mov	r4,r17
    db88:	a00b883a 	mov	r5,r20
    db8c:	1021883a 	mov	r16,r2
    db90:	000f17c0 	call	f17c <__umodsi3>
    db94:	d8c00417 	ldw	r3,16(sp)
    db98:	d9000217 	ldw	r4,8(sp)
    db9c:	1004943a 	slli	r2,r2,16
    dba0:	1c23383a 	mul	r17,r3,r16
    dba4:	20ffffcc 	andi	r3,r4,65535
    dba8:	10ceb03a 	or	r7,r2,r3
    dbac:	3c40032e 	bgeu	r7,r17,dbbc <__umoddi3+0x44c>
    dbb0:	3dcf883a 	add	r7,r7,r23
    dbb4:	843fffc4 	addi	r16,r16,-1
    dbb8:	3dc0472e 	bgeu	r7,r23,dcd8 <__umoddi3+0x568>
    dbbc:	e004943a 	slli	r2,fp,16
    dbc0:	d9400017 	ldw	r5,0(sp)
    dbc4:	3c4fc83a 	sub	r7,r7,r17
    dbc8:	8084b03a 	or	r2,r16,r2
    dbcc:	28ffffcc 	andi	r3,r5,65535
    dbd0:	280cd43a 	srli	r6,r5,16
    dbd4:	100ad43a 	srli	r5,r2,16
    dbd8:	10bfffcc 	andi	r2,r2,65535
    dbdc:	10d1383a 	mul	r8,r2,r3
    dbe0:	28c7383a 	mul	r3,r5,r3
    dbe4:	1185383a 	mul	r2,r2,r6
    dbe8:	4008d43a 	srli	r4,r8,16
    dbec:	298b383a 	mul	r5,r5,r6
    dbf0:	10c5883a 	add	r2,r2,r3
    dbf4:	2089883a 	add	r4,r4,r2
    dbf8:	20c0022e 	bgeu	r4,r3,dc04 <__umoddi3+0x494>
    dbfc:	00800074 	movhi	r2,1
    dc00:	288b883a 	add	r5,r5,r2
    dc04:	2004d43a 	srli	r2,r4,16
    dc08:	2008943a 	slli	r4,r4,16
    dc0c:	40ffffcc 	andi	r3,r8,65535
    dc10:	288b883a 	add	r5,r5,r2
    dc14:	20c9883a 	add	r4,r4,r3
    dc18:	39400b36 	bltu	r7,r5,dc48 <__umoddi3+0x4d8>
    dc1c:	39403d26 	beq	r7,r5,dd14 <__umoddi3+0x5a4>
    dc20:	394bc83a 	sub	r5,r7,r5
    dc24:	00000f06 	br	dc64 <__umoddi3+0x4f4>
    dc28:	30c5c83a 	sub	r2,r6,r3
    dc2c:	1839883a 	mov	fp,r3
    dc30:	b084d83a 	srl	r2,r22,r2
    dc34:	a0c6983a 	sll	r3,r20,r3
    dc38:	8720983a 	sll	r16,r16,fp
    dc3c:	b72c983a 	sll	r22,r22,fp
    dc40:	18a8b03a 	or	r20,r3,r2
    dc44:	003f3a06 	br	d930 <__umoddi3+0x1c0>
    dc48:	d8c00017 	ldw	r3,0(sp)
    dc4c:	20c5c83a 	sub	r2,r4,r3
    dc50:	2089803a 	cmpltu	r4,r4,r2
    dc54:	2dc7c83a 	sub	r3,r5,r23
    dc58:	1907c83a 	sub	r3,r3,r4
    dc5c:	38cbc83a 	sub	r5,r7,r3
    dc60:	1009883a 	mov	r4,r2
    dc64:	b105c83a 	sub	r2,r22,r4
    dc68:	b087803a 	cmpltu	r3,r22,r2
    dc6c:	28c7c83a 	sub	r3,r5,r3
    dc70:	d9400317 	ldw	r5,12(sp)
    dc74:	1544d83a 	srl	r2,r2,r21
    dc78:	1948983a 	sll	r4,r3,r5
    dc7c:	1d46d83a 	srl	r3,r3,r21
    dc80:	20a4b03a 	or	r18,r4,r2
    dc84:	9011883a 	mov	r8,r18
    dc88:	1813883a 	mov	r9,r3
    dc8c:	003ef606 	br	d868 <__umoddi3+0xf8>
    dc90:	01400604 	movi	r5,24
    dc94:	2805883a 	mov	r2,r5
    dc98:	003ecc06 	br	d7cc <__umoddi3+0x5c>
    dc9c:	01400204 	movi	r5,8
    dca0:	2805883a 	mov	r2,r5
    dca4:	003ec906 	br	d7cc <__umoddi3+0x5c>
    dca8:	01400204 	movi	r5,8
    dcac:	2805883a 	mov	r2,r5
    dcb0:	003f0106 	br	d8b8 <__umoddi3+0x148>
    dcb4:	01400204 	movi	r5,8
    dcb8:	2805883a 	mov	r2,r5
    dcbc:	003f1206 	br	d908 <__umoddi3+0x198>
    dcc0:	01400604 	movi	r5,24
    dcc4:	2805883a 	mov	r2,r5
    dcc8:	003f0f06 	br	d908 <__umoddi3+0x198>
    dccc:	01400604 	movi	r5,24
    dcd0:	2805883a 	mov	r2,r5
    dcd4:	003ef806 	br	d8b8 <__umoddi3+0x148>
    dcd8:	3c7fb82e 	bgeu	r7,r17,dbbc <__umoddi3+0x44c>
    dcdc:	843fffc4 	addi	r16,r16,-1
    dce0:	3dcf883a 	add	r7,r7,r23
    dce4:	003fb506 	br	dbbc <__umoddi3+0x44c>
    dce8:	147fa22e 	bgeu	r2,r17,db74 <__umoddi3+0x404>
    dcec:	e73fffc4 	addi	fp,fp,-1
    dcf0:	15c5883a 	add	r2,r2,r23
    dcf4:	003f9f06 	br	db74 <__umoddi3+0x404>
    dcf8:	147f692e 	bgeu	r2,r17,daa0 <__umoddi3+0x330>
    dcfc:	1405883a 	add	r2,r2,r16
    dd00:	003f6706 	br	daa0 <__umoddi3+0x330>
    dd04:	1405883a 	add	r2,r2,r16
    dd08:	003f1906 	br	d970 <__umoddi3+0x200>
    dd0c:	1405883a 	add	r2,r2,r16
    dd10:	003ec906 	br	d838 <__umoddi3+0xc8>
    dd14:	b13fcc36 	bltu	r22,r4,dc48 <__umoddi3+0x4d8>
    dd18:	000b883a 	mov	r5,zero
    dd1c:	003fd106 	br	dc64 <__umoddi3+0x4f4>

0000dd20 <__nesf2>:
    dd20:	defff304 	addi	sp,sp,-52
    dd24:	dc400b15 	stw	r17,44(sp)
    dd28:	dc400204 	addi	r17,sp,8
    dd2c:	dc000a15 	stw	r16,40(sp)
    dd30:	d9000015 	stw	r4,0(sp)
    dd34:	d9400115 	stw	r5,4(sp)
    dd38:	d809883a 	mov	r4,sp
    dd3c:	880b883a 	mov	r5,r17
    dd40:	dc000604 	addi	r16,sp,24
    dd44:	dfc00c15 	stw	ra,48(sp)
    dd48:	0000b480 	call	b48 <__unpack_f>
    dd4c:	d9000104 	addi	r4,sp,4
    dd50:	800b883a 	mov	r5,r16
    dd54:	0000b480 	call	b48 <__unpack_f>
    dd58:	d8800217 	ldw	r2,8(sp)
    dd5c:	00c00044 	movi	r3,1
    dd60:	180d883a 	mov	r6,r3
    dd64:	1880062e 	bgeu	r3,r2,dd80 <__nesf2+0x60>
    dd68:	d8800617 	ldw	r2,24(sp)
    dd6c:	8809883a 	mov	r4,r17
    dd70:	800b883a 	mov	r5,r16
    dd74:	1880022e 	bgeu	r3,r2,dd80 <__nesf2+0x60>
    dd78:	0000c100 	call	c10 <__fpcmp_parts_f>
    dd7c:	100d883a 	mov	r6,r2
    dd80:	3005883a 	mov	r2,r6
    dd84:	dfc00c17 	ldw	ra,48(sp)
    dd88:	dc400b17 	ldw	r17,44(sp)
    dd8c:	dc000a17 	ldw	r16,40(sp)
    dd90:	dec00d04 	addi	sp,sp,52
    dd94:	f800283a 	ret

0000dd98 <__gtsf2>:
    dd98:	defff304 	addi	sp,sp,-52
    dd9c:	dc400b15 	stw	r17,44(sp)
    dda0:	dc400204 	addi	r17,sp,8
    dda4:	dc000a15 	stw	r16,40(sp)
    dda8:	d9000015 	stw	r4,0(sp)
    ddac:	d9400115 	stw	r5,4(sp)
    ddb0:	d809883a 	mov	r4,sp
    ddb4:	880b883a 	mov	r5,r17
    ddb8:	dc000604 	addi	r16,sp,24
    ddbc:	dfc00c15 	stw	ra,48(sp)
    ddc0:	0000b480 	call	b48 <__unpack_f>
    ddc4:	d9000104 	addi	r4,sp,4
    ddc8:	800b883a 	mov	r5,r16
    ddcc:	0000b480 	call	b48 <__unpack_f>
    ddd0:	d8800217 	ldw	r2,8(sp)
    ddd4:	00c00044 	movi	r3,1
    ddd8:	01bfffc4 	movi	r6,-1
    dddc:	1880062e 	bgeu	r3,r2,ddf8 <__gtsf2+0x60>
    dde0:	d8800617 	ldw	r2,24(sp)
    dde4:	8809883a 	mov	r4,r17
    dde8:	800b883a 	mov	r5,r16
    ddec:	1880022e 	bgeu	r3,r2,ddf8 <__gtsf2+0x60>
    ddf0:	0000c100 	call	c10 <__fpcmp_parts_f>
    ddf4:	100d883a 	mov	r6,r2
    ddf8:	3005883a 	mov	r2,r6
    ddfc:	dfc00c17 	ldw	ra,48(sp)
    de00:	dc400b17 	ldw	r17,44(sp)
    de04:	dc000a17 	ldw	r16,40(sp)
    de08:	dec00d04 	addi	sp,sp,52
    de0c:	f800283a 	ret

0000de10 <_fpadd_parts>:
    de10:	defff804 	addi	sp,sp,-32
    de14:	dcc00315 	stw	r19,12(sp)
    de18:	2027883a 	mov	r19,r4
    de1c:	21000017 	ldw	r4,0(r4)
    de20:	00c00044 	movi	r3,1
    de24:	dd400515 	stw	r21,20(sp)
    de28:	dd000415 	stw	r20,16(sp)
    de2c:	ddc00715 	stw	r23,28(sp)
    de30:	dd800615 	stw	r22,24(sp)
    de34:	dc800215 	stw	r18,8(sp)
    de38:	dc400115 	stw	r17,4(sp)
    de3c:	dc000015 	stw	r16,0(sp)
    de40:	282b883a 	mov	r21,r5
    de44:	3029883a 	mov	r20,r6
    de48:	1900632e 	bgeu	r3,r4,dfd8 <_fpadd_parts+0x1c8>
    de4c:	28800017 	ldw	r2,0(r5)
    de50:	1880812e 	bgeu	r3,r2,e058 <_fpadd_parts+0x248>
    de54:	00c00104 	movi	r3,4
    de58:	20c0dc26 	beq	r4,r3,e1cc <_fpadd_parts+0x3bc>
    de5c:	10c07e26 	beq	r2,r3,e058 <_fpadd_parts+0x248>
    de60:	00c00084 	movi	r3,2
    de64:	10c06726 	beq	r2,r3,e004 <_fpadd_parts+0x1f4>
    de68:	20c07b26 	beq	r4,r3,e058 <_fpadd_parts+0x248>
    de6c:	9dc00217 	ldw	r23,8(r19)
    de70:	28c00217 	ldw	r3,8(r5)
    de74:	9c400317 	ldw	r17,12(r19)
    de78:	2bc00317 	ldw	r15,12(r5)
    de7c:	b8cdc83a 	sub	r6,r23,r3
    de80:	9c800417 	ldw	r18,16(r19)
    de84:	2c000417 	ldw	r16,16(r5)
    de88:	3009883a 	mov	r4,r6
    de8c:	30009716 	blt	r6,zero,e0ec <_fpadd_parts+0x2dc>
    de90:	00800fc4 	movi	r2,63
    de94:	11806b16 	blt	r2,r6,e044 <_fpadd_parts+0x234>
    de98:	0100a40e 	bge	zero,r4,e12c <_fpadd_parts+0x31c>
    de9c:	35bff804 	addi	r22,r6,-32
    dea0:	b000bc16 	blt	r22,zero,e194 <_fpadd_parts+0x384>
    dea4:	8596d83a 	srl	r11,r16,r22
    dea8:	0019883a 	mov	r12,zero
    deac:	0013883a 	mov	r9,zero
    deb0:	01000044 	movi	r4,1
    deb4:	0015883a 	mov	r10,zero
    deb8:	b000be16 	blt	r22,zero,e1b4 <_fpadd_parts+0x3a4>
    debc:	2590983a 	sll	r8,r4,r22
    dec0:	000f883a 	mov	r7,zero
    dec4:	00bfffc4 	movi	r2,-1
    dec8:	3889883a 	add	r4,r7,r2
    decc:	408b883a 	add	r5,r8,r2
    ded0:	21cd803a 	cmpltu	r6,r4,r7
    ded4:	314b883a 	add	r5,r6,r5
    ded8:	7904703a 	and	r2,r15,r4
    dedc:	8146703a 	and	r3,r16,r5
    dee0:	10c4b03a 	or	r2,r2,r3
    dee4:	10000226 	beq	r2,zero,def0 <_fpadd_parts+0xe0>
    dee8:	02400044 	movi	r9,1
    deec:	0015883a 	mov	r10,zero
    def0:	5a5eb03a 	or	r15,r11,r9
    def4:	62a0b03a 	or	r16,r12,r10
    def8:	99400117 	ldw	r5,4(r19)
    defc:	a8800117 	ldw	r2,4(r21)
    df00:	28806e26 	beq	r5,r2,e0bc <_fpadd_parts+0x2ac>
    df04:	28006626 	beq	r5,zero,e0a0 <_fpadd_parts+0x290>
    df08:	7c45c83a 	sub	r2,r15,r17
    df0c:	7889803a 	cmpltu	r4,r15,r2
    df10:	8487c83a 	sub	r3,r16,r18
    df14:	1909c83a 	sub	r4,r3,r4
    df18:	100d883a 	mov	r6,r2
    df1c:	200f883a 	mov	r7,r4
    df20:	38007716 	blt	r7,zero,e100 <_fpadd_parts+0x2f0>
    df24:	a5c00215 	stw	r23,8(r20)
    df28:	a1c00415 	stw	r7,16(r20)
    df2c:	a0000115 	stw	zero,4(r20)
    df30:	a1800315 	stw	r6,12(r20)
    df34:	a2000317 	ldw	r8,12(r20)
    df38:	a2400417 	ldw	r9,16(r20)
    df3c:	00bfffc4 	movi	r2,-1
    df40:	408b883a 	add	r5,r8,r2
    df44:	2a09803a 	cmpltu	r4,r5,r8
    df48:	488d883a 	add	r6,r9,r2
    df4c:	01c40034 	movhi	r7,4096
    df50:	39ffffc4 	addi	r7,r7,-1
    df54:	218d883a 	add	r6,r4,r6
    df58:	39801736 	bltu	r7,r6,dfb8 <_fpadd_parts+0x1a8>
    df5c:	31c06526 	beq	r6,r7,e0f4 <_fpadd_parts+0x2e4>
    df60:	a3000217 	ldw	r12,8(r20)
    df64:	4209883a 	add	r4,r8,r8
    df68:	00bfffc4 	movi	r2,-1
    df6c:	220f803a 	cmpltu	r7,r4,r8
    df70:	4a4b883a 	add	r5,r9,r9
    df74:	394f883a 	add	r7,r7,r5
    df78:	2095883a 	add	r10,r4,r2
    df7c:	3897883a 	add	r11,r7,r2
    df80:	510d803a 	cmpltu	r6,r10,r4
    df84:	6099883a 	add	r12,r12,r2
    df88:	32d7883a 	add	r11,r6,r11
    df8c:	00840034 	movhi	r2,4096
    df90:	10bfffc4 	addi	r2,r2,-1
    df94:	2011883a 	mov	r8,r4
    df98:	3813883a 	mov	r9,r7
    df9c:	a1000315 	stw	r4,12(r20)
    dfa0:	a1c00415 	stw	r7,16(r20)
    dfa4:	a3000215 	stw	r12,8(r20)
    dfa8:	12c00336 	bltu	r2,r11,dfb8 <_fpadd_parts+0x1a8>
    dfac:	58bfed1e 	bne	r11,r2,df64 <_fpadd_parts+0x154>
    dfb0:	00bfff84 	movi	r2,-2
    dfb4:	12bfeb2e 	bgeu	r2,r10,df64 <_fpadd_parts+0x154>
    dfb8:	a2800417 	ldw	r10,16(r20)
    dfbc:	008000c4 	movi	r2,3
    dfc0:	00c80034 	movhi	r3,8192
    dfc4:	18ffffc4 	addi	r3,r3,-1
    dfc8:	a2400317 	ldw	r9,12(r20)
    dfcc:	a0800015 	stw	r2,0(r20)
    dfd0:	1a802336 	bltu	r3,r10,e060 <_fpadd_parts+0x250>
    dfd4:	a027883a 	mov	r19,r20
    dfd8:	9805883a 	mov	r2,r19
    dfdc:	ddc00717 	ldw	r23,28(sp)
    dfe0:	dd800617 	ldw	r22,24(sp)
    dfe4:	dd400517 	ldw	r21,20(sp)
    dfe8:	dd000417 	ldw	r20,16(sp)
    dfec:	dcc00317 	ldw	r19,12(sp)
    dff0:	dc800217 	ldw	r18,8(sp)
    dff4:	dc400117 	ldw	r17,4(sp)
    dff8:	dc000017 	ldw	r16,0(sp)
    dffc:	dec00804 	addi	sp,sp,32
    e000:	f800283a 	ret
    e004:	20fff41e 	bne	r4,r3,dfd8 <_fpadd_parts+0x1c8>
    e008:	31000015 	stw	r4,0(r6)
    e00c:	98800117 	ldw	r2,4(r19)
    e010:	30800115 	stw	r2,4(r6)
    e014:	98c00217 	ldw	r3,8(r19)
    e018:	30c00215 	stw	r3,8(r6)
    e01c:	98800317 	ldw	r2,12(r19)
    e020:	30800315 	stw	r2,12(r6)
    e024:	98c00417 	ldw	r3,16(r19)
    e028:	30c00415 	stw	r3,16(r6)
    e02c:	98800117 	ldw	r2,4(r19)
    e030:	28c00117 	ldw	r3,4(r5)
    e034:	3027883a 	mov	r19,r6
    e038:	10c4703a 	and	r2,r2,r3
    e03c:	30800115 	stw	r2,4(r6)
    e040:	003fe506 	br	dfd8 <_fpadd_parts+0x1c8>
    e044:	1dc02616 	blt	r3,r23,e0e0 <_fpadd_parts+0x2d0>
    e048:	0023883a 	mov	r17,zero
    e04c:	182f883a 	mov	r23,r3
    e050:	0025883a 	mov	r18,zero
    e054:	003fa806 	br	def8 <_fpadd_parts+0xe8>
    e058:	a827883a 	mov	r19,r21
    e05c:	003fde06 	br	dfd8 <_fpadd_parts+0x1c8>
    e060:	01800044 	movi	r6,1
    e064:	500497fa 	slli	r2,r10,31
    e068:	4808d07a 	srli	r4,r9,1
    e06c:	518ad83a 	srl	r5,r10,r6
    e070:	a2000217 	ldw	r8,8(r20)
    e074:	1108b03a 	or	r4,r2,r4
    e078:	0007883a 	mov	r3,zero
    e07c:	4984703a 	and	r2,r9,r6
    e080:	208cb03a 	or	r6,r4,r2
    e084:	28ceb03a 	or	r7,r5,r3
    e088:	42000044 	addi	r8,r8,1
    e08c:	a027883a 	mov	r19,r20
    e090:	a1c00415 	stw	r7,16(r20)
    e094:	a2000215 	stw	r8,8(r20)
    e098:	a1800315 	stw	r6,12(r20)
    e09c:	003fce06 	br	dfd8 <_fpadd_parts+0x1c8>
    e0a0:	8bc5c83a 	sub	r2,r17,r15
    e0a4:	8889803a 	cmpltu	r4,r17,r2
    e0a8:	9407c83a 	sub	r3,r18,r16
    e0ac:	1909c83a 	sub	r4,r3,r4
    e0b0:	100d883a 	mov	r6,r2
    e0b4:	200f883a 	mov	r7,r4
    e0b8:	003f9906 	br	df20 <_fpadd_parts+0x110>
    e0bc:	8bc5883a 	add	r2,r17,r15
    e0c0:	1449803a 	cmpltu	r4,r2,r17
    e0c4:	9407883a 	add	r3,r18,r16
    e0c8:	20c9883a 	add	r4,r4,r3
    e0cc:	a1400115 	stw	r5,4(r20)
    e0d0:	a5c00215 	stw	r23,8(r20)
    e0d4:	a0800315 	stw	r2,12(r20)
    e0d8:	a1000415 	stw	r4,16(r20)
    e0dc:	003fb606 	br	dfb8 <_fpadd_parts+0x1a8>
    e0e0:	001f883a 	mov	r15,zero
    e0e4:	0021883a 	mov	r16,zero
    e0e8:	003f8306 	br	def8 <_fpadd_parts+0xe8>
    e0ec:	018dc83a 	sub	r6,zero,r6
    e0f0:	003f6706 	br	de90 <_fpadd_parts+0x80>
    e0f4:	00bfff84 	movi	r2,-2
    e0f8:	117faf36 	bltu	r2,r5,dfb8 <_fpadd_parts+0x1a8>
    e0fc:	003f9806 	br	df60 <_fpadd_parts+0x150>
    e100:	0005883a 	mov	r2,zero
    e104:	1189c83a 	sub	r4,r2,r6
    e108:	1105803a 	cmpltu	r2,r2,r4
    e10c:	01cbc83a 	sub	r5,zero,r7
    e110:	2885c83a 	sub	r2,r5,r2
    e114:	01800044 	movi	r6,1
    e118:	a1800115 	stw	r6,4(r20)
    e11c:	a5c00215 	stw	r23,8(r20)
    e120:	a1000315 	stw	r4,12(r20)
    e124:	a0800415 	stw	r2,16(r20)
    e128:	003f8206 	br	df34 <_fpadd_parts+0x124>
    e12c:	203f7226 	beq	r4,zero,def8 <_fpadd_parts+0xe8>
    e130:	35bff804 	addi	r22,r6,-32
    e134:	b9af883a 	add	r23,r23,r6
    e138:	b0003116 	blt	r22,zero,e200 <_fpadd_parts+0x3f0>
    e13c:	959ad83a 	srl	r13,r18,r22
    e140:	001d883a 	mov	r14,zero
    e144:	000f883a 	mov	r7,zero
    e148:	01000044 	movi	r4,1
    e14c:	0011883a 	mov	r8,zero
    e150:	b0002516 	blt	r22,zero,e1e8 <_fpadd_parts+0x3d8>
    e154:	2594983a 	sll	r10,r4,r22
    e158:	0013883a 	mov	r9,zero
    e15c:	00bfffc4 	movi	r2,-1
    e160:	4889883a 	add	r4,r9,r2
    e164:	508b883a 	add	r5,r10,r2
    e168:	224d803a 	cmpltu	r6,r4,r9
    e16c:	314b883a 	add	r5,r6,r5
    e170:	8904703a 	and	r2,r17,r4
    e174:	9146703a 	and	r3,r18,r5
    e178:	10c4b03a 	or	r2,r2,r3
    e17c:	10000226 	beq	r2,zero,e188 <_fpadd_parts+0x378>
    e180:	01c00044 	movi	r7,1
    e184:	0011883a 	mov	r8,zero
    e188:	69e2b03a 	or	r17,r13,r7
    e18c:	7224b03a 	or	r18,r14,r8
    e190:	003f5906 	br	def8 <_fpadd_parts+0xe8>
    e194:	8407883a 	add	r3,r16,r16
    e198:	008007c4 	movi	r2,31
    e19c:	1185c83a 	sub	r2,r2,r6
    e1a0:	1886983a 	sll	r3,r3,r2
    e1a4:	7996d83a 	srl	r11,r15,r6
    e1a8:	8198d83a 	srl	r12,r16,r6
    e1ac:	1ad6b03a 	or	r11,r3,r11
    e1b0:	003f3e06 	br	deac <_fpadd_parts+0x9c>
    e1b4:	2006d07a 	srli	r3,r4,1
    e1b8:	008007c4 	movi	r2,31
    e1bc:	1185c83a 	sub	r2,r2,r6
    e1c0:	1890d83a 	srl	r8,r3,r2
    e1c4:	218e983a 	sll	r7,r4,r6
    e1c8:	003f3e06 	br	dec4 <_fpadd_parts+0xb4>
    e1cc:	113f821e 	bne	r2,r4,dfd8 <_fpadd_parts+0x1c8>
    e1d0:	28c00117 	ldw	r3,4(r5)
    e1d4:	98800117 	ldw	r2,4(r19)
    e1d8:	10ff7f26 	beq	r2,r3,dfd8 <_fpadd_parts+0x1c8>
    e1dc:	04c00074 	movhi	r19,1
    e1e0:	9cc9c804 	addi	r19,r19,10016
    e1e4:	003f7c06 	br	dfd8 <_fpadd_parts+0x1c8>
    e1e8:	2006d07a 	srli	r3,r4,1
    e1ec:	008007c4 	movi	r2,31
    e1f0:	1185c83a 	sub	r2,r2,r6
    e1f4:	1894d83a 	srl	r10,r3,r2
    e1f8:	2192983a 	sll	r9,r4,r6
    e1fc:	003fd706 	br	e15c <_fpadd_parts+0x34c>
    e200:	9487883a 	add	r3,r18,r18
    e204:	008007c4 	movi	r2,31
    e208:	1185c83a 	sub	r2,r2,r6
    e20c:	1886983a 	sll	r3,r3,r2
    e210:	899ad83a 	srl	r13,r17,r6
    e214:	919cd83a 	srl	r14,r18,r6
    e218:	1b5ab03a 	or	r13,r3,r13
    e21c:	003fc906 	br	e144 <_fpadd_parts+0x334>

0000e220 <__subdf3>:
    e220:	deffea04 	addi	sp,sp,-88
    e224:	dcc01415 	stw	r19,80(sp)
    e228:	dcc00404 	addi	r19,sp,16
    e22c:	2011883a 	mov	r8,r4
    e230:	2813883a 	mov	r9,r5
    e234:	dc401315 	stw	r17,76(sp)
    e238:	d809883a 	mov	r4,sp
    e23c:	980b883a 	mov	r5,r19
    e240:	dc400904 	addi	r17,sp,36
    e244:	dfc01515 	stw	ra,84(sp)
    e248:	da400115 	stw	r9,4(sp)
    e24c:	d9c00315 	stw	r7,12(sp)
    e250:	da000015 	stw	r8,0(sp)
    e254:	d9800215 	stw	r6,8(sp)
    e258:	000f1b00 	call	f1b0 <__unpack_d>
    e25c:	d9000204 	addi	r4,sp,8
    e260:	880b883a 	mov	r5,r17
    e264:	000f1b00 	call	f1b0 <__unpack_d>
    e268:	d8800a17 	ldw	r2,40(sp)
    e26c:	880b883a 	mov	r5,r17
    e270:	9809883a 	mov	r4,r19
    e274:	d9800e04 	addi	r6,sp,56
    e278:	1080005c 	xori	r2,r2,1
    e27c:	d8800a15 	stw	r2,40(sp)
    e280:	000de100 	call	de10 <_fpadd_parts>
    e284:	1009883a 	mov	r4,r2
    e288:	0000cb80 	call	cb8 <__pack_d>
    e28c:	dfc01517 	ldw	ra,84(sp)
    e290:	dcc01417 	ldw	r19,80(sp)
    e294:	dc401317 	ldw	r17,76(sp)
    e298:	dec01604 	addi	sp,sp,88
    e29c:	f800283a 	ret

0000e2a0 <__adddf3>:
    e2a0:	deffea04 	addi	sp,sp,-88
    e2a4:	dcc01415 	stw	r19,80(sp)
    e2a8:	dcc00404 	addi	r19,sp,16
    e2ac:	2011883a 	mov	r8,r4
    e2b0:	2813883a 	mov	r9,r5
    e2b4:	dc401315 	stw	r17,76(sp)
    e2b8:	d809883a 	mov	r4,sp
    e2bc:	980b883a 	mov	r5,r19
    e2c0:	dc400904 	addi	r17,sp,36
    e2c4:	dfc01515 	stw	ra,84(sp)
    e2c8:	da400115 	stw	r9,4(sp)
    e2cc:	d9c00315 	stw	r7,12(sp)
    e2d0:	da000015 	stw	r8,0(sp)
    e2d4:	d9800215 	stw	r6,8(sp)
    e2d8:	000f1b00 	call	f1b0 <__unpack_d>
    e2dc:	d9000204 	addi	r4,sp,8
    e2e0:	880b883a 	mov	r5,r17
    e2e4:	000f1b00 	call	f1b0 <__unpack_d>
    e2e8:	d9800e04 	addi	r6,sp,56
    e2ec:	9809883a 	mov	r4,r19
    e2f0:	880b883a 	mov	r5,r17
    e2f4:	000de100 	call	de10 <_fpadd_parts>
    e2f8:	1009883a 	mov	r4,r2
    e2fc:	0000cb80 	call	cb8 <__pack_d>
    e300:	dfc01517 	ldw	ra,84(sp)
    e304:	dcc01417 	ldw	r19,80(sp)
    e308:	dc401317 	ldw	r17,76(sp)
    e30c:	dec01604 	addi	sp,sp,88
    e310:	f800283a 	ret

0000e314 <__muldf3>:
    e314:	deffe004 	addi	sp,sp,-128
    e318:	dc401815 	stw	r17,96(sp)
    e31c:	dc400404 	addi	r17,sp,16
    e320:	2011883a 	mov	r8,r4
    e324:	2813883a 	mov	r9,r5
    e328:	dc001715 	stw	r16,92(sp)
    e32c:	d809883a 	mov	r4,sp
    e330:	880b883a 	mov	r5,r17
    e334:	dc000904 	addi	r16,sp,36
    e338:	dfc01f15 	stw	ra,124(sp)
    e33c:	da400115 	stw	r9,4(sp)
    e340:	d9c00315 	stw	r7,12(sp)
    e344:	da000015 	stw	r8,0(sp)
    e348:	d9800215 	stw	r6,8(sp)
    e34c:	ddc01e15 	stw	r23,120(sp)
    e350:	dd801d15 	stw	r22,116(sp)
    e354:	dd401c15 	stw	r21,112(sp)
    e358:	dd001b15 	stw	r20,108(sp)
    e35c:	dcc01a15 	stw	r19,104(sp)
    e360:	dc801915 	stw	r18,100(sp)
    e364:	000f1b00 	call	f1b0 <__unpack_d>
    e368:	d9000204 	addi	r4,sp,8
    e36c:	800b883a 	mov	r5,r16
    e370:	000f1b00 	call	f1b0 <__unpack_d>
    e374:	d9000417 	ldw	r4,16(sp)
    e378:	00800044 	movi	r2,1
    e37c:	1100102e 	bgeu	r2,r4,e3c0 <__muldf3+0xac>
    e380:	d8c00917 	ldw	r3,36(sp)
    e384:	10c0062e 	bgeu	r2,r3,e3a0 <__muldf3+0x8c>
    e388:	00800104 	movi	r2,4
    e38c:	20800a26 	beq	r4,r2,e3b8 <__muldf3+0xa4>
    e390:	1880cc26 	beq	r3,r2,e6c4 <__muldf3+0x3b0>
    e394:	00800084 	movi	r2,2
    e398:	20800926 	beq	r4,r2,e3c0 <__muldf3+0xac>
    e39c:	1880191e 	bne	r3,r2,e404 <__muldf3+0xf0>
    e3a0:	d8c00a17 	ldw	r3,40(sp)
    e3a4:	d8800517 	ldw	r2,20(sp)
    e3a8:	8009883a 	mov	r4,r16
    e3ac:	10c4c03a 	cmpne	r2,r2,r3
    e3b0:	d8800a15 	stw	r2,40(sp)
    e3b4:	00000706 	br	e3d4 <__muldf3+0xc0>
    e3b8:	00800084 	movi	r2,2
    e3bc:	1880c326 	beq	r3,r2,e6cc <__muldf3+0x3b8>
    e3c0:	d8800517 	ldw	r2,20(sp)
    e3c4:	d8c00a17 	ldw	r3,40(sp)
    e3c8:	8809883a 	mov	r4,r17
    e3cc:	10c4c03a 	cmpne	r2,r2,r3
    e3d0:	d8800515 	stw	r2,20(sp)
    e3d4:	0000cb80 	call	cb8 <__pack_d>
    e3d8:	dfc01f17 	ldw	ra,124(sp)
    e3dc:	ddc01e17 	ldw	r23,120(sp)
    e3e0:	dd801d17 	ldw	r22,116(sp)
    e3e4:	dd401c17 	ldw	r21,112(sp)
    e3e8:	dd001b17 	ldw	r20,108(sp)
    e3ec:	dcc01a17 	ldw	r19,104(sp)
    e3f0:	dc801917 	ldw	r18,100(sp)
    e3f4:	dc401817 	ldw	r17,96(sp)
    e3f8:	dc001717 	ldw	r16,92(sp)
    e3fc:	dec02004 	addi	sp,sp,128
    e400:	f800283a 	ret
    e404:	dd800717 	ldw	r22,28(sp)
    e408:	dc800c17 	ldw	r18,48(sp)
    e40c:	002b883a 	mov	r21,zero
    e410:	0023883a 	mov	r17,zero
    e414:	a80b883a 	mov	r5,r21
    e418:	b00d883a 	mov	r6,r22
    e41c:	880f883a 	mov	r7,r17
    e420:	ddc00817 	ldw	r23,32(sp)
    e424:	dcc00d17 	ldw	r19,52(sp)
    e428:	9009883a 	mov	r4,r18
    e42c:	000d0580 	call	d058 <__muldi3>
    e430:	001b883a 	mov	r13,zero
    e434:	680f883a 	mov	r7,r13
    e438:	b009883a 	mov	r4,r22
    e43c:	000b883a 	mov	r5,zero
    e440:	980d883a 	mov	r6,r19
    e444:	b82d883a 	mov	r22,r23
    e448:	002f883a 	mov	r23,zero
    e44c:	db401615 	stw	r13,88(sp)
    e450:	d8801315 	stw	r2,76(sp)
    e454:	d8c01415 	stw	r3,80(sp)
    e458:	dcc01515 	stw	r19,84(sp)
    e45c:	000d0580 	call	d058 <__muldi3>
    e460:	b00d883a 	mov	r6,r22
    e464:	000b883a 	mov	r5,zero
    e468:	9009883a 	mov	r4,r18
    e46c:	b80f883a 	mov	r7,r23
    e470:	1021883a 	mov	r16,r2
    e474:	1823883a 	mov	r17,r3
    e478:	000d0580 	call	d058 <__muldi3>
    e47c:	8085883a 	add	r2,r16,r2
    e480:	140d803a 	cmpltu	r6,r2,r16
    e484:	88c7883a 	add	r3,r17,r3
    e488:	30cd883a 	add	r6,r6,r3
    e48c:	1029883a 	mov	r20,r2
    e490:	302b883a 	mov	r21,r6
    e494:	da801317 	ldw	r10,76(sp)
    e498:	dac01417 	ldw	r11,80(sp)
    e49c:	db001517 	ldw	r12,84(sp)
    e4a0:	db401617 	ldw	r13,88(sp)
    e4a4:	3440612e 	bgeu	r6,r17,e62c <__muldf3+0x318>
    e4a8:	0009883a 	mov	r4,zero
    e4ac:	5105883a 	add	r2,r10,r4
    e4b0:	128d803a 	cmpltu	r6,r2,r10
    e4b4:	5d07883a 	add	r3,r11,r20
    e4b8:	30cd883a 	add	r6,r6,r3
    e4bc:	0021883a 	mov	r16,zero
    e4c0:	04400044 	movi	r17,1
    e4c4:	1025883a 	mov	r18,r2
    e4c8:	3027883a 	mov	r19,r6
    e4cc:	32c06236 	bltu	r6,r11,e658 <__muldf3+0x344>
    e4d0:	59807a26 	beq	r11,r6,e6bc <__muldf3+0x3a8>
    e4d4:	680b883a 	mov	r5,r13
    e4d8:	b80f883a 	mov	r7,r23
    e4dc:	6009883a 	mov	r4,r12
    e4e0:	b00d883a 	mov	r6,r22
    e4e4:	000d0580 	call	d058 <__muldi3>
    e4e8:	1009883a 	mov	r4,r2
    e4ec:	000f883a 	mov	r7,zero
    e4f0:	1545883a 	add	r2,r2,r21
    e4f4:	1111803a 	cmpltu	r8,r2,r4
    e4f8:	19c7883a 	add	r3,r3,r7
    e4fc:	40c7883a 	add	r3,r8,r3
    e500:	88cb883a 	add	r5,r17,r3
    e504:	d8c00617 	ldw	r3,24(sp)
    e508:	8089883a 	add	r4,r16,r2
    e50c:	d8800b17 	ldw	r2,44(sp)
    e510:	18c00104 	addi	r3,r3,4
    e514:	240d803a 	cmpltu	r6,r4,r16
    e518:	10c7883a 	add	r3,r2,r3
    e51c:	2013883a 	mov	r9,r4
    e520:	d8800a17 	ldw	r2,40(sp)
    e524:	d9000517 	ldw	r4,20(sp)
    e528:	314d883a 	add	r6,r6,r5
    e52c:	3015883a 	mov	r10,r6
    e530:	2088c03a 	cmpne	r4,r4,r2
    e534:	00880034 	movhi	r2,8192
    e538:	10bfffc4 	addi	r2,r2,-1
    e53c:	d9000f15 	stw	r4,60(sp)
    e540:	d8c01015 	stw	r3,64(sp)
    e544:	1180162e 	bgeu	r2,r6,e5a0 <__muldf3+0x28c>
    e548:	1811883a 	mov	r8,r3
    e54c:	101f883a 	mov	r15,r2
    e550:	980497fa 	slli	r2,r19,31
    e554:	9016d07a 	srli	r11,r18,1
    e558:	500697fa 	slli	r3,r10,31
    e55c:	480cd07a 	srli	r6,r9,1
    e560:	500ed07a 	srli	r7,r10,1
    e564:	12d6b03a 	or	r11,r2,r11
    e568:	00800044 	movi	r2,1
    e56c:	198cb03a 	or	r6,r3,r6
    e570:	4888703a 	and	r4,r9,r2
    e574:	9818d07a 	srli	r12,r19,1
    e578:	001b883a 	mov	r13,zero
    e57c:	03a00034 	movhi	r14,32768
    e580:	3013883a 	mov	r9,r6
    e584:	3815883a 	mov	r10,r7
    e588:	4091883a 	add	r8,r8,r2
    e58c:	20000226 	beq	r4,zero,e598 <__muldf3+0x284>
    e590:	5b64b03a 	or	r18,r11,r13
    e594:	63a6b03a 	or	r19,r12,r14
    e598:	7abfed36 	bltu	r15,r10,e550 <__muldf3+0x23c>
    e59c:	da001015 	stw	r8,64(sp)
    e5a0:	00840034 	movhi	r2,4096
    e5a4:	10bfffc4 	addi	r2,r2,-1
    e5a8:	12801436 	bltu	r2,r10,e5fc <__muldf3+0x2e8>
    e5ac:	da001017 	ldw	r8,64(sp)
    e5b0:	101f883a 	mov	r15,r2
    e5b4:	4a45883a 	add	r2,r9,r9
    e5b8:	124d803a 	cmpltu	r6,r2,r9
    e5bc:	5287883a 	add	r3,r10,r10
    e5c0:	9497883a 	add	r11,r18,r18
    e5c4:	5c8f803a 	cmpltu	r7,r11,r18
    e5c8:	9cd9883a 	add	r12,r19,r19
    e5cc:	01000044 	movi	r4,1
    e5d0:	30cd883a 	add	r6,r6,r3
    e5d4:	3b0f883a 	add	r7,r7,r12
    e5d8:	423fffc4 	addi	r8,r8,-1
    e5dc:	1013883a 	mov	r9,r2
    e5e0:	3015883a 	mov	r10,r6
    e5e4:	111ab03a 	or	r13,r2,r4
    e5e8:	98003016 	blt	r19,zero,e6ac <__muldf3+0x398>
    e5ec:	5825883a 	mov	r18,r11
    e5f0:	3827883a 	mov	r19,r7
    e5f4:	7abfef2e 	bgeu	r15,r10,e5b4 <__muldf3+0x2a0>
    e5f8:	da001015 	stw	r8,64(sp)
    e5fc:	00803fc4 	movi	r2,255
    e600:	488e703a 	and	r7,r9,r2
    e604:	00802004 	movi	r2,128
    e608:	0007883a 	mov	r3,zero
    e60c:	0011883a 	mov	r8,zero
    e610:	38801826 	beq	r7,r2,e674 <__muldf3+0x360>
    e614:	008000c4 	movi	r2,3
    e618:	d9000e04 	addi	r4,sp,56
    e61c:	da801215 	stw	r10,72(sp)
    e620:	d8800e15 	stw	r2,56(sp)
    e624:	da401115 	stw	r9,68(sp)
    e628:	003f6a06 	br	e3d4 <__muldf3+0xc0>
    e62c:	89802126 	beq	r17,r6,e6b4 <__muldf3+0x3a0>
    e630:	0009883a 	mov	r4,zero
    e634:	5105883a 	add	r2,r10,r4
    e638:	128d803a 	cmpltu	r6,r2,r10
    e63c:	5d07883a 	add	r3,r11,r20
    e640:	30cd883a 	add	r6,r6,r3
    e644:	0021883a 	mov	r16,zero
    e648:	0023883a 	mov	r17,zero
    e64c:	1025883a 	mov	r18,r2
    e650:	3027883a 	mov	r19,r6
    e654:	32ff9e2e 	bgeu	r6,r11,e4d0 <__muldf3+0x1bc>
    e658:	00800044 	movi	r2,1
    e65c:	8089883a 	add	r4,r16,r2
    e660:	240d803a 	cmpltu	r6,r4,r16
    e664:	344d883a 	add	r6,r6,r17
    e668:	2021883a 	mov	r16,r4
    e66c:	3023883a 	mov	r17,r6
    e670:	003f9806 	br	e4d4 <__muldf3+0x1c0>
    e674:	403fe71e 	bne	r8,zero,e614 <__muldf3+0x300>
    e678:	01004004 	movi	r4,256
    e67c:	4904703a 	and	r2,r9,r4
    e680:	10c4b03a 	or	r2,r2,r3
    e684:	103fe31e 	bne	r2,zero,e614 <__muldf3+0x300>
    e688:	94c4b03a 	or	r2,r18,r19
    e68c:	103fe126 	beq	r2,zero,e614 <__muldf3+0x300>
    e690:	49c5883a 	add	r2,r9,r7
    e694:	1251803a 	cmpltu	r8,r2,r9
    e698:	4291883a 	add	r8,r8,r10
    e69c:	013fc004 	movi	r4,-256
    e6a0:	1112703a 	and	r9,r2,r4
    e6a4:	4015883a 	mov	r10,r8
    e6a8:	003fda06 	br	e614 <__muldf3+0x300>
    e6ac:	6813883a 	mov	r9,r13
    e6b0:	003fce06 	br	e5ec <__muldf3+0x2d8>
    e6b4:	143f7c36 	bltu	r2,r16,e4a8 <__muldf3+0x194>
    e6b8:	003fdd06 	br	e630 <__muldf3+0x31c>
    e6bc:	12bf852e 	bgeu	r2,r10,e4d4 <__muldf3+0x1c0>
    e6c0:	003fe506 	br	e658 <__muldf3+0x344>
    e6c4:	00800084 	movi	r2,2
    e6c8:	20bf351e 	bne	r4,r2,e3a0 <__muldf3+0x8c>
    e6cc:	01000074 	movhi	r4,1
    e6d0:	2109c804 	addi	r4,r4,10016
    e6d4:	003f3f06 	br	e3d4 <__muldf3+0xc0>

0000e6d8 <__divdf3>:
    e6d8:	deffed04 	addi	sp,sp,-76
    e6dc:	dcc01115 	stw	r19,68(sp)
    e6e0:	dcc00404 	addi	r19,sp,16
    e6e4:	2011883a 	mov	r8,r4
    e6e8:	2813883a 	mov	r9,r5
    e6ec:	dc000e15 	stw	r16,56(sp)
    e6f0:	d809883a 	mov	r4,sp
    e6f4:	980b883a 	mov	r5,r19
    e6f8:	dc000904 	addi	r16,sp,36
    e6fc:	dfc01215 	stw	ra,72(sp)
    e700:	da400115 	stw	r9,4(sp)
    e704:	d9c00315 	stw	r7,12(sp)
    e708:	da000015 	stw	r8,0(sp)
    e70c:	d9800215 	stw	r6,8(sp)
    e710:	dc801015 	stw	r18,64(sp)
    e714:	dc400f15 	stw	r17,60(sp)
    e718:	000f1b00 	call	f1b0 <__unpack_d>
    e71c:	d9000204 	addi	r4,sp,8
    e720:	800b883a 	mov	r5,r16
    e724:	000f1b00 	call	f1b0 <__unpack_d>
    e728:	d9000417 	ldw	r4,16(sp)
    e72c:	00800044 	movi	r2,1
    e730:	11000b2e 	bgeu	r2,r4,e760 <__divdf3+0x88>
    e734:	d9400917 	ldw	r5,36(sp)
    e738:	1140762e 	bgeu	r2,r5,e914 <__divdf3+0x23c>
    e73c:	d8800517 	ldw	r2,20(sp)
    e740:	d8c00a17 	ldw	r3,40(sp)
    e744:	01800104 	movi	r6,4
    e748:	10c4f03a 	xor	r2,r2,r3
    e74c:	d8800515 	stw	r2,20(sp)
    e750:	21800226 	beq	r4,r6,e75c <__divdf3+0x84>
    e754:	00800084 	movi	r2,2
    e758:	2080141e 	bne	r4,r2,e7ac <__divdf3+0xd4>
    e75c:	29000926 	beq	r5,r4,e784 <__divdf3+0xac>
    e760:	9809883a 	mov	r4,r19
    e764:	0000cb80 	call	cb8 <__pack_d>
    e768:	dfc01217 	ldw	ra,72(sp)
    e76c:	dcc01117 	ldw	r19,68(sp)
    e770:	dc801017 	ldw	r18,64(sp)
    e774:	dc400f17 	ldw	r17,60(sp)
    e778:	dc000e17 	ldw	r16,56(sp)
    e77c:	dec01304 	addi	sp,sp,76
    e780:	f800283a 	ret
    e784:	01000074 	movhi	r4,1
    e788:	2109c804 	addi	r4,r4,10016
    e78c:	0000cb80 	call	cb8 <__pack_d>
    e790:	dfc01217 	ldw	ra,72(sp)
    e794:	dcc01117 	ldw	r19,68(sp)
    e798:	dc801017 	ldw	r18,64(sp)
    e79c:	dc400f17 	ldw	r17,60(sp)
    e7a0:	dc000e17 	ldw	r16,56(sp)
    e7a4:	dec01304 	addi	sp,sp,76
    e7a8:	f800283a 	ret
    e7ac:	29805b26 	beq	r5,r6,e91c <__divdf3+0x244>
    e7b0:	28802d26 	beq	r5,r2,e868 <__divdf3+0x190>
    e7b4:	d8c00617 	ldw	r3,24(sp)
    e7b8:	d8800b17 	ldw	r2,44(sp)
    e7bc:	d9c00817 	ldw	r7,32(sp)
    e7c0:	dc400d17 	ldw	r17,52(sp)
    e7c4:	188bc83a 	sub	r5,r3,r2
    e7c8:	d9800717 	ldw	r6,28(sp)
    e7cc:	dc000c17 	ldw	r16,48(sp)
    e7d0:	d9400615 	stw	r5,24(sp)
    e7d4:	3c403836 	bltu	r7,r17,e8b8 <__divdf3+0x1e0>
    e7d8:	89c03626 	beq	r17,r7,e8b4 <__divdf3+0x1dc>
    e7dc:	0015883a 	mov	r10,zero
    e7e0:	001d883a 	mov	r14,zero
    e7e4:	02c40034 	movhi	r11,4096
    e7e8:	001f883a 	mov	r15,zero
    e7ec:	003f883a 	mov	ra,zero
    e7f0:	04800f44 	movi	r18,61
    e7f4:	00000f06 	br	e834 <__divdf3+0x15c>
    e7f8:	601d883a 	mov	r14,r12
    e7fc:	681f883a 	mov	r15,r13
    e800:	400d883a 	mov	r6,r8
    e804:	100f883a 	mov	r7,r2
    e808:	3191883a 	add	r8,r6,r6
    e80c:	5808d07a 	srli	r4,r11,1
    e810:	4185803a 	cmpltu	r2,r8,r6
    e814:	39d3883a 	add	r9,r7,r7
    e818:	28c6b03a 	or	r3,r5,r3
    e81c:	1245883a 	add	r2,r2,r9
    e820:	1815883a 	mov	r10,r3
    e824:	2017883a 	mov	r11,r4
    e828:	400d883a 	mov	r6,r8
    e82c:	100f883a 	mov	r7,r2
    e830:	fc801726 	beq	ra,r18,e890 <__divdf3+0x1b8>
    e834:	580a97fa 	slli	r5,r11,31
    e838:	5006d07a 	srli	r3,r10,1
    e83c:	ffc00044 	addi	ra,ra,1
    e840:	3c7ff136 	bltu	r7,r17,e808 <__divdf3+0x130>
    e844:	3411c83a 	sub	r8,r6,r16
    e848:	3205803a 	cmpltu	r2,r6,r8
    e84c:	3c53c83a 	sub	r9,r7,r17
    e850:	7298b03a 	or	r12,r14,r10
    e854:	7adab03a 	or	r13,r15,r11
    e858:	4885c83a 	sub	r2,r9,r2
    e85c:	89ffe61e 	bne	r17,r7,e7f8 <__divdf3+0x120>
    e860:	343fe936 	bltu	r6,r16,e808 <__divdf3+0x130>
    e864:	003fe406 	br	e7f8 <__divdf3+0x120>
    e868:	9809883a 	mov	r4,r19
    e86c:	d9800415 	stw	r6,16(sp)
    e870:	0000cb80 	call	cb8 <__pack_d>
    e874:	dfc01217 	ldw	ra,72(sp)
    e878:	dcc01117 	ldw	r19,68(sp)
    e87c:	dc801017 	ldw	r18,64(sp)
    e880:	dc400f17 	ldw	r17,60(sp)
    e884:	dc000e17 	ldw	r16,56(sp)
    e888:	dec01304 	addi	sp,sp,76
    e88c:	f800283a 	ret
    e890:	00803fc4 	movi	r2,255
    e894:	7090703a 	and	r8,r14,r2
    e898:	00802004 	movi	r2,128
    e89c:	0007883a 	mov	r3,zero
    e8a0:	0013883a 	mov	r9,zero
    e8a4:	40800d26 	beq	r8,r2,e8dc <__divdf3+0x204>
    e8a8:	dbc00815 	stw	r15,32(sp)
    e8ac:	db800715 	stw	r14,28(sp)
    e8b0:	003fab06 	br	e760 <__divdf3+0x88>
    e8b4:	343fc92e 	bgeu	r6,r16,e7dc <__divdf3+0x104>
    e8b8:	3185883a 	add	r2,r6,r6
    e8bc:	1189803a 	cmpltu	r4,r2,r6
    e8c0:	39c7883a 	add	r3,r7,r7
    e8c4:	20c9883a 	add	r4,r4,r3
    e8c8:	297fffc4 	addi	r5,r5,-1
    e8cc:	100d883a 	mov	r6,r2
    e8d0:	200f883a 	mov	r7,r4
    e8d4:	d9400615 	stw	r5,24(sp)
    e8d8:	003fc006 	br	e7dc <__divdf3+0x104>
    e8dc:	483ff21e 	bne	r9,zero,e8a8 <__divdf3+0x1d0>
    e8e0:	01004004 	movi	r4,256
    e8e4:	7104703a 	and	r2,r14,r4
    e8e8:	10c4b03a 	or	r2,r2,r3
    e8ec:	103fee1e 	bne	r2,zero,e8a8 <__divdf3+0x1d0>
    e8f0:	31c4b03a 	or	r2,r6,r7
    e8f4:	103fec26 	beq	r2,zero,e8a8 <__divdf3+0x1d0>
    e8f8:	7205883a 	add	r2,r14,r8
    e8fc:	1391803a 	cmpltu	r8,r2,r14
    e900:	43d1883a 	add	r8,r8,r15
    e904:	013fc004 	movi	r4,-256
    e908:	111c703a 	and	r14,r2,r4
    e90c:	401f883a 	mov	r15,r8
    e910:	003fe506 	br	e8a8 <__divdf3+0x1d0>
    e914:	8009883a 	mov	r4,r16
    e918:	003f9206 	br	e764 <__divdf3+0x8c>
    e91c:	9809883a 	mov	r4,r19
    e920:	d8000715 	stw	zero,28(sp)
    e924:	d8000815 	stw	zero,32(sp)
    e928:	d8000615 	stw	zero,24(sp)
    e92c:	003f8d06 	br	e764 <__divdf3+0x8c>

0000e930 <__eqdf2>:
    e930:	deffef04 	addi	sp,sp,-68
    e934:	dc400f15 	stw	r17,60(sp)
    e938:	dc400404 	addi	r17,sp,16
    e93c:	2005883a 	mov	r2,r4
    e940:	2807883a 	mov	r3,r5
    e944:	dc000e15 	stw	r16,56(sp)
    e948:	d809883a 	mov	r4,sp
    e94c:	880b883a 	mov	r5,r17
    e950:	dc000904 	addi	r16,sp,36
    e954:	d8c00115 	stw	r3,4(sp)
    e958:	d8800015 	stw	r2,0(sp)
    e95c:	d9800215 	stw	r6,8(sp)
    e960:	dfc01015 	stw	ra,64(sp)
    e964:	d9c00315 	stw	r7,12(sp)
    e968:	000f1b00 	call	f1b0 <__unpack_d>
    e96c:	d9000204 	addi	r4,sp,8
    e970:	800b883a 	mov	r5,r16
    e974:	000f1b00 	call	f1b0 <__unpack_d>
    e978:	d8800417 	ldw	r2,16(sp)
    e97c:	00c00044 	movi	r3,1
    e980:	180d883a 	mov	r6,r3
    e984:	1880062e 	bgeu	r3,r2,e9a0 <__eqdf2+0x70>
    e988:	d8800917 	ldw	r2,36(sp)
    e98c:	8809883a 	mov	r4,r17
    e990:	800b883a 	mov	r5,r16
    e994:	1880022e 	bgeu	r3,r2,e9a0 <__eqdf2+0x70>
    e998:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    e99c:	100d883a 	mov	r6,r2
    e9a0:	3005883a 	mov	r2,r6
    e9a4:	dfc01017 	ldw	ra,64(sp)
    e9a8:	dc400f17 	ldw	r17,60(sp)
    e9ac:	dc000e17 	ldw	r16,56(sp)
    e9b0:	dec01104 	addi	sp,sp,68
    e9b4:	f800283a 	ret

0000e9b8 <__nedf2>:
    e9b8:	deffef04 	addi	sp,sp,-68
    e9bc:	dc400f15 	stw	r17,60(sp)
    e9c0:	dc400404 	addi	r17,sp,16
    e9c4:	2005883a 	mov	r2,r4
    e9c8:	2807883a 	mov	r3,r5
    e9cc:	dc000e15 	stw	r16,56(sp)
    e9d0:	d809883a 	mov	r4,sp
    e9d4:	880b883a 	mov	r5,r17
    e9d8:	dc000904 	addi	r16,sp,36
    e9dc:	d8c00115 	stw	r3,4(sp)
    e9e0:	d8800015 	stw	r2,0(sp)
    e9e4:	d9800215 	stw	r6,8(sp)
    e9e8:	dfc01015 	stw	ra,64(sp)
    e9ec:	d9c00315 	stw	r7,12(sp)
    e9f0:	000f1b00 	call	f1b0 <__unpack_d>
    e9f4:	d9000204 	addi	r4,sp,8
    e9f8:	800b883a 	mov	r5,r16
    e9fc:	000f1b00 	call	f1b0 <__unpack_d>
    ea00:	d8800417 	ldw	r2,16(sp)
    ea04:	00c00044 	movi	r3,1
    ea08:	180d883a 	mov	r6,r3
    ea0c:	1880062e 	bgeu	r3,r2,ea28 <__nedf2+0x70>
    ea10:	d8800917 	ldw	r2,36(sp)
    ea14:	8809883a 	mov	r4,r17
    ea18:	800b883a 	mov	r5,r16
    ea1c:	1880022e 	bgeu	r3,r2,ea28 <__nedf2+0x70>
    ea20:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    ea24:	100d883a 	mov	r6,r2
    ea28:	3005883a 	mov	r2,r6
    ea2c:	dfc01017 	ldw	ra,64(sp)
    ea30:	dc400f17 	ldw	r17,60(sp)
    ea34:	dc000e17 	ldw	r16,56(sp)
    ea38:	dec01104 	addi	sp,sp,68
    ea3c:	f800283a 	ret

0000ea40 <__gtdf2>:
    ea40:	deffef04 	addi	sp,sp,-68
    ea44:	dc400f15 	stw	r17,60(sp)
    ea48:	dc400404 	addi	r17,sp,16
    ea4c:	2005883a 	mov	r2,r4
    ea50:	2807883a 	mov	r3,r5
    ea54:	dc000e15 	stw	r16,56(sp)
    ea58:	d809883a 	mov	r4,sp
    ea5c:	880b883a 	mov	r5,r17
    ea60:	dc000904 	addi	r16,sp,36
    ea64:	d8c00115 	stw	r3,4(sp)
    ea68:	d8800015 	stw	r2,0(sp)
    ea6c:	d9800215 	stw	r6,8(sp)
    ea70:	dfc01015 	stw	ra,64(sp)
    ea74:	d9c00315 	stw	r7,12(sp)
    ea78:	000f1b00 	call	f1b0 <__unpack_d>
    ea7c:	d9000204 	addi	r4,sp,8
    ea80:	800b883a 	mov	r5,r16
    ea84:	000f1b00 	call	f1b0 <__unpack_d>
    ea88:	d8800417 	ldw	r2,16(sp)
    ea8c:	00c00044 	movi	r3,1
    ea90:	01bfffc4 	movi	r6,-1
    ea94:	1880062e 	bgeu	r3,r2,eab0 <__gtdf2+0x70>
    ea98:	d8800917 	ldw	r2,36(sp)
    ea9c:	8809883a 	mov	r4,r17
    eaa0:	800b883a 	mov	r5,r16
    eaa4:	1880022e 	bgeu	r3,r2,eab0 <__gtdf2+0x70>
    eaa8:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    eaac:	100d883a 	mov	r6,r2
    eab0:	3005883a 	mov	r2,r6
    eab4:	dfc01017 	ldw	ra,64(sp)
    eab8:	dc400f17 	ldw	r17,60(sp)
    eabc:	dc000e17 	ldw	r16,56(sp)
    eac0:	dec01104 	addi	sp,sp,68
    eac4:	f800283a 	ret

0000eac8 <__gedf2>:
    eac8:	deffef04 	addi	sp,sp,-68
    eacc:	dc400f15 	stw	r17,60(sp)
    ead0:	dc400404 	addi	r17,sp,16
    ead4:	2005883a 	mov	r2,r4
    ead8:	2807883a 	mov	r3,r5
    eadc:	dc000e15 	stw	r16,56(sp)
    eae0:	d809883a 	mov	r4,sp
    eae4:	880b883a 	mov	r5,r17
    eae8:	dc000904 	addi	r16,sp,36
    eaec:	d8c00115 	stw	r3,4(sp)
    eaf0:	d8800015 	stw	r2,0(sp)
    eaf4:	d9800215 	stw	r6,8(sp)
    eaf8:	dfc01015 	stw	ra,64(sp)
    eafc:	d9c00315 	stw	r7,12(sp)
    eb00:	000f1b00 	call	f1b0 <__unpack_d>
    eb04:	d9000204 	addi	r4,sp,8
    eb08:	800b883a 	mov	r5,r16
    eb0c:	000f1b00 	call	f1b0 <__unpack_d>
    eb10:	d8800417 	ldw	r2,16(sp)
    eb14:	00c00044 	movi	r3,1
    eb18:	01bfffc4 	movi	r6,-1
    eb1c:	1880062e 	bgeu	r3,r2,eb38 <__gedf2+0x70>
    eb20:	d8800917 	ldw	r2,36(sp)
    eb24:	8809883a 	mov	r4,r17
    eb28:	800b883a 	mov	r5,r16
    eb2c:	1880022e 	bgeu	r3,r2,eb38 <__gedf2+0x70>
    eb30:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    eb34:	100d883a 	mov	r6,r2
    eb38:	3005883a 	mov	r2,r6
    eb3c:	dfc01017 	ldw	ra,64(sp)
    eb40:	dc400f17 	ldw	r17,60(sp)
    eb44:	dc000e17 	ldw	r16,56(sp)
    eb48:	dec01104 	addi	sp,sp,68
    eb4c:	f800283a 	ret

0000eb50 <__ltdf2>:
    eb50:	deffef04 	addi	sp,sp,-68
    eb54:	dc400f15 	stw	r17,60(sp)
    eb58:	dc400404 	addi	r17,sp,16
    eb5c:	2005883a 	mov	r2,r4
    eb60:	2807883a 	mov	r3,r5
    eb64:	dc000e15 	stw	r16,56(sp)
    eb68:	d809883a 	mov	r4,sp
    eb6c:	880b883a 	mov	r5,r17
    eb70:	dc000904 	addi	r16,sp,36
    eb74:	d8c00115 	stw	r3,4(sp)
    eb78:	d8800015 	stw	r2,0(sp)
    eb7c:	d9800215 	stw	r6,8(sp)
    eb80:	dfc01015 	stw	ra,64(sp)
    eb84:	d9c00315 	stw	r7,12(sp)
    eb88:	000f1b00 	call	f1b0 <__unpack_d>
    eb8c:	d9000204 	addi	r4,sp,8
    eb90:	800b883a 	mov	r5,r16
    eb94:	000f1b00 	call	f1b0 <__unpack_d>
    eb98:	d8800417 	ldw	r2,16(sp)
    eb9c:	00c00044 	movi	r3,1
    eba0:	180d883a 	mov	r6,r3
    eba4:	1880062e 	bgeu	r3,r2,ebc0 <__ltdf2+0x70>
    eba8:	d8800917 	ldw	r2,36(sp)
    ebac:	8809883a 	mov	r4,r17
    ebb0:	800b883a 	mov	r5,r16
    ebb4:	1880022e 	bgeu	r3,r2,ebc0 <__ltdf2+0x70>
    ebb8:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    ebbc:	100d883a 	mov	r6,r2
    ebc0:	3005883a 	mov	r2,r6
    ebc4:	dfc01017 	ldw	ra,64(sp)
    ebc8:	dc400f17 	ldw	r17,60(sp)
    ebcc:	dc000e17 	ldw	r16,56(sp)
    ebd0:	dec01104 	addi	sp,sp,68
    ebd4:	f800283a 	ret

0000ebd8 <__ledf2>:
    ebd8:	deffef04 	addi	sp,sp,-68
    ebdc:	dc400f15 	stw	r17,60(sp)
    ebe0:	dc400404 	addi	r17,sp,16
    ebe4:	2005883a 	mov	r2,r4
    ebe8:	2807883a 	mov	r3,r5
    ebec:	dc000e15 	stw	r16,56(sp)
    ebf0:	d809883a 	mov	r4,sp
    ebf4:	880b883a 	mov	r5,r17
    ebf8:	dc000904 	addi	r16,sp,36
    ebfc:	d8c00115 	stw	r3,4(sp)
    ec00:	d8800015 	stw	r2,0(sp)
    ec04:	d9800215 	stw	r6,8(sp)
    ec08:	dfc01015 	stw	ra,64(sp)
    ec0c:	d9c00315 	stw	r7,12(sp)
    ec10:	000f1b00 	call	f1b0 <__unpack_d>
    ec14:	d9000204 	addi	r4,sp,8
    ec18:	800b883a 	mov	r5,r16
    ec1c:	000f1b00 	call	f1b0 <__unpack_d>
    ec20:	d8800417 	ldw	r2,16(sp)
    ec24:	00c00044 	movi	r3,1
    ec28:	180d883a 	mov	r6,r3
    ec2c:	1880062e 	bgeu	r3,r2,ec48 <__ledf2+0x70>
    ec30:	d8800917 	ldw	r2,36(sp)
    ec34:	8809883a 	mov	r4,r17
    ec38:	800b883a 	mov	r5,r16
    ec3c:	1880022e 	bgeu	r3,r2,ec48 <__ledf2+0x70>
    ec40:	000f2e80 	call	f2e8 <__fpcmp_parts_d>
    ec44:	100d883a 	mov	r6,r2
    ec48:	3005883a 	mov	r2,r6
    ec4c:	dfc01017 	ldw	ra,64(sp)
    ec50:	dc400f17 	ldw	r17,60(sp)
    ec54:	dc000e17 	ldw	r16,56(sp)
    ec58:	dec01104 	addi	sp,sp,68
    ec5c:	f800283a 	ret

0000ec60 <__floatsidf>:
    ec60:	2006d7fa 	srli	r3,r4,31
    ec64:	defff604 	addi	sp,sp,-40
    ec68:	008000c4 	movi	r2,3
    ec6c:	dfc00915 	stw	ra,36(sp)
    ec70:	dcc00815 	stw	r19,32(sp)
    ec74:	dc800715 	stw	r18,28(sp)
    ec78:	dc400615 	stw	r17,24(sp)
    ec7c:	dc000515 	stw	r16,20(sp)
    ec80:	d8800015 	stw	r2,0(sp)
    ec84:	d8c00115 	stw	r3,4(sp)
    ec88:	20000f1e 	bne	r4,zero,ecc8 <__floatsidf+0x68>
    ec8c:	00800084 	movi	r2,2
    ec90:	d8800015 	stw	r2,0(sp)
    ec94:	d809883a 	mov	r4,sp
    ec98:	0000cb80 	call	cb8 <__pack_d>
    ec9c:	1009883a 	mov	r4,r2
    eca0:	180b883a 	mov	r5,r3
    eca4:	2005883a 	mov	r2,r4
    eca8:	2807883a 	mov	r3,r5
    ecac:	dfc00917 	ldw	ra,36(sp)
    ecb0:	dcc00817 	ldw	r19,32(sp)
    ecb4:	dc800717 	ldw	r18,28(sp)
    ecb8:	dc400617 	ldw	r17,24(sp)
    ecbc:	dc000517 	ldw	r16,20(sp)
    ecc0:	dec00a04 	addi	sp,sp,40
    ecc4:	f800283a 	ret
    ecc8:	00800f04 	movi	r2,60
    eccc:	1807003a 	cmpeq	r3,r3,zero
    ecd0:	d8800215 	stw	r2,8(sp)
    ecd4:	18001126 	beq	r3,zero,ed1c <__floatsidf+0xbc>
    ecd8:	0027883a 	mov	r19,zero
    ecdc:	2025883a 	mov	r18,r4
    ece0:	d9000315 	stw	r4,12(sp)
    ece4:	dcc00415 	stw	r19,16(sp)
    ece8:	00009680 	call	968 <__clzsi2>
    ecec:	11000744 	addi	r4,r2,29
    ecf0:	013fe80e 	bge	zero,r4,ec94 <__floatsidf+0x34>
    ecf4:	10bfff44 	addi	r2,r2,-3
    ecf8:	10000c16 	blt	r2,zero,ed2c <__floatsidf+0xcc>
    ecfc:	90a2983a 	sll	r17,r18,r2
    ed00:	0021883a 	mov	r16,zero
    ed04:	d8800217 	ldw	r2,8(sp)
    ed08:	dc400415 	stw	r17,16(sp)
    ed0c:	dc000315 	stw	r16,12(sp)
    ed10:	1105c83a 	sub	r2,r2,r4
    ed14:	d8800215 	stw	r2,8(sp)
    ed18:	003fde06 	br	ec94 <__floatsidf+0x34>
    ed1c:	00a00034 	movhi	r2,32768
    ed20:	20800a26 	beq	r4,r2,ed4c <__floatsidf+0xec>
    ed24:	0109c83a 	sub	r4,zero,r4
    ed28:	003feb06 	br	ecd8 <__floatsidf+0x78>
    ed2c:	9006d07a 	srli	r3,r18,1
    ed30:	008007c4 	movi	r2,31
    ed34:	1105c83a 	sub	r2,r2,r4
    ed38:	1886d83a 	srl	r3,r3,r2
    ed3c:	9922983a 	sll	r17,r19,r4
    ed40:	9120983a 	sll	r16,r18,r4
    ed44:	1c62b03a 	or	r17,r3,r17
    ed48:	003fee06 	br	ed04 <__floatsidf+0xa4>
    ed4c:	0009883a 	mov	r4,zero
    ed50:	01707834 	movhi	r5,49632
    ed54:	003fd306 	br	eca4 <__floatsidf+0x44>

0000ed58 <__fixdfsi>:
    ed58:	defff804 	addi	sp,sp,-32
    ed5c:	2005883a 	mov	r2,r4
    ed60:	2807883a 	mov	r3,r5
    ed64:	d809883a 	mov	r4,sp
    ed68:	d9400204 	addi	r5,sp,8
    ed6c:	d8c00115 	stw	r3,4(sp)
    ed70:	d8800015 	stw	r2,0(sp)
    ed74:	dfc00715 	stw	ra,28(sp)
    ed78:	000f1b00 	call	f1b0 <__unpack_d>
    ed7c:	d8c00217 	ldw	r3,8(sp)
    ed80:	00800084 	movi	r2,2
    ed84:	1880051e 	bne	r3,r2,ed9c <__fixdfsi+0x44>
    ed88:	0007883a 	mov	r3,zero
    ed8c:	1805883a 	mov	r2,r3
    ed90:	dfc00717 	ldw	ra,28(sp)
    ed94:	dec00804 	addi	sp,sp,32
    ed98:	f800283a 	ret
    ed9c:	00800044 	movi	r2,1
    eda0:	10fff92e 	bgeu	r2,r3,ed88 <__fixdfsi+0x30>
    eda4:	00800104 	movi	r2,4
    eda8:	18800426 	beq	r3,r2,edbc <__fixdfsi+0x64>
    edac:	d8c00417 	ldw	r3,16(sp)
    edb0:	183ff516 	blt	r3,zero,ed88 <__fixdfsi+0x30>
    edb4:	00800784 	movi	r2,30
    edb8:	10c0080e 	bge	r2,r3,eddc <__fixdfsi+0x84>
    edbc:	d8800317 	ldw	r2,12(sp)
    edc0:	1000121e 	bne	r2,zero,ee0c <__fixdfsi+0xb4>
    edc4:	00e00034 	movhi	r3,32768
    edc8:	18ffffc4 	addi	r3,r3,-1
    edcc:	1805883a 	mov	r2,r3
    edd0:	dfc00717 	ldw	ra,28(sp)
    edd4:	dec00804 	addi	sp,sp,32
    edd8:	f800283a 	ret
    eddc:	00800f04 	movi	r2,60
    ede0:	10d1c83a 	sub	r8,r2,r3
    ede4:	40bff804 	addi	r2,r8,-32
    ede8:	d9800517 	ldw	r6,20(sp)
    edec:	d9c00617 	ldw	r7,24(sp)
    edf0:	10000816 	blt	r2,zero,ee14 <__fixdfsi+0xbc>
    edf4:	3888d83a 	srl	r4,r7,r2
    edf8:	d8800317 	ldw	r2,12(sp)
    edfc:	2007883a 	mov	r3,r4
    ee00:	103fe226 	beq	r2,zero,ed8c <__fixdfsi+0x34>
    ee04:	0107c83a 	sub	r3,zero,r4
    ee08:	003fe006 	br	ed8c <__fixdfsi+0x34>
    ee0c:	00e00034 	movhi	r3,32768
    ee10:	003fde06 	br	ed8c <__fixdfsi+0x34>
    ee14:	39c7883a 	add	r3,r7,r7
    ee18:	008007c4 	movi	r2,31
    ee1c:	1205c83a 	sub	r2,r2,r8
    ee20:	1886983a 	sll	r3,r3,r2
    ee24:	3208d83a 	srl	r4,r6,r8
    ee28:	1908b03a 	or	r4,r3,r4
    ee2c:	003ff206 	br	edf8 <__fixdfsi+0xa0>

0000ee30 <__truncdfsf2>:
    ee30:	defff804 	addi	sp,sp,-32
    ee34:	2005883a 	mov	r2,r4
    ee38:	2807883a 	mov	r3,r5
    ee3c:	d809883a 	mov	r4,sp
    ee40:	d9400204 	addi	r5,sp,8
    ee44:	d8c00115 	stw	r3,4(sp)
    ee48:	d8800015 	stw	r2,0(sp)
    ee4c:	dfc00715 	stw	ra,28(sp)
    ee50:	000f1b00 	call	f1b0 <__unpack_d>
    ee54:	d9c00517 	ldw	r7,20(sp)
    ee58:	da000617 	ldw	r8,24(sp)
    ee5c:	02d00034 	movhi	r11,16384
    ee60:	5affffc4 	addi	r11,r11,-1
    ee64:	3812d7ba 	srli	r9,r7,30
    ee68:	401a90ba 	slli	r13,r8,2
    ee6c:	3ac4703a 	and	r2,r7,r11
    ee70:	0007883a 	mov	r3,zero
    ee74:	6a52b03a 	or	r9,r13,r9
    ee78:	10c4b03a 	or	r2,r2,r3
    ee7c:	d9000217 	ldw	r4,8(sp)
    ee80:	d9400317 	ldw	r5,12(sp)
    ee84:	d9800417 	ldw	r6,16(sp)
    ee88:	480f883a 	mov	r7,r9
    ee8c:	10000126 	beq	r2,zero,ee94 <__truncdfsf2+0x64>
    ee90:	49c00054 	ori	r7,r9,1
    ee94:	000f1840 	call	f184 <__make_fp>
    ee98:	dfc00717 	ldw	ra,28(sp)
    ee9c:	dec00804 	addi	sp,sp,32
    eea0:	f800283a 	ret

0000eea4 <__floatunsidf>:
    eea4:	defff204 	addi	sp,sp,-56
    eea8:	dfc00d15 	stw	ra,52(sp)
    eeac:	ddc00c15 	stw	r23,48(sp)
    eeb0:	dd800b15 	stw	r22,44(sp)
    eeb4:	dd400a15 	stw	r21,40(sp)
    eeb8:	dd000915 	stw	r20,36(sp)
    eebc:	dcc00815 	stw	r19,32(sp)
    eec0:	dc800715 	stw	r18,28(sp)
    eec4:	dc400615 	stw	r17,24(sp)
    eec8:	dc000515 	stw	r16,20(sp)
    eecc:	d8000115 	stw	zero,4(sp)
    eed0:	20000f1e 	bne	r4,zero,ef10 <__floatunsidf+0x6c>
    eed4:	00800084 	movi	r2,2
    eed8:	d8800015 	stw	r2,0(sp)
    eedc:	d809883a 	mov	r4,sp
    eee0:	0000cb80 	call	cb8 <__pack_d>
    eee4:	dfc00d17 	ldw	ra,52(sp)
    eee8:	ddc00c17 	ldw	r23,48(sp)
    eeec:	dd800b17 	ldw	r22,44(sp)
    eef0:	dd400a17 	ldw	r21,40(sp)
    eef4:	dd000917 	ldw	r20,36(sp)
    eef8:	dcc00817 	ldw	r19,32(sp)
    eefc:	dc800717 	ldw	r18,28(sp)
    ef00:	dc400617 	ldw	r17,24(sp)
    ef04:	dc000517 	ldw	r16,20(sp)
    ef08:	dec00e04 	addi	sp,sp,56
    ef0c:	f800283a 	ret
    ef10:	008000c4 	movi	r2,3
    ef14:	00c00f04 	movi	r3,60
    ef18:	002f883a 	mov	r23,zero
    ef1c:	202d883a 	mov	r22,r4
    ef20:	d8800015 	stw	r2,0(sp)
    ef24:	d8c00215 	stw	r3,8(sp)
    ef28:	d9000315 	stw	r4,12(sp)
    ef2c:	ddc00415 	stw	r23,16(sp)
    ef30:	00009680 	call	968 <__clzsi2>
    ef34:	12400744 	addi	r9,r2,29
    ef38:	48000b16 	blt	r9,zero,ef68 <__floatunsidf+0xc4>
    ef3c:	483fe726 	beq	r9,zero,eedc <__floatunsidf+0x38>
    ef40:	10bfff44 	addi	r2,r2,-3
    ef44:	10002e16 	blt	r2,zero,f000 <__floatunsidf+0x15c>
    ef48:	b0a2983a 	sll	r17,r22,r2
    ef4c:	0021883a 	mov	r16,zero
    ef50:	d8800217 	ldw	r2,8(sp)
    ef54:	dc400415 	stw	r17,16(sp)
    ef58:	dc000315 	stw	r16,12(sp)
    ef5c:	1245c83a 	sub	r2,r2,r9
    ef60:	d8800215 	stw	r2,8(sp)
    ef64:	003fdd06 	br	eedc <__floatunsidf+0x38>
    ef68:	0255c83a 	sub	r10,zero,r9
    ef6c:	51bff804 	addi	r6,r10,-32
    ef70:	30001b16 	blt	r6,zero,efe0 <__floatunsidf+0x13c>
    ef74:	b9a8d83a 	srl	r20,r23,r6
    ef78:	002b883a 	mov	r21,zero
    ef7c:	000f883a 	mov	r7,zero
    ef80:	01000044 	movi	r4,1
    ef84:	0011883a 	mov	r8,zero
    ef88:	30002516 	blt	r6,zero,f020 <__floatunsidf+0x17c>
    ef8c:	21a6983a 	sll	r19,r4,r6
    ef90:	0025883a 	mov	r18,zero
    ef94:	00bfffc4 	movi	r2,-1
    ef98:	9089883a 	add	r4,r18,r2
    ef9c:	988b883a 	add	r5,r19,r2
    efa0:	248d803a 	cmpltu	r6,r4,r18
    efa4:	314b883a 	add	r5,r6,r5
    efa8:	b104703a 	and	r2,r22,r4
    efac:	b946703a 	and	r3,r23,r5
    efb0:	10c4b03a 	or	r2,r2,r3
    efb4:	10000226 	beq	r2,zero,efc0 <__floatunsidf+0x11c>
    efb8:	01c00044 	movi	r7,1
    efbc:	0011883a 	mov	r8,zero
    efc0:	d9000217 	ldw	r4,8(sp)
    efc4:	a1c4b03a 	or	r2,r20,r7
    efc8:	aa06b03a 	or	r3,r21,r8
    efcc:	2249c83a 	sub	r4,r4,r9
    efd0:	d8c00415 	stw	r3,16(sp)
    efd4:	d9000215 	stw	r4,8(sp)
    efd8:	d8800315 	stw	r2,12(sp)
    efdc:	003fbf06 	br	eedc <__floatunsidf+0x38>
    efe0:	bdc7883a 	add	r3,r23,r23
    efe4:	008007c4 	movi	r2,31
    efe8:	1285c83a 	sub	r2,r2,r10
    efec:	1886983a 	sll	r3,r3,r2
    eff0:	b2a8d83a 	srl	r20,r22,r10
    eff4:	baaad83a 	srl	r21,r23,r10
    eff8:	1d28b03a 	or	r20,r3,r20
    effc:	003fdf06 	br	ef7c <__floatunsidf+0xd8>
    f000:	b006d07a 	srli	r3,r22,1
    f004:	008007c4 	movi	r2,31
    f008:	1245c83a 	sub	r2,r2,r9
    f00c:	1886d83a 	srl	r3,r3,r2
    f010:	ba62983a 	sll	r17,r23,r9
    f014:	b260983a 	sll	r16,r22,r9
    f018:	1c62b03a 	or	r17,r3,r17
    f01c:	003fcc06 	br	ef50 <__floatunsidf+0xac>
    f020:	2006d07a 	srli	r3,r4,1
    f024:	008007c4 	movi	r2,31
    f028:	1285c83a 	sub	r2,r2,r10
    f02c:	18a6d83a 	srl	r19,r3,r2
    f030:	22a4983a 	sll	r18,r4,r10
    f034:	003fd706 	br	ef94 <__floatunsidf+0xf0>

0000f038 <udivmodsi4>:
    f038:	29001b2e 	bgeu	r5,r4,f0a8 <udivmodsi4+0x70>
    f03c:	28001a16 	blt	r5,zero,f0a8 <udivmodsi4+0x70>
    f040:	00800044 	movi	r2,1
    f044:	0007883a 	mov	r3,zero
    f048:	01c007c4 	movi	r7,31
    f04c:	00000306 	br	f05c <udivmodsi4+0x24>
    f050:	19c01326 	beq	r3,r7,f0a0 <udivmodsi4+0x68>
    f054:	18c00044 	addi	r3,r3,1
    f058:	28000416 	blt	r5,zero,f06c <udivmodsi4+0x34>
    f05c:	294b883a 	add	r5,r5,r5
    f060:	1085883a 	add	r2,r2,r2
    f064:	293ffa36 	bltu	r5,r4,f050 <udivmodsi4+0x18>
    f068:	10000d26 	beq	r2,zero,f0a0 <udivmodsi4+0x68>
    f06c:	0007883a 	mov	r3,zero
    f070:	21400236 	bltu	r4,r5,f07c <udivmodsi4+0x44>
    f074:	2149c83a 	sub	r4,r4,r5
    f078:	1886b03a 	or	r3,r3,r2
    f07c:	1004d07a 	srli	r2,r2,1
    f080:	280ad07a 	srli	r5,r5,1
    f084:	103ffa1e 	bne	r2,zero,f070 <udivmodsi4+0x38>
    f088:	30000226 	beq	r6,zero,f094 <udivmodsi4+0x5c>
    f08c:	2005883a 	mov	r2,r4
    f090:	f800283a 	ret
    f094:	1809883a 	mov	r4,r3
    f098:	2005883a 	mov	r2,r4
    f09c:	f800283a 	ret
    f0a0:	0007883a 	mov	r3,zero
    f0a4:	003ff806 	br	f088 <udivmodsi4+0x50>
    f0a8:	00800044 	movi	r2,1
    f0ac:	0007883a 	mov	r3,zero
    f0b0:	003fef06 	br	f070 <udivmodsi4+0x38>

0000f0b4 <__divsi3>:
    f0b4:	defffe04 	addi	sp,sp,-8
    f0b8:	dc000015 	stw	r16,0(sp)
    f0bc:	dfc00115 	stw	ra,4(sp)
    f0c0:	0021883a 	mov	r16,zero
    f0c4:	20000c16 	blt	r4,zero,f0f8 <__divsi3+0x44>
    f0c8:	000d883a 	mov	r6,zero
    f0cc:	28000e16 	blt	r5,zero,f108 <__divsi3+0x54>
    f0d0:	000f0380 	call	f038 <udivmodsi4>
    f0d4:	1007883a 	mov	r3,r2
    f0d8:	8005003a 	cmpeq	r2,r16,zero
    f0dc:	1000011e 	bne	r2,zero,f0e4 <__divsi3+0x30>
    f0e0:	00c7c83a 	sub	r3,zero,r3
    f0e4:	1805883a 	mov	r2,r3
    f0e8:	dfc00117 	ldw	ra,4(sp)
    f0ec:	dc000017 	ldw	r16,0(sp)
    f0f0:	dec00204 	addi	sp,sp,8
    f0f4:	f800283a 	ret
    f0f8:	0109c83a 	sub	r4,zero,r4
    f0fc:	04000044 	movi	r16,1
    f100:	000d883a 	mov	r6,zero
    f104:	283ff20e 	bge	r5,zero,f0d0 <__divsi3+0x1c>
    f108:	014bc83a 	sub	r5,zero,r5
    f10c:	8021003a 	cmpeq	r16,r16,zero
    f110:	003fef06 	br	f0d0 <__divsi3+0x1c>

0000f114 <__modsi3>:
    f114:	deffff04 	addi	sp,sp,-4
    f118:	dfc00015 	stw	ra,0(sp)
    f11c:	01800044 	movi	r6,1
    f120:	2807883a 	mov	r3,r5
    f124:	20000416 	blt	r4,zero,f138 <__modsi3+0x24>
    f128:	28000c16 	blt	r5,zero,f15c <__modsi3+0x48>
    f12c:	dfc00017 	ldw	ra,0(sp)
    f130:	dec00104 	addi	sp,sp,4
    f134:	000f0381 	jmpi	f038 <udivmodsi4>
    f138:	0109c83a 	sub	r4,zero,r4
    f13c:	28000b16 	blt	r5,zero,f16c <__modsi3+0x58>
    f140:	180b883a 	mov	r5,r3
    f144:	01800044 	movi	r6,1
    f148:	000f0380 	call	f038 <udivmodsi4>
    f14c:	0085c83a 	sub	r2,zero,r2
    f150:	dfc00017 	ldw	ra,0(sp)
    f154:	dec00104 	addi	sp,sp,4
    f158:	f800283a 	ret
    f15c:	014bc83a 	sub	r5,zero,r5
    f160:	dfc00017 	ldw	ra,0(sp)
    f164:	dec00104 	addi	sp,sp,4
    f168:	000f0381 	jmpi	f038 <udivmodsi4>
    f16c:	0147c83a 	sub	r3,zero,r5
    f170:	003ff306 	br	f140 <__modsi3+0x2c>

0000f174 <__udivsi3>:
    f174:	000d883a 	mov	r6,zero
    f178:	000f0381 	jmpi	f038 <udivmodsi4>

0000f17c <__umodsi3>:
    f17c:	01800044 	movi	r6,1
    f180:	000f0381 	jmpi	f038 <udivmodsi4>

0000f184 <__make_fp>:
    f184:	defffb04 	addi	sp,sp,-20
    f188:	d9000015 	stw	r4,0(sp)
    f18c:	d809883a 	mov	r4,sp
    f190:	dfc00415 	stw	ra,16(sp)
    f194:	d9400115 	stw	r5,4(sp)
    f198:	d9800215 	stw	r6,8(sp)
    f19c:	d9c00315 	stw	r7,12(sp)
    f1a0:	00009e80 	call	9e8 <__pack_f>
    f1a4:	dfc00417 	ldw	ra,16(sp)
    f1a8:	dec00504 	addi	sp,sp,20
    f1ac:	f800283a 	ret

0000f1b0 <__unpack_d>:
    f1b0:	20c00117 	ldw	r3,4(r4)
    f1b4:	22400017 	ldw	r9,0(r4)
    f1b8:	00800434 	movhi	r2,16
    f1bc:	10bfffc4 	addi	r2,r2,-1
    f1c0:	1808d53a 	srli	r4,r3,20
    f1c4:	180cd7fa 	srli	r6,r3,31
    f1c8:	1894703a 	and	r10,r3,r2
    f1cc:	2201ffcc 	andi	r8,r4,2047
    f1d0:	281b883a 	mov	r13,r5
    f1d4:	4817883a 	mov	r11,r9
    f1d8:	29800115 	stw	r6,4(r5)
    f1dc:	5019883a 	mov	r12,r10
    f1e0:	40001e1e 	bne	r8,zero,f25c <__unpack_d+0xac>
    f1e4:	4a84b03a 	or	r2,r9,r10
    f1e8:	10001926 	beq	r2,zero,f250 <__unpack_d+0xa0>
    f1ec:	4804d63a 	srli	r2,r9,24
    f1f0:	500c923a 	slli	r6,r10,8
    f1f4:	013f0084 	movi	r4,-1022
    f1f8:	00c40034 	movhi	r3,4096
    f1fc:	18ffffc4 	addi	r3,r3,-1
    f200:	118cb03a 	or	r6,r2,r6
    f204:	008000c4 	movi	r2,3
    f208:	480a923a 	slli	r5,r9,8
    f20c:	68800015 	stw	r2,0(r13)
    f210:	69000215 	stw	r4,8(r13)
    f214:	19800b36 	bltu	r3,r6,f244 <__unpack_d+0x94>
    f218:	200f883a 	mov	r7,r4
    f21c:	1811883a 	mov	r8,r3
    f220:	2945883a 	add	r2,r5,r5
    f224:	1149803a 	cmpltu	r4,r2,r5
    f228:	3187883a 	add	r3,r6,r6
    f22c:	20c9883a 	add	r4,r4,r3
    f230:	100b883a 	mov	r5,r2
    f234:	200d883a 	mov	r6,r4
    f238:	39ffffc4 	addi	r7,r7,-1
    f23c:	413ff82e 	bgeu	r8,r4,f220 <__unpack_d+0x70>
    f240:	69c00215 	stw	r7,8(r13)
    f244:	69800415 	stw	r6,16(r13)
    f248:	69400315 	stw	r5,12(r13)
    f24c:	f800283a 	ret
    f250:	00800084 	movi	r2,2
    f254:	28800015 	stw	r2,0(r5)
    f258:	f800283a 	ret
    f25c:	0081ffc4 	movi	r2,2047
    f260:	40800f26 	beq	r8,r2,f2a0 <__unpack_d+0xf0>
    f264:	480cd63a 	srli	r6,r9,24
    f268:	5006923a 	slli	r3,r10,8
    f26c:	4804923a 	slli	r2,r9,8
    f270:	0009883a 	mov	r4,zero
    f274:	30c6b03a 	or	r3,r6,r3
    f278:	01440034 	movhi	r5,4096
    f27c:	110cb03a 	or	r6,r2,r4
    f280:	423f0044 	addi	r8,r8,-1023
    f284:	194eb03a 	or	r7,r3,r5
    f288:	008000c4 	movi	r2,3
    f28c:	69c00415 	stw	r7,16(r13)
    f290:	6a000215 	stw	r8,8(r13)
    f294:	68800015 	stw	r2,0(r13)
    f298:	69800315 	stw	r6,12(r13)
    f29c:	f800283a 	ret
    f2a0:	4a84b03a 	or	r2,r9,r10
    f2a4:	1000031e 	bne	r2,zero,f2b4 <__unpack_d+0x104>
    f2a8:	00800104 	movi	r2,4
    f2ac:	28800015 	stw	r2,0(r5)
    f2b0:	f800283a 	ret
    f2b4:	0009883a 	mov	r4,zero
    f2b8:	01400234 	movhi	r5,8
    f2bc:	4904703a 	and	r2,r9,r4
    f2c0:	5146703a 	and	r3,r10,r5
    f2c4:	10c4b03a 	or	r2,r2,r3
    f2c8:	10000526 	beq	r2,zero,f2e0 <__unpack_d+0x130>
    f2cc:	00800044 	movi	r2,1
    f2d0:	68800015 	stw	r2,0(r13)
    f2d4:	6b000415 	stw	r12,16(r13)
    f2d8:	6ac00315 	stw	r11,12(r13)
    f2dc:	f800283a 	ret
    f2e0:	68000015 	stw	zero,0(r13)
    f2e4:	003ffb06 	br	f2d4 <__unpack_d+0x124>

0000f2e8 <__fpcmp_parts_d>:
    f2e8:	21800017 	ldw	r6,0(r4)
    f2ec:	00c00044 	movi	r3,1
    f2f0:	19800a2e 	bgeu	r3,r6,f31c <__fpcmp_parts_d+0x34>
    f2f4:	28800017 	ldw	r2,0(r5)
    f2f8:	1880082e 	bgeu	r3,r2,f31c <__fpcmp_parts_d+0x34>
    f2fc:	00c00104 	movi	r3,4
    f300:	30c02626 	beq	r6,r3,f39c <__fpcmp_parts_d+0xb4>
    f304:	10c02226 	beq	r2,r3,f390 <__fpcmp_parts_d+0xa8>
    f308:	00c00084 	movi	r3,2
    f30c:	30c00526 	beq	r6,r3,f324 <__fpcmp_parts_d+0x3c>
    f310:	10c0071e 	bne	r2,r3,f330 <__fpcmp_parts_d+0x48>
    f314:	20800117 	ldw	r2,4(r4)
    f318:	1000091e 	bne	r2,zero,f340 <__fpcmp_parts_d+0x58>
    f31c:	00800044 	movi	r2,1
    f320:	f800283a 	ret
    f324:	10c01a1e 	bne	r2,r3,f390 <__fpcmp_parts_d+0xa8>
    f328:	0005883a 	mov	r2,zero
    f32c:	f800283a 	ret
    f330:	22000117 	ldw	r8,4(r4)
    f334:	28800117 	ldw	r2,4(r5)
    f338:	40800326 	beq	r8,r2,f348 <__fpcmp_parts_d+0x60>
    f33c:	403ff726 	beq	r8,zero,f31c <__fpcmp_parts_d+0x34>
    f340:	00bfffc4 	movi	r2,-1
    f344:	f800283a 	ret
    f348:	20c00217 	ldw	r3,8(r4)
    f34c:	28800217 	ldw	r2,8(r5)
    f350:	10fffa16 	blt	r2,r3,f33c <__fpcmp_parts_d+0x54>
    f354:	18800916 	blt	r3,r2,f37c <__fpcmp_parts_d+0x94>
    f358:	21c00417 	ldw	r7,16(r4)
    f35c:	28c00417 	ldw	r3,16(r5)
    f360:	21800317 	ldw	r6,12(r4)
    f364:	28800317 	ldw	r2,12(r5)
    f368:	19fff436 	bltu	r3,r7,f33c <__fpcmp_parts_d+0x54>
    f36c:	38c00526 	beq	r7,r3,f384 <__fpcmp_parts_d+0x9c>
    f370:	38c00236 	bltu	r7,r3,f37c <__fpcmp_parts_d+0x94>
    f374:	19ffec1e 	bne	r3,r7,f328 <__fpcmp_parts_d+0x40>
    f378:	30bfeb2e 	bgeu	r6,r2,f328 <__fpcmp_parts_d+0x40>
    f37c:	403fe71e 	bne	r8,zero,f31c <__fpcmp_parts_d+0x34>
    f380:	003fef06 	br	f340 <__fpcmp_parts_d+0x58>
    f384:	11bffa2e 	bgeu	r2,r6,f370 <__fpcmp_parts_d+0x88>
    f388:	403fe426 	beq	r8,zero,f31c <__fpcmp_parts_d+0x34>
    f38c:	003fec06 	br	f340 <__fpcmp_parts_d+0x58>
    f390:	28800117 	ldw	r2,4(r5)
    f394:	103fe11e 	bne	r2,zero,f31c <__fpcmp_parts_d+0x34>
    f398:	003fe906 	br	f340 <__fpcmp_parts_d+0x58>
    f39c:	11bfdd1e 	bne	r2,r6,f314 <__fpcmp_parts_d+0x2c>
    f3a0:	28c00117 	ldw	r3,4(r5)
    f3a4:	20800117 	ldw	r2,4(r4)
    f3a8:	1885c83a 	sub	r2,r3,r2
    f3ac:	f800283a 	ret

0000f3b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f3b0:	defffd04 	addi	sp,sp,-12
    f3b4:	dfc00215 	stw	ra,8(sp)
    f3b8:	dc400115 	stw	r17,4(sp)
    f3bc:	dc000015 	stw	r16,0(sp)
    f3c0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f3c4:	20001c16 	blt	r4,zero,f438 <close+0x88>
    f3c8:	20c00324 	muli	r3,r4,12
    f3cc:	00800074 	movhi	r2,1
    f3d0:	108c1604 	addi	r2,r2,12376
    f3d4:	1889883a 	add	r4,r3,r2

  if (fd)
    f3d8:	20001726 	beq	r4,zero,f438 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f3dc:	20800017 	ldw	r2,0(r4)
    f3e0:	10800417 	ldw	r2,16(r2)
    f3e4:	10002126 	beq	r2,zero,f46c <close+0xbc>
    f3e8:	103ee83a 	callr	r2
    f3ec:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f3f0:	8009883a 	mov	r4,r16
    f3f4:	000fa480 	call	fa48 <alt_release_fd>
    if (rval < 0)
    f3f8:	88000216 	blt	r17,zero,f404 <close+0x54>
    f3fc:	0005883a 	mov	r2,zero
    f400:	00001d06 	br	f478 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    f404:	00800074 	movhi	r2,1
    f408:	10910404 	addi	r2,r2,17424
    f40c:	10800017 	ldw	r2,0(r2)
    f410:	1000031e 	bne	r2,zero,f420 <close+0x70>
    f414:	00c00074 	movhi	r3,1
    f418:	18d81b04 	addi	r3,r3,24684
    f41c:	00000206 	br	f428 <close+0x78>
    f420:	103ee83a 	callr	r2
    f424:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    f428:	0445c83a 	sub	r2,zero,r17
    f42c:	18800015 	stw	r2,0(r3)
    f430:	00bfffc4 	movi	r2,-1
    f434:	00001006 	br	f478 <close+0xc8>
    f438:	00800074 	movhi	r2,1
    f43c:	10910404 	addi	r2,r2,17424
    f440:	10800017 	ldw	r2,0(r2)
    f444:	1000031e 	bne	r2,zero,f454 <close+0xa4>
    f448:	00c00074 	movhi	r3,1
    f44c:	18d81b04 	addi	r3,r3,24684
    f450:	00000206 	br	f45c <close+0xac>
    f454:	103ee83a 	callr	r2
    f458:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f45c:	00801444 	movi	r2,81
    f460:	18800015 	stw	r2,0(r3)
    f464:	00bfffc4 	movi	r2,-1
    f468:	00000306 	br	f478 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f46c:	8009883a 	mov	r4,r16
    f470:	000fa480 	call	fa48 <alt_release_fd>
    f474:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    f478:	dfc00217 	ldw	ra,8(sp)
    f47c:	dc400117 	ldw	r17,4(sp)
    f480:	dc000017 	ldw	r16,0(sp)
    f484:	dec00304 	addi	sp,sp,12
    f488:	f800283a 	ret

0000f48c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    f48c:	3005883a 	mov	r2,r6
    f490:	f800283a 	ret

0000f494 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f494:	deffff04 	addi	sp,sp,-4
    f498:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f49c:	20000e16 	blt	r4,zero,f4d8 <fstat+0x44>
    f4a0:	20c00324 	muli	r3,r4,12
    f4a4:	00800074 	movhi	r2,1
    f4a8:	108c1604 	addi	r2,r2,12376
    f4ac:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f4b0:	20000926 	beq	r4,zero,f4d8 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f4b4:	20800017 	ldw	r2,0(r4)
    f4b8:	10800817 	ldw	r2,32(r2)
    f4bc:	10000226 	beq	r2,zero,f4c8 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    f4c0:	103ee83a 	callr	r2
    f4c4:	00001006 	br	f508 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f4c8:	00880004 	movi	r2,8192
    f4cc:	28800115 	stw	r2,4(r5)
    f4d0:	0005883a 	mov	r2,zero
    f4d4:	00000c06 	br	f508 <fstat+0x74>
    f4d8:	00800074 	movhi	r2,1
    f4dc:	10910404 	addi	r2,r2,17424
    f4e0:	10800017 	ldw	r2,0(r2)
    f4e4:	1000031e 	bne	r2,zero,f4f4 <fstat+0x60>
    f4e8:	00c00074 	movhi	r3,1
    f4ec:	18d81b04 	addi	r3,r3,24684
    f4f0:	00000206 	br	f4fc <fstat+0x68>
    f4f4:	103ee83a 	callr	r2
    f4f8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4fc:	00801444 	movi	r2,81
    f500:	18800015 	stw	r2,0(r3)
    f504:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    f508:	dfc00017 	ldw	ra,0(sp)
    f50c:	dec00104 	addi	sp,sp,4
    f510:	f800283a 	ret

0000f514 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f514:	defff004 	addi	sp,sp,-64
    f518:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f51c:	20000f16 	blt	r4,zero,f55c <isatty+0x48>
    f520:	20c00324 	muli	r3,r4,12
    f524:	00800074 	movhi	r2,1
    f528:	108c1604 	addi	r2,r2,12376
    f52c:	1885883a 	add	r2,r3,r2
  
  if (fd)
    f530:	10000a26 	beq	r2,zero,f55c <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f534:	10800017 	ldw	r2,0(r2)
    f538:	10800817 	ldw	r2,32(r2)
    f53c:	1000021e 	bne	r2,zero,f548 <isatty+0x34>
    f540:	00800044 	movi	r2,1
    f544:	00001106 	br	f58c <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f548:	d80b883a 	mov	r5,sp
    f54c:	000f4940 	call	f494 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f550:	d8800117 	ldw	r2,4(sp)
    f554:	10880020 	cmpeqi	r2,r2,8192
    f558:	00000c06 	br	f58c <isatty+0x78>
    f55c:	00800074 	movhi	r2,1
    f560:	10910404 	addi	r2,r2,17424
    f564:	10800017 	ldw	r2,0(r2)
    f568:	1000031e 	bne	r2,zero,f578 <isatty+0x64>
    f56c:	00c00074 	movhi	r3,1
    f570:	18d81b04 	addi	r3,r3,24684
    f574:	00000206 	br	f580 <isatty+0x6c>
    f578:	103ee83a 	callr	r2
    f57c:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f580:	00801444 	movi	r2,81
    f584:	18800015 	stw	r2,0(r3)
    f588:	0005883a 	mov	r2,zero
    return 0;
  }
}
    f58c:	dfc00f17 	ldw	ra,60(sp)
    f590:	dec01004 	addi	sp,sp,64
    f594:	f800283a 	ret

0000f598 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f598:	deffff04 	addi	sp,sp,-4
    f59c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f5a0:	01000074 	movhi	r4,1
    f5a4:	21110904 	addi	r4,r4,17444
    f5a8:	00c00074 	movhi	r3,1
    f5ac:	18c9fd04 	addi	r3,r3,10228

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f5b0:	20c00926 	beq	r4,r3,f5d8 <alt_load+0x40>
    f5b4:	01800074 	movhi	r6,1
    f5b8:	31910904 	addi	r6,r6,17444
  {
    while( to != end )
    f5bc:	19800626 	beq	r3,r6,f5d8 <alt_load+0x40>
    f5c0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f5c4:	20800017 	ldw	r2,0(r4)
    f5c8:	18800015 	stw	r2,0(r3)
    f5cc:	1947883a 	add	r3,r3,r5
    f5d0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f5d4:	30fffb1e 	bne	r6,r3,f5c4 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f5d8:	01000034 	movhi	r4,0
    f5dc:	21000804 	addi	r4,r4,32
    f5e0:	00c00034 	movhi	r3,0
    f5e4:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f5e8:	20c00926 	beq	r4,r3,f610 <alt_load+0x78>
    f5ec:	01800034 	movhi	r6,0
    f5f0:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    f5f4:	19800626 	beq	r3,r6,f610 <alt_load+0x78>
    f5f8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f5fc:	20800017 	ldw	r2,0(r4)
    f600:	18800015 	stw	r2,0(r3)
    f604:	1947883a 	add	r3,r3,r5
    f608:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f60c:	30fffb1e 	bne	r6,r3,f5fc <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f610:	01000074 	movhi	r4,1
    f614:	2107e004 	addi	r4,r4,8064
    f618:	00c00074 	movhi	r3,1
    f61c:	18c7e004 	addi	r3,r3,8064

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f620:	20c00926 	beq	r4,r3,f648 <alt_load+0xb0>
    f624:	01800074 	movhi	r6,1
    f628:	3189fd04 	addi	r6,r6,10228
  {
    while( to != end )
    f62c:	19800626 	beq	r3,r6,f648 <alt_load+0xb0>
    f630:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f634:	20800017 	ldw	r2,0(r4)
    f638:	18800015 	stw	r2,0(r3)
    f63c:	1947883a 	add	r3,r3,r5
    f640:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f644:	30fffb1e 	bne	r6,r3,f634 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f648:	00112c80 	call	112c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f64c:	00113c40 	call	113c4 <alt_icache_flush_all>
}
    f650:	dfc00017 	ldw	ra,0(sp)
    f654:	dec00104 	addi	sp,sp,4
    f658:	f800283a 	ret

0000f65c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f65c:	defffe04 	addi	sp,sp,-8
    f660:	dfc00115 	stw	ra,4(sp)
    f664:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f668:	2000020e 	bge	r4,zero,f674 <lseek+0x18>
    f66c:	043febc4 	movi	r16,-81
    f670:	00000d06 	br	f6a8 <lseek+0x4c>
    f674:	20c00324 	muli	r3,r4,12
    f678:	00800074 	movhi	r2,1
    f67c:	108c1604 	addi	r2,r2,12376
    f680:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    f684:	20001526 	beq	r4,zero,f6dc <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f688:	20800017 	ldw	r2,0(r4)
    f68c:	10800717 	ldw	r2,28(r2)
    f690:	1000021e 	bne	r2,zero,f69c <lseek+0x40>
    f694:	043fde84 	movi	r16,-134
    f698:	00000306 	br	f6a8 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f69c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    f6a0:	1000100e 	bge	r2,zero,f6e4 <lseek+0x88>
    f6a4:	1021883a 	mov	r16,r2
    f6a8:	00800074 	movhi	r2,1
    f6ac:	10910404 	addi	r2,r2,17424
    f6b0:	10800017 	ldw	r2,0(r2)
    f6b4:	1000031e 	bne	r2,zero,f6c4 <lseek+0x68>
    f6b8:	00c00074 	movhi	r3,1
    f6bc:	18d81b04 	addi	r3,r3,24684
    f6c0:	00000206 	br	f6cc <lseek+0x70>
    f6c4:	103ee83a 	callr	r2
    f6c8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    f6cc:	0405c83a 	sub	r2,zero,r16
    f6d0:	18800015 	stw	r2,0(r3)
    f6d4:	00bfffc4 	movi	r2,-1
    f6d8:	00000206 	br	f6e4 <lseek+0x88>
    f6dc:	043febc4 	movi	r16,-81
    f6e0:	003ff106 	br	f6a8 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    f6e4:	dfc00117 	ldw	ra,4(sp)
    f6e8:	dc000017 	ldw	r16,0(sp)
    f6ec:	dec00204 	addi	sp,sp,8
    f6f0:	f800283a 	ret

0000f6f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f6f4:	defffe04 	addi	sp,sp,-8
    f6f8:	dfc00115 	stw	ra,4(sp)
    f6fc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f700:	0009883a 	mov	r4,zero
    f704:	000fbb00 	call	fbb0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f708:	000fbd00 	call	fbd0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f70c:	01800074 	movhi	r6,1
    f710:	3189d004 	addi	r6,r6,10048
    f714:	3009883a 	mov	r4,r6
    f718:	300b883a 	mov	r5,r6
    f71c:	00114480 	call	11448 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f720:	d1272417 	ldw	r4,-25456(gp)
    f724:	d1672517 	ldw	r5,-25452(gp)
    f728:	d1a72617 	ldw	r6,-25448(gp)
    f72c:	00001b40 	call	1b4 <main>
    f730:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    f734:	01000044 	movi	r4,1
    f738:	000f3b00 	call	f3b0 <close>
  exit (result);
    f73c:	8009883a 	mov	r4,r16
    f740:	00119640 	call	11964 <exit>

0000f744 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    f744:	f800283a 	ret

0000f748 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    f748:	f800283a 	ret

0000f74c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    f74c:	defff804 	addi	sp,sp,-32
    f750:	dfc00415 	stw	ra,16(sp)
    f754:	dc800315 	stw	r18,12(sp)
    f758:	dc400215 	stw	r17,8(sp)
    f75c:	dc000115 	stw	r16,4(sp)
    f760:	d9400515 	stw	r5,20(sp)
    f764:	d9800615 	stw	r6,24(sp)
    f768:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    f76c:	d8800504 	addi	r2,sp,20
    f770:	d8800015 	stw	r2,0(sp)
    f774:	2023883a 	mov	r17,r4
    f778:	00005d06 	br	f8f0 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f77c:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    f780:	21003fcc 	andi	r4,r4,255
    f784:	2100201c 	xori	r4,r4,128
    f788:	213fe004 	addi	r4,r4,-128
    f78c:	00800944 	movi	r2,37
    f790:	20800226 	beq	r4,r2,f79c <alt_printf+0x50>
        {
            alt_putchar(c);
    f794:	000f9280 	call	f928 <alt_putchar>
    f798:	00005506 	br	f8f0 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    f79c:	89400003 	ldbu	r5,0(r17)
    f7a0:	8c400044 	addi	r17,r17,1
    f7a4:	29003fcc 	andi	r4,r5,255
    f7a8:	2100201c 	xori	r4,r4,128
    f7ac:	213fe004 	addi	r4,r4,-128
    f7b0:	20005726 	beq	r4,zero,f910 <alt_printf+0x1c4>
            {
                if (c == '%')
    f7b4:	00800944 	movi	r2,37
    f7b8:	2080021e 	bne	r4,r2,f7c4 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    f7bc:	000f9280 	call	f928 <alt_putchar>
    f7c0:	00004b06 	br	f8f0 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    f7c4:	28c03fcc 	andi	r3,r5,255
    f7c8:	18c0201c 	xori	r3,r3,128
    f7cc:	18ffe004 	addi	r3,r3,-128
    f7d0:	008018c4 	movi	r2,99
    f7d4:	1880061e 	bne	r3,r2,f7f0 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    f7d8:	d8c00017 	ldw	r3,0(sp)
    f7dc:	18800104 	addi	r2,r3,4
    f7e0:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    f7e4:	19000017 	ldw	r4,0(r3)
    f7e8:	000f9280 	call	f928 <alt_putchar>
    f7ec:	00004006 	br	f8f0 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    f7f0:	28c03fcc 	andi	r3,r5,255
    f7f4:	18c0201c 	xori	r3,r3,128
    f7f8:	18ffe004 	addi	r3,r3,-128
    f7fc:	00801e04 	movi	r2,120
    f800:	1880231e 	bne	r3,r2,f890 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    f804:	d8c00017 	ldw	r3,0(sp)
    f808:	18800104 	addi	r2,r3,4
    f80c:	d8800015 	stw	r2,0(sp)
    f810:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    f814:	90000326 	beq	r18,zero,f824 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f818:	90bc002c 	andhi	r2,r18,61440
    f81c:	10000426 	beq	r2,zero,f830 <alt_printf+0xe4>
    f820:	00003906 	br	f908 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    f824:	01000c04 	movi	r4,48
    f828:	000f9280 	call	f928 <alt_putchar>
    f82c:	00003006 	br	f8f0 <alt_printf+0x1a4>
                        continue;
    f830:	04000704 	movi	r16,28
    f834:	013fff04 	movi	r4,-4
    f838:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    f83c:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f840:	1c04983a 	sll	r2,r3,r16
    f844:	9084703a 	and	r2,r18,r2
    f848:	103ffc26 	beq	r2,zero,f83c <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f84c:	80002816 	blt	r16,zero,f8f0 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    f850:	008003c4 	movi	r2,15
    f854:	1404983a 	sll	r2,r2,r16
    f858:	9084703a 	and	r2,r18,r2
    f85c:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    f860:	00800244 	movi	r2,9
    f864:	10c00236 	bltu	r2,r3,f870 <alt_printf+0x124>
                            c = '0' + digit;
    f868:	19000c04 	addi	r4,r3,48
    f86c:	00000106 	br	f874 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    f870:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    f874:	21003fcc 	andi	r4,r4,255
    f878:	2100201c 	xori	r4,r4,128
    f87c:	213fe004 	addi	r4,r4,-128
    f880:	000f9280 	call	f928 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f884:	843fff04 	addi	r16,r16,-4
    f888:	80001916 	blt	r16,zero,f8f0 <alt_printf+0x1a4>
    f88c:	003ff006 	br	f850 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    f890:	28c03fcc 	andi	r3,r5,255
    f894:	18c0201c 	xori	r3,r3,128
    f898:	18ffe004 	addi	r3,r3,-128
    f89c:	00801cc4 	movi	r2,115
    f8a0:	1880131e 	bne	r3,r2,f8f0 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    f8a4:	d8800017 	ldw	r2,0(sp)
    f8a8:	10c00104 	addi	r3,r2,4
    f8ac:	d8c00015 	stw	r3,0(sp)
    f8b0:	14000017 	ldw	r16,0(r2)

                    while(*s)
    f8b4:	81000003 	ldbu	r4,0(r16)
    f8b8:	20803fcc 	andi	r2,r4,255
    f8bc:	1080201c 	xori	r2,r2,128
    f8c0:	10bfe004 	addi	r2,r2,-128
    f8c4:	10000a26 	beq	r2,zero,f8f0 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    f8c8:	84000044 	addi	r16,r16,1
    f8cc:	21003fcc 	andi	r4,r4,255
    f8d0:	2100201c 	xori	r4,r4,128
    f8d4:	213fe004 	addi	r4,r4,-128
    f8d8:	000f9280 	call	f928 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    f8dc:	81000003 	ldbu	r4,0(r16)
    f8e0:	20803fcc 	andi	r2,r4,255
    f8e4:	1080201c 	xori	r2,r2,128
    f8e8:	10bfe004 	addi	r2,r2,-128
    f8ec:	103ff61e 	bne	r2,zero,f8c8 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f8f0:	89000003 	ldbu	r4,0(r17)
    f8f4:	20803fcc 	andi	r2,r4,255
    f8f8:	1080201c 	xori	r2,r2,128
    f8fc:	10bfe004 	addi	r2,r2,-128
    f900:	103f9e1e 	bne	r2,zero,f77c <alt_printf+0x30>
    f904:	00000206 	br	f910 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    f908:	04000704 	movi	r16,28
    f90c:	003fd006 	br	f850 <alt_printf+0x104>
    f910:	dfc00417 	ldw	ra,16(sp)
    f914:	dc800317 	ldw	r18,12(sp)
    f918:	dc400217 	ldw	r17,8(sp)
    f91c:	dc000117 	ldw	r16,4(sp)
    f920:	dec00804 	addi	sp,sp,32
    f924:	f800283a 	ret

0000f928 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    f928:	deffff04 	addi	sp,sp,-4
    f92c:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    f930:	00800074 	movhi	r2,1
    f934:	1090f904 	addi	r2,r2,17380
    f938:	10800017 	ldw	r2,0(r2)
    f93c:	11400217 	ldw	r5,8(r2)
    f940:	0011a100 	call	11a10 <putc>
#endif
}
    f944:	dfc00017 	ldw	ra,0(sp)
    f948:	dec00104 	addi	sp,sp,4
    f94c:	f800283a 	ret

0000f950 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f950:	defffe04 	addi	sp,sp,-8
    f954:	dfc00115 	stw	ra,4(sp)
    f958:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f95c:	20002916 	blt	r4,zero,fa04 <read+0xb4>
    f960:	20c00324 	muli	r3,r4,12
    f964:	00800074 	movhi	r2,1
    f968:	108c1604 	addi	r2,r2,12376
    f96c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f970:	20002426 	beq	r4,zero,fa04 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f974:	20800217 	ldw	r2,8(r4)
    f978:	108000cc 	andi	r2,r2,3
    f97c:	00c00044 	movi	r3,1
    f980:	10c01326 	beq	r2,r3,f9d0 <read+0x80>
    f984:	20800017 	ldw	r2,0(r4)
    f988:	10800517 	ldw	r2,20(r2)
    f98c:	10001026 	beq	r2,zero,f9d0 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f990:	103ee83a 	callr	r2
    f994:	1021883a 	mov	r16,r2
    f998:	1000260e 	bge	r2,zero,fa34 <read+0xe4>
    f99c:	00800074 	movhi	r2,1
    f9a0:	10910404 	addi	r2,r2,17424
    f9a4:	10800017 	ldw	r2,0(r2)
    f9a8:	1000031e 	bne	r2,zero,f9b8 <read+0x68>
    f9ac:	00c00074 	movhi	r3,1
    f9b0:	18d81b04 	addi	r3,r3,24684
    f9b4:	00000206 	br	f9c0 <read+0x70>
    f9b8:	103ee83a 	callr	r2
    f9bc:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    f9c0:	0405c83a 	sub	r2,zero,r16
    f9c4:	18800015 	stw	r2,0(r3)
    f9c8:	043fffc4 	movi	r16,-1
    f9cc:	00001906 	br	fa34 <read+0xe4>
    f9d0:	00800074 	movhi	r2,1
    f9d4:	10910404 	addi	r2,r2,17424
    f9d8:	10800017 	ldw	r2,0(r2)
    f9dc:	1000031e 	bne	r2,zero,f9ec <read+0x9c>
    f9e0:	00c00074 	movhi	r3,1
    f9e4:	18d81b04 	addi	r3,r3,24684
    f9e8:	00000206 	br	f9f4 <read+0xa4>
    f9ec:	103ee83a 	callr	r2
    f9f0:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    f9f4:	00800344 	movi	r2,13
    f9f8:	18800015 	stw	r2,0(r3)
    f9fc:	043fffc4 	movi	r16,-1
    fa00:	00000c06 	br	fa34 <read+0xe4>
    fa04:	00800074 	movhi	r2,1
    fa08:	10910404 	addi	r2,r2,17424
    fa0c:	10800017 	ldw	r2,0(r2)
    fa10:	1000031e 	bne	r2,zero,fa20 <read+0xd0>
    fa14:	00c00074 	movhi	r3,1
    fa18:	18d81b04 	addi	r3,r3,24684
    fa1c:	00000206 	br	fa28 <read+0xd8>
    fa20:	103ee83a 	callr	r2
    fa24:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa28:	00801444 	movi	r2,81
    fa2c:	18800015 	stw	r2,0(r3)
    fa30:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    fa34:	8005883a 	mov	r2,r16
    fa38:	dfc00117 	ldw	ra,4(sp)
    fa3c:	dc000017 	ldw	r16,0(sp)
    fa40:	dec00204 	addi	sp,sp,8
    fa44:	f800283a 	ret

0000fa48 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    fa48:	00800084 	movi	r2,2
    fa4c:	1100060e 	bge	r2,r4,fa68 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa50:	20800324 	muli	r2,r4,12
    fa54:	00c00074 	movhi	r3,1
    fa58:	18cc1604 	addi	r3,r3,12376
    fa5c:	10c5883a 	add	r2,r2,r3
    fa60:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    fa64:	10000015 	stw	zero,0(r2)
    fa68:	f800283a 	ret

0000fa6c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa6c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa70:	00bfff84 	movi	r2,-2
    fa74:	2884703a 	and	r2,r5,r2
    fa78:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fa7c:	d0a00d17 	ldw	r2,-32716(gp)
    fa80:	108000c4 	addi	r2,r2,3
    fa84:	00ffff04 	movi	r3,-4
    fa88:	10c6703a 	and	r3,r2,r3
    fa8c:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fa90:	1909883a 	add	r4,r3,r4
    fa94:	00800434 	movhi	r2,16
    fa98:	10800004 	addi	r2,r2,0
    fa9c:	1100032e 	bgeu	r2,r4,faac <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    faa0:	2801703a 	wrctl	status,r5
    faa4:	00ffffc4 	movi	r3,-1
    faa8:	00000206 	br	fab4 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    faac:	d1200d15 	stw	r4,-32716(gp)
    fab0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    fab4:	1805883a 	mov	r2,r3
    fab8:	f800283a 	ret

0000fabc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fabc:	defffe04 	addi	sp,sp,-8
    fac0:	dfc00115 	stw	ra,4(sp)
    fac4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fac8:	20002816 	blt	r4,zero,fb6c <write+0xb0>
    facc:	20c00324 	muli	r3,r4,12
    fad0:	00800074 	movhi	r2,1
    fad4:	108c1604 	addi	r2,r2,12376
    fad8:	1889883a 	add	r4,r3,r2
  
  if (fd)
    fadc:	20002326 	beq	r4,zero,fb6c <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fae0:	20800217 	ldw	r2,8(r4)
    fae4:	108000cc 	andi	r2,r2,3
    fae8:	10001326 	beq	r2,zero,fb38 <write+0x7c>
    faec:	20800017 	ldw	r2,0(r4)
    faf0:	10800617 	ldw	r2,24(r2)
    faf4:	10001026 	beq	r2,zero,fb38 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    faf8:	103ee83a 	callr	r2
    fafc:	1021883a 	mov	r16,r2
    fb00:	1000260e 	bge	r2,zero,fb9c <write+0xe0>
    fb04:	00800074 	movhi	r2,1
    fb08:	10910404 	addi	r2,r2,17424
    fb0c:	10800017 	ldw	r2,0(r2)
    fb10:	1000031e 	bne	r2,zero,fb20 <write+0x64>
    fb14:	00c00074 	movhi	r3,1
    fb18:	18d81b04 	addi	r3,r3,24684
    fb1c:	00000206 	br	fb28 <write+0x6c>
    fb20:	103ee83a 	callr	r2
    fb24:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    fb28:	0405c83a 	sub	r2,zero,r16
    fb2c:	18800015 	stw	r2,0(r3)
    fb30:	043fffc4 	movi	r16,-1
    fb34:	00001906 	br	fb9c <write+0xe0>
    fb38:	00800074 	movhi	r2,1
    fb3c:	10910404 	addi	r2,r2,17424
    fb40:	10800017 	ldw	r2,0(r2)
    fb44:	1000031e 	bne	r2,zero,fb54 <write+0x98>
    fb48:	00c00074 	movhi	r3,1
    fb4c:	18d81b04 	addi	r3,r3,24684
    fb50:	00000206 	br	fb5c <write+0xa0>
    fb54:	103ee83a 	callr	r2
    fb58:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    fb5c:	00800344 	movi	r2,13
    fb60:	18800015 	stw	r2,0(r3)
    fb64:	043fffc4 	movi	r16,-1
    fb68:	00000c06 	br	fb9c <write+0xe0>
    fb6c:	00800074 	movhi	r2,1
    fb70:	10910404 	addi	r2,r2,17424
    fb74:	10800017 	ldw	r2,0(r2)
    fb78:	1000031e 	bne	r2,zero,fb88 <write+0xcc>
    fb7c:	00c00074 	movhi	r3,1
    fb80:	18d81b04 	addi	r3,r3,24684
    fb84:	00000206 	br	fb90 <write+0xd4>
    fb88:	103ee83a 	callr	r2
    fb8c:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fb90:	00801444 	movi	r2,81
    fb94:	18800015 	stw	r2,0(r3)
    fb98:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    fb9c:	8005883a 	mov	r2,r16
    fba0:	dfc00117 	ldw	ra,4(sp)
    fba4:	dc000017 	ldw	r16,0(sp)
    fba8:	dec00204 	addi	sp,sp,8
    fbac:	f800283a 	ret

0000fbb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fbb0:	deffff04 	addi	sp,sp,-4
    fbb4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    fbb8:	00117f80 	call	117f8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fbbc:	00800044 	movi	r2,1
    fbc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fbc4:	dfc00017 	ldw	ra,0(sp)
    fbc8:	dec00104 	addi	sp,sp,4
    fbcc:	f800283a 	ret

0000fbd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fbd0:	defffd04 	addi	sp,sp,-12
    fbd4:	dfc00215 	stw	ra,8(sp)
    fbd8:	dc400115 	stw	r17,4(sp)
    fbdc:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    fbe0:	01040034 	movhi	r4,4096
    fbe4:	21080004 	addi	r4,r4,8192
    fbe8:	000b883a 	mov	r5,zero
    fbec:	01800044 	movi	r6,1
    fbf0:	01c00204 	movi	r7,8
    fbf4:	00104180 	call	10418 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, JTAG_UART_0);
    fbf8:	04400074 	movhi	r17,1
    fbfc:	8c4c8004 	addi	r17,r17,12800
    fc00:	8809883a 	mov	r4,r17
    fc04:	000b883a 	mov	r5,zero
    fc08:	000d883a 	mov	r6,zero
    fc0c:	000ff140 	call	ff14 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fc10:	04000074 	movhi	r16,1
    fc14:	84110104 	addi	r16,r16,17412
    fc18:	893ff604 	addi	r4,r17,-40
    fc1c:	800b883a 	mov	r5,r16
    fc20:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc24:	01000074 	movhi	r4,1
    fc28:	21108e04 	addi	r4,r4,16952
    fc2c:	800b883a 	mov	r5,r16
    fc30:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc34:	01000074 	movhi	r4,1
    fc38:	21109a04 	addi	r4,r4,17000
    fc3c:	800b883a 	mov	r5,r16
    fc40:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc44:	01000074 	movhi	r4,1
    fc48:	2110a504 	addi	r4,r4,17044
    fc4c:	800b883a 	mov	r5,r16
    fc50:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc54:	01000074 	movhi	r4,1
    fc58:	2110b004 	addi	r4,r4,17088
    fc5c:	800b883a 	mov	r5,r16
    fc60:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc64:	01000074 	movhi	r4,1
    fc68:	2110bb04 	addi	r4,r4,17132
    fc6c:	800b883a 	mov	r5,r16
    fc70:	00112e40 	call	112e4 <alt_dev_llist_insert>
    fc74:	01000074 	movhi	r4,1
    fc78:	2110c604 	addi	r4,r4,17176
    fc7c:	800b883a 	mov	r5,r16
    fc80:	00112e40 	call	112e4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    fc84:	01000074 	movhi	r4,1
    fc88:	2110d104 	addi	r4,r4,17220
    fc8c:	20800a17 	ldw	r2,40(r4)
    fc90:	10800104 	addi	r2,r2,4
    fc94:	10c0000b 	ldhu	r3,0(r2)
    fc98:	20c00c15 	stw	r3,48(r4)
    fc9c:	10800017 	ldw	r2,0(r2)
    fca0:	100ad43a 	srli	r5,r2,16
    fca4:	21400d15 	stw	r5,52(r4)
    fca8:	00801004 	movi	r2,64
    fcac:	10c00436 	bltu	r2,r3,fcc0 <alt_sys_init+0xf0>
    fcb0:	00800fc4 	movi	r2,63
    fcb4:	20800f15 	stw	r2,60(r4)
    fcb8:	00800184 	movi	r2,6
    fcbc:	20801015 	stw	r2,64(r4)
    fcc0:	00800804 	movi	r2,32
    fcc4:	11400436 	bltu	r2,r5,fcd8 <alt_sys_init+0x108>
    fcc8:	00c007c4 	movi	r3,31
    fccc:	00800074 	movhi	r2,1
    fcd0:	1090d104 	addi	r2,r2,17220
    fcd4:	10c01115 	stw	r3,68(r2)
    fcd8:	04000074 	movhi	r16,1
    fcdc:	8410d104 	addi	r16,r16,17220
    fce0:	8009883a 	mov	r4,r16
    fce4:	00107940 	call	10794 <alt_up_char_buffer_init>
    fce8:	8009883a 	mov	r4,r16
    fcec:	01400074 	movhi	r5,1
    fcf0:	29510104 	addi	r5,r5,17412
    fcf4:	00112e40 	call	112e4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    fcf8:	01800074 	movhi	r6,1
    fcfc:	3190e304 	addi	r6,r6,17292
    fd00:	30c00a17 	ldw	r3,40(r6)
    fd04:	18800017 	ldw	r2,0(r3)
    fd08:	30800b15 	stw	r2,44(r6)
    fd0c:	18800117 	ldw	r2,4(r3)
    fd10:	30800c15 	stw	r2,48(r6)
    fd14:	19000204 	addi	r4,r3,8
    fd18:	2080000b 	ldhu	r2,0(r4)
    fd1c:	30800f15 	stw	r2,60(r6)
    fd20:	20800017 	ldw	r2,0(r4)
    fd24:	1004d43a 	srli	r2,r2,16
    fd28:	30801015 	stw	r2,64(r6)
    fd2c:	18c00304 	addi	r3,r3,12
    fd30:	18800017 	ldw	r2,0(r3)
    fd34:	1005d07a 	srai	r2,r2,1
    fd38:	01000044 	movi	r4,1
    fd3c:	1104703a 	and	r2,r2,r4
    fd40:	30800d15 	stw	r2,52(r6)
    fd44:	18800017 	ldw	r2,0(r3)
    fd48:	1005d13a 	srai	r2,r2,4
    fd4c:	114003cc 	andi	r5,r2,15
    fd50:	31400e15 	stw	r5,56(r6)
    fd54:	1a000017 	ldw	r8,0(r3)
    fd58:	400ed43a 	srli	r7,r8,16
    fd5c:	2900021e 	bne	r5,r4,fd68 <alt_sys_init+0x198>
    fd60:	30001115 	stw	zero,68(r6)
    fd64:	00000b06 	br	fd94 <alt_sys_init+0x1c4>
    fd68:	00800084 	movi	r2,2
    fd6c:	2880051e 	bne	r5,r2,fd84 <alt_sys_init+0x1b4>
    fd70:	00c00044 	movi	r3,1
    fd74:	00800074 	movhi	r2,1
    fd78:	1090e304 	addi	r2,r2,17292
    fd7c:	10c01115 	stw	r3,68(r2)
    fd80:	00000406 	br	fd94 <alt_sys_init+0x1c4>
    fd84:	00c00084 	movi	r3,2
    fd88:	00800074 	movhi	r2,1
    fd8c:	1090e304 	addi	r2,r2,17292
    fd90:	10c01115 	stw	r3,68(r2)
    fd94:	01000074 	movhi	r4,1
    fd98:	2110e304 	addi	r4,r4,17292
    fd9c:	38c03fcc 	andi	r3,r7,255
    fda0:	01800804 	movi	r6,32
    fda4:	30c5c83a 	sub	r2,r6,r3
    fda8:	017fffc4 	movi	r5,-1
    fdac:	2884d83a 	srl	r2,r5,r2
    fdb0:	20801215 	stw	r2,72(r4)
    fdb4:	20801117 	ldw	r2,68(r4)
    fdb8:	1887883a 	add	r3,r3,r2
    fdbc:	20c01315 	stw	r3,76(r4)
    fdc0:	4004d63a 	srli	r2,r8,24
    fdc4:	308dc83a 	sub	r6,r6,r2
    fdc8:	298ad83a 	srl	r5,r5,r6
    fdcc:	21401415 	stw	r5,80(r4)
    fdd0:	01400074 	movhi	r5,1
    fdd4:	29510104 	addi	r5,r5,17412
    fdd8:	00112e40 	call	112e4 <alt_dev_llist_insert>
}
    fddc:	dfc00217 	ldw	ra,8(sp)
    fde0:	dc400117 	ldw	r17,4(sp)
    fde4:	dc000017 	ldw	r16,0(sp)
    fde8:	dec00304 	addi	sp,sp,12
    fdec:	f800283a 	ret

0000fdf0 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fdf0:	deffff04 	addi	sp,sp,-4
    fdf4:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fdf8:	21000017 	ldw	r4,0(r4)
    fdfc:	21000a04 	addi	r4,r4,40
    fe00:	00100c00 	call	100c0 <altera_avalon_jtag_uart_ioctl>
}
    fe04:	dfc00017 	ldw	ra,0(sp)
    fe08:	dec00104 	addi	sp,sp,4
    fe0c:	f800283a 	ret

0000fe10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fe10:	deffff04 	addi	sp,sp,-4
    fe14:	dfc00015 	stw	ra,0(sp)
    fe18:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fe1c:	21000017 	ldw	r4,0(r4)
    fe20:	21000a04 	addi	r4,r4,40
    fe24:	11400217 	ldw	r5,8(r2)
    fe28:	000fe880 	call	fe88 <altera_avalon_jtag_uart_close>
}
    fe2c:	dfc00017 	ldw	ra,0(sp)
    fe30:	dec00104 	addi	sp,sp,4
    fe34:	f800283a 	ret

0000fe38 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fe38:	deffff04 	addi	sp,sp,-4
    fe3c:	dfc00015 	stw	ra,0(sp)
    fe40:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fe44:	21000017 	ldw	r4,0(r4)
    fe48:	21000a04 	addi	r4,r4,40
    fe4c:	11c00217 	ldw	r7,8(r2)
    fe50:	001029c0 	call	1029c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fe54:	dfc00017 	ldw	ra,0(sp)
    fe58:	dec00104 	addi	sp,sp,4
    fe5c:	f800283a 	ret

0000fe60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe60:	deffff04 	addi	sp,sp,-4
    fe64:	dfc00015 	stw	ra,0(sp)
    fe68:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fe6c:	21000017 	ldw	r4,0(r4)
    fe70:	21000a04 	addi	r4,r4,40
    fe74:	11c00217 	ldw	r7,8(r2)
    fe78:	00101340 	call	10134 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fe7c:	dfc00017 	ldw	ra,0(sp)
    fe80:	dec00104 	addi	sp,sp,4
    fe84:	f800283a 	ret

0000fe88 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fe88:	21800c17 	ldw	r6,48(r4)
    fe8c:	2950000c 	andi	r5,r5,16384
    fe90:	280b003a 	cmpeq	r5,r5,zero
    fe94:	00000306 	br	fea4 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    fe98:	2800021e 	bne	r5,zero,fea4 <altera_avalon_jtag_uart_close+0x1c>
    fe9c:	00bffd44 	movi	r2,-11
    fea0:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fea4:	20800d17 	ldw	r2,52(r4)
    fea8:	11800326 	beq	r2,r6,feb8 <altera_avalon_jtag_uart_close+0x30>
    feac:	20c00917 	ldw	r3,36(r4)
    feb0:	20800117 	ldw	r2,4(r4)
    feb4:	18bff836 	bltu	r3,r2,fe98 <altera_avalon_jtag_uart_close+0x10>
    feb8:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    febc:	f800283a 	ret

0000fec0 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fec0:	20800017 	ldw	r2,0(r4)
    fec4:	10c00104 	addi	r3,r2,4
    fec8:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fecc:	01410004 	movi	r5,1024
    fed0:	1144703a 	and	r2,r2,r5
    fed4:	10000526 	beq	r2,zero,feec <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fed8:	20800817 	ldw	r2,32(r4)
    fedc:	1144b03a 	or	r2,r2,r5
    fee0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fee4:	20000915 	stw	zero,36(r4)
    fee8:	00000606 	br	ff04 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    feec:	20c00917 	ldw	r3,36(r4)
    fef0:	00a00034 	movhi	r2,32768
    fef4:	10bfff04 	addi	r2,r2,-4
    fef8:	10c00236 	bltu	r2,r3,ff04 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    fefc:	18800044 	addi	r2,r3,1
    ff00:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ff04:	00800074 	movhi	r2,1
    ff08:	10982004 	addi	r2,r2,24704
    ff0c:	10800017 	ldw	r2,0(r2)
    ff10:	f800283a 	ret

0000ff14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ff14:	defffe04 	addi	sp,sp,-8
    ff18:	dfc00115 	stw	ra,4(sp)
    ff1c:	dc000015 	stw	r16,0(sp)
    ff20:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff24:	00c00044 	movi	r3,1
    ff28:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ff2c:	20800017 	ldw	r2,0(r4)
    ff30:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    ff34:	3009883a 	mov	r4,r6
    ff38:	800b883a 	mov	r5,r16
    ff3c:	01800074 	movhi	r6,1
    ff40:	31bfe304 	addi	r6,r6,-116
    ff44:	00114e00 	call	114e0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ff48:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ff4c:	81000204 	addi	r4,r16,8
    ff50:	00800074 	movhi	r2,1
    ff54:	10982004 	addi	r2,r2,24704
    ff58:	11400017 	ldw	r5,0(r2)
    ff5c:	01800074 	movhi	r6,1
    ff60:	31bfb004 	addi	r6,r6,-320
    ff64:	800f883a 	mov	r7,r16
    ff68:	00112340 	call	11234 <alt_alarm_start>
    ff6c:	1000030e 	bge	r2,zero,ff7c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ff70:	00a00034 	movhi	r2,32768
    ff74:	10bfffc4 	addi	r2,r2,-1
    ff78:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ff7c:	dfc00117 	ldw	ra,4(sp)
    ff80:	dc000017 	ldw	r16,0(sp)
    ff84:	dec00204 	addi	sp,sp,8
    ff88:	f800283a 	ret

0000ff8c <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ff8c:	22000017 	ldw	r8,0(r4)
    ff90:	03800104 	movi	r14,4
    ff94:	4399883a 	add	r12,r8,r14
    ff98:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ff9c:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ffa0:	5880c00c 	andi	r2,r11,768
    ffa4:	10004526 	beq	r2,zero,100bc <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ffa8:	5880400c 	andi	r2,r11,256
    ffac:	10002126 	beq	r2,zero,10034 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ffb0:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ffb4:	10800044 	addi	r2,r2,1
    ffb8:	1081ffcc 	andi	r2,r2,2047
    ffbc:	20c00b17 	ldw	r3,44(r4)
    ffc0:	10c01626 	beq	r2,r3,1001c <altera_avalon_jtag_uart_irq+0x90>
    ffc4:	02a00014 	movui	r10,32768
    ffc8:	02400e04 	movi	r9,56
    ffcc:	01c00044 	movi	r7,1
    ffd0:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ffd4:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ffd8:	2a84703a 	and	r2,r5,r10
    ffdc:	10000d26 	beq	r2,zero,10014 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ffe0:	20800a17 	ldw	r2,40(r4)
    ffe4:	1105883a 	add	r2,r2,r4
    ffe8:	1245883a 	add	r2,r2,r9
    ffec:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fff0:	20800a17 	ldw	r2,40(r4)
    fff4:	11c5883a 	add	r2,r2,r7
    fff8:	1184703a 	and	r2,r2,r6
    fffc:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10000:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   10004:	11c5883a 	add	r2,r2,r7
   10008:	1184703a 	and	r2,r2,r6
   1000c:	20c00b17 	ldw	r3,44(r4)
   10010:	10fff01e 	bne	r2,r3,ffd4 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10014:	2b44703a 	and	r2,r5,r13
   10018:	10000626 	beq	r2,zero,10034 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1001c:	20800817 	ldw	r2,32(r4)
   10020:	00ffff84 	movi	r3,-2
   10024:	10c4703a 	and	r2,r2,r3
   10028:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1002c:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10030:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10034:	5880800c 	andi	r2,r11,512
   10038:	103fd826 	beq	r2,zero,ff9c <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1003c:	5b44703a 	and	r2,r11,r13
   10040:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   10044:	283fd526 	beq	r5,zero,ff9c <altera_avalon_jtag_uart_irq+0x10>
   10048:	20c00d17 	ldw	r3,52(r4)
   1004c:	20800c17 	ldw	r2,48(r4)
   10050:	18801126 	beq	r3,r2,10098 <altera_avalon_jtag_uart_irq+0x10c>
   10054:	02420e04 	movi	r9,2104
   10058:	01800044 	movi	r6,1
   1005c:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10060:	20800d17 	ldw	r2,52(r4)
   10064:	1105883a 	add	r2,r2,r4
   10068:	1245883a 	add	r2,r2,r9
   1006c:	10800007 	ldb	r2,0(r2)
   10070:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10074:	20800d17 	ldw	r2,52(r4)
   10078:	1185883a 	add	r2,r2,r6
   1007c:	11c4703a 	and	r2,r2,r7
   10080:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10084:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10088:	283fc426 	beq	r5,zero,ff9c <altera_avalon_jtag_uart_irq+0x10>
   1008c:	20c00d17 	ldw	r3,52(r4)
   10090:	20800c17 	ldw	r2,48(r4)
   10094:	18bff21e 	bne	r3,r2,10060 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10098:	20c00817 	ldw	r3,32(r4)
   1009c:	00bfff44 	movi	r2,-3
   100a0:	1886703a 	and	r3,r3,r2
   100a4:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   100a8:	20800017 	ldw	r2,0(r4)
   100ac:	1385883a 	add	r2,r2,r14
   100b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100b4:	60800037 	ldwio	r2,0(r12)
   100b8:	003fb806 	br	ff9c <altera_avalon_jtag_uart_irq+0x10>
   100bc:	f800283a 	ret

000100c0 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   100c0:	009a8044 	movi	r2,27137
   100c4:	28800326 	beq	r5,r2,100d4 <altera_avalon_jtag_uart_ioctl+0x14>
   100c8:	009a8084 	movi	r2,27138
   100cc:	2880171e 	bne	r5,r2,1012c <altera_avalon_jtag_uart_ioctl+0x6c>
   100d0:	00000d06 	br	10108 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   100d4:	20c00117 	ldw	r3,4(r4)
   100d8:	00a00034 	movhi	r2,32768
   100dc:	10bfffc4 	addi	r2,r2,-1
   100e0:	18801226 	beq	r3,r2,1012c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   100e4:	31800017 	ldw	r6,0(r6)
   100e8:	30ffff84 	addi	r3,r6,-2
   100ec:	10bfff44 	addi	r2,r2,-3
   100f0:	10c0022e 	bgeu	r2,r3,100fc <altera_avalon_jtag_uart_ioctl+0x3c>
   100f4:	01a00034 	movhi	r6,32768
   100f8:	31bfff84 	addi	r6,r6,-2
   100fc:	21800115 	stw	r6,4(r4)
   10100:	0005883a 	mov	r2,zero
   10104:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10108:	20c00117 	ldw	r3,4(r4)
   1010c:	00a00034 	movhi	r2,32768
   10110:	10bfffc4 	addi	r2,r2,-1
   10114:	18800526 	beq	r3,r2,1012c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10118:	20800917 	ldw	r2,36(r4)
   1011c:	10c5803a 	cmpltu	r2,r2,r3
   10120:	30800015 	stw	r2,0(r6)
   10124:	0005883a 	mov	r2,zero
   10128:	f800283a 	ret
   1012c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   10130:	f800283a 	ret

00010134 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10134:	defff604 	addi	sp,sp,-40
   10138:	dfc00915 	stw	ra,36(sp)
   1013c:	df000815 	stw	fp,32(sp)
   10140:	ddc00715 	stw	r23,28(sp)
   10144:	dd800615 	stw	r22,24(sp)
   10148:	dd400515 	stw	r21,20(sp)
   1014c:	dd000415 	stw	r20,16(sp)
   10150:	dcc00315 	stw	r19,12(sp)
   10154:	dc800215 	stw	r18,8(sp)
   10158:	dc400115 	stw	r17,4(sp)
   1015c:	dc000015 	stw	r16,0(sp)
   10160:	2025883a 	mov	r18,r4
   10164:	282f883a 	mov	r23,r5
   10168:	3027883a 	mov	r19,r6
   1016c:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10170:	0180220e 	bge	zero,r6,101fc <altera_avalon_jtag_uart_read+0xc8>
   10174:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10178:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
   1017c:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
   10180:	b4400236 	bltu	r22,r17,1018c <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
   10184:	b461c83a 	sub	r16,r22,r17
   10188:	00000206 	br	10194 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1018c:	00820004 	movi	r2,2048
   10190:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
   10194:	80000d26 	beq	r16,zero,101cc <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
   10198:	9829883a 	mov	r20,r19
   1019c:	9c001d36 	bltu	r19,r16,10214 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   101a0:	91400e04 	addi	r5,r18,56
   101a4:	a809883a 	mov	r4,r21
   101a8:	2c4b883a 	add	r5,r5,r17
   101ac:	800d883a 	mov	r6,r16
   101b0:	0007da00 	call	7da0 <memcpy>
      ptr   += n;
   101b4:	ac2b883a 	add	r21,r21,r16
      space -= n;
   101b8:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101bc:	8445883a 	add	r2,r16,r17
   101c0:	1081ffcc 	andi	r2,r2,2047
   101c4:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
   101c8:	04ffeb16 	blt	zero,r19,10178 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   101cc:	adc01c1e 	bne	r21,r23,10240 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   101d0:	e090000c 	andi	r2,fp,16384
   101d4:	10000d1e 	bne	r2,zero,1020c <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   101d8:	90800a17 	ldw	r2,40(r18)
   101dc:	b080031e 	bne	r22,r2,101ec <altera_avalon_jtag_uart_read+0xb8>
   101e0:	90c00917 	ldw	r3,36(r18)
   101e4:	90800117 	ldw	r2,4(r18)
   101e8:	18bffb36 	bltu	r3,r2,101d8 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   101ec:	90800a17 	ldw	r2,40(r18)
   101f0:	b0800426 	beq	r22,r2,10204 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   101f4:	04c0030e 	bge	zero,r19,10204 <altera_avalon_jtag_uart_read+0xd0>
   101f8:	003fde06 	br	10174 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   101fc:	3890000c 	andi	r2,r7,16384
   10200:	1000021e 	bne	r2,zero,1020c <altera_avalon_jtag_uart_read+0xd8>
   10204:	00bffec4 	movi	r2,-5
   10208:	00001806 	br	1026c <altera_avalon_jtag_uart_read+0x138>
   1020c:	00bffd44 	movi	r2,-11
   10210:	00001606 	br	1026c <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   10214:	91400e04 	addi	r5,r18,56
   10218:	a809883a 	mov	r4,r21
   1021c:	894b883a 	add	r5,r17,r5
   10220:	980d883a 	mov	r6,r19
   10224:	0007da00 	call	7da0 <memcpy>
      ptr   += n;
   10228:	aceb883a 	add	r21,r21,r19
      space -= n;
   1022c:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10230:	a445883a 	add	r2,r20,r17
   10234:	1081ffcc 	andi	r2,r2,2047
   10238:	90800b15 	stw	r2,44(r18)
   1023c:	003fe306 	br	101cc <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10240:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10244:	00bfff84 	movi	r2,-2
   10248:	2084703a 	and	r2,r4,r2
   1024c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10250:	90800817 	ldw	r2,32(r18)
   10254:	10800054 	ori	r2,r2,1
   10258:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1025c:	90c00017 	ldw	r3,0(r18)
   10260:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10264:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   10268:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   1026c:	dfc00917 	ldw	ra,36(sp)
   10270:	df000817 	ldw	fp,32(sp)
   10274:	ddc00717 	ldw	r23,28(sp)
   10278:	dd800617 	ldw	r22,24(sp)
   1027c:	dd400517 	ldw	r21,20(sp)
   10280:	dd000417 	ldw	r20,16(sp)
   10284:	dcc00317 	ldw	r19,12(sp)
   10288:	dc800217 	ldw	r18,8(sp)
   1028c:	dc400117 	ldw	r17,4(sp)
   10290:	dc000017 	ldw	r16,0(sp)
   10294:	dec00a04 	addi	sp,sp,40
   10298:	f800283a 	ret

0001029c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1029c:	defff804 	addi	sp,sp,-32
   102a0:	dfc00715 	stw	ra,28(sp)
   102a4:	dd800615 	stw	r22,24(sp)
   102a8:	dd400515 	stw	r21,20(sp)
   102ac:	dd000415 	stw	r20,16(sp)
   102b0:	dcc00315 	stw	r19,12(sp)
   102b4:	dc800215 	stw	r18,8(sp)
   102b8:	dc400115 	stw	r17,4(sp)
   102bc:	dc000015 	stw	r16,0(sp)
   102c0:	2021883a 	mov	r16,r4
   102c4:	282d883a 	mov	r22,r5
   102c8:	3011883a 	mov	r8,r6
   102cc:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   102d0:	01800616 	blt	zero,r6,102ec <altera_avalon_jtag_uart_write+0x50>
   102d4:	2829883a 	mov	r20,r5
   102d8:	00002106 	br	10360 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   102dc:	a585c83a 	sub	r2,r20,r22
   102e0:	00004306 	br	103f0 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
   102e4:	00bffd44 	movi	r2,-11
   102e8:	00004106 	br	103f0 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   102ec:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   102f0:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   102f4:	81400d17 	ldw	r5,52(r16)

      if (in < out)
   102f8:	9140032e 	bgeu	r18,r5,10308 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   102fc:	2c85c83a 	sub	r2,r5,r18
   10300:	11bfffc4 	addi	r6,r2,-1
   10304:	00000606 	br	10320 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
   10308:	28000326 	beq	r5,zero,10318 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1030c:	00820004 	movi	r2,2048
   10310:	148dc83a 	sub	r6,r2,r18
   10314:	00000206 	br	10320 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10318:	0081ffc4 	movi	r2,2047
   1031c:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
   10320:	30002626 	beq	r6,zero,103bc <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
   10324:	4027883a 	mov	r19,r8
   10328:	3023883a 	mov	r17,r6
   1032c:	4180012e 	bgeu	r8,r6,10334 <altera_avalon_jtag_uart_write+0x98>
   10330:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   10334:	81020e04 	addi	r4,r16,2104
   10338:	2489883a 	add	r4,r4,r18
   1033c:	a00b883a 	mov	r5,r20
   10340:	880d883a 	mov	r6,r17
   10344:	0007da00 	call	7da0 <memcpy>
      ptr   += n;
   10348:	a469883a 	add	r20,r20,r17
      count -= n;
   1034c:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10350:	9445883a 	add	r2,r18,r17
   10354:	1081ffcc 	andi	r2,r2,2047
   10358:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1035c:	023fe416 	blt	zero,r8,102f0 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10360:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10364:	00bfff84 	movi	r2,-2
   10368:	2084703a 	and	r2,r4,r2
   1036c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10370:	80800817 	ldw	r2,32(r16)
   10374:	10800094 	ori	r2,r2,2
   10378:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1037c:	80c00017 	ldw	r3,0(r16)
   10380:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10384:	2001703a 	wrctl	status,r4
   10388:	00000706 	br	103a8 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1038c:	80800d17 	ldw	r2,52(r16)
   10390:	1140031e 	bne	r2,r5,103a0 <altera_avalon_jtag_uart_write+0x104>
   10394:	80c00917 	ldw	r3,36(r16)
   10398:	80800117 	ldw	r2,4(r16)
   1039c:	18bffb36 	bltu	r3,r2,1038c <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   103a0:	80800d17 	ldw	r2,52(r16)
   103a4:	117fed1e 	bne	r2,r5,1035c <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   103a8:	b53fcc1e 	bne	r22,r20,102dc <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
   103ac:	a890000c 	andi	r2,r21,16384
   103b0:	103fcc1e 	bne	r2,zero,102e4 <altera_avalon_jtag_uart_write+0x48>
   103b4:	00bffec4 	movi	r2,-5
   103b8:	00000d06 	br	103f0 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103bc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103c0:	00bfff84 	movi	r2,-2
   103c4:	2084703a 	and	r2,r4,r2
   103c8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   103cc:	80800817 	ldw	r2,32(r16)
   103d0:	10800094 	ori	r2,r2,2
   103d4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   103d8:	80c00017 	ldw	r3,0(r16)
   103dc:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103e0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   103e4:	a890000c 	andi	r2,r21,16384
   103e8:	103fe826 	beq	r2,zero,1038c <altera_avalon_jtag_uart_write+0xf0>
   103ec:	003fee06 	br	103a8 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
   103f0:	dfc00717 	ldw	ra,28(sp)
   103f4:	dd800617 	ldw	r22,24(sp)
   103f8:	dd400517 	ldw	r21,20(sp)
   103fc:	dd000417 	ldw	r20,16(sp)
   10400:	dcc00317 	ldw	r19,12(sp)
   10404:	dc800217 	ldw	r18,8(sp)
   10408:	dc400117 	ldw	r17,4(sp)
   1040c:	dc000017 	ldw	r16,0(sp)
   10410:	dec00804 	addi	sp,sp,32
   10414:	f800283a 	ret

00010418 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10418:	deffff04 	addi	sp,sp,-4
   1041c:	dfc00015 	stw	ra,0(sp)
   10420:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10424:	00c00074 	movhi	r3,1
   10428:	18d82004 	addi	r3,r3,24704
   1042c:	18800017 	ldw	r2,0(r3)
   10430:	1000011e 	bne	r2,zero,10438 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
   10434:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10438:	008001c4 	movi	r2,7
   1043c:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   10440:	3009883a 	mov	r4,r6
   10444:	01800074 	movhi	r6,1
   10448:	31811704 	addi	r6,r6,1116
   1044c:	00114e00 	call	114e0 <alt_irq_register>
#endif  
}
   10450:	dfc00017 	ldw	ra,0(sp)
   10454:	dec00104 	addi	sp,sp,4
   10458:	f800283a 	ret

0001045c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1045c:	defffe04 	addi	sp,sp,-8
   10460:	dfc00115 	stw	ra,4(sp)
   10464:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10468:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1046c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10470:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10474:	00bfff84 	movi	r2,-2
   10478:	8084703a 	and	r2,r16,r2
   1047c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   10480:	001174c0 	call	1174c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10484:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   10488:	dfc00117 	ldw	ra,4(sp)
   1048c:	dc000017 	ldw	r16,0(sp)
   10490:	dec00204 	addi	sp,sp,8
   10494:	f800283a 	ret

00010498 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
   10498:	200495ba 	slli	r2,r4,22
}
   1049c:	1005d7fa 	srai	r2,r2,31
   104a0:	f800283a 	ret

000104a4 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   104a4:	deffff04 	addi	sp,sp,-4
   104a8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   104ac:	01400074 	movhi	r5,1
   104b0:	29510104 	addi	r5,r5,17412
   104b4:	00113540 	call	11354 <alt_find_dev>

  return dev;
}
   104b8:	dfc00017 	ldw	ra,0(sp)
   104bc:	dec00104 	addi	sp,sp,4
   104c0:	f800283a 	ret

000104c4 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   104c4:	defffd04 	addi	sp,sp,-12
   104c8:	dfc00215 	stw	ra,8(sp)
   104cc:	dc400115 	stw	r17,4(sp)
   104d0:	dc000015 	stw	r16,0(sp)
   104d4:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   104d8:	20800a17 	ldw	r2,40(r4)
   104dc:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   104e0:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   104e4:	8009883a 	mov	r4,r16
   104e8:	00104980 	call	10498 <alt_up_rs232_check_parity>
   104ec:	88800005 	stb	r2,0(r17)
   104f0:	8420000c 	andi	r16,r16,32768
   104f4:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
   104f8:	80bfffc4 	addi	r2,r16,-1
   104fc:	dfc00217 	ldw	ra,8(sp)
   10500:	dc400117 	ldw	r17,4(sp)
   10504:	dc000017 	ldw	r16,0(sp)
   10508:	dec00304 	addi	sp,sp,12
   1050c:	f800283a 	ret

00010510 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   10510:	defff904 	addi	sp,sp,-28
   10514:	dfc00615 	stw	ra,24(sp)
   10518:	dd000515 	stw	r20,20(sp)
   1051c:	dcc00415 	stw	r19,16(sp)
   10520:	dc800315 	stw	r18,12(sp)
   10524:	dc400215 	stw	r17,8(sp)
   10528:	dc000115 	stw	r16,4(sp)
   1052c:	2821883a 	mov	r16,r5
   10530:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   10534:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   10538:	3000021e 	bne	r6,zero,10544 <alt_up_rs232_read_fd+0x34>
   1053c:	0025883a 	mov	r18,zero
   10540:	00000a06 	br	1056c <alt_up_rs232_read_fd+0x5c>
   10544:	0025883a 	mov	r18,zero
   10548:	04400044 	movi	r17,1
   1054c:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
   10550:	8461883a 	add	r16,r16,r17
   10554:	9809883a 	mov	r4,r19
   10558:	d80d883a 	mov	r6,sp
   1055c:	00104c40 	call	104c4 <alt_up_rs232_read_data>
   10560:	1000021e 	bne	r2,zero,1056c <alt_up_rs232_read_fd+0x5c>
			count++;
   10564:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   10568:	a4bff81e 	bne	r20,r18,1054c <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
   1056c:	9005883a 	mov	r2,r18
   10570:	dfc00617 	ldw	ra,24(sp)
   10574:	dd000517 	ldw	r20,20(sp)
   10578:	dcc00417 	ldw	r19,16(sp)
   1057c:	dc800317 	ldw	r18,12(sp)
   10580:	dc400217 	ldw	r17,8(sp)
   10584:	dc000117 	ldw	r16,4(sp)
   10588:	dec00704 	addi	sp,sp,28
   1058c:	f800283a 	ret

00010590 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10590:	20800a17 	ldw	r2,40(r4)
   10594:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
   10598:	1004d43a 	srli	r2,r2,16
   1059c:	f800283a 	ret

000105a0 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   105a0:	20800a17 	ldw	r2,40(r4)
   105a4:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   105a8:	29403fcc 	andi	r5,r5,255
   105ac:	11400035 	stwio	r5,0(r2)
	return 0;
}
   105b0:	0005883a 	mov	r2,zero
   105b4:	f800283a 	ret

000105b8 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   105b8:	defffb04 	addi	sp,sp,-20
   105bc:	dfc00415 	stw	ra,16(sp)
   105c0:	dcc00315 	stw	r19,12(sp)
   105c4:	dc800215 	stw	r18,8(sp)
   105c8:	dc400115 	stw	r17,4(sp)
   105cc:	dc000015 	stw	r16,0(sp)
   105d0:	2827883a 	mov	r19,r5
   105d4:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   105d8:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
   105dc:	3000021e 	bne	r6,zero,105e8 <alt_up_rs232_write_fd+0x30>
   105e0:	0021883a 	mov	r16,zero
   105e4:	00000806 	br	10608 <alt_up_rs232_write_fd+0x50>
   105e8:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   105ec:	84c5883a 	add	r2,r16,r19
   105f0:	8809883a 	mov	r4,r17
   105f4:	11400003 	ldbu	r5,0(r2)
   105f8:	00105a00 	call	105a0 <alt_up_rs232_write_data>
   105fc:	1000021e 	bne	r2,zero,10608 <alt_up_rs232_write_fd+0x50>
		{
			count++;
   10600:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   10604:	943ff91e 	bne	r18,r16,105ec <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
   10608:	8005883a 	mov	r2,r16
   1060c:	dfc00417 	ldw	ra,16(sp)
   10610:	dcc00317 	ldw	r19,12(sp)
   10614:	dc800217 	ldw	r18,8(sp)
   10618:	dc400117 	ldw	r17,4(sp)
   1061c:	dc000017 	ldw	r16,0(sp)
   10620:	dec00504 	addi	sp,sp,20
   10624:	f800283a 	ret

00010628 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10628:	20800a17 	ldw	r2,40(r4)
   1062c:	10800104 	addi	r2,r2,4
   10630:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10634:	013fff84 	movi	r4,-2
   10638:	1906703a 	and	r3,r3,r4
   1063c:	10c00035 	stwio	r3,0(r2)
}
   10640:	f800283a 	ret

00010644 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10644:	20c00a17 	ldw	r3,40(r4)
   10648:	18c00104 	addi	r3,r3,4
   1064c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10650:	10800054 	ori	r2,r2,1
   10654:	18800035 	stwio	r2,0(r3)
}
   10658:	f800283a 	ret

0001065c <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1065c:	20800a17 	ldw	r2,40(r4)
   10660:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
   10664:	10bfffcc 	andi	r2,r2,65535
   10668:	f800283a 	ret

0001066c <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1066c:	20800c17 	ldw	r2,48(r4)
   10670:	30801c2e 	bgeu	r6,r2,106e4 <alt_up_char_buffer_string+0x78>
   10674:	20800d17 	ldw	r2,52(r4)
   10678:	38801a2e 	bgeu	r7,r2,106e4 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   1067c:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
   10680:	28c00003 	ldbu	r3,0(r5)
   10684:	18803fcc 	andi	r2,r3,255
   10688:	1080201c 	xori	r2,r2,128
   1068c:	10bfe004 	addi	r2,r2,-128
   10690:	10001626 	beq	r2,zero,106ec <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   10694:	3a04983a 	sll	r2,r7,r8
   10698:	308f883a 	add	r7,r6,r2
   1069c:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   106a0:	20800b17 	ldw	r2,44(r4)
   106a4:	3885883a 	add	r2,r7,r2
   106a8:	18c03fcc 	andi	r3,r3,255
   106ac:	18c0201c 	xori	r3,r3,128
   106b0:	18ffe004 	addi	r3,r3,-128
   106b4:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
   106b8:	320d883a 	add	r6,r6,r8
   106bc:	20800c17 	ldw	r2,48(r4)
   106c0:	3080082e 	bgeu	r6,r2,106e4 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
   106c4:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   106c8:	28c00003 	ldbu	r3,0(r5)
   106cc:	18803fcc 	andi	r2,r3,255
   106d0:	1080201c 	xori	r2,r2,128
   106d4:	10bfe004 	addi	r2,r2,-128
   106d8:	10000426 	beq	r2,zero,106ec <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
   106dc:	3a0f883a 	add	r7,r7,r8
   106e0:	003fef06 	br	106a0 <alt_up_char_buffer_string+0x34>
   106e4:	00bfffc4 	movi	r2,-1
   106e8:	f800283a 	ret
   106ec:	0005883a 	mov	r2,zero
	}
	return 0;
}
   106f0:	f800283a 	ret

000106f4 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   106f4:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   106f8:	20800c17 	ldw	r2,48(r4)
   106fc:	3080112e 	bgeu	r6,r2,10744 <alt_up_char_buffer_draw+0x50>
   10700:	20800d17 	ldw	r2,52(r4)
   10704:	38800f2e 	bgeu	r7,r2,10744 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   10708:	20c00f17 	ldw	r3,60(r4)
   1070c:	30c6703a 	and	r3,r6,r3
   10710:	20800e17 	ldw	r2,56(r4)
   10714:	1886983a 	sll	r3,r3,r2
   10718:	20801117 	ldw	r2,68(r4)
   1071c:	3884703a 	and	r2,r7,r2
   10720:	21001017 	ldw	r4,64(r4)
   10724:	1104983a 	sll	r2,r2,r4
   10728:	1886b03a 	or	r3,r3,r2
   1072c:	40800b17 	ldw	r2,44(r8)
   10730:	1887883a 	add	r3,r3,r2
   10734:	28803fcc 	andi	r2,r5,255
   10738:	18800025 	stbio	r2,0(r3)
   1073c:	0005883a 	mov	r2,zero
   10740:	f800283a 	ret

	return 0;
   10744:	00bfffc4 	movi	r2,-1
}
   10748:	f800283a 	ret

0001074c <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1074c:	20c00a17 	ldw	r3,40(r4)
   10750:	00800044 	movi	r2,1
   10754:	188000a5 	stbio	r2,2(r3)
   10758:	20800a17 	ldw	r2,40(r4)
   1075c:	10c00084 	addi	r3,r2,2
   10760:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   10764:	18800023 	ldbuio	r2,0(r3)
   10768:	1104703a 	and	r2,r2,r4
   1076c:	103ffd1e 	bne	r2,zero,10764 <alt_up_char_buffer_clear+0x18>
	return 0;
}
   10770:	f800283a 	ret

00010774 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   10774:	deffff04 	addi	sp,sp,-4
   10778:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1077c:	01400074 	movhi	r5,1
   10780:	29510104 	addi	r5,r5,17412
   10784:	00113540 	call	11354 <alt_find_dev>

  return dev;
}
   10788:	dfc00017 	ldw	ra,0(sp)
   1078c:	dec00104 	addi	sp,sp,4
   10790:	f800283a 	ret

00010794 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   10794:	defffe04 	addi	sp,sp,-8
   10798:	dfc00115 	stw	ra,4(sp)
   1079c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
   107a0:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
   107a4:	80800007 	ldb	r2,0(r16)
   107a8:	10000a26 	beq	r2,zero,107d4 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   107ac:	8009883a 	mov	r4,r16
   107b0:	01400074 	movhi	r5,1
   107b4:	2949f604 	addi	r5,r5,10200
   107b8:	0009b480 	call	9b48 <strcmp>
   107bc:	1000021e 	bne	r2,zero,107c8 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
   107c0:	80000005 	stb	zero,0(r16)
   107c4:	00000306 	br	107d4 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   107c8:	84000044 	addi	r16,r16,1
   107cc:	80800007 	ldb	r2,0(r16)
   107d0:	103ff61e 	bne	r2,zero,107ac <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
   107d4:	dfc00117 	ldw	ra,4(sp)
   107d8:	dc000017 	ldw	r16,0(sp)
   107dc:	dec00204 	addi	sp,sp,8
   107e0:	f800283a 	ret

000107e4 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   107e4:	da000017 	ldw	r8,0(sp)
   107e8:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
   107ec:	1800051e 	bne	r3,zero,10804 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   107f0:	29c5383a 	mul	r2,r5,r7
   107f4:	3085883a 	add	r2,r6,r2
   107f8:	1105883a 	add	r2,r2,r4
   107fc:	12000025 	stbio	r8,0(r2)
   10800:	f800283a 	ret
	else if (mode == 1)
   10804:	00800044 	movi	r2,1
   10808:	1880061e 	bne	r3,r2,10824 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   1080c:	29c5383a 	mul	r2,r5,r7
   10810:	3085883a 	add	r2,r6,r2
   10814:	1085883a 	add	r2,r2,r2
   10818:	1105883a 	add	r2,r2,r4
   1081c:	1200002d 	sthio	r8,0(r2)
   10820:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   10824:	29c5383a 	mul	r2,r5,r7
   10828:	1185883a 	add	r2,r2,r6
   1082c:	1085883a 	add	r2,r2,r2
   10830:	1085883a 	add	r2,r2,r2
   10834:	1105883a 	add	r2,r2,r4
   10838:	12000035 	stwio	r8,0(r2)
   1083c:	f800283a 	ret

00010840 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   10840:	defff304 	addi	sp,sp,-52
   10844:	dfc00c15 	stw	ra,48(sp)
   10848:	df000b15 	stw	fp,44(sp)
   1084c:	ddc00a15 	stw	r23,40(sp)
   10850:	dd800915 	stw	r22,36(sp)
   10854:	dd400815 	stw	r21,32(sp)
   10858:	dd000715 	stw	r20,28(sp)
   1085c:	dcc00615 	stw	r19,24(sp)
   10860:	dc800515 	stw	r18,20(sp)
   10864:	dc400415 	stw	r17,16(sp)
   10868:	dc000315 	stw	r16,12(sp)
   1086c:	3011883a 	mov	r8,r6
   10870:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   10874:	4987c83a 	sub	r3,r9,r6
   10878:	1800010e 	bge	r3,zero,10880 <alt_up_pixel_buffer_dma_draw_line+0x40>
   1087c:	00c7c83a 	sub	r3,zero,r3
   10880:	3945c83a 	sub	r2,r7,r5
   10884:	1000010e 	bge	r2,zero,1088c <alt_up_pixel_buffer_dma_draw_line+0x4c>
   10888:	0085c83a 	sub	r2,zero,r2
   1088c:	10c4803a 	cmplt	r2,r2,r3
   10890:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10894:	20c00e17 	ldw	r3,56(r4)
   10898:	00800044 	movi	r2,1
   1089c:	1880021e 	bne	r3,r2,108a8 <alt_up_pixel_buffer_dma_draw_line+0x68>
   108a0:	d8000215 	stw	zero,8(sp)
   108a4:	00000306 	br	108b4 <alt_up_pixel_buffer_dma_draw_line+0x74>
   108a8:	18c00098 	cmpnei	r3,r3,2
   108ac:	18c00044 	addi	r3,r3,1
   108b0:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   108b4:	20800d17 	ldw	r2,52(r4)
   108b8:	1000061e 	bne	r2,zero,108d4 <alt_up_pixel_buffer_dma_draw_line+0x94>
   108bc:	20801317 	ldw	r2,76(r4)
   108c0:	d8c00217 	ldw	r3,8(sp)
   108c4:	10c5c83a 	sub	r2,r2,r3
   108c8:	00c00044 	movi	r3,1
   108cc:	18ae983a 	sll	r23,r3,r2
   108d0:	00000106 	br	108d8 <alt_up_pixel_buffer_dma_draw_line+0x98>
   108d4:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
   108d8:	d8c00f17 	ldw	r3,60(sp)
   108dc:	00800044 	movi	r2,1
   108e0:	1880021e 	bne	r3,r2,108ec <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
   108e4:	25800c17 	ldw	r22,48(r4)
   108e8:	00000106 	br	108f0 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   108ec:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
   108f0:	50000326 	beq	r10,zero,10900 <alt_up_pixel_buffer_dma_draw_line+0xc0>
   108f4:	400d883a 	mov	r6,r8
   108f8:	4827883a 	mov	r19,r9
   108fc:	00000406 	br	10910 <alt_up_pixel_buffer_dma_draw_line+0xd0>
   10900:	280d883a 	mov	r6,r5
   10904:	400b883a 	mov	r5,r8
   10908:	3827883a 	mov	r19,r7
   1090c:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
   10910:	9980060e 	bge	r19,r6,1092c <alt_up_pixel_buffer_dma_draw_line+0xec>
   10914:	9805883a 	mov	r2,r19
   10918:	3027883a 	mov	r19,r6
   1091c:	100d883a 	mov	r6,r2
   10920:	3805883a 	mov	r2,r7
   10924:	280f883a 	mov	r7,r5
   10928:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1092c:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
   10930:	3969c83a 	sub	r20,r7,r5
   10934:	a000010e 	bge	r20,zero,1093c <alt_up_pixel_buffer_dma_draw_line+0xfc>
   10938:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
   1093c:	a804d7fa 	srli	r2,r21,31
   10940:	1545883a 	add	r2,r2,r21
   10944:	1005d07a 	srai	r2,r2,1
   10948:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
   1094c:	29c0020e 	bge	r5,r7,10958 <alt_up_pixel_buffer_dma_draw_line+0x118>
   10950:	07000044 	movi	fp,1
   10954:	00000106 	br	1095c <alt_up_pixel_buffer_dma_draw_line+0x11c>
   10958:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   1095c:	50000226 	beq	r10,zero,10968 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
   10960:	9980030e 	bge	r19,r6,10970 <alt_up_pixel_buffer_dma_draw_line+0x130>
   10964:	00002506 	br	109fc <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10968:	9980130e 	bge	r19,r6,109b8 <alt_up_pixel_buffer_dma_draw_line+0x178>
   1096c:	00002306 	br	109fc <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   10970:	3021883a 	mov	r16,r6
   10974:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   10978:	d8800e17 	ldw	r2,56(sp)
   1097c:	d8800015 	stw	r2,0(sp)
   10980:	d8c00217 	ldw	r3,8(sp)
   10984:	d8c00115 	stw	r3,4(sp)
   10988:	b009883a 	mov	r4,r22
   1098c:	b80b883a 	mov	r5,r23
   10990:	900d883a 	mov	r6,r18
   10994:	800f883a 	mov	r7,r16
   10998:	00107e40 	call	107e4 <helper_plot_pixel>
			error = error + deltay;
   1099c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   109a0:	0440020e 	bge	zero,r17,109ac <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
   109a4:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   109a8:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   109ac:	84000044 	addi	r16,r16,1
   109b0:	9c001216 	blt	r19,r16,109fc <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   109b4:	003ff006 	br	10978 <alt_up_pixel_buffer_dma_draw_line+0x138>
   109b8:	3021883a 	mov	r16,r6
   109bc:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   109c0:	d8800e17 	ldw	r2,56(sp)
   109c4:	d8800015 	stw	r2,0(sp)
   109c8:	d8c00217 	ldw	r3,8(sp)
   109cc:	d8c00115 	stw	r3,4(sp)
   109d0:	b009883a 	mov	r4,r22
   109d4:	b80b883a 	mov	r5,r23
   109d8:	800d883a 	mov	r6,r16
   109dc:	900f883a 	mov	r7,r18
   109e0:	00107e40 	call	107e4 <helper_plot_pixel>
			error = error + deltay;
   109e4:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   109e8:	0440020e 	bge	zero,r17,109f4 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
   109ec:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   109f0:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   109f4:	84000044 	addi	r16,r16,1
   109f8:	9c3ff10e 	bge	r19,r16,109c0 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   109fc:	dfc00c17 	ldw	ra,48(sp)
   10a00:	df000b17 	ldw	fp,44(sp)
   10a04:	ddc00a17 	ldw	r23,40(sp)
   10a08:	dd800917 	ldw	r22,36(sp)
   10a0c:	dd400817 	ldw	r21,32(sp)
   10a10:	dd000717 	ldw	r20,28(sp)
   10a14:	dcc00617 	ldw	r19,24(sp)
   10a18:	dc800517 	ldw	r18,20(sp)
   10a1c:	dc400417 	ldw	r17,16(sp)
   10a20:	dc000317 	ldw	r16,12(sp)
   10a24:	dec00d04 	addi	sp,sp,52
   10a28:	f800283a 	ret

00010a2c <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10a2c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10a30:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10a34:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
   10a38:	3980022e 	bgeu	r7,r6,10a44 <alt_up_pixel_buffer_dma_draw_vline+0x18>
   10a3c:	3011883a 	mov	r8,r6
   10a40:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   10a44:	2a405d2e 	bgeu	r5,r9,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10a48:	30805c2e 	bgeu	r6,r2,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10a4c:	40800136 	bltu	r8,r2,10a54 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
   10a50:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10a54:	d8c00117 	ldw	r3,4(sp)
   10a58:	00800044 	movi	r2,1
   10a5c:	1880021e 	bne	r3,r2,10a68 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10a60:	20c00c17 	ldw	r3,48(r4)
   10a64:	00000106 	br	10a6c <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10a68:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   10a6c:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10a70:	20800d17 	ldw	r2,52(r4)
   10a74:	1000281e 	bne	r2,zero,10b18 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   10a78:	22801317 	ldw	r10,76(r4)
   10a7c:	3284983a 	sll	r2,r6,r10
   10a80:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10a84:	21000e17 	ldw	r4,56(r4)
   10a88:	00800044 	movi	r2,1
   10a8c:	2080091e 	bne	r4,r2,10ab4 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
   10a90:	41804a36 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10a94:	1013883a 	mov	r9,r2
   10a98:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10a9c:	1945883a 	add	r2,r3,r5
   10aa0:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10aa4:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10aa8:	324d883a 	add	r6,r6,r9
   10aac:	41804336 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10ab0:	003ffa06 	br	10a9c <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10ab4:	00800084 	movi	r2,2
   10ab8:	2080021e 	bne	r4,r2,10ac4 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
   10abc:	4180032e 	bgeu	r8,r6,10acc <alt_up_pixel_buffer_dma_draw_vline+0xa0>
   10ac0:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10ac4:	41800a2e 	bgeu	r8,r6,10af0 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
   10ac8:	f800283a 	ret
   10acc:	294b883a 	add	r5,r5,r5
   10ad0:	02400044 	movi	r9,1
   10ad4:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10ad8:	28c5883a 	add	r2,r5,r3
   10adc:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10ae0:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10ae4:	324d883a 	add	r6,r6,r9
   10ae8:	41803436 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10aec:	003ffa06 	br	10ad8 <alt_up_pixel_buffer_dma_draw_vline+0xac>
   10af0:	2945883a 	add	r2,r5,r5
   10af4:	108b883a 	add	r5,r2,r2
   10af8:	02400044 	movi	r9,1
   10afc:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10b00:	28c5883a 	add	r2,r5,r3
   10b04:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10b08:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10b0c:	324d883a 	add	r6,r6,r9
   10b10:	41802a36 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b14:	003ffa06 	br	10b00 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10b18:	21000e17 	ldw	r4,56(r4)
   10b1c:	00800044 	movi	r2,1
   10b20:	20800b1e 	bne	r4,r2,10b50 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b24:	41802536 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b28:	4809883a 	mov	r4,r9
   10b2c:	3245383a 	mul	r2,r6,r9
   10b30:	1885883a 	add	r2,r3,r2
   10b34:	1145883a 	add	r2,r2,r5
   10b38:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10b3c:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b40:	30cd883a 	add	r6,r6,r3
   10b44:	1105883a 	add	r2,r2,r4
   10b48:	41801c36 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b4c:	003ffb06 	br	10b3c <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10b50:	00800084 	movi	r2,2
   10b54:	20800c1e 	bne	r4,r2,10b88 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b58:	41801836 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   10b5c:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
   10b60:	3105383a 	mul	r2,r6,r4
   10b64:	1887883a 	add	r3,r3,r2
   10b68:	294b883a 	add	r5,r5,r5
   10b6c:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10b70:	28c5883a 	add	r2,r5,r3
   10b74:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
   10b78:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b7c:	324d883a 	add	r6,r6,r9
   10b80:	41800e36 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10b84:	003ffa06 	br	10b70 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10b88:	41800c36 	bltu	r8,r6,10bbc <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10b8c:	4a45883a 	add	r2,r9,r9
   10b90:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
   10b94:	3105383a 	mul	r2,r6,r4
   10b98:	1887883a 	add	r3,r3,r2
   10b9c:	2945883a 	add	r2,r5,r5
   10ba0:	108b883a 	add	r5,r2,r2
   10ba4:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10ba8:	28c5883a 	add	r2,r5,r3
   10bac:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
   10bb0:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10bb4:	324d883a 	add	r6,r6,r9
   10bb8:	41bffb2e 	bgeu	r8,r6,10ba8 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
   10bbc:	f800283a 	ret

00010bc0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10bc0:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10bc4:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10bc8:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10bcc:	3140022e 	bgeu	r6,r5,10bd8 <alt_up_pixel_buffer_dma_draw_hline+0x18>
   10bd0:	2813883a 	mov	r9,r5
   10bd4:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   10bd8:	2a00552e 	bgeu	r5,r8,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10bdc:	3880542e 	bgeu	r7,r2,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10be0:	4a000136 	bltu	r9,r8,10be8 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
   10be4:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10be8:	d8c00117 	ldw	r3,4(sp)
   10bec:	00800044 	movi	r2,1
   10bf0:	1880021e 	bne	r3,r2,10bfc <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10bf4:	21800c17 	ldw	r6,48(r4)
   10bf8:	00000106 	br	10c00 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10bfc:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
   10c00:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10c04:	20800d17 	ldw	r2,52(r4)
   10c08:	1000231e 	bne	r2,zero,10c98 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
   10c0c:	20801317 	ldw	r2,76(r4)
   10c10:	3884983a 	sll	r2,r7,r2
   10c14:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10c18:	21000e17 	ldw	r4,56(r4)
   10c1c:	00800044 	movi	r2,1
   10c20:	2080081e 	bne	r4,r2,10c44 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
   10c24:	49404236 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c28:	3945883a 	add	r2,r7,r5
   10c2c:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10c30:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10c34:	290b883a 	add	r5,r5,r4
   10c38:	1105883a 	add	r2,r2,r4
   10c3c:	49403c36 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c40:	003ffb06 	br	10c30 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10c44:	00800084 	movi	r2,2
   10c48:	2080021e 	bne	r4,r2,10c54 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
   10c4c:	4940032e 	bgeu	r9,r5,10c5c <alt_up_pixel_buffer_dma_draw_hline+0x9c>
   10c50:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10c54:	4940082e 	bgeu	r9,r5,10c78 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
   10c58:	f800283a 	ret
   10c5c:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10c60:	2945883a 	add	r2,r5,r5
   10c64:	11c5883a 	add	r2,r2,r7
   10c68:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10c6c:	290b883a 	add	r5,r5,r4
   10c70:	49402f36 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c74:	003ffa06 	br	10c60 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
   10c78:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10c7c:	2945883a 	add	r2,r5,r5
   10c80:	1085883a 	add	r2,r2,r2
   10c84:	11c5883a 	add	r2,r2,r7
   10c88:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10c8c:	290b883a 	add	r5,r5,r4
   10c90:	49402736 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10c94:	003ff906 	br	10c7c <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10c98:	21000e17 	ldw	r4,56(r4)
   10c9c:	00800044 	movi	r2,1
   10ca0:	20800a1e 	bne	r4,r2,10ccc <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
   10ca4:	41c5383a 	mul	r2,r8,r7
   10ca8:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
   10cac:	49402036 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10cb0:	1145883a 	add	r2,r2,r5
   10cb4:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10cb8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10cbc:	290b883a 	add	r5,r5,r4
   10cc0:	1105883a 	add	r2,r2,r4
   10cc4:	49401a36 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10cc8:	003ffb06 	br	10cb8 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10ccc:	00800084 	movi	r2,2
   10cd0:	20800b1e 	bne	r4,r2,10d00 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
   10cd4:	4205883a 	add	r2,r8,r8
   10cd8:	3885383a 	mul	r2,r7,r2
   10cdc:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10ce0:	49401336 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10ce4:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10ce8:	2945883a 	add	r2,r5,r5
   10cec:	11c5883a 	add	r2,r2,r7
   10cf0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10cf4:	290b883a 	add	r5,r5,r4
   10cf8:	49400d36 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10cfc:	003ffa06 	br	10ce8 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
   10d00:	4205883a 	add	r2,r8,r8
   10d04:	1085883a 	add	r2,r2,r2
   10d08:	3885383a 	mul	r2,r7,r2
   10d0c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10d10:	49400736 	bltu	r9,r5,10d30 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10d14:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10d18:	2945883a 	add	r2,r5,r5
   10d1c:	1085883a 	add	r2,r2,r2
   10d20:	11c5883a 	add	r2,r2,r7
   10d24:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10d28:	290b883a 	add	r5,r5,r4
   10d2c:	497ffa2e 	bgeu	r9,r5,10d18 <alt_up_pixel_buffer_dma_draw_hline+0x158>
   10d30:	f800283a 	ret

00010d34 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10d34:	defff604 	addi	sp,sp,-40
   10d38:	dfc00915 	stw	ra,36(sp)
   10d3c:	dd800815 	stw	r22,32(sp)
   10d40:	dd400715 	stw	r21,28(sp)
   10d44:	dd000615 	stw	r20,24(sp)
   10d48:	dcc00515 	stw	r19,20(sp)
   10d4c:	dc800415 	stw	r18,16(sp)
   10d50:	dc400315 	stw	r17,12(sp)
   10d54:	dc000215 	stw	r16,8(sp)
   10d58:	2029883a 	mov	r20,r4
   10d5c:	282d883a 	mov	r22,r5
   10d60:	302b883a 	mov	r21,r6
   10d64:	3825883a 	mov	r18,r7
   10d68:	dcc00a17 	ldw	r19,40(sp)
   10d6c:	dc000b17 	ldw	r16,44(sp)
   10d70:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10d74:	dc000015 	stw	r16,0(sp)
   10d78:	dc400115 	stw	r17,4(sp)
   10d7c:	380d883a 	mov	r6,r7
   10d80:	a80f883a 	mov	r7,r21
   10d84:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   10d88:	dc000015 	stw	r16,0(sp)
   10d8c:	dc400115 	stw	r17,4(sp)
   10d90:	a009883a 	mov	r4,r20
   10d94:	b00b883a 	mov	r5,r22
   10d98:	900d883a 	mov	r6,r18
   10d9c:	980f883a 	mov	r7,r19
   10da0:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10da4:	dc000015 	stw	r16,0(sp)
   10da8:	dc400115 	stw	r17,4(sp)
   10dac:	a009883a 	mov	r4,r20
   10db0:	b00b883a 	mov	r5,r22
   10db4:	a80d883a 	mov	r6,r21
   10db8:	980f883a 	mov	r7,r19
   10dbc:	0010a2c0 	call	10a2c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   10dc0:	dc000015 	stw	r16,0(sp)
   10dc4:	dc400115 	stw	r17,4(sp)
   10dc8:	a009883a 	mov	r4,r20
   10dcc:	900b883a 	mov	r5,r18
   10dd0:	a80d883a 	mov	r6,r21
   10dd4:	980f883a 	mov	r7,r19
   10dd8:	0010a2c0 	call	10a2c <alt_up_pixel_buffer_dma_draw_vline>
}
   10ddc:	dfc00917 	ldw	ra,36(sp)
   10de0:	dd800817 	ldw	r22,32(sp)
   10de4:	dd400717 	ldw	r21,28(sp)
   10de8:	dd000617 	ldw	r20,24(sp)
   10dec:	dcc00517 	ldw	r19,20(sp)
   10df0:	dc800417 	ldw	r18,16(sp)
   10df4:	dc400317 	ldw	r17,12(sp)
   10df8:	dc000217 	ldw	r16,8(sp)
   10dfc:	dec00a04 	addi	sp,sp,40
   10e00:	f800283a 	ret

00010e04 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10e04:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10e08:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10e0c:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10e10:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10e14:	3940022e 	bgeu	r7,r5,10e20 <alt_up_pixel_buffer_dma_draw_box+0x1c>
   10e18:	2811883a 	mov	r8,r5
   10e1c:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
   10e20:	5980032e 	bgeu	r11,r6,10e30 <alt_up_pixel_buffer_dma_draw_box+0x2c>
   10e24:	5805883a 	mov	r2,r11
   10e28:	3017883a 	mov	r11,r6
   10e2c:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   10e30:	2a80842e 	bgeu	r5,r10,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10e34:	30c0832e 	bgeu	r6,r3,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10e38:	42800136 	bltu	r8,r10,10e40 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
   10e3c:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10e40:	58c00136 	bltu	r11,r3,10e48 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
   10e44:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10e48:	d8c00217 	ldw	r3,8(sp)
   10e4c:	00800044 	movi	r2,1
   10e50:	1880021e 	bne	r3,r2,10e5c <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
   10e54:	20c00c17 	ldw	r3,48(r4)
   10e58:	00000106 	br	10e60 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
   10e5c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   10e60:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10e64:	20800d17 	ldw	r2,52(r4)
   10e68:	1000391e 	bne	r2,zero,10f50 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   10e6c:	22801317 	ldw	r10,76(r4)
   10e70:	3284983a 	sll	r2,r6,r10
   10e74:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10e78:	21000e17 	ldw	r4,56(r4)
   10e7c:	00800044 	movi	r2,1
   10e80:	2080101e 	bne	r4,r2,10ec4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
   10e84:	59806f36 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10e88:	00000a06 	br	10eb4 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   10e8c:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10e90:	00800044 	movi	r2,1
   10e94:	1887883a 	add	r3,r3,r2
   10e98:	2089883a 	add	r4,r4,r2
   10e9c:	40fffb2e 	bgeu	r8,r3,10e8c <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10ea0:	00800044 	movi	r2,1
   10ea4:	308d883a 	add	r6,r6,r2
   10ea8:	59806636 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   10eac:	1284983a 	sll	r2,r2,r10
   10eb0:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10eb4:	417ffa36 	bltu	r8,r5,10ea0 <alt_up_pixel_buffer_dma_draw_box+0x9c>
   10eb8:	29c9883a 	add	r4,r5,r7
   10ebc:	2807883a 	mov	r3,r5
   10ec0:	003ff206 	br	10e8c <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10ec4:	00800084 	movi	r2,2
   10ec8:	2080021e 	bne	r4,r2,10ed4 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
   10ecc:	59805d36 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10ed0:	00000e06 	br	10f0c <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10ed4:	59805b36 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10ed8:	00001b06 	br	10f48 <alt_up_pixel_buffer_dma_draw_box+0x144>
   10edc:	2807883a 	mov	r3,r5
   10ee0:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10ee4:	18c5883a 	add	r2,r3,r3
   10ee8:	11c5883a 	add	r2,r2,r7
   10eec:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10ef0:	1907883a 	add	r3,r3,r4
   10ef4:	40fffb2e 	bgeu	r8,r3,10ee4 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10ef8:	00800044 	movi	r2,1
   10efc:	308d883a 	add	r6,r6,r2
   10f00:	59805036 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   10f04:	1284983a 	sll	r2,r2,r10
   10f08:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f0c:	417ff32e 	bgeu	r8,r5,10edc <alt_up_pixel_buffer_dma_draw_box+0xd8>
   10f10:	003ff906 	br	10ef8 <alt_up_pixel_buffer_dma_draw_box+0xf4>
   10f14:	2807883a 	mov	r3,r5
   10f18:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   10f1c:	18c5883a 	add	r2,r3,r3
   10f20:	1085883a 	add	r2,r2,r2
   10f24:	11c5883a 	add	r2,r2,r7
   10f28:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f2c:	1907883a 	add	r3,r3,r4
   10f30:	40fffa2e 	bgeu	r8,r3,10f1c <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10f34:	00800044 	movi	r2,1
   10f38:	308d883a 	add	r6,r6,r2
   10f3c:	59804136 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   10f40:	1284983a 	sll	r2,r2,r10
   10f44:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f48:	417ff22e 	bgeu	r8,r5,10f14 <alt_up_pixel_buffer_dma_draw_box+0x110>
   10f4c:	003ff906 	br	10f34 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10f50:	21000e17 	ldw	r4,56(r4)
   10f54:	00800044 	movi	r2,1
   10f58:	2080121e 	bne	r4,r2,10fa4 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10f5c:	59803936 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10f60:	5019883a 	mov	r12,r10
   10f64:	3285383a 	mul	r2,r6,r10
   10f68:	1885883a 	add	r2,r3,r2
   10f6c:	114f883a 	add	r7,r2,r5
   10f70:	00000806 	br	10f94 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   10f74:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f78:	00800044 	movi	r2,1
   10f7c:	1887883a 	add	r3,r3,r2
   10f80:	2089883a 	add	r4,r4,r2
   10f84:	40fffb2e 	bgeu	r8,r3,10f74 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10f88:	31800044 	addi	r6,r6,1
   10f8c:	3b0f883a 	add	r7,r7,r12
   10f90:	59802c36 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
   10f94:	417ffc36 	bltu	r8,r5,10f88 <alt_up_pixel_buffer_dma_draw_box+0x184>
   10f98:	3809883a 	mov	r4,r7
   10f9c:	2807883a 	mov	r3,r5
   10fa0:	003ff406 	br	10f74 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10fa4:	00800084 	movi	r2,2
   10fa8:	2080121e 	bne	r4,r2,10ff4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10fac:	59802536 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   10fb0:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
   10fb4:	3285383a 	mul	r2,r6,r10
   10fb8:	1889883a 	add	r4,r3,r2
   10fbc:	03000044 	movi	r12,1
   10fc0:	00000a06 	br	10fec <alt_up_pixel_buffer_dma_draw_box+0x1e8>
   10fc4:	2807883a 	mov	r3,r5
   10fc8:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10fcc:	18c5883a 	add	r2,r3,r3
   10fd0:	1105883a 	add	r2,r2,r4
   10fd4:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10fd8:	19c7883a 	add	r3,r3,r7
   10fdc:	40fffb2e 	bgeu	r8,r3,10fcc <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10fe0:	330d883a 	add	r6,r6,r12
   10fe4:	59801736 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   10fe8:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10fec:	417ff52e 	bgeu	r8,r5,10fc4 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
   10ff0:	003ffb06 	br	10fe0 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10ff4:	59801336 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10ff8:	5285883a 	add	r2,r10,r10
   10ffc:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
   11000:	3285383a 	mul	r2,r6,r10
   11004:	1889883a 	add	r4,r3,r2
   11008:	03000044 	movi	r12,1
   1100c:	00000b06 	br	1103c <alt_up_pixel_buffer_dma_draw_box+0x238>
   11010:	2807883a 	mov	r3,r5
   11014:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   11018:	18c5883a 	add	r2,r3,r3
   1101c:	1085883a 	add	r2,r2,r2
   11020:	1105883a 	add	r2,r2,r4
   11024:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11028:	19c7883a 	add	r3,r3,r7
   1102c:	40fffa2e 	bgeu	r8,r3,11018 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11030:	330d883a 	add	r6,r6,r12
   11034:	59800336 	bltu	r11,r6,11044 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   11038:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1103c:	417ff42e 	bgeu	r8,r5,11010 <alt_up_pixel_buffer_dma_draw_box+0x20c>
   11040:	003ffb06 	br	11030 <alt_up_pixel_buffer_dma_draw_box+0x22c>
   11044:	f800283a 	ret

00011048 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11048:	00800044 	movi	r2,1
   1104c:	2880021e 	bne	r5,r2,11058 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
   11050:	21c00c17 	ldw	r7,48(r4)
   11054:	00000106 	br	1105c <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
   11058:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
   1105c:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11060:	20c00e17 	ldw	r3,56(r4)
   11064:	00800084 	movi	r2,2
   11068:	1880021e 	bne	r3,r2,11074 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
   1106c:	294d883a 	add	r6,r5,r5
   11070:	00000206 	br	1107c <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
   11074:	2945883a 	add	r2,r5,r5
   11078:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   1107c:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   11080:	20800d17 	ldw	r2,52(r4)
   11084:	1000121e 	bne	r2,zero,110d0 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   11088:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
   1108c:	48001a26 	beq	r9,zero,110f8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   11090:	0011883a 	mov	r8,zero
   11094:	3014c03a 	cmpne	r10,r6,zero
   11098:	00000b06 	br	110c8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   1109c:	0007883a 	mov	r3,zero
   110a0:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
   110a4:	19c5883a 	add	r2,r3,r7
   110a8:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   110ac:	1947883a 	add	r3,r3,r5
   110b0:	19bffc36 	bltu	r3,r6,110a4 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   110b4:	00800044 	movi	r2,1
   110b8:	4091883a 	add	r8,r8,r2
   110bc:	4a000e26 	beq	r9,r8,110f8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   110c0:	1104983a 	sll	r2,r2,r4
   110c4:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   110c8:	503ff41e 	bne	r10,zero,1109c <alt_up_pixel_buffer_dma_clear_screen+0x54>
   110cc:	003ff906 	br	110b4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   110d0:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
   110d4:	20000826 	beq	r4,zero,110f8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   110d8:	0007883a 	mov	r3,zero
   110dc:	0005883a 	mov	r2,zero
   110e0:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
   110e4:	3885883a 	add	r2,r7,r2
   110e8:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   110ec:	1945883a 	add	r2,r3,r5
   110f0:	1007883a 	mov	r3,r2
   110f4:	113ffb36 	bltu	r2,r4,110e4 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
   110f8:	f800283a 	ret

000110fc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   110fc:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   11100:	20c00a17 	ldw	r3,40(r4)
   11104:	00800044 	movi	r2,1
   11108:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   1110c:	20800b17 	ldw	r2,44(r4)
   11110:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
   11114:	21400b15 	stw	r5,44(r4)
	return 0;
}
   11118:	0005883a 	mov	r2,zero
   1111c:	f800283a 	ret

00011120 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   11120:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   11124:	22400f17 	ldw	r9,60(r4)
   11128:	32402a2e 	bgeu	r6,r9,111d4 <alt_up_pixel_buffer_dma_draw+0xb4>
   1112c:	20801017 	ldw	r2,64(r4)
   11130:	3880282e 	bgeu	r7,r2,111d4 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   11134:	20800d17 	ldw	r2,52(r4)
   11138:	10000a1e 	bne	r2,zero,11164 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   1113c:	21001217 	ldw	r4,72(r4)
   11140:	3108703a 	and	r4,r6,r4
   11144:	40801117 	ldw	r2,68(r8)
   11148:	2088983a 	sll	r4,r4,r2
   1114c:	40801417 	ldw	r2,80(r8)
   11150:	3884703a 	and	r2,r7,r2
   11154:	40c01317 	ldw	r3,76(r8)
   11158:	10c4983a 	sll	r2,r2,r3
   1115c:	2086b03a 	or	r3,r4,r2
   11160:	00000806 	br	11184 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   11164:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   11168:	40c01217 	ldw	r3,72(r8)
   1116c:	30c6703a 	and	r3,r6,r3
   11170:	40801417 	ldw	r2,80(r8)
   11174:	3884703a 	and	r2,r7,r2
   11178:	4885383a 	mul	r2,r9,r2
   1117c:	10c5883a 	add	r2,r2,r3
   11180:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11184:	42400e17 	ldw	r9,56(r8)
   11188:	00800044 	movi	r2,1
   1118c:	4880051e 	bne	r9,r2,111a4 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   11190:	40800c17 	ldw	r2,48(r8)
   11194:	1885883a 	add	r2,r3,r2
   11198:	11400025 	stbio	r5,0(r2)
   1119c:	0005883a 	mov	r2,zero
   111a0:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   111a4:	00800084 	movi	r2,2
   111a8:	4880051e 	bne	r9,r2,111c0 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   111ac:	40800c17 	ldw	r2,48(r8)
   111b0:	1885883a 	add	r2,r3,r2
   111b4:	1140002d 	sthio	r5,0(r2)
   111b8:	0005883a 	mov	r2,zero
   111bc:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   111c0:	40800c17 	ldw	r2,48(r8)
   111c4:	1885883a 	add	r2,r3,r2
   111c8:	11400035 	stwio	r5,0(r2)
   111cc:	0005883a 	mov	r2,zero
   111d0:	f800283a 	ret
   111d4:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   111d8:	f800283a 	ret

000111dc <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   111dc:	20800a17 	ldw	r2,40(r4)
   111e0:	10800337 	ldwio	r2,12(r2)
}
   111e4:	1080004c 	andi	r2,r2,1
   111e8:	f800283a 	ret

000111ec <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   111ec:	00c00104 	movi	r3,4
   111f0:	20800a17 	ldw	r2,40(r4)
   111f4:	10c5883a 	add	r2,r2,r3
   111f8:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   111fc:	20800a17 	ldw	r2,40(r4)
   11200:	10c5883a 	add	r2,r2,r3
   11204:	10800037 	ldwio	r2,0(r2)
   11208:	20800c15 	stw	r2,48(r4)
	return 0;
}
   1120c:	0005883a 	mov	r2,zero
   11210:	f800283a 	ret

00011214 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   11214:	deffff04 	addi	sp,sp,-4
   11218:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   1121c:	01400074 	movhi	r5,1
   11220:	29510104 	addi	r5,r5,17412
   11224:	00113540 	call	11354 <alt_find_dev>

  return dev;
}
   11228:	dfc00017 	ldw	ra,0(sp)
   1122c:	dec00104 	addi	sp,sp,4
   11230:	f800283a 	ret

00011234 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   11234:	00800074 	movhi	r2,1
   11238:	10982004 	addi	r2,r2,24704
   1123c:	10800017 	ldw	r2,0(r2)
   11240:	1000021e 	bne	r2,zero,1124c <alt_alarm_start+0x18>
   11244:	00bfde84 	movi	r2,-134
   11248:	f800283a 	ret
  {
    if (alarm)
   1124c:	2000021e 	bne	r4,zero,11258 <alt_alarm_start+0x24>
   11250:	00bffa84 	movi	r2,-22
   11254:	f800283a 	ret
    {
      alarm->callback = callback;
   11258:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   1125c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11260:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11264:	00bfff84 	movi	r2,-2
   11268:	3884703a 	and	r2,r7,r2
   1126c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11270:	00800074 	movhi	r2,1
   11274:	10982104 	addi	r2,r2,24708
   11278:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   1127c:	01800044 	movi	r6,1
   11280:	1985883a 	add	r2,r3,r6
   11284:	2885883a 	add	r2,r5,r2
   11288:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1128c:	10c0022e 	bgeu	r2,r3,11298 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   11290:	21800405 	stb	r6,16(r4)
   11294:	00000106 	br	1129c <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   11298:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1129c:	00800074 	movhi	r2,1
   112a0:	10910704 	addi	r2,r2,17436
   112a4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   112a8:	10c00017 	ldw	r3,0(r2)
   112ac:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   112b0:	10c00017 	ldw	r3,0(r2)
   112b4:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   112b8:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112bc:	3801703a 	wrctl	status,r7
   112c0:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   112c4:	f800283a 	ret

000112c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   112c8:	0005883a 	mov	r2,zero
   112cc:	01000104 	movi	r4,4
   112d0:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   112d4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   112d8:	1105883a 	add	r2,r2,r4
   112dc:	10fffd1e 	bne	r2,r3,112d4 <alt_dcache_flush_all+0xc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   112e0:	f800283a 	ret

000112e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   112e4:	deffff04 	addi	sp,sp,-4
   112e8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   112ec:	20000226 	beq	r4,zero,112f8 <alt_dev_llist_insert+0x14>
   112f0:	20800217 	ldw	r2,8(r4)
   112f4:	10000d1e 	bne	r2,zero,1132c <alt_dev_llist_insert+0x48>
   112f8:	00800074 	movhi	r2,1
   112fc:	10910404 	addi	r2,r2,17424
   11300:	10800017 	ldw	r2,0(r2)
   11304:	1000031e 	bne	r2,zero,11314 <alt_dev_llist_insert+0x30>
   11308:	00c00074 	movhi	r3,1
   1130c:	18d81b04 	addi	r3,r3,24684
   11310:	00000206 	br	1131c <alt_dev_llist_insert+0x38>
   11314:	103ee83a 	callr	r2
   11318:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   1131c:	00800584 	movi	r2,22
   11320:	18800015 	stw	r2,0(r3)
   11324:	00bffa84 	movi	r2,-22
   11328:	00000706 	br	11348 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1132c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11330:	28800017 	ldw	r2,0(r5)
   11334:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11338:	28800017 	ldw	r2,0(r5)
   1133c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11340:	29000015 	stw	r4,0(r5)
   11344:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11348:	dfc00017 	ldw	ra,0(sp)
   1134c:	dec00104 	addi	sp,sp,4
   11350:	f800283a 	ret

00011354 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11354:	defffb04 	addi	sp,sp,-20
   11358:	dfc00415 	stw	ra,16(sp)
   1135c:	dcc00315 	stw	r19,12(sp)
   11360:	dc800215 	stw	r18,8(sp)
   11364:	dc400115 	stw	r17,4(sp)
   11368:	dc000015 	stw	r16,0(sp)
   1136c:	2027883a 	mov	r19,r4
   11370:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   11374:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11378:	0009c040 	call	9c04 <strlen>
   1137c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11380:	8c000726 	beq	r17,r16,113a0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11384:	89000217 	ldw	r4,8(r17)
   11388:	980b883a 	mov	r5,r19
   1138c:	900d883a 	mov	r6,r18
   11390:	001199c0 	call	1199c <memcmp>
   11394:	10000326 	beq	r2,zero,113a4 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11398:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1139c:	847ff91e 	bne	r16,r17,11384 <alt_find_dev+0x30>
   113a0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   113a4:	8805883a 	mov	r2,r17
   113a8:	dfc00417 	ldw	ra,16(sp)
   113ac:	dcc00317 	ldw	r19,12(sp)
   113b0:	dc800217 	ldw	r18,8(sp)
   113b4:	dc400117 	ldw	r17,4(sp)
   113b8:	dc000017 	ldw	r16,0(sp)
   113bc:	dec00504 	addi	sp,sp,20
   113c0:	f800283a 	ret

000113c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   113c4:	deffff04 	addi	sp,sp,-4
   113c8:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   113cc:	0009883a 	mov	r4,zero
   113d0:	01440004 	movi	r5,4096
   113d4:	00119280 	call	11928 <alt_icache_flush>
#endif
}
   113d8:	dfc00017 	ldw	ra,0(sp)
   113dc:	dec00104 	addi	sp,sp,4
   113e0:	f800283a 	ret

000113e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   113e4:	defffe04 	addi	sp,sp,-8
   113e8:	dfc00115 	stw	ra,4(sp)
   113ec:	dc000015 	stw	r16,0(sp)
   113f0:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   113f4:	2809883a 	mov	r4,r5
   113f8:	300b883a 	mov	r5,r6
   113fc:	380d883a 	mov	r6,r7
   11400:	001159c0 	call	1159c <open>
   11404:	1009883a 	mov	r4,r2

  if (old >= 0)
   11408:	10000b16 	blt	r2,zero,11438 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   1140c:	10c00324 	muli	r3,r2,12
   11410:	00800074 	movhi	r2,1
   11414:	108c1604 	addi	r2,r2,12376
   11418:	1887883a 	add	r3,r3,r2
   1141c:	18800017 	ldw	r2,0(r3)
   11420:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   11424:	18800117 	ldw	r2,4(r3)
   11428:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1142c:	18800217 	ldw	r2,8(r3)
   11430:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   11434:	000fa480 	call	fa48 <alt_release_fd>
  }
} 
   11438:	dfc00117 	ldw	ra,4(sp)
   1143c:	dc000017 	ldw	r16,0(sp)
   11440:	dec00204 	addi	sp,sp,8
   11444:	f800283a 	ret

00011448 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11448:	defffa04 	addi	sp,sp,-24
   1144c:	dfc00515 	stw	ra,20(sp)
   11450:	dd000415 	stw	r20,16(sp)
   11454:	dcc00315 	stw	r19,12(sp)
   11458:	dc800215 	stw	r18,8(sp)
   1145c:	dc400115 	stw	r17,4(sp)
   11460:	dc000015 	stw	r16,0(sp)
   11464:	2005883a 	mov	r2,r4
   11468:	2827883a 	mov	r19,r5
   1146c:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11470:	04000074 	movhi	r16,1
   11474:	840c1904 	addi	r16,r16,12388
   11478:	04800044 	movi	r18,1
   1147c:	04407fc4 	movi	r17,511
   11480:	8009883a 	mov	r4,r16
   11484:	100b883a 	mov	r5,r2
   11488:	900d883a 	mov	r6,r18
   1148c:	880f883a 	mov	r7,r17
   11490:	00113e40 	call	113e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11494:	843ffd04 	addi	r16,r16,-12
   11498:	8009883a 	mov	r4,r16
   1149c:	980b883a 	mov	r5,r19
   114a0:	000d883a 	mov	r6,zero
   114a4:	880f883a 	mov	r7,r17
   114a8:	00113e40 	call	113e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   114ac:	81000604 	addi	r4,r16,24
   114b0:	a00b883a 	mov	r5,r20
   114b4:	900d883a 	mov	r6,r18
   114b8:	880f883a 	mov	r7,r17
   114bc:	00113e40 	call	113e4 <alt_open_fd>
}  
   114c0:	dfc00517 	ldw	ra,20(sp)
   114c4:	dd000417 	ldw	r20,16(sp)
   114c8:	dcc00317 	ldw	r19,12(sp)
   114cc:	dc800217 	ldw	r18,8(sp)
   114d0:	dc400117 	ldw	r17,4(sp)
   114d4:	dc000017 	ldw	r16,0(sp)
   114d8:	dec00604 	addi	sp,sp,24
   114dc:	f800283a 	ret

000114e0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   114e0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   114e4:	008007c4 	movi	r2,31
   114e8:	1100022e 	bgeu	r2,r4,114f4 <alt_irq_register+0x14>
   114ec:	00bffa84 	movi	r2,-22
   114f0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114f4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114f8:	013fff84 	movi	r4,-2
   114fc:	4104703a 	and	r2,r8,r4
   11500:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11504:	380490fa 	slli	r2,r7,3
   11508:	00c00074 	movhi	r3,1
   1150c:	18d86c04 	addi	r3,r3,25008
   11510:	10c5883a 	add	r2,r2,r3
   11514:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11518:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1151c:	30000e26 	beq	r6,zero,11558 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11520:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11524:	2904703a 	and	r2,r5,r4
   11528:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   1152c:	00c00074 	movhi	r3,1
   11530:	18d81f04 	addi	r3,r3,24700
   11534:	19000017 	ldw	r4,0(r3)
   11538:	00800044 	movi	r2,1
   1153c:	11c4983a 	sll	r2,r2,r7
   11540:	1104b03a 	or	r2,r2,r4
   11544:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11548:	18800017 	ldw	r2,0(r3)
   1154c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11550:	2801703a 	wrctl	status,r5
   11554:	00000e06 	br	11590 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11558:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1155c:	00bfff84 	movi	r2,-2
   11560:	2884703a 	and	r2,r5,r2
   11564:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11568:	00c00074 	movhi	r3,1
   1156c:	18d81f04 	addi	r3,r3,24700
   11570:	19000017 	ldw	r4,0(r3)
   11574:	00bfff84 	movi	r2,-2
   11578:	11c4183a 	rol	r2,r2,r7
   1157c:	1104703a 	and	r2,r2,r4
   11580:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11584:	18800017 	ldw	r2,0(r3)
   11588:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1158c:	2801703a 	wrctl	status,r5
   11590:	4001703a 	wrctl	status,r8
   11594:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11598:	f800283a 	ret

0001159c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1159c:	defff904 	addi	sp,sp,-28
   115a0:	dfc00615 	stw	ra,24(sp)
   115a4:	dd400515 	stw	r21,20(sp)
   115a8:	dd000415 	stw	r20,16(sp)
   115ac:	dcc00315 	stw	r19,12(sp)
   115b0:	dc800215 	stw	r18,8(sp)
   115b4:	dc400115 	stw	r17,4(sp)
   115b8:	dc000015 	stw	r16,0(sp)
   115bc:	2029883a 	mov	r20,r4
   115c0:	2827883a 	mov	r19,r5
   115c4:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   115c8:	01400074 	movhi	r5,1
   115cc:	29510104 	addi	r5,r5,17412
   115d0:	00113540 	call	11354 <alt_find_dev>
   115d4:	1021883a 	mov	r16,r2
   115d8:	10000226 	beq	r2,zero,115e4 <open+0x48>
   115dc:	0025883a 	mov	r18,zero
   115e0:	00000a06 	br	1160c <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   115e4:	a009883a 	mov	r4,r20
   115e8:	00118000 	call	11800 <alt_find_file>
   115ec:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   115f0:	1000051e 	bne	r2,zero,11608 <open+0x6c>
   115f4:	047fffc4 	movi	r17,-1
   115f8:	043ffb44 	movi	r16,-19
   115fc:	00002b06 	br	116ac <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11600:	043ffcc4 	movi	r16,-13
   11604:	00002906 	br	116ac <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11608:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   1160c:	8009883a 	mov	r4,r16
   11610:	00118bc0 	call	118bc <alt_get_fd>
   11614:	1023883a 	mov	r17,r2
   11618:	10003316 	blt	r2,zero,116e8 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   1161c:	10800324 	muli	r2,r2,12
   11620:	02000074 	movhi	r8,1
   11624:	420c1604 	addi	r8,r8,12376
   11628:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1162c:	00900034 	movhi	r2,16384
   11630:	10bfffc4 	addi	r2,r2,-1
   11634:	9886703a 	and	r3,r19,r2
   11638:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1163c:	9004c03a 	cmpne	r2,r18,zero
   11640:	1000121e 	bne	r2,zero,1168c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11644:	18900034 	orhi	r2,r3,16384
   11648:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1164c:	00800074 	movhi	r2,1
   11650:	10910304 	addi	r2,r2,17420
   11654:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11658:	21800017 	ldw	r6,0(r4)
   1165c:	000b883a 	mov	r5,zero
   11660:	4007883a 	mov	r3,r8
   11664:	02400044 	movi	r9,1
   11668:	02000304 	movi	r8,12
   1166c:	18800017 	ldw	r2,0(r3)
   11670:	1180031e 	bne	r2,r6,11680 <open+0xe4>
   11674:	18800217 	ldw	r2,8(r3)
   11678:	1000010e 	bge	r2,zero,11680 <open+0xe4>
   1167c:	193fe01e 	bne	r3,r4,11600 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11680:	2a4b883a 	add	r5,r5,r9
   11684:	1a07883a 	add	r3,r3,r8
   11688:	397ff82e 	bgeu	r7,r5,1166c <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1168c:	80800317 	ldw	r2,12(r16)
   11690:	10001726 	beq	r2,zero,116f0 <open+0x154>
   11694:	a00b883a 	mov	r5,r20
   11698:	980d883a 	mov	r6,r19
   1169c:	a80f883a 	mov	r7,r21
   116a0:	103ee83a 	callr	r2
   116a4:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   116a8:	1000110e 	bge	r2,zero,116f0 <open+0x154>
  {
    alt_release_fd (index);  
   116ac:	8809883a 	mov	r4,r17
   116b0:	000fa480 	call	fa48 <alt_release_fd>
   116b4:	00800074 	movhi	r2,1
   116b8:	10910404 	addi	r2,r2,17424
   116bc:	10800017 	ldw	r2,0(r2)
   116c0:	1000031e 	bne	r2,zero,116d0 <open+0x134>
   116c4:	00c00074 	movhi	r3,1
   116c8:	18d81b04 	addi	r3,r3,24684
   116cc:	00000206 	br	116d8 <open+0x13c>
   116d0:	103ee83a 	callr	r2
   116d4:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   116d8:	0405c83a 	sub	r2,zero,r16
   116dc:	18800015 	stw	r2,0(r3)
   116e0:	047fffc4 	movi	r17,-1
   116e4:	00000206 	br	116f0 <open+0x154>
   116e8:	1021883a 	mov	r16,r2
   116ec:	003fef06 	br	116ac <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   116f0:	8805883a 	mov	r2,r17
   116f4:	dfc00617 	ldw	ra,24(sp)
   116f8:	dd400517 	ldw	r21,20(sp)
   116fc:	dd000417 	ldw	r20,16(sp)
   11700:	dcc00317 	ldw	r19,12(sp)
   11704:	dc800217 	ldw	r18,8(sp)
   11708:	dc400117 	ldw	r17,4(sp)
   1170c:	dc000017 	ldw	r16,0(sp)
   11710:	dec00704 	addi	sp,sp,28
   11714:	f800283a 	ret

00011718 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11718:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1171c:	00bfff84 	movi	r2,-2
   11720:	2884703a 	and	r2,r5,r2
   11724:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11728:	20c00017 	ldw	r3,0(r4)
   1172c:	20800117 	ldw	r2,4(r4)
   11730:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   11734:	20800117 	ldw	r2,4(r4)
   11738:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1173c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   11740:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11744:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   11748:	f800283a 	ret

0001174c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1174c:	defffd04 	addi	sp,sp,-12
   11750:	dfc00215 	stw	ra,8(sp)
   11754:	dc400115 	stw	r17,4(sp)
   11758:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1175c:	d4200f17 	ldw	r16,-32708(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11760:	d0a72917 	ldw	r2,-25436(gp)
   11764:	10800044 	addi	r2,r2,1
   11768:	d0a72915 	stw	r2,-25436(gp)
   1176c:	00001b06 	br	117dc <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   11770:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11774:	80800403 	ldbu	r2,16(r16)
   11778:	10000326 	beq	r2,zero,11788 <alt_tick+0x3c>
   1177c:	d0a72917 	ldw	r2,-25436(gp)
   11780:	1000011e 	bne	r2,zero,11788 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   11784:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11788:	d0e72917 	ldw	r3,-25436(gp)
   1178c:	80800217 	ldw	r2,8(r16)
   11790:	18801136 	bltu	r3,r2,117d8 <alt_tick+0x8c>
   11794:	80800403 	ldbu	r2,16(r16)
   11798:	10000f1e 	bne	r2,zero,117d8 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   1179c:	80800317 	ldw	r2,12(r16)
   117a0:	81000517 	ldw	r4,20(r16)
   117a4:	103ee83a 	callr	r2
   117a8:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   117ac:	1000031e 	bne	r2,zero,117bc <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   117b0:	8009883a 	mov	r4,r16
   117b4:	00117180 	call	11718 <alt_alarm_stop>
   117b8:	00000706 	br	117d8 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   117bc:	80800217 	ldw	r2,8(r16)
   117c0:	1885883a 	add	r2,r3,r2
   117c4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   117c8:	d0e72917 	ldw	r3,-25436(gp)
   117cc:	10c0022e 	bgeu	r2,r3,117d8 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   117d0:	00800044 	movi	r2,1
   117d4:	80800405 	stb	r2,16(r16)
   117d8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   117dc:	d0a00f04 	addi	r2,gp,-32708
   117e0:	80bfe31e 	bne	r16,r2,11770 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   117e4:	dfc00217 	ldw	ra,8(sp)
   117e8:	dc400117 	ldw	r17,4(sp)
   117ec:	dc000017 	ldw	r16,0(sp)
   117f0:	dec00304 	addi	sp,sp,12
   117f4:	f800283a 	ret

000117f8 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   117f8:	000170fa 	wrctl	ienable,zero
}
   117fc:	f800283a 	ret

00011800 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11800:	defff904 	addi	sp,sp,-28
   11804:	dfc00615 	stw	ra,24(sp)
   11808:	dd400515 	stw	r21,20(sp)
   1180c:	dd000415 	stw	r20,16(sp)
   11810:	dcc00315 	stw	r19,12(sp)
   11814:	dc800215 	stw	r18,8(sp)
   11818:	dc400115 	stw	r17,4(sp)
   1181c:	dc000015 	stw	r16,0(sp)
   11820:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11824:	00800074 	movhi	r2,1
   11828:	1090ff04 	addi	r2,r2,17404
   1182c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11830:	102b883a 	mov	r21,r2
   11834:	88801626 	beq	r17,r2,11890 <alt_find_file+0x90>
   11838:	053fffc4 	movi	r20,-1
   1183c:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   11840:	8c000217 	ldw	r16,8(r17)
   11844:	8009883a 	mov	r4,r16
   11848:	0009c040 	call	9c04 <strlen>
   1184c:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   11850:	8085883a 	add	r2,r16,r2
   11854:	1505883a 	add	r2,r2,r20
   11858:	10800007 	ldb	r2,0(r2)
   1185c:	14c0011e 	bne	r2,r19,11864 <alt_find_file+0x64>
    {
      len -= 1;
   11860:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11864:	1c85883a 	add	r2,r3,r18
   11868:	10800007 	ldb	r2,0(r2)
   1186c:	14c00126 	beq	r2,r19,11874 <alt_find_file+0x74>
   11870:	1000051e 	bne	r2,zero,11888 <alt_find_file+0x88>
   11874:	8009883a 	mov	r4,r16
   11878:	900b883a 	mov	r5,r18
   1187c:	180d883a 	mov	r6,r3
   11880:	001199c0 	call	1199c <memcmp>
   11884:	10000326 	beq	r2,zero,11894 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11888:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1188c:	8d7fec1e 	bne	r17,r21,11840 <alt_find_file+0x40>
   11890:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   11894:	8805883a 	mov	r2,r17
   11898:	dfc00617 	ldw	ra,24(sp)
   1189c:	dd400517 	ldw	r21,20(sp)
   118a0:	dd000417 	ldw	r20,16(sp)
   118a4:	dcc00317 	ldw	r19,12(sp)
   118a8:	dc800217 	ldw	r18,8(sp)
   118ac:	dc400117 	ldw	r17,4(sp)
   118b0:	dc000017 	ldw	r16,0(sp)
   118b4:	dec00704 	addi	sp,sp,28
   118b8:	f800283a 	ret

000118bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   118bc:	000b883a 	mov	r5,zero
   118c0:	00c00074 	movhi	r3,1
   118c4:	18cc1604 	addi	r3,r3,12376
   118c8:	02000304 	movi	r8,12
   118cc:	02400074 	movhi	r9,1
   118d0:	4a510304 	addi	r9,r9,17420
   118d4:	01c00044 	movi	r7,1
   118d8:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   118dc:	18800017 	ldw	r2,0(r3)
   118e0:	10000c1e 	bne	r2,zero,11914 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   118e4:	2a05383a 	mul	r2,r5,r8
   118e8:	00c00074 	movhi	r3,1
   118ec:	18cc1604 	addi	r3,r3,12376
   118f0:	10c5883a 	add	r2,r2,r3
   118f4:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   118f8:	48800017 	ldw	r2,0(r9)
   118fc:	11400216 	blt	r2,r5,11908 <alt_get_fd+0x4c>
   11900:	2805883a 	mov	r2,r5
   11904:	f800283a 	ret
      {
        alt_max_fd = i;
   11908:	49400015 	stw	r5,0(r9)
   1190c:	2805883a 	mov	r2,r5
   11910:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11914:	29cb883a 	add	r5,r5,r7
   11918:	1a07883a 	add	r3,r3,r8
   1191c:	29bfef1e 	bne	r5,r6,118dc <alt_get_fd+0x20>
   11920:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   11924:	f800283a 	ret

00011928 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   11928:	2007883a 	mov	r3,r4
   1192c:	00840004 	movi	r2,4096
   11930:	1140012e 	bgeu	r2,r5,11938 <alt_icache_flush+0x10>
   11934:	100b883a 	mov	r5,r2
   11938:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1193c:	1940042e 	bgeu	r3,r5,11950 <alt_icache_flush+0x28>
   11940:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11944:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11948:	1887883a 	add	r3,r3,r2
   1194c:	197ffd36 	bltu	r3,r5,11944 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11950:	208007cc 	andi	r2,r4,31
   11954:	10000126 	beq	r2,zero,1195c <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11958:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1195c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11960:	f800283a 	ret

00011964 <exit>:
   11964:	defffe04 	addi	sp,sp,-8
   11968:	000b883a 	mov	r5,zero
   1196c:	dc000015 	stw	r16,0(sp)
   11970:	dfc00115 	stw	ra,4(sp)
   11974:	2021883a 	mov	r16,r4
   11978:	0011d4c0 	call	11d4c <__call_exitprocs>
   1197c:	00800074 	movhi	r2,1
   11980:	1090fa04 	addi	r2,r2,17384
   11984:	11000017 	ldw	r4,0(r2)
   11988:	20800f17 	ldw	r2,60(r4)
   1198c:	10000126 	beq	r2,zero,11994 <exit+0x30>
   11990:	103ee83a 	callr	r2
   11994:	8009883a 	mov	r4,r16
   11998:	0011efc0 	call	11efc <_exit>

0001199c <memcmp>:
   1199c:	00c000c4 	movi	r3,3
   119a0:	1980032e 	bgeu	r3,r6,119b0 <memcmp+0x14>
   119a4:	2144b03a 	or	r2,r4,r5
   119a8:	10c4703a 	and	r2,r2,r3
   119ac:	10000f26 	beq	r2,zero,119ec <memcmp+0x50>
   119b0:	31ffffc4 	addi	r7,r6,-1
   119b4:	3000061e 	bne	r6,zero,119d0 <memcmp+0x34>
   119b8:	00000a06 	br	119e4 <memcmp+0x48>
   119bc:	39ffffc4 	addi	r7,r7,-1
   119c0:	00bfffc4 	movi	r2,-1
   119c4:	21000044 	addi	r4,r4,1
   119c8:	29400044 	addi	r5,r5,1
   119cc:	38800526 	beq	r7,r2,119e4 <memcmp+0x48>
   119d0:	20c00003 	ldbu	r3,0(r4)
   119d4:	28800003 	ldbu	r2,0(r5)
   119d8:	18bff826 	beq	r3,r2,119bc <memcmp+0x20>
   119dc:	1885c83a 	sub	r2,r3,r2
   119e0:	f800283a 	ret
   119e4:	0005883a 	mov	r2,zero
   119e8:	f800283a 	ret
   119ec:	180f883a 	mov	r7,r3
   119f0:	20c00017 	ldw	r3,0(r4)
   119f4:	28800017 	ldw	r2,0(r5)
   119f8:	18bfed1e 	bne	r3,r2,119b0 <memcmp+0x14>
   119fc:	31bfff04 	addi	r6,r6,-4
   11a00:	21000104 	addi	r4,r4,4
   11a04:	29400104 	addi	r5,r5,4
   11a08:	39bff936 	bltu	r7,r6,119f0 <memcmp+0x54>
   11a0c:	003fe806 	br	119b0 <memcmp+0x14>

00011a10 <putc>:
   11a10:	defffc04 	addi	sp,sp,-16
   11a14:	dc800215 	stw	r18,8(sp)
   11a18:	04800074 	movhi	r18,1
   11a1c:	9490f904 	addi	r18,r18,17380
   11a20:	90c00017 	ldw	r3,0(r18)
   11a24:	dc400115 	stw	r17,4(sp)
   11a28:	dc000015 	stw	r16,0(sp)
   11a2c:	dfc00315 	stw	ra,12(sp)
   11a30:	2023883a 	mov	r17,r4
   11a34:	2821883a 	mov	r16,r5
   11a38:	18000226 	beq	r3,zero,11a44 <putc+0x34>
   11a3c:	18800e17 	ldw	r2,56(r3)
   11a40:	10001126 	beq	r2,zero,11a88 <putc+0x78>
   11a44:	80800217 	ldw	r2,8(r16)
   11a48:	10ffffc4 	addi	r3,r2,-1
   11a4c:	80c00215 	stw	r3,8(r16)
   11a50:	18001316 	blt	r3,zero,11aa0 <putc+0x90>
   11a54:	80800017 	ldw	r2,0(r16)
   11a58:	14400005 	stb	r17,0(r2)
   11a5c:	80c00017 	ldw	r3,0(r16)
   11a60:	18800044 	addi	r2,r3,1
   11a64:	18c00003 	ldbu	r3,0(r3)
   11a68:	80800015 	stw	r2,0(r16)
   11a6c:	1805883a 	mov	r2,r3
   11a70:	dfc00317 	ldw	ra,12(sp)
   11a74:	dc800217 	ldw	r18,8(sp)
   11a78:	dc400117 	ldw	r17,4(sp)
   11a7c:	dc000017 	ldw	r16,0(sp)
   11a80:	dec00404 	addi	sp,sp,16
   11a84:	f800283a 	ret
   11a88:	1809883a 	mov	r4,r3
   11a8c:	00063080 	call	6308 <__sinit>
   11a90:	80800217 	ldw	r2,8(r16)
   11a94:	10ffffc4 	addi	r3,r2,-1
   11a98:	80c00215 	stw	r3,8(r16)
   11a9c:	183fed0e 	bge	r3,zero,11a54 <putc+0x44>
   11aa0:	80800617 	ldw	r2,24(r16)
   11aa4:	18800f16 	blt	r3,r2,11ae4 <putc+0xd4>
   11aa8:	80800017 	ldw	r2,0(r16)
   11aac:	14400005 	stb	r17,0(r2)
   11ab0:	81000017 	ldw	r4,0(r16)
   11ab4:	00800284 	movi	r2,10
   11ab8:	20c00003 	ldbu	r3,0(r4)
   11abc:	18801226 	beq	r3,r2,11b08 <putc+0xf8>
   11ac0:	20800044 	addi	r2,r4,1
   11ac4:	80800015 	stw	r2,0(r16)
   11ac8:	1805883a 	mov	r2,r3
   11acc:	dfc00317 	ldw	ra,12(sp)
   11ad0:	dc800217 	ldw	r18,8(sp)
   11ad4:	dc400117 	ldw	r17,4(sp)
   11ad8:	dc000017 	ldw	r16,0(sp)
   11adc:	dec00404 	addi	sp,sp,16
   11ae0:	f800283a 	ret
   11ae4:	91000017 	ldw	r4,0(r18)
   11ae8:	880b883a 	mov	r5,r17
   11aec:	800d883a 	mov	r6,r16
   11af0:	dfc00317 	ldw	ra,12(sp)
   11af4:	dc800217 	ldw	r18,8(sp)
   11af8:	dc400117 	ldw	r17,4(sp)
   11afc:	dc000017 	ldw	r16,0(sp)
   11b00:	dec00404 	addi	sp,sp,16
   11b04:	0011bfc1 	jmpi	11bfc <__swbuf_r>
   11b08:	91000017 	ldw	r4,0(r18)
   11b0c:	180b883a 	mov	r5,r3
   11b10:	003ff606 	br	11aec <putc+0xdc>

00011b14 <_putc_r>:
   11b14:	defffc04 	addi	sp,sp,-16
   11b18:	dc400215 	stw	r17,8(sp)
   11b1c:	dc000115 	stw	r16,4(sp)
   11b20:	dfc00315 	stw	ra,12(sp)
   11b24:	2021883a 	mov	r16,r4
   11b28:	2823883a 	mov	r17,r5
   11b2c:	20000226 	beq	r4,zero,11b38 <_putc_r+0x24>
   11b30:	20800e17 	ldw	r2,56(r4)
   11b34:	10001026 	beq	r2,zero,11b78 <_putc_r+0x64>
   11b38:	30800217 	ldw	r2,8(r6)
   11b3c:	10ffffc4 	addi	r3,r2,-1
   11b40:	30c00215 	stw	r3,8(r6)
   11b44:	18001316 	blt	r3,zero,11b94 <_putc_r+0x80>
   11b48:	30800017 	ldw	r2,0(r6)
   11b4c:	14400005 	stb	r17,0(r2)
   11b50:	30c00017 	ldw	r3,0(r6)
   11b54:	18800044 	addi	r2,r3,1
   11b58:	18c00003 	ldbu	r3,0(r3)
   11b5c:	30800015 	stw	r2,0(r6)
   11b60:	1805883a 	mov	r2,r3
   11b64:	dfc00317 	ldw	ra,12(sp)
   11b68:	dc400217 	ldw	r17,8(sp)
   11b6c:	dc000117 	ldw	r16,4(sp)
   11b70:	dec00404 	addi	sp,sp,16
   11b74:	f800283a 	ret
   11b78:	d9800015 	stw	r6,0(sp)
   11b7c:	00063080 	call	6308 <__sinit>
   11b80:	d9800017 	ldw	r6,0(sp)
   11b84:	30800217 	ldw	r2,8(r6)
   11b88:	10ffffc4 	addi	r3,r2,-1
   11b8c:	30c00215 	stw	r3,8(r6)
   11b90:	183fed0e 	bge	r3,zero,11b48 <_putc_r+0x34>
   11b94:	30800617 	ldw	r2,24(r6)
   11b98:	18800e16 	blt	r3,r2,11bd4 <_putc_r+0xc0>
   11b9c:	30800017 	ldw	r2,0(r6)
   11ba0:	14400005 	stb	r17,0(r2)
   11ba4:	31000017 	ldw	r4,0(r6)
   11ba8:	00800284 	movi	r2,10
   11bac:	20c00003 	ldbu	r3,0(r4)
   11bb0:	18800f26 	beq	r3,r2,11bf0 <_putc_r+0xdc>
   11bb4:	20800044 	addi	r2,r4,1
   11bb8:	30800015 	stw	r2,0(r6)
   11bbc:	1805883a 	mov	r2,r3
   11bc0:	dfc00317 	ldw	ra,12(sp)
   11bc4:	dc400217 	ldw	r17,8(sp)
   11bc8:	dc000117 	ldw	r16,4(sp)
   11bcc:	dec00404 	addi	sp,sp,16
   11bd0:	f800283a 	ret
   11bd4:	8009883a 	mov	r4,r16
   11bd8:	880b883a 	mov	r5,r17
   11bdc:	dfc00317 	ldw	ra,12(sp)
   11be0:	dc400217 	ldw	r17,8(sp)
   11be4:	dc000117 	ldw	r16,4(sp)
   11be8:	dec00404 	addi	sp,sp,16
   11bec:	0011bfc1 	jmpi	11bfc <__swbuf_r>
   11bf0:	8009883a 	mov	r4,r16
   11bf4:	180b883a 	mov	r5,r3
   11bf8:	003ff806 	br	11bdc <_putc_r+0xc8>

00011bfc <__swbuf_r>:
   11bfc:	defffc04 	addi	sp,sp,-16
   11c00:	dc400215 	stw	r17,8(sp)
   11c04:	dc000115 	stw	r16,4(sp)
   11c08:	dfc00315 	stw	ra,12(sp)
   11c0c:	2023883a 	mov	r17,r4
   11c10:	2821883a 	mov	r16,r5
   11c14:	20000226 	beq	r4,zero,11c20 <__swbuf_r+0x24>
   11c18:	20800e17 	ldw	r2,56(r4)
   11c1c:	10002f26 	beq	r2,zero,11cdc <__swbuf_r+0xe0>
   11c20:	3080030b 	ldhu	r2,12(r6)
   11c24:	30c00617 	ldw	r3,24(r6)
   11c28:	1080020c 	andi	r2,r2,8
   11c2c:	30c00215 	stw	r3,8(r6)
   11c30:	10002226 	beq	r2,zero,11cbc <__swbuf_r+0xc0>
   11c34:	30c00417 	ldw	r3,16(r6)
   11c38:	18002026 	beq	r3,zero,11cbc <__swbuf_r+0xc0>
   11c3c:	31000017 	ldw	r4,0(r6)
   11c40:	30800517 	ldw	r2,20(r6)
   11c44:	20c7c83a 	sub	r3,r4,r3
   11c48:	18802f0e 	bge	r3,r2,11d08 <__swbuf_r+0x10c>
   11c4c:	19400044 	addi	r5,r3,1
   11c50:	30800217 	ldw	r2,8(r6)
   11c54:	84003fcc 	andi	r16,r16,255
   11c58:	20c00044 	addi	r3,r4,1
   11c5c:	10bfffc4 	addi	r2,r2,-1
   11c60:	30800215 	stw	r2,8(r6)
   11c64:	24000005 	stb	r16,0(r4)
   11c68:	30800517 	ldw	r2,20(r6)
   11c6c:	30c00015 	stw	r3,0(r6)
   11c70:	11400c26 	beq	r2,r5,11ca4 <__swbuf_r+0xa8>
   11c74:	3080030b 	ldhu	r2,12(r6)
   11c78:	1080004c 	andi	r2,r2,1
   11c7c:	1005003a 	cmpeq	r2,r2,zero
   11c80:	10000626 	beq	r2,zero,11c9c <__swbuf_r+0xa0>
   11c84:	8005883a 	mov	r2,r16
   11c88:	dfc00317 	ldw	ra,12(sp)
   11c8c:	dc400217 	ldw	r17,8(sp)
   11c90:	dc000117 	ldw	r16,4(sp)
   11c94:	dec00404 	addi	sp,sp,16
   11c98:	f800283a 	ret
   11c9c:	00800284 	movi	r2,10
   11ca0:	80bff81e 	bne	r16,r2,11c84 <__swbuf_r+0x88>
   11ca4:	8809883a 	mov	r4,r17
   11ca8:	300b883a 	mov	r5,r6
   11cac:	00060700 	call	6070 <_fflush_r>
   11cb0:	103ff426 	beq	r2,zero,11c84 <__swbuf_r+0x88>
   11cb4:	043fffc4 	movi	r16,-1
   11cb8:	003ff206 	br	11c84 <__swbuf_r+0x88>
   11cbc:	300b883a 	mov	r5,r6
   11cc0:	8809883a 	mov	r4,r17
   11cc4:	d9800015 	stw	r6,0(sp)
   11cc8:	00047680 	call	4768 <__swsetup_r>
   11ccc:	d9800017 	ldw	r6,0(sp)
   11cd0:	1000061e 	bne	r2,zero,11cec <__swbuf_r+0xf0>
   11cd4:	30c00417 	ldw	r3,16(r6)
   11cd8:	003fd806 	br	11c3c <__swbuf_r+0x40>
   11cdc:	d9800015 	stw	r6,0(sp)
   11ce0:	00063080 	call	6308 <__sinit>
   11ce4:	d9800017 	ldw	r6,0(sp)
   11ce8:	003fcd06 	br	11c20 <__swbuf_r+0x24>
   11cec:	3080030b 	ldhu	r2,12(r6)
   11cf0:	00c00244 	movi	r3,9
   11cf4:	043fffc4 	movi	r16,-1
   11cf8:	10801014 	ori	r2,r2,64
   11cfc:	3080030d 	sth	r2,12(r6)
   11d00:	88c00015 	stw	r3,0(r17)
   11d04:	003fdf06 	br	11c84 <__swbuf_r+0x88>
   11d08:	300b883a 	mov	r5,r6
   11d0c:	8809883a 	mov	r4,r17
   11d10:	d9800015 	stw	r6,0(sp)
   11d14:	00060700 	call	6070 <_fflush_r>
   11d18:	d9800017 	ldw	r6,0(sp)
   11d1c:	103fe51e 	bne	r2,zero,11cb4 <__swbuf_r+0xb8>
   11d20:	31000017 	ldw	r4,0(r6)
   11d24:	01400044 	movi	r5,1
   11d28:	003fc906 	br	11c50 <__swbuf_r+0x54>

00011d2c <__swbuf>:
   11d2c:	01800074 	movhi	r6,1
   11d30:	3190f904 	addi	r6,r6,17380
   11d34:	2007883a 	mov	r3,r4
   11d38:	31000017 	ldw	r4,0(r6)
   11d3c:	280d883a 	mov	r6,r5
   11d40:	180b883a 	mov	r5,r3
   11d44:	0011bfc1 	jmpi	11bfc <__swbuf_r>

00011d48 <register_fini>:
   11d48:	f800283a 	ret

00011d4c <__call_exitprocs>:
   11d4c:	00800074 	movhi	r2,1
   11d50:	1090fa04 	addi	r2,r2,17384
   11d54:	10800017 	ldw	r2,0(r2)
   11d58:	defff304 	addi	sp,sp,-52
   11d5c:	df000b15 	stw	fp,44(sp)
   11d60:	d8800115 	stw	r2,4(sp)
   11d64:	00800034 	movhi	r2,0
   11d68:	10800004 	addi	r2,r2,0
   11d6c:	1005003a 	cmpeq	r2,r2,zero
   11d70:	d8800215 	stw	r2,8(sp)
   11d74:	d8800117 	ldw	r2,4(sp)
   11d78:	dd400815 	stw	r21,32(sp)
   11d7c:	dd000715 	stw	r20,28(sp)
   11d80:	10805204 	addi	r2,r2,328
   11d84:	dfc00c15 	stw	ra,48(sp)
   11d88:	ddc00a15 	stw	r23,40(sp)
   11d8c:	dd800915 	stw	r22,36(sp)
   11d90:	dcc00615 	stw	r19,24(sp)
   11d94:	dc800515 	stw	r18,20(sp)
   11d98:	dc400415 	stw	r17,16(sp)
   11d9c:	dc000315 	stw	r16,12(sp)
   11da0:	282b883a 	mov	r21,r5
   11da4:	2039883a 	mov	fp,r4
   11da8:	d8800015 	stw	r2,0(sp)
   11dac:	2829003a 	cmpeq	r20,r5,zero
   11db0:	d8800117 	ldw	r2,4(sp)
   11db4:	14405217 	ldw	r17,328(r2)
   11db8:	88001026 	beq	r17,zero,11dfc <__call_exitprocs+0xb0>
   11dbc:	ddc00017 	ldw	r23,0(sp)
   11dc0:	88800117 	ldw	r2,4(r17)
   11dc4:	8c802204 	addi	r18,r17,136
   11dc8:	143fffc4 	addi	r16,r2,-1
   11dcc:	80000916 	blt	r16,zero,11df4 <__call_exitprocs+0xa8>
   11dd0:	05bfffc4 	movi	r22,-1
   11dd4:	a000151e 	bne	r20,zero,11e2c <__call_exitprocs+0xe0>
   11dd8:	8409883a 	add	r4,r16,r16
   11ddc:	2105883a 	add	r2,r4,r4
   11de0:	1485883a 	add	r2,r2,r18
   11de4:	10c02017 	ldw	r3,128(r2)
   11de8:	a8c01126 	beq	r21,r3,11e30 <__call_exitprocs+0xe4>
   11dec:	843fffc4 	addi	r16,r16,-1
   11df0:	85bff81e 	bne	r16,r22,11dd4 <__call_exitprocs+0x88>
   11df4:	d8800217 	ldw	r2,8(sp)
   11df8:	10003126 	beq	r2,zero,11ec0 <__call_exitprocs+0x174>
   11dfc:	dfc00c17 	ldw	ra,48(sp)
   11e00:	df000b17 	ldw	fp,44(sp)
   11e04:	ddc00a17 	ldw	r23,40(sp)
   11e08:	dd800917 	ldw	r22,36(sp)
   11e0c:	dd400817 	ldw	r21,32(sp)
   11e10:	dd000717 	ldw	r20,28(sp)
   11e14:	dcc00617 	ldw	r19,24(sp)
   11e18:	dc800517 	ldw	r18,20(sp)
   11e1c:	dc400417 	ldw	r17,16(sp)
   11e20:	dc000317 	ldw	r16,12(sp)
   11e24:	dec00d04 	addi	sp,sp,52
   11e28:	f800283a 	ret
   11e2c:	8409883a 	add	r4,r16,r16
   11e30:	88c00117 	ldw	r3,4(r17)
   11e34:	2105883a 	add	r2,r4,r4
   11e38:	1445883a 	add	r2,r2,r17
   11e3c:	18ffffc4 	addi	r3,r3,-1
   11e40:	11800217 	ldw	r6,8(r2)
   11e44:	1c001526 	beq	r3,r16,11e9c <__call_exitprocs+0x150>
   11e48:	10000215 	stw	zero,8(r2)
   11e4c:	303fe726 	beq	r6,zero,11dec <__call_exitprocs+0xa0>
   11e50:	00c00044 	movi	r3,1
   11e54:	1c06983a 	sll	r3,r3,r16
   11e58:	90804017 	ldw	r2,256(r18)
   11e5c:	8cc00117 	ldw	r19,4(r17)
   11e60:	1884703a 	and	r2,r3,r2
   11e64:	10001426 	beq	r2,zero,11eb8 <__call_exitprocs+0x16c>
   11e68:	90804117 	ldw	r2,260(r18)
   11e6c:	1884703a 	and	r2,r3,r2
   11e70:	10000c1e 	bne	r2,zero,11ea4 <__call_exitprocs+0x158>
   11e74:	2105883a 	add	r2,r4,r4
   11e78:	1485883a 	add	r2,r2,r18
   11e7c:	11400017 	ldw	r5,0(r2)
   11e80:	e009883a 	mov	r4,fp
   11e84:	303ee83a 	callr	r6
   11e88:	88800117 	ldw	r2,4(r17)
   11e8c:	98bfc81e 	bne	r19,r2,11db0 <__call_exitprocs+0x64>
   11e90:	b8800017 	ldw	r2,0(r23)
   11e94:	147fd526 	beq	r2,r17,11dec <__call_exitprocs+0xa0>
   11e98:	003fc506 	br	11db0 <__call_exitprocs+0x64>
   11e9c:	8c000115 	stw	r16,4(r17)
   11ea0:	003fea06 	br	11e4c <__call_exitprocs+0x100>
   11ea4:	2105883a 	add	r2,r4,r4
   11ea8:	1485883a 	add	r2,r2,r18
   11eac:	11000017 	ldw	r4,0(r2)
   11eb0:	303ee83a 	callr	r6
   11eb4:	003ff406 	br	11e88 <__call_exitprocs+0x13c>
   11eb8:	303ee83a 	callr	r6
   11ebc:	003ff206 	br	11e88 <__call_exitprocs+0x13c>
   11ec0:	88800117 	ldw	r2,4(r17)
   11ec4:	1000081e 	bne	r2,zero,11ee8 <__call_exitprocs+0x19c>
   11ec8:	89000017 	ldw	r4,0(r17)
   11ecc:	20000726 	beq	r4,zero,11eec <__call_exitprocs+0x1a0>
   11ed0:	b9000015 	stw	r4,0(r23)
   11ed4:	8809883a 	mov	r4,r17
   11ed8:	00000000 	call	0 <__reset>
   11edc:	bc400017 	ldw	r17,0(r23)
   11ee0:	883fb71e 	bne	r17,zero,11dc0 <__call_exitprocs+0x74>
   11ee4:	003fc506 	br	11dfc <__call_exitprocs+0xb0>
   11ee8:	89000017 	ldw	r4,0(r17)
   11eec:	882f883a 	mov	r23,r17
   11ef0:	2023883a 	mov	r17,r4
   11ef4:	883fb21e 	bne	r17,zero,11dc0 <__call_exitprocs+0x74>
   11ef8:	003fc006 	br	11dfc <__call_exitprocs+0xb0>

00011efc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11efc:	20000226 	beq	r4,zero,11f08 <_exit+0xc>
    ALT_SIM_FAIL();
   11f00:	002af070 	cmpltui	zero,zero,43969
   11f04:	00000106 	br	11f0c <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   11f08:	002af0b0 	cmpltui	zero,zero,43970
   11f0c:	003fff06 	br	11f0c <_exit+0x10>
   11f10:	00000010 	cmplti	zero,zero,0
   11f14:	00000000 	call	0 <__reset>
   11f18:	00527a01 	jmpi	527a0 <_gp+0x363c0>
   11f1c:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   11f20:	001b0c0b 	ldhu	zero,27696(zero)
   11f24:	00000028 	cmpgeui	zero,zero,0
   11f28:	00000018 	cmpnei	zero,zero,0
   11f2c:	0000d194 	movui	zero,838
   11f30:	000005dc 	xori	zero,zero,23
   11f34:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   11f38:	92099170 	cmpltui	r8,r18,9797
   11f3c:	95079308 	cmpgei	r20,r18,7756
   11f40:	97049605 	stb	fp,4696(r18)
   11f44:	90019f03 	ldbu	zero,1660(r18)
   11f48:	9c06940a 	0x9c06940a
   11f4c:	00000002 	0x2
   11f50:	00000028 	cmpgeui	zero,zero,0
   11f54:	00000044 	movi	zero,1
   11f58:	0000d770 	cmpltui	zero,zero,861
   11f5c:	000005b0 	cmpltui	zero,zero,22
   11f60:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   11f64:	92099168 	cmpgeui	r8,r18,9797
   11f68:	95079308 	cmpgei	r20,r18,7756
   11f6c:	9c039705 	stb	r16,3676(r19)
   11f70:	90019f02 	0x90019f02
   11f74:	9606940a 	0x9606940a
   11f78:	00000004 	movi	zero,0
   11f7c:	00011d48 	cmpgei	zero,zero,1141
