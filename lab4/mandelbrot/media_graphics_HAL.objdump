
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab4/mandelbrot/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000129c0 memsz 0x000129c0 flags r-x
    LOAD off    0x000139e0 vaddr 0x000129e0 paddr 0x00014610 align 2**12
         filesz 0x00001c30 memsz 0x00001c30 flags rw-
    LOAD off    0x00016240 vaddr 0x00016240 paddr 0x00016240 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012020  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000858  00012188  00012188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c30  000129e0  00014610  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  00016240  00016240  00016240  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015610  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001098  00000000  00000000  00015638  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b9a  00000000  00000000  000166d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ddab  00000000  00000000  0001826a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b10c  00000000  00000000  00046015  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b022  00000000  00000000  00051121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ef4  00000000  00000000  0006c144  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ae2  00000000  00000000  0006e038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013ee0  00000000  00000000  00071b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000859fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cb0  00000000  00000000  00085a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008a1ec  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0008a1ef  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0008a1f4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0008a1f5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0008a1f9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0008a1fd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0008a201  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0008a20c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008a217  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0008a222  2**0
                  CONTENTS, READONLY
 27 .jdi          000041b1  00000000  00000000  0008a22d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00012188 l    d  .rodata	00000000 .rodata
000129e0 l    d  .rwdata	00000000 .rwdata
00016240 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001b0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000012c8 l     F .text	00000058 __sprint_r
00012482 l     O .rodata	00000010 blanks.3452
00012472 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0001249a l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
000125bd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00004aac l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000064a8 l     F .text	00000058 std
000065b4 l     F .text	00000008 __fp_lock
000065bc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000129e0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
000145dc l     O .rwdata	00000004 charset
00012764 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000128ac l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0000996c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
00009e80 l     F .text	00000048 match
00013208 l     O .rwdata	00000014 fpi.1950
000128c8 l     O .rodata	00000028 tinytens
000131f4 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000c578 l     F .text	00000024 htinit
0000c604 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ce6c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000e018 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000f240 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000f694 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014600 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000133c4 l     O .rwdata	00001060 JTAG_UART_0
00014424 l     O .rwdata	00000030 AV_Config
00014454 l     O .rwdata	0000002c Green_LEDs
00014480 l     O .rwdata	0000002c Pushbuttons
000144ac l     O .rwdata	0000002c Red_LEDs
000144d8 l     O .rwdata	0000002c Slider_Switches
00014504 l     O .rwdata	0000002c Serial_Port
00014530 l     O .rwdata	00000048 VGA_Char_Buffer
00014578 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000100c8 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00010194 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010664 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000115ec l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011f50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000085cc g     F .text	00000094 _mprec_log10
000086b8 g     F .text	00000088 __any_on
0000d100 g     F .text	00000070 _isatty_r
00012884 g     O .rodata	00000028 __mprec_tinytens
0000f8fc g     F .text	00000050 alt_main
00010c34 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
0001639c g     O .bss	00000100 alt_irq
0000d170 g     F .text	00000078 _lseek_r
00014610 g       *ABS*	00000000 __flash_rwdata_start
0000eb38 g     F .text	00000088 __eqdf2
0001649c g       *ABS*	00000000 __alt_heap_start
000011d4 g     F .text	00000044 printf
00009c0c g     F .text	00000068 __sseek
00006510 g     F .text	000000a4 __sinit
00011e04 g     F .text	00000130 __swbuf_r
00010874 g     F .text	00000088 alt_up_char_buffer_string
00007450 g     F .text	00000084 _setlocale_r
00006610 g     F .text	00000068 __sfmoreglue
0000c228 g     F .text	0000001c ungetc
0000f950 g     F .text	00000004 __malloc_unlock
00010718 g     F .text	00000080 alt_up_rs232_read_fd
00009ec8 g     F .text	000014e4 _strtod_r
00000860 g     F .text	00000174 __divsf3
000108fc g     F .text	00000058 alt_up_char_buffer_draw
00008048 g     F .text	000000e0 memmove
00006600 g     F .text	00000010 _cleanup
00008740 g     F .text	000000bc _Balloc
00011328 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
0000ec48 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0001141c g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c504 g     F .text	00000074 _fstat_r
00016258 g     O .bss	00000004 errno
00000b38 g     F .text	00000038 __make_dp
00004870 g     F .text	00000024 __svfscanf
0000f38c g     F .text	0000002c __make_fp
00016260 g     O .bss	00000004 alt_argv
0001c5cc g       *ABS*	00000000 _gp
000113f4 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00013244 g     O .rwdata	00000180 alt_fd_list
0001155c g     F .text	00000070 alt_find_dev
00007fa8 g     F .text	000000a0 memcpy
0000ceb8 g     F .text	00000248 __hexnan
00010954 g     F .text	00000028 alt_up_char_buffer_clear
000065f4 g     F .text	0000000c _cleanup_r
0000ee68 g     F .text	000000f8 __floatsidf
00011650 g     F .text	00000098 alt_io_redirect
0000ed58 g     F .text	00000088 __ltdf2
000106cc g     F .text	0000004c alt_up_rs232_read_data
00007e44 g     F .text	00000040 mbrtowc
00011a00 g     F .text	00000008 altera_nios2_irq_init
00004894 g     F .text	00000068 _vfscanf_r
0000851c g     F .text	000000b0 __ratio
000113e4 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0001033c g     F .text	00000168 altera_avalon_jtag_uart_read
00001218 g     F .text	00000034 _printf_r
0000f37c g     F .text	00000008 __udivsi3
0000f71c g     F .text	00000084 isatty
00007400 g     F .text	0000002c iswspace
00012794 g     O .rodata	000000c8 __mprec_tens
00010dc8 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
0000742c g     F .text	00000008 __locale_charset
0000d2f8 g     F .text	000000a4 __fixunsdfsi
00011b30 g     F .text	0000003c alt_icache_flush
0001624c g     O .bss	00000004 __malloc_top_pad
0000bc9c g     F .text	00000024 strtoul
000145d8 g     O .rwdata	00000004 __mb_cur_max
00007434 g     F .text	0000000c _localeconv_r
0000bcc0 g     F .text	000002f0 _strtoull_r
00008e38 g     F .text	0000003c __i2b
00006de4 g     F .text	0000049c __sfvwrite_r
000099f8 g     F .text	00000070 _sbrk_r
000109ec g     F .text	0000005c helper_plot_pixel
0000d1e8 g     F .text	00000078 _read_r
00012de0 g     O .rwdata	0000000c __lc_ctype
000145f8 g     O .rwdata	00000004 alt_max_fd
000106a0 g     F .text	0000000c alt_up_rs232_check_parity
0000f3b8 g     F .text	00000138 __unpack_d
0000c3e0 g     F .text	00000110 _fclose_r
00006474 g     F .text	00000034 fflush
00016250 g     O .bss	00000004 __malloc_max_sbrked_mem
000116e8 g     F .text	000000bc alt_irq_register
00000ae4 g     F .text	00000054 __extendsfdf2
0000e4a8 g     F .text	00000074 __adddf3
0000df28 g     F .text	00000078 __nesf2
000083fc g     F .text	00000120 __b2d
00011250 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
0000d978 g     F .text	000005b0 __umoddi3
0000f864 g     F .text	00000098 lseek
000145d4 g     O .rwdata	00000004 _global_impure_ptr
000091b4 g     F .text	000005f4 _realloc_r
0001649c g       *ABS*	00000000 __bss_end
0001100c g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00011954 g     F .text	000000ac alt_tick
0001629c g     O .bss	00000100 __hexdig
0000d39c g     F .text	000005dc __udivdi3
0001285c g     O .rodata	00000028 __mprec_bigtens
00009094 g     F .text	00000120 __s2b
0000f0ac g     F .text	00000194 __floatunsidf
0000831c g     F .text	00000060 __mcmp
000145cc g     O .rwdata	00000004 __ctype_ptr
000065dc g     F .text	00000018 __fp_lock_all
00011920 g     F .text	00000034 alt_alarm_stop
0000b730 g     F .text	00000024 strtol
00016268 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
0001321c g     O .rwdata	00000028 alt_dev_null
00000d50 g     F .text	000000c8 __unpack_f
000114d0 g     F .text	0000001c alt_dcache_flush_all
000081e8 g     F .text	00000070 __hi0bits
00010f3c g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000ef60 g     F .text	000000d8 __fixdfsi
0000b4d0 g     F .text	0000001c strtod
00014610 g       *ABS*	00000000 __ram_rwdata_end
000145f0 g     O .rwdata	00000008 alt_dev_list
0000fcc4 g     F .text	000000f4 write
00011d1c g     F .text	000000e8 _putc_r
00010a48 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000dfa0 g     F .text	00000078 __gtsf2
000129e0 g       *ABS*	00000000 __ram_rodata_end
0000f69c g     F .text	00000080 fstat
000107c0 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ede0 g     F .text	00000088 __ledf2
00008f74 g     F .text	00000120 __pow5mult
00016240 g     O .bss	00000004 __nlocale_changed
0000f384 g     F .text	00000008 __umodsi3
0000124c g     F .text	00000034 _scanf_r
0001649c g       *ABS*	00000000 end
00000bf0 g     F .text	00000160 __pack_f
0001099c g     F .text	00000050 alt_up_char_buffer_init
0001011c g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
00010620 g     F .text	00000044 alt_avalon_timer_sc_init
00000b70 g     F .text	00000080 __clzsi2
000104a4 g     F .text	0000017c altera_avalon_jtag_uart_write
00006500 g     F .text	00000004 __sfp_lock_acquire
00007ec4 g     F .text	000000e4 memchr
00001320 g     F .text	00001eac ___vfprintf_internal_r
00009ba4 g     F .text	00000060 _sprintf_r
00006ad0 g     F .text	00000314 _free_r
0000f954 g     F .text	000001dc alt_printf
00011f54 g     F .text	000001b0 __call_exitprocs
00016244 g     O .bss	00000004 __mlocale_changed
000145e4 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000004c _start
0001626c g     O .bss	00000004 _alt_tick_rate
0000b754 g     F .text	00000318 _strtoll_r
00008b04 g     F .text	0000014c __lshift
00016270 g     O .bss	00000004 _alt_nticks
0000fb58 g     F .text	000000f8 read
0000fdd8 g     F .text	00000220 alt_sys_init
00000a4c g     F .text	00000098 __floatsisf
00010798 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00008c50 g     F .text	000001e8 __multiply
00010090 g     F .text	00000038 altera_avalon_jtag_uart_close
000129e0 g       *ABS*	00000000 __ram_rwdata_start
00012188 g       *ABS*	00000000 __ram_rodata_start
00016274 g     O .bss	00000028 __malloc_current_mallinfo
000087fc g     F .text	0000017c __d2b
00010068 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000ba6c g     F .text	00000230 _strtoul_r
00011ac4 g     F .text	0000006c alt_get_fd
0000f4f0 g     F .text	000000c8 __fpcmp_parts_d
0000c370 g     F .text	00000070 _close_r
00011ba4 g     F .text	00000074 memcmp
00010018 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0001649c g       *ABS*	00000000 __alt_stack_base
0000fff8 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00004970 g     F .text	0000013c __swsetup_r
0000e8e0 g     F .text	00000258 __divdf3
00006678 g     F .text	000000f0 __sfp
00008660 g     F .text	00000058 __copybits
00012dec g     O .rwdata	00000408 __malloc_av_
0000650c g     F .text	00000004 __sinit_lock_release
0000e51c g     F .text	000003c4 __muldf3
00009cf0 g     F .text	00000060 __sread
00012304 g     O .rodata	00000010 __thenan_sf
00006964 g     F .text	00000040 fread
00010830 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00011a08 g     F .text	000000bc alt_find_file
000114ec g     F .text	00000070 alt_dev_llist_insert
0000f94c g     F .text	00000004 __malloc_lock
0000fc74 g     F .text	00000050 sbrk
00006278 g     F .text	000001fc _fflush_r
0000c2bc g     F .text	000000b4 _calloc_r
00016240 g       *ABS*	00000000 __bss_start
00008128 g     F .text	00000098 memset
000001b4 g     F .text	000006ac main
00016264 g     O .bss	00000004 alt_envp
00016254 g     O .bss	00000004 __malloc_max_total_mem
00011304 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0001097c g     F .text	00000020 alt_up_char_buffer_open_dev
00010040 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00011f34 g     F .text	0000001c __swbuf
000009d4 g     F .text	00000078 __ltsf2
00006768 g     F .text	000001fc _fread_r
00009c04 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000c4f0 g     F .text	00000014 fclose
0000b4ec g     F .text	00000244 _strtol_r
0000f038 g     F .text	00000074 __truncdfsf2
00004cc4 g     F .text	000015b4 _dtoa_r
00007684 g     F .text	00000740 _malloc_r
000145fc g     O .rwdata	00000004 alt_errno
0000bfb0 g     F .text	000000dc __submore
00007348 g     F .text	000000b8 _fwalk
00007e84 g     F .text	00000040 _mbtowc_r
00011c18 g     F .text	00000104 putc
0000f2bc g     F .text	00000060 __divsi3
0001290c g     O .rodata	00000014 __thenan_df
000069a4 g     F .text	0000012c _malloc_trim_r
00009d50 g     F .text	000000bc strcmp
00012188 g       *ABS*	00000000 __flash_rodata_start
000106ac g     F .text	00000020 alt_up_rs232_open_dev
0000ebc0 g     F .text	00000088 __nedf2
0000fdb8 g     F .text	00000020 alt_irq_init
0000fc50 g     F .text	00000024 alt_release_fd
00009b30 g     F .text	00000074 sprintf
00012314 g     O .rodata	00000100 __clz_tab
00016248 g     O .bss	00000004 _PathLocale
0000b3ac g     F .text	00000124 strtof
0000c244 g     F .text	00000078 _write_r
000074d4 g     F .text	0000001c setlocale
00001280 g     F .text	00000048 scanf
00009b28 g     F .text	00000008 nanf
000145d0 g     O .rwdata	00000004 _impure_ptr
0001625c g     O .bss	00000004 alt_argc
00007dc4 g     F .text	00000080 _mbrtowc_r
000097a8 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000837c g     F .text	00000080 __ulp
00009988 g     F .text	00000040 __isinfd
000065c4 g     F .text	00000018 __fp_unlock_all
000145e8 g     O .rwdata	00000008 alt_fs_list
0001084c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
000107a8 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007440 g     F .text	00000010 localeconv
0000c59c g     F .text	00000068 __hexdig_init
00014610 g       *ABS*	00000000 _edata
0001649c g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000048fc g     F .text	00000074 vfscanf
000102c8 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00009c74 g     F .text	0000007c __swrite
000145e0 g     O .rwdata	00000004 __malloc_trim_threshold
00011b6c g     F .text	00000038 exit
00007280 g     F .text	000000c8 _fwalk_reent
00008978 g     F .text	0000018c __mdiff
0000f31c g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006504 g     F .text	00000004 __sfp_lock_release
00009a68 g     F .text	000000c0 __sccl
000124bc g     O .rodata	00000101 _ctype_
00000e18 g     F .text	000000a8 __fpcmp_parts_f
00012104 g     F .text	00000014 _exit
000099c8 g     F .text	00000030 __isnand
0001143c g     F .text	00000094 alt_alarm_start
0000d260 g     F .text	00000098 __muldi3
000074f0 g     F .text	00000194 __smakebuf_r
00009e0c g     F .text	00000074 strlen
000117a4 g     F .text	0000017c open
0000ecd0 g     F .text	00000088 __gedf2
0000fb30 g     F .text	00000028 alt_putchar
0000c6b4 g     F .text	000007b8 __gethex
000115cc g     F .text	00000020 alt_icache_flush_all
00014604 g     O .rwdata	00000004 alt_priority_mask
000031cc g     F .text	00000024 __vfprintf_internal
0000e428 g     F .text	00000080 __subdf3
00008258 g     F .text	000000c4 __lo0bits
000031f0 g     F .text	00001680 __svfscanf_r
00014608 g     O .rwdata	00000008 alt_alarm_list
0000c08c g     F .text	0000019c _ungetc_r
00010864 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000f5b8 g     F .text	000000dc close
0000f7a0 g     F .text	000000c4 alt_load
00000ec0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006508 g     F .text	00000004 __sinit_lock_acquire
00008e74 g     F .text	00000100 __multadd
000081c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8418e704 	addi	r16,r16,25500
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     168:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     16c:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     170:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
     174:	00bffd16 	blt	zero,r2,16c <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     178:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     17c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     180:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     184:	d6b17314 	ori	gp,gp,50636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     188:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     18c:	10989014 	ori	r2,r2,25152

    movhi r3, %hi(__bss_end)
     190:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     194:	18d92714 	ori	r3,r3,25756

    beq r2, r3, 1f
     198:	10c00326 	beq	r2,r3,1a8 <_start+0x40>

0:
    stw zero, (r2)
     19c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1a4:	10fffd36 	bltu	r2,r3,19c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1a8:	000f7a00 	call	f7a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ac:	000f8fc0 	call	f8fc <alt_main>

000001b0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b0:	003fff06 	br	1b0 <alt_after_alt_main>

000001b4 <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     1b4:	defff604 	addi	sp,sp,-40
     1b8:	dfc00915 	stw	ra,36(sp)
     1bc:	df000815 	stw	fp,32(sp)
     1c0:	ddc00715 	stw	r23,28(sp)
     1c4:	dd800615 	stw	r22,24(sp)
     1c8:	dd400515 	stw	r21,20(sp)
     1cc:	dd000415 	stw	r20,16(sp)
     1d0:	dcc00315 	stw	r19,12(sp)
     1d4:	dc800215 	stw	r18,8(sp)
     1d8:	dc400115 	stw	r17,4(sp)
     1dc:	dc000015 	stw	r16,0(sp)
     1e0:	023ff6b4 	movhi	r8,65498
     1e4:	421fef04 	addi	r8,r8,32700
     1e8:	da37883a 	add	sp,sp,r8
	float xoff;
	float yoff;
	float xscale = 0.005;
	float yscale = 0.005;
	
	int num_iterations = 50;
     1ec:	008009b4 	movhi	r2,38
     1f0:	10a00004 	addi	r2,r2,-32768
     1f4:	d887883a 	add	r3,sp,r2
     1f8:	00800c84 	movi	r2,50
     1fc:	18800015 	stw	r2,0(r3)
	//Good values for initial (centered) set
	xoff = -1.0*2.0*640.0*xscale/3.0;
	yoff = -1.0*480.0*yscale/2.0;

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     200:	01000074 	movhi	r4,1
     204:	21086204 	addi	r4,r4,8584
     208:	001141c0 	call	1141c <alt_up_pixel_buffer_dma_open_dev>
     20c:	00c009b4 	movhi	r3,38
     210:	18e00c04 	addi	r3,r3,-32720
     214:	1ec7883a 	add	r3,r3,sp
     218:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     21c:	1000041e 	bne	r2,zero,230 <main+0x7c>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     220:	01000074 	movhi	r4,1
     224:	21086804 	addi	r4,r4,8608
     228:	000f9540 	call	f954 <alt_printf>
     22c:	00000306 	br	23c <main+0x88>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     230:	01000074 	movhi	r4,1
     234:	21087404 	addi	r4,r4,8656
     238:	000f9540 	call	f954 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     23c:	008009b4 	movhi	r2,38
     240:	10a00c04 	addi	r2,r2,-32720
     244:	16c5883a 	add	r2,r2,sp
     248:	11000017 	ldw	r4,0(r2)
     24c:	000b883a 	mov	r5,zero
     250:	00112500 	call	11250 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     254:	01000074 	movhi	r4,1
     258:	21087f04 	addi	r4,r4,8700
     25c:	001097c0 	call	1097c <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     260:	10016c26 	beq	r2,zero,814 <main+0x660>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     264:	01000074 	movhi	r4,1
     268:	21089104 	addi	r4,r4,8772
     26c:	000f9540 	call	f954 <alt_printf>
	//0 - Hold at Zero
	//1 - Reset to Zero
	//2 - Stop Incremeting and Hold
	//3 - Actively Incrementing
	
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
     270:	00802034 	movhi	r2,128
     274:	10000035 	stwio	zero,0(r2)
     278:	01300274 	movhi	r4,49161
     27c:	21222204 	addi	r4,r4,-30584
     280:	00c009b4 	movhi	r3,38
     284:	18e00b04 	addi	r3,r3,-32724
     288:	1ec7883a 	add	r3,r3,sp
     28c:	19000015 	stw	r4,0(r3)
     290:	00efe6b4 	movhi	r3,49050
     294:	18e66644 	addi	r3,r3,-26215
     298:	008009b4 	movhi	r2,38
     29c:	10a00a04 	addi	r2,r2,-32728
     2a0:	16c5883a 	add	r2,r2,sp
     2a4:	10c00015 	stw	r3,0(r2)
     2a8:	008ee934 	movhi	r2,15268
     2ac:	10b5c284 	addi	r2,r2,-10486
     2b0:	010009b4 	movhi	r4,38
     2b4:	21200904 	addi	r4,r4,-32732
     2b8:	26c9883a 	add	r4,r4,sp
     2bc:	20800015 	stw	r2,0(r4)
     2c0:	00c009b4 	movhi	r3,38
     2c4:	18e00804 	addi	r3,r3,-32736
     2c8:	1ec7883a 	add	r3,r3,sp
     2cc:	18800015 	stw	r2,0(r3)
     2d0:	008009b4 	movhi	r2,38
     2d4:	10a00004 	addi	r2,r2,-32768
     2d8:	d887883a 	add	r3,sp,r2
     2dc:	10800d04 	addi	r2,r2,52
     2e0:	16c5883a 	add	r2,r2,sp
     2e4:	10c00015 	stw	r3,0(r2)
     2e8:	00c009b4 	movhi	r3,38
     2ec:	18e00204 	addi	r3,r3,-32760
     2f0:	d8c9883a 	add	r4,sp,r3
     2f4:	18c00c04 	addi	r3,r3,48
     2f8:	1ec7883a 	add	r3,r3,sp
     2fc:	19000015 	stw	r4,0(r3)
     300:	010009b4 	movhi	r4,38
     304:	21200404 	addi	r4,r4,-32752
     308:	d905883a 	add	r2,sp,r4
     30c:	21000b04 	addi	r4,r4,44
     310:	26c9883a 	add	r4,r4,sp
     314:	20800015 	stw	r2,0(r4)
     318:	008009b4 	movhi	r2,38
     31c:	10a00104 	addi	r2,r2,-32764
     320:	d887883a 	add	r3,sp,r2
     324:	10800f04 	addi	r2,r2,60
     328:	16c5883a 	add	r2,r2,sp
     32c:	10c00015 	stw	r3,0(r2)
     330:	00001606 	br	38c <main+0x1d8>
		}
		
		float xrange = xmax - xmin;
		float yrange = ymax - ymin;
		
		xscale = xrange/640.0;
     334:	00c009b4 	movhi	r3,38
     338:	18e00b04 	addi	r3,r3,-32724
     33c:	1ec7883a 	add	r3,r3,sp
     340:	18c00017 	ldw	r3,0(r3)
     344:	88c9ffb2 	custom	254,r4,r17,r3
     348:	01510834 	movhi	r5,17440
     34c:	00008600 	call	860 <__divsf3>
     350:	010009b4 	movhi	r4,38
     354:	21200904 	addi	r4,r4,-32732
     358:	26c9883a 	add	r4,r4,sp
     35c:	20800015 	stw	r2,0(r4)
		yscale = yrange/480.0;
     360:	008009b4 	movhi	r2,38
     364:	10a00a04 	addi	r2,r2,-32728
     368:	16c5883a 	add	r2,r2,sp
     36c:	10800017 	ldw	r2,0(r2)
     370:	8089ffb2 	custom	254,r4,r16,r2
     374:	0150fc34 	movhi	r5,17392
     378:	00008600 	call	860 <__divsf3>
     37c:	00c009b4 	movhi	r3,38
     380:	18e00804 	addi	r3,r3,-32736
     384:	1ec7883a 	add	r3,r3,sp
     388:	18800015 	stw	r2,0(r3)
	while(1)
	{
	
		int reset = 0;
		
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 1);
     38c:	00800044 	movi	r2,1
     390:	01002034 	movhi	r4,128
     394:	20800035 	stwio	r2,0(r4)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 3);
     398:	008000c4 	movi	r2,3
     39c:	20800035 	stwio	r2,0(r4)
     3a0:	002f883a 	mov	r23,zero
     3a4:	0000ff06 	br	7a4 <main+0x5f0>
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
		
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
				float yc = (float)(y*yscale + yoff);
     3a8:	b009883a 	mov	r4,r22
     3ac:	0000a4c0 	call	a4c <__floatsisf>
     3b0:	00c009b4 	movhi	r3,38
     3b4:	18e00804 	addi	r3,r3,-32736
     3b8:	1ec7883a 	add	r3,r3,sp
     3bc:	18c00017 	ldw	r3,0(r3)
     3c0:	1885ff32 	custom	252,r2,r3,r2
     3c4:	010009b4 	movhi	r4,38
     3c8:	21200a04 	addi	r4,r4,-32728
     3cc:	26c9883a 	add	r4,r4,sp
     3d0:	21000017 	ldw	r4,0(r4)
     3d4:	20b9ff72 	custom	253,fp,r4,r2
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     3d8:	008009b4 	movhi	r2,38
     3dc:	10a00604 	addi	r2,r2,-32744
     3e0:	16c5883a 	add	r2,r2,sp
     3e4:	15400015 	stw	r21,0(r2)
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
				float yc = (float)(y*yscale + yoff);
				//printf ("xc=%f\n",xc);
				//printf ("yc=%f\n",yc);
				zr[x][y] = xc;
     3e8:	00c009b4 	movhi	r3,38
     3ec:	18e00704 	addi	r3,r3,-32740
     3f0:	1ec7883a 	add	r3,r3,sp
     3f4:	18c00017 	ldw	r3,0(r3)
     3f8:	a8c00015 	stw	r3,0(r21)
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     3fc:	010009b4 	movhi	r4,38
     400:	21200504 	addi	r4,r4,-32748
     404:	26c9883a 	add	r4,r4,sp
     408:	25000015 	stw	r20,0(r4)
				float xc = (float)(x*xscale + xoff);
				float yc = (float)(y*yscale + yoff);
				//printf ("xc=%f\n",xc);
				//printf ("yc=%f\n",yc);
				zr[x][y] = xc;
				zi[x][y] = yc;
     40c:	a7000015 	stw	fp,0(r20)
				t = 0;
				//float q = pow((xc - 0.25), 2) + pow(yc, 2);
				//if (q*(q+(xc-0.25)) >= 0.25*pow(yc, 2)) {
					while (t<num_iterations){
     410:	00c009b4 	movhi	r3,38
     414:	18e00d04 	addi	r3,r3,-32716
     418:	1ec7883a 	add	r3,r3,sp
     41c:	18c00017 	ldw	r3,0(r3)
     420:	18800017 	ldw	r2,0(r3)
     424:	0080440e 	bge	zero,r2,538 <main+0x384>
     428:	0027883a 	mov	r19,zero
     42c:	008009b4 	movhi	r2,38
     430:	10a00004 	addi	r2,r2,-32768
     434:	d8a5883a 	add	r18,sp,r2
						if (((*pushbuttons) & 0x08) && reset == 0) {
     438:	00840034 	movhi	r2,4096
     43c:	10801404 	addi	r2,r2,80
     440:	10800017 	ldw	r2,0(r2)
     444:	1080020c 	andi	r2,r2,8
     448:	1000b01e 	bne	r2,zero,70c <main+0x558>
							//alt_printf ("Button Pushed ");
							reset = 1;
							
							break;
						}
						float zr_xy = zr[x][y];
     44c:	010009b4 	movhi	r4,38
     450:	21200604 	addi	r4,r4,-32744
     454:	26c9883a 	add	r4,r4,sp
     458:	21000017 	ldw	r4,0(r4)
     45c:	20c00017 	ldw	r3,0(r4)
						float zi_xy = zi[x][y];
     460:	008009b4 	movhi	r2,38
     464:	10a00504 	addi	r2,r2,-32748
     468:	16c5883a 	add	r2,r2,sp
     46c:	10800017 	ldw	r2,0(r2)
     470:	11400017 	ldw	r5,0(r2)
						float zr_n = zr_xy*zr_xy - zi_xy*zi_xy + xc;
     474:	18c5ff32 	custom	252,r2,r3,r3
     478:	2949ff32 	custom	252,r4,r5,r5
     47c:	1105ffb2 	custom	254,r2,r2,r4
     480:	010009b4 	movhi	r4,38
     484:	21200704 	addi	r4,r4,-32740
     488:	26c9883a 	add	r4,r4,sp
     48c:	21000017 	ldw	r4,0(r4)
     490:	20a3ff72 	custom	253,r17,r4,r2
						float zi_n = 2.0*zr_xy*zi_xy + yc;
     494:	18c7ff72 	custom	253,r3,r3,r3
     498:	28cbff32 	custom	252,r5,r5,r3
     49c:	e161ff72 	custom	253,r16,fp,r5
						if (zr_n*zi_n < 4.0) {
     4a0:	8c09ff32 	custom	252,r4,r17,r16
     4a4:	01502034 	movhi	r5,16512
     4a8:	00009d40 	call	9d4 <__ltsf2>
     4ac:	10000b0e 	bge	r2,zero,4dc <main+0x328>
							
							zr[x][y] = zr_n;
     4b0:	008009b4 	movhi	r2,38
     4b4:	10a00604 	addi	r2,r2,-32744
     4b8:	16c5883a 	add	r2,r2,sp
     4bc:	10800017 	ldw	r2,0(r2)
     4c0:	14400015 	stw	r17,0(r2)
							zi[x][y] = zi_n;
     4c4:	00c009b4 	movhi	r3,38
     4c8:	18e00504 	addi	r3,r3,-32748
     4cc:	1ec7883a 	add	r3,r3,sp
     4d0:	18c00017 	ldw	r3,0(r3)
     4d4:	1c000015 	stw	r16,0(r3)
     4d8:	00000906 	br	500 <main+0x34c>
						}else{
							alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, t, x, y);
     4dc:	008009b4 	movhi	r2,38
     4e0:	10a00c04 	addi	r2,r2,-32720
     4e4:	16c5883a 	add	r2,r2,sp
     4e8:	11000017 	ldw	r4,0(r2)
     4ec:	980b883a 	mov	r5,r19
     4f0:	b80d883a 	mov	r6,r23
     4f4:	b00f883a 	mov	r7,r22
     4f8:	00113280 	call	11328 <alt_up_pixel_buffer_dma_draw>
							t = num_iterations;
     4fc:	94c00017 	ldw	r19,0(r18)
						}
						if (t == num_iterations - 1)
     500:	90800017 	ldw	r2,0(r18)
     504:	10bfffc4 	addi	r2,r2,-1
     508:	9880081e 	bne	r19,r2,52c <main+0x378>
						{
							alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, 255, x, y);
     50c:	00c009b4 	movhi	r3,38
     510:	18e00c04 	addi	r3,r3,-32720
     514:	1ec7883a 	add	r3,r3,sp
     518:	19000017 	ldw	r4,0(r3)
     51c:	01403fc4 	movi	r5,255
     520:	b80d883a 	mov	r6,r23
     524:	b00f883a 	mov	r7,r22
     528:	00113280 	call	11328 <alt_up_pixel_buffer_dma_draw>
						}
						t = t +1;
     52c:	9cc00044 	addi	r19,r19,1
				zr[x][y] = xc;
				zi[x][y] = yc;
				t = 0;
				//float q = pow((xc - 0.25), 2) + pow(yc, 2);
				//if (q*(q+(xc-0.25)) >= 0.25*pow(yc, 2)) {
					while (t<num_iterations){
     530:	90800017 	ldw	r2,0(r18)
     534:	98bfc016 	blt	r19,r2,438 <main+0x284>
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
		
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
     538:	b5800044 	addi	r22,r22,1
     53c:	00800104 	movi	r2,4
     540:	a8ab883a 	add	r21,r21,r2
     544:	a0a9883a 	add	r20,r20,r2
     548:	00807804 	movi	r2,480
     54c:	b080ad26 	beq	r22,r2,804 <main+0x650>
     550:	003f9506 	br	3a8 <main+0x1f4>
			if (reset == 1) {
				break;	
			}
		}
		
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 2);
     554:	00800084 	movi	r2,2
     558:	01002034 	movhi	r4,128
     55c:	20800035 	stwio	r2,0(r4)
		float xmin;
		float ymin;
		float xmax;
		float ymax;
		if (reset == 0) {
			printf ("\nCurrent X Offset=%f\n",xoff);
     560:	008009b4 	movhi	r2,38
     564:	10a00b04 	addi	r2,r2,-32724
     568:	16c5883a 	add	r2,r2,sp
     56c:	11000017 	ldw	r4,0(r2)
     570:	0000ae40 	call	ae4 <__extendsfdf2>
     574:	01000074 	movhi	r4,1
     578:	21089904 	addi	r4,r4,8804
     57c:	100b883a 	mov	r5,r2
     580:	180d883a 	mov	r6,r3
     584:	00011d40 	call	11d4 <printf>
			printf ("Current Y Offset=%f\n",yoff);
     588:	00c009b4 	movhi	r3,38
     58c:	18e00a04 	addi	r3,r3,-32728
     590:	1ec7883a 	add	r3,r3,sp
     594:	19000017 	ldw	r4,0(r3)
     598:	0000ae40 	call	ae4 <__extendsfdf2>
     59c:	01000074 	movhi	r4,1
     5a0:	21089f04 	addi	r4,r4,8828
     5a4:	100b883a 	mov	r5,r2
     5a8:	180d883a 	mov	r6,r3
     5ac:	00011d40 	call	11d4 <printf>
			alt_printf ("x min? ");
     5b0:	01000074 	movhi	r4,1
     5b4:	2108a504 	addi	r4,r4,8852
     5b8:	000f9540 	call	f954 <alt_printf>
			scanf ("%f",&xmin);
     5bc:	01000074 	movhi	r4,1
     5c0:	2108a704 	addi	r4,r4,8860
     5c4:	008009b4 	movhi	r2,38
     5c8:	10a00404 	addi	r2,r2,-32752
     5cc:	d88b883a 	add	r5,sp,r2
     5d0:	00012800 	call	1280 <scanf>
			alt_printf ("x max? ");
     5d4:	01000074 	movhi	r4,1
     5d8:	2108a804 	addi	r4,r4,8864
     5dc:	000f9540 	call	f954 <alt_printf>
			scanf ("%f",&xmax);
     5e0:	01000074 	movhi	r4,1
     5e4:	2108a704 	addi	r4,r4,8860
     5e8:	00c009b4 	movhi	r3,38
     5ec:	18e00204 	addi	r3,r3,-32760
     5f0:	d8cb883a 	add	r5,sp,r3
     5f4:	00012800 	call	1280 <scanf>
			alt_printf ("y min? ");
     5f8:	01000074 	movhi	r4,1
     5fc:	2108aa04 	addi	r4,r4,8872
     600:	000f9540 	call	f954 <alt_printf>
			scanf ("%f",&ymin);
     604:	01000074 	movhi	r4,1
     608:	2108a704 	addi	r4,r4,8860
     60c:	008009b4 	movhi	r2,38
     610:	10a00104 	addi	r2,r2,-32764
     614:	d88b883a 	add	r5,sp,r2
     618:	00012800 	call	1280 <scanf>
			alt_printf ("y max? ");
     61c:	01000074 	movhi	r4,1
     620:	2108ac04 	addi	r4,r4,8880
     624:	000f9540 	call	f954 <alt_printf>
			scanf ("%f",&ymax);
     628:	01000074 	movhi	r4,1
     62c:	2108a704 	addi	r4,r4,8860
     630:	014009b4 	movhi	r5,38
     634:	29600304 	addi	r5,r5,-32756
     638:	d94b883a 	add	r5,sp,r5
     63c:	00012800 	call	1280 <scanf>
			alt_printf ("Number of Iterations? ");
     640:	01000074 	movhi	r4,1
     644:	2108ae04 	addi	r4,r4,8888
     648:	000f9540 	call	f954 <alt_printf>
			scanf ("%d",&num_iterations);
     64c:	01000074 	movhi	r4,1
     650:	2108b404 	addi	r4,r4,8912
     654:	00c009b4 	movhi	r3,38
     658:	18e00004 	addi	r3,r3,-32768
     65c:	d8cb883a 	add	r5,sp,r3
     660:	00012800 	call	1280 <scanf>
			alt_printf ("Cool. Get ready for some crazy zooming action.\n");
     664:	01000074 	movhi	r4,1
     668:	2108b504 	addi	r4,r4,8916
     66c:	000f9540 	call	f954 <alt_printf>
			ymin = -1.0;
			ymax = 1.0;
			num_iterations = 25;
		}
		
		float xrange = xmax - xmin;
     670:	010009b4 	movhi	r4,38
     674:	21200e04 	addi	r4,r4,-32712
     678:	26c9883a 	add	r4,r4,sp
     67c:	21000017 	ldw	r4,0(r4)
     680:	24400017 	ldw	r17,0(r4)
     684:	008009b4 	movhi	r2,38
     688:	10a00f04 	addi	r2,r2,-32708
     68c:	16c5883a 	add	r2,r2,sp
     690:	10800017 	ldw	r2,0(r2)
     694:	10c00017 	ldw	r3,0(r2)
     698:	008009b4 	movhi	r2,38
     69c:	10a00b04 	addi	r2,r2,-32724
     6a0:	16c5883a 	add	r2,r2,sp
     6a4:	10c00015 	stw	r3,0(r2)
		float yrange = ymax - ymin;
     6a8:	008009b4 	movhi	r2,38
     6ac:	10a00304 	addi	r2,r2,-32756
     6b0:	d885883a 	add	r2,sp,r2
     6b4:	14000017 	ldw	r16,0(r2)
     6b8:	010009b4 	movhi	r4,38
     6bc:	21201004 	addi	r4,r4,-32704
     6c0:	26c9883a 	add	r4,r4,sp
     6c4:	21000017 	ldw	r4,0(r4)
     6c8:	20800017 	ldw	r2,0(r4)
     6cc:	010009b4 	movhi	r4,38
     6d0:	21200a04 	addi	r4,r4,-32728
     6d4:	26c9883a 	add	r4,r4,sp
     6d8:	20800015 	stw	r2,0(r4)
		
		t=0;

		
		
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     6dc:	00c009b4 	movhi	r3,38
     6e0:	18e00c04 	addi	r3,r3,-32720
     6e4:	1ec7883a 	add	r3,r3,sp
     6e8:	19000017 	ldw	r4,0(r3)
     6ec:	00113e40 	call	113e4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     6f0:	103f101e 	bne	r2,zero,334 <main+0x180>
				
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     6f4:	008009b4 	movhi	r2,38
     6f8:	10a00c04 	addi	r2,r2,-32720
     6fc:	16c5883a 	add	r2,r2,sp
     700:	11000017 	ldw	r4,0(r2)
     704:	00113040 	call	11304 <alt_up_pixel_buffer_dma_swap_buffers>
     708:	003f0a06 	br	334 <main+0x180>
			if (reset == 1) {
				break;	
			}
		}
		
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 2);
     70c:	00800084 	movi	r2,2
     710:	00c02034 	movhi	r3,128
     714:	18800035 	stwio	r2,0(r3)
			alt_printf ("Number of Iterations? ");
			scanf ("%d",&num_iterations);
			alt_printf ("Cool. Get ready for some crazy zooming action.\n");
		} else {
			//alt_printf ("Reset ");
			alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     718:	008009b4 	movhi	r2,38
     71c:	10a00c04 	addi	r2,r2,-32720
     720:	16c5883a 	add	r2,r2,sp
     724:	11000017 	ldw	r4,0(r2)
     728:	000b883a 	mov	r5,zero
     72c:	00112500 	call	11250 <alt_up_pixel_buffer_dma_clear_screen>
			xmin = -2.0;
     730:	00b00034 	movhi	r2,49152
     734:	00c009b4 	movhi	r3,38
     738:	18e00f04 	addi	r3,r3,-32708
     73c:	1ec7883a 	add	r3,r3,sp
     740:	18c00017 	ldw	r3,0(r3)
     744:	18800015 	stw	r2,0(r3)
			xmax = 1.0;
     748:	00cfe034 	movhi	r3,16256
     74c:	010009b4 	movhi	r4,38
     750:	21200e04 	addi	r4,r4,-32712
     754:	26c9883a 	add	r4,r4,sp
     758:	21000017 	ldw	r4,0(r4)
     75c:	20c00015 	stw	r3,0(r4)
			ymin = -1.0;
     760:	00afe034 	movhi	r2,49024
     764:	010009b4 	movhi	r4,38
     768:	21201004 	addi	r4,r4,-32704
     76c:	26c9883a 	add	r4,r4,sp
     770:	21000017 	ldw	r4,0(r4)
     774:	20800015 	stw	r2,0(r4)
			ymax = 1.0;
     778:	008009b4 	movhi	r2,38
     77c:	10a00304 	addi	r2,r2,-32756
     780:	d885883a 	add	r2,sp,r2
     784:	10c00015 	stw	r3,0(r2)
			num_iterations = 25;
     788:	00800644 	movi	r2,25
     78c:	00c009b4 	movhi	r3,38
     790:	18e00d04 	addi	r3,r3,-32716
     794:	1ec7883a 	add	r3,r3,sp
     798:	18c00017 	ldw	r3,0(r3)
     79c:	18800015 	stw	r2,0(r3)
     7a0:	003fb306 	br	670 <main+0x4bc>
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
		
		for (x=0; x<640; x++) {
			for (y=0; y<480; y++) {
				float xc = (float)(x*xscale + xoff);
     7a4:	b809883a 	mov	r4,r23
     7a8:	0000a4c0 	call	a4c <__floatsisf>
     7ac:	010009b4 	movhi	r4,38
     7b0:	21200904 	addi	r4,r4,-32732
     7b4:	26c9883a 	add	r4,r4,sp
     7b8:	21000017 	ldw	r4,0(r4)
     7bc:	2085ff32 	custom	252,r2,r4,r2
     7c0:	00c009b4 	movhi	r3,38
     7c4:	18e00b04 	addi	r3,r3,-32724
     7c8:	1ec7883a 	add	r3,r3,sp
     7cc:	18c00017 	ldw	r3,0(r3)
     7d0:	1889ff72 	custom	253,r4,r3,r2
     7d4:	00c009b4 	movhi	r3,38
     7d8:	18e00704 	addi	r3,r3,-32740
     7dc:	1ec7883a 	add	r3,r3,sp
     7e0:	19000015 	stw	r4,0(r3)
     7e4:	b8c1e024 	muli	r3,r23,1920
     7e8:	d8eb883a 	add	r21,sp,r3
     7ec:	008004f4 	movhi	r2,19
     7f0:	10b00004 	addi	r2,r2,-16384
     7f4:	d885883a 	add	r2,sp,r2
     7f8:	10e9883a 	add	r20,r2,r3
     7fc:	002d883a 	mov	r22,zero
     800:	003ee906 	br	3a8 <main+0x1f4>
	
		//int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		//*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
		
		for (x=0; x<640; x++) {
     804:	bdc00044 	addi	r23,r23,1
     808:	0080a004 	movi	r2,640
     80c:	b8bf5126 	beq	r23,r2,554 <main+0x3a0>
     810:	003fe406 	br	7a4 <main+0x5f0>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     814:	01000074 	movhi	r4,1
     818:	21088504 	addi	r4,r4,8724
     81c:	000f9540 	call	f954 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     820:	00bfffc4 	movi	r2,-1
     824:	020009b4 	movhi	r8,38
     828:	42201104 	addi	r8,r8,-32700
     82c:	da37883a 	add	sp,sp,r8
     830:	dfc00917 	ldw	ra,36(sp)
     834:	df000817 	ldw	fp,32(sp)
     838:	ddc00717 	ldw	r23,28(sp)
     83c:	dd800617 	ldw	r22,24(sp)
     840:	dd400517 	ldw	r21,20(sp)
     844:	dd000417 	ldw	r20,16(sp)
     848:	dcc00317 	ldw	r19,12(sp)
     84c:	dc800217 	ldw	r18,8(sp)
     850:	dc400117 	ldw	r17,4(sp)
     854:	dc000017 	ldw	r16,0(sp)
     858:	dec00a04 	addi	sp,sp,40
     85c:	f800283a 	ret

00000860 <__divsf3>:
     860:	defff304 	addi	sp,sp,-52
     864:	dc400b15 	stw	r17,44(sp)
     868:	dc400204 	addi	r17,sp,8
     86c:	dc000a15 	stw	r16,40(sp)
     870:	d9000015 	stw	r4,0(sp)
     874:	d9400115 	stw	r5,4(sp)
     878:	d809883a 	mov	r4,sp
     87c:	880b883a 	mov	r5,r17
     880:	dc000604 	addi	r16,sp,24
     884:	dfc00c15 	stw	ra,48(sp)
     888:	0000d500 	call	d50 <__unpack_f>
     88c:	d9000104 	addi	r4,sp,4
     890:	800b883a 	mov	r5,r16
     894:	0000d500 	call	d50 <__unpack_f>
     898:	d9000217 	ldw	r4,8(sp)
     89c:	00800044 	movi	r2,1
     8a0:	01800104 	movi	r6,4
     8a4:	11000a2e 	bgeu	r2,r4,8d0 <__divsf3+0x70>
     8a8:	d9400617 	ldw	r5,24(sp)
     8ac:	1140432e 	bgeu	r2,r5,9bc <__divsf3+0x15c>
     8b0:	d8800317 	ldw	r2,12(sp)
     8b4:	d8c00717 	ldw	r3,28(sp)
     8b8:	10c4f03a 	xor	r2,r2,r3
     8bc:	d8800315 	stw	r2,12(sp)
     8c0:	21800226 	beq	r4,r6,8cc <__divsf3+0x6c>
     8c4:	00800084 	movi	r2,2
     8c8:	2080101e 	bne	r4,r2,90c <__divsf3+0xac>
     8cc:	29000726 	beq	r5,r4,8ec <__divsf3+0x8c>
     8d0:	8809883a 	mov	r4,r17
     8d4:	0000bf00 	call	bf0 <__pack_f>
     8d8:	dfc00c17 	ldw	ra,48(sp)
     8dc:	dc400b17 	ldw	r17,44(sp)
     8e0:	dc000a17 	ldw	r16,40(sp)
     8e4:	dec00d04 	addi	sp,sp,52
     8e8:	f800283a 	ret
     8ec:	01000074 	movhi	r4,1
     8f0:	2108c104 	addi	r4,r4,8964
     8f4:	0000bf00 	call	bf0 <__pack_f>
     8f8:	dfc00c17 	ldw	ra,48(sp)
     8fc:	dc400b17 	ldw	r17,44(sp)
     900:	dc000a17 	ldw	r16,40(sp)
     904:	dec00d04 	addi	sp,sp,52
     908:	f800283a 	ret
     90c:	29802d26 	beq	r5,r6,9c4 <__divsf3+0x164>
     910:	28801a26 	beq	r5,r2,97c <__divsf3+0x11c>
     914:	d8c00417 	ldw	r3,16(sp)
     918:	d8800817 	ldw	r2,32(sp)
     91c:	d9000517 	ldw	r4,20(sp)
     920:	d9800917 	ldw	r6,36(sp)
     924:	1885c83a 	sub	r2,r3,r2
     928:	d8800415 	stw	r2,16(sp)
     92c:	2180032e 	bgeu	r4,r6,93c <__divsf3+0xdc>
     930:	10bfffc4 	addi	r2,r2,-1
     934:	d8800415 	stw	r2,16(sp)
     938:	2109883a 	add	r4,r4,r4
     93c:	01500034 	movhi	r5,16384
     940:	0007883a 	mov	r3,zero
     944:	0005883a 	mov	r2,zero
     948:	01c007c4 	movi	r7,31
     94c:	10800044 	addi	r2,r2,1
     950:	21800236 	bltu	r4,r6,95c <__divsf3+0xfc>
     954:	1946b03a 	or	r3,r3,r5
     958:	2189c83a 	sub	r4,r4,r6
     95c:	280ad07a 	srli	r5,r5,1
     960:	2109883a 	add	r4,r4,r4
     964:	11fff91e 	bne	r2,r7,94c <__divsf3+0xec>
     968:	19401fcc 	andi	r5,r3,127
     96c:	00801004 	movi	r2,64
     970:	28800a26 	beq	r5,r2,99c <__divsf3+0x13c>
     974:	d8c00515 	stw	r3,20(sp)
     978:	003fd506 	br	8d0 <__divsf3+0x70>
     97c:	8809883a 	mov	r4,r17
     980:	d9800215 	stw	r6,8(sp)
     984:	0000bf00 	call	bf0 <__pack_f>
     988:	dfc00c17 	ldw	ra,48(sp)
     98c:	dc400b17 	ldw	r17,44(sp)
     990:	dc000a17 	ldw	r16,40(sp)
     994:	dec00d04 	addi	sp,sp,52
     998:	f800283a 	ret
     99c:	1880200c 	andi	r2,r3,128
     9a0:	103ff41e 	bne	r2,zero,974 <__divsf3+0x114>
     9a4:	203ff326 	beq	r4,zero,974 <__divsf3+0x114>
     9a8:	1947883a 	add	r3,r3,r5
     9ac:	00bfe004 	movi	r2,-128
     9b0:	1886703a 	and	r3,r3,r2
     9b4:	d8c00515 	stw	r3,20(sp)
     9b8:	003fc506 	br	8d0 <__divsf3+0x70>
     9bc:	8009883a 	mov	r4,r16
     9c0:	003fc406 	br	8d4 <__divsf3+0x74>
     9c4:	8809883a 	mov	r4,r17
     9c8:	d8000515 	stw	zero,20(sp)
     9cc:	d8000415 	stw	zero,16(sp)
     9d0:	003fc006 	br	8d4 <__divsf3+0x74>

000009d4 <__ltsf2>:
     9d4:	defff304 	addi	sp,sp,-52
     9d8:	dc400b15 	stw	r17,44(sp)
     9dc:	dc400204 	addi	r17,sp,8
     9e0:	dc000a15 	stw	r16,40(sp)
     9e4:	d9000015 	stw	r4,0(sp)
     9e8:	d9400115 	stw	r5,4(sp)
     9ec:	d809883a 	mov	r4,sp
     9f0:	880b883a 	mov	r5,r17
     9f4:	dc000604 	addi	r16,sp,24
     9f8:	dfc00c15 	stw	ra,48(sp)
     9fc:	0000d500 	call	d50 <__unpack_f>
     a00:	d9000104 	addi	r4,sp,4
     a04:	800b883a 	mov	r5,r16
     a08:	0000d500 	call	d50 <__unpack_f>
     a0c:	d8800217 	ldw	r2,8(sp)
     a10:	00c00044 	movi	r3,1
     a14:	180d883a 	mov	r6,r3
     a18:	1880062e 	bgeu	r3,r2,a34 <__ltsf2+0x60>
     a1c:	d8800617 	ldw	r2,24(sp)
     a20:	8809883a 	mov	r4,r17
     a24:	800b883a 	mov	r5,r16
     a28:	1880022e 	bgeu	r3,r2,a34 <__ltsf2+0x60>
     a2c:	0000e180 	call	e18 <__fpcmp_parts_f>
     a30:	100d883a 	mov	r6,r2
     a34:	3005883a 	mov	r2,r6
     a38:	dfc00c17 	ldw	ra,48(sp)
     a3c:	dc400b17 	ldw	r17,44(sp)
     a40:	dc000a17 	ldw	r16,40(sp)
     a44:	dec00d04 	addi	sp,sp,52
     a48:	f800283a 	ret

00000a4c <__floatsisf>:
     a4c:	2006d7fa 	srli	r3,r4,31
     a50:	defffa04 	addi	sp,sp,-24
     a54:	008000c4 	movi	r2,3
     a58:	dfc00515 	stw	ra,20(sp)
     a5c:	dc000415 	stw	r16,16(sp)
     a60:	d8800015 	stw	r2,0(sp)
     a64:	d8c00115 	stw	r3,4(sp)
     a68:	2000081e 	bne	r4,zero,a8c <__floatsisf+0x40>
     a6c:	00800084 	movi	r2,2
     a70:	d8800015 	stw	r2,0(sp)
     a74:	d809883a 	mov	r4,sp
     a78:	0000bf00 	call	bf0 <__pack_f>
     a7c:	dfc00517 	ldw	ra,20(sp)
     a80:	dc000417 	ldw	r16,16(sp)
     a84:	dec00604 	addi	sp,sp,24
     a88:	f800283a 	ret
     a8c:	00800784 	movi	r2,30
     a90:	1807003a 	cmpeq	r3,r3,zero
     a94:	d8800215 	stw	r2,8(sp)
     a98:	18000e1e 	bne	r3,zero,ad4 <__floatsisf+0x88>
     a9c:	00a00034 	movhi	r2,32768
     aa0:	20800e26 	beq	r4,r2,adc <__floatsisf+0x90>
     aa4:	0121c83a 	sub	r16,zero,r4
     aa8:	8009883a 	mov	r4,r16
     aac:	dc000315 	stw	r16,12(sp)
     ab0:	0000b700 	call	b70 <__clzsi2>
     ab4:	117fffc4 	addi	r5,r2,-1
     ab8:	017fee0e 	bge	zero,r5,a74 <__floatsisf+0x28>
     abc:	d8800217 	ldw	r2,8(sp)
     ac0:	8146983a 	sll	r3,r16,r5
     ac4:	1145c83a 	sub	r2,r2,r5
     ac8:	d8c00315 	stw	r3,12(sp)
     acc:	d8800215 	stw	r2,8(sp)
     ad0:	003fe806 	br	a74 <__floatsisf+0x28>
     ad4:	2021883a 	mov	r16,r4
     ad8:	003ff306 	br	aa8 <__floatsisf+0x5c>
     adc:	00b3c034 	movhi	r2,52992
     ae0:	003fe606 	br	a7c <__floatsisf+0x30>

00000ae4 <__extendsfdf2>:
     ae4:	defff904 	addi	sp,sp,-28
     ae8:	d9000115 	stw	r4,4(sp)
     aec:	d9400204 	addi	r5,sp,8
     af0:	d9000104 	addi	r4,sp,4
     af4:	dfc00615 	stw	ra,24(sp)
     af8:	0000d500 	call	d50 <__unpack_f>
     afc:	d9c00517 	ldw	r7,20(sp)
     b00:	0011883a 	mov	r8,zero
     b04:	400697ba 	slli	r3,r8,30
     b08:	3812d0ba 	srli	r9,r7,2
     b0c:	380497ba 	slli	r2,r7,30
     b10:	d9000217 	ldw	r4,8(sp)
     b14:	d9400317 	ldw	r5,12(sp)
     b18:	d9800417 	ldw	r6,16(sp)
     b1c:	48c6b03a 	or	r3,r9,r3
     b20:	100f883a 	mov	r7,r2
     b24:	d8c00015 	stw	r3,0(sp)
     b28:	0000b380 	call	b38 <__make_dp>
     b2c:	dfc00617 	ldw	ra,24(sp)
     b30:	dec00704 	addi	sp,sp,28
     b34:	f800283a 	ret

00000b38 <__make_dp>:
     b38:	defff904 	addi	sp,sp,-28
     b3c:	d8c00717 	ldw	r3,28(sp)
     b40:	d9000015 	stw	r4,0(sp)
     b44:	d809883a 	mov	r4,sp
     b48:	dfc00515 	stw	ra,20(sp)
     b4c:	d9c00615 	stw	r7,24(sp)
     b50:	d9400115 	stw	r5,4(sp)
     b54:	d9800215 	stw	r6,8(sp)
     b58:	d8c00415 	stw	r3,16(sp)
     b5c:	d9c00315 	stw	r7,12(sp)
     b60:	0000ec00 	call	ec0 <__pack_d>
     b64:	dfc00517 	ldw	ra,20(sp)
     b68:	dec00704 	addi	sp,sp,28
     b6c:	f800283a 	ret

00000b70 <__clzsi2>:
     b70:	00bfffd4 	movui	r2,65535
     b74:	11000e36 	bltu	r2,r4,bb0 <__clzsi2+0x40>
     b78:	00803fc4 	movi	r2,255
     b7c:	01400204 	movi	r5,8
     b80:	0007883a 	mov	r3,zero
     b84:	11001036 	bltu	r2,r4,bc8 <__clzsi2+0x58>
     b88:	000b883a 	mov	r5,zero
     b8c:	20c6d83a 	srl	r3,r4,r3
     b90:	00800074 	movhi	r2,1
     b94:	1088c504 	addi	r2,r2,8980
     b98:	1887883a 	add	r3,r3,r2
     b9c:	18800003 	ldbu	r2,0(r3)
     ba0:	00c00804 	movi	r3,32
     ba4:	2885883a 	add	r2,r5,r2
     ba8:	1885c83a 	sub	r2,r3,r2
     bac:	f800283a 	ret
     bb0:	01400404 	movi	r5,16
     bb4:	00804034 	movhi	r2,256
     bb8:	10bfffc4 	addi	r2,r2,-1
     bbc:	2807883a 	mov	r3,r5
     bc0:	113ff22e 	bgeu	r2,r4,b8c <__clzsi2+0x1c>
     bc4:	01400604 	movi	r5,24
     bc8:	2807883a 	mov	r3,r5
     bcc:	20c6d83a 	srl	r3,r4,r3
     bd0:	00800074 	movhi	r2,1
     bd4:	1088c504 	addi	r2,r2,8980
     bd8:	1887883a 	add	r3,r3,r2
     bdc:	18800003 	ldbu	r2,0(r3)
     be0:	00c00804 	movi	r3,32
     be4:	2885883a 	add	r2,r5,r2
     be8:	1885c83a 	sub	r2,r3,r2
     bec:	f800283a 	ret

00000bf0 <__pack_f>:
     bf0:	20c00017 	ldw	r3,0(r4)
     bf4:	01c00044 	movi	r7,1
     bf8:	21800317 	ldw	r6,12(r4)
     bfc:	21400117 	ldw	r5,4(r4)
     c00:	38c02d2e 	bgeu	r7,r3,cb8 <__pack_f+0xc8>
     c04:	00800104 	movi	r2,4
     c08:	18802826 	beq	r3,r2,cac <__pack_f+0xbc>
     c0c:	00800084 	movi	r2,2
     c10:	18800126 	beq	r3,r2,c18 <__pack_f+0x28>
     c14:	3000101e 	bne	r6,zero,c58 <__pack_f+0x68>
     c18:	000d883a 	mov	r6,zero
     c1c:	0007883a 	mov	r3,zero
     c20:	19003fcc 	andi	r4,r3,255
     c24:	200895fa 	slli	r4,r4,23
     c28:	00c02034 	movhi	r3,128
     c2c:	18ffffc4 	addi	r3,r3,-1
     c30:	30c6703a 	and	r3,r6,r3
     c34:	10a0002c 	andhi	r2,r2,32768
     c38:	10c4b03a 	or	r2,r2,r3
     c3c:	280a97fa 	slli	r5,r5,31
     c40:	1104b03a 	or	r2,r2,r4
     c44:	00e00034 	movhi	r3,32768
     c48:	18ffffc4 	addi	r3,r3,-1
     c4c:	10c4703a 	and	r2,r2,r3
     c50:	1144b03a 	or	r2,r2,r5
     c54:	f800283a 	ret
     c58:	21000217 	ldw	r4,8(r4)
     c5c:	00bfe084 	movi	r2,-126
     c60:	20801b16 	blt	r4,r2,cd0 <__pack_f+0xe0>
     c64:	00801fc4 	movi	r2,127
     c68:	11001016 	blt	r2,r4,cac <__pack_f+0xbc>
     c6c:	308e703a 	and	r7,r6,r2
     c70:	2087883a 	add	r3,r4,r2
     c74:	00801004 	movi	r2,64
     c78:	38800526 	beq	r7,r2,c90 <__pack_f+0xa0>
     c7c:	31800fc4 	addi	r6,r6,63
     c80:	30000716 	blt	r6,zero,ca0 <__pack_f+0xb0>
     c84:	300490ba 	slli	r2,r6,2
     c88:	100cd27a 	srli	r6,r2,9
     c8c:	003fe406 	br	c20 <__pack_f+0x30>
     c90:	3080200c 	andi	r2,r6,128
     c94:	103ffa26 	beq	r2,zero,c80 <__pack_f+0x90>
     c98:	31cd883a 	add	r6,r6,r7
     c9c:	003ff806 	br	c80 <__pack_f+0x90>
     ca0:	300cd07a 	srli	r6,r6,1
     ca4:	18c00044 	addi	r3,r3,1
     ca8:	003ff606 	br	c84 <__pack_f+0x94>
     cac:	000d883a 	mov	r6,zero
     cb0:	00ffffc4 	movi	r3,-1
     cb4:	003fda06 	br	c20 <__pack_f+0x30>
     cb8:	31800434 	orhi	r6,r6,16
     cbc:	00802034 	movhi	r2,128
     cc0:	10bfffc4 	addi	r2,r2,-1
     cc4:	308c703a 	and	r6,r6,r2
     cc8:	00ffffc4 	movi	r3,-1
     ccc:	003fd406 	br	c20 <__pack_f+0x30>
     cd0:	1109c83a 	sub	r4,r2,r4
     cd4:	00800644 	movi	r2,25
     cd8:	11001216 	blt	r2,r4,d24 <__pack_f+0x134>
     cdc:	3904983a 	sll	r2,r7,r4
     ce0:	3106d83a 	srl	r3,r6,r4
     ce4:	10bfffc4 	addi	r2,r2,-1
     ce8:	3084703a 	and	r2,r6,r2
     cec:	1004c03a 	cmpne	r2,r2,zero
     cf0:	1886b03a 	or	r3,r3,r2
     cf4:	19001fcc 	andi	r4,r3,127
     cf8:	00801004 	movi	r2,64
     cfc:	20800c26 	beq	r4,r2,d30 <__pack_f+0x140>
     d00:	18c00fc4 	addi	r3,r3,63
     d04:	00900034 	movhi	r2,16384
     d08:	10bfffc4 	addi	r2,r2,-1
     d0c:	180cd1fa 	srli	r6,r3,7
     d10:	10c7803a 	cmpltu	r3,r2,r3
     d14:	00802034 	movhi	r2,128
     d18:	10bfffc4 	addi	r2,r2,-1
     d1c:	308c703a 	and	r6,r6,r2
     d20:	003fbf06 	br	c20 <__pack_f+0x30>
     d24:	0007883a 	mov	r3,zero
     d28:	000d883a 	mov	r6,zero
     d2c:	003ff906 	br	d14 <__pack_f+0x124>
     d30:	1880200c 	andi	r2,r3,128
     d34:	10000126 	beq	r2,zero,d3c <__pack_f+0x14c>
     d38:	1907883a 	add	r3,r3,r4
     d3c:	180cd1fa 	srli	r6,r3,7
     d40:	00900034 	movhi	r2,16384
     d44:	10bfffc4 	addi	r2,r2,-1
     d48:	10c7803a 	cmpltu	r3,r2,r3
     d4c:	003ff106 	br	d14 <__pack_f+0x124>

00000d50 <__unpack_f>:
     d50:	21800017 	ldw	r6,0(r4)
     d54:	00c02034 	movhi	r3,128
     d58:	18ffffc4 	addi	r3,r3,-1
     d5c:	3004d5fa 	srli	r2,r6,23
     d60:	3008d7fa 	srli	r4,r6,31
     d64:	30ce703a 	and	r7,r6,r3
     d68:	10c03fcc 	andi	r3,r2,255
     d6c:	29000115 	stw	r4,4(r5)
     d70:	1800131e 	bne	r3,zero,dc0 <__unpack_f+0x70>
     d74:	38000f26 	beq	r7,zero,db4 <__unpack_f+0x64>
     d78:	380691fa 	slli	r3,r7,7
     d7c:	01bfe084 	movi	r6,-126
     d80:	008000c4 	movi	r2,3
     d84:	01100034 	movhi	r4,16384
     d88:	213fffc4 	addi	r4,r4,-1
     d8c:	28800015 	stw	r2,0(r5)
     d90:	29800215 	stw	r6,8(r5)
     d94:	20c00536 	bltu	r4,r3,dac <__unpack_f+0x5c>
     d98:	3005883a 	mov	r2,r6
     d9c:	18c7883a 	add	r3,r3,r3
     da0:	10bfffc4 	addi	r2,r2,-1
     da4:	20fffd2e 	bgeu	r4,r3,d9c <__unpack_f+0x4c>
     da8:	28800215 	stw	r2,8(r5)
     dac:	28c00315 	stw	r3,12(r5)
     db0:	f800283a 	ret
     db4:	00800084 	movi	r2,2
     db8:	28800015 	stw	r2,0(r5)
     dbc:	f800283a 	ret
     dc0:	00803fc4 	movi	r2,255
     dc4:	18800826 	beq	r3,r2,de8 <__unpack_f+0x98>
     dc8:	380491fa 	slli	r2,r7,7
     dcc:	18ffe044 	addi	r3,r3,-127
     dd0:	28c00215 	stw	r3,8(r5)
     dd4:	10900034 	orhi	r2,r2,16384
     dd8:	28800315 	stw	r2,12(r5)
     ddc:	008000c4 	movi	r2,3
     de0:	28800015 	stw	r2,0(r5)
     de4:	f800283a 	ret
     de8:	3800031e 	bne	r7,zero,df8 <__unpack_f+0xa8>
     dec:	00800104 	movi	r2,4
     df0:	28800015 	stw	r2,0(r5)
     df4:	f800283a 	ret
     df8:	3080042c 	andhi	r2,r6,16
     dfc:	10000426 	beq	r2,zero,e10 <__unpack_f+0xc0>
     e00:	00800044 	movi	r2,1
     e04:	28800015 	stw	r2,0(r5)
     e08:	29c00315 	stw	r7,12(r5)
     e0c:	f800283a 	ret
     e10:	28000015 	stw	zero,0(r5)
     e14:	003ffc06 	br	e08 <__unpack_f+0xb8>

00000e18 <__fpcmp_parts_f>:
     e18:	21800017 	ldw	r6,0(r4)
     e1c:	00c00044 	movi	r3,1
     e20:	19800a2e 	bgeu	r3,r6,e4c <__fpcmp_parts_f+0x34>
     e24:	28800017 	ldw	r2,0(r5)
     e28:	1880082e 	bgeu	r3,r2,e4c <__fpcmp_parts_f+0x34>
     e2c:	00c00104 	movi	r3,4
     e30:	30c01e26 	beq	r6,r3,eac <__fpcmp_parts_f+0x94>
     e34:	10c01a26 	beq	r2,r3,ea0 <__fpcmp_parts_f+0x88>
     e38:	00c00084 	movi	r3,2
     e3c:	30c00526 	beq	r6,r3,e54 <__fpcmp_parts_f+0x3c>
     e40:	10c0071e 	bne	r2,r3,e60 <__fpcmp_parts_f+0x48>
     e44:	20800117 	ldw	r2,4(r4)
     e48:	1000091e 	bne	r2,zero,e70 <__fpcmp_parts_f+0x58>
     e4c:	00800044 	movi	r2,1
     e50:	f800283a 	ret
     e54:	10c0121e 	bne	r2,r3,ea0 <__fpcmp_parts_f+0x88>
     e58:	0005883a 	mov	r2,zero
     e5c:	f800283a 	ret
     e60:	20c00117 	ldw	r3,4(r4)
     e64:	28800117 	ldw	r2,4(r5)
     e68:	18800326 	beq	r3,r2,e78 <__fpcmp_parts_f+0x60>
     e6c:	183ff726 	beq	r3,zero,e4c <__fpcmp_parts_f+0x34>
     e70:	00bfffc4 	movi	r2,-1
     e74:	f800283a 	ret
     e78:	21800217 	ldw	r6,8(r4)
     e7c:	28800217 	ldw	r2,8(r5)
     e80:	11bffa16 	blt	r2,r6,e6c <__fpcmp_parts_f+0x54>
     e84:	30800416 	blt	r6,r2,e98 <__fpcmp_parts_f+0x80>
     e88:	21000317 	ldw	r4,12(r4)
     e8c:	29400317 	ldw	r5,12(r5)
     e90:	293ff636 	bltu	r5,r4,e6c <__fpcmp_parts_f+0x54>
     e94:	217ff02e 	bgeu	r4,r5,e58 <__fpcmp_parts_f+0x40>
     e98:	183fec1e 	bne	r3,zero,e4c <__fpcmp_parts_f+0x34>
     e9c:	003ff406 	br	e70 <__fpcmp_parts_f+0x58>
     ea0:	28800117 	ldw	r2,4(r5)
     ea4:	103fe91e 	bne	r2,zero,e4c <__fpcmp_parts_f+0x34>
     ea8:	003ff106 	br	e70 <__fpcmp_parts_f+0x58>
     eac:	11bfe51e 	bne	r2,r6,e44 <__fpcmp_parts_f+0x2c>
     eb0:	28c00117 	ldw	r3,4(r5)
     eb4:	20800117 	ldw	r2,4(r4)
     eb8:	1885c83a 	sub	r2,r3,r2
     ebc:	f800283a 	ret

00000ec0 <__pack_d>:
     ec0:	20c00017 	ldw	r3,0(r4)
     ec4:	defffd04 	addi	sp,sp,-12
     ec8:	dc000015 	stw	r16,0(sp)
     ecc:	dc800215 	stw	r18,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	00800044 	movi	r2,1
     ed8:	22000317 	ldw	r8,12(r4)
     edc:	001f883a 	mov	r15,zero
     ee0:	22400417 	ldw	r9,16(r4)
     ee4:	24000117 	ldw	r16,4(r4)
     ee8:	10c0552e 	bgeu	r2,r3,1040 <__pack_d+0x180>
     eec:	00800104 	movi	r2,4
     ef0:	18804f26 	beq	r3,r2,1030 <__pack_d+0x170>
     ef4:	00800084 	movi	r2,2
     ef8:	18800226 	beq	r3,r2,f04 <__pack_d+0x44>
     efc:	4244b03a 	or	r2,r8,r9
     f00:	10001a1e 	bne	r2,zero,f6c <__pack_d+0xac>
     f04:	000d883a 	mov	r6,zero
     f08:	000f883a 	mov	r7,zero
     f0c:	0011883a 	mov	r8,zero
     f10:	00800434 	movhi	r2,16
     f14:	10bfffc4 	addi	r2,r2,-1
     f18:	301d883a 	mov	r14,r6
     f1c:	3884703a 	and	r2,r7,r2
     f20:	400a953a 	slli	r5,r8,20
     f24:	79bffc2c 	andhi	r6,r15,65520
     f28:	308cb03a 	or	r6,r6,r2
     f2c:	00e00434 	movhi	r3,32784
     f30:	18ffffc4 	addi	r3,r3,-1
     f34:	800497fa 	slli	r2,r16,31
     f38:	30c6703a 	and	r3,r6,r3
     f3c:	1946b03a 	or	r3,r3,r5
     f40:	01600034 	movhi	r5,32768
     f44:	297fffc4 	addi	r5,r5,-1
     f48:	194a703a 	and	r5,r3,r5
     f4c:	288ab03a 	or	r5,r5,r2
     f50:	2807883a 	mov	r3,r5
     f54:	7005883a 	mov	r2,r14
     f58:	dc800217 	ldw	r18,8(sp)
     f5c:	dc400117 	ldw	r17,4(sp)
     f60:	dc000017 	ldw	r16,0(sp)
     f64:	dec00304 	addi	sp,sp,12
     f68:	f800283a 	ret
     f6c:	21000217 	ldw	r4,8(r4)
     f70:	00bf0084 	movi	r2,-1022
     f74:	20803f16 	blt	r4,r2,1074 <__pack_d+0x1b4>
     f78:	0080ffc4 	movi	r2,1023
     f7c:	11002c16 	blt	r2,r4,1030 <__pack_d+0x170>
     f80:	00803fc4 	movi	r2,255
     f84:	408c703a 	and	r6,r8,r2
     f88:	00802004 	movi	r2,128
     f8c:	0007883a 	mov	r3,zero
     f90:	000f883a 	mov	r7,zero
     f94:	2280ffc4 	addi	r10,r4,1023
     f98:	30801e26 	beq	r6,r2,1014 <__pack_d+0x154>
     f9c:	00801fc4 	movi	r2,127
     fa0:	4089883a 	add	r4,r8,r2
     fa4:	220d803a 	cmpltu	r6,r4,r8
     fa8:	324d883a 	add	r6,r6,r9
     fac:	2011883a 	mov	r8,r4
     fb0:	3013883a 	mov	r9,r6
     fb4:	00880034 	movhi	r2,8192
     fb8:	10bfffc4 	addi	r2,r2,-1
     fbc:	12400d36 	bltu	r2,r9,ff4 <__pack_d+0x134>
     fc0:	4804963a 	slli	r2,r9,24
     fc4:	400cd23a 	srli	r6,r8,8
     fc8:	480ed23a 	srli	r7,r9,8
     fcc:	013fffc4 	movi	r4,-1
     fd0:	118cb03a 	or	r6,r2,r6
     fd4:	01400434 	movhi	r5,16
     fd8:	297fffc4 	addi	r5,r5,-1
     fdc:	3104703a 	and	r2,r6,r4
     fe0:	3946703a 	and	r3,r7,r5
     fe4:	5201ffcc 	andi	r8,r10,2047
     fe8:	100d883a 	mov	r6,r2
     fec:	180f883a 	mov	r7,r3
     ff0:	003fc706 	br	f10 <__pack_d+0x50>
     ff4:	480897fa 	slli	r4,r9,31
     ff8:	4004d07a 	srli	r2,r8,1
     ffc:	4806d07a 	srli	r3,r9,1
    1000:	52800044 	addi	r10,r10,1
    1004:	2084b03a 	or	r2,r4,r2
    1008:	1011883a 	mov	r8,r2
    100c:	1813883a 	mov	r9,r3
    1010:	003feb06 	br	fc0 <__pack_d+0x100>
    1014:	383fe11e 	bne	r7,zero,f9c <__pack_d+0xdc>
    1018:	01004004 	movi	r4,256
    101c:	4104703a 	and	r2,r8,r4
    1020:	10c4b03a 	or	r2,r2,r3
    1024:	103fe326 	beq	r2,zero,fb4 <__pack_d+0xf4>
    1028:	3005883a 	mov	r2,r6
    102c:	003fdc06 	br	fa0 <__pack_d+0xe0>
    1030:	000d883a 	mov	r6,zero
    1034:	000f883a 	mov	r7,zero
    1038:	0201ffc4 	movi	r8,2047
    103c:	003fb406 	br	f10 <__pack_d+0x50>
    1040:	0005883a 	mov	r2,zero
    1044:	00c00234 	movhi	r3,8
    1048:	408cb03a 	or	r6,r8,r2
    104c:	48ceb03a 	or	r7,r9,r3
    1050:	013fffc4 	movi	r4,-1
    1054:	01400434 	movhi	r5,16
    1058:	297fffc4 	addi	r5,r5,-1
    105c:	3104703a 	and	r2,r6,r4
    1060:	3946703a 	and	r3,r7,r5
    1064:	100d883a 	mov	r6,r2
    1068:	180f883a 	mov	r7,r3
    106c:	0201ffc4 	movi	r8,2047
    1070:	003fa706 	br	f10 <__pack_d+0x50>
    1074:	1109c83a 	sub	r4,r2,r4
    1078:	00800e04 	movi	r2,56
    107c:	11004316 	blt	r2,r4,118c <__pack_d+0x2cc>
    1080:	21fff804 	addi	r7,r4,-32
    1084:	38004516 	blt	r7,zero,119c <__pack_d+0x2dc>
    1088:	49d8d83a 	srl	r12,r9,r7
    108c:	001b883a 	mov	r13,zero
    1090:	0023883a 	mov	r17,zero
    1094:	01400044 	movi	r5,1
    1098:	0025883a 	mov	r18,zero
    109c:	38004716 	blt	r7,zero,11bc <__pack_d+0x2fc>
    10a0:	29d6983a 	sll	r11,r5,r7
    10a4:	0015883a 	mov	r10,zero
    10a8:	00bfffc4 	movi	r2,-1
    10ac:	5089883a 	add	r4,r10,r2
    10b0:	588b883a 	add	r5,r11,r2
    10b4:	228d803a 	cmpltu	r6,r4,r10
    10b8:	314b883a 	add	r5,r6,r5
    10bc:	4104703a 	and	r2,r8,r4
    10c0:	4946703a 	and	r3,r9,r5
    10c4:	10c4b03a 	or	r2,r2,r3
    10c8:	10000226 	beq	r2,zero,10d4 <__pack_d+0x214>
    10cc:	04400044 	movi	r17,1
    10d0:	0025883a 	mov	r18,zero
    10d4:	00803fc4 	movi	r2,255
    10d8:	644eb03a 	or	r7,r12,r17
    10dc:	3892703a 	and	r9,r7,r2
    10e0:	00802004 	movi	r2,128
    10e4:	6c90b03a 	or	r8,r13,r18
    10e8:	0015883a 	mov	r10,zero
    10ec:	48801626 	beq	r9,r2,1148 <__pack_d+0x288>
    10f0:	01001fc4 	movi	r4,127
    10f4:	3905883a 	add	r2,r7,r4
    10f8:	11cd803a 	cmpltu	r6,r2,r7
    10fc:	320d883a 	add	r6,r6,r8
    1100:	100f883a 	mov	r7,r2
    1104:	00840034 	movhi	r2,4096
    1108:	10bfffc4 	addi	r2,r2,-1
    110c:	3011883a 	mov	r8,r6
    1110:	0007883a 	mov	r3,zero
    1114:	11801b36 	bltu	r2,r6,1184 <__pack_d+0x2c4>
    1118:	4004963a 	slli	r2,r8,24
    111c:	3808d23a 	srli	r4,r7,8
    1120:	400ad23a 	srli	r5,r8,8
    1124:	1813883a 	mov	r9,r3
    1128:	1108b03a 	or	r4,r2,r4
    112c:	00bfffc4 	movi	r2,-1
    1130:	00c00434 	movhi	r3,16
    1134:	18ffffc4 	addi	r3,r3,-1
    1138:	208c703a 	and	r6,r4,r2
    113c:	28ce703a 	and	r7,r5,r3
    1140:	4a01ffcc 	andi	r8,r9,2047
    1144:	003f7206 	br	f10 <__pack_d+0x50>
    1148:	503fe91e 	bne	r10,zero,10f0 <__pack_d+0x230>
    114c:	01004004 	movi	r4,256
    1150:	3904703a 	and	r2,r7,r4
    1154:	0007883a 	mov	r3,zero
    1158:	10c4b03a 	or	r2,r2,r3
    115c:	10000626 	beq	r2,zero,1178 <__pack_d+0x2b8>
    1160:	3a45883a 	add	r2,r7,r9
    1164:	11cd803a 	cmpltu	r6,r2,r7
    1168:	320d883a 	add	r6,r6,r8
    116c:	100f883a 	mov	r7,r2
    1170:	3011883a 	mov	r8,r6
    1174:	0007883a 	mov	r3,zero
    1178:	00840034 	movhi	r2,4096
    117c:	10bfffc4 	addi	r2,r2,-1
    1180:	123fe52e 	bgeu	r2,r8,1118 <__pack_d+0x258>
    1184:	00c00044 	movi	r3,1
    1188:	003fe306 	br	1118 <__pack_d+0x258>
    118c:	0009883a 	mov	r4,zero
    1190:	0013883a 	mov	r9,zero
    1194:	000b883a 	mov	r5,zero
    1198:	003fe406 	br	112c <__pack_d+0x26c>
    119c:	4a47883a 	add	r3,r9,r9
    11a0:	008007c4 	movi	r2,31
    11a4:	1105c83a 	sub	r2,r2,r4
    11a8:	1886983a 	sll	r3,r3,r2
    11ac:	4118d83a 	srl	r12,r8,r4
    11b0:	491ad83a 	srl	r13,r9,r4
    11b4:	1b18b03a 	or	r12,r3,r12
    11b8:	003fb506 	br	1090 <__pack_d+0x1d0>
    11bc:	2806d07a 	srli	r3,r5,1
    11c0:	008007c4 	movi	r2,31
    11c4:	1105c83a 	sub	r2,r2,r4
    11c8:	1896d83a 	srl	r11,r3,r2
    11cc:	2914983a 	sll	r10,r5,r4
    11d0:	003fb506 	br	10a8 <__pack_d+0x1e8>

000011d4 <printf>:
    11d4:	defffb04 	addi	sp,sp,-20
    11d8:	dfc00115 	stw	ra,4(sp)
    11dc:	d9400215 	stw	r5,8(sp)
    11e0:	d9800315 	stw	r6,12(sp)
    11e4:	d9c00415 	stw	r7,16(sp)
    11e8:	00800074 	movhi	r2,1
    11ec:	10917404 	addi	r2,r2,17872
    11f0:	10c00017 	ldw	r3,0(r2)
    11f4:	200b883a 	mov	r5,r4
    11f8:	d8800204 	addi	r2,sp,8
    11fc:	19000217 	ldw	r4,8(r3)
    1200:	100d883a 	mov	r6,r2
    1204:	d8800015 	stw	r2,0(sp)
    1208:	00031cc0 	call	31cc <__vfprintf_internal>
    120c:	dfc00117 	ldw	ra,4(sp)
    1210:	dec00504 	addi	sp,sp,20
    1214:	f800283a 	ret

00001218 <_printf_r>:
    1218:	defffc04 	addi	sp,sp,-16
    121c:	dfc00115 	stw	ra,4(sp)
    1220:	d9800215 	stw	r6,8(sp)
    1224:	d9c00315 	stw	r7,12(sp)
    1228:	280d883a 	mov	r6,r5
    122c:	21400217 	ldw	r5,8(r4)
    1230:	d8c00204 	addi	r3,sp,8
    1234:	180f883a 	mov	r7,r3
    1238:	d8c00015 	stw	r3,0(sp)
    123c:	00013200 	call	1320 <___vfprintf_internal_r>
    1240:	dfc00117 	ldw	ra,4(sp)
    1244:	dec00404 	addi	sp,sp,16
    1248:	f800283a 	ret

0000124c <_scanf_r>:
    124c:	defffc04 	addi	sp,sp,-16
    1250:	dfc00115 	stw	ra,4(sp)
    1254:	d9800215 	stw	r6,8(sp)
    1258:	d9c00315 	stw	r7,12(sp)
    125c:	280d883a 	mov	r6,r5
    1260:	21400117 	ldw	r5,4(r4)
    1264:	d8c00204 	addi	r3,sp,8
    1268:	180f883a 	mov	r7,r3
    126c:	d8c00015 	stw	r3,0(sp)
    1270:	00031f00 	call	31f0 <__svfscanf_r>
    1274:	dfc00117 	ldw	ra,4(sp)
    1278:	dec00404 	addi	sp,sp,16
    127c:	f800283a 	ret

00001280 <scanf>:
    1280:	defffb04 	addi	sp,sp,-20
    1284:	dfc00115 	stw	ra,4(sp)
    1288:	d9400215 	stw	r5,8(sp)
    128c:	d9800315 	stw	r6,12(sp)
    1290:	d9c00415 	stw	r7,16(sp)
    1294:	00800074 	movhi	r2,1
    1298:	10917404 	addi	r2,r2,17872
    129c:	11400017 	ldw	r5,0(r2)
    12a0:	200d883a 	mov	r6,r4
    12a4:	d8800204 	addi	r2,sp,8
    12a8:	2809883a 	mov	r4,r5
    12ac:	29400117 	ldw	r5,4(r5)
    12b0:	100f883a 	mov	r7,r2
    12b4:	d8800015 	stw	r2,0(sp)
    12b8:	00031f00 	call	31f0 <__svfscanf_r>
    12bc:	dfc00117 	ldw	ra,4(sp)
    12c0:	dec00504 	addi	sp,sp,20
    12c4:	f800283a 	ret

000012c8 <__sprint_r>:
    12c8:	30800217 	ldw	r2,8(r6)
    12cc:	defffe04 	addi	sp,sp,-8
    12d0:	dc000015 	stw	r16,0(sp)
    12d4:	dfc00115 	stw	ra,4(sp)
    12d8:	3021883a 	mov	r16,r6
    12dc:	0007883a 	mov	r3,zero
    12e0:	1000061e 	bne	r2,zero,12fc <__sprint_r+0x34>
    12e4:	1805883a 	mov	r2,r3
    12e8:	30000115 	stw	zero,4(r6)
    12ec:	dfc00117 	ldw	ra,4(sp)
    12f0:	dc000017 	ldw	r16,0(sp)
    12f4:	dec00204 	addi	sp,sp,8
    12f8:	f800283a 	ret
    12fc:	0006de40 	call	6de4 <__sfvwrite_r>
    1300:	1007883a 	mov	r3,r2
    1304:	1805883a 	mov	r2,r3
    1308:	80000115 	stw	zero,4(r16)
    130c:	80000215 	stw	zero,8(r16)
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	dc000017 	ldw	r16,0(sp)
    1318:	dec00204 	addi	sp,sp,8
    131c:	f800283a 	ret

00001320 <___vfprintf_internal_r>:
    1320:	defea404 	addi	sp,sp,-1392
    1324:	dd815815 	stw	r22,1376(sp)
    1328:	dc015215 	stw	r16,1352(sp)
    132c:	d9c15115 	stw	r7,1348(sp)
    1330:	dfc15b15 	stw	ra,1388(sp)
    1334:	df015a15 	stw	fp,1384(sp)
    1338:	ddc15915 	stw	r23,1380(sp)
    133c:	dd415715 	stw	r21,1372(sp)
    1340:	dd015615 	stw	r20,1368(sp)
    1344:	dcc15515 	stw	r19,1364(sp)
    1348:	dc815415 	stw	r18,1360(sp)
    134c:	dc415315 	stw	r17,1356(sp)
    1350:	282d883a 	mov	r22,r5
    1354:	3021883a 	mov	r16,r6
    1358:	d9014f15 	stw	r4,1340(sp)
    135c:	00074340 	call	7434 <_localeconv_r>
    1360:	10800017 	ldw	r2,0(r2)
    1364:	d9c15117 	ldw	r7,1348(sp)
    1368:	d8814915 	stw	r2,1316(sp)
    136c:	d8814f17 	ldw	r2,1340(sp)
    1370:	10000226 	beq	r2,zero,137c <___vfprintf_internal_r+0x5c>
    1374:	10800e17 	ldw	r2,56(r2)
    1378:	10020d26 	beq	r2,zero,1bb0 <___vfprintf_internal_r+0x890>
    137c:	b080030b 	ldhu	r2,12(r22)
    1380:	1080020c 	andi	r2,r2,8
    1384:	10020e26 	beq	r2,zero,1bc0 <___vfprintf_internal_r+0x8a0>
    1388:	b0800417 	ldw	r2,16(r22)
    138c:	10020c26 	beq	r2,zero,1bc0 <___vfprintf_internal_r+0x8a0>
    1390:	b200030b 	ldhu	r8,12(r22)
    1394:	00800284 	movi	r2,10
    1398:	40c0068c 	andi	r3,r8,26
    139c:	18802f1e 	bne	r3,r2,145c <___vfprintf_internal_r+0x13c>
    13a0:	b080038f 	ldh	r2,14(r22)
    13a4:	10002d16 	blt	r2,zero,145c <___vfprintf_internal_r+0x13c>
    13a8:	b240038b 	ldhu	r9,14(r22)
    13ac:	b2800717 	ldw	r10,28(r22)
    13b0:	b2c00917 	ldw	r11,36(r22)
    13b4:	d9014f17 	ldw	r4,1340(sp)
    13b8:	dc402904 	addi	r17,sp,164
    13bc:	d8804004 	addi	r2,sp,256
    13c0:	00c10004 	movi	r3,1024
    13c4:	423fff4c 	andi	r8,r8,65533
    13c8:	800d883a 	mov	r6,r16
    13cc:	880b883a 	mov	r5,r17
    13d0:	da002c0d 	sth	r8,176(sp)
    13d4:	da402c8d 	sth	r9,178(sp)
    13d8:	da803015 	stw	r10,192(sp)
    13dc:	dac03215 	stw	r11,200(sp)
    13e0:	d8802d15 	stw	r2,180(sp)
    13e4:	d8c02e15 	stw	r3,184(sp)
    13e8:	d8802915 	stw	r2,164(sp)
    13ec:	d8c02b15 	stw	r3,172(sp)
    13f0:	d8002f15 	stw	zero,188(sp)
    13f4:	00013200 	call	1320 <___vfprintf_internal_r>
    13f8:	d8814b15 	stw	r2,1324(sp)
    13fc:	10000416 	blt	r2,zero,1410 <___vfprintf_internal_r+0xf0>
    1400:	d9014f17 	ldw	r4,1340(sp)
    1404:	880b883a 	mov	r5,r17
    1408:	00062780 	call	6278 <_fflush_r>
    140c:	1002321e 	bne	r2,zero,1cd8 <___vfprintf_internal_r+0x9b8>
    1410:	d8802c0b 	ldhu	r2,176(sp)
    1414:	1080100c 	andi	r2,r2,64
    1418:	10000326 	beq	r2,zero,1428 <___vfprintf_internal_r+0x108>
    141c:	b080030b 	ldhu	r2,12(r22)
    1420:	10801014 	ori	r2,r2,64
    1424:	b080030d 	sth	r2,12(r22)
    1428:	d8814b17 	ldw	r2,1324(sp)
    142c:	dfc15b17 	ldw	ra,1388(sp)
    1430:	df015a17 	ldw	fp,1384(sp)
    1434:	ddc15917 	ldw	r23,1380(sp)
    1438:	dd815817 	ldw	r22,1376(sp)
    143c:	dd415717 	ldw	r21,1372(sp)
    1440:	dd015617 	ldw	r20,1368(sp)
    1444:	dcc15517 	ldw	r19,1364(sp)
    1448:	dc815417 	ldw	r18,1360(sp)
    144c:	dc415317 	ldw	r17,1356(sp)
    1450:	dc015217 	ldw	r16,1352(sp)
    1454:	dec15c04 	addi	sp,sp,1392
    1458:	f800283a 	ret
    145c:	0005883a 	mov	r2,zero
    1460:	0007883a 	mov	r3,zero
    1464:	dd401904 	addi	r21,sp,100
    1468:	d8814215 	stw	r2,1288(sp)
    146c:	802f883a 	mov	r23,r16
    1470:	d8c14315 	stw	r3,1292(sp)
    1474:	d8014b15 	stw	zero,1324(sp)
    1478:	d8014815 	stw	zero,1312(sp)
    147c:	d8014415 	stw	zero,1296(sp)
    1480:	d8014715 	stw	zero,1308(sp)
    1484:	dd400c15 	stw	r21,48(sp)
    1488:	d8000e15 	stw	zero,56(sp)
    148c:	d8000d15 	stw	zero,52(sp)
    1490:	b8800007 	ldb	r2,0(r23)
    1494:	10001926 	beq	r2,zero,14fc <___vfprintf_internal_r+0x1dc>
    1498:	00c00944 	movi	r3,37
    149c:	10c01726 	beq	r2,r3,14fc <___vfprintf_internal_r+0x1dc>
    14a0:	b821883a 	mov	r16,r23
    14a4:	00000106 	br	14ac <___vfprintf_internal_r+0x18c>
    14a8:	10c00326 	beq	r2,r3,14b8 <___vfprintf_internal_r+0x198>
    14ac:	84000044 	addi	r16,r16,1
    14b0:	80800007 	ldb	r2,0(r16)
    14b4:	103ffc1e 	bne	r2,zero,14a8 <___vfprintf_internal_r+0x188>
    14b8:	85e7c83a 	sub	r19,r16,r23
    14bc:	98000e26 	beq	r19,zero,14f8 <___vfprintf_internal_r+0x1d8>
    14c0:	dc800e17 	ldw	r18,56(sp)
    14c4:	dc400d17 	ldw	r17,52(sp)
    14c8:	008001c4 	movi	r2,7
    14cc:	94e5883a 	add	r18,r18,r19
    14d0:	8c400044 	addi	r17,r17,1
    14d4:	adc00015 	stw	r23,0(r21)
    14d8:	dc800e15 	stw	r18,56(sp)
    14dc:	acc00115 	stw	r19,4(r21)
    14e0:	dc400d15 	stw	r17,52(sp)
    14e4:	14428b16 	blt	r2,r17,1f14 <___vfprintf_internal_r+0xbf4>
    14e8:	ad400204 	addi	r21,r21,8
    14ec:	d9014b17 	ldw	r4,1324(sp)
    14f0:	24c9883a 	add	r4,r4,r19
    14f4:	d9014b15 	stw	r4,1324(sp)
    14f8:	802f883a 	mov	r23,r16
    14fc:	b8800007 	ldb	r2,0(r23)
    1500:	10013c26 	beq	r2,zero,19f4 <___vfprintf_internal_r+0x6d4>
    1504:	bdc00044 	addi	r23,r23,1
    1508:	d8000405 	stb	zero,16(sp)
    150c:	b8c00007 	ldb	r3,0(r23)
    1510:	04ffffc4 	movi	r19,-1
    1514:	d8014c15 	stw	zero,1328(sp)
    1518:	d8014a15 	stw	zero,1320(sp)
    151c:	d8c14d15 	stw	r3,1332(sp)
    1520:	bdc00044 	addi	r23,r23,1
    1524:	d9414d17 	ldw	r5,1332(sp)
    1528:	00801604 	movi	r2,88
    152c:	28fff804 	addi	r3,r5,-32
    1530:	10c06036 	bltu	r2,r3,16b4 <___vfprintf_internal_r+0x394>
    1534:	18c5883a 	add	r2,r3,r3
    1538:	1085883a 	add	r2,r2,r2
    153c:	00c00034 	movhi	r3,0
    1540:	18c55404 	addi	r3,r3,5456
    1544:	10c5883a 	add	r2,r2,r3
    1548:	11000017 	ldw	r4,0(r2)
    154c:	2000683a 	jmp	r4
    1550:	000024c4 	movi	zero,147
    1554:	000016b4 	movhi	zero,90
    1558:	000016b4 	movhi	zero,90
    155c:	000024b0 	cmpltui	zero,zero,146
    1560:	000016b4 	movhi	zero,90
    1564:	000016b4 	movhi	zero,90
    1568:	000016b4 	movhi	zero,90
    156c:	000016b4 	movhi	zero,90
    1570:	000016b4 	movhi	zero,90
    1574:	000016b4 	movhi	zero,90
    1578:	00002290 	cmplti	zero,zero,138
    157c:	000024a0 	cmpeqi	zero,zero,146
    1580:	000016b4 	movhi	zero,90
    1584:	000022a8 	cmpgeui	zero,zero,138
    1588:	0000253c 	xorhi	zero,zero,148
    158c:	000016b4 	movhi	zero,90
    1590:	00002528 	cmpgeui	zero,zero,148
    1594:	000024f0 	cmpltui	zero,zero,147
    1598:	000024f0 	cmpltui	zero,zero,147
    159c:	000024f0 	cmpltui	zero,zero,147
    15a0:	000024f0 	cmpltui	zero,zero,147
    15a4:	000024f0 	cmpltui	zero,zero,147
    15a8:	000024f0 	cmpltui	zero,zero,147
    15ac:	000024f0 	cmpltui	zero,zero,147
    15b0:	000024f0 	cmpltui	zero,zero,147
    15b4:	000024f0 	cmpltui	zero,zero,147
    15b8:	000016b4 	movhi	zero,90
    15bc:	000016b4 	movhi	zero,90
    15c0:	000016b4 	movhi	zero,90
    15c4:	000016b4 	movhi	zero,90
    15c8:	000016b4 	movhi	zero,90
    15cc:	000016b4 	movhi	zero,90
    15d0:	000016b4 	movhi	zero,90
    15d4:	000016b4 	movhi	zero,90
    15d8:	000016b4 	movhi	zero,90
    15dc:	000016b4 	movhi	zero,90
    15e0:	00001d0c 	andi	zero,zero,116
    15e4:	00002378 	rdprs	zero,zero,141
    15e8:	000016b4 	movhi	zero,90
    15ec:	00002378 	rdprs	zero,zero,141
    15f0:	000016b4 	movhi	zero,90
    15f4:	000016b4 	movhi	zero,90
    15f8:	000016b4 	movhi	zero,90
    15fc:	000016b4 	movhi	zero,90
    1600:	000024dc 	xori	zero,zero,147
    1604:	000016b4 	movhi	zero,90
    1608:	000016b4 	movhi	zero,90
    160c:	00001dc0 	call	1dc <main+0x28>
    1610:	000016b4 	movhi	zero,90
    1614:	000016b4 	movhi	zero,90
    1618:	000016b4 	movhi	zero,90
    161c:	000016b4 	movhi	zero,90
    1620:	000016b4 	movhi	zero,90
    1624:	00001e0c 	andi	zero,zero,120
    1628:	000016b4 	movhi	zero,90
    162c:	000016b4 	movhi	zero,90
    1630:	0000242c 	andhi	zero,zero,144
    1634:	000016b4 	movhi	zero,90
    1638:	000016b4 	movhi	zero,90
    163c:	000016b4 	movhi	zero,90
    1640:	000016b4 	movhi	zero,90
    1644:	000016b4 	movhi	zero,90
    1648:	000016b4 	movhi	zero,90
    164c:	000016b4 	movhi	zero,90
    1650:	000016b4 	movhi	zero,90
    1654:	000016b4 	movhi	zero,90
    1658:	000016b4 	movhi	zero,90
    165c:	00002400 	call	240 <main+0x8c>
    1660:	00001d18 	cmpnei	zero,zero,116
    1664:	00002378 	rdprs	zero,zero,141
    1668:	00002378 	rdprs	zero,zero,141
    166c:	00002378 	rdprs	zero,zero,141
    1670:	00002364 	muli	zero,zero,141
    1674:	00001d18 	cmpnei	zero,zero,116
    1678:	000016b4 	movhi	zero,90
    167c:	000016b4 	movhi	zero,90
    1680:	000022ec 	andhi	zero,zero,139
    1684:	000016b4 	movhi	zero,90
    1688:	000022bc 	xorhi	zero,zero,138
    168c:	00001dcc 	andi	zero,zero,119
    1690:	0000231c 	xori	zero,zero,140
    1694:	00002308 	cmpgei	zero,zero,140
    1698:	000016b4 	movhi	zero,90
    169c:	00002598 	cmpnei	zero,zero,150
    16a0:	000016b4 	movhi	zero,90
    16a4:	00001e18 	cmpnei	zero,zero,120
    16a8:	000016b4 	movhi	zero,90
    16ac:	000016b4 	movhi	zero,90
    16b0:	00002490 	cmplti	zero,zero,146
    16b4:	d9014d17 	ldw	r4,1332(sp)
    16b8:	2000ce26 	beq	r4,zero,19f4 <___vfprintf_internal_r+0x6d4>
    16bc:	01400044 	movi	r5,1
    16c0:	d9800f04 	addi	r6,sp,60
    16c4:	d9c14015 	stw	r7,1280(sp)
    16c8:	d9414515 	stw	r5,1300(sp)
    16cc:	d9814115 	stw	r6,1284(sp)
    16d0:	280f883a 	mov	r7,r5
    16d4:	d9000f05 	stb	r4,60(sp)
    16d8:	d8000405 	stb	zero,16(sp)
    16dc:	d8014615 	stw	zero,1304(sp)
    16e0:	d8c14c17 	ldw	r3,1328(sp)
    16e4:	1880008c 	andi	r2,r3,2
    16e8:	1005003a 	cmpeq	r2,r2,zero
    16ec:	d8815015 	stw	r2,1344(sp)
    16f0:	1000031e 	bne	r2,zero,1700 <___vfprintf_internal_r+0x3e0>
    16f4:	d9014517 	ldw	r4,1300(sp)
    16f8:	21000084 	addi	r4,r4,2
    16fc:	d9014515 	stw	r4,1300(sp)
    1700:	d9414c17 	ldw	r5,1328(sp)
    1704:	2940210c 	andi	r5,r5,132
    1708:	d9414e15 	stw	r5,1336(sp)
    170c:	28002d1e 	bne	r5,zero,17c4 <___vfprintf_internal_r+0x4a4>
    1710:	d9814a17 	ldw	r6,1320(sp)
    1714:	d8814517 	ldw	r2,1300(sp)
    1718:	30a1c83a 	sub	r16,r6,r2
    171c:	0400290e 	bge	zero,r16,17c4 <___vfprintf_internal_r+0x4a4>
    1720:	00800404 	movi	r2,16
    1724:	1404580e 	bge	r2,r16,2888 <___vfprintf_internal_r+0x1568>
    1728:	dc800e17 	ldw	r18,56(sp)
    172c:	dc400d17 	ldw	r17,52(sp)
    1730:	1027883a 	mov	r19,r2
    1734:	07000074 	movhi	fp,1
    1738:	e7092084 	addi	fp,fp,9346
    173c:	050001c4 	movi	r20,7
    1740:	00000306 	br	1750 <___vfprintf_internal_r+0x430>
    1744:	843ffc04 	addi	r16,r16,-16
    1748:	ad400204 	addi	r21,r21,8
    174c:	9c00130e 	bge	r19,r16,179c <___vfprintf_internal_r+0x47c>
    1750:	94800404 	addi	r18,r18,16
    1754:	8c400044 	addi	r17,r17,1
    1758:	af000015 	stw	fp,0(r21)
    175c:	acc00115 	stw	r19,4(r21)
    1760:	dc800e15 	stw	r18,56(sp)
    1764:	dc400d15 	stw	r17,52(sp)
    1768:	a47ff60e 	bge	r20,r17,1744 <___vfprintf_internal_r+0x424>
    176c:	d9014f17 	ldw	r4,1340(sp)
    1770:	b00b883a 	mov	r5,r22
    1774:	d9800c04 	addi	r6,sp,48
    1778:	d9c15115 	stw	r7,1348(sp)
    177c:	00012c80 	call	12c8 <__sprint_r>
    1780:	d9c15117 	ldw	r7,1348(sp)
    1784:	10009e1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1788:	843ffc04 	addi	r16,r16,-16
    178c:	dc800e17 	ldw	r18,56(sp)
    1790:	dc400d17 	ldw	r17,52(sp)
    1794:	dd401904 	addi	r21,sp,100
    1798:	9c3fed16 	blt	r19,r16,1750 <___vfprintf_internal_r+0x430>
    179c:	9425883a 	add	r18,r18,r16
    17a0:	8c400044 	addi	r17,r17,1
    17a4:	008001c4 	movi	r2,7
    17a8:	af000015 	stw	fp,0(r21)
    17ac:	ac000115 	stw	r16,4(r21)
    17b0:	dc800e15 	stw	r18,56(sp)
    17b4:	dc400d15 	stw	r17,52(sp)
    17b8:	1441f516 	blt	r2,r17,1f90 <___vfprintf_internal_r+0xc70>
    17bc:	ad400204 	addi	r21,r21,8
    17c0:	00000206 	br	17cc <___vfprintf_internal_r+0x4ac>
    17c4:	dc800e17 	ldw	r18,56(sp)
    17c8:	dc400d17 	ldw	r17,52(sp)
    17cc:	d8800407 	ldb	r2,16(sp)
    17d0:	10000b26 	beq	r2,zero,1800 <___vfprintf_internal_r+0x4e0>
    17d4:	00800044 	movi	r2,1
    17d8:	94800044 	addi	r18,r18,1
    17dc:	8c400044 	addi	r17,r17,1
    17e0:	a8800115 	stw	r2,4(r21)
    17e4:	d8c00404 	addi	r3,sp,16
    17e8:	008001c4 	movi	r2,7
    17ec:	a8c00015 	stw	r3,0(r21)
    17f0:	dc800e15 	stw	r18,56(sp)
    17f4:	dc400d15 	stw	r17,52(sp)
    17f8:	1441da16 	blt	r2,r17,1f64 <___vfprintf_internal_r+0xc44>
    17fc:	ad400204 	addi	r21,r21,8
    1800:	d9015017 	ldw	r4,1344(sp)
    1804:	20000b1e 	bne	r4,zero,1834 <___vfprintf_internal_r+0x514>
    1808:	d8800444 	addi	r2,sp,17
    180c:	94800084 	addi	r18,r18,2
    1810:	8c400044 	addi	r17,r17,1
    1814:	a8800015 	stw	r2,0(r21)
    1818:	00c00084 	movi	r3,2
    181c:	008001c4 	movi	r2,7
    1820:	a8c00115 	stw	r3,4(r21)
    1824:	dc800e15 	stw	r18,56(sp)
    1828:	dc400d15 	stw	r17,52(sp)
    182c:	1441c216 	blt	r2,r17,1f38 <___vfprintf_internal_r+0xc18>
    1830:	ad400204 	addi	r21,r21,8
    1834:	d9414e17 	ldw	r5,1336(sp)
    1838:	00802004 	movi	r2,128
    183c:	2880b126 	beq	r5,r2,1b04 <___vfprintf_internal_r+0x7e4>
    1840:	d8c14617 	ldw	r3,1304(sp)
    1844:	19e1c83a 	sub	r16,r3,r7
    1848:	0400260e 	bge	zero,r16,18e4 <___vfprintf_internal_r+0x5c4>
    184c:	00800404 	movi	r2,16
    1850:	1403c90e 	bge	r2,r16,2778 <___vfprintf_internal_r+0x1458>
    1854:	1027883a 	mov	r19,r2
    1858:	07000074 	movhi	fp,1
    185c:	e7091c84 	addi	fp,fp,9330
    1860:	050001c4 	movi	r20,7
    1864:	00000306 	br	1874 <___vfprintf_internal_r+0x554>
    1868:	843ffc04 	addi	r16,r16,-16
    186c:	ad400204 	addi	r21,r21,8
    1870:	9c00130e 	bge	r19,r16,18c0 <___vfprintf_internal_r+0x5a0>
    1874:	94800404 	addi	r18,r18,16
    1878:	8c400044 	addi	r17,r17,1
    187c:	af000015 	stw	fp,0(r21)
    1880:	acc00115 	stw	r19,4(r21)
    1884:	dc800e15 	stw	r18,56(sp)
    1888:	dc400d15 	stw	r17,52(sp)
    188c:	a47ff60e 	bge	r20,r17,1868 <___vfprintf_internal_r+0x548>
    1890:	d9014f17 	ldw	r4,1340(sp)
    1894:	b00b883a 	mov	r5,r22
    1898:	d9800c04 	addi	r6,sp,48
    189c:	d9c15115 	stw	r7,1348(sp)
    18a0:	00012c80 	call	12c8 <__sprint_r>
    18a4:	d9c15117 	ldw	r7,1348(sp)
    18a8:	1000551e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    18ac:	843ffc04 	addi	r16,r16,-16
    18b0:	dc800e17 	ldw	r18,56(sp)
    18b4:	dc400d17 	ldw	r17,52(sp)
    18b8:	dd401904 	addi	r21,sp,100
    18bc:	9c3fed16 	blt	r19,r16,1874 <___vfprintf_internal_r+0x554>
    18c0:	9425883a 	add	r18,r18,r16
    18c4:	8c400044 	addi	r17,r17,1
    18c8:	008001c4 	movi	r2,7
    18cc:	af000015 	stw	fp,0(r21)
    18d0:	ac000115 	stw	r16,4(r21)
    18d4:	dc800e15 	stw	r18,56(sp)
    18d8:	dc400d15 	stw	r17,52(sp)
    18dc:	14418216 	blt	r2,r17,1ee8 <___vfprintf_internal_r+0xbc8>
    18e0:	ad400204 	addi	r21,r21,8
    18e4:	d9014c17 	ldw	r4,1328(sp)
    18e8:	2080400c 	andi	r2,r4,256
    18ec:	10004a1e 	bne	r2,zero,1a18 <___vfprintf_internal_r+0x6f8>
    18f0:	d9414117 	ldw	r5,1284(sp)
    18f4:	91e5883a 	add	r18,r18,r7
    18f8:	8c400044 	addi	r17,r17,1
    18fc:	008001c4 	movi	r2,7
    1900:	a9400015 	stw	r5,0(r21)
    1904:	a9c00115 	stw	r7,4(r21)
    1908:	dc800e15 	stw	r18,56(sp)
    190c:	dc400d15 	stw	r17,52(sp)
    1910:	14416716 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0xb90>
    1914:	a8c00204 	addi	r3,r21,8
    1918:	d9814c17 	ldw	r6,1328(sp)
    191c:	3080010c 	andi	r2,r6,4
    1920:	10002826 	beq	r2,zero,19c4 <___vfprintf_internal_r+0x6a4>
    1924:	d8814a17 	ldw	r2,1320(sp)
    1928:	d9014517 	ldw	r4,1300(sp)
    192c:	1121c83a 	sub	r16,r2,r4
    1930:	0400240e 	bge	zero,r16,19c4 <___vfprintf_internal_r+0x6a4>
    1934:	00800404 	movi	r2,16
    1938:	14044f0e 	bge	r2,r16,2a78 <___vfprintf_internal_r+0x1758>
    193c:	dc400d17 	ldw	r17,52(sp)
    1940:	1027883a 	mov	r19,r2
    1944:	07000074 	movhi	fp,1
    1948:	e7092084 	addi	fp,fp,9346
    194c:	050001c4 	movi	r20,7
    1950:	00000306 	br	1960 <___vfprintf_internal_r+0x640>
    1954:	843ffc04 	addi	r16,r16,-16
    1958:	18c00204 	addi	r3,r3,8
    195c:	9c00110e 	bge	r19,r16,19a4 <___vfprintf_internal_r+0x684>
    1960:	94800404 	addi	r18,r18,16
    1964:	8c400044 	addi	r17,r17,1
    1968:	1f000015 	stw	fp,0(r3)
    196c:	1cc00115 	stw	r19,4(r3)
    1970:	dc800e15 	stw	r18,56(sp)
    1974:	dc400d15 	stw	r17,52(sp)
    1978:	a47ff60e 	bge	r20,r17,1954 <___vfprintf_internal_r+0x634>
    197c:	d9014f17 	ldw	r4,1340(sp)
    1980:	b00b883a 	mov	r5,r22
    1984:	d9800c04 	addi	r6,sp,48
    1988:	00012c80 	call	12c8 <__sprint_r>
    198c:	10001c1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1990:	843ffc04 	addi	r16,r16,-16
    1994:	dc800e17 	ldw	r18,56(sp)
    1998:	dc400d17 	ldw	r17,52(sp)
    199c:	d8c01904 	addi	r3,sp,100
    19a0:	9c3fef16 	blt	r19,r16,1960 <___vfprintf_internal_r+0x640>
    19a4:	9425883a 	add	r18,r18,r16
    19a8:	8c400044 	addi	r17,r17,1
    19ac:	008001c4 	movi	r2,7
    19b0:	1f000015 	stw	fp,0(r3)
    19b4:	1c000115 	stw	r16,4(r3)
    19b8:	dc800e15 	stw	r18,56(sp)
    19bc:	dc400d15 	stw	r17,52(sp)
    19c0:	1440cb16 	blt	r2,r17,1cf0 <___vfprintf_internal_r+0x9d0>
    19c4:	d8814a17 	ldw	r2,1320(sp)
    19c8:	d9414517 	ldw	r5,1300(sp)
    19cc:	1140010e 	bge	r2,r5,19d4 <___vfprintf_internal_r+0x6b4>
    19d0:	2805883a 	mov	r2,r5
    19d4:	d9814b17 	ldw	r6,1324(sp)
    19d8:	308d883a 	add	r6,r6,r2
    19dc:	d9814b15 	stw	r6,1324(sp)
    19e0:	90013b1e 	bne	r18,zero,1ed0 <___vfprintf_internal_r+0xbb0>
    19e4:	d9c14017 	ldw	r7,1280(sp)
    19e8:	dd401904 	addi	r21,sp,100
    19ec:	d8000d15 	stw	zero,52(sp)
    19f0:	003ea706 	br	1490 <___vfprintf_internal_r+0x170>
    19f4:	d8800e17 	ldw	r2,56(sp)
    19f8:	10053f1e 	bne	r2,zero,2ef8 <___vfprintf_internal_r+0x1bd8>
    19fc:	d8000d15 	stw	zero,52(sp)
    1a00:	b080030b 	ldhu	r2,12(r22)
    1a04:	1080100c 	andi	r2,r2,64
    1a08:	103e8726 	beq	r2,zero,1428 <___vfprintf_internal_r+0x108>
    1a0c:	00bfffc4 	movi	r2,-1
    1a10:	d8814b15 	stw	r2,1324(sp)
    1a14:	003e8406 	br	1428 <___vfprintf_internal_r+0x108>
    1a18:	d9814d17 	ldw	r6,1332(sp)
    1a1c:	00801944 	movi	r2,101
    1a20:	11806e16 	blt	r2,r6,1bdc <___vfprintf_internal_r+0x8bc>
    1a24:	d9414717 	ldw	r5,1308(sp)
    1a28:	00c00044 	movi	r3,1
    1a2c:	1943430e 	bge	r3,r5,273c <___vfprintf_internal_r+0x141c>
    1a30:	d8814117 	ldw	r2,1284(sp)
    1a34:	94800044 	addi	r18,r18,1
    1a38:	8c400044 	addi	r17,r17,1
    1a3c:	a8800015 	stw	r2,0(r21)
    1a40:	008001c4 	movi	r2,7
    1a44:	a8c00115 	stw	r3,4(r21)
    1a48:	dc800e15 	stw	r18,56(sp)
    1a4c:	dc400d15 	stw	r17,52(sp)
    1a50:	1441ca16 	blt	r2,r17,217c <___vfprintf_internal_r+0xe5c>
    1a54:	a8c00204 	addi	r3,r21,8
    1a58:	d9014917 	ldw	r4,1316(sp)
    1a5c:	00800044 	movi	r2,1
    1a60:	94800044 	addi	r18,r18,1
    1a64:	8c400044 	addi	r17,r17,1
    1a68:	18800115 	stw	r2,4(r3)
    1a6c:	008001c4 	movi	r2,7
    1a70:	19000015 	stw	r4,0(r3)
    1a74:	dc800e15 	stw	r18,56(sp)
    1a78:	dc400d15 	stw	r17,52(sp)
    1a7c:	1441b616 	blt	r2,r17,2158 <___vfprintf_internal_r+0xe38>
    1a80:	1cc00204 	addi	r19,r3,8
    1a84:	d9014217 	ldw	r4,1288(sp)
    1a88:	d9414317 	ldw	r5,1292(sp)
    1a8c:	000d883a 	mov	r6,zero
    1a90:	000f883a 	mov	r7,zero
    1a94:	000ebc00 	call	ebc0 <__nedf2>
    1a98:	10017426 	beq	r2,zero,206c <___vfprintf_internal_r+0xd4c>
    1a9c:	d9414717 	ldw	r5,1308(sp)
    1aa0:	d9814117 	ldw	r6,1284(sp)
    1aa4:	8c400044 	addi	r17,r17,1
    1aa8:	2c85883a 	add	r2,r5,r18
    1aac:	14bfffc4 	addi	r18,r2,-1
    1ab0:	28bfffc4 	addi	r2,r5,-1
    1ab4:	30c00044 	addi	r3,r6,1
    1ab8:	98800115 	stw	r2,4(r19)
    1abc:	008001c4 	movi	r2,7
    1ac0:	98c00015 	stw	r3,0(r19)
    1ac4:	dc800e15 	stw	r18,56(sp)
    1ac8:	dc400d15 	stw	r17,52(sp)
    1acc:	14418e16 	blt	r2,r17,2108 <___vfprintf_internal_r+0xde8>
    1ad0:	9cc00204 	addi	r19,r19,8
    1ad4:	d9414817 	ldw	r5,1312(sp)
    1ad8:	d8800804 	addi	r2,sp,32
    1adc:	8c400044 	addi	r17,r17,1
    1ae0:	9165883a 	add	r18,r18,r5
    1ae4:	98800015 	stw	r2,0(r19)
    1ae8:	008001c4 	movi	r2,7
    1aec:	99400115 	stw	r5,4(r19)
    1af0:	dc800e15 	stw	r18,56(sp)
    1af4:	dc400d15 	stw	r17,52(sp)
    1af8:	1440ed16 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0xb90>
    1afc:	98c00204 	addi	r3,r19,8
    1b00:	003f8506 	br	1918 <___vfprintf_internal_r+0x5f8>
    1b04:	d9814a17 	ldw	r6,1320(sp)
    1b08:	d8814517 	ldw	r2,1300(sp)
    1b0c:	30a1c83a 	sub	r16,r6,r2
    1b10:	043f4b0e 	bge	zero,r16,1840 <___vfprintf_internal_r+0x520>
    1b14:	00800404 	movi	r2,16
    1b18:	1404340e 	bge	r2,r16,2bec <___vfprintf_internal_r+0x18cc>
    1b1c:	1027883a 	mov	r19,r2
    1b20:	07000074 	movhi	fp,1
    1b24:	e7091c84 	addi	fp,fp,9330
    1b28:	050001c4 	movi	r20,7
    1b2c:	00000306 	br	1b3c <___vfprintf_internal_r+0x81c>
    1b30:	843ffc04 	addi	r16,r16,-16
    1b34:	ad400204 	addi	r21,r21,8
    1b38:	9c00130e 	bge	r19,r16,1b88 <___vfprintf_internal_r+0x868>
    1b3c:	94800404 	addi	r18,r18,16
    1b40:	8c400044 	addi	r17,r17,1
    1b44:	af000015 	stw	fp,0(r21)
    1b48:	acc00115 	stw	r19,4(r21)
    1b4c:	dc800e15 	stw	r18,56(sp)
    1b50:	dc400d15 	stw	r17,52(sp)
    1b54:	a47ff60e 	bge	r20,r17,1b30 <___vfprintf_internal_r+0x810>
    1b58:	d9014f17 	ldw	r4,1340(sp)
    1b5c:	b00b883a 	mov	r5,r22
    1b60:	d9800c04 	addi	r6,sp,48
    1b64:	d9c15115 	stw	r7,1348(sp)
    1b68:	00012c80 	call	12c8 <__sprint_r>
    1b6c:	d9c15117 	ldw	r7,1348(sp)
    1b70:	103fa31e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1b74:	843ffc04 	addi	r16,r16,-16
    1b78:	dc800e17 	ldw	r18,56(sp)
    1b7c:	dc400d17 	ldw	r17,52(sp)
    1b80:	dd401904 	addi	r21,sp,100
    1b84:	9c3fed16 	blt	r19,r16,1b3c <___vfprintf_internal_r+0x81c>
    1b88:	9425883a 	add	r18,r18,r16
    1b8c:	8c400044 	addi	r17,r17,1
    1b90:	008001c4 	movi	r2,7
    1b94:	af000015 	stw	fp,0(r21)
    1b98:	ac000115 	stw	r16,4(r21)
    1b9c:	dc800e15 	stw	r18,56(sp)
    1ba0:	dc400d15 	stw	r17,52(sp)
    1ba4:	14416116 	blt	r2,r17,212c <___vfprintf_internal_r+0xe0c>
    1ba8:	ad400204 	addi	r21,r21,8
    1bac:	003f2406 	br	1840 <___vfprintf_internal_r+0x520>
    1bb0:	d9014f17 	ldw	r4,1340(sp)
    1bb4:	00065100 	call	6510 <__sinit>
    1bb8:	d9c15117 	ldw	r7,1348(sp)
    1bbc:	003def06 	br	137c <___vfprintf_internal_r+0x5c>
    1bc0:	d9014f17 	ldw	r4,1340(sp)
    1bc4:	b00b883a 	mov	r5,r22
    1bc8:	d9c15115 	stw	r7,1348(sp)
    1bcc:	00049700 	call	4970 <__swsetup_r>
    1bd0:	d9c15117 	ldw	r7,1348(sp)
    1bd4:	103dee26 	beq	r2,zero,1390 <___vfprintf_internal_r+0x70>
    1bd8:	003f8c06 	br	1a0c <___vfprintf_internal_r+0x6ec>
    1bdc:	d9014217 	ldw	r4,1288(sp)
    1be0:	d9414317 	ldw	r5,1292(sp)
    1be4:	000d883a 	mov	r6,zero
    1be8:	000f883a 	mov	r7,zero
    1bec:	000eb380 	call	eb38 <__eqdf2>
    1bf0:	1000f21e 	bne	r2,zero,1fbc <___vfprintf_internal_r+0xc9c>
    1bf4:	00800074 	movhi	r2,1
    1bf8:	10891c04 	addi	r2,r2,9328
    1bfc:	94800044 	addi	r18,r18,1
    1c00:	8c400044 	addi	r17,r17,1
    1c04:	a8800015 	stw	r2,0(r21)
    1c08:	00c00044 	movi	r3,1
    1c0c:	008001c4 	movi	r2,7
    1c10:	a8c00115 	stw	r3,4(r21)
    1c14:	dc800e15 	stw	r18,56(sp)
    1c18:	dc400d15 	stw	r17,52(sp)
    1c1c:	1442fa16 	blt	r2,r17,2808 <___vfprintf_internal_r+0x14e8>
    1c20:	a8c00204 	addi	r3,r21,8
    1c24:	d8800517 	ldw	r2,20(sp)
    1c28:	d9014717 	ldw	r4,1308(sp)
    1c2c:	11015c0e 	bge	r2,r4,21a0 <___vfprintf_internal_r+0xe80>
    1c30:	dc400d17 	ldw	r17,52(sp)
    1c34:	d9814917 	ldw	r6,1316(sp)
    1c38:	00800044 	movi	r2,1
    1c3c:	94800044 	addi	r18,r18,1
    1c40:	8c400044 	addi	r17,r17,1
    1c44:	18800115 	stw	r2,4(r3)
    1c48:	008001c4 	movi	r2,7
    1c4c:	19800015 	stw	r6,0(r3)
    1c50:	dc800e15 	stw	r18,56(sp)
    1c54:	dc400d15 	stw	r17,52(sp)
    1c58:	14431016 	blt	r2,r17,289c <___vfprintf_internal_r+0x157c>
    1c5c:	18c00204 	addi	r3,r3,8
    1c60:	d8814717 	ldw	r2,1308(sp)
    1c64:	143fffc4 	addi	r16,r2,-1
    1c68:	043f2b0e 	bge	zero,r16,1918 <___vfprintf_internal_r+0x5f8>
    1c6c:	00800404 	movi	r2,16
    1c70:	1402a20e 	bge	r2,r16,26fc <___vfprintf_internal_r+0x13dc>
    1c74:	dc400d17 	ldw	r17,52(sp)
    1c78:	1027883a 	mov	r19,r2
    1c7c:	07000074 	movhi	fp,1
    1c80:	e7091c84 	addi	fp,fp,9330
    1c84:	050001c4 	movi	r20,7
    1c88:	00000306 	br	1c98 <___vfprintf_internal_r+0x978>
    1c8c:	18c00204 	addi	r3,r3,8
    1c90:	843ffc04 	addi	r16,r16,-16
    1c94:	9c029c0e 	bge	r19,r16,2708 <___vfprintf_internal_r+0x13e8>
    1c98:	94800404 	addi	r18,r18,16
    1c9c:	8c400044 	addi	r17,r17,1
    1ca0:	1f000015 	stw	fp,0(r3)
    1ca4:	1cc00115 	stw	r19,4(r3)
    1ca8:	dc800e15 	stw	r18,56(sp)
    1cac:	dc400d15 	stw	r17,52(sp)
    1cb0:	a47ff60e 	bge	r20,r17,1c8c <___vfprintf_internal_r+0x96c>
    1cb4:	d9014f17 	ldw	r4,1340(sp)
    1cb8:	b00b883a 	mov	r5,r22
    1cbc:	d9800c04 	addi	r6,sp,48
    1cc0:	00012c80 	call	12c8 <__sprint_r>
    1cc4:	103f4e1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1cc8:	dc800e17 	ldw	r18,56(sp)
    1ccc:	dc400d17 	ldw	r17,52(sp)
    1cd0:	d8c01904 	addi	r3,sp,100
    1cd4:	003fee06 	br	1c90 <___vfprintf_internal_r+0x970>
    1cd8:	d8802c0b 	ldhu	r2,176(sp)
    1cdc:	00ffffc4 	movi	r3,-1
    1ce0:	d8c14b15 	stw	r3,1324(sp)
    1ce4:	1080100c 	andi	r2,r2,64
    1ce8:	103dcc1e 	bne	r2,zero,141c <___vfprintf_internal_r+0xfc>
    1cec:	003dce06 	br	1428 <___vfprintf_internal_r+0x108>
    1cf0:	d9014f17 	ldw	r4,1340(sp)
    1cf4:	b00b883a 	mov	r5,r22
    1cf8:	d9800c04 	addi	r6,sp,48
    1cfc:	00012c80 	call	12c8 <__sprint_r>
    1d00:	103f3f1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1d04:	dc800e17 	ldw	r18,56(sp)
    1d08:	003f2e06 	br	19c4 <___vfprintf_internal_r+0x6a4>
    1d0c:	d9414c17 	ldw	r5,1328(sp)
    1d10:	29400414 	ori	r5,r5,16
    1d14:	d9414c15 	stw	r5,1328(sp)
    1d18:	d9814c17 	ldw	r6,1328(sp)
    1d1c:	3080080c 	andi	r2,r6,32
    1d20:	10014f1e 	bne	r2,zero,2260 <___vfprintf_internal_r+0xf40>
    1d24:	d8c14c17 	ldw	r3,1328(sp)
    1d28:	1880040c 	andi	r2,r3,16
    1d2c:	1002ea1e 	bne	r2,zero,28d8 <___vfprintf_internal_r+0x15b8>
    1d30:	d9014c17 	ldw	r4,1328(sp)
    1d34:	2080100c 	andi	r2,r4,64
    1d38:	1002e726 	beq	r2,zero,28d8 <___vfprintf_internal_r+0x15b8>
    1d3c:	3880000f 	ldh	r2,0(r7)
    1d40:	39c00104 	addi	r7,r7,4
    1d44:	d9c14015 	stw	r7,1280(sp)
    1d48:	1023d7fa 	srai	r17,r2,31
    1d4c:	1021883a 	mov	r16,r2
    1d50:	88037216 	blt	r17,zero,2b1c <___vfprintf_internal_r+0x17fc>
    1d54:	01000044 	movi	r4,1
    1d58:	98000416 	blt	r19,zero,1d6c <___vfprintf_internal_r+0xa4c>
    1d5c:	d8c14c17 	ldw	r3,1328(sp)
    1d60:	00bfdfc4 	movi	r2,-129
    1d64:	1886703a 	and	r3,r3,r2
    1d68:	d8c14c15 	stw	r3,1328(sp)
    1d6c:	8444b03a 	or	r2,r16,r17
    1d70:	1002261e 	bne	r2,zero,260c <___vfprintf_internal_r+0x12ec>
    1d74:	9802251e 	bne	r19,zero,260c <___vfprintf_internal_r+0x12ec>
    1d78:	20803fcc 	andi	r2,r4,255
    1d7c:	10029b26 	beq	r2,zero,27ec <___vfprintf_internal_r+0x14cc>
    1d80:	d8c01904 	addi	r3,sp,100
    1d84:	dd000f04 	addi	r20,sp,60
    1d88:	d8c14115 	stw	r3,1284(sp)
    1d8c:	d8c14117 	ldw	r3,1284(sp)
    1d90:	dcc14515 	stw	r19,1300(sp)
    1d94:	a0c5c83a 	sub	r2,r20,r3
    1d98:	11c00a04 	addi	r7,r2,40
    1d9c:	99c0010e 	bge	r19,r7,1da4 <___vfprintf_internal_r+0xa84>
    1da0:	d9c14515 	stw	r7,1300(sp)
    1da4:	dcc14615 	stw	r19,1304(sp)
    1da8:	d8800407 	ldb	r2,16(sp)
    1dac:	103e4c26 	beq	r2,zero,16e0 <___vfprintf_internal_r+0x3c0>
    1db0:	d8814517 	ldw	r2,1300(sp)
    1db4:	10800044 	addi	r2,r2,1
    1db8:	d8814515 	stw	r2,1300(sp)
    1dbc:	003e4806 	br	16e0 <___vfprintf_internal_r+0x3c0>
    1dc0:	d9814c17 	ldw	r6,1328(sp)
    1dc4:	31800414 	ori	r6,r6,16
    1dc8:	d9814c15 	stw	r6,1328(sp)
    1dcc:	d8c14c17 	ldw	r3,1328(sp)
    1dd0:	1880080c 	andi	r2,r3,32
    1dd4:	1001271e 	bne	r2,zero,2274 <___vfprintf_internal_r+0xf54>
    1dd8:	d9414c17 	ldw	r5,1328(sp)
    1ddc:	2880040c 	andi	r2,r5,16
    1de0:	1002b61e 	bne	r2,zero,28bc <___vfprintf_internal_r+0x159c>
    1de4:	d9814c17 	ldw	r6,1328(sp)
    1de8:	3080100c 	andi	r2,r6,64
    1dec:	1002b326 	beq	r2,zero,28bc <___vfprintf_internal_r+0x159c>
    1df0:	3c00000b 	ldhu	r16,0(r7)
    1df4:	0009883a 	mov	r4,zero
    1df8:	39c00104 	addi	r7,r7,4
    1dfc:	0023883a 	mov	r17,zero
    1e00:	d9c14015 	stw	r7,1280(sp)
    1e04:	d8000405 	stb	zero,16(sp)
    1e08:	003fd306 	br	1d58 <___vfprintf_internal_r+0xa38>
    1e0c:	d9014c17 	ldw	r4,1328(sp)
    1e10:	21000414 	ori	r4,r4,16
    1e14:	d9014c15 	stw	r4,1328(sp)
    1e18:	d9414c17 	ldw	r5,1328(sp)
    1e1c:	2880080c 	andi	r2,r5,32
    1e20:	1001081e 	bne	r2,zero,2244 <___vfprintf_internal_r+0xf24>
    1e24:	d8c14c17 	ldw	r3,1328(sp)
    1e28:	1880040c 	andi	r2,r3,16
    1e2c:	1002b01e 	bne	r2,zero,28f0 <___vfprintf_internal_r+0x15d0>
    1e30:	d9014c17 	ldw	r4,1328(sp)
    1e34:	2080100c 	andi	r2,r4,64
    1e38:	1002ad26 	beq	r2,zero,28f0 <___vfprintf_internal_r+0x15d0>
    1e3c:	3c00000b 	ldhu	r16,0(r7)
    1e40:	01000044 	movi	r4,1
    1e44:	39c00104 	addi	r7,r7,4
    1e48:	0023883a 	mov	r17,zero
    1e4c:	d9c14015 	stw	r7,1280(sp)
    1e50:	d8000405 	stb	zero,16(sp)
    1e54:	003fc006 	br	1d58 <___vfprintf_internal_r+0xa38>
    1e58:	d9014f17 	ldw	r4,1340(sp)
    1e5c:	b00b883a 	mov	r5,r22
    1e60:	d9800c04 	addi	r6,sp,48
    1e64:	00012c80 	call	12c8 <__sprint_r>
    1e68:	103ee51e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1e6c:	dc800e17 	ldw	r18,56(sp)
    1e70:	d8c01904 	addi	r3,sp,100
    1e74:	d9814c17 	ldw	r6,1328(sp)
    1e78:	3080004c 	andi	r2,r6,1
    1e7c:	1005003a 	cmpeq	r2,r2,zero
    1e80:	103ea51e 	bne	r2,zero,1918 <___vfprintf_internal_r+0x5f8>
    1e84:	00800044 	movi	r2,1
    1e88:	dc400d17 	ldw	r17,52(sp)
    1e8c:	18800115 	stw	r2,4(r3)
    1e90:	d8814917 	ldw	r2,1316(sp)
    1e94:	94800044 	addi	r18,r18,1
    1e98:	8c400044 	addi	r17,r17,1
    1e9c:	18800015 	stw	r2,0(r3)
    1ea0:	008001c4 	movi	r2,7
    1ea4:	dc800e15 	stw	r18,56(sp)
    1ea8:	dc400d15 	stw	r17,52(sp)
    1eac:	14421e0e 	bge	r2,r17,2728 <___vfprintf_internal_r+0x1408>
    1eb0:	d9014f17 	ldw	r4,1340(sp)
    1eb4:	b00b883a 	mov	r5,r22
    1eb8:	d9800c04 	addi	r6,sp,48
    1ebc:	00012c80 	call	12c8 <__sprint_r>
    1ec0:	103ecf1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1ec4:	dc800e17 	ldw	r18,56(sp)
    1ec8:	d8c01904 	addi	r3,sp,100
    1ecc:	003e9206 	br	1918 <___vfprintf_internal_r+0x5f8>
    1ed0:	d9014f17 	ldw	r4,1340(sp)
    1ed4:	b00b883a 	mov	r5,r22
    1ed8:	d9800c04 	addi	r6,sp,48
    1edc:	00012c80 	call	12c8 <__sprint_r>
    1ee0:	103ec026 	beq	r2,zero,19e4 <___vfprintf_internal_r+0x6c4>
    1ee4:	003ec606 	br	1a00 <___vfprintf_internal_r+0x6e0>
    1ee8:	d9014f17 	ldw	r4,1340(sp)
    1eec:	b00b883a 	mov	r5,r22
    1ef0:	d9800c04 	addi	r6,sp,48
    1ef4:	d9c15115 	stw	r7,1348(sp)
    1ef8:	00012c80 	call	12c8 <__sprint_r>
    1efc:	d9c15117 	ldw	r7,1348(sp)
    1f00:	103ebf1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1f04:	dc800e17 	ldw	r18,56(sp)
    1f08:	dc400d17 	ldw	r17,52(sp)
    1f0c:	dd401904 	addi	r21,sp,100
    1f10:	003e7406 	br	18e4 <___vfprintf_internal_r+0x5c4>
    1f14:	d9014f17 	ldw	r4,1340(sp)
    1f18:	b00b883a 	mov	r5,r22
    1f1c:	d9800c04 	addi	r6,sp,48
    1f20:	d9c15115 	stw	r7,1348(sp)
    1f24:	00012c80 	call	12c8 <__sprint_r>
    1f28:	d9c15117 	ldw	r7,1348(sp)
    1f2c:	103eb41e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1f30:	dd401904 	addi	r21,sp,100
    1f34:	003d6d06 	br	14ec <___vfprintf_internal_r+0x1cc>
    1f38:	d9014f17 	ldw	r4,1340(sp)
    1f3c:	b00b883a 	mov	r5,r22
    1f40:	d9800c04 	addi	r6,sp,48
    1f44:	d9c15115 	stw	r7,1348(sp)
    1f48:	00012c80 	call	12c8 <__sprint_r>
    1f4c:	d9c15117 	ldw	r7,1348(sp)
    1f50:	103eab1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1f54:	dc800e17 	ldw	r18,56(sp)
    1f58:	dc400d17 	ldw	r17,52(sp)
    1f5c:	dd401904 	addi	r21,sp,100
    1f60:	003e3406 	br	1834 <___vfprintf_internal_r+0x514>
    1f64:	d9014f17 	ldw	r4,1340(sp)
    1f68:	b00b883a 	mov	r5,r22
    1f6c:	d9800c04 	addi	r6,sp,48
    1f70:	d9c15115 	stw	r7,1348(sp)
    1f74:	00012c80 	call	12c8 <__sprint_r>
    1f78:	d9c15117 	ldw	r7,1348(sp)
    1f7c:	103ea01e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1f80:	dc800e17 	ldw	r18,56(sp)
    1f84:	dc400d17 	ldw	r17,52(sp)
    1f88:	dd401904 	addi	r21,sp,100
    1f8c:	003e1c06 	br	1800 <___vfprintf_internal_r+0x4e0>
    1f90:	d9014f17 	ldw	r4,1340(sp)
    1f94:	b00b883a 	mov	r5,r22
    1f98:	d9800c04 	addi	r6,sp,48
    1f9c:	d9c15115 	stw	r7,1348(sp)
    1fa0:	00012c80 	call	12c8 <__sprint_r>
    1fa4:	d9c15117 	ldw	r7,1348(sp)
    1fa8:	103e951e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    1fac:	dc800e17 	ldw	r18,56(sp)
    1fb0:	dc400d17 	ldw	r17,52(sp)
    1fb4:	dd401904 	addi	r21,sp,100
    1fb8:	003e0406 	br	17cc <___vfprintf_internal_r+0x4ac>
    1fbc:	d9000517 	ldw	r4,20(sp)
    1fc0:	0102520e 	bge	zero,r4,290c <___vfprintf_internal_r+0x15ec>
    1fc4:	d9814717 	ldw	r6,1308(sp)
    1fc8:	21807a16 	blt	r4,r6,21b4 <___vfprintf_internal_r+0xe94>
    1fcc:	d8814117 	ldw	r2,1284(sp)
    1fd0:	91a5883a 	add	r18,r18,r6
    1fd4:	8c400044 	addi	r17,r17,1
    1fd8:	a8800015 	stw	r2,0(r21)
    1fdc:	008001c4 	movi	r2,7
    1fe0:	a9800115 	stw	r6,4(r21)
    1fe4:	dc800e15 	stw	r18,56(sp)
    1fe8:	dc400d15 	stw	r17,52(sp)
    1fec:	1442f616 	blt	r2,r17,2bc8 <___vfprintf_internal_r+0x18a8>
    1ff0:	a8c00204 	addi	r3,r21,8
    1ff4:	d9414717 	ldw	r5,1308(sp)
    1ff8:	2161c83a 	sub	r16,r4,r5
    1ffc:	043f9d0e 	bge	zero,r16,1e74 <___vfprintf_internal_r+0xb54>
    2000:	00800404 	movi	r2,16
    2004:	1402130e 	bge	r2,r16,2854 <___vfprintf_internal_r+0x1534>
    2008:	dc400d17 	ldw	r17,52(sp)
    200c:	1027883a 	mov	r19,r2
    2010:	07000074 	movhi	fp,1
    2014:	e7091c84 	addi	fp,fp,9330
    2018:	050001c4 	movi	r20,7
    201c:	00000306 	br	202c <___vfprintf_internal_r+0xd0c>
    2020:	18c00204 	addi	r3,r3,8
    2024:	843ffc04 	addi	r16,r16,-16
    2028:	9c020d0e 	bge	r19,r16,2860 <___vfprintf_internal_r+0x1540>
    202c:	94800404 	addi	r18,r18,16
    2030:	8c400044 	addi	r17,r17,1
    2034:	1f000015 	stw	fp,0(r3)
    2038:	1cc00115 	stw	r19,4(r3)
    203c:	dc800e15 	stw	r18,56(sp)
    2040:	dc400d15 	stw	r17,52(sp)
    2044:	a47ff60e 	bge	r20,r17,2020 <___vfprintf_internal_r+0xd00>
    2048:	d9014f17 	ldw	r4,1340(sp)
    204c:	b00b883a 	mov	r5,r22
    2050:	d9800c04 	addi	r6,sp,48
    2054:	00012c80 	call	12c8 <__sprint_r>
    2058:	103e691e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    205c:	dc800e17 	ldw	r18,56(sp)
    2060:	dc400d17 	ldw	r17,52(sp)
    2064:	d8c01904 	addi	r3,sp,100
    2068:	003fee06 	br	2024 <___vfprintf_internal_r+0xd04>
    206c:	d8814717 	ldw	r2,1308(sp)
    2070:	143fffc4 	addi	r16,r2,-1
    2074:	043e970e 	bge	zero,r16,1ad4 <___vfprintf_internal_r+0x7b4>
    2078:	00800404 	movi	r2,16
    207c:	1400180e 	bge	r2,r16,20e0 <___vfprintf_internal_r+0xdc0>
    2080:	1029883a 	mov	r20,r2
    2084:	07000074 	movhi	fp,1
    2088:	e7091c84 	addi	fp,fp,9330
    208c:	054001c4 	movi	r21,7
    2090:	00000306 	br	20a0 <___vfprintf_internal_r+0xd80>
    2094:	9cc00204 	addi	r19,r19,8
    2098:	843ffc04 	addi	r16,r16,-16
    209c:	a400120e 	bge	r20,r16,20e8 <___vfprintf_internal_r+0xdc8>
    20a0:	94800404 	addi	r18,r18,16
    20a4:	8c400044 	addi	r17,r17,1
    20a8:	9f000015 	stw	fp,0(r19)
    20ac:	9d000115 	stw	r20,4(r19)
    20b0:	dc800e15 	stw	r18,56(sp)
    20b4:	dc400d15 	stw	r17,52(sp)
    20b8:	ac7ff60e 	bge	r21,r17,2094 <___vfprintf_internal_r+0xd74>
    20bc:	d9014f17 	ldw	r4,1340(sp)
    20c0:	b00b883a 	mov	r5,r22
    20c4:	d9800c04 	addi	r6,sp,48
    20c8:	00012c80 	call	12c8 <__sprint_r>
    20cc:	103e4c1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    20d0:	dc800e17 	ldw	r18,56(sp)
    20d4:	dc400d17 	ldw	r17,52(sp)
    20d8:	dcc01904 	addi	r19,sp,100
    20dc:	003fee06 	br	2098 <___vfprintf_internal_r+0xd78>
    20e0:	07000074 	movhi	fp,1
    20e4:	e7091c84 	addi	fp,fp,9330
    20e8:	9425883a 	add	r18,r18,r16
    20ec:	8c400044 	addi	r17,r17,1
    20f0:	008001c4 	movi	r2,7
    20f4:	9f000015 	stw	fp,0(r19)
    20f8:	9c000115 	stw	r16,4(r19)
    20fc:	dc800e15 	stw	r18,56(sp)
    2100:	dc400d15 	stw	r17,52(sp)
    2104:	147e720e 	bge	r2,r17,1ad0 <___vfprintf_internal_r+0x7b0>
    2108:	d9014f17 	ldw	r4,1340(sp)
    210c:	b00b883a 	mov	r5,r22
    2110:	d9800c04 	addi	r6,sp,48
    2114:	00012c80 	call	12c8 <__sprint_r>
    2118:	103e391e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    211c:	dc800e17 	ldw	r18,56(sp)
    2120:	dc400d17 	ldw	r17,52(sp)
    2124:	dcc01904 	addi	r19,sp,100
    2128:	003e6a06 	br	1ad4 <___vfprintf_internal_r+0x7b4>
    212c:	d9014f17 	ldw	r4,1340(sp)
    2130:	b00b883a 	mov	r5,r22
    2134:	d9800c04 	addi	r6,sp,48
    2138:	d9c15115 	stw	r7,1348(sp)
    213c:	00012c80 	call	12c8 <__sprint_r>
    2140:	d9c15117 	ldw	r7,1348(sp)
    2144:	103e2e1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2148:	dc800e17 	ldw	r18,56(sp)
    214c:	dc400d17 	ldw	r17,52(sp)
    2150:	dd401904 	addi	r21,sp,100
    2154:	003dba06 	br	1840 <___vfprintf_internal_r+0x520>
    2158:	d9014f17 	ldw	r4,1340(sp)
    215c:	b00b883a 	mov	r5,r22
    2160:	d9800c04 	addi	r6,sp,48
    2164:	00012c80 	call	12c8 <__sprint_r>
    2168:	103e251e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    216c:	dc800e17 	ldw	r18,56(sp)
    2170:	dc400d17 	ldw	r17,52(sp)
    2174:	dcc01904 	addi	r19,sp,100
    2178:	003e4206 	br	1a84 <___vfprintf_internal_r+0x764>
    217c:	d9014f17 	ldw	r4,1340(sp)
    2180:	b00b883a 	mov	r5,r22
    2184:	d9800c04 	addi	r6,sp,48
    2188:	00012c80 	call	12c8 <__sprint_r>
    218c:	103e1c1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2190:	dc800e17 	ldw	r18,56(sp)
    2194:	dc400d17 	ldw	r17,52(sp)
    2198:	d8c01904 	addi	r3,sp,100
    219c:	003e2e06 	br	1a58 <___vfprintf_internal_r+0x738>
    21a0:	d9414c17 	ldw	r5,1328(sp)
    21a4:	2880004c 	andi	r2,r5,1
    21a8:	1005003a 	cmpeq	r2,r2,zero
    21ac:	103dda1e 	bne	r2,zero,1918 <___vfprintf_internal_r+0x5f8>
    21b0:	003e9f06 	br	1c30 <___vfprintf_internal_r+0x910>
    21b4:	d8c14117 	ldw	r3,1284(sp)
    21b8:	9125883a 	add	r18,r18,r4
    21bc:	8c400044 	addi	r17,r17,1
    21c0:	008001c4 	movi	r2,7
    21c4:	a8c00015 	stw	r3,0(r21)
    21c8:	a9000115 	stw	r4,4(r21)
    21cc:	dc800e15 	stw	r18,56(sp)
    21d0:	dc400d15 	stw	r17,52(sp)
    21d4:	14426616 	blt	r2,r17,2b70 <___vfprintf_internal_r+0x1850>
    21d8:	a8c00204 	addi	r3,r21,8
    21dc:	d9414917 	ldw	r5,1316(sp)
    21e0:	00800044 	movi	r2,1
    21e4:	94800044 	addi	r18,r18,1
    21e8:	8c400044 	addi	r17,r17,1
    21ec:	18800115 	stw	r2,4(r3)
    21f0:	008001c4 	movi	r2,7
    21f4:	19400015 	stw	r5,0(r3)
    21f8:	dc800e15 	stw	r18,56(sp)
    21fc:	dc400d15 	stw	r17,52(sp)
    2200:	2021883a 	mov	r16,r4
    2204:	14425016 	blt	r2,r17,2b48 <___vfprintf_internal_r+0x1828>
    2208:	19400204 	addi	r5,r3,8
    220c:	d9814717 	ldw	r6,1308(sp)
    2210:	8c400044 	addi	r17,r17,1
    2214:	dc400d15 	stw	r17,52(sp)
    2218:	3107c83a 	sub	r3,r6,r4
    221c:	d9014117 	ldw	r4,1284(sp)
    2220:	90e5883a 	add	r18,r18,r3
    2224:	28c00115 	stw	r3,4(r5)
    2228:	8105883a 	add	r2,r16,r4
    222c:	28800015 	stw	r2,0(r5)
    2230:	008001c4 	movi	r2,7
    2234:	dc800e15 	stw	r18,56(sp)
    2238:	147f1d16 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0xb90>
    223c:	28c00204 	addi	r3,r5,8
    2240:	003db506 	br	1918 <___vfprintf_internal_r+0x5f8>
    2244:	3c000017 	ldw	r16,0(r7)
    2248:	3c400117 	ldw	r17,4(r7)
    224c:	39800204 	addi	r6,r7,8
    2250:	01000044 	movi	r4,1
    2254:	d9814015 	stw	r6,1280(sp)
    2258:	d8000405 	stb	zero,16(sp)
    225c:	003ebe06 	br	1d58 <___vfprintf_internal_r+0xa38>
    2260:	3c000017 	ldw	r16,0(r7)
    2264:	3c400117 	ldw	r17,4(r7)
    2268:	38800204 	addi	r2,r7,8
    226c:	d8814015 	stw	r2,1280(sp)
    2270:	003eb706 	br	1d50 <___vfprintf_internal_r+0xa30>
    2274:	3c000017 	ldw	r16,0(r7)
    2278:	3c400117 	ldw	r17,4(r7)
    227c:	39000204 	addi	r4,r7,8
    2280:	d9014015 	stw	r4,1280(sp)
    2284:	0009883a 	mov	r4,zero
    2288:	d8000405 	stb	zero,16(sp)
    228c:	003eb206 	br	1d58 <___vfprintf_internal_r+0xa38>
    2290:	38c00017 	ldw	r3,0(r7)
    2294:	39c00104 	addi	r7,r7,4
    2298:	d8c14a15 	stw	r3,1320(sp)
    229c:	1800d10e 	bge	r3,zero,25e4 <___vfprintf_internal_r+0x12c4>
    22a0:	00c7c83a 	sub	r3,zero,r3
    22a4:	d8c14a15 	stw	r3,1320(sp)
    22a8:	d9014c17 	ldw	r4,1328(sp)
    22ac:	b8c00007 	ldb	r3,0(r23)
    22b0:	21000114 	ori	r4,r4,4
    22b4:	d9014c15 	stw	r4,1328(sp)
    22b8:	003c9806 	br	151c <___vfprintf_internal_r+0x1fc>
    22bc:	d9814c17 	ldw	r6,1328(sp)
    22c0:	3080080c 	andi	r2,r6,32
    22c4:	1001f026 	beq	r2,zero,2a88 <___vfprintf_internal_r+0x1768>
    22c8:	d9014b17 	ldw	r4,1324(sp)
    22cc:	38800017 	ldw	r2,0(r7)
    22d0:	39c00104 	addi	r7,r7,4
    22d4:	d9c14015 	stw	r7,1280(sp)
    22d8:	2007d7fa 	srai	r3,r4,31
    22dc:	d9c14017 	ldw	r7,1280(sp)
    22e0:	11000015 	stw	r4,0(r2)
    22e4:	10c00115 	stw	r3,4(r2)
    22e8:	003c6906 	br	1490 <___vfprintf_internal_r+0x170>
    22ec:	b8c00007 	ldb	r3,0(r23)
    22f0:	00801b04 	movi	r2,108
    22f4:	18824f26 	beq	r3,r2,2c34 <___vfprintf_internal_r+0x1914>
    22f8:	d9414c17 	ldw	r5,1328(sp)
    22fc:	29400414 	ori	r5,r5,16
    2300:	d9414c15 	stw	r5,1328(sp)
    2304:	003c8506 	br	151c <___vfprintf_internal_r+0x1fc>
    2308:	d9814c17 	ldw	r6,1328(sp)
    230c:	b8c00007 	ldb	r3,0(r23)
    2310:	31800814 	ori	r6,r6,32
    2314:	d9814c15 	stw	r6,1328(sp)
    2318:	003c8006 	br	151c <___vfprintf_internal_r+0x1fc>
    231c:	d8814c17 	ldw	r2,1328(sp)
    2320:	3c000017 	ldw	r16,0(r7)
    2324:	00c01e04 	movi	r3,120
    2328:	10800094 	ori	r2,r2,2
    232c:	d8814c15 	stw	r2,1328(sp)
    2330:	39c00104 	addi	r7,r7,4
    2334:	01400074 	movhi	r5,1
    2338:	29490504 	addi	r5,r5,9236
    233c:	00800c04 	movi	r2,48
    2340:	0023883a 	mov	r17,zero
    2344:	01000084 	movi	r4,2
    2348:	d9c14015 	stw	r7,1280(sp)
    234c:	d8c14d15 	stw	r3,1332(sp)
    2350:	d9414415 	stw	r5,1296(sp)
    2354:	d8800445 	stb	r2,17(sp)
    2358:	d8c00485 	stb	r3,18(sp)
    235c:	d8000405 	stb	zero,16(sp)
    2360:	003e7d06 	br	1d58 <___vfprintf_internal_r+0xa38>
    2364:	d8814c17 	ldw	r2,1328(sp)
    2368:	b8c00007 	ldb	r3,0(r23)
    236c:	10801014 	ori	r2,r2,64
    2370:	d8814c15 	stw	r2,1328(sp)
    2374:	003c6906 	br	151c <___vfprintf_internal_r+0x1fc>
    2378:	d9414c17 	ldw	r5,1328(sp)
    237c:	2880020c 	andi	r2,r5,8
    2380:	1001df26 	beq	r2,zero,2b00 <___vfprintf_internal_r+0x17e0>
    2384:	39800017 	ldw	r6,0(r7)
    2388:	38800204 	addi	r2,r7,8
    238c:	d8814015 	stw	r2,1280(sp)
    2390:	d9814215 	stw	r6,1288(sp)
    2394:	39c00117 	ldw	r7,4(r7)
    2398:	d9c14315 	stw	r7,1292(sp)
    239c:	d9014217 	ldw	r4,1288(sp)
    23a0:	d9414317 	ldw	r5,1292(sp)
    23a4:	00099880 	call	9988 <__isinfd>
    23a8:	10021726 	beq	r2,zero,2c08 <___vfprintf_internal_r+0x18e8>
    23ac:	d9014217 	ldw	r4,1288(sp)
    23b0:	d9414317 	ldw	r5,1292(sp)
    23b4:	000d883a 	mov	r6,zero
    23b8:	000f883a 	mov	r7,zero
    23bc:	000ed580 	call	ed58 <__ltdf2>
    23c0:	1002ca16 	blt	r2,zero,2eec <___vfprintf_internal_r+0x1bcc>
    23c4:	d9414d17 	ldw	r5,1332(sp)
    23c8:	008011c4 	movi	r2,71
    23cc:	11420a16 	blt	r2,r5,2bf8 <___vfprintf_internal_r+0x18d8>
    23d0:	01800074 	movhi	r6,1
    23d4:	31890a04 	addi	r6,r6,9256
    23d8:	d9814115 	stw	r6,1284(sp)
    23dc:	d9014c17 	ldw	r4,1328(sp)
    23e0:	00c000c4 	movi	r3,3
    23e4:	00bfdfc4 	movi	r2,-129
    23e8:	2088703a 	and	r4,r4,r2
    23ec:	180f883a 	mov	r7,r3
    23f0:	d8c14515 	stw	r3,1300(sp)
    23f4:	d9014c15 	stw	r4,1328(sp)
    23f8:	d8014615 	stw	zero,1304(sp)
    23fc:	003e6a06 	br	1da8 <___vfprintf_internal_r+0xa88>
    2400:	38800017 	ldw	r2,0(r7)
    2404:	00c00044 	movi	r3,1
    2408:	39c00104 	addi	r7,r7,4
    240c:	d9c14015 	stw	r7,1280(sp)
    2410:	d9000f04 	addi	r4,sp,60
    2414:	180f883a 	mov	r7,r3
    2418:	d8c14515 	stw	r3,1300(sp)
    241c:	d9014115 	stw	r4,1284(sp)
    2420:	d8800f05 	stb	r2,60(sp)
    2424:	d8000405 	stb	zero,16(sp)
    2428:	003cac06 	br	16dc <___vfprintf_internal_r+0x3bc>
    242c:	01400074 	movhi	r5,1
    2430:	29491004 	addi	r5,r5,9280
    2434:	d9414415 	stw	r5,1296(sp)
    2438:	d9814c17 	ldw	r6,1328(sp)
    243c:	3080080c 	andi	r2,r6,32
    2440:	1000f926 	beq	r2,zero,2828 <___vfprintf_internal_r+0x1508>
    2444:	3c000017 	ldw	r16,0(r7)
    2448:	3c400117 	ldw	r17,4(r7)
    244c:	38800204 	addi	r2,r7,8
    2450:	d8814015 	stw	r2,1280(sp)
    2454:	d9414c17 	ldw	r5,1328(sp)
    2458:	2880004c 	andi	r2,r5,1
    245c:	1005003a 	cmpeq	r2,r2,zero
    2460:	1000b31e 	bne	r2,zero,2730 <___vfprintf_internal_r+0x1410>
    2464:	8444b03a 	or	r2,r16,r17
    2468:	1000b126 	beq	r2,zero,2730 <___vfprintf_internal_r+0x1410>
    246c:	d9814d17 	ldw	r6,1332(sp)
    2470:	29400094 	ori	r5,r5,2
    2474:	00800c04 	movi	r2,48
    2478:	01000084 	movi	r4,2
    247c:	d9414c15 	stw	r5,1328(sp)
    2480:	d8800445 	stb	r2,17(sp)
    2484:	d9800485 	stb	r6,18(sp)
    2488:	d8000405 	stb	zero,16(sp)
    248c:	003e3206 	br	1d58 <___vfprintf_internal_r+0xa38>
    2490:	01800074 	movhi	r6,1
    2494:	31890504 	addi	r6,r6,9236
    2498:	d9814415 	stw	r6,1296(sp)
    249c:	003fe606 	br	2438 <___vfprintf_internal_r+0x1118>
    24a0:	00800ac4 	movi	r2,43
    24a4:	d8800405 	stb	r2,16(sp)
    24a8:	b8c00007 	ldb	r3,0(r23)
    24ac:	003c1b06 	br	151c <___vfprintf_internal_r+0x1fc>
    24b0:	d8814c17 	ldw	r2,1328(sp)
    24b4:	b8c00007 	ldb	r3,0(r23)
    24b8:	10800054 	ori	r2,r2,1
    24bc:	d8814c15 	stw	r2,1328(sp)
    24c0:	003c1606 	br	151c <___vfprintf_internal_r+0x1fc>
    24c4:	d8800407 	ldb	r2,16(sp)
    24c8:	1000461e 	bne	r2,zero,25e4 <___vfprintf_internal_r+0x12c4>
    24cc:	00800804 	movi	r2,32
    24d0:	d8800405 	stb	r2,16(sp)
    24d4:	b8c00007 	ldb	r3,0(r23)
    24d8:	003c1006 	br	151c <___vfprintf_internal_r+0x1fc>
    24dc:	d9814c17 	ldw	r6,1328(sp)
    24e0:	b8c00007 	ldb	r3,0(r23)
    24e4:	31800214 	ori	r6,r6,8
    24e8:	d9814c15 	stw	r6,1328(sp)
    24ec:	003c0b06 	br	151c <___vfprintf_internal_r+0x1fc>
    24f0:	0007883a 	mov	r3,zero
    24f4:	01000244 	movi	r4,9
    24f8:	188002a4 	muli	r2,r3,10
    24fc:	b8c00007 	ldb	r3,0(r23)
    2500:	d9814d17 	ldw	r6,1332(sp)
    2504:	bdc00044 	addi	r23,r23,1
    2508:	d8c14d15 	stw	r3,1332(sp)
    250c:	d9414d17 	ldw	r5,1332(sp)
    2510:	3085883a 	add	r2,r6,r2
    2514:	10fff404 	addi	r3,r2,-48
    2518:	28bff404 	addi	r2,r5,-48
    251c:	20bff62e 	bgeu	r4,r2,24f8 <___vfprintf_internal_r+0x11d8>
    2520:	d8c14a15 	stw	r3,1320(sp)
    2524:	003bff06 	br	1524 <___vfprintf_internal_r+0x204>
    2528:	d9414c17 	ldw	r5,1328(sp)
    252c:	b8c00007 	ldb	r3,0(r23)
    2530:	29402014 	ori	r5,r5,128
    2534:	d9414c15 	stw	r5,1328(sp)
    2538:	003bf806 	br	151c <___vfprintf_internal_r+0x1fc>
    253c:	b8c00007 	ldb	r3,0(r23)
    2540:	00800a84 	movi	r2,42
    2544:	bdc00044 	addi	r23,r23,1
    2548:	18831526 	beq	r3,r2,31a0 <___vfprintf_internal_r+0x1e80>
    254c:	d8c14d15 	stw	r3,1332(sp)
    2550:	18bff404 	addi	r2,r3,-48
    2554:	00c00244 	movi	r3,9
    2558:	18827836 	bltu	r3,r2,2f3c <___vfprintf_internal_r+0x1c1c>
    255c:	000d883a 	mov	r6,zero
    2560:	308002a4 	muli	r2,r6,10
    2564:	b9800007 	ldb	r6,0(r23)
    2568:	d9414d17 	ldw	r5,1332(sp)
    256c:	bdc00044 	addi	r23,r23,1
    2570:	d9814d15 	stw	r6,1332(sp)
    2574:	d9014d17 	ldw	r4,1332(sp)
    2578:	1145883a 	add	r2,r2,r5
    257c:	11bff404 	addi	r6,r2,-48
    2580:	20bff404 	addi	r2,r4,-48
    2584:	18bff62e 	bgeu	r3,r2,2560 <___vfprintf_internal_r+0x1240>
    2588:	3027883a 	mov	r19,r6
    258c:	303be50e 	bge	r6,zero,1524 <___vfprintf_internal_r+0x204>
    2590:	04ffffc4 	movi	r19,-1
    2594:	003be306 	br	1524 <___vfprintf_internal_r+0x204>
    2598:	d8000405 	stb	zero,16(sp)
    259c:	39800017 	ldw	r6,0(r7)
    25a0:	39c00104 	addi	r7,r7,4
    25a4:	d9c14015 	stw	r7,1280(sp)
    25a8:	d9814115 	stw	r6,1284(sp)
    25ac:	3001c926 	beq	r6,zero,2cd4 <___vfprintf_internal_r+0x19b4>
    25b0:	98000e16 	blt	r19,zero,25ec <___vfprintf_internal_r+0x12cc>
    25b4:	d9014117 	ldw	r4,1284(sp)
    25b8:	000b883a 	mov	r5,zero
    25bc:	980d883a 	mov	r6,r19
    25c0:	0007ec40 	call	7ec4 <memchr>
    25c4:	10025926 	beq	r2,zero,2f2c <___vfprintf_internal_r+0x1c0c>
    25c8:	d8c14117 	ldw	r3,1284(sp)
    25cc:	10cfc83a 	sub	r7,r2,r3
    25d0:	99c19e16 	blt	r19,r7,2c4c <___vfprintf_internal_r+0x192c>
    25d4:	d9c14515 	stw	r7,1300(sp)
    25d8:	38000916 	blt	r7,zero,2600 <___vfprintf_internal_r+0x12e0>
    25dc:	d8014615 	stw	zero,1304(sp)
    25e0:	003df106 	br	1da8 <___vfprintf_internal_r+0xa88>
    25e4:	b8c00007 	ldb	r3,0(r23)
    25e8:	003bcc06 	br	151c <___vfprintf_internal_r+0x1fc>
    25ec:	d9014117 	ldw	r4,1284(sp)
    25f0:	0009e0c0 	call	9e0c <strlen>
    25f4:	d8814515 	stw	r2,1300(sp)
    25f8:	100f883a 	mov	r7,r2
    25fc:	103ff70e 	bge	r2,zero,25dc <___vfprintf_internal_r+0x12bc>
    2600:	d8014515 	stw	zero,1300(sp)
    2604:	d8014615 	stw	zero,1304(sp)
    2608:	003de706 	br	1da8 <___vfprintf_internal_r+0xa88>
    260c:	20c03fcc 	andi	r3,r4,255
    2610:	00800044 	movi	r2,1
    2614:	18802d26 	beq	r3,r2,26cc <___vfprintf_internal_r+0x13ac>
    2618:	18800e36 	bltu	r3,r2,2654 <___vfprintf_internal_r+0x1334>
    261c:	00800084 	movi	r2,2
    2620:	1880fa26 	beq	r3,r2,2a0c <___vfprintf_internal_r+0x16ec>
    2624:	01000074 	movhi	r4,1
    2628:	21091504 	addi	r4,r4,9300
    262c:	0009e0c0 	call	9e0c <strlen>
    2630:	100f883a 	mov	r7,r2
    2634:	dcc14515 	stw	r19,1300(sp)
    2638:	9880010e 	bge	r19,r2,2640 <___vfprintf_internal_r+0x1320>
    263c:	d8814515 	stw	r2,1300(sp)
    2640:	00800074 	movhi	r2,1
    2644:	10891504 	addi	r2,r2,9300
    2648:	dcc14615 	stw	r19,1304(sp)
    264c:	d8814115 	stw	r2,1284(sp)
    2650:	003dd506 	br	1da8 <___vfprintf_internal_r+0xa88>
    2654:	d9401904 	addi	r5,sp,100
    2658:	dd000f04 	addi	r20,sp,60
    265c:	d9414115 	stw	r5,1284(sp)
    2660:	880a977a 	slli	r5,r17,29
    2664:	d9814117 	ldw	r6,1284(sp)
    2668:	8004d0fa 	srli	r2,r16,3
    266c:	8806d0fa 	srli	r3,r17,3
    2670:	810001cc 	andi	r4,r16,7
    2674:	2884b03a 	or	r2,r5,r2
    2678:	31bfffc4 	addi	r6,r6,-1
    267c:	21000c04 	addi	r4,r4,48
    2680:	d9814115 	stw	r6,1284(sp)
    2684:	10cab03a 	or	r5,r2,r3
    2688:	31000005 	stb	r4,0(r6)
    268c:	1021883a 	mov	r16,r2
    2690:	1823883a 	mov	r17,r3
    2694:	283ff21e 	bne	r5,zero,2660 <___vfprintf_internal_r+0x1340>
    2698:	d8c14c17 	ldw	r3,1328(sp)
    269c:	1880004c 	andi	r2,r3,1
    26a0:	1005003a 	cmpeq	r2,r2,zero
    26a4:	103db91e 	bne	r2,zero,1d8c <___vfprintf_internal_r+0xa6c>
    26a8:	20803fcc 	andi	r2,r4,255
    26ac:	1080201c 	xori	r2,r2,128
    26b0:	10bfe004 	addi	r2,r2,-128
    26b4:	00c00c04 	movi	r3,48
    26b8:	10fdb426 	beq	r2,r3,1d8c <___vfprintf_internal_r+0xa6c>
    26bc:	31bfffc4 	addi	r6,r6,-1
    26c0:	d9814115 	stw	r6,1284(sp)
    26c4:	30c00005 	stb	r3,0(r6)
    26c8:	003db006 	br	1d8c <___vfprintf_internal_r+0xa6c>
    26cc:	88800068 	cmpgeui	r2,r17,1
    26d0:	10002c1e 	bne	r2,zero,2784 <___vfprintf_internal_r+0x1464>
    26d4:	8800021e 	bne	r17,zero,26e0 <___vfprintf_internal_r+0x13c0>
    26d8:	00800244 	movi	r2,9
    26dc:	14002936 	bltu	r2,r16,2784 <___vfprintf_internal_r+0x1464>
    26e0:	d90018c4 	addi	r4,sp,99
    26e4:	dd000f04 	addi	r20,sp,60
    26e8:	d9014115 	stw	r4,1284(sp)
    26ec:	d9014117 	ldw	r4,1284(sp)
    26f0:	80800c04 	addi	r2,r16,48
    26f4:	20800005 	stb	r2,0(r4)
    26f8:	003da406 	br	1d8c <___vfprintf_internal_r+0xa6c>
    26fc:	dc400d17 	ldw	r17,52(sp)
    2700:	07000074 	movhi	fp,1
    2704:	e7091c84 	addi	fp,fp,9330
    2708:	9425883a 	add	r18,r18,r16
    270c:	8c400044 	addi	r17,r17,1
    2710:	008001c4 	movi	r2,7
    2714:	1f000015 	stw	fp,0(r3)
    2718:	1c000115 	stw	r16,4(r3)
    271c:	dc800e15 	stw	r18,56(sp)
    2720:	dc400d15 	stw	r17,52(sp)
    2724:	147de216 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0xb90>
    2728:	18c00204 	addi	r3,r3,8
    272c:	003c7a06 	br	1918 <___vfprintf_internal_r+0x5f8>
    2730:	01000084 	movi	r4,2
    2734:	d8000405 	stb	zero,16(sp)
    2738:	003d8706 	br	1d58 <___vfprintf_internal_r+0xa38>
    273c:	d9814c17 	ldw	r6,1328(sp)
    2740:	30c4703a 	and	r2,r6,r3
    2744:	1005003a 	cmpeq	r2,r2,zero
    2748:	103cb926 	beq	r2,zero,1a30 <___vfprintf_internal_r+0x710>
    274c:	d9014117 	ldw	r4,1284(sp)
    2750:	94800044 	addi	r18,r18,1
    2754:	8c400044 	addi	r17,r17,1
    2758:	008001c4 	movi	r2,7
    275c:	a9000015 	stw	r4,0(r21)
    2760:	a8c00115 	stw	r3,4(r21)
    2764:	dc800e15 	stw	r18,56(sp)
    2768:	dc400d15 	stw	r17,52(sp)
    276c:	147e6616 	blt	r2,r17,2108 <___vfprintf_internal_r+0xde8>
    2770:	acc00204 	addi	r19,r21,8
    2774:	003cd706 	br	1ad4 <___vfprintf_internal_r+0x7b4>
    2778:	07000074 	movhi	fp,1
    277c:	e7091c84 	addi	fp,fp,9330
    2780:	003c4f06 	br	18c0 <___vfprintf_internal_r+0x5a0>
    2784:	dd000f04 	addi	r20,sp,60
    2788:	dc801904 	addi	r18,sp,100
    278c:	8009883a 	mov	r4,r16
    2790:	880b883a 	mov	r5,r17
    2794:	01800284 	movi	r6,10
    2798:	000f883a 	mov	r7,zero
    279c:	000d9780 	call	d978 <__umoddi3>
    27a0:	12000c04 	addi	r8,r2,48
    27a4:	94bfffc4 	addi	r18,r18,-1
    27a8:	8009883a 	mov	r4,r16
    27ac:	880b883a 	mov	r5,r17
    27b0:	01800284 	movi	r6,10
    27b4:	000f883a 	mov	r7,zero
    27b8:	92000005 	stb	r8,0(r18)
    27bc:	000d39c0 	call	d39c <__udivdi3>
    27c0:	1009883a 	mov	r4,r2
    27c4:	1021883a 	mov	r16,r2
    27c8:	18800068 	cmpgeui	r2,r3,1
    27cc:	1823883a 	mov	r17,r3
    27d0:	103fee1e 	bne	r2,zero,278c <___vfprintf_internal_r+0x146c>
    27d4:	1800021e 	bne	r3,zero,27e0 <___vfprintf_internal_r+0x14c0>
    27d8:	00800244 	movi	r2,9
    27dc:	113feb36 	bltu	r2,r4,278c <___vfprintf_internal_r+0x146c>
    27e0:	94bfffc4 	addi	r18,r18,-1
    27e4:	dc814115 	stw	r18,1284(sp)
    27e8:	003fc006 	br	26ec <___vfprintf_internal_r+0x13cc>
    27ec:	d9014c17 	ldw	r4,1328(sp)
    27f0:	2080004c 	andi	r2,r4,1
    27f4:	10009a1e 	bne	r2,zero,2a60 <___vfprintf_internal_r+0x1740>
    27f8:	d9401904 	addi	r5,sp,100
    27fc:	dd000f04 	addi	r20,sp,60
    2800:	d9414115 	stw	r5,1284(sp)
    2804:	003d6106 	br	1d8c <___vfprintf_internal_r+0xa6c>
    2808:	d9014f17 	ldw	r4,1340(sp)
    280c:	b00b883a 	mov	r5,r22
    2810:	d9800c04 	addi	r6,sp,48
    2814:	00012c80 	call	12c8 <__sprint_r>
    2818:	103c791e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    281c:	dc800e17 	ldw	r18,56(sp)
    2820:	d8c01904 	addi	r3,sp,100
    2824:	003cff06 	br	1c24 <___vfprintf_internal_r+0x904>
    2828:	d8c14c17 	ldw	r3,1328(sp)
    282c:	1880040c 	andi	r2,r3,16
    2830:	1000711e 	bne	r2,zero,29f8 <___vfprintf_internal_r+0x16d8>
    2834:	d9014c17 	ldw	r4,1328(sp)
    2838:	2080100c 	andi	r2,r4,64
    283c:	10006e26 	beq	r2,zero,29f8 <___vfprintf_internal_r+0x16d8>
    2840:	3c00000b 	ldhu	r16,0(r7)
    2844:	0023883a 	mov	r17,zero
    2848:	39c00104 	addi	r7,r7,4
    284c:	d9c14015 	stw	r7,1280(sp)
    2850:	003f0006 	br	2454 <___vfprintf_internal_r+0x1134>
    2854:	dc400d17 	ldw	r17,52(sp)
    2858:	07000074 	movhi	fp,1
    285c:	e7091c84 	addi	fp,fp,9330
    2860:	9425883a 	add	r18,r18,r16
    2864:	8c400044 	addi	r17,r17,1
    2868:	008001c4 	movi	r2,7
    286c:	1f000015 	stw	fp,0(r3)
    2870:	1c000115 	stw	r16,4(r3)
    2874:	dc800e15 	stw	r18,56(sp)
    2878:	dc400d15 	stw	r17,52(sp)
    287c:	147d7616 	blt	r2,r17,1e58 <___vfprintf_internal_r+0xb38>
    2880:	18c00204 	addi	r3,r3,8
    2884:	003d7b06 	br	1e74 <___vfprintf_internal_r+0xb54>
    2888:	dc800e17 	ldw	r18,56(sp)
    288c:	dc400d17 	ldw	r17,52(sp)
    2890:	07000074 	movhi	fp,1
    2894:	e7092084 	addi	fp,fp,9346
    2898:	003bc006 	br	179c <___vfprintf_internal_r+0x47c>
    289c:	d9014f17 	ldw	r4,1340(sp)
    28a0:	b00b883a 	mov	r5,r22
    28a4:	d9800c04 	addi	r6,sp,48
    28a8:	00012c80 	call	12c8 <__sprint_r>
    28ac:	103c541e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    28b0:	dc800e17 	ldw	r18,56(sp)
    28b4:	d8c01904 	addi	r3,sp,100
    28b8:	003ce906 	br	1c60 <___vfprintf_internal_r+0x940>
    28bc:	3c000017 	ldw	r16,0(r7)
    28c0:	0009883a 	mov	r4,zero
    28c4:	39c00104 	addi	r7,r7,4
    28c8:	0023883a 	mov	r17,zero
    28cc:	d9c14015 	stw	r7,1280(sp)
    28d0:	d8000405 	stb	zero,16(sp)
    28d4:	003d2006 	br	1d58 <___vfprintf_internal_r+0xa38>
    28d8:	38800017 	ldw	r2,0(r7)
    28dc:	39c00104 	addi	r7,r7,4
    28e0:	d9c14015 	stw	r7,1280(sp)
    28e4:	1023d7fa 	srai	r17,r2,31
    28e8:	1021883a 	mov	r16,r2
    28ec:	003d1806 	br	1d50 <___vfprintf_internal_r+0xa30>
    28f0:	3c000017 	ldw	r16,0(r7)
    28f4:	01000044 	movi	r4,1
    28f8:	39c00104 	addi	r7,r7,4
    28fc:	0023883a 	mov	r17,zero
    2900:	d9c14015 	stw	r7,1280(sp)
    2904:	d8000405 	stb	zero,16(sp)
    2908:	003d1306 	br	1d58 <___vfprintf_internal_r+0xa38>
    290c:	00800074 	movhi	r2,1
    2910:	10891c04 	addi	r2,r2,9328
    2914:	94800044 	addi	r18,r18,1
    2918:	8c400044 	addi	r17,r17,1
    291c:	a8800015 	stw	r2,0(r21)
    2920:	00c00044 	movi	r3,1
    2924:	008001c4 	movi	r2,7
    2928:	a8c00115 	stw	r3,4(r21)
    292c:	dc800e15 	stw	r18,56(sp)
    2930:	dc400d15 	stw	r17,52(sp)
    2934:	1440ca16 	blt	r2,r17,2c60 <___vfprintf_internal_r+0x1940>
    2938:	a8c00204 	addi	r3,r21,8
    293c:	2000061e 	bne	r4,zero,2958 <___vfprintf_internal_r+0x1638>
    2940:	d9414717 	ldw	r5,1308(sp)
    2944:	2800041e 	bne	r5,zero,2958 <___vfprintf_internal_r+0x1638>
    2948:	d9814c17 	ldw	r6,1328(sp)
    294c:	3080004c 	andi	r2,r6,1
    2950:	1005003a 	cmpeq	r2,r2,zero
    2954:	103bf01e 	bne	r2,zero,1918 <___vfprintf_internal_r+0x5f8>
    2958:	00800044 	movi	r2,1
    295c:	dc400d17 	ldw	r17,52(sp)
    2960:	18800115 	stw	r2,4(r3)
    2964:	d8814917 	ldw	r2,1316(sp)
    2968:	94800044 	addi	r18,r18,1
    296c:	8c400044 	addi	r17,r17,1
    2970:	18800015 	stw	r2,0(r3)
    2974:	008001c4 	movi	r2,7
    2978:	dc800e15 	stw	r18,56(sp)
    297c:	dc400d15 	stw	r17,52(sp)
    2980:	1440ca16 	blt	r2,r17,2cac <___vfprintf_internal_r+0x198c>
    2984:	18c00204 	addi	r3,r3,8
    2988:	0121c83a 	sub	r16,zero,r4
    298c:	0400500e 	bge	zero,r16,2ad0 <___vfprintf_internal_r+0x17b0>
    2990:	00800404 	movi	r2,16
    2994:	1400800e 	bge	r2,r16,2b98 <___vfprintf_internal_r+0x1878>
    2998:	1027883a 	mov	r19,r2
    299c:	07000074 	movhi	fp,1
    29a0:	e7091c84 	addi	fp,fp,9330
    29a4:	050001c4 	movi	r20,7
    29a8:	00000306 	br	29b8 <___vfprintf_internal_r+0x1698>
    29ac:	18c00204 	addi	r3,r3,8
    29b0:	843ffc04 	addi	r16,r16,-16
    29b4:	9c007a0e 	bge	r19,r16,2ba0 <___vfprintf_internal_r+0x1880>
    29b8:	94800404 	addi	r18,r18,16
    29bc:	8c400044 	addi	r17,r17,1
    29c0:	1f000015 	stw	fp,0(r3)
    29c4:	1cc00115 	stw	r19,4(r3)
    29c8:	dc800e15 	stw	r18,56(sp)
    29cc:	dc400d15 	stw	r17,52(sp)
    29d0:	a47ff60e 	bge	r20,r17,29ac <___vfprintf_internal_r+0x168c>
    29d4:	d9014f17 	ldw	r4,1340(sp)
    29d8:	b00b883a 	mov	r5,r22
    29dc:	d9800c04 	addi	r6,sp,48
    29e0:	00012c80 	call	12c8 <__sprint_r>
    29e4:	103c061e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    29e8:	dc800e17 	ldw	r18,56(sp)
    29ec:	dc400d17 	ldw	r17,52(sp)
    29f0:	d8c01904 	addi	r3,sp,100
    29f4:	003fee06 	br	29b0 <___vfprintf_internal_r+0x1690>
    29f8:	3c000017 	ldw	r16,0(r7)
    29fc:	0023883a 	mov	r17,zero
    2a00:	39c00104 	addi	r7,r7,4
    2a04:	d9c14015 	stw	r7,1280(sp)
    2a08:	003e9206 	br	2454 <___vfprintf_internal_r+0x1134>
    2a0c:	d9401904 	addi	r5,sp,100
    2a10:	dd000f04 	addi	r20,sp,60
    2a14:	d9414115 	stw	r5,1284(sp)
    2a18:	d9814417 	ldw	r6,1296(sp)
    2a1c:	880a973a 	slli	r5,r17,28
    2a20:	8004d13a 	srli	r2,r16,4
    2a24:	810003cc 	andi	r4,r16,15
    2a28:	3109883a 	add	r4,r6,r4
    2a2c:	2884b03a 	or	r2,r5,r2
    2a30:	21400003 	ldbu	r5,0(r4)
    2a34:	d9014117 	ldw	r4,1284(sp)
    2a38:	8806d13a 	srli	r3,r17,4
    2a3c:	1021883a 	mov	r16,r2
    2a40:	213fffc4 	addi	r4,r4,-1
    2a44:	d9014115 	stw	r4,1284(sp)
    2a48:	d9814117 	ldw	r6,1284(sp)
    2a4c:	10c8b03a 	or	r4,r2,r3
    2a50:	1823883a 	mov	r17,r3
    2a54:	31400005 	stb	r5,0(r6)
    2a58:	203fef1e 	bne	r4,zero,2a18 <___vfprintf_internal_r+0x16f8>
    2a5c:	003ccb06 	br	1d8c <___vfprintf_internal_r+0xa6c>
    2a60:	00800c04 	movi	r2,48
    2a64:	d98018c4 	addi	r6,sp,99
    2a68:	dd000f04 	addi	r20,sp,60
    2a6c:	d88018c5 	stb	r2,99(sp)
    2a70:	d9814115 	stw	r6,1284(sp)
    2a74:	003cc506 	br	1d8c <___vfprintf_internal_r+0xa6c>
    2a78:	dc400d17 	ldw	r17,52(sp)
    2a7c:	07000074 	movhi	fp,1
    2a80:	e7092084 	addi	fp,fp,9346
    2a84:	003bc706 	br	19a4 <___vfprintf_internal_r+0x684>
    2a88:	d9414c17 	ldw	r5,1328(sp)
    2a8c:	2880040c 	andi	r2,r5,16
    2a90:	10007c26 	beq	r2,zero,2c84 <___vfprintf_internal_r+0x1964>
    2a94:	38800017 	ldw	r2,0(r7)
    2a98:	39c00104 	addi	r7,r7,4
    2a9c:	d9c14015 	stw	r7,1280(sp)
    2aa0:	d9814b17 	ldw	r6,1324(sp)
    2aa4:	d9c14017 	ldw	r7,1280(sp)
    2aa8:	11800015 	stw	r6,0(r2)
    2aac:	003a7806 	br	1490 <___vfprintf_internal_r+0x170>
    2ab0:	d9014f17 	ldw	r4,1340(sp)
    2ab4:	b00b883a 	mov	r5,r22
    2ab8:	d9800c04 	addi	r6,sp,48
    2abc:	00012c80 	call	12c8 <__sprint_r>
    2ac0:	103bcf1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2ac4:	dc800e17 	ldw	r18,56(sp)
    2ac8:	dc400d17 	ldw	r17,52(sp)
    2acc:	d8c01904 	addi	r3,sp,100
    2ad0:	d9014717 	ldw	r4,1308(sp)
    2ad4:	d9414117 	ldw	r5,1284(sp)
    2ad8:	8c400044 	addi	r17,r17,1
    2adc:	9125883a 	add	r18,r18,r4
    2ae0:	008001c4 	movi	r2,7
    2ae4:	19400015 	stw	r5,0(r3)
    2ae8:	19000115 	stw	r4,4(r3)
    2aec:	dc800e15 	stw	r18,56(sp)
    2af0:	dc400d15 	stw	r17,52(sp)
    2af4:	147cee16 	blt	r2,r17,1eb0 <___vfprintf_internal_r+0xb90>
    2af8:	18c00204 	addi	r3,r3,8
    2afc:	003b8606 	br	1918 <___vfprintf_internal_r+0x5f8>
    2b00:	38c00017 	ldw	r3,0(r7)
    2b04:	39000204 	addi	r4,r7,8
    2b08:	d9014015 	stw	r4,1280(sp)
    2b0c:	d8c14215 	stw	r3,1288(sp)
    2b10:	39c00117 	ldw	r7,4(r7)
    2b14:	d9c14315 	stw	r7,1292(sp)
    2b18:	003e2006 	br	239c <___vfprintf_internal_r+0x107c>
    2b1c:	0005883a 	mov	r2,zero
    2b20:	1409c83a 	sub	r4,r2,r16
    2b24:	1105803a 	cmpltu	r2,r2,r4
    2b28:	044bc83a 	sub	r5,zero,r17
    2b2c:	2885c83a 	sub	r2,r5,r2
    2b30:	2021883a 	mov	r16,r4
    2b34:	1023883a 	mov	r17,r2
    2b38:	01000044 	movi	r4,1
    2b3c:	00800b44 	movi	r2,45
    2b40:	d8800405 	stb	r2,16(sp)
    2b44:	003c8406 	br	1d58 <___vfprintf_internal_r+0xa38>
    2b48:	d9014f17 	ldw	r4,1340(sp)
    2b4c:	b00b883a 	mov	r5,r22
    2b50:	d9800c04 	addi	r6,sp,48
    2b54:	00012c80 	call	12c8 <__sprint_r>
    2b58:	103ba91e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2b5c:	dc800e17 	ldw	r18,56(sp)
    2b60:	dc400d17 	ldw	r17,52(sp)
    2b64:	d9000517 	ldw	r4,20(sp)
    2b68:	d9401904 	addi	r5,sp,100
    2b6c:	003da706 	br	220c <___vfprintf_internal_r+0xeec>
    2b70:	d9014f17 	ldw	r4,1340(sp)
    2b74:	b00b883a 	mov	r5,r22
    2b78:	d9800c04 	addi	r6,sp,48
    2b7c:	00012c80 	call	12c8 <__sprint_r>
    2b80:	103b9f1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2b84:	dc800e17 	ldw	r18,56(sp)
    2b88:	dc400d17 	ldw	r17,52(sp)
    2b8c:	d9000517 	ldw	r4,20(sp)
    2b90:	d8c01904 	addi	r3,sp,100
    2b94:	003d9106 	br	21dc <___vfprintf_internal_r+0xebc>
    2b98:	07000074 	movhi	fp,1
    2b9c:	e7091c84 	addi	fp,fp,9330
    2ba0:	9425883a 	add	r18,r18,r16
    2ba4:	8c400044 	addi	r17,r17,1
    2ba8:	008001c4 	movi	r2,7
    2bac:	1f000015 	stw	fp,0(r3)
    2bb0:	1c000115 	stw	r16,4(r3)
    2bb4:	dc800e15 	stw	r18,56(sp)
    2bb8:	dc400d15 	stw	r17,52(sp)
    2bbc:	147fbc16 	blt	r2,r17,2ab0 <___vfprintf_internal_r+0x1790>
    2bc0:	18c00204 	addi	r3,r3,8
    2bc4:	003fc206 	br	2ad0 <___vfprintf_internal_r+0x17b0>
    2bc8:	d9014f17 	ldw	r4,1340(sp)
    2bcc:	b00b883a 	mov	r5,r22
    2bd0:	d9800c04 	addi	r6,sp,48
    2bd4:	00012c80 	call	12c8 <__sprint_r>
    2bd8:	103b891e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2bdc:	dc800e17 	ldw	r18,56(sp)
    2be0:	d9000517 	ldw	r4,20(sp)
    2be4:	d8c01904 	addi	r3,sp,100
    2be8:	003d0206 	br	1ff4 <___vfprintf_internal_r+0xcd4>
    2bec:	07000074 	movhi	fp,1
    2bf0:	e7091c84 	addi	fp,fp,9330
    2bf4:	003be406 	br	1b88 <___vfprintf_internal_r+0x868>
    2bf8:	00800074 	movhi	r2,1
    2bfc:	10890b04 	addi	r2,r2,9260
    2c00:	d8814115 	stw	r2,1284(sp)
    2c04:	003df506 	br	23dc <___vfprintf_internal_r+0x10bc>
    2c08:	d9014217 	ldw	r4,1288(sp)
    2c0c:	d9414317 	ldw	r5,1292(sp)
    2c10:	00099c80 	call	99c8 <__isnand>
    2c14:	10003926 	beq	r2,zero,2cfc <___vfprintf_internal_r+0x19dc>
    2c18:	d9414d17 	ldw	r5,1332(sp)
    2c1c:	008011c4 	movi	r2,71
    2c20:	1140ce16 	blt	r2,r5,2f5c <___vfprintf_internal_r+0x1c3c>
    2c24:	01800074 	movhi	r6,1
    2c28:	31890c04 	addi	r6,r6,9264
    2c2c:	d9814115 	stw	r6,1284(sp)
    2c30:	003dea06 	br	23dc <___vfprintf_internal_r+0x10bc>
    2c34:	d9014c17 	ldw	r4,1328(sp)
    2c38:	bdc00044 	addi	r23,r23,1
    2c3c:	b8c00007 	ldb	r3,0(r23)
    2c40:	21000814 	ori	r4,r4,32
    2c44:	d9014c15 	stw	r4,1328(sp)
    2c48:	003a3406 	br	151c <___vfprintf_internal_r+0x1fc>
    2c4c:	dcc14515 	stw	r19,1300(sp)
    2c50:	98011016 	blt	r19,zero,3094 <___vfprintf_internal_r+0x1d74>
    2c54:	980f883a 	mov	r7,r19
    2c58:	d8014615 	stw	zero,1304(sp)
    2c5c:	003c5206 	br	1da8 <___vfprintf_internal_r+0xa88>
    2c60:	d9014f17 	ldw	r4,1340(sp)
    2c64:	b00b883a 	mov	r5,r22
    2c68:	d9800c04 	addi	r6,sp,48
    2c6c:	00012c80 	call	12c8 <__sprint_r>
    2c70:	103b631e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2c74:	dc800e17 	ldw	r18,56(sp)
    2c78:	d9000517 	ldw	r4,20(sp)
    2c7c:	d8c01904 	addi	r3,sp,100
    2c80:	003f2e06 	br	293c <___vfprintf_internal_r+0x161c>
    2c84:	d8c14c17 	ldw	r3,1328(sp)
    2c88:	1880100c 	andi	r2,r3,64
    2c8c:	1000a026 	beq	r2,zero,2f10 <___vfprintf_internal_r+0x1bf0>
    2c90:	38800017 	ldw	r2,0(r7)
    2c94:	39c00104 	addi	r7,r7,4
    2c98:	d9c14015 	stw	r7,1280(sp)
    2c9c:	d9014b17 	ldw	r4,1324(sp)
    2ca0:	d9c14017 	ldw	r7,1280(sp)
    2ca4:	1100000d 	sth	r4,0(r2)
    2ca8:	0039f906 	br	1490 <___vfprintf_internal_r+0x170>
    2cac:	d9014f17 	ldw	r4,1340(sp)
    2cb0:	b00b883a 	mov	r5,r22
    2cb4:	d9800c04 	addi	r6,sp,48
    2cb8:	00012c80 	call	12c8 <__sprint_r>
    2cbc:	103b501e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2cc0:	dc800e17 	ldw	r18,56(sp)
    2cc4:	dc400d17 	ldw	r17,52(sp)
    2cc8:	d9000517 	ldw	r4,20(sp)
    2ccc:	d8c01904 	addi	r3,sp,100
    2cd0:	003f2d06 	br	2988 <___vfprintf_internal_r+0x1668>
    2cd4:	00800184 	movi	r2,6
    2cd8:	14c09a36 	bltu	r2,r19,2f44 <___vfprintf_internal_r+0x1c24>
    2cdc:	dcc14515 	stw	r19,1300(sp)
    2ce0:	9800010e 	bge	r19,zero,2ce8 <___vfprintf_internal_r+0x19c8>
    2ce4:	d8014515 	stw	zero,1300(sp)
    2ce8:	00800074 	movhi	r2,1
    2cec:	10890e04 	addi	r2,r2,9272
    2cf0:	980f883a 	mov	r7,r19
    2cf4:	d8814115 	stw	r2,1284(sp)
    2cf8:	003a7806 	br	16dc <___vfprintf_internal_r+0x3bc>
    2cfc:	00bfffc4 	movi	r2,-1
    2d00:	9880e226 	beq	r19,r2,308c <___vfprintf_internal_r+0x1d6c>
    2d04:	d9414d17 	ldw	r5,1332(sp)
    2d08:	008019c4 	movi	r2,103
    2d0c:	2880dc26 	beq	r5,r2,3080 <___vfprintf_internal_r+0x1d60>
    2d10:	008011c4 	movi	r2,71
    2d14:	2880da26 	beq	r5,r2,3080 <___vfprintf_internal_r+0x1d60>
    2d18:	d9414c17 	ldw	r5,1328(sp)
    2d1c:	d9014317 	ldw	r4,1292(sp)
    2d20:	d9814217 	ldw	r6,1288(sp)
    2d24:	29404014 	ori	r5,r5,256
    2d28:	d9414c15 	stw	r5,1328(sp)
    2d2c:	2000cc16 	blt	r4,zero,3060 <___vfprintf_internal_r+0x1d40>
    2d30:	3021883a 	mov	r16,r6
    2d34:	2023883a 	mov	r17,r4
    2d38:	0039883a 	mov	fp,zero
    2d3c:	d9414d17 	ldw	r5,1332(sp)
    2d40:	00801984 	movi	r2,102
    2d44:	2880b726 	beq	r5,r2,3024 <___vfprintf_internal_r+0x1d04>
    2d48:	00801184 	movi	r2,70
    2d4c:	2880b526 	beq	r5,r2,3024 <___vfprintf_internal_r+0x1d04>
    2d50:	00801944 	movi	r2,101
    2d54:	2880c826 	beq	r5,r2,3078 <___vfprintf_internal_r+0x1d58>
    2d58:	00801144 	movi	r2,69
    2d5c:	2880c626 	beq	r5,r2,3078 <___vfprintf_internal_r+0x1d58>
    2d60:	9829883a 	mov	r20,r19
    2d64:	d9014f17 	ldw	r4,1340(sp)
    2d68:	d8800504 	addi	r2,sp,20
    2d6c:	880d883a 	mov	r6,r17
    2d70:	d8800115 	stw	r2,4(sp)
    2d74:	d8c00604 	addi	r3,sp,24
    2d78:	d8800704 	addi	r2,sp,28
    2d7c:	800b883a 	mov	r5,r16
    2d80:	01c00084 	movi	r7,2
    2d84:	d8c00215 	stw	r3,8(sp)
    2d88:	d8800315 	stw	r2,12(sp)
    2d8c:	dd000015 	stw	r20,0(sp)
    2d90:	0004cc40 	call	4cc4 <_dtoa_r>
    2d94:	d9814d17 	ldw	r6,1332(sp)
    2d98:	d8814115 	stw	r2,1284(sp)
    2d9c:	008019c4 	movi	r2,103
    2da0:	30809526 	beq	r6,r2,2ff8 <___vfprintf_internal_r+0x1cd8>
    2da4:	d8c14d17 	ldw	r3,1332(sp)
    2da8:	008011c4 	movi	r2,71
    2dac:	18809226 	beq	r3,r2,2ff8 <___vfprintf_internal_r+0x1cd8>
    2db0:	d9414117 	ldw	r5,1284(sp)
    2db4:	d9814d17 	ldw	r6,1332(sp)
    2db8:	00801984 	movi	r2,102
    2dbc:	2d25883a 	add	r18,r5,r20
    2dc0:	30808626 	beq	r6,r2,2fdc <___vfprintf_internal_r+0x1cbc>
    2dc4:	00801184 	movi	r2,70
    2dc8:	30808426 	beq	r6,r2,2fdc <___vfprintf_internal_r+0x1cbc>
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	880b883a 	mov	r5,r17
    2dd8:	8009883a 	mov	r4,r16
    2ddc:	000eb380 	call	eb38 <__eqdf2>
    2de0:	1000751e 	bne	r2,zero,2fb8 <___vfprintf_internal_r+0x1c98>
    2de4:	9005883a 	mov	r2,r18
    2de8:	dc800715 	stw	r18,28(sp)
    2dec:	d9014117 	ldw	r4,1284(sp)
    2df0:	d9414d17 	ldw	r5,1332(sp)
    2df4:	00c019c4 	movi	r3,103
    2df8:	1125c83a 	sub	r18,r2,r4
    2dfc:	28c06826 	beq	r5,r3,2fa0 <___vfprintf_internal_r+0x1c80>
    2e00:	008011c4 	movi	r2,71
    2e04:	28806626 	beq	r5,r2,2fa0 <___vfprintf_internal_r+0x1c80>
    2e08:	d9000517 	ldw	r4,20(sp)
    2e0c:	d8c14d17 	ldw	r3,1332(sp)
    2e10:	00801944 	movi	r2,101
    2e14:	10c05516 	blt	r2,r3,2f6c <___vfprintf_internal_r+0x1c4c>
    2e18:	213fffc4 	addi	r4,r4,-1
    2e1c:	d9000515 	stw	r4,20(sp)
    2e20:	d8c00805 	stb	r3,32(sp)
    2e24:	2021883a 	mov	r16,r4
    2e28:	2000c116 	blt	r4,zero,3130 <___vfprintf_internal_r+0x1e10>
    2e2c:	00800ac4 	movi	r2,43
    2e30:	d8800845 	stb	r2,33(sp)
    2e34:	00800244 	movi	r2,9
    2e38:	1400af0e 	bge	r2,r16,30f8 <___vfprintf_internal_r+0x1dd8>
    2e3c:	1027883a 	mov	r19,r2
    2e40:	dc400b84 	addi	r17,sp,46
    2e44:	8009883a 	mov	r4,r16
    2e48:	01400284 	movi	r5,10
    2e4c:	000f31c0 	call	f31c <__modsi3>
    2e50:	10800c04 	addi	r2,r2,48
    2e54:	8c7fffc4 	addi	r17,r17,-1
    2e58:	8009883a 	mov	r4,r16
    2e5c:	01400284 	movi	r5,10
    2e60:	88800005 	stb	r2,0(r17)
    2e64:	000f2bc0 	call	f2bc <__divsi3>
    2e68:	1021883a 	mov	r16,r2
    2e6c:	98bff516 	blt	r19,r2,2e44 <___vfprintf_internal_r+0x1b24>
    2e70:	10c00c04 	addi	r3,r2,48
    2e74:	d88009c4 	addi	r2,sp,39
    2e78:	108001c4 	addi	r2,r2,7
    2e7c:	897fffc4 	addi	r5,r17,-1
    2e80:	88ffffc5 	stb	r3,-1(r17)
    2e84:	2880a72e 	bgeu	r5,r2,3124 <___vfprintf_internal_r+0x1e04>
    2e88:	1009883a 	mov	r4,r2
    2e8c:	d9800804 	addi	r6,sp,32
    2e90:	d8c00884 	addi	r3,sp,34
    2e94:	28800003 	ldbu	r2,0(r5)
    2e98:	29400044 	addi	r5,r5,1
    2e9c:	18800005 	stb	r2,0(r3)
    2ea0:	18c00044 	addi	r3,r3,1
    2ea4:	293ffb36 	bltu	r5,r4,2e94 <___vfprintf_internal_r+0x1b74>
    2ea8:	1987c83a 	sub	r3,r3,r6
    2eac:	00800044 	movi	r2,1
    2eb0:	d8c14815 	stw	r3,1312(sp)
    2eb4:	90cf883a 	add	r7,r18,r3
    2eb8:	1480960e 	bge	r2,r18,3114 <___vfprintf_internal_r+0x1df4>
    2ebc:	39c00044 	addi	r7,r7,1
    2ec0:	d9c14515 	stw	r7,1300(sp)
    2ec4:	38003416 	blt	r7,zero,2f98 <___vfprintf_internal_r+0x1c78>
    2ec8:	e0803fcc 	andi	r2,fp,255
    2ecc:	1080201c 	xori	r2,r2,128
    2ed0:	10bfe004 	addi	r2,r2,-128
    2ed4:	10004e26 	beq	r2,zero,3010 <___vfprintf_internal_r+0x1cf0>
    2ed8:	00800b44 	movi	r2,45
    2edc:	dc814715 	stw	r18,1308(sp)
    2ee0:	d8014615 	stw	zero,1304(sp)
    2ee4:	d8800405 	stb	r2,16(sp)
    2ee8:	003bb106 	br	1db0 <___vfprintf_internal_r+0xa90>
    2eec:	00800b44 	movi	r2,45
    2ef0:	d8800405 	stb	r2,16(sp)
    2ef4:	003d3306 	br	23c4 <___vfprintf_internal_r+0x10a4>
    2ef8:	d9014f17 	ldw	r4,1340(sp)
    2efc:	b00b883a 	mov	r5,r22
    2f00:	d9800c04 	addi	r6,sp,48
    2f04:	00012c80 	call	12c8 <__sprint_r>
    2f08:	103abd1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x6e0>
    2f0c:	003abb06 	br	19fc <___vfprintf_internal_r+0x6dc>
    2f10:	38800017 	ldw	r2,0(r7)
    2f14:	39c00104 	addi	r7,r7,4
    2f18:	d9c14015 	stw	r7,1280(sp)
    2f1c:	d9414b17 	ldw	r5,1324(sp)
    2f20:	d9c14017 	ldw	r7,1280(sp)
    2f24:	11400015 	stw	r5,0(r2)
    2f28:	00395906 	br	1490 <___vfprintf_internal_r+0x170>
    2f2c:	980f883a 	mov	r7,r19
    2f30:	dcc14515 	stw	r19,1300(sp)
    2f34:	d8014615 	stw	zero,1304(sp)
    2f38:	003b9b06 	br	1da8 <___vfprintf_internal_r+0xa88>
    2f3c:	0027883a 	mov	r19,zero
    2f40:	00397806 	br	1524 <___vfprintf_internal_r+0x204>
    2f44:	00c00074 	movhi	r3,1
    2f48:	18c90e04 	addi	r3,r3,9272
    2f4c:	100f883a 	mov	r7,r2
    2f50:	d8814515 	stw	r2,1300(sp)
    2f54:	d8c14115 	stw	r3,1284(sp)
    2f58:	0039e006 	br	16dc <___vfprintf_internal_r+0x3bc>
    2f5c:	00800074 	movhi	r2,1
    2f60:	10890d04 	addi	r2,r2,9268
    2f64:	d8814115 	stw	r2,1284(sp)
    2f68:	003d1c06 	br	23dc <___vfprintf_internal_r+0x10bc>
    2f6c:	d9414d17 	ldw	r5,1332(sp)
    2f70:	00801984 	movi	r2,102
    2f74:	28804926 	beq	r5,r2,309c <___vfprintf_internal_r+0x1d7c>
    2f78:	200f883a 	mov	r7,r4
    2f7c:	24805716 	blt	r4,r18,30dc <___vfprintf_internal_r+0x1dbc>
    2f80:	d9414c17 	ldw	r5,1328(sp)
    2f84:	2880004c 	andi	r2,r5,1
    2f88:	10000126 	beq	r2,zero,2f90 <___vfprintf_internal_r+0x1c70>
    2f8c:	21c00044 	addi	r7,r4,1
    2f90:	d9c14515 	stw	r7,1300(sp)
    2f94:	383fcc0e 	bge	r7,zero,2ec8 <___vfprintf_internal_r+0x1ba8>
    2f98:	d8014515 	stw	zero,1300(sp)
    2f9c:	003fca06 	br	2ec8 <___vfprintf_internal_r+0x1ba8>
    2fa0:	d9000517 	ldw	r4,20(sp)
    2fa4:	00bfff04 	movi	r2,-4
    2fa8:	1100480e 	bge	r2,r4,30cc <___vfprintf_internal_r+0x1dac>
    2fac:	99004716 	blt	r19,r4,30cc <___vfprintf_internal_r+0x1dac>
    2fb0:	d8c14d15 	stw	r3,1332(sp)
    2fb4:	003ff006 	br	2f78 <___vfprintf_internal_r+0x1c58>
    2fb8:	d8800717 	ldw	r2,28(sp)
    2fbc:	14bf8b2e 	bgeu	r2,r18,2dec <___vfprintf_internal_r+0x1acc>
    2fc0:	9007883a 	mov	r3,r18
    2fc4:	01000c04 	movi	r4,48
    2fc8:	11000005 	stb	r4,0(r2)
    2fcc:	10800044 	addi	r2,r2,1
    2fd0:	d8800715 	stw	r2,28(sp)
    2fd4:	18bffc1e 	bne	r3,r2,2fc8 <___vfprintf_internal_r+0x1ca8>
    2fd8:	003f8406 	br	2dec <___vfprintf_internal_r+0x1acc>
    2fdc:	d8814117 	ldw	r2,1284(sp)
    2fe0:	10c00007 	ldb	r3,0(r2)
    2fe4:	00800c04 	movi	r2,48
    2fe8:	18805b26 	beq	r3,r2,3158 <___vfprintf_internal_r+0x1e38>
    2fec:	d9000517 	ldw	r4,20(sp)
    2ff0:	9125883a 	add	r18,r18,r4
    2ff4:	003f7506 	br	2dcc <___vfprintf_internal_r+0x1aac>
    2ff8:	d9014c17 	ldw	r4,1328(sp)
    2ffc:	2080004c 	andi	r2,r4,1
    3000:	1005003a 	cmpeq	r2,r2,zero
    3004:	103f6a26 	beq	r2,zero,2db0 <___vfprintf_internal_r+0x1a90>
    3008:	d8800717 	ldw	r2,28(sp)
    300c:	003f7706 	br	2dec <___vfprintf_internal_r+0x1acc>
    3010:	d9c14515 	stw	r7,1300(sp)
    3014:	38004d16 	blt	r7,zero,314c <___vfprintf_internal_r+0x1e2c>
    3018:	dc814715 	stw	r18,1308(sp)
    301c:	d8014615 	stw	zero,1304(sp)
    3020:	003b6106 	br	1da8 <___vfprintf_internal_r+0xa88>
    3024:	d9014f17 	ldw	r4,1340(sp)
    3028:	d8800504 	addi	r2,sp,20
    302c:	d8800115 	stw	r2,4(sp)
    3030:	d8c00604 	addi	r3,sp,24
    3034:	d8800704 	addi	r2,sp,28
    3038:	800b883a 	mov	r5,r16
    303c:	880d883a 	mov	r6,r17
    3040:	01c000c4 	movi	r7,3
    3044:	d8c00215 	stw	r3,8(sp)
    3048:	d8800315 	stw	r2,12(sp)
    304c:	dcc00015 	stw	r19,0(sp)
    3050:	9829883a 	mov	r20,r19
    3054:	0004cc40 	call	4cc4 <_dtoa_r>
    3058:	d8814115 	stw	r2,1284(sp)
    305c:	003f5106 	br	2da4 <___vfprintf_internal_r+0x1a84>
    3060:	d8c14217 	ldw	r3,1288(sp)
    3064:	d9014317 	ldw	r4,1292(sp)
    3068:	07000b44 	movi	fp,45
    306c:	1821883a 	mov	r16,r3
    3070:	2460003c 	xorhi	r17,r4,32768
    3074:	003f3106 	br	2d3c <___vfprintf_internal_r+0x1a1c>
    3078:	9d000044 	addi	r20,r19,1
    307c:	003f3906 	br	2d64 <___vfprintf_internal_r+0x1a44>
    3080:	983f251e 	bne	r19,zero,2d18 <___vfprintf_internal_r+0x19f8>
    3084:	04c00044 	movi	r19,1
    3088:	003f2306 	br	2d18 <___vfprintf_internal_r+0x19f8>
    308c:	04c00184 	movi	r19,6
    3090:	003f2106 	br	2d18 <___vfprintf_internal_r+0x19f8>
    3094:	d8014515 	stw	zero,1300(sp)
    3098:	003eee06 	br	2c54 <___vfprintf_internal_r+0x1934>
    309c:	200f883a 	mov	r7,r4
    30a0:	0100370e 	bge	zero,r4,3180 <___vfprintf_internal_r+0x1e60>
    30a4:	9800031e 	bne	r19,zero,30b4 <___vfprintf_internal_r+0x1d94>
    30a8:	d9814c17 	ldw	r6,1328(sp)
    30ac:	3080004c 	andi	r2,r6,1
    30b0:	103fb726 	beq	r2,zero,2f90 <___vfprintf_internal_r+0x1c70>
    30b4:	20800044 	addi	r2,r4,1
    30b8:	98a7883a 	add	r19,r19,r2
    30bc:	dcc14515 	stw	r19,1300(sp)
    30c0:	980f883a 	mov	r7,r19
    30c4:	983f800e 	bge	r19,zero,2ec8 <___vfprintf_internal_r+0x1ba8>
    30c8:	003fb306 	br	2f98 <___vfprintf_internal_r+0x1c78>
    30cc:	d9814d17 	ldw	r6,1332(sp)
    30d0:	31bfff84 	addi	r6,r6,-2
    30d4:	d9814d15 	stw	r6,1332(sp)
    30d8:	003f4c06 	br	2e0c <___vfprintf_internal_r+0x1aec>
    30dc:	0100180e 	bge	zero,r4,3140 <___vfprintf_internal_r+0x1e20>
    30e0:	00800044 	movi	r2,1
    30e4:	1485883a 	add	r2,r2,r18
    30e8:	d8814515 	stw	r2,1300(sp)
    30ec:	100f883a 	mov	r7,r2
    30f0:	103f750e 	bge	r2,zero,2ec8 <___vfprintf_internal_r+0x1ba8>
    30f4:	003fa806 	br	2f98 <___vfprintf_internal_r+0x1c78>
    30f8:	80c00c04 	addi	r3,r16,48
    30fc:	00800c04 	movi	r2,48
    3100:	d8c008c5 	stb	r3,35(sp)
    3104:	d9800804 	addi	r6,sp,32
    3108:	d8c00904 	addi	r3,sp,36
    310c:	d8800885 	stb	r2,34(sp)
    3110:	003f6506 	br	2ea8 <___vfprintf_internal_r+0x1b88>
    3114:	d9014c17 	ldw	r4,1328(sp)
    3118:	2084703a 	and	r2,r4,r2
    311c:	103f9c26 	beq	r2,zero,2f90 <___vfprintf_internal_r+0x1c70>
    3120:	003f6606 	br	2ebc <___vfprintf_internal_r+0x1b9c>
    3124:	d9800804 	addi	r6,sp,32
    3128:	d8c00884 	addi	r3,sp,34
    312c:	003f5e06 	br	2ea8 <___vfprintf_internal_r+0x1b88>
    3130:	00800b44 	movi	r2,45
    3134:	0121c83a 	sub	r16,zero,r4
    3138:	d8800845 	stb	r2,33(sp)
    313c:	003f3d06 	br	2e34 <___vfprintf_internal_r+0x1b14>
    3140:	00800084 	movi	r2,2
    3144:	1105c83a 	sub	r2,r2,r4
    3148:	003fe606 	br	30e4 <___vfprintf_internal_r+0x1dc4>
    314c:	d8014515 	stw	zero,1300(sp)
    3150:	dc814715 	stw	r18,1308(sp)
    3154:	003fb106 	br	301c <___vfprintf_internal_r+0x1cfc>
    3158:	000d883a 	mov	r6,zero
    315c:	000f883a 	mov	r7,zero
    3160:	8009883a 	mov	r4,r16
    3164:	880b883a 	mov	r5,r17
    3168:	000ebc00 	call	ebc0 <__nedf2>
    316c:	103f9f26 	beq	r2,zero,2fec <___vfprintf_internal_r+0x1ccc>
    3170:	00800044 	movi	r2,1
    3174:	1509c83a 	sub	r4,r2,r20
    3178:	d9000515 	stw	r4,20(sp)
    317c:	003f9b06 	br	2fec <___vfprintf_internal_r+0x1ccc>
    3180:	98000d1e 	bne	r19,zero,31b8 <___vfprintf_internal_r+0x1e98>
    3184:	d8c14c17 	ldw	r3,1328(sp)
    3188:	1880004c 	andi	r2,r3,1
    318c:	10000a1e 	bne	r2,zero,31b8 <___vfprintf_internal_r+0x1e98>
    3190:	01000044 	movi	r4,1
    3194:	200f883a 	mov	r7,r4
    3198:	d9014515 	stw	r4,1300(sp)
    319c:	003f4a06 	br	2ec8 <___vfprintf_internal_r+0x1ba8>
    31a0:	3cc00017 	ldw	r19,0(r7)
    31a4:	39c00104 	addi	r7,r7,4
    31a8:	983d0e0e 	bge	r19,zero,25e4 <___vfprintf_internal_r+0x12c4>
    31ac:	b8c00007 	ldb	r3,0(r23)
    31b0:	04ffffc4 	movi	r19,-1
    31b4:	0038d906 	br	151c <___vfprintf_internal_r+0x1fc>
    31b8:	9cc00084 	addi	r19,r19,2
    31bc:	dcc14515 	stw	r19,1300(sp)
    31c0:	980f883a 	mov	r7,r19
    31c4:	983f400e 	bge	r19,zero,2ec8 <___vfprintf_internal_r+0x1ba8>
    31c8:	003f7306 	br	2f98 <___vfprintf_internal_r+0x1c78>

000031cc <__vfprintf_internal>:
    31cc:	00800074 	movhi	r2,1
    31d0:	10917404 	addi	r2,r2,17872
    31d4:	2013883a 	mov	r9,r4
    31d8:	11000017 	ldw	r4,0(r2)
    31dc:	2805883a 	mov	r2,r5
    31e0:	300f883a 	mov	r7,r6
    31e4:	480b883a 	mov	r5,r9
    31e8:	100d883a 	mov	r6,r2
    31ec:	00013201 	jmpi	1320 <___vfprintf_internal_r>

000031f0 <__svfscanf_r>:
    31f0:	deff4e04 	addi	sp,sp,-712
    31f4:	dd80ae15 	stw	r22,696(sp)
    31f8:	dd00ac15 	stw	r20,688(sp)
    31fc:	dc40a915 	stw	r17,676(sp)
    3200:	dc00a815 	stw	r16,672(sp)
    3204:	dfc0b115 	stw	ra,708(sp)
    3208:	df00b015 	stw	fp,704(sp)
    320c:	ddc0af15 	stw	r23,700(sp)
    3210:	dd40ad15 	stw	r21,692(sp)
    3214:	dcc0ab15 	stw	r19,684(sp)
    3218:	dc80aa15 	stw	r18,680(sp)
    321c:	202d883a 	mov	r22,r4
    3220:	2821883a 	mov	r16,r5
    3224:	d9c0a415 	stw	r7,656(sp)
    3228:	3029883a 	mov	r20,r6
    322c:	d800a215 	stw	zero,648(sp)
    3230:	0023883a 	mov	r17,zero
    3234:	d800a115 	stw	zero,644(sp)
    3238:	d800a015 	stw	zero,640(sp)
    323c:	a1000007 	ldb	r4,0(r20)
    3240:	d9000115 	stw	r4,4(sp)
    3244:	20001f26 	beq	r4,zero,32c4 <__svfscanf_r+0xd4>
    3248:	04800074 	movhi	r18,1
    324c:	94917304 	addi	r18,r18,17868
    3250:	91800017 	ldw	r6,0(r18)
    3254:	a5000044 	addi	r20,r20,1
    3258:	3107883a 	add	r3,r6,r4
    325c:	18800003 	ldbu	r2,0(r3)
    3260:	1080020c 	andi	r2,r2,8
    3264:	10002426 	beq	r2,zero,32f8 <__svfscanf_r+0x108>
    3268:	80c00117 	ldw	r3,4(r16)
    326c:	00c00e0e 	bge	zero,r3,32a8 <__svfscanf_r+0xb8>
    3270:	81400017 	ldw	r5,0(r16)
    3274:	90800017 	ldw	r2,0(r18)
    3278:	28c00003 	ldbu	r3,0(r5)
    327c:	1887883a 	add	r3,r3,r2
    3280:	19000003 	ldbu	r4,0(r3)
    3284:	2100020c 	andi	r4,r4,8
    3288:	203fec26 	beq	r4,zero,323c <__svfscanf_r+0x4c>
    328c:	80c00117 	ldw	r3,4(r16)
    3290:	29800044 	addi	r6,r5,1
    3294:	8c400044 	addi	r17,r17,1
    3298:	18ffffc4 	addi	r3,r3,-1
    329c:	81800015 	stw	r6,0(r16)
    32a0:	80c00115 	stw	r3,4(r16)
    32a4:	00fff216 	blt	zero,r3,3270 <__svfscanf_r+0x80>
    32a8:	b009883a 	mov	r4,r22
    32ac:	800b883a 	mov	r5,r16
    32b0:	00097a80 	call	97a8 <__srefill_r>
    32b4:	103fee26 	beq	r2,zero,3270 <__svfscanf_r+0x80>
    32b8:	a1000007 	ldb	r4,0(r20)
    32bc:	d9000115 	stw	r4,4(sp)
    32c0:	203fe11e 	bne	r4,zero,3248 <__svfscanf_r+0x58>
    32c4:	d880a217 	ldw	r2,648(sp)
    32c8:	dfc0b117 	ldw	ra,708(sp)
    32cc:	df00b017 	ldw	fp,704(sp)
    32d0:	ddc0af17 	ldw	r23,700(sp)
    32d4:	dd80ae17 	ldw	r22,696(sp)
    32d8:	dd40ad17 	ldw	r21,692(sp)
    32dc:	dd00ac17 	ldw	r20,688(sp)
    32e0:	dcc0ab17 	ldw	r19,684(sp)
    32e4:	dc80aa17 	ldw	r18,680(sp)
    32e8:	dc40a917 	ldw	r17,676(sp)
    32ec:	dc00a817 	ldw	r16,672(sp)
    32f0:	dec0b204 	addi	sp,sp,712
    32f4:	f800283a 	ret
    32f8:	00800944 	movi	r2,37
    32fc:	20801626 	beq	r4,r2,3358 <__svfscanf_r+0x168>
    3300:	80800117 	ldw	r2,4(r16)
    3304:	00800b0e 	bge	zero,r2,3334 <__svfscanf_r+0x144>
    3308:	81000017 	ldw	r4,0(r16)
    330c:	a0ffffc7 	ldb	r3,-1(r20)
    3310:	20800003 	ldbu	r2,0(r4)
    3314:	10ffeb1e 	bne	r2,r3,32c4 <__svfscanf_r+0xd4>
    3318:	80c00117 	ldw	r3,4(r16)
    331c:	21800044 	addi	r6,r4,1
    3320:	8c400044 	addi	r17,r17,1
    3324:	18ffffc4 	addi	r3,r3,-1
    3328:	80c00115 	stw	r3,4(r16)
    332c:	81800015 	stw	r6,0(r16)
    3330:	003fc206 	br	323c <__svfscanf_r+0x4c>
    3334:	b009883a 	mov	r4,r22
    3338:	800b883a 	mov	r5,r16
    333c:	00097a80 	call	97a8 <__srefill_r>
    3340:	103ff126 	beq	r2,zero,3308 <__svfscanf_r+0x118>
    3344:	d900a217 	ldw	r4,648(sp)
    3348:	2004c91e 	bne	r4,zero,4670 <__svfscanf_r+0x1480>
    334c:	00bfffc4 	movi	r2,-1
    3350:	d880a215 	stw	r2,648(sp)
    3354:	003fdb06 	br	32c4 <__svfscanf_r+0xd4>
    3358:	d800a315 	stw	zero,652(sp)
    335c:	0027883a 	mov	r19,zero
    3360:	a0c00003 	ldbu	r3,0(r20)
    3364:	00801e04 	movi	r2,120
    3368:	a5000044 	addi	r20,r20,1
    336c:	19403fcc 	andi	r5,r3,255
    3370:	2940201c 	xori	r5,r5,128
    3374:	297fe004 	addi	r5,r5,-128
    3378:	10c08036 	bltu	r2,r3,357c <__svfscanf_r+0x38c>
    337c:	18c5883a 	add	r2,r3,r3
    3380:	1085883a 	add	r2,r2,r2
    3384:	00c00034 	movhi	r3,0
    3388:	18cce604 	addi	r3,r3,13208
    338c:	10c5883a 	add	r2,r2,r3
    3390:	11000017 	ldw	r4,0(r2)
    3394:	2000683a 	jmp	r4
    3398:	0000334c 	andi	zero,zero,205
    339c:	0000357c 	xorhi	zero,zero,213
    33a0:	0000357c 	xorhi	zero,zero,213
    33a4:	0000357c 	xorhi	zero,zero,213
    33a8:	0000357c 	xorhi	zero,zero,213
    33ac:	0000357c 	xorhi	zero,zero,213
    33b0:	0000357c 	xorhi	zero,zero,213
    33b4:	0000357c 	xorhi	zero,zero,213
    33b8:	0000357c 	xorhi	zero,zero,213
    33bc:	0000357c 	xorhi	zero,zero,213
    33c0:	0000357c 	xorhi	zero,zero,213
    33c4:	0000357c 	xorhi	zero,zero,213
    33c8:	0000357c 	xorhi	zero,zero,213
    33cc:	0000357c 	xorhi	zero,zero,213
    33d0:	0000357c 	xorhi	zero,zero,213
    33d4:	0000357c 	xorhi	zero,zero,213
    33d8:	0000357c 	xorhi	zero,zero,213
    33dc:	0000357c 	xorhi	zero,zero,213
    33e0:	0000357c 	xorhi	zero,zero,213
    33e4:	0000357c 	xorhi	zero,zero,213
    33e8:	0000357c 	xorhi	zero,zero,213
    33ec:	0000357c 	xorhi	zero,zero,213
    33f0:	0000357c 	xorhi	zero,zero,213
    33f4:	0000357c 	xorhi	zero,zero,213
    33f8:	0000357c 	xorhi	zero,zero,213
    33fc:	0000357c 	xorhi	zero,zero,213
    3400:	0000357c 	xorhi	zero,zero,213
    3404:	0000357c 	xorhi	zero,zero,213
    3408:	0000357c 	xorhi	zero,zero,213
    340c:	0000357c 	xorhi	zero,zero,213
    3410:	0000357c 	xorhi	zero,zero,213
    3414:	0000357c 	xorhi	zero,zero,213
    3418:	0000357c 	xorhi	zero,zero,213
    341c:	0000357c 	xorhi	zero,zero,213
    3420:	0000357c 	xorhi	zero,zero,213
    3424:	0000357c 	xorhi	zero,zero,213
    3428:	0000357c 	xorhi	zero,zero,213
    342c:	00003300 	call	330 <main+0x17c>
    3430:	0000357c 	xorhi	zero,zero,213
    3434:	0000357c 	xorhi	zero,zero,213
    3438:	0000357c 	xorhi	zero,zero,213
    343c:	0000357c 	xorhi	zero,zero,213
    3440:	000045a0 	cmpeqi	zero,zero,278
    3444:	0000357c 	xorhi	zero,zero,213
    3448:	0000357c 	xorhi	zero,zero,213
    344c:	0000357c 	xorhi	zero,zero,213
    3450:	0000357c 	xorhi	zero,zero,213
    3454:	0000357c 	xorhi	zero,zero,213
    3458:	00003f9c 	xori	zero,zero,254
    345c:	00003f9c 	xori	zero,zero,254
    3460:	00003f9c 	xori	zero,zero,254
    3464:	00003f9c 	xori	zero,zero,254
    3468:	00003f9c 	xori	zero,zero,254
    346c:	00003f9c 	xori	zero,zero,254
    3470:	00003f9c 	xori	zero,zero,254
    3474:	00003f9c 	xori	zero,zero,254
    3478:	00003f9c 	xori	zero,zero,254
    347c:	00003f9c 	xori	zero,zero,254
    3480:	0000357c 	xorhi	zero,zero,213
    3484:	0000357c 	xorhi	zero,zero,213
    3488:	0000357c 	xorhi	zero,zero,213
    348c:	0000357c 	xorhi	zero,zero,213
    3490:	0000357c 	xorhi	zero,zero,213
    3494:	0000357c 	xorhi	zero,zero,213
    3498:	0000357c 	xorhi	zero,zero,213
    349c:	0000357c 	xorhi	zero,zero,213
    34a0:	0000357c 	xorhi	zero,zero,213
    34a4:	0000357c 	xorhi	zero,zero,213
    34a8:	0000471c 	xori	zero,zero,284
    34ac:	00004714 	movui	zero,284
    34b0:	0000357c 	xorhi	zero,zero,213
    34b4:	00004714 	movui	zero,284
    34b8:	0000357c 	xorhi	zero,zero,213
    34bc:	0000357c 	xorhi	zero,zero,213
    34c0:	0000357c 	xorhi	zero,zero,213
    34c4:	0000357c 	xorhi	zero,zero,213
    34c8:	000047ac 	andhi	zero,zero,286
    34cc:	0000357c 	xorhi	zero,zero,213
    34d0:	0000357c 	xorhi	zero,zero,213
    34d4:	00004764 	muli	zero,zero,285
    34d8:	0000357c 	xorhi	zero,zero,213
    34dc:	0000357c 	xorhi	zero,zero,213
    34e0:	0000357c 	xorhi	zero,zero,213
    34e4:	0000357c 	xorhi	zero,zero,213
    34e8:	0000357c 	xorhi	zero,zero,213
    34ec:	0000357c 	xorhi	zero,zero,213
    34f0:	0000357c 	xorhi	zero,zero,213
    34f4:	0000357c 	xorhi	zero,zero,213
    34f8:	000045a8 	cmpgeui	zero,zero,278
    34fc:	0000357c 	xorhi	zero,zero,213
    3500:	0000357c 	xorhi	zero,zero,213
    3504:	00004748 	cmpgei	zero,zero,285
    3508:	0000357c 	xorhi	zero,zero,213
    350c:	0000357c 	xorhi	zero,zero,213
    3510:	0000357c 	xorhi	zero,zero,213
    3514:	0000357c 	xorhi	zero,zero,213
    3518:	0000357c 	xorhi	zero,zero,213
    351c:	0000357c 	xorhi	zero,zero,213
    3520:	0000357c 	xorhi	zero,zero,213
    3524:	0000473c 	xorhi	zero,zero,284
    3528:	00004720 	cmpeqi	zero,zero,284
    352c:	00004714 	movui	zero,284
    3530:	00004714 	movui	zero,284
    3534:	00004714 	movui	zero,284
    3538:	0000470c 	andi	zero,zero,284
    353c:	00004800 	call	480 <main+0x2cc>
    3540:	0000357c 	xorhi	zero,zero,213
    3544:	0000357c 	xorhi	zero,zero,213
    3548:	000047ec 	andhi	zero,zero,287
    354c:	0000357c 	xorhi	zero,zero,213
    3550:	00004784 	movi	zero,286
    3554:	00004768 	cmpgeui	zero,zero,285
    3558:	000047bc 	xorhi	zero,zero,286
    355c:	0000357c 	xorhi	zero,zero,213
    3560:	0000357c 	xorhi	zero,zero,213
    3564:	000047b4 	movhi	zero,286
    3568:	0000357c 	xorhi	zero,zero,213
    356c:	00003aec 	andhi	zero,zero,235
    3570:	0000357c 	xorhi	zero,zero,213
    3574:	0000357c 	xorhi	zero,zero,213
    3578:	000045a8 	cmpgeui	zero,zero,278
    357c:	2987883a 	add	r3,r5,r6
    3580:	18800003 	ldbu	r2,0(r3)
    3584:	1080004c 	andi	r2,r2,1
    3588:	1005003a 	cmpeq	r2,r2,zero
    358c:	10002c26 	beq	r2,zero,3640 <__svfscanf_r+0x450>
    3590:	01000074 	movhi	r4,1
    3594:	212d3b04 	addi	r4,r4,-19220
    3598:	00800284 	movi	r2,10
    359c:	d900a015 	stw	r4,640(sp)
    35a0:	054000c4 	movi	r21,3
    35a4:	d880a115 	stw	r2,644(sp)
    35a8:	80c00117 	ldw	r3,4(r16)
    35ac:	00c14a0e 	bge	zero,r3,3ad8 <__svfscanf_r+0x8e8>
    35b0:	9880100c 	andi	r2,r19,64
    35b4:	10001326 	beq	r2,zero,3604 <__svfscanf_r+0x414>
    35b8:	00800104 	movi	r2,4
    35bc:	157f1f36 	bltu	r2,r21,323c <__svfscanf_r+0x4c>
    35c0:	ad45883a 	add	r2,r21,r21
    35c4:	1085883a 	add	r2,r2,r2
    35c8:	00c00034 	movhi	r3,0
    35cc:	18cd7704 	addi	r3,r3,13788
    35d0:	10c5883a 	add	r2,r2,r3
    35d4:	11000017 	ldw	r4,0(r2)
    35d8:	2000683a 	jmp	r4
    35dc:	00003648 	cmpgei	zero,zero,217
    35e0:	00003754 	movui	zero,221
    35e4:	000037c8 	cmpgei	zero,zero,223
    35e8:	00003ab4 	movhi	zero,234
    35ec:	00003900 	call	390 <main+0x1dc>
    35f0:	b009883a 	mov	r4,r22
    35f4:	800b883a 	mov	r5,r16
    35f8:	00097a80 	call	97a8 <__srefill_r>
    35fc:	103f511e 	bne	r2,zero,3344 <__svfscanf_r+0x154>
    3600:	8c400044 	addi	r17,r17,1
    3604:	81400017 	ldw	r5,0(r16)
    3608:	90800017 	ldw	r2,0(r18)
    360c:	28c00003 	ldbu	r3,0(r5)
    3610:	1887883a 	add	r3,r3,r2
    3614:	19000003 	ldbu	r4,0(r3)
    3618:	2100020c 	andi	r4,r4,8
    361c:	203fe626 	beq	r4,zero,35b8 <__svfscanf_r+0x3c8>
    3620:	80c00117 	ldw	r3,4(r16)
    3624:	18ffffc4 	addi	r3,r3,-1
    3628:	80c00115 	stw	r3,4(r16)
    362c:	00fff00e 	bge	zero,r3,35f0 <__svfscanf_r+0x400>
    3630:	29800044 	addi	r6,r5,1
    3634:	8c400044 	addi	r17,r17,1
    3638:	81800015 	stw	r6,0(r16)
    363c:	003ff106 	br	3604 <__svfscanf_r+0x414>
    3640:	9cc00054 	ori	r19,r19,1
    3644:	003fd206 	br	3590 <__svfscanf_r+0x3a0>
    3648:	d8c0a317 	ldw	r3,652(sp)
    364c:	1800021e 	bne	r3,zero,3658 <__svfscanf_r+0x468>
    3650:	01000044 	movi	r4,1
    3654:	d900a315 	stw	r4,652(sp)
    3658:	9880004c 	andi	r2,r19,1
    365c:	1005003a 	cmpeq	r2,r2,zero
    3660:	1003d91e 	bne	r2,zero,45c8 <__svfscanf_r+0x13d8>
    3664:	9d40040c 	andi	r21,r19,16
    3668:	a839003a 	cmpeq	fp,r21,zero
    366c:	e0042526 	beq	fp,zero,4704 <__svfscanf_r+0x1514>
    3670:	d880a417 	ldw	r2,656(sp)
    3674:	14c00017 	ldw	r19,0(r2)
    3678:	10800104 	addi	r2,r2,4
    367c:	d880a415 	stw	r2,656(sp)
    3680:	d8c0a317 	ldw	r3,652(sp)
    3684:	18041a26 	beq	r3,zero,46f0 <__svfscanf_r+0x1500>
    3688:	01000074 	movhi	r4,1
    368c:	21117604 	addi	r4,r4,17880
    3690:	20800017 	ldw	r2,0(r4)
    3694:	103f2b26 	beq	r2,zero,3344 <__svfscanf_r+0x154>
    3698:	d8804404 	addi	r2,sp,272
    369c:	0025883a 	mov	r18,zero
    36a0:	d880a615 	stw	r2,664(sp)
    36a4:	05ffffc4 	movi	r23,-1
    36a8:	80800017 	ldw	r2,0(r16)
    36ac:	80c00117 	ldw	r3,4(r16)
    36b0:	d900a617 	ldw	r4,664(sp)
    36b4:	12000003 	ldbu	r8,0(r2)
    36b8:	18ffffc4 	addi	r3,r3,-1
    36bc:	11800044 	addi	r6,r2,1
    36c0:	248f883a 	add	r7,r4,r18
    36c4:	80c00115 	stw	r3,4(r16)
    36c8:	81800015 	stw	r6,0(r16)
    36cc:	3a000005 	stb	r8,0(r7)
    36d0:	d9000204 	addi	r4,sp,8
    36d4:	000b883a 	mov	r5,zero
    36d8:	01800204 	movi	r6,8
    36dc:	00081280 	call	8128 <memset>
    36e0:	d980a617 	ldw	r6,664(sp)
    36e4:	94800044 	addi	r18,r18,1
    36e8:	d8800204 	addi	r2,sp,8
    36ec:	b009883a 	mov	r4,r22
    36f0:	980b883a 	mov	r5,r19
    36f4:	900f883a 	mov	r7,r18
    36f8:	d8800015 	stw	r2,0(sp)
    36fc:	0007dc40 	call	7dc4 <_mbrtowc_r>
    3700:	1007883a 	mov	r3,r2
    3704:	15ff0f26 	beq	r2,r23,3344 <__svfscanf_r+0x154>
    3708:	1003f11e 	bne	r2,zero,46d0 <__svfscanf_r+0x14e0>
    370c:	a800011e 	bne	r21,zero,3714 <__svfscanf_r+0x524>
    3710:	98000015 	stw	zero,0(r19)
    3714:	d8c0a317 	ldw	r3,652(sp)
    3718:	8ca3883a 	add	r17,r17,r18
    371c:	18ffffc4 	addi	r3,r3,-1
    3720:	d8c0a315 	stw	r3,652(sp)
    3724:	e0000126 	beq	fp,zero,372c <__svfscanf_r+0x53c>
    3728:	9cc00104 	addi	r19,r19,4
    372c:	0025883a 	mov	r18,zero
    3730:	80c00117 	ldw	r3,4(r16)
    3734:	00c3e90e 	bge	zero,r3,46dc <__svfscanf_r+0x14ec>
    3738:	d900a317 	ldw	r4,652(sp)
    373c:	2003ec26 	beq	r4,zero,46f0 <__svfscanf_r+0x1500>
    3740:	00c00074 	movhi	r3,1
    3744:	18d17604 	addi	r3,r3,17880
    3748:	18800017 	ldw	r2,0(r3)
    374c:	90bfd61e 	bne	r18,r2,36a8 <__svfscanf_r+0x4b8>
    3750:	003efc06 	br	3344 <__svfscanf_r+0x154>
    3754:	d880a317 	ldw	r2,652(sp)
    3758:	1000021e 	bne	r2,zero,3764 <__svfscanf_r+0x574>
    375c:	00ffffc4 	movi	r3,-1
    3760:	d8c0a315 	stw	r3,652(sp)
    3764:	9880040c 	andi	r2,r19,16
    3768:	10036526 	beq	r2,zero,4500 <__svfscanf_r+0x1310>
    376c:	0027883a 	mov	r19,zero
    3770:	dd400404 	addi	r21,sp,16
    3774:	81000017 	ldw	r4,0(r16)
    3778:	20800003 	ldbu	r2,0(r4)
    377c:	a885883a 	add	r2,r21,r2
    3780:	10c00007 	ldb	r3,0(r2)
    3784:	1803be26 	beq	r3,zero,4680 <__svfscanf_r+0x1490>
    3788:	80c00117 	ldw	r3,4(r16)
    378c:	21800044 	addi	r6,r4,1
    3790:	d900a317 	ldw	r4,652(sp)
    3794:	18ffffc4 	addi	r3,r3,-1
    3798:	9cc00044 	addi	r19,r19,1
    379c:	81800015 	stw	r6,0(r16)
    37a0:	80c00115 	stw	r3,4(r16)
    37a4:	24c3b626 	beq	r4,r19,4680 <__svfscanf_r+0x1490>
    37a8:	00fff216 	blt	zero,r3,3774 <__svfscanf_r+0x584>
    37ac:	b009883a 	mov	r4,r22
    37b0:	800b883a 	mov	r5,r16
    37b4:	00097a80 	call	97a8 <__srefill_r>
    37b8:	103fee26 	beq	r2,zero,3774 <__svfscanf_r+0x584>
    37bc:	983ee126 	beq	r19,zero,3344 <__svfscanf_r+0x154>
    37c0:	8ce3883a 	add	r17,r17,r19
    37c4:	003e9d06 	br	323c <__svfscanf_r+0x4c>
    37c8:	d900a317 	ldw	r4,652(sp)
    37cc:	2000021e 	bne	r4,zero,37d8 <__svfscanf_r+0x5e8>
    37d0:	00bfffc4 	movi	r2,-1
    37d4:	d880a315 	stw	r2,652(sp)
    37d8:	9880004c 	andi	r2,r19,1
    37dc:	1005003a 	cmpeq	r2,r2,zero
    37e0:	1001f41e 	bne	r2,zero,3fb4 <__svfscanf_r+0xdc4>
    37e4:	9dc0040c 	andi	r23,r19,16
    37e8:	b807003a 	cmpeq	r3,r23,zero
    37ec:	d8c0a515 	stw	r3,660(sp)
    37f0:	1803b21e 	bne	r3,zero,46bc <__svfscanf_r+0x14cc>
    37f4:	dd400104 	addi	r21,sp,4
    37f8:	0027883a 	mov	r19,zero
    37fc:	073fffc4 	movi	fp,-1
    3800:	81400017 	ldw	r5,0(r16)
    3804:	90800017 	ldw	r2,0(r18)
    3808:	29c00003 	ldbu	r7,0(r5)
    380c:	38c03fcc 	andi	r3,r7,255
    3810:	1887883a 	add	r3,r3,r2
    3814:	19000003 	ldbu	r4,0(r3)
    3818:	2100020c 	andi	r4,r4,8
    381c:	2000321e 	bne	r4,zero,38e8 <__svfscanf_r+0x6f8>
    3820:	d8c0a317 	ldw	r3,652(sp)
    3824:	18003026 	beq	r3,zero,38e8 <__svfscanf_r+0x6f8>
    3828:	00800074 	movhi	r2,1
    382c:	10917604 	addi	r2,r2,17880
    3830:	10c00017 	ldw	r3,0(r2)
    3834:	98fec326 	beq	r19,r3,3344 <__svfscanf_r+0x154>
    3838:	d8c04404 	addi	r3,sp,272
    383c:	80800117 	ldw	r2,4(r16)
    3840:	d8c0a615 	stw	r3,664(sp)
    3844:	d900a617 	ldw	r4,664(sp)
    3848:	10ffffc4 	addi	r3,r2,-1
    384c:	29800044 	addi	r6,r5,1
    3850:	80c00115 	stw	r3,4(r16)
    3854:	24c5883a 	add	r2,r4,r19
    3858:	81800015 	stw	r6,0(r16)
    385c:	d9000204 	addi	r4,sp,8
    3860:	000b883a 	mov	r5,zero
    3864:	01800204 	movi	r6,8
    3868:	11c00005 	stb	r7,0(r2)
    386c:	00081280 	call	8128 <memset>
    3870:	d980a617 	ldw	r6,664(sp)
    3874:	9cc00044 	addi	r19,r19,1
    3878:	d8800204 	addi	r2,sp,8
    387c:	b009883a 	mov	r4,r22
    3880:	a80b883a 	mov	r5,r21
    3884:	980f883a 	mov	r7,r19
    3888:	d8800015 	stw	r2,0(sp)
    388c:	0007dc40 	call	7dc4 <_mbrtowc_r>
    3890:	1007883a 	mov	r3,r2
    3894:	173eab26 	beq	r2,fp,3344 <__svfscanf_r+0x154>
    3898:	1003851e 	bne	r2,zero,46b0 <__svfscanf_r+0x14c0>
    389c:	a8000015 	stw	zero,0(r21)
    38a0:	a9000017 	ldw	r4,0(r21)
    38a4:	00074000 	call	7400 <iswspace>
    38a8:	1003781e 	bne	r2,zero,468c <__svfscanf_r+0x149c>
    38ac:	d900a317 	ldw	r4,652(sp)
    38b0:	d880a517 	ldw	r2,660(sp)
    38b4:	8ce3883a 	add	r17,r17,r19
    38b8:	213fffc4 	addi	r4,r4,-1
    38bc:	d900a315 	stw	r4,652(sp)
    38c0:	10000126 	beq	r2,zero,38c8 <__svfscanf_r+0x6d8>
    38c4:	ad400104 	addi	r21,r21,4
    38c8:	0027883a 	mov	r19,zero
    38cc:	80c00117 	ldw	r3,4(r16)
    38d0:	00ffcb16 	blt	zero,r3,3800 <__svfscanf_r+0x610>
    38d4:	b009883a 	mov	r4,r22
    38d8:	800b883a 	mov	r5,r16
    38dc:	00097a80 	call	97a8 <__srefill_r>
    38e0:	103fc726 	beq	r2,zero,3800 <__svfscanf_r+0x610>
    38e4:	983e971e 	bne	r19,zero,3344 <__svfscanf_r+0x154>
    38e8:	b83e541e 	bne	r23,zero,323c <__svfscanf_r+0x4c>
    38ec:	d900a217 	ldw	r4,648(sp)
    38f0:	a8000015 	stw	zero,0(r21)
    38f4:	21000044 	addi	r4,r4,1
    38f8:	d900a215 	stw	r4,648(sp)
    38fc:	003e4f06 	br	323c <__svfscanf_r+0x4c>
    3900:	d900a317 	ldw	r4,652(sp)
    3904:	00805704 	movi	r2,348
    3908:	20ffffc4 	addi	r3,r4,-1
    390c:	10c1ed2e 	bgeu	r2,r3,40c4 <__svfscanf_r+0xed4>
    3910:	00805744 	movi	r2,349
    3914:	21bfa8c4 	addi	r6,r4,-349
    3918:	9d41e014 	ori	r21,r19,1920
    391c:	d880a315 	stw	r2,652(sp)
    3920:	d8c04404 	addi	r3,sp,272
    3924:	d8c0a615 	stw	r3,664(sp)
    3928:	182f883a 	mov	r23,r3
    392c:	d8009f15 	stw	zero,636(sp)
    3930:	d8009e15 	stw	zero,632(sp)
    3934:	d8009d15 	stw	zero,628(sp)
    3938:	d8009c15 	stw	zero,624(sp)
    393c:	0039883a 	mov	fp,zero
    3940:	0025883a 	mov	r18,zero
    3944:	80800017 	ldw	r2,0(r16)
    3948:	11400003 	ldbu	r5,0(r2)
    394c:	00801384 	movi	r2,78
    3950:	28fff544 	addi	r3,r5,-43
    3954:	18c03fcc 	andi	r3,r3,255
    3958:	10c07d36 	bltu	r2,r3,3b50 <__svfscanf_r+0x960>
    395c:	18c5883a 	add	r2,r3,r3
    3960:	1085883a 	add	r2,r2,r2
    3964:	00c00034 	movhi	r3,0
    3968:	18ce5e04 	addi	r3,r3,14712
    396c:	10c5883a 	add	r2,r2,r3
    3970:	11000017 	ldw	r4,0(r2)
    3974:	2000683a 	jmp	r4
    3978:	00003b08 	cmpgei	zero,zero,236
    397c:	00003b50 	cmplti	zero,zero,237
    3980:	00003b08 	cmpgei	zero,zero,236
    3984:	00003c9c 	xori	zero,zero,242
    3988:	00003b50 	cmplti	zero,zero,237
    398c:	00003cd4 	movui	zero,243
    3990:	00003d08 	cmpgei	zero,zero,244
    3994:	00003d08 	cmpgei	zero,zero,244
    3998:	00003d08 	cmpgei	zero,zero,244
    399c:	00003d08 	cmpgei	zero,zero,244
    39a0:	00003d08 	cmpgei	zero,zero,244
    39a4:	00003d08 	cmpgei	zero,zero,244
    39a8:	00003d08 	cmpgei	zero,zero,244
    39ac:	00003d08 	cmpgei	zero,zero,244
    39b0:	00003d08 	cmpgei	zero,zero,244
    39b4:	00003b50 	cmplti	zero,zero,237
    39b8:	00003b50 	cmplti	zero,zero,237
    39bc:	00003b50 	cmplti	zero,zero,237
    39c0:	00003b50 	cmplti	zero,zero,237
    39c4:	00003b50 	cmplti	zero,zero,237
    39c8:	00003b50 	cmplti	zero,zero,237
    39cc:	00003b50 	cmplti	zero,zero,237
    39d0:	00003d28 	cmpgeui	zero,zero,244
    39d4:	00003b50 	cmplti	zero,zero,237
    39d8:	00003b50 	cmplti	zero,zero,237
    39dc:	00003b50 	cmplti	zero,zero,237
    39e0:	00003d38 	rdprs	zero,zero,244
    39e4:	00003dd4 	movui	zero,247
    39e8:	00003b50 	cmplti	zero,zero,237
    39ec:	00003b50 	cmplti	zero,zero,237
    39f0:	00003df0 	cmpltui	zero,zero,247
    39f4:	00003b50 	cmplti	zero,zero,237
    39f8:	00003b50 	cmplti	zero,zero,237
    39fc:	00003b50 	cmplti	zero,zero,237
    3a00:	00003b50 	cmplti	zero,zero,237
    3a04:	00003e1c 	xori	zero,zero,248
    3a08:	00003b50 	cmplti	zero,zero,237
    3a0c:	00003b50 	cmplti	zero,zero,237
    3a10:	00003b50 	cmplti	zero,zero,237
    3a14:	00003b50 	cmplti	zero,zero,237
    3a18:	00003b50 	cmplti	zero,zero,237
    3a1c:	00003e70 	cmpltui	zero,zero,249
    3a20:	00003b50 	cmplti	zero,zero,237
    3a24:	00003b50 	cmplti	zero,zero,237
    3a28:	00003b50 	cmplti	zero,zero,237
    3a2c:	00003b50 	cmplti	zero,zero,237
    3a30:	00003f80 	call	3f8 <main+0x244>
    3a34:	00003b50 	cmplti	zero,zero,237
    3a38:	00003b50 	cmplti	zero,zero,237
    3a3c:	00003b50 	cmplti	zero,zero,237
    3a40:	00003b50 	cmplti	zero,zero,237
    3a44:	00003b50 	cmplti	zero,zero,237
    3a48:	00003b50 	cmplti	zero,zero,237
    3a4c:	00003b50 	cmplti	zero,zero,237
    3a50:	00003d28 	cmpgeui	zero,zero,244
    3a54:	00003b50 	cmplti	zero,zero,237
    3a58:	00003b50 	cmplti	zero,zero,237
    3a5c:	00003b50 	cmplti	zero,zero,237
    3a60:	00003d38 	rdprs	zero,zero,244
    3a64:	00003dd4 	movui	zero,247
    3a68:	00003b50 	cmplti	zero,zero,237
    3a6c:	00003b50 	cmplti	zero,zero,237
    3a70:	00003df0 	cmpltui	zero,zero,247
    3a74:	00003b50 	cmplti	zero,zero,237
    3a78:	00003b50 	cmplti	zero,zero,237
    3a7c:	00003b50 	cmplti	zero,zero,237
    3a80:	00003b50 	cmplti	zero,zero,237
    3a84:	00003e1c 	xori	zero,zero,248
    3a88:	00003b50 	cmplti	zero,zero,237
    3a8c:	00003b50 	cmplti	zero,zero,237
    3a90:	00003b50 	cmplti	zero,zero,237
    3a94:	00003b50 	cmplti	zero,zero,237
    3a98:	00003b50 	cmplti	zero,zero,237
    3a9c:	00003e70 	cmpltui	zero,zero,249
    3aa0:	00003b50 	cmplti	zero,zero,237
    3aa4:	00003b50 	cmplti	zero,zero,237
    3aa8:	00003b50 	cmplti	zero,zero,237
    3aac:	00003b50 	cmplti	zero,zero,237
    3ab0:	00003f80 	call	3f8 <main+0x244>
    3ab4:	d900a317 	ldw	r4,652(sp)
    3ab8:	00805704 	movi	r2,348
    3abc:	20ffffc4 	addi	r3,r4,-1
    3ac0:	10c18c2e 	bgeu	r2,r3,40f4 <__svfscanf_r+0xf04>
    3ac4:	00805744 	movi	r2,349
    3ac8:	257fa8c4 	addi	r21,r4,-349
    3acc:	9c836014 	ori	r18,r19,3456
    3ad0:	d880a315 	stw	r2,652(sp)
    3ad4:	0001a106 	br	415c <__svfscanf_r+0xf6c>
    3ad8:	b009883a 	mov	r4,r22
    3adc:	800b883a 	mov	r5,r16
    3ae0:	00097a80 	call	97a8 <__srefill_r>
    3ae4:	103eb226 	beq	r2,zero,35b0 <__svfscanf_r+0x3c0>
    3ae8:	003e1606 	br	3344 <__svfscanf_r+0x154>
    3aec:	01000284 	movi	r4,10
    3af0:	00800074 	movhi	r2,1
    3af4:	10ae9b04 	addi	r2,r2,-17812
    3af8:	054000c4 	movi	r21,3
    3afc:	d900a115 	stw	r4,644(sp)
    3b00:	d880a015 	stw	r2,640(sp)
    3b04:	003ea806 	br	35a8 <__svfscanf_r+0x3b8>
    3b08:	a880200c 	andi	r2,r21,128
    3b0c:	10001026 	beq	r2,zero,3b50 <__svfscanf_r+0x960>
    3b10:	00bfdfc4 	movi	r2,-129
    3b14:	a8aa703a 	and	r21,r21,r2
    3b18:	b9400005 	stb	r5,0(r23)
    3b1c:	bdc00044 	addi	r23,r23,1
    3b20:	80c00117 	ldw	r3,4(r16)
    3b24:	8c400044 	addi	r17,r17,1
    3b28:	18bfffc4 	addi	r2,r3,-1
    3b2c:	80800115 	stw	r2,4(r16)
    3b30:	0080610e 	bge	zero,r2,3cb8 <__svfscanf_r+0xac8>
    3b34:	80800017 	ldw	r2,0(r16)
    3b38:	10800044 	addi	r2,r2,1
    3b3c:	80800015 	stw	r2,0(r16)
    3b40:	d880a317 	ldw	r2,652(sp)
    3b44:	10bfffc4 	addi	r2,r2,-1
    3b48:	d880a315 	stw	r2,652(sp)
    3b4c:	103f7d1e 	bne	r2,zero,3944 <__svfscanf_r+0x754>
    3b50:	d8c09e17 	ldw	r3,632(sp)
    3b54:	18000226 	beq	r3,zero,3b60 <__svfscanf_r+0x970>
    3b58:	00bfbfc4 	movi	r2,-257
    3b5c:	a8aa703a 	and	r21,r21,r2
    3b60:	90ffffc4 	addi	r3,r18,-1
    3b64:	00800044 	movi	r2,1
    3b68:	10c0cd2e 	bgeu	r2,r3,3ea0 <__svfscanf_r+0xcb0>
    3b6c:	e1003fcc 	andi	r4,fp,255
    3b70:	2100201c 	xori	r4,r4,128
    3b74:	213fe004 	addi	r4,r4,-128
    3b78:	20ffffc4 	addi	r3,r4,-1
    3b7c:	00800184 	movi	r2,6
    3b80:	10c01736 	bltu	r2,r3,3be0 <__svfscanf_r+0x9f0>
    3b84:	00c00084 	movi	r3,2
    3b88:	1900880e 	bge	r3,r4,3dac <__svfscanf_r+0xbbc>
    3b8c:	008000c4 	movi	r2,3
    3b90:	1100130e 	bge	r2,r4,3be0 <__svfscanf_r+0x9f0>
    3b94:	e4ffffc4 	addi	r19,fp,-1
    3b98:	b825883a 	mov	r18,r23
    3b9c:	94bfffc4 	addi	r18,r18,-1
    3ba0:	91400007 	ldb	r5,0(r18)
    3ba4:	b009883a 	mov	r4,r22
    3ba8:	800d883a 	mov	r6,r16
    3bac:	000c08c0 	call	c08c <_ungetc_r>
    3bb0:	9cffffc4 	addi	r19,r19,-1
    3bb4:	98c03fcc 	andi	r3,r19,255
    3bb8:	18c0201c 	xori	r3,r3,128
    3bbc:	18ffe004 	addi	r3,r3,-128
    3bc0:	00800084 	movi	r2,2
    3bc4:	18bff51e 	bne	r3,r2,3b9c <__svfscanf_r+0x9ac>
    3bc8:	e0bfff04 	addi	r2,fp,-4
    3bcc:	10803fcc 	andi	r2,r2,255
    3bd0:	b887c83a 	sub	r3,r23,r2
    3bd4:	8885c83a 	sub	r2,r17,r2
    3bd8:	147fffc4 	addi	r17,r2,-1
    3bdc:	1dffffc4 	addi	r23,r3,-1
    3be0:	a880400c 	andi	r2,r21,256
    3be4:	10001226 	beq	r2,zero,3c30 <__svfscanf_r+0xa40>
    3be8:	a881000c 	andi	r2,r21,1024
    3bec:	1000651e 	bne	r2,zero,3d84 <__svfscanf_r+0xb94>
    3bf0:	bdffffc4 	addi	r23,r23,-1
    3bf4:	b9400007 	ldb	r5,0(r23)
    3bf8:	00801944 	movi	r2,101
    3bfc:	8c7fffc4 	addi	r17,r17,-1
    3c00:	28800826 	beq	r5,r2,3c24 <__svfscanf_r+0xa34>
    3c04:	00801144 	movi	r2,69
    3c08:	28800626 	beq	r5,r2,3c24 <__svfscanf_r+0xa34>
    3c0c:	bdffffc4 	addi	r23,r23,-1
    3c10:	b009883a 	mov	r4,r22
    3c14:	800d883a 	mov	r6,r16
    3c18:	000c08c0 	call	c08c <_ungetc_r>
    3c1c:	b9400007 	ldb	r5,0(r23)
    3c20:	8c7fffc4 	addi	r17,r17,-1
    3c24:	b009883a 	mov	r4,r22
    3c28:	800d883a 	mov	r6,r16
    3c2c:	000c08c0 	call	c08c <_ungetc_r>
    3c30:	a880040c 	andi	r2,r21,16
    3c34:	103d811e 	bne	r2,zero,323c <__svfscanf_r+0x4c>
    3c38:	a8c1800c 	andi	r3,r21,1536
    3c3c:	00810004 	movi	r2,1024
    3c40:	b8000005 	stb	zero,0(r23)
    3c44:	1880bb26 	beq	r3,r2,3f34 <__svfscanf_r+0xd44>
    3c48:	d8809d17 	ldw	r2,628(sp)
    3c4c:	1000a61e 	bne	r2,zero,3ee8 <__svfscanf_r+0xcf8>
    3c50:	d940a617 	ldw	r5,664(sp)
    3c54:	b009883a 	mov	r4,r22
    3c58:	000d883a 	mov	r6,zero
    3c5c:	0009ec80 	call	9ec8 <_strtod_r>
    3c60:	a900004c 	andi	r4,r21,1
    3c64:	2009003a 	cmpeq	r4,r4,zero
    3c68:	1025883a 	mov	r18,r2
    3c6c:	1827883a 	mov	r19,r3
    3c70:	2000951e 	bne	r4,zero,3ec8 <__svfscanf_r+0xcd8>
    3c74:	d8c0a417 	ldw	r3,656(sp)
    3c78:	18800017 	ldw	r2,0(r3)
    3c7c:	1d400104 	addi	r21,r3,4
    3c80:	14c00115 	stw	r19,4(r2)
    3c84:	14800015 	stw	r18,0(r2)
    3c88:	d8c0a217 	ldw	r3,648(sp)
    3c8c:	dd40a415 	stw	r21,656(sp)
    3c90:	18c00044 	addi	r3,r3,1
    3c94:	d8c0a215 	stw	r3,648(sp)
    3c98:	003d6806 	br	323c <__svfscanf_r+0x4c>
    3c9c:	a880800c 	andi	r2,r21,512
    3ca0:	103fab26 	beq	r2,zero,3b50 <__svfscanf_r+0x960>
    3ca4:	d9009e17 	ldw	r4,632(sp)
    3ca8:	00bf5fc4 	movi	r2,-641
    3cac:	a8aa703a 	and	r21,r21,r2
    3cb0:	d9009f15 	stw	r4,636(sp)
    3cb4:	003f9806 	br	3b18 <__svfscanf_r+0x928>
    3cb8:	b009883a 	mov	r4,r22
    3cbc:	800b883a 	mov	r5,r16
    3cc0:	d980a715 	stw	r6,668(sp)
    3cc4:	00097a80 	call	97a8 <__srefill_r>
    3cc8:	d980a717 	ldw	r6,668(sp)
    3ccc:	103f9c26 	beq	r2,zero,3b40 <__svfscanf_r+0x950>
    3cd0:	003f9f06 	br	3b50 <__svfscanf_r+0x960>
    3cd4:	a880400c 	andi	r2,r21,256
    3cd8:	10000b26 	beq	r2,zero,3d08 <__svfscanf_r+0xb18>
    3cdc:	00bfdfc4 	movi	r2,-129
    3ce0:	a8aa703a 	and	r21,r21,r2
    3ce4:	d8809e17 	ldw	r2,632(sp)
    3ce8:	10800044 	addi	r2,r2,1
    3cec:	d8809e15 	stw	r2,632(sp)
    3cf0:	303f8b26 	beq	r6,zero,3b20 <__svfscanf_r+0x930>
    3cf4:	d8c0a317 	ldw	r3,652(sp)
    3cf8:	31bfffc4 	addi	r6,r6,-1
    3cfc:	18c00044 	addi	r3,r3,1
    3d00:	d8c0a315 	stw	r3,652(sp)
    3d04:	003f8606 	br	3b20 <__svfscanf_r+0x930>
    3d08:	e0803fcc 	andi	r2,fp,255
    3d0c:	1080201c 	xori	r2,r2,128
    3d10:	10bfe004 	addi	r2,r2,-128
    3d14:	9085883a 	add	r2,r18,r2
    3d18:	103f8d1e 	bne	r2,zero,3b50 <__svfscanf_r+0x960>
    3d1c:	00bf9fc4 	movi	r2,-385
    3d20:	a8aa703a 	and	r21,r21,r2
    3d24:	003f7c06 	br	3b18 <__svfscanf_r+0x928>
    3d28:	00800044 	movi	r2,1
    3d2c:	90bf881e 	bne	r18,r2,3b50 <__svfscanf_r+0x960>
    3d30:	04800084 	movi	r18,2
    3d34:	003f7806 	br	3b18 <__svfscanf_r+0x928>
    3d38:	a8c1400c 	andi	r3,r21,1280
    3d3c:	00810004 	movi	r2,1024
    3d40:	18800426 	beq	r3,r2,3d54 <__svfscanf_r+0xb64>
    3d44:	a884703a 	and	r2,r21,r2
    3d48:	103f8126 	beq	r2,zero,3b50 <__svfscanf_r+0x960>
    3d4c:	d8809e17 	ldw	r2,632(sp)
    3d50:	103f8326 	beq	r2,zero,3b60 <__svfscanf_r+0x970>
    3d54:	a880800c 	andi	r2,r21,512
    3d58:	1000051e 	bne	r2,zero,3d70 <__svfscanf_r+0xb80>
    3d5c:	d8c09e17 	ldw	r3,632(sp)
    3d60:	d9009f17 	ldw	r4,636(sp)
    3d64:	ddc09c15 	stw	r23,624(sp)
    3d68:	1907c83a 	sub	r3,r3,r4
    3d6c:	d8c09d15 	stw	r3,628(sp)
    3d70:	00be7fc4 	movi	r2,-1537
    3d74:	a884703a 	and	r2,r21,r2
    3d78:	15406014 	ori	r21,r2,384
    3d7c:	d8009e15 	stw	zero,632(sp)
    3d80:	003f6506 	br	3b18 <__svfscanf_r+0x928>
    3d84:	d900a617 	ldw	r4,664(sp)
    3d88:	25fd4e2e 	bgeu	r4,r23,32c4 <__svfscanf_r+0xd4>
    3d8c:	bdffffc4 	addi	r23,r23,-1
    3d90:	b9400007 	ldb	r5,0(r23)
    3d94:	b009883a 	mov	r4,r22
    3d98:	800d883a 	mov	r6,r16
    3d9c:	000c08c0 	call	c08c <_ungetc_r>
    3da0:	d880a617 	ldw	r2,664(sp)
    3da4:	15fff936 	bltu	r2,r23,3d8c <__svfscanf_r+0xb9c>
    3da8:	003d4606 	br	32c4 <__svfscanf_r+0xd4>
    3dac:	d900a617 	ldw	r4,664(sp)
    3db0:	25fd442e 	bgeu	r4,r23,32c4 <__svfscanf_r+0xd4>
    3db4:	bdffffc4 	addi	r23,r23,-1
    3db8:	b9400007 	ldb	r5,0(r23)
    3dbc:	b009883a 	mov	r4,r22
    3dc0:	800d883a 	mov	r6,r16
    3dc4:	000c08c0 	call	c08c <_ungetc_r>
    3dc8:	d8c0a617 	ldw	r3,664(sp)
    3dcc:	1dfff936 	bltu	r3,r23,3db4 <__svfscanf_r+0xbc4>
    3dd0:	003d3c06 	br	32c4 <__svfscanf_r+0xd4>
    3dd4:	e0c03fcc 	andi	r3,fp,255
    3dd8:	18c0201c 	xori	r3,r3,128
    3ddc:	18ffe004 	addi	r3,r3,-128
    3de0:	00800084 	movi	r2,2
    3de4:	18bf5a1e 	bne	r3,r2,3b50 <__svfscanf_r+0x960>
    3de8:	070000c4 	movi	fp,3
    3dec:	003f4a06 	br	3b18 <__svfscanf_r+0x928>
    3df0:	e0c03fcc 	andi	r3,fp,255
    3df4:	18c0201c 	xori	r3,r3,128
    3df8:	18ffe004 	addi	r3,r3,-128
    3dfc:	1800231e 	bne	r3,zero,3e8c <__svfscanf_r+0xc9c>
    3e00:	a8c1c00c 	andi	r3,r21,1792
    3e04:	0081c004 	movi	r2,1792
    3e08:	18bf511e 	bne	r3,r2,3b50 <__svfscanf_r+0x960>
    3e0c:	00be1fc4 	movi	r2,-1921
    3e10:	a8aa703a 	and	r21,r21,r2
    3e14:	07000044 	movi	fp,1
    3e18:	003f3f06 	br	3b18 <__svfscanf_r+0x928>
    3e1c:	9000101e 	bne	r18,zero,3e60 <__svfscanf_r+0xc70>
    3e20:	a8c1c00c 	andi	r3,r21,1792
    3e24:	0081c004 	movi	r2,1792
    3e28:	18800926 	beq	r3,r2,3e50 <__svfscanf_r+0xc60>
    3e2c:	e0c03fcc 	andi	r3,fp,255
    3e30:	18c0201c 	xori	r3,r3,128
    3e34:	18ffe004 	addi	r3,r3,-128
    3e38:	00800044 	movi	r2,1
    3e3c:	18800226 	beq	r3,r2,3e48 <__svfscanf_r+0xc58>
    3e40:	00800104 	movi	r2,4
    3e44:	18bf421e 	bne	r3,r2,3b50 <__svfscanf_r+0x960>
    3e48:	e7000044 	addi	fp,fp,1
    3e4c:	003f3206 	br	3b18 <__svfscanf_r+0x928>
    3e50:	00be1fc4 	movi	r2,-1921
    3e54:	a8aa703a 	and	r21,r21,r2
    3e58:	04800044 	movi	r18,1
    3e5c:	003f2e06 	br	3b18 <__svfscanf_r+0x928>
    3e60:	00800084 	movi	r2,2
    3e64:	90bff11e 	bne	r18,r2,3e2c <__svfscanf_r+0xc3c>
    3e68:	048000c4 	movi	r18,3
    3e6c:	003f2a06 	br	3b18 <__svfscanf_r+0x928>
    3e70:	e0c03fcc 	andi	r3,fp,255
    3e74:	18c0201c 	xori	r3,r3,128
    3e78:	18ffe004 	addi	r3,r3,-128
    3e7c:	00800184 	movi	r2,6
    3e80:	18bf331e 	bne	r3,r2,3b50 <__svfscanf_r+0x960>
    3e84:	070001c4 	movi	fp,7
    3e88:	003f2306 	br	3b18 <__svfscanf_r+0x928>
    3e8c:	008000c4 	movi	r2,3
    3e90:	18bfed26 	beq	r3,r2,3e48 <__svfscanf_r+0xc58>
    3e94:	00800144 	movi	r2,5
    3e98:	18bfeb26 	beq	r3,r2,3e48 <__svfscanf_r+0xc58>
    3e9c:	003f2c06 	br	3b50 <__svfscanf_r+0x960>
    3ea0:	d900a617 	ldw	r4,664(sp)
    3ea4:	25fd072e 	bgeu	r4,r23,32c4 <__svfscanf_r+0xd4>
    3ea8:	bdffffc4 	addi	r23,r23,-1
    3eac:	b9400007 	ldb	r5,0(r23)
    3eb0:	b009883a 	mov	r4,r22
    3eb4:	800d883a 	mov	r6,r16
    3eb8:	000c08c0 	call	c08c <_ungetc_r>
    3ebc:	d880a617 	ldw	r2,664(sp)
    3ec0:	15fff936 	bltu	r2,r23,3ea8 <__svfscanf_r+0xcb8>
    3ec4:	003cff06 	br	32c4 <__svfscanf_r+0xd4>
    3ec8:	a880008c 	andi	r2,r21,2
    3ecc:	10002026 	beq	r2,zero,3f50 <__svfscanf_r+0xd60>
    3ed0:	d900a417 	ldw	r4,656(sp)
    3ed4:	20800017 	ldw	r2,0(r4)
    3ed8:	25400104 	addi	r21,r4,4
    3edc:	10c00115 	stw	r3,4(r2)
    3ee0:	14800015 	stw	r18,0(r2)
    3ee4:	003f6806 	br	3c88 <__svfscanf_r+0xa98>
    3ee8:	d8c09c17 	ldw	r3,624(sp)
    3eec:	b009883a 	mov	r4,r22
    3ef0:	000d883a 	mov	r6,zero
    3ef4:	19400044 	addi	r5,r3,1
    3ef8:	01c00284 	movi	r7,10
    3efc:	000b4ec0 	call	b4ec <_strtol_r>
    3f00:	d9009d17 	ldw	r4,628(sp)
    3f04:	110dc83a 	sub	r6,r2,r4
    3f08:	d8c0a617 	ldw	r3,664(sp)
    3f0c:	d9009c17 	ldw	r4,624(sp)
    3f10:	188054c4 	addi	r2,r3,339
    3f14:	20800236 	bltu	r4,r2,3f20 <__svfscanf_r+0xd30>
    3f18:	18805484 	addi	r2,r3,338
    3f1c:	d8809c15 	stw	r2,624(sp)
    3f20:	d9009c17 	ldw	r4,624(sp)
    3f24:	01400074 	movhi	r5,1
    3f28:	29492504 	addi	r5,r5,9364
    3f2c:	0009b300 	call	9b30 <sprintf>
    3f30:	003f4706 	br	3c50 <__svfscanf_r+0xa60>
    3f34:	d8c09e17 	ldw	r3,632(sp)
    3f38:	d9009f17 	ldw	r4,636(sp)
    3f3c:	1905c83a 	sub	r2,r3,r4
    3f40:	103f4326 	beq	r2,zero,3c50 <__svfscanf_r+0xa60>
    3f44:	008dc83a 	sub	r6,zero,r2
    3f48:	ddc09c15 	stw	r23,624(sp)
    3f4c:	003fee06 	br	3f08 <__svfscanf_r+0xd18>
    3f50:	d880a417 	ldw	r2,656(sp)
    3f54:	9009883a 	mov	r4,r18
    3f58:	180b883a 	mov	r5,r3
    3f5c:	15c00017 	ldw	r23,0(r2)
    3f60:	15400104 	addi	r21,r2,4
    3f64:	00099c80 	call	99c8 <__isnand>
    3f68:	10021c1e 	bne	r2,zero,47dc <__svfscanf_r+0x15ec>
    3f6c:	980b883a 	mov	r5,r19
    3f70:	9009883a 	mov	r4,r18
    3f74:	000f0380 	call	f038 <__truncdfsf2>
    3f78:	b8800015 	stw	r2,0(r23)
    3f7c:	003f4206 	br	3c88 <__svfscanf_r+0xa98>
    3f80:	e0c03fcc 	andi	r3,fp,255
    3f84:	18c0201c 	xori	r3,r3,128
    3f88:	18ffe004 	addi	r3,r3,-128
    3f8c:	008001c4 	movi	r2,7
    3f90:	18beef1e 	bne	r3,r2,3b50 <__svfscanf_r+0x960>
    3f94:	07000204 	movi	fp,8
    3f98:	003edf06 	br	3b18 <__svfscanf_r+0x928>
    3f9c:	d900a317 	ldw	r4,652(sp)
    3fa0:	208002a4 	muli	r2,r4,10
    3fa4:	1145883a 	add	r2,r2,r5
    3fa8:	10bff404 	addi	r2,r2,-48
    3fac:	d880a315 	stw	r2,652(sp)
    3fb0:	003ceb06 	br	3360 <__svfscanf_r+0x170>
    3fb4:	9880040c 	andi	r2,r19,16
    3fb8:	10001426 	beq	r2,zero,400c <__svfscanf_r+0xe1c>
    3fbc:	0027883a 	mov	r19,zero
    3fc0:	00000906 	br	3fe8 <__svfscanf_r+0xdf8>
    3fc4:	80c00117 	ldw	r3,4(r16)
    3fc8:	d880a317 	ldw	r2,652(sp)
    3fcc:	29800044 	addi	r6,r5,1
    3fd0:	18ffffc4 	addi	r3,r3,-1
    3fd4:	9cc00044 	addi	r19,r19,1
    3fd8:	81800015 	stw	r6,0(r16)
    3fdc:	80c00115 	stw	r3,4(r16)
    3fe0:	14fdf726 	beq	r2,r19,37c0 <__svfscanf_r+0x5d0>
    3fe4:	00c02c0e 	bge	zero,r3,4098 <__svfscanf_r+0xea8>
    3fe8:	81400017 	ldw	r5,0(r16)
    3fec:	90800017 	ldw	r2,0(r18)
    3ff0:	28c00003 	ldbu	r3,0(r5)
    3ff4:	1887883a 	add	r3,r3,r2
    3ff8:	19000003 	ldbu	r4,0(r3)
    3ffc:	2100020c 	andi	r4,r4,8
    4000:	203ff026 	beq	r4,zero,3fc4 <__svfscanf_r+0xdd4>
    4004:	8ce3883a 	add	r17,r17,r19
    4008:	003c8c06 	br	323c <__svfscanf_r+0x4c>
    400c:	d8c0a417 	ldw	r3,656(sp)
    4010:	1d400017 	ldw	r21,0(r3)
    4014:	a827883a 	mov	r19,r21
    4018:	00000e06 	br	4054 <__svfscanf_r+0xe64>
    401c:	80800117 	ldw	r2,4(r16)
    4020:	d900a317 	ldw	r4,652(sp)
    4024:	29800044 	addi	r6,r5,1
    4028:	10ffffc4 	addi	r3,r2,-1
    402c:	213fffc4 	addi	r4,r4,-1
    4030:	d900a315 	stw	r4,652(sp)
    4034:	80c00115 	stw	r3,4(r16)
    4038:	28800003 	ldbu	r2,0(r5)
    403c:	98800005 	stb	r2,0(r19)
    4040:	81800015 	stw	r6,0(r16)
    4044:	9cc00044 	addi	r19,r19,1
    4048:	20000926 	beq	r4,zero,4070 <__svfscanf_r+0xe80>
    404c:	80800117 	ldw	r2,4(r16)
    4050:	0080170e 	bge	zero,r2,40b0 <__svfscanf_r+0xec0>
    4054:	81400017 	ldw	r5,0(r16)
    4058:	90800017 	ldw	r2,0(r18)
    405c:	28c00003 	ldbu	r3,0(r5)
    4060:	1887883a 	add	r3,r3,r2
    4064:	19000003 	ldbu	r4,0(r3)
    4068:	2100020c 	andi	r4,r4,8
    406c:	203feb26 	beq	r4,zero,401c <__svfscanf_r+0xe2c>
    4070:	9d45c83a 	sub	r2,r19,r21
    4074:	d8c0a217 	ldw	r3,648(sp)
    4078:	88a3883a 	add	r17,r17,r2
    407c:	d880a417 	ldw	r2,656(sp)
    4080:	18c00044 	addi	r3,r3,1
    4084:	d8c0a215 	stw	r3,648(sp)
    4088:	10800104 	addi	r2,r2,4
    408c:	d880a415 	stw	r2,656(sp)
    4090:	98000005 	stb	zero,0(r19)
    4094:	003c6906 	br	323c <__svfscanf_r+0x4c>
    4098:	b009883a 	mov	r4,r22
    409c:	800b883a 	mov	r5,r16
    40a0:	00097a80 	call	97a8 <__srefill_r>
    40a4:	103fd026 	beq	r2,zero,3fe8 <__svfscanf_r+0xdf8>
    40a8:	8ce3883a 	add	r17,r17,r19
    40ac:	003c6306 	br	323c <__svfscanf_r+0x4c>
    40b0:	b009883a 	mov	r4,r22
    40b4:	800b883a 	mov	r5,r16
    40b8:	00097a80 	call	97a8 <__srefill_r>
    40bc:	103fe526 	beq	r2,zero,4054 <__svfscanf_r+0xe64>
    40c0:	003feb06 	br	4070 <__svfscanf_r+0xe80>
    40c4:	d900a317 	ldw	r4,652(sp)
    40c8:	9d41e014 	ori	r21,r19,1920
    40cc:	2000821e 	bne	r4,zero,42d8 <__svfscanf_r+0x10e8>
    40d0:	d8c04404 	addi	r3,sp,272
    40d4:	182f883a 	mov	r23,r3
    40d8:	0039883a 	mov	fp,zero
    40dc:	d8c0a615 	stw	r3,664(sp)
    40e0:	d8009c15 	stw	zero,624(sp)
    40e4:	d8009d15 	stw	zero,628(sp)
    40e8:	d8009f15 	stw	zero,636(sp)
    40ec:	d8009e15 	stw	zero,632(sp)
    40f0:	003e9e06 	br	3b6c <__svfscanf_r+0x97c>
    40f4:	d900a317 	ldw	r4,652(sp)
    40f8:	9c836014 	ori	r18,r19,3456
    40fc:	2000161e 	bne	r4,zero,4158 <__svfscanf_r+0xf68>
    4100:	d8804404 	addi	r2,sp,272
    4104:	d880a615 	stw	r2,664(sp)
    4108:	002f883a 	mov	r23,zero
    410c:	1027883a 	mov	r19,r2
    4110:	9080400c 	andi	r2,r18,256
    4114:	10000926 	beq	r2,zero,413c <__svfscanf_r+0xf4c>
    4118:	d8c0a617 	ldw	r3,664(sp)
    411c:	1cc0052e 	bgeu	r3,r19,4134 <__svfscanf_r+0xf44>
    4120:	9cffffc4 	addi	r19,r19,-1
    4124:	99400007 	ldb	r5,0(r19)
    4128:	b009883a 	mov	r4,r22
    412c:	800d883a 	mov	r6,r16
    4130:	000c08c0 	call	c08c <_ungetc_r>
    4134:	d900a617 	ldw	r4,664(sp)
    4138:	24fc6226 	beq	r4,r19,32c4 <__svfscanf_r+0xd4>
    413c:	9080040c 	andi	r2,r18,16
    4140:	10006726 	beq	r2,zero,42e0 <__svfscanf_r+0x10f0>
    4144:	d8c0a617 	ldw	r3,664(sp)
    4148:	98c5c83a 	sub	r2,r19,r3
    414c:	b885883a 	add	r2,r23,r2
    4150:	88a3883a 	add	r17,r17,r2
    4154:	003c3906 	br	323c <__svfscanf_r+0x4c>
    4158:	002b883a 	mov	r21,zero
    415c:	d8c04404 	addi	r3,sp,272
    4160:	d8c0a615 	stw	r3,664(sp)
    4164:	002f883a 	mov	r23,zero
    4168:	1827883a 	mov	r19,r3
    416c:	81800017 	ldw	r6,0(r16)
    4170:	00c01344 	movi	r3,77
    4174:	31400003 	ldbu	r5,0(r6)
    4178:	28bff544 	addi	r2,r5,-43
    417c:	10803fcc 	andi	r2,r2,255
    4180:	18bfe336 	bltu	r3,r2,4110 <__svfscanf_r+0xf20>
    4184:	1085883a 	add	r2,r2,r2
    4188:	1085883a 	add	r2,r2,r2
    418c:	00c00034 	movhi	r3,0
    4190:	18d06804 	addi	r3,r3,16800
    4194:	10c5883a 	add	r2,r2,r3
    4198:	11000017 	ldw	r4,0(r2)
    419c:	2000683a 	jmp	r4
    41a0:	00004334 	movhi	zero,268
    41a4:	00004110 	cmplti	zero,zero,260
    41a8:	00004334 	movhi	zero,268
    41ac:	00004110 	cmplti	zero,zero,260
    41b0:	00004110 	cmplti	zero,zero,260
    41b4:	00004378 	rdprs	zero,zero,269
    41b8:	00004474 	movhi	zero,273
    41bc:	00004474 	movhi	zero,273
    41c0:	00004474 	movhi	zero,273
    41c4:	00004474 	movhi	zero,273
    41c8:	00004474 	movhi	zero,273
    41cc:	00004474 	movhi	zero,273
    41d0:	00004474 	movhi	zero,273
    41d4:	0000449c 	xori	zero,zero,274
    41d8:	0000449c 	xori	zero,zero,274
    41dc:	00004110 	cmplti	zero,zero,260
    41e0:	00004110 	cmplti	zero,zero,260
    41e4:	00004110 	cmplti	zero,zero,260
    41e8:	00004110 	cmplti	zero,zero,260
    41ec:	00004110 	cmplti	zero,zero,260
    41f0:	00004110 	cmplti	zero,zero,260
    41f4:	00004110 	cmplti	zero,zero,260
    41f8:	000044cc 	andi	zero,zero,275
    41fc:	000044cc 	andi	zero,zero,275
    4200:	000044cc 	andi	zero,zero,275
    4204:	000044cc 	andi	zero,zero,275
    4208:	000044cc 	andi	zero,zero,275
    420c:	000044cc 	andi	zero,zero,275
    4210:	00004110 	cmplti	zero,zero,260
    4214:	00004110 	cmplti	zero,zero,260
    4218:	00004110 	cmplti	zero,zero,260
    421c:	00004110 	cmplti	zero,zero,260
    4220:	00004110 	cmplti	zero,zero,260
    4224:	00004110 	cmplti	zero,zero,260
    4228:	00004110 	cmplti	zero,zero,260
    422c:	00004110 	cmplti	zero,zero,260
    4230:	00004110 	cmplti	zero,zero,260
    4234:	00004110 	cmplti	zero,zero,260
    4238:	00004110 	cmplti	zero,zero,260
    423c:	00004110 	cmplti	zero,zero,260
    4240:	00004110 	cmplti	zero,zero,260
    4244:	00004110 	cmplti	zero,zero,260
    4248:	00004110 	cmplti	zero,zero,260
    424c:	00004110 	cmplti	zero,zero,260
    4250:	00004110 	cmplti	zero,zero,260
    4254:	000044dc 	xori	zero,zero,275
    4258:	00004110 	cmplti	zero,zero,260
    425c:	00004110 	cmplti	zero,zero,260
    4260:	00004110 	cmplti	zero,zero,260
    4264:	00004110 	cmplti	zero,zero,260
    4268:	00004110 	cmplti	zero,zero,260
    426c:	00004110 	cmplti	zero,zero,260
    4270:	00004110 	cmplti	zero,zero,260
    4274:	00004110 	cmplti	zero,zero,260
    4278:	000044cc 	andi	zero,zero,275
    427c:	000044cc 	andi	zero,zero,275
    4280:	000044cc 	andi	zero,zero,275
    4284:	000044cc 	andi	zero,zero,275
    4288:	000044cc 	andi	zero,zero,275
    428c:	000044cc 	andi	zero,zero,275
    4290:	00004110 	cmplti	zero,zero,260
    4294:	00004110 	cmplti	zero,zero,260
    4298:	00004110 	cmplti	zero,zero,260
    429c:	00004110 	cmplti	zero,zero,260
    42a0:	00004110 	cmplti	zero,zero,260
    42a4:	00004110 	cmplti	zero,zero,260
    42a8:	00004110 	cmplti	zero,zero,260
    42ac:	00004110 	cmplti	zero,zero,260
    42b0:	00004110 	cmplti	zero,zero,260
    42b4:	00004110 	cmplti	zero,zero,260
    42b8:	00004110 	cmplti	zero,zero,260
    42bc:	00004110 	cmplti	zero,zero,260
    42c0:	00004110 	cmplti	zero,zero,260
    42c4:	00004110 	cmplti	zero,zero,260
    42c8:	00004110 	cmplti	zero,zero,260
    42cc:	00004110 	cmplti	zero,zero,260
    42d0:	00004110 	cmplti	zero,zero,260
    42d4:	000044dc 	xori	zero,zero,275
    42d8:	000d883a 	mov	r6,zero
    42dc:	003d9006 	br	3920 <__svfscanf_r+0x730>
    42e0:	98000005 	stb	zero,0(r19)
    42e4:	d8c0a017 	ldw	r3,640(sp)
    42e8:	d940a617 	ldw	r5,664(sp)
    42ec:	d9c0a117 	ldw	r7,644(sp)
    42f0:	b009883a 	mov	r4,r22
    42f4:	000d883a 	mov	r6,zero
    42f8:	183ee83a 	callr	r3
    42fc:	1007883a 	mov	r3,r2
    4300:	9080080c 	andi	r2,r18,32
    4304:	10004d1e 	bne	r2,zero,443c <__svfscanf_r+0x124c>
    4308:	9080010c 	andi	r2,r18,4
    430c:	10003426 	beq	r2,zero,43e0 <__svfscanf_r+0x11f0>
    4310:	d900a417 	ldw	r4,656(sp)
    4314:	20800017 	ldw	r2,0(r4)
    4318:	21000104 	addi	r4,r4,4
    431c:	d900a415 	stw	r4,656(sp)
    4320:	10c0000d 	sth	r3,0(r2)
    4324:	d880a217 	ldw	r2,648(sp)
    4328:	10800044 	addi	r2,r2,1
    432c:	d880a215 	stw	r2,648(sp)
    4330:	003f8406 	br	4144 <__svfscanf_r+0xf54>
    4334:	9080200c 	andi	r2,r18,128
    4338:	103f7526 	beq	r2,zero,4110 <__svfscanf_r+0xf20>
    433c:	00bfdfc4 	movi	r2,-129
    4340:	90a4703a 	and	r18,r18,r2
    4344:	99400005 	stb	r5,0(r19)
    4348:	9cc00044 	addi	r19,r19,1
    434c:	80c00117 	ldw	r3,4(r16)
    4350:	18ffffc4 	addi	r3,r3,-1
    4354:	80c00115 	stw	r3,4(r16)
    4358:	00c0130e 	bge	zero,r3,43a8 <__svfscanf_r+0x11b8>
    435c:	31800044 	addi	r6,r6,1
    4360:	81800015 	stw	r6,0(r16)
    4364:	d880a317 	ldw	r2,652(sp)
    4368:	10bfffc4 	addi	r2,r2,-1
    436c:	d880a315 	stw	r2,652(sp)
    4370:	103f7e1e 	bne	r2,zero,416c <__svfscanf_r+0xf7c>
    4374:	003f6606 	br	4110 <__svfscanf_r+0xf20>
    4378:	9082000c 	andi	r2,r18,2048
    437c:	103ff126 	beq	r2,zero,4344 <__svfscanf_r+0x1154>
    4380:	d8c0a117 	ldw	r3,644(sp)
    4384:	1800031e 	bne	r3,zero,4394 <__svfscanf_r+0x11a4>
    4388:	01000204 	movi	r4,8
    438c:	94808014 	ori	r18,r18,512
    4390:	d900a115 	stw	r4,644(sp)
    4394:	9081000c 	andi	r2,r18,1024
    4398:	10000826 	beq	r2,zero,43bc <__svfscanf_r+0x11cc>
    439c:	00be9fc4 	movi	r2,-1409
    43a0:	90a4703a 	and	r18,r18,r2
    43a4:	003fe706 	br	4344 <__svfscanf_r+0x1154>
    43a8:	b009883a 	mov	r4,r22
    43ac:	800b883a 	mov	r5,r16
    43b0:	00097a80 	call	97a8 <__srefill_r>
    43b4:	103feb26 	beq	r2,zero,4364 <__svfscanf_r+0x1174>
    43b8:	003f5506 	br	4110 <__svfscanf_r+0xf20>
    43bc:	a8000426 	beq	r21,zero,43d0 <__svfscanf_r+0x11e0>
    43c0:	d880a317 	ldw	r2,652(sp)
    43c4:	ad7fffc4 	addi	r21,r21,-1
    43c8:	10800044 	addi	r2,r2,1
    43cc:	d880a315 	stw	r2,652(sp)
    43d0:	00bf1fc4 	movi	r2,-897
    43d4:	90a4703a 	and	r18,r18,r2
    43d8:	bdc00044 	addi	r23,r23,1
    43dc:	003fdb06 	br	434c <__svfscanf_r+0x115c>
    43e0:	9080004c 	andi	r2,r18,1
    43e4:	1005003a 	cmpeq	r2,r2,zero
    43e8:	10001426 	beq	r2,zero,443c <__svfscanf_r+0x124c>
    43ec:	9080008c 	andi	r2,r18,2
    43f0:	10001226 	beq	r2,zero,443c <__svfscanf_r+0x124c>
    43f4:	d8c0a017 	ldw	r3,640(sp)
    43f8:	00800074 	movhi	r2,1
    43fc:	10ae9b04 	addi	r2,r2,-17812
    4400:	18801426 	beq	r3,r2,4454 <__svfscanf_r+0x1264>
    4404:	d9c0a117 	ldw	r7,644(sp)
    4408:	d940a617 	ldw	r5,664(sp)
    440c:	000d883a 	mov	r6,zero
    4410:	b009883a 	mov	r4,r22
    4414:	000b7540 	call	b754 <_strtoll_r>
    4418:	100d883a 	mov	r6,r2
    441c:	180f883a 	mov	r7,r3
    4420:	d900a417 	ldw	r4,656(sp)
    4424:	20800017 	ldw	r2,0(r4)
    4428:	21000104 	addi	r4,r4,4
    442c:	d900a415 	stw	r4,656(sp)
    4430:	11c00115 	stw	r7,4(r2)
    4434:	11800015 	stw	r6,0(r2)
    4438:	003fba06 	br	4324 <__svfscanf_r+0x1134>
    443c:	d900a417 	ldw	r4,656(sp)
    4440:	20800017 	ldw	r2,0(r4)
    4444:	21000104 	addi	r4,r4,4
    4448:	d900a415 	stw	r4,656(sp)
    444c:	10c00015 	stw	r3,0(r2)
    4450:	003fb406 	br	4324 <__svfscanf_r+0x1134>
    4454:	d9c0a117 	ldw	r7,644(sp)
    4458:	d940a617 	ldw	r5,664(sp)
    445c:	000d883a 	mov	r6,zero
    4460:	b009883a 	mov	r4,r22
    4464:	000bcc00 	call	bcc0 <_strtoull_r>
    4468:	100d883a 	mov	r6,r2
    446c:	180f883a 	mov	r7,r3
    4470:	003feb06 	br	4420 <__svfscanf_r+0x1230>
    4474:	d8c0a117 	ldw	r3,644(sp)
    4478:	18c5883a 	add	r2,r3,r3
    447c:	00c00074 	movhi	r3,1
    4480:	18c92684 	addi	r3,r3,9370
    4484:	10c5883a 	add	r2,r2,r3
    4488:	1080000f 	ldh	r2,0(r2)
    448c:	00fd1fc4 	movi	r3,-2945
    4490:	90e4703a 	and	r18,r18,r3
    4494:	d880a115 	stw	r2,644(sp)
    4498:	003faa06 	br	4344 <__svfscanf_r+0x1154>
    449c:	d900a117 	ldw	r4,644(sp)
    44a0:	00c00074 	movhi	r3,1
    44a4:	18c92684 	addi	r3,r3,9370
    44a8:	2105883a 	add	r2,r4,r4
    44ac:	10c5883a 	add	r2,r2,r3
    44b0:	1080000f 	ldh	r2,0(r2)
    44b4:	00c00204 	movi	r3,8
    44b8:	d880a115 	stw	r2,644(sp)
    44bc:	18bf140e 	bge	r3,r2,4110 <__svfscanf_r+0xf20>
    44c0:	00bd1fc4 	movi	r2,-2945
    44c4:	90a4703a 	and	r18,r18,r2
    44c8:	003f9e06 	br	4344 <__svfscanf_r+0x1154>
    44cc:	d8c0a117 	ldw	r3,644(sp)
    44d0:	00800284 	movi	r2,10
    44d4:	10fffa16 	blt	r2,r3,44c0 <__svfscanf_r+0x12d0>
    44d8:	003f0d06 	br	4110 <__svfscanf_r+0xf20>
    44dc:	90c1800c 	andi	r3,r18,1536
    44e0:	00808004 	movi	r2,512
    44e4:	18bf0a1e 	bne	r3,r2,4110 <__svfscanf_r+0xf20>
    44e8:	00bf7fc4 	movi	r2,-513
    44ec:	9084703a 	and	r2,r18,r2
    44f0:	01000404 	movi	r4,16
    44f4:	14814014 	ori	r18,r2,1280
    44f8:	d900a115 	stw	r4,644(sp)
    44fc:	003f9106 	br	4344 <__svfscanf_r+0x1154>
    4500:	d880a417 	ldw	r2,656(sp)
    4504:	dd400404 	addi	r21,sp,16
    4508:	14800017 	ldw	r18,0(r2)
    450c:	9027883a 	mov	r19,r18
    4510:	81000017 	ldw	r4,0(r16)
    4514:	20800003 	ldbu	r2,0(r4)
    4518:	a885883a 	add	r2,r21,r2
    451c:	10c00007 	ldb	r3,0(r2)
    4520:	18001426 	beq	r3,zero,4574 <__svfscanf_r+0x1384>
    4524:	d8c0a317 	ldw	r3,652(sp)
    4528:	80800117 	ldw	r2,4(r16)
    452c:	21800044 	addi	r6,r4,1
    4530:	18ffffc4 	addi	r3,r3,-1
    4534:	d8c0a315 	stw	r3,652(sp)
    4538:	10ffffc4 	addi	r3,r2,-1
    453c:	80c00115 	stw	r3,4(r16)
    4540:	20800003 	ldbu	r2,0(r4)
    4544:	90800005 	stb	r2,0(r18)
    4548:	d900a317 	ldw	r4,652(sp)
    454c:	81800015 	stw	r6,0(r16)
    4550:	94800044 	addi	r18,r18,1
    4554:	20000726 	beq	r4,zero,4574 <__svfscanf_r+0x1384>
    4558:	80800117 	ldw	r2,4(r16)
    455c:	00bfec16 	blt	zero,r2,4510 <__svfscanf_r+0x1320>
    4560:	b009883a 	mov	r4,r22
    4564:	800b883a 	mov	r5,r16
    4568:	00097a80 	call	97a8 <__srefill_r>
    456c:	103fe826 	beq	r2,zero,4510 <__svfscanf_r+0x1320>
    4570:	9cbb7426 	beq	r19,r18,3344 <__svfscanf_r+0x154>
    4574:	94e7c83a 	sub	r19,r18,r19
    4578:	983b5226 	beq	r19,zero,32c4 <__svfscanf_r+0xd4>
    457c:	90000005 	stb	zero,0(r18)
    4580:	d880a417 	ldw	r2,656(sp)
    4584:	d8c0a217 	ldw	r3,648(sp)
    4588:	8ce3883a 	add	r17,r17,r19
    458c:	10800104 	addi	r2,r2,4
    4590:	18c00044 	addi	r3,r3,1
    4594:	d880a415 	stw	r2,656(sp)
    4598:	d8c0a215 	stw	r3,648(sp)
    459c:	003b2706 	br	323c <__svfscanf_r+0x4c>
    45a0:	9cc00414 	ori	r19,r19,16
    45a4:	003b6e06 	br	3360 <__svfscanf_r+0x170>
    45a8:	00c00404 	movi	r3,16
    45ac:	01000074 	movhi	r4,1
    45b0:	212e9b04 	addi	r4,r4,-17812
    45b4:	9cc08014 	ori	r19,r19,512
    45b8:	054000c4 	movi	r21,3
    45bc:	d8c0a115 	stw	r3,644(sp)
    45c0:	d900a015 	stw	r4,640(sp)
    45c4:	003bf806 	br	35a8 <__svfscanf_r+0x3b8>
    45c8:	9880040c 	andi	r2,r19,16
    45cc:	10001926 	beq	r2,zero,4634 <__svfscanf_r+0x1444>
    45d0:	0027883a 	mov	r19,zero
    45d4:	00000b06 	br	4604 <__svfscanf_r+0x1414>
    45d8:	80800017 	ldw	r2,0(r16)
    45dc:	b009883a 	mov	r4,r22
    45e0:	800b883a 	mov	r5,r16
    45e4:	148d883a 	add	r6,r2,r18
    45e8:	81800015 	stw	r6,0(r16)
    45ec:	9ca7883a 	add	r19,r19,r18
    45f0:	00097a80 	call	97a8 <__srefill_r>
    45f4:	103c711e 	bne	r2,zero,37bc <__svfscanf_r+0x5cc>
    45f8:	d900a317 	ldw	r4,652(sp)
    45fc:	2489c83a 	sub	r4,r4,r18
    4600:	d900a315 	stw	r4,652(sp)
    4604:	84800117 	ldw	r18,4(r16)
    4608:	d8c0a317 	ldw	r3,652(sp)
    460c:	90fff216 	blt	r18,r3,45d8 <__svfscanf_r+0x13e8>
    4610:	d900a317 	ldw	r4,652(sp)
    4614:	80800017 	ldw	r2,0(r16)
    4618:	9927883a 	add	r19,r19,r4
    461c:	9107c83a 	sub	r3,r18,r4
    4620:	110d883a 	add	r6,r2,r4
    4624:	8ce3883a 	add	r17,r17,r19
    4628:	80c00115 	stw	r3,4(r16)
    462c:	81800015 	stw	r6,0(r16)
    4630:	003b0206 	br	323c <__svfscanf_r+0x4c>
    4634:	d880a417 	ldw	r2,656(sp)
    4638:	d980a317 	ldw	r6,652(sp)
    463c:	01400044 	movi	r5,1
    4640:	11000017 	ldw	r4,0(r2)
    4644:	800f883a 	mov	r7,r16
    4648:	00069640 	call	6964 <fread>
    464c:	103b3d26 	beq	r2,zero,3344 <__svfscanf_r+0x154>
    4650:	d8c0a417 	ldw	r3,656(sp)
    4654:	d900a217 	ldw	r4,648(sp)
    4658:	88a3883a 	add	r17,r17,r2
    465c:	18c00104 	addi	r3,r3,4
    4660:	21000044 	addi	r4,r4,1
    4664:	d8c0a415 	stw	r3,656(sp)
    4668:	d900a215 	stw	r4,648(sp)
    466c:	003af306 	br	323c <__svfscanf_r+0x4c>
    4670:	8080030b 	ldhu	r2,12(r16)
    4674:	1080100c 	andi	r2,r2,64
    4678:	103b1226 	beq	r2,zero,32c4 <__svfscanf_r+0xd4>
    467c:	003b3306 	br	334c <__svfscanf_r+0x15c>
    4680:	983b1026 	beq	r19,zero,32c4 <__svfscanf_r+0xd4>
    4684:	8ce3883a 	add	r17,r17,r19
    4688:	003aec06 	br	323c <__svfscanf_r+0x4c>
    468c:	983c9626 	beq	r19,zero,38e8 <__svfscanf_r+0x6f8>
    4690:	9cffffc4 	addi	r19,r19,-1
    4694:	d8c04404 	addi	r3,sp,272
    4698:	1cc5883a 	add	r2,r3,r19
    469c:	11400003 	ldbu	r5,0(r2)
    46a0:	b009883a 	mov	r4,r22
    46a4:	800d883a 	mov	r6,r16
    46a8:	000c08c0 	call	c08c <_ungetc_r>
    46ac:	003ff706 	br	468c <__svfscanf_r+0x149c>
    46b0:	00bfff84 	movi	r2,-2
    46b4:	18bc7a1e 	bne	r3,r2,38a0 <__svfscanf_r+0x6b0>
    46b8:	003c8406 	br	38cc <__svfscanf_r+0x6dc>
    46bc:	d900a417 	ldw	r4,656(sp)
    46c0:	25400017 	ldw	r21,0(r4)
    46c4:	21000104 	addi	r4,r4,4
    46c8:	d900a415 	stw	r4,656(sp)
    46cc:	003c4a06 	br	37f8 <__svfscanf_r+0x608>
    46d0:	00bfff84 	movi	r2,-2
    46d4:	18bc0f1e 	bne	r3,r2,3714 <__svfscanf_r+0x524>
    46d8:	003c1506 	br	3730 <__svfscanf_r+0x540>
    46dc:	b009883a 	mov	r4,r22
    46e0:	800b883a 	mov	r5,r16
    46e4:	00097a80 	call	97a8 <__srefill_r>
    46e8:	103c1326 	beq	r2,zero,3738 <__svfscanf_r+0x548>
    46ec:	903b151e 	bne	r18,zero,3344 <__svfscanf_r+0x154>
    46f0:	a83ad21e 	bne	r21,zero,323c <__svfscanf_r+0x4c>
    46f4:	d880a217 	ldw	r2,648(sp)
    46f8:	10800044 	addi	r2,r2,1
    46fc:	d880a215 	stw	r2,648(sp)
    4700:	003ace06 	br	323c <__svfscanf_r+0x4c>
    4704:	0027883a 	mov	r19,zero
    4708:	003bdd06 	br	3680 <__svfscanf_r+0x490>
    470c:	9cc00114 	ori	r19,r19,4
    4710:	003b1306 	br	3360 <__svfscanf_r+0x170>
    4714:	05400104 	movi	r21,4
    4718:	003ba306 	br	35a8 <__svfscanf_r+0x3b8>
    471c:	9cc00054 	ori	r19,r19,1
    4720:	00800074 	movhi	r2,1
    4724:	10ad3b04 	addi	r2,r2,-19220
    4728:	00c00284 	movi	r3,10
    472c:	054000c4 	movi	r21,3
    4730:	d880a015 	stw	r2,640(sp)
    4734:	d8c0a115 	stw	r3,644(sp)
    4738:	003b9b06 	br	35a8 <__svfscanf_r+0x3b8>
    473c:	9cc01014 	ori	r19,r19,64
    4740:	002b883a 	mov	r21,zero
    4744:	003b9806 	br	35a8 <__svfscanf_r+0x3b8>
    4748:	a00b883a 	mov	r5,r20
    474c:	d9000404 	addi	r4,sp,16
    4750:	0009a680 	call	9a68 <__sccl>
    4754:	1029883a 	mov	r20,r2
    4758:	9cc01014 	ori	r19,r19,64
    475c:	05400044 	movi	r21,1
    4760:	003b9106 	br	35a8 <__svfscanf_r+0x3b8>
    4764:	9cc00054 	ori	r19,r19,1
    4768:	00800204 	movi	r2,8
    476c:	00c00074 	movhi	r3,1
    4770:	18ee9b04 	addi	r3,r3,-17812
    4774:	054000c4 	movi	r21,3
    4778:	d880a115 	stw	r2,644(sp)
    477c:	d8c0a015 	stw	r3,640(sp)
    4780:	003b8906 	br	35a8 <__svfscanf_r+0x3b8>
    4784:	9880040c 	andi	r2,r19,16
    4788:	103aac1e 	bne	r2,zero,323c <__svfscanf_r+0x4c>
    478c:	9880010c 	andi	r2,r19,4
    4790:	10002426 	beq	r2,zero,4824 <__svfscanf_r+0x1634>
    4794:	d900a417 	ldw	r4,656(sp)
    4798:	20800017 	ldw	r2,0(r4)
    479c:	21000104 	addi	r4,r4,4
    47a0:	d900a415 	stw	r4,656(sp)
    47a4:	1440000d 	sth	r17,0(r2)
    47a8:	003aa406 	br	323c <__svfscanf_r+0x4c>
    47ac:	9cc00094 	ori	r19,r19,2
    47b0:	003aeb06 	br	3360 <__svfscanf_r+0x170>
    47b4:	05400084 	movi	r21,2
    47b8:	003b7b06 	br	35a8 <__svfscanf_r+0x3b8>
    47bc:	00800404 	movi	r2,16
    47c0:	00c00074 	movhi	r3,1
    47c4:	18ee9b04 	addi	r3,r3,-17812
    47c8:	9cc08814 	ori	r19,r19,544
    47cc:	054000c4 	movi	r21,3
    47d0:	d880a115 	stw	r2,644(sp)
    47d4:	d8c0a015 	stw	r3,640(sp)
    47d8:	003b7306 	br	35a8 <__svfscanf_r+0x3b8>
    47dc:	0009883a 	mov	r4,zero
    47e0:	0009b280 	call	9b28 <nanf>
    47e4:	b8800015 	stw	r2,0(r23)
    47e8:	003d2706 	br	3c88 <__svfscanf_r+0xa98>
    47ec:	a0c00007 	ldb	r3,0(r20)
    47f0:	00801b04 	movi	r2,108
    47f4:	18800826 	beq	r3,r2,4818 <__svfscanf_r+0x1628>
    47f8:	9cc00054 	ori	r19,r19,1
    47fc:	003ad806 	br	3360 <__svfscanf_r+0x170>
    4800:	01000074 	movhi	r4,1
    4804:	212d3b04 	addi	r4,r4,-19220
    4808:	054000c4 	movi	r21,3
    480c:	d900a015 	stw	r4,640(sp)
    4810:	d800a115 	stw	zero,644(sp)
    4814:	003b6406 	br	35a8 <__svfscanf_r+0x3b8>
    4818:	a5000044 	addi	r20,r20,1
    481c:	9cc00094 	ori	r19,r19,2
    4820:	003acf06 	br	3360 <__svfscanf_r+0x170>
    4824:	9880004c 	andi	r2,r19,1
    4828:	1005003a 	cmpeq	r2,r2,zero
    482c:	10000a26 	beq	r2,zero,4858 <__svfscanf_r+0x1668>
    4830:	9880008c 	andi	r2,r19,2
    4834:	10000826 	beq	r2,zero,4858 <__svfscanf_r+0x1668>
    4838:	d900a417 	ldw	r4,656(sp)
    483c:	8807d7fa 	srai	r3,r17,31
    4840:	20800017 	ldw	r2,0(r4)
    4844:	21000104 	addi	r4,r4,4
    4848:	d900a415 	stw	r4,656(sp)
    484c:	14400015 	stw	r17,0(r2)
    4850:	10c00115 	stw	r3,4(r2)
    4854:	003a7906 	br	323c <__svfscanf_r+0x4c>
    4858:	d8c0a417 	ldw	r3,656(sp)
    485c:	18800017 	ldw	r2,0(r3)
    4860:	18c00104 	addi	r3,r3,4
    4864:	d8c0a415 	stw	r3,656(sp)
    4868:	14400015 	stw	r17,0(r2)
    486c:	003a7306 	br	323c <__svfscanf_r+0x4c>

00004870 <__svfscanf>:
    4870:	00800074 	movhi	r2,1
    4874:	10917404 	addi	r2,r2,17872
    4878:	2013883a 	mov	r9,r4
    487c:	11000017 	ldw	r4,0(r2)
    4880:	2805883a 	mov	r2,r5
    4884:	300f883a 	mov	r7,r6
    4888:	480b883a 	mov	r5,r9
    488c:	100d883a 	mov	r6,r2
    4890:	00031f01 	jmpi	31f0 <__svfscanf_r>

00004894 <_vfscanf_r>:
    4894:	defffb04 	addi	sp,sp,-20
    4898:	dcc00315 	stw	r19,12(sp)
    489c:	dc800215 	stw	r18,8(sp)
    48a0:	dc400115 	stw	r17,4(sp)
    48a4:	dc000015 	stw	r16,0(sp)
    48a8:	dfc00415 	stw	ra,16(sp)
    48ac:	2021883a 	mov	r16,r4
    48b0:	2823883a 	mov	r17,r5
    48b4:	3025883a 	mov	r18,r6
    48b8:	3827883a 	mov	r19,r7
    48bc:	20000226 	beq	r4,zero,48c8 <_vfscanf_r+0x34>
    48c0:	20800e17 	ldw	r2,56(r4)
    48c4:	10000b26 	beq	r2,zero,48f4 <_vfscanf_r+0x60>
    48c8:	8009883a 	mov	r4,r16
    48cc:	880b883a 	mov	r5,r17
    48d0:	900d883a 	mov	r6,r18
    48d4:	980f883a 	mov	r7,r19
    48d8:	dfc00417 	ldw	ra,16(sp)
    48dc:	dcc00317 	ldw	r19,12(sp)
    48e0:	dc800217 	ldw	r18,8(sp)
    48e4:	dc400117 	ldw	r17,4(sp)
    48e8:	dc000017 	ldw	r16,0(sp)
    48ec:	dec00504 	addi	sp,sp,20
    48f0:	00031f01 	jmpi	31f0 <__svfscanf_r>
    48f4:	00065100 	call	6510 <__sinit>
    48f8:	003ff306 	br	48c8 <_vfscanf_r+0x34>

000048fc <vfscanf>:
    48fc:	defffb04 	addi	sp,sp,-20
    4900:	dcc00315 	stw	r19,12(sp)
    4904:	04c00074 	movhi	r19,1
    4908:	9cd17404 	addi	r19,r19,17872
    490c:	98c00017 	ldw	r3,0(r19)
    4910:	dc800215 	stw	r18,8(sp)
    4914:	dc400115 	stw	r17,4(sp)
    4918:	dc000015 	stw	r16,0(sp)
    491c:	dfc00415 	stw	ra,16(sp)
    4920:	2021883a 	mov	r16,r4
    4924:	2823883a 	mov	r17,r5
    4928:	3025883a 	mov	r18,r6
    492c:	18000326 	beq	r3,zero,493c <vfscanf+0x40>
    4930:	18800e17 	ldw	r2,56(r3)
    4934:	1809883a 	mov	r4,r3
    4938:	10000b26 	beq	r2,zero,4968 <vfscanf+0x6c>
    493c:	99000017 	ldw	r4,0(r19)
    4940:	800b883a 	mov	r5,r16
    4944:	880d883a 	mov	r6,r17
    4948:	900f883a 	mov	r7,r18
    494c:	dfc00417 	ldw	ra,16(sp)
    4950:	dcc00317 	ldw	r19,12(sp)
    4954:	dc800217 	ldw	r18,8(sp)
    4958:	dc400117 	ldw	r17,4(sp)
    495c:	dc000017 	ldw	r16,0(sp)
    4960:	dec00504 	addi	sp,sp,20
    4964:	00031f01 	jmpi	31f0 <__svfscanf_r>
    4968:	00065100 	call	6510 <__sinit>
    496c:	003ff306 	br	493c <vfscanf+0x40>

00004970 <__swsetup_r>:
    4970:	00800074 	movhi	r2,1
    4974:	10917404 	addi	r2,r2,17872
    4978:	10c00017 	ldw	r3,0(r2)
    497c:	defffd04 	addi	sp,sp,-12
    4980:	dc400115 	stw	r17,4(sp)
    4984:	dc000015 	stw	r16,0(sp)
    4988:	dfc00215 	stw	ra,8(sp)
    498c:	2023883a 	mov	r17,r4
    4990:	2821883a 	mov	r16,r5
    4994:	18000226 	beq	r3,zero,49a0 <__swsetup_r+0x30>
    4998:	18800e17 	ldw	r2,56(r3)
    499c:	10001f26 	beq	r2,zero,4a1c <__swsetup_r+0xac>
    49a0:	8100030b 	ldhu	r4,12(r16)
    49a4:	2080020c 	andi	r2,r4,8
    49a8:	10002826 	beq	r2,zero,4a4c <__swsetup_r+0xdc>
    49ac:	81400417 	ldw	r5,16(r16)
    49b0:	28001d26 	beq	r5,zero,4a28 <__swsetup_r+0xb8>
    49b4:	2080004c 	andi	r2,r4,1
    49b8:	1005003a 	cmpeq	r2,r2,zero
    49bc:	10000b26 	beq	r2,zero,49ec <__swsetup_r+0x7c>
    49c0:	2080008c 	andi	r2,r4,2
    49c4:	10001226 	beq	r2,zero,4a10 <__swsetup_r+0xa0>
    49c8:	0005883a 	mov	r2,zero
    49cc:	80800215 	stw	r2,8(r16)
    49d0:	28000b26 	beq	r5,zero,4a00 <__swsetup_r+0x90>
    49d4:	0005883a 	mov	r2,zero
    49d8:	dfc00217 	ldw	ra,8(sp)
    49dc:	dc400117 	ldw	r17,4(sp)
    49e0:	dc000017 	ldw	r16,0(sp)
    49e4:	dec00304 	addi	sp,sp,12
    49e8:	f800283a 	ret
    49ec:	80800517 	ldw	r2,20(r16)
    49f0:	80000215 	stw	zero,8(r16)
    49f4:	0085c83a 	sub	r2,zero,r2
    49f8:	80800615 	stw	r2,24(r16)
    49fc:	283ff51e 	bne	r5,zero,49d4 <__swsetup_r+0x64>
    4a00:	2080200c 	andi	r2,r4,128
    4a04:	103ff326 	beq	r2,zero,49d4 <__swsetup_r+0x64>
    4a08:	00bfffc4 	movi	r2,-1
    4a0c:	003ff206 	br	49d8 <__swsetup_r+0x68>
    4a10:	80800517 	ldw	r2,20(r16)
    4a14:	80800215 	stw	r2,8(r16)
    4a18:	003fed06 	br	49d0 <__swsetup_r+0x60>
    4a1c:	1809883a 	mov	r4,r3
    4a20:	00065100 	call	6510 <__sinit>
    4a24:	003fde06 	br	49a0 <__swsetup_r+0x30>
    4a28:	20c0a00c 	andi	r3,r4,640
    4a2c:	00808004 	movi	r2,512
    4a30:	18bfe026 	beq	r3,r2,49b4 <__swsetup_r+0x44>
    4a34:	8809883a 	mov	r4,r17
    4a38:	800b883a 	mov	r5,r16
    4a3c:	00074f00 	call	74f0 <__smakebuf_r>
    4a40:	8100030b 	ldhu	r4,12(r16)
    4a44:	81400417 	ldw	r5,16(r16)
    4a48:	003fda06 	br	49b4 <__swsetup_r+0x44>
    4a4c:	2080040c 	andi	r2,r4,16
    4a50:	103fed26 	beq	r2,zero,4a08 <__swsetup_r+0x98>
    4a54:	2080010c 	andi	r2,r4,4
    4a58:	10001226 	beq	r2,zero,4aa4 <__swsetup_r+0x134>
    4a5c:	81400c17 	ldw	r5,48(r16)
    4a60:	28000526 	beq	r5,zero,4a78 <__swsetup_r+0x108>
    4a64:	80801004 	addi	r2,r16,64
    4a68:	28800226 	beq	r5,r2,4a74 <__swsetup_r+0x104>
    4a6c:	8809883a 	mov	r4,r17
    4a70:	0006ad00 	call	6ad0 <_free_r>
    4a74:	80000c15 	stw	zero,48(r16)
    4a78:	8080030b 	ldhu	r2,12(r16)
    4a7c:	81400417 	ldw	r5,16(r16)
    4a80:	80000115 	stw	zero,4(r16)
    4a84:	10bff6cc 	andi	r2,r2,65499
    4a88:	8080030d 	sth	r2,12(r16)
    4a8c:	81400015 	stw	r5,0(r16)
    4a90:	8080030b 	ldhu	r2,12(r16)
    4a94:	10800214 	ori	r2,r2,8
    4a98:	113fffcc 	andi	r4,r2,65535
    4a9c:	8080030d 	sth	r2,12(r16)
    4aa0:	003fc306 	br	49b0 <__swsetup_r+0x40>
    4aa4:	81400417 	ldw	r5,16(r16)
    4aa8:	003ff906 	br	4a90 <__swsetup_r+0x120>

00004aac <quorem>:
    4aac:	28c00417 	ldw	r3,16(r5)
    4ab0:	20800417 	ldw	r2,16(r4)
    4ab4:	defff604 	addi	sp,sp,-40
    4ab8:	ddc00715 	stw	r23,28(sp)
    4abc:	dd400515 	stw	r21,20(sp)
    4ac0:	dfc00915 	stw	ra,36(sp)
    4ac4:	df000815 	stw	fp,32(sp)
    4ac8:	dd800615 	stw	r22,24(sp)
    4acc:	dd000415 	stw	r20,16(sp)
    4ad0:	dcc00315 	stw	r19,12(sp)
    4ad4:	dc800215 	stw	r18,8(sp)
    4ad8:	dc400115 	stw	r17,4(sp)
    4adc:	dc000015 	stw	r16,0(sp)
    4ae0:	202f883a 	mov	r23,r4
    4ae4:	282b883a 	mov	r21,r5
    4ae8:	10c07416 	blt	r2,r3,4cbc <quorem+0x210>
    4aec:	1c7fffc4 	addi	r17,r3,-1
    4af0:	8c45883a 	add	r2,r17,r17
    4af4:	1085883a 	add	r2,r2,r2
    4af8:	2c000504 	addi	r16,r5,20
    4afc:	24c00504 	addi	r19,r4,20
    4b00:	14ed883a 	add	r22,r2,r19
    4b04:	80a5883a 	add	r18,r16,r2
    4b08:	b7000017 	ldw	fp,0(r22)
    4b0c:	91400017 	ldw	r5,0(r18)
    4b10:	e009883a 	mov	r4,fp
    4b14:	29400044 	addi	r5,r5,1
    4b18:	000f37c0 	call	f37c <__udivsi3>
    4b1c:	1029883a 	mov	r20,r2
    4b20:	10003c1e 	bne	r2,zero,4c14 <quorem+0x168>
    4b24:	a80b883a 	mov	r5,r21
    4b28:	b809883a 	mov	r4,r23
    4b2c:	000831c0 	call	831c <__mcmp>
    4b30:	10002b16 	blt	r2,zero,4be0 <quorem+0x134>
    4b34:	a5000044 	addi	r20,r20,1
    4b38:	980f883a 	mov	r7,r19
    4b3c:	0011883a 	mov	r8,zero
    4b40:	0009883a 	mov	r4,zero
    4b44:	81400017 	ldw	r5,0(r16)
    4b48:	38c00017 	ldw	r3,0(r7)
    4b4c:	84000104 	addi	r16,r16,4
    4b50:	28bfffcc 	andi	r2,r5,65535
    4b54:	2085883a 	add	r2,r4,r2
    4b58:	11bfffcc 	andi	r6,r2,65535
    4b5c:	193fffcc 	andi	r4,r3,65535
    4b60:	1004d43a 	srli	r2,r2,16
    4b64:	280ad43a 	srli	r5,r5,16
    4b68:	2189c83a 	sub	r4,r4,r6
    4b6c:	2209883a 	add	r4,r4,r8
    4b70:	1806d43a 	srli	r3,r3,16
    4b74:	288b883a 	add	r5,r5,r2
    4b78:	200dd43a 	srai	r6,r4,16
    4b7c:	28bfffcc 	andi	r2,r5,65535
    4b80:	1887c83a 	sub	r3,r3,r2
    4b84:	1987883a 	add	r3,r3,r6
    4b88:	3900000d 	sth	r4,0(r7)
    4b8c:	38c0008d 	sth	r3,2(r7)
    4b90:	2808d43a 	srli	r4,r5,16
    4b94:	39c00104 	addi	r7,r7,4
    4b98:	1811d43a 	srai	r8,r3,16
    4b9c:	943fe92e 	bgeu	r18,r16,4b44 <quorem+0x98>
    4ba0:	8c45883a 	add	r2,r17,r17
    4ba4:	1085883a 	add	r2,r2,r2
    4ba8:	9885883a 	add	r2,r19,r2
    4bac:	10c00017 	ldw	r3,0(r2)
    4bb0:	18000b1e 	bne	r3,zero,4be0 <quorem+0x134>
    4bb4:	113fff04 	addi	r4,r2,-4
    4bb8:	9900082e 	bgeu	r19,r4,4bdc <quorem+0x130>
    4bbc:	10bfff17 	ldw	r2,-4(r2)
    4bc0:	10000326 	beq	r2,zero,4bd0 <quorem+0x124>
    4bc4:	00000506 	br	4bdc <quorem+0x130>
    4bc8:	20800017 	ldw	r2,0(r4)
    4bcc:	1000031e 	bne	r2,zero,4bdc <quorem+0x130>
    4bd0:	213fff04 	addi	r4,r4,-4
    4bd4:	8c7fffc4 	addi	r17,r17,-1
    4bd8:	993ffb36 	bltu	r19,r4,4bc8 <quorem+0x11c>
    4bdc:	bc400415 	stw	r17,16(r23)
    4be0:	a005883a 	mov	r2,r20
    4be4:	dfc00917 	ldw	ra,36(sp)
    4be8:	df000817 	ldw	fp,32(sp)
    4bec:	ddc00717 	ldw	r23,28(sp)
    4bf0:	dd800617 	ldw	r22,24(sp)
    4bf4:	dd400517 	ldw	r21,20(sp)
    4bf8:	dd000417 	ldw	r20,16(sp)
    4bfc:	dcc00317 	ldw	r19,12(sp)
    4c00:	dc800217 	ldw	r18,8(sp)
    4c04:	dc400117 	ldw	r17,4(sp)
    4c08:	dc000017 	ldw	r16,0(sp)
    4c0c:	dec00a04 	addi	sp,sp,40
    4c10:	f800283a 	ret
    4c14:	980f883a 	mov	r7,r19
    4c18:	8011883a 	mov	r8,r16
    4c1c:	0013883a 	mov	r9,zero
    4c20:	000d883a 	mov	r6,zero
    4c24:	40c00017 	ldw	r3,0(r8)
    4c28:	39000017 	ldw	r4,0(r7)
    4c2c:	42000104 	addi	r8,r8,4
    4c30:	18bfffcc 	andi	r2,r3,65535
    4c34:	a085383a 	mul	r2,r20,r2
    4c38:	1806d43a 	srli	r3,r3,16
    4c3c:	217fffcc 	andi	r5,r4,65535
    4c40:	3085883a 	add	r2,r6,r2
    4c44:	11bfffcc 	andi	r6,r2,65535
    4c48:	a0c7383a 	mul	r3,r20,r3
    4c4c:	1004d43a 	srli	r2,r2,16
    4c50:	298bc83a 	sub	r5,r5,r6
    4c54:	2a4b883a 	add	r5,r5,r9
    4c58:	2008d43a 	srli	r4,r4,16
    4c5c:	1887883a 	add	r3,r3,r2
    4c60:	280dd43a 	srai	r6,r5,16
    4c64:	18bfffcc 	andi	r2,r3,65535
    4c68:	2089c83a 	sub	r4,r4,r2
    4c6c:	2189883a 	add	r4,r4,r6
    4c70:	3900008d 	sth	r4,2(r7)
    4c74:	3940000d 	sth	r5,0(r7)
    4c78:	180cd43a 	srli	r6,r3,16
    4c7c:	39c00104 	addi	r7,r7,4
    4c80:	2013d43a 	srai	r9,r4,16
    4c84:	923fe72e 	bgeu	r18,r8,4c24 <quorem+0x178>
    4c88:	e03fa61e 	bne	fp,zero,4b24 <quorem+0x78>
    4c8c:	b0ffff04 	addi	r3,r22,-4
    4c90:	98c0082e 	bgeu	r19,r3,4cb4 <quorem+0x208>
    4c94:	b0bfff17 	ldw	r2,-4(r22)
    4c98:	10000326 	beq	r2,zero,4ca8 <quorem+0x1fc>
    4c9c:	00000506 	br	4cb4 <quorem+0x208>
    4ca0:	18800017 	ldw	r2,0(r3)
    4ca4:	1000031e 	bne	r2,zero,4cb4 <quorem+0x208>
    4ca8:	18ffff04 	addi	r3,r3,-4
    4cac:	8c7fffc4 	addi	r17,r17,-1
    4cb0:	98fffb36 	bltu	r19,r3,4ca0 <quorem+0x1f4>
    4cb4:	bc400415 	stw	r17,16(r23)
    4cb8:	003f9a06 	br	4b24 <quorem+0x78>
    4cbc:	0005883a 	mov	r2,zero
    4cc0:	003fc806 	br	4be4 <quorem+0x138>

00004cc4 <_dtoa_r>:
    4cc4:	22001017 	ldw	r8,64(r4)
    4cc8:	deffda04 	addi	sp,sp,-152
    4ccc:	dd402115 	stw	r21,132(sp)
    4cd0:	dd002015 	stw	r20,128(sp)
    4cd4:	dc801e15 	stw	r18,120(sp)
    4cd8:	dc401d15 	stw	r17,116(sp)
    4cdc:	dfc02515 	stw	ra,148(sp)
    4ce0:	df002415 	stw	fp,144(sp)
    4ce4:	ddc02315 	stw	r23,140(sp)
    4ce8:	dd802215 	stw	r22,136(sp)
    4cec:	dcc01f15 	stw	r19,124(sp)
    4cf0:	dc001c15 	stw	r16,112(sp)
    4cf4:	d9001615 	stw	r4,88(sp)
    4cf8:	3023883a 	mov	r17,r6
    4cfc:	2829883a 	mov	r20,r5
    4d00:	d9c01715 	stw	r7,92(sp)
    4d04:	dc802817 	ldw	r18,160(sp)
    4d08:	302b883a 	mov	r21,r6
    4d0c:	40000a26 	beq	r8,zero,4d38 <_dtoa_r+0x74>
    4d10:	20801117 	ldw	r2,68(r4)
    4d14:	400b883a 	mov	r5,r8
    4d18:	40800115 	stw	r2,4(r8)
    4d1c:	20c01117 	ldw	r3,68(r4)
    4d20:	00800044 	movi	r2,1
    4d24:	10c4983a 	sll	r2,r2,r3
    4d28:	40800215 	stw	r2,8(r8)
    4d2c:	00081c00 	call	81c0 <_Bfree>
    4d30:	d8c01617 	ldw	r3,88(sp)
    4d34:	18001015 	stw	zero,64(r3)
    4d38:	8800a316 	blt	r17,zero,4fc8 <_dtoa_r+0x304>
    4d3c:	90000015 	stw	zero,0(r18)
    4d40:	a8dffc2c 	andhi	r3,r21,32752
    4d44:	009ffc34 	movhi	r2,32752
    4d48:	18809126 	beq	r3,r2,4f90 <_dtoa_r+0x2cc>
    4d4c:	000d883a 	mov	r6,zero
    4d50:	000f883a 	mov	r7,zero
    4d54:	a009883a 	mov	r4,r20
    4d58:	a80b883a 	mov	r5,r21
    4d5c:	dd001215 	stw	r20,72(sp)
    4d60:	dd401315 	stw	r21,76(sp)
    4d64:	000ebc00 	call	ebc0 <__nedf2>
    4d68:	1000171e 	bne	r2,zero,4dc8 <_dtoa_r+0x104>
    4d6c:	d9802717 	ldw	r6,156(sp)
    4d70:	00800044 	movi	r2,1
    4d74:	30800015 	stw	r2,0(r6)
    4d78:	d8802917 	ldw	r2,164(sp)
    4d7c:	10029b26 	beq	r2,zero,57ec <_dtoa_r+0xb28>
    4d80:	d9002917 	ldw	r4,164(sp)
    4d84:	00800074 	movhi	r2,1
    4d88:	10891c44 	addi	r2,r2,9329
    4d8c:	10ffffc4 	addi	r3,r2,-1
    4d90:	20800015 	stw	r2,0(r4)
    4d94:	1805883a 	mov	r2,r3
    4d98:	dfc02517 	ldw	ra,148(sp)
    4d9c:	df002417 	ldw	fp,144(sp)
    4da0:	ddc02317 	ldw	r23,140(sp)
    4da4:	dd802217 	ldw	r22,136(sp)
    4da8:	dd402117 	ldw	r21,132(sp)
    4dac:	dd002017 	ldw	r20,128(sp)
    4db0:	dcc01f17 	ldw	r19,124(sp)
    4db4:	dc801e17 	ldw	r18,120(sp)
    4db8:	dc401d17 	ldw	r17,116(sp)
    4dbc:	dc001c17 	ldw	r16,112(sp)
    4dc0:	dec02604 	addi	sp,sp,152
    4dc4:	f800283a 	ret
    4dc8:	d9001617 	ldw	r4,88(sp)
    4dcc:	d9401217 	ldw	r5,72(sp)
    4dd0:	d8800104 	addi	r2,sp,4
    4dd4:	a80d883a 	mov	r6,r21
    4dd8:	d9c00204 	addi	r7,sp,8
    4ddc:	d8800015 	stw	r2,0(sp)
    4de0:	00087fc0 	call	87fc <__d2b>
    4de4:	d8800715 	stw	r2,28(sp)
    4de8:	a804d53a 	srli	r2,r21,20
    4dec:	1101ffcc 	andi	r4,r2,2047
    4df0:	20008626 	beq	r4,zero,500c <_dtoa_r+0x348>
    4df4:	d8c01217 	ldw	r3,72(sp)
    4df8:	00800434 	movhi	r2,16
    4dfc:	10bfffc4 	addi	r2,r2,-1
    4e00:	ddc00117 	ldw	r23,4(sp)
    4e04:	a884703a 	and	r2,r21,r2
    4e08:	1811883a 	mov	r8,r3
    4e0c:	124ffc34 	orhi	r9,r2,16368
    4e10:	25bf0044 	addi	r22,r4,-1023
    4e14:	d8000815 	stw	zero,32(sp)
    4e18:	0005883a 	mov	r2,zero
    4e1c:	00cffe34 	movhi	r3,16376
    4e20:	480b883a 	mov	r5,r9
    4e24:	4009883a 	mov	r4,r8
    4e28:	180f883a 	mov	r7,r3
    4e2c:	100d883a 	mov	r6,r2
    4e30:	000e4280 	call	e428 <__subdf3>
    4e34:	0218dbf4 	movhi	r8,25455
    4e38:	4210d844 	addi	r8,r8,17249
    4e3c:	024ff4f4 	movhi	r9,16339
    4e40:	4a61e9c4 	addi	r9,r9,-30809
    4e44:	480f883a 	mov	r7,r9
    4e48:	400d883a 	mov	r6,r8
    4e4c:	180b883a 	mov	r5,r3
    4e50:	1009883a 	mov	r4,r2
    4e54:	000e51c0 	call	e51c <__muldf3>
    4e58:	0222d874 	movhi	r8,35681
    4e5c:	42322cc4 	addi	r8,r8,-14157
    4e60:	024ff1f4 	movhi	r9,16327
    4e64:	4a628a04 	addi	r9,r9,-30168
    4e68:	480f883a 	mov	r7,r9
    4e6c:	400d883a 	mov	r6,r8
    4e70:	180b883a 	mov	r5,r3
    4e74:	1009883a 	mov	r4,r2
    4e78:	000e4a80 	call	e4a8 <__adddf3>
    4e7c:	b009883a 	mov	r4,r22
    4e80:	1021883a 	mov	r16,r2
    4e84:	1823883a 	mov	r17,r3
    4e88:	000ee680 	call	ee68 <__floatsidf>
    4e8c:	021427f4 	movhi	r8,20639
    4e90:	421e7ec4 	addi	r8,r8,31227
    4e94:	024ff4f4 	movhi	r9,16339
    4e98:	4a5104c4 	addi	r9,r9,17427
    4e9c:	480f883a 	mov	r7,r9
    4ea0:	400d883a 	mov	r6,r8
    4ea4:	180b883a 	mov	r5,r3
    4ea8:	1009883a 	mov	r4,r2
    4eac:	000e51c0 	call	e51c <__muldf3>
    4eb0:	180f883a 	mov	r7,r3
    4eb4:	880b883a 	mov	r5,r17
    4eb8:	100d883a 	mov	r6,r2
    4ebc:	8009883a 	mov	r4,r16
    4ec0:	000e4a80 	call	e4a8 <__adddf3>
    4ec4:	1009883a 	mov	r4,r2
    4ec8:	180b883a 	mov	r5,r3
    4ecc:	1021883a 	mov	r16,r2
    4ed0:	1823883a 	mov	r17,r3
    4ed4:	000ef600 	call	ef60 <__fixdfsi>
    4ed8:	000d883a 	mov	r6,zero
    4edc:	000f883a 	mov	r7,zero
    4ee0:	8009883a 	mov	r4,r16
    4ee4:	880b883a 	mov	r5,r17
    4ee8:	d8800d15 	stw	r2,52(sp)
    4eec:	000ed580 	call	ed58 <__ltdf2>
    4ef0:	10031716 	blt	r2,zero,5b50 <_dtoa_r+0xe8c>
    4ef4:	d8c00d17 	ldw	r3,52(sp)
    4ef8:	00800584 	movi	r2,22
    4efc:	10c1482e 	bgeu	r2,r3,5420 <_dtoa_r+0x75c>
    4f00:	01000044 	movi	r4,1
    4f04:	d9000c15 	stw	r4,48(sp)
    4f08:	bd85c83a 	sub	r2,r23,r22
    4f0c:	11bfffc4 	addi	r6,r2,-1
    4f10:	30030b16 	blt	r6,zero,5b40 <_dtoa_r+0xe7c>
    4f14:	d9800a15 	stw	r6,40(sp)
    4f18:	d8001115 	stw	zero,68(sp)
    4f1c:	d8c00d17 	ldw	r3,52(sp)
    4f20:	1802ff16 	blt	r3,zero,5b20 <_dtoa_r+0xe5c>
    4f24:	d9000a17 	ldw	r4,40(sp)
    4f28:	d8c00915 	stw	r3,36(sp)
    4f2c:	d8001015 	stw	zero,64(sp)
    4f30:	20c9883a 	add	r4,r4,r3
    4f34:	d9000a15 	stw	r4,40(sp)
    4f38:	d9001717 	ldw	r4,92(sp)
    4f3c:	00800244 	movi	r2,9
    4f40:	11004636 	bltu	r2,r4,505c <_dtoa_r+0x398>
    4f44:	00800144 	movi	r2,5
    4f48:	11020416 	blt	r2,r4,575c <_dtoa_r+0xa98>
    4f4c:	04400044 	movi	r17,1
    4f50:	d8c01717 	ldw	r3,92(sp)
    4f54:	00800144 	movi	r2,5
    4f58:	10c1ed36 	bltu	r2,r3,5710 <_dtoa_r+0xa4c>
    4f5c:	18c5883a 	add	r2,r3,r3
    4f60:	1085883a 	add	r2,r2,r2
    4f64:	00c00034 	movhi	r3,0
    4f68:	18d3de04 	addi	r3,r3,20344
    4f6c:	10c5883a 	add	r2,r2,r3
    4f70:	11000017 	ldw	r4,0(r2)
    4f74:	2000683a 	jmp	r4
    4f78:	00005064 	muli	zero,zero,321
    4f7c:	00005064 	muli	zero,zero,321
    4f80:	00005a64 	muli	zero,zero,361
    4f84:	00005a3c 	xorhi	zero,zero,360
    4f88:	00005a80 	call	5a8 <main+0x3f4>
    4f8c:	00005a8c 	andi	zero,zero,362
    4f90:	d9002717 	ldw	r4,156(sp)
    4f94:	0089c3c4 	movi	r2,9999
    4f98:	20800015 	stw	r2,0(r4)
    4f9c:	a0001026 	beq	r20,zero,4fe0 <_dtoa_r+0x31c>
    4fa0:	00c00074 	movhi	r3,1
    4fa4:	18c9d304 	addi	r3,r3,10060
    4fa8:	d9802917 	ldw	r6,164(sp)
    4fac:	303f7926 	beq	r6,zero,4d94 <_dtoa_r+0xd0>
    4fb0:	188000c7 	ldb	r2,3(r3)
    4fb4:	190000c4 	addi	r4,r3,3
    4fb8:	1000101e 	bne	r2,zero,4ffc <_dtoa_r+0x338>
    4fbc:	d8802917 	ldw	r2,164(sp)
    4fc0:	11000015 	stw	r4,0(r2)
    4fc4:	003f7306 	br	4d94 <_dtoa_r+0xd0>
    4fc8:	00a00034 	movhi	r2,32768
    4fcc:	10bfffc4 	addi	r2,r2,-1
    4fd0:	00c00044 	movi	r3,1
    4fd4:	88aa703a 	and	r21,r17,r2
    4fd8:	90c00015 	stw	r3,0(r18)
    4fdc:	003f5806 	br	4d40 <_dtoa_r+0x7c>
    4fe0:	00800434 	movhi	r2,16
    4fe4:	10bfffc4 	addi	r2,r2,-1
    4fe8:	a884703a 	and	r2,r21,r2
    4fec:	103fec1e 	bne	r2,zero,4fa0 <_dtoa_r+0x2dc>
    4ff0:	00c00074 	movhi	r3,1
    4ff4:	18c9d004 	addi	r3,r3,10048
    4ff8:	003feb06 	br	4fa8 <_dtoa_r+0x2e4>
    4ffc:	d8802917 	ldw	r2,164(sp)
    5000:	19000204 	addi	r4,r3,8
    5004:	11000015 	stw	r4,0(r2)
    5008:	003f6206 	br	4d94 <_dtoa_r+0xd0>
    500c:	ddc00117 	ldw	r23,4(sp)
    5010:	d8800217 	ldw	r2,8(sp)
    5014:	01000804 	movi	r4,32
    5018:	b8c10c84 	addi	r3,r23,1074
    501c:	18a3883a 	add	r17,r3,r2
    5020:	2441b80e 	bge	r4,r17,5704 <_dtoa_r+0xa40>
    5024:	00c01004 	movi	r3,64
    5028:	1c47c83a 	sub	r3,r3,r17
    502c:	88bff804 	addi	r2,r17,-32
    5030:	a8c6983a 	sll	r3,r21,r3
    5034:	a084d83a 	srl	r2,r20,r2
    5038:	1888b03a 	or	r4,r3,r2
    503c:	000f0ac0 	call	f0ac <__floatunsidf>
    5040:	1011883a 	mov	r8,r2
    5044:	00bf8434 	movhi	r2,65040
    5048:	01000044 	movi	r4,1
    504c:	10d3883a 	add	r9,r2,r3
    5050:	8dbef344 	addi	r22,r17,-1075
    5054:	d9000815 	stw	r4,32(sp)
    5058:	003f6f06 	br	4e18 <_dtoa_r+0x154>
    505c:	d8001715 	stw	zero,92(sp)
    5060:	04400044 	movi	r17,1
    5064:	00bfffc4 	movi	r2,-1
    5068:	00c00044 	movi	r3,1
    506c:	d8800e15 	stw	r2,56(sp)
    5070:	d8002615 	stw	zero,152(sp)
    5074:	d8800f15 	stw	r2,60(sp)
    5078:	d8c00b15 	stw	r3,44(sp)
    507c:	1021883a 	mov	r16,r2
    5080:	d8801617 	ldw	r2,88(sp)
    5084:	10001115 	stw	zero,68(r2)
    5088:	d8801617 	ldw	r2,88(sp)
    508c:	11401117 	ldw	r5,68(r2)
    5090:	1009883a 	mov	r4,r2
    5094:	00087400 	call	8740 <_Balloc>
    5098:	d8c01617 	ldw	r3,88(sp)
    509c:	d8800515 	stw	r2,20(sp)
    50a0:	18801015 	stw	r2,64(r3)
    50a4:	00800384 	movi	r2,14
    50a8:	14006836 	bltu	r2,r16,524c <_dtoa_r+0x588>
    50ac:	8805003a 	cmpeq	r2,r17,zero
    50b0:	1000661e 	bne	r2,zero,524c <_dtoa_r+0x588>
    50b4:	d9000d17 	ldw	r4,52(sp)
    50b8:	0102300e 	bge	zero,r4,597c <_dtoa_r+0xcb8>
    50bc:	208003cc 	andi	r2,r4,15
    50c0:	100490fa 	slli	r2,r2,3
    50c4:	2025d13a 	srai	r18,r4,4
    50c8:	00c00074 	movhi	r3,1
    50cc:	18c9e504 	addi	r3,r3,10132
    50d0:	10c5883a 	add	r2,r2,r3
    50d4:	90c0040c 	andi	r3,r18,16
    50d8:	14000017 	ldw	r16,0(r2)
    50dc:	14400117 	ldw	r17,4(r2)
    50e0:	18036a1e 	bne	r3,zero,5e8c <_dtoa_r+0x11c8>
    50e4:	05800084 	movi	r22,2
    50e8:	90001026 	beq	r18,zero,512c <_dtoa_r+0x468>
    50ec:	04c00074 	movhi	r19,1
    50f0:	9cca1704 	addi	r19,r19,10332
    50f4:	9080004c 	andi	r2,r18,1
    50f8:	1005003a 	cmpeq	r2,r2,zero
    50fc:	1000081e 	bne	r2,zero,5120 <_dtoa_r+0x45c>
    5100:	99800017 	ldw	r6,0(r19)
    5104:	99c00117 	ldw	r7,4(r19)
    5108:	880b883a 	mov	r5,r17
    510c:	8009883a 	mov	r4,r16
    5110:	000e51c0 	call	e51c <__muldf3>
    5114:	1021883a 	mov	r16,r2
    5118:	b5800044 	addi	r22,r22,1
    511c:	1823883a 	mov	r17,r3
    5120:	9025d07a 	srai	r18,r18,1
    5124:	9cc00204 	addi	r19,r19,8
    5128:	903ff21e 	bne	r18,zero,50f4 <_dtoa_r+0x430>
    512c:	a80b883a 	mov	r5,r21
    5130:	a009883a 	mov	r4,r20
    5134:	880f883a 	mov	r7,r17
    5138:	800d883a 	mov	r6,r16
    513c:	000e8e00 	call	e8e0 <__divdf3>
    5140:	1029883a 	mov	r20,r2
    5144:	182b883a 	mov	r21,r3
    5148:	d8c00c17 	ldw	r3,48(sp)
    514c:	1805003a 	cmpeq	r2,r3,zero
    5150:	1000081e 	bne	r2,zero,5174 <_dtoa_r+0x4b0>
    5154:	0005883a 	mov	r2,zero
    5158:	00cffc34 	movhi	r3,16368
    515c:	180f883a 	mov	r7,r3
    5160:	a009883a 	mov	r4,r20
    5164:	a80b883a 	mov	r5,r21
    5168:	100d883a 	mov	r6,r2
    516c:	000ed580 	call	ed58 <__ltdf2>
    5170:	1003fe16 	blt	r2,zero,616c <_dtoa_r+0x14a8>
    5174:	b009883a 	mov	r4,r22
    5178:	000ee680 	call	ee68 <__floatsidf>
    517c:	180b883a 	mov	r5,r3
    5180:	1009883a 	mov	r4,r2
    5184:	a00d883a 	mov	r6,r20
    5188:	a80f883a 	mov	r7,r21
    518c:	000e51c0 	call	e51c <__muldf3>
    5190:	0011883a 	mov	r8,zero
    5194:	02500734 	movhi	r9,16412
    5198:	1009883a 	mov	r4,r2
    519c:	180b883a 	mov	r5,r3
    51a0:	480f883a 	mov	r7,r9
    51a4:	400d883a 	mov	r6,r8
    51a8:	000e4a80 	call	e4a8 <__adddf3>
    51ac:	d9000f17 	ldw	r4,60(sp)
    51b0:	102d883a 	mov	r22,r2
    51b4:	00bf3034 	movhi	r2,64704
    51b8:	18b9883a 	add	fp,r3,r2
    51bc:	e02f883a 	mov	r23,fp
    51c0:	20028f1e 	bne	r4,zero,5c00 <_dtoa_r+0xf3c>
    51c4:	0005883a 	mov	r2,zero
    51c8:	00d00534 	movhi	r3,16404
    51cc:	a009883a 	mov	r4,r20
    51d0:	a80b883a 	mov	r5,r21
    51d4:	180f883a 	mov	r7,r3
    51d8:	100d883a 	mov	r6,r2
    51dc:	000e4280 	call	e428 <__subdf3>
    51e0:	1009883a 	mov	r4,r2
    51e4:	e00f883a 	mov	r7,fp
    51e8:	180b883a 	mov	r5,r3
    51ec:	b00d883a 	mov	r6,r22
    51f0:	1025883a 	mov	r18,r2
    51f4:	1827883a 	mov	r19,r3
    51f8:	000ec480 	call	ec48 <__gtdf2>
    51fc:	00834f16 	blt	zero,r2,5f3c <_dtoa_r+0x1278>
    5200:	e0e0003c 	xorhi	r3,fp,32768
    5204:	9009883a 	mov	r4,r18
    5208:	980b883a 	mov	r5,r19
    520c:	180f883a 	mov	r7,r3
    5210:	b00d883a 	mov	r6,r22
    5214:	000ed580 	call	ed58 <__ltdf2>
    5218:	1000080e 	bge	r2,zero,523c <_dtoa_r+0x578>
    521c:	0027883a 	mov	r19,zero
    5220:	0025883a 	mov	r18,zero
    5224:	d8802617 	ldw	r2,152(sp)
    5228:	df000517 	ldw	fp,20(sp)
    522c:	d8000615 	stw	zero,24(sp)
    5230:	0084303a 	nor	r2,zero,r2
    5234:	d8800d15 	stw	r2,52(sp)
    5238:	00019b06 	br	58a8 <_dtoa_r+0xbe4>
    523c:	d9801217 	ldw	r6,72(sp)
    5240:	d8801317 	ldw	r2,76(sp)
    5244:	3029883a 	mov	r20,r6
    5248:	102b883a 	mov	r21,r2
    524c:	d8c00217 	ldw	r3,8(sp)
    5250:	18008516 	blt	r3,zero,5468 <_dtoa_r+0x7a4>
    5254:	d9000d17 	ldw	r4,52(sp)
    5258:	00800384 	movi	r2,14
    525c:	11008216 	blt	r2,r4,5468 <_dtoa_r+0x7a4>
    5260:	200490fa 	slli	r2,r4,3
    5264:	d9802617 	ldw	r6,152(sp)
    5268:	00c00074 	movhi	r3,1
    526c:	18c9e504 	addi	r3,r3,10132
    5270:	10c5883a 	add	r2,r2,r3
    5274:	14800017 	ldw	r18,0(r2)
    5278:	14c00117 	ldw	r19,4(r2)
    527c:	30031e16 	blt	r6,zero,5ef8 <_dtoa_r+0x1234>
    5280:	d9000517 	ldw	r4,20(sp)
    5284:	d8c00f17 	ldw	r3,60(sp)
    5288:	a823883a 	mov	r17,r21
    528c:	a021883a 	mov	r16,r20
    5290:	192b883a 	add	r21,r3,r4
    5294:	2039883a 	mov	fp,r4
    5298:	00000f06 	br	52d8 <_dtoa_r+0x614>
    529c:	0005883a 	mov	r2,zero
    52a0:	00d00934 	movhi	r3,16420
    52a4:	5009883a 	mov	r4,r10
    52a8:	580b883a 	mov	r5,r11
    52ac:	180f883a 	mov	r7,r3
    52b0:	100d883a 	mov	r6,r2
    52b4:	000e51c0 	call	e51c <__muldf3>
    52b8:	180b883a 	mov	r5,r3
    52bc:	000d883a 	mov	r6,zero
    52c0:	000f883a 	mov	r7,zero
    52c4:	1009883a 	mov	r4,r2
    52c8:	1021883a 	mov	r16,r2
    52cc:	1823883a 	mov	r17,r3
    52d0:	000ebc00 	call	ebc0 <__nedf2>
    52d4:	10004526 	beq	r2,zero,53ec <_dtoa_r+0x728>
    52d8:	900d883a 	mov	r6,r18
    52dc:	980f883a 	mov	r7,r19
    52e0:	8009883a 	mov	r4,r16
    52e4:	880b883a 	mov	r5,r17
    52e8:	000e8e00 	call	e8e0 <__divdf3>
    52ec:	180b883a 	mov	r5,r3
    52f0:	1009883a 	mov	r4,r2
    52f4:	000ef600 	call	ef60 <__fixdfsi>
    52f8:	1009883a 	mov	r4,r2
    52fc:	1029883a 	mov	r20,r2
    5300:	000ee680 	call	ee68 <__floatsidf>
    5304:	180f883a 	mov	r7,r3
    5308:	9009883a 	mov	r4,r18
    530c:	980b883a 	mov	r5,r19
    5310:	100d883a 	mov	r6,r2
    5314:	000e51c0 	call	e51c <__muldf3>
    5318:	180f883a 	mov	r7,r3
    531c:	880b883a 	mov	r5,r17
    5320:	8009883a 	mov	r4,r16
    5324:	100d883a 	mov	r6,r2
    5328:	000e4280 	call	e428 <__subdf3>
    532c:	1015883a 	mov	r10,r2
    5330:	a0800c04 	addi	r2,r20,48
    5334:	e0800005 	stb	r2,0(fp)
    5338:	e7000044 	addi	fp,fp,1
    533c:	1817883a 	mov	r11,r3
    5340:	e57fd61e 	bne	fp,r21,529c <_dtoa_r+0x5d8>
    5344:	500d883a 	mov	r6,r10
    5348:	180f883a 	mov	r7,r3
    534c:	5009883a 	mov	r4,r10
    5350:	180b883a 	mov	r5,r3
    5354:	000e4a80 	call	e4a8 <__adddf3>
    5358:	100d883a 	mov	r6,r2
    535c:	9009883a 	mov	r4,r18
    5360:	980b883a 	mov	r5,r19
    5364:	180f883a 	mov	r7,r3
    5368:	1021883a 	mov	r16,r2
    536c:	1823883a 	mov	r17,r3
    5370:	000ed580 	call	ed58 <__ltdf2>
    5374:	10000816 	blt	r2,zero,5398 <_dtoa_r+0x6d4>
    5378:	980b883a 	mov	r5,r19
    537c:	800d883a 	mov	r6,r16
    5380:	880f883a 	mov	r7,r17
    5384:	9009883a 	mov	r4,r18
    5388:	000eb380 	call	eb38 <__eqdf2>
    538c:	1000171e 	bne	r2,zero,53ec <_dtoa_r+0x728>
    5390:	a080004c 	andi	r2,r20,1
    5394:	10001526 	beq	r2,zero,53ec <_dtoa_r+0x728>
    5398:	d8800d17 	ldw	r2,52(sp)
    539c:	d8800415 	stw	r2,16(sp)
    53a0:	e009883a 	mov	r4,fp
    53a4:	213fffc4 	addi	r4,r4,-1
    53a8:	20c00007 	ldb	r3,0(r4)
    53ac:	00800e44 	movi	r2,57
    53b0:	1880081e 	bne	r3,r2,53d4 <_dtoa_r+0x710>
    53b4:	d8800517 	ldw	r2,20(sp)
    53b8:	113ffa1e 	bne	r2,r4,53a4 <_dtoa_r+0x6e0>
    53bc:	d8c00417 	ldw	r3,16(sp)
    53c0:	d9800517 	ldw	r6,20(sp)
    53c4:	00800c04 	movi	r2,48
    53c8:	18c00044 	addi	r3,r3,1
    53cc:	d8c00415 	stw	r3,16(sp)
    53d0:	30800005 	stb	r2,0(r6)
    53d4:	20800003 	ldbu	r2,0(r4)
    53d8:	d8c00417 	ldw	r3,16(sp)
    53dc:	27000044 	addi	fp,r4,1
    53e0:	10800044 	addi	r2,r2,1
    53e4:	d8c00d15 	stw	r3,52(sp)
    53e8:	20800005 	stb	r2,0(r4)
    53ec:	d9001617 	ldw	r4,88(sp)
    53f0:	d9400717 	ldw	r5,28(sp)
    53f4:	00081c00 	call	81c0 <_Bfree>
    53f8:	e0000005 	stb	zero,0(fp)
    53fc:	d9800d17 	ldw	r6,52(sp)
    5400:	d8c02717 	ldw	r3,156(sp)
    5404:	d9002917 	ldw	r4,164(sp)
    5408:	30800044 	addi	r2,r6,1
    540c:	18800015 	stw	r2,0(r3)
    5410:	20029c26 	beq	r4,zero,5e84 <_dtoa_r+0x11c0>
    5414:	d8c00517 	ldw	r3,20(sp)
    5418:	27000015 	stw	fp,0(r4)
    541c:	003e5d06 	br	4d94 <_dtoa_r+0xd0>
    5420:	d9800d17 	ldw	r6,52(sp)
    5424:	00c00074 	movhi	r3,1
    5428:	18c9e504 	addi	r3,r3,10132
    542c:	d9001217 	ldw	r4,72(sp)
    5430:	300490fa 	slli	r2,r6,3
    5434:	d9401317 	ldw	r5,76(sp)
    5438:	10c5883a 	add	r2,r2,r3
    543c:	12000017 	ldw	r8,0(r2)
    5440:	12400117 	ldw	r9,4(r2)
    5444:	400d883a 	mov	r6,r8
    5448:	480f883a 	mov	r7,r9
    544c:	000ed580 	call	ed58 <__ltdf2>
    5450:	1000030e 	bge	r2,zero,5460 <_dtoa_r+0x79c>
    5454:	d8800d17 	ldw	r2,52(sp)
    5458:	10bfffc4 	addi	r2,r2,-1
    545c:	d8800d15 	stw	r2,52(sp)
    5460:	d8000c15 	stw	zero,48(sp)
    5464:	003ea806 	br	4f08 <_dtoa_r+0x244>
    5468:	d9000b17 	ldw	r4,44(sp)
    546c:	202cc03a 	cmpne	r22,r4,zero
    5470:	b000c71e 	bne	r22,zero,5790 <_dtoa_r+0xacc>
    5474:	dc001117 	ldw	r16,68(sp)
    5478:	dc801017 	ldw	r18,64(sp)
    547c:	0027883a 	mov	r19,zero
    5480:	04000b0e 	bge	zero,r16,54b0 <_dtoa_r+0x7ec>
    5484:	d8c00a17 	ldw	r3,40(sp)
    5488:	00c0090e 	bge	zero,r3,54b0 <_dtoa_r+0x7ec>
    548c:	8005883a 	mov	r2,r16
    5490:	1c011316 	blt	r3,r16,58e0 <_dtoa_r+0xc1c>
    5494:	d9000a17 	ldw	r4,40(sp)
    5498:	d9801117 	ldw	r6,68(sp)
    549c:	80a1c83a 	sub	r16,r16,r2
    54a0:	2089c83a 	sub	r4,r4,r2
    54a4:	308dc83a 	sub	r6,r6,r2
    54a8:	d9000a15 	stw	r4,40(sp)
    54ac:	d9801115 	stw	r6,68(sp)
    54b0:	d8801017 	ldw	r2,64(sp)
    54b4:	0080150e 	bge	zero,r2,550c <_dtoa_r+0x848>
    54b8:	d8c00b17 	ldw	r3,44(sp)
    54bc:	1805003a 	cmpeq	r2,r3,zero
    54c0:	1001c91e 	bne	r2,zero,5be8 <_dtoa_r+0xf24>
    54c4:	04800e0e 	bge	zero,r18,5500 <_dtoa_r+0x83c>
    54c8:	d9001617 	ldw	r4,88(sp)
    54cc:	980b883a 	mov	r5,r19
    54d0:	900d883a 	mov	r6,r18
    54d4:	0008f740 	call	8f74 <__pow5mult>
    54d8:	d9001617 	ldw	r4,88(sp)
    54dc:	d9800717 	ldw	r6,28(sp)
    54e0:	100b883a 	mov	r5,r2
    54e4:	1027883a 	mov	r19,r2
    54e8:	0008c500 	call	8c50 <__multiply>
    54ec:	d9001617 	ldw	r4,88(sp)
    54f0:	d9400717 	ldw	r5,28(sp)
    54f4:	1023883a 	mov	r17,r2
    54f8:	00081c00 	call	81c0 <_Bfree>
    54fc:	dc400715 	stw	r17,28(sp)
    5500:	d9001017 	ldw	r4,64(sp)
    5504:	248dc83a 	sub	r6,r4,r18
    5508:	30010e1e 	bne	r6,zero,5944 <_dtoa_r+0xc80>
    550c:	d9001617 	ldw	r4,88(sp)
    5510:	04400044 	movi	r17,1
    5514:	880b883a 	mov	r5,r17
    5518:	0008e380 	call	8e38 <__i2b>
    551c:	d9800917 	ldw	r6,36(sp)
    5520:	1025883a 	mov	r18,r2
    5524:	0180040e 	bge	zero,r6,5538 <_dtoa_r+0x874>
    5528:	d9001617 	ldw	r4,88(sp)
    552c:	100b883a 	mov	r5,r2
    5530:	0008f740 	call	8f74 <__pow5mult>
    5534:	1025883a 	mov	r18,r2
    5538:	d8801717 	ldw	r2,92(sp)
    553c:	8880f30e 	bge	r17,r2,590c <_dtoa_r+0xc48>
    5540:	0023883a 	mov	r17,zero
    5544:	d9800917 	ldw	r6,36(sp)
    5548:	30019e1e 	bne	r6,zero,5bc4 <_dtoa_r+0xf00>
    554c:	00c00044 	movi	r3,1
    5550:	d9000a17 	ldw	r4,40(sp)
    5554:	20c5883a 	add	r2,r4,r3
    5558:	10c007cc 	andi	r3,r2,31
    555c:	1800841e 	bne	r3,zero,5770 <_dtoa_r+0xaac>
    5560:	00800704 	movi	r2,28
    5564:	d9000a17 	ldw	r4,40(sp)
    5568:	d9801117 	ldw	r6,68(sp)
    556c:	80a1883a 	add	r16,r16,r2
    5570:	2089883a 	add	r4,r4,r2
    5574:	308d883a 	add	r6,r6,r2
    5578:	d9000a15 	stw	r4,40(sp)
    557c:	d9801115 	stw	r6,68(sp)
    5580:	d8801117 	ldw	r2,68(sp)
    5584:	0080050e 	bge	zero,r2,559c <_dtoa_r+0x8d8>
    5588:	d9400717 	ldw	r5,28(sp)
    558c:	d9001617 	ldw	r4,88(sp)
    5590:	100d883a 	mov	r6,r2
    5594:	0008b040 	call	8b04 <__lshift>
    5598:	d8800715 	stw	r2,28(sp)
    559c:	d8c00a17 	ldw	r3,40(sp)
    55a0:	00c0050e 	bge	zero,r3,55b8 <_dtoa_r+0x8f4>
    55a4:	d9001617 	ldw	r4,88(sp)
    55a8:	900b883a 	mov	r5,r18
    55ac:	180d883a 	mov	r6,r3
    55b0:	0008b040 	call	8b04 <__lshift>
    55b4:	1025883a 	mov	r18,r2
    55b8:	d9000c17 	ldw	r4,48(sp)
    55bc:	2005003a 	cmpeq	r2,r4,zero
    55c0:	10016f26 	beq	r2,zero,5b80 <_dtoa_r+0xebc>
    55c4:	d9000f17 	ldw	r4,60(sp)
    55c8:	0102170e 	bge	zero,r4,5e28 <_dtoa_r+0x1164>
    55cc:	d9800b17 	ldw	r6,44(sp)
    55d0:	3005003a 	cmpeq	r2,r6,zero
    55d4:	1000881e 	bne	r2,zero,57f8 <_dtoa_r+0xb34>
    55d8:	0400050e 	bge	zero,r16,55f0 <_dtoa_r+0x92c>
    55dc:	d9001617 	ldw	r4,88(sp)
    55e0:	980b883a 	mov	r5,r19
    55e4:	800d883a 	mov	r6,r16
    55e8:	0008b040 	call	8b04 <__lshift>
    55ec:	1027883a 	mov	r19,r2
    55f0:	8804c03a 	cmpne	r2,r17,zero
    55f4:	1002541e 	bne	r2,zero,5f48 <_dtoa_r+0x1284>
    55f8:	980b883a 	mov	r5,r19
    55fc:	dd800517 	ldw	r22,20(sp)
    5600:	dcc00615 	stw	r19,24(sp)
    5604:	a700004c 	andi	fp,r20,1
    5608:	2827883a 	mov	r19,r5
    560c:	d9000717 	ldw	r4,28(sp)
    5610:	900b883a 	mov	r5,r18
    5614:	0004aac0 	call	4aac <quorem>
    5618:	d9000717 	ldw	r4,28(sp)
    561c:	d9400617 	ldw	r5,24(sp)
    5620:	1023883a 	mov	r17,r2
    5624:	8dc00c04 	addi	r23,r17,48
    5628:	000831c0 	call	831c <__mcmp>
    562c:	d9001617 	ldw	r4,88(sp)
    5630:	900b883a 	mov	r5,r18
    5634:	980d883a 	mov	r6,r19
    5638:	1029883a 	mov	r20,r2
    563c:	00089780 	call	8978 <__mdiff>
    5640:	102b883a 	mov	r21,r2
    5644:	10800317 	ldw	r2,12(r2)
    5648:	1001281e 	bne	r2,zero,5aec <_dtoa_r+0xe28>
    564c:	d9000717 	ldw	r4,28(sp)
    5650:	a80b883a 	mov	r5,r21
    5654:	000831c0 	call	831c <__mcmp>
    5658:	d9001617 	ldw	r4,88(sp)
    565c:	1021883a 	mov	r16,r2
    5660:	a80b883a 	mov	r5,r21
    5664:	00081c00 	call	81c0 <_Bfree>
    5668:	8000041e 	bne	r16,zero,567c <_dtoa_r+0x9b8>
    566c:	d8801717 	ldw	r2,92(sp)
    5670:	1000021e 	bne	r2,zero,567c <_dtoa_r+0x9b8>
    5674:	e004c03a 	cmpne	r2,fp,zero
    5678:	10011726 	beq	r2,zero,5ad8 <_dtoa_r+0xe14>
    567c:	a0010616 	blt	r20,zero,5a98 <_dtoa_r+0xdd4>
    5680:	a000041e 	bne	r20,zero,5694 <_dtoa_r+0x9d0>
    5684:	d8c01717 	ldw	r3,92(sp)
    5688:	1800021e 	bne	r3,zero,5694 <_dtoa_r+0x9d0>
    568c:	e004c03a 	cmpne	r2,fp,zero
    5690:	10010126 	beq	r2,zero,5a98 <_dtoa_r+0xdd4>
    5694:	04023d16 	blt	zero,r16,5f8c <_dtoa_r+0x12c8>
    5698:	b5c00005 	stb	r23,0(r22)
    569c:	d9800517 	ldw	r6,20(sp)
    56a0:	d9000f17 	ldw	r4,60(sp)
    56a4:	b5800044 	addi	r22,r22,1
    56a8:	3105883a 	add	r2,r6,r4
    56ac:	b0806526 	beq	r22,r2,5844 <_dtoa_r+0xb80>
    56b0:	d9400717 	ldw	r5,28(sp)
    56b4:	d9001617 	ldw	r4,88(sp)
    56b8:	01800284 	movi	r6,10
    56bc:	000f883a 	mov	r7,zero
    56c0:	0008e740 	call	8e74 <__multadd>
    56c4:	d8800715 	stw	r2,28(sp)
    56c8:	d8800617 	ldw	r2,24(sp)
    56cc:	14c10c26 	beq	r2,r19,5b00 <_dtoa_r+0xe3c>
    56d0:	d9400617 	ldw	r5,24(sp)
    56d4:	d9001617 	ldw	r4,88(sp)
    56d8:	01800284 	movi	r6,10
    56dc:	000f883a 	mov	r7,zero
    56e0:	0008e740 	call	8e74 <__multadd>
    56e4:	d9001617 	ldw	r4,88(sp)
    56e8:	980b883a 	mov	r5,r19
    56ec:	01800284 	movi	r6,10
    56f0:	000f883a 	mov	r7,zero
    56f4:	d8800615 	stw	r2,24(sp)
    56f8:	0008e740 	call	8e74 <__multadd>
    56fc:	1027883a 	mov	r19,r2
    5700:	003fc206 	br	560c <_dtoa_r+0x948>
    5704:	2445c83a 	sub	r2,r4,r17
    5708:	a088983a 	sll	r4,r20,r2
    570c:	003e4b06 	br	503c <_dtoa_r+0x378>
    5710:	01bfffc4 	movi	r6,-1
    5714:	00800044 	movi	r2,1
    5718:	d9800e15 	stw	r6,56(sp)
    571c:	d9800f15 	stw	r6,60(sp)
    5720:	d8800b15 	stw	r2,44(sp)
    5724:	d8c01617 	ldw	r3,88(sp)
    5728:	008005c4 	movi	r2,23
    572c:	18001115 	stw	zero,68(r3)
    5730:	1580082e 	bgeu	r2,r22,5754 <_dtoa_r+0xa90>
    5734:	00c00104 	movi	r3,4
    5738:	0009883a 	mov	r4,zero
    573c:	18c7883a 	add	r3,r3,r3
    5740:	18800504 	addi	r2,r3,20
    5744:	21000044 	addi	r4,r4,1
    5748:	b0bffc2e 	bgeu	r22,r2,573c <_dtoa_r+0xa78>
    574c:	d9801617 	ldw	r6,88(sp)
    5750:	31001115 	stw	r4,68(r6)
    5754:	dc000f17 	ldw	r16,60(sp)
    5758:	003e4b06 	br	5088 <_dtoa_r+0x3c4>
    575c:	d9801717 	ldw	r6,92(sp)
    5760:	0023883a 	mov	r17,zero
    5764:	31bfff04 	addi	r6,r6,-4
    5768:	d9801715 	stw	r6,92(sp)
    576c:	003df806 	br	4f50 <_dtoa_r+0x28c>
    5770:	00800804 	movi	r2,32
    5774:	10c9c83a 	sub	r4,r2,r3
    5778:	00c00104 	movi	r3,4
    577c:	19005a16 	blt	r3,r4,58e8 <_dtoa_r+0xc24>
    5780:	008000c4 	movi	r2,3
    5784:	113f7e16 	blt	r2,r4,5580 <_dtoa_r+0x8bc>
    5788:	20800704 	addi	r2,r4,28
    578c:	003f7506 	br	5564 <_dtoa_r+0x8a0>
    5790:	d9801717 	ldw	r6,92(sp)
    5794:	00800044 	movi	r2,1
    5798:	1180a10e 	bge	r2,r6,5a20 <_dtoa_r+0xd5c>
    579c:	d9800f17 	ldw	r6,60(sp)
    57a0:	d8c01017 	ldw	r3,64(sp)
    57a4:	30bfffc4 	addi	r2,r6,-1
    57a8:	1881c616 	blt	r3,r2,5ec4 <_dtoa_r+0x1200>
    57ac:	18a5c83a 	sub	r18,r3,r2
    57b0:	d8800f17 	ldw	r2,60(sp)
    57b4:	10026216 	blt	r2,zero,6140 <_dtoa_r+0x147c>
    57b8:	dc001117 	ldw	r16,68(sp)
    57bc:	1007883a 	mov	r3,r2
    57c0:	d9800a17 	ldw	r6,40(sp)
    57c4:	d8801117 	ldw	r2,68(sp)
    57c8:	d9001617 	ldw	r4,88(sp)
    57cc:	30cd883a 	add	r6,r6,r3
    57d0:	10c5883a 	add	r2,r2,r3
    57d4:	01400044 	movi	r5,1
    57d8:	d9800a15 	stw	r6,40(sp)
    57dc:	d8801115 	stw	r2,68(sp)
    57e0:	0008e380 	call	8e38 <__i2b>
    57e4:	1027883a 	mov	r19,r2
    57e8:	003f2506 	br	5480 <_dtoa_r+0x7bc>
    57ec:	00c00074 	movhi	r3,1
    57f0:	18c91c04 	addi	r3,r3,9328
    57f4:	003d6706 	br	4d94 <_dtoa_r+0xd0>
    57f8:	dd800517 	ldw	r22,20(sp)
    57fc:	04000044 	movi	r16,1
    5800:	00000706 	br	5820 <_dtoa_r+0xb5c>
    5804:	d9400717 	ldw	r5,28(sp)
    5808:	d9001617 	ldw	r4,88(sp)
    580c:	01800284 	movi	r6,10
    5810:	000f883a 	mov	r7,zero
    5814:	0008e740 	call	8e74 <__multadd>
    5818:	d8800715 	stw	r2,28(sp)
    581c:	84000044 	addi	r16,r16,1
    5820:	d9000717 	ldw	r4,28(sp)
    5824:	900b883a 	mov	r5,r18
    5828:	0004aac0 	call	4aac <quorem>
    582c:	15c00c04 	addi	r23,r2,48
    5830:	b5c00005 	stb	r23,0(r22)
    5834:	d8c00f17 	ldw	r3,60(sp)
    5838:	b5800044 	addi	r22,r22,1
    583c:	80fff116 	blt	r16,r3,5804 <_dtoa_r+0xb40>
    5840:	d8000615 	stw	zero,24(sp)
    5844:	d9400717 	ldw	r5,28(sp)
    5848:	d9001617 	ldw	r4,88(sp)
    584c:	01800044 	movi	r6,1
    5850:	0008b040 	call	8b04 <__lshift>
    5854:	1009883a 	mov	r4,r2
    5858:	900b883a 	mov	r5,r18
    585c:	d8800715 	stw	r2,28(sp)
    5860:	000831c0 	call	831c <__mcmp>
    5864:	00803c0e 	bge	zero,r2,5958 <_dtoa_r+0xc94>
    5868:	b009883a 	mov	r4,r22
    586c:	213fffc4 	addi	r4,r4,-1
    5870:	21400003 	ldbu	r5,0(r4)
    5874:	00800e44 	movi	r2,57
    5878:	28c03fcc 	andi	r3,r5,255
    587c:	18c0201c 	xori	r3,r3,128
    5880:	18ffe004 	addi	r3,r3,-128
    5884:	1881981e 	bne	r3,r2,5ee8 <_dtoa_r+0x1224>
    5888:	d9800517 	ldw	r6,20(sp)
    588c:	21bff71e 	bne	r4,r6,586c <_dtoa_r+0xba8>
    5890:	d8800d17 	ldw	r2,52(sp)
    5894:	37000044 	addi	fp,r6,1
    5898:	10800044 	addi	r2,r2,1
    589c:	d8800d15 	stw	r2,52(sp)
    58a0:	00800c44 	movi	r2,49
    58a4:	30800005 	stb	r2,0(r6)
    58a8:	d9001617 	ldw	r4,88(sp)
    58ac:	900b883a 	mov	r5,r18
    58b0:	00081c00 	call	81c0 <_Bfree>
    58b4:	983ecd26 	beq	r19,zero,53ec <_dtoa_r+0x728>
    58b8:	d8c00617 	ldw	r3,24(sp)
    58bc:	18000426 	beq	r3,zero,58d0 <_dtoa_r+0xc0c>
    58c0:	1cc00326 	beq	r3,r19,58d0 <_dtoa_r+0xc0c>
    58c4:	d9001617 	ldw	r4,88(sp)
    58c8:	180b883a 	mov	r5,r3
    58cc:	00081c00 	call	81c0 <_Bfree>
    58d0:	d9001617 	ldw	r4,88(sp)
    58d4:	980b883a 	mov	r5,r19
    58d8:	00081c00 	call	81c0 <_Bfree>
    58dc:	003ec306 	br	53ec <_dtoa_r+0x728>
    58e0:	1805883a 	mov	r2,r3
    58e4:	003eeb06 	br	5494 <_dtoa_r+0x7d0>
    58e8:	d9800a17 	ldw	r6,40(sp)
    58ec:	d8c01117 	ldw	r3,68(sp)
    58f0:	20bfff04 	addi	r2,r4,-4
    58f4:	308d883a 	add	r6,r6,r2
    58f8:	1887883a 	add	r3,r3,r2
    58fc:	80a1883a 	add	r16,r16,r2
    5900:	d9800a15 	stw	r6,40(sp)
    5904:	d8c01115 	stw	r3,68(sp)
    5908:	003f1d06 	br	5580 <_dtoa_r+0x8bc>
    590c:	a03f0c1e 	bne	r20,zero,5540 <_dtoa_r+0x87c>
    5910:	00800434 	movhi	r2,16
    5914:	10bfffc4 	addi	r2,r2,-1
    5918:	a884703a 	and	r2,r21,r2
    591c:	103f081e 	bne	r2,zero,5540 <_dtoa_r+0x87c>
    5920:	a89ffc2c 	andhi	r2,r21,32752
    5924:	103f0626 	beq	r2,zero,5540 <_dtoa_r+0x87c>
    5928:	d8c01117 	ldw	r3,68(sp)
    592c:	d9000a17 	ldw	r4,40(sp)
    5930:	18c00044 	addi	r3,r3,1
    5934:	21000044 	addi	r4,r4,1
    5938:	d8c01115 	stw	r3,68(sp)
    593c:	d9000a15 	stw	r4,40(sp)
    5940:	003f0006 	br	5544 <_dtoa_r+0x880>
    5944:	d9400717 	ldw	r5,28(sp)
    5948:	d9001617 	ldw	r4,88(sp)
    594c:	0008f740 	call	8f74 <__pow5mult>
    5950:	d8800715 	stw	r2,28(sp)
    5954:	003eed06 	br	550c <_dtoa_r+0x848>
    5958:	1000021e 	bne	r2,zero,5964 <_dtoa_r+0xca0>
    595c:	b880004c 	andi	r2,r23,1
    5960:	103fc11e 	bne	r2,zero,5868 <_dtoa_r+0xba4>
    5964:	b5bfffc4 	addi	r22,r22,-1
    5968:	b0c00007 	ldb	r3,0(r22)
    596c:	00800c04 	movi	r2,48
    5970:	18bffc26 	beq	r3,r2,5964 <_dtoa_r+0xca0>
    5974:	b7000044 	addi	fp,r22,1
    5978:	003fcb06 	br	58a8 <_dtoa_r+0xbe4>
    597c:	d9800d17 	ldw	r6,52(sp)
    5980:	018fc83a 	sub	r7,zero,r6
    5984:	3801f726 	beq	r7,zero,6164 <_dtoa_r+0x14a0>
    5988:	398003cc 	andi	r6,r7,15
    598c:	300c90fa 	slli	r6,r6,3
    5990:	01400074 	movhi	r5,1
    5994:	2949e504 	addi	r5,r5,10132
    5998:	d9001217 	ldw	r4,72(sp)
    599c:	314d883a 	add	r6,r6,r5
    59a0:	30c00117 	ldw	r3,4(r6)
    59a4:	30800017 	ldw	r2,0(r6)
    59a8:	d9401317 	ldw	r5,76(sp)
    59ac:	3821d13a 	srai	r16,r7,4
    59b0:	100d883a 	mov	r6,r2
    59b4:	180f883a 	mov	r7,r3
    59b8:	000e51c0 	call	e51c <__muldf3>
    59bc:	1011883a 	mov	r8,r2
    59c0:	1813883a 	mov	r9,r3
    59c4:	1029883a 	mov	r20,r2
    59c8:	182b883a 	mov	r21,r3
    59cc:	8001e526 	beq	r16,zero,6164 <_dtoa_r+0x14a0>
    59d0:	05800084 	movi	r22,2
    59d4:	04400074 	movhi	r17,1
    59d8:	8c4a1704 	addi	r17,r17,10332
    59dc:	8080004c 	andi	r2,r16,1
    59e0:	1005003a 	cmpeq	r2,r2,zero
    59e4:	1000081e 	bne	r2,zero,5a08 <_dtoa_r+0xd44>
    59e8:	89800017 	ldw	r6,0(r17)
    59ec:	89c00117 	ldw	r7,4(r17)
    59f0:	480b883a 	mov	r5,r9
    59f4:	4009883a 	mov	r4,r8
    59f8:	000e51c0 	call	e51c <__muldf3>
    59fc:	1011883a 	mov	r8,r2
    5a00:	b5800044 	addi	r22,r22,1
    5a04:	1813883a 	mov	r9,r3
    5a08:	8021d07a 	srai	r16,r16,1
    5a0c:	8c400204 	addi	r17,r17,8
    5a10:	803ff21e 	bne	r16,zero,59dc <_dtoa_r+0xd18>
    5a14:	4029883a 	mov	r20,r8
    5a18:	482b883a 	mov	r21,r9
    5a1c:	003dca06 	br	5148 <_dtoa_r+0x484>
    5a20:	d9000817 	ldw	r4,32(sp)
    5a24:	2005003a 	cmpeq	r2,r4,zero
    5a28:	1001f61e 	bne	r2,zero,6204 <_dtoa_r+0x1540>
    5a2c:	dc001117 	ldw	r16,68(sp)
    5a30:	dc801017 	ldw	r18,64(sp)
    5a34:	18c10cc4 	addi	r3,r3,1075
    5a38:	003f6106 	br	57c0 <_dtoa_r+0xafc>
    5a3c:	d8000b15 	stw	zero,44(sp)
    5a40:	d9802617 	ldw	r6,152(sp)
    5a44:	d8c00d17 	ldw	r3,52(sp)
    5a48:	30800044 	addi	r2,r6,1
    5a4c:	18ad883a 	add	r22,r3,r2
    5a50:	b13fffc4 	addi	r4,r22,-1
    5a54:	d9000e15 	stw	r4,56(sp)
    5a58:	0581f60e 	bge	zero,r22,6234 <_dtoa_r+0x1570>
    5a5c:	dd800f15 	stw	r22,60(sp)
    5a60:	003f3006 	br	5724 <_dtoa_r+0xa60>
    5a64:	d8000b15 	stw	zero,44(sp)
    5a68:	d9002617 	ldw	r4,152(sp)
    5a6c:	0101eb0e 	bge	zero,r4,621c <_dtoa_r+0x1558>
    5a70:	202d883a 	mov	r22,r4
    5a74:	d9000e15 	stw	r4,56(sp)
    5a78:	d9000f15 	stw	r4,60(sp)
    5a7c:	003f2906 	br	5724 <_dtoa_r+0xa60>
    5a80:	01800044 	movi	r6,1
    5a84:	d9800b15 	stw	r6,44(sp)
    5a88:	003ff706 	br	5a68 <_dtoa_r+0xda4>
    5a8c:	01000044 	movi	r4,1
    5a90:	d9000b15 	stw	r4,44(sp)
    5a94:	003fea06 	br	5a40 <_dtoa_r+0xd7c>
    5a98:	04000c0e 	bge	zero,r16,5acc <_dtoa_r+0xe08>
    5a9c:	d9400717 	ldw	r5,28(sp)
    5aa0:	d9001617 	ldw	r4,88(sp)
    5aa4:	01800044 	movi	r6,1
    5aa8:	0008b040 	call	8b04 <__lshift>
    5aac:	1009883a 	mov	r4,r2
    5ab0:	900b883a 	mov	r5,r18
    5ab4:	d8800715 	stw	r2,28(sp)
    5ab8:	000831c0 	call	831c <__mcmp>
    5abc:	0081e00e 	bge	zero,r2,6240 <_dtoa_r+0x157c>
    5ac0:	bdc00044 	addi	r23,r23,1
    5ac4:	00800e84 	movi	r2,58
    5ac8:	b881a226 	beq	r23,r2,6154 <_dtoa_r+0x1490>
    5acc:	b7000044 	addi	fp,r22,1
    5ad0:	b5c00005 	stb	r23,0(r22)
    5ad4:	003f7406 	br	58a8 <_dtoa_r+0xbe4>
    5ad8:	00800e44 	movi	r2,57
    5adc:	b8819d26 	beq	r23,r2,6154 <_dtoa_r+0x1490>
    5ae0:	053ffa0e 	bge	zero,r20,5acc <_dtoa_r+0xe08>
    5ae4:	8dc00c44 	addi	r23,r17,49
    5ae8:	003ff806 	br	5acc <_dtoa_r+0xe08>
    5aec:	d9001617 	ldw	r4,88(sp)
    5af0:	a80b883a 	mov	r5,r21
    5af4:	04000044 	movi	r16,1
    5af8:	00081c00 	call	81c0 <_Bfree>
    5afc:	003edf06 	br	567c <_dtoa_r+0x9b8>
    5b00:	d9001617 	ldw	r4,88(sp)
    5b04:	980b883a 	mov	r5,r19
    5b08:	01800284 	movi	r6,10
    5b0c:	000f883a 	mov	r7,zero
    5b10:	0008e740 	call	8e74 <__multadd>
    5b14:	1027883a 	mov	r19,r2
    5b18:	d8800615 	stw	r2,24(sp)
    5b1c:	003ebb06 	br	560c <_dtoa_r+0x948>
    5b20:	d9801117 	ldw	r6,68(sp)
    5b24:	d8800d17 	ldw	r2,52(sp)
    5b28:	d8000915 	stw	zero,36(sp)
    5b2c:	308dc83a 	sub	r6,r6,r2
    5b30:	0087c83a 	sub	r3,zero,r2
    5b34:	d9801115 	stw	r6,68(sp)
    5b38:	d8c01015 	stw	r3,64(sp)
    5b3c:	003cfe06 	br	4f38 <_dtoa_r+0x274>
    5b40:	018dc83a 	sub	r6,zero,r6
    5b44:	d9801115 	stw	r6,68(sp)
    5b48:	d8000a15 	stw	zero,40(sp)
    5b4c:	003cf306 	br	4f1c <_dtoa_r+0x258>
    5b50:	d9000d17 	ldw	r4,52(sp)
    5b54:	000ee680 	call	ee68 <__floatsidf>
    5b58:	880b883a 	mov	r5,r17
    5b5c:	8009883a 	mov	r4,r16
    5b60:	180f883a 	mov	r7,r3
    5b64:	100d883a 	mov	r6,r2
    5b68:	000ebc00 	call	ebc0 <__nedf2>
    5b6c:	103ce126 	beq	r2,zero,4ef4 <_dtoa_r+0x230>
    5b70:	d9800d17 	ldw	r6,52(sp)
    5b74:	31bfffc4 	addi	r6,r6,-1
    5b78:	d9800d15 	stw	r6,52(sp)
    5b7c:	003cdd06 	br	4ef4 <_dtoa_r+0x230>
    5b80:	d9000717 	ldw	r4,28(sp)
    5b84:	900b883a 	mov	r5,r18
    5b88:	000831c0 	call	831c <__mcmp>
    5b8c:	103e8d0e 	bge	r2,zero,55c4 <_dtoa_r+0x900>
    5b90:	d9400717 	ldw	r5,28(sp)
    5b94:	d9001617 	ldw	r4,88(sp)
    5b98:	01800284 	movi	r6,10
    5b9c:	000f883a 	mov	r7,zero
    5ba0:	0008e740 	call	8e74 <__multadd>
    5ba4:	d9800d17 	ldw	r6,52(sp)
    5ba8:	d8800715 	stw	r2,28(sp)
    5bac:	31bfffc4 	addi	r6,r6,-1
    5bb0:	d9800d15 	stw	r6,52(sp)
    5bb4:	b001a71e 	bne	r22,zero,6254 <_dtoa_r+0x1590>
    5bb8:	d8800e17 	ldw	r2,56(sp)
    5bbc:	d8800f15 	stw	r2,60(sp)
    5bc0:	003e8006 	br	55c4 <_dtoa_r+0x900>
    5bc4:	90800417 	ldw	r2,16(r18)
    5bc8:	1085883a 	add	r2,r2,r2
    5bcc:	1085883a 	add	r2,r2,r2
    5bd0:	1485883a 	add	r2,r2,r18
    5bd4:	11000417 	ldw	r4,16(r2)
    5bd8:	00081e80 	call	81e8 <__hi0bits>
    5bdc:	00c00804 	movi	r3,32
    5be0:	1887c83a 	sub	r3,r3,r2
    5be4:	003e5a06 	br	5550 <_dtoa_r+0x88c>
    5be8:	d9400717 	ldw	r5,28(sp)
    5bec:	d9801017 	ldw	r6,64(sp)
    5bf0:	d9001617 	ldw	r4,88(sp)
    5bf4:	0008f740 	call	8f74 <__pow5mult>
    5bf8:	d8800715 	stw	r2,28(sp)
    5bfc:	003e4306 	br	550c <_dtoa_r+0x848>
    5c00:	d9800f17 	ldw	r6,60(sp)
    5c04:	d8800d17 	ldw	r2,52(sp)
    5c08:	d9800315 	stw	r6,12(sp)
    5c0c:	d8800415 	stw	r2,16(sp)
    5c10:	d8c00b17 	ldw	r3,44(sp)
    5c14:	1805003a 	cmpeq	r2,r3,zero
    5c18:	1000e21e 	bne	r2,zero,5fa4 <_dtoa_r+0x12e0>
    5c1c:	d9000317 	ldw	r4,12(sp)
    5c20:	0005883a 	mov	r2,zero
    5c24:	00cff834 	movhi	r3,16352
    5c28:	200c90fa 	slli	r6,r4,3
    5c2c:	01000074 	movhi	r4,1
    5c30:	2109e504 	addi	r4,r4,10132
    5c34:	180b883a 	mov	r5,r3
    5c38:	310d883a 	add	r6,r6,r4
    5c3c:	327fff17 	ldw	r9,-4(r6)
    5c40:	323ffe17 	ldw	r8,-8(r6)
    5c44:	1009883a 	mov	r4,r2
    5c48:	480f883a 	mov	r7,r9
    5c4c:	400d883a 	mov	r6,r8
    5c50:	000e8e00 	call	e8e0 <__divdf3>
    5c54:	180b883a 	mov	r5,r3
    5c58:	b00d883a 	mov	r6,r22
    5c5c:	b80f883a 	mov	r7,r23
    5c60:	1009883a 	mov	r4,r2
    5c64:	000e4280 	call	e428 <__subdf3>
    5c68:	a80b883a 	mov	r5,r21
    5c6c:	a009883a 	mov	r4,r20
    5c70:	d8c01915 	stw	r3,100(sp)
    5c74:	d8801815 	stw	r2,96(sp)
    5c78:	000ef600 	call	ef60 <__fixdfsi>
    5c7c:	1009883a 	mov	r4,r2
    5c80:	1027883a 	mov	r19,r2
    5c84:	000ee680 	call	ee68 <__floatsidf>
    5c88:	a80b883a 	mov	r5,r21
    5c8c:	a009883a 	mov	r4,r20
    5c90:	180f883a 	mov	r7,r3
    5c94:	100d883a 	mov	r6,r2
    5c98:	000e4280 	call	e428 <__subdf3>
    5c9c:	d9801817 	ldw	r6,96(sp)
    5ca0:	1823883a 	mov	r17,r3
    5ca4:	d8801415 	stw	r2,80(sp)
    5ca8:	302d883a 	mov	r22,r6
    5cac:	d9800517 	ldw	r6,20(sp)
    5cb0:	9cc00c04 	addi	r19,r19,48
    5cb4:	dc401515 	stw	r17,84(sp)
    5cb8:	d8c01917 	ldw	r3,100(sp)
    5cbc:	34c00005 	stb	r19,0(r6)
    5cc0:	d8800517 	ldw	r2,20(sp)
    5cc4:	d9401917 	ldw	r5,100(sp)
    5cc8:	d9801417 	ldw	r6,80(sp)
    5ccc:	b009883a 	mov	r4,r22
    5cd0:	880f883a 	mov	r7,r17
    5cd4:	182f883a 	mov	r23,r3
    5cd8:	17000044 	addi	fp,r2,1
    5cdc:	000ec480 	call	ec48 <__gtdf2>
    5ce0:	00804e16 	blt	zero,r2,5e1c <_dtoa_r+0x1158>
    5ce4:	d9801417 	ldw	r6,80(sp)
    5ce8:	0005883a 	mov	r2,zero
    5cec:	00cffc34 	movhi	r3,16368
    5cf0:	180b883a 	mov	r5,r3
    5cf4:	880f883a 	mov	r7,r17
    5cf8:	1009883a 	mov	r4,r2
    5cfc:	000e4280 	call	e428 <__subdf3>
    5d00:	d9401917 	ldw	r5,100(sp)
    5d04:	180f883a 	mov	r7,r3
    5d08:	b009883a 	mov	r4,r22
    5d0c:	100d883a 	mov	r6,r2
    5d10:	000ec480 	call	ec48 <__gtdf2>
    5d14:	00bda216 	blt	zero,r2,53a0 <_dtoa_r+0x6dc>
    5d18:	d8c00317 	ldw	r3,12(sp)
    5d1c:	00800044 	movi	r2,1
    5d20:	10c01216 	blt	r2,r3,5d6c <_dtoa_r+0x10a8>
    5d24:	003d4506 	br	523c <_dtoa_r+0x578>
    5d28:	d9801417 	ldw	r6,80(sp)
    5d2c:	0005883a 	mov	r2,zero
    5d30:	00cffc34 	movhi	r3,16368
    5d34:	180b883a 	mov	r5,r3
    5d38:	880f883a 	mov	r7,r17
    5d3c:	1009883a 	mov	r4,r2
    5d40:	000e4280 	call	e428 <__subdf3>
    5d44:	d9c01b17 	ldw	r7,108(sp)
    5d48:	180b883a 	mov	r5,r3
    5d4c:	1009883a 	mov	r4,r2
    5d50:	b00d883a 	mov	r6,r22
    5d54:	000ed580 	call	ed58 <__ltdf2>
    5d58:	103d9116 	blt	r2,zero,53a0 <_dtoa_r+0x6dc>
    5d5c:	d9800517 	ldw	r6,20(sp)
    5d60:	d9000317 	ldw	r4,12(sp)
    5d64:	3105883a 	add	r2,r6,r4
    5d68:	e0bd3426 	beq	fp,r2,523c <_dtoa_r+0x578>
    5d6c:	04500934 	movhi	r17,16420
    5d70:	0021883a 	mov	r16,zero
    5d74:	b80b883a 	mov	r5,r23
    5d78:	b009883a 	mov	r4,r22
    5d7c:	800d883a 	mov	r6,r16
    5d80:	880f883a 	mov	r7,r17
    5d84:	000e51c0 	call	e51c <__muldf3>
    5d88:	d9401517 	ldw	r5,84(sp)
    5d8c:	d9001417 	ldw	r4,80(sp)
    5d90:	880f883a 	mov	r7,r17
    5d94:	000d883a 	mov	r6,zero
    5d98:	d8801a15 	stw	r2,104(sp)
    5d9c:	d8c01b15 	stw	r3,108(sp)
    5da0:	000e51c0 	call	e51c <__muldf3>
    5da4:	180b883a 	mov	r5,r3
    5da8:	1009883a 	mov	r4,r2
    5dac:	1823883a 	mov	r17,r3
    5db0:	1021883a 	mov	r16,r2
    5db4:	000ef600 	call	ef60 <__fixdfsi>
    5db8:	1009883a 	mov	r4,r2
    5dbc:	102b883a 	mov	r21,r2
    5dc0:	000ee680 	call	ee68 <__floatsidf>
    5dc4:	880b883a 	mov	r5,r17
    5dc8:	8009883a 	mov	r4,r16
    5dcc:	180f883a 	mov	r7,r3
    5dd0:	100d883a 	mov	r6,r2
    5dd4:	000e4280 	call	e428 <__subdf3>
    5dd8:	1021883a 	mov	r16,r2
    5ddc:	d9001b17 	ldw	r4,108(sp)
    5de0:	1823883a 	mov	r17,r3
    5de4:	dc001415 	stw	r16,80(sp)
    5de8:	ad400c04 	addi	r21,r21,48
    5dec:	dc401515 	stw	r17,84(sp)
    5df0:	d8801a17 	ldw	r2,104(sp)
    5df4:	e5400005 	stb	r21,0(fp)
    5df8:	202f883a 	mov	r23,r4
    5dfc:	d9c01b17 	ldw	r7,108(sp)
    5e00:	d9001417 	ldw	r4,80(sp)
    5e04:	880b883a 	mov	r5,r17
    5e08:	100d883a 	mov	r6,r2
    5e0c:	102d883a 	mov	r22,r2
    5e10:	e7000044 	addi	fp,fp,1
    5e14:	000ed580 	call	ed58 <__ltdf2>
    5e18:	103fc30e 	bge	r2,zero,5d28 <_dtoa_r+0x1064>
    5e1c:	d9000417 	ldw	r4,16(sp)
    5e20:	d9000d15 	stw	r4,52(sp)
    5e24:	003d7106 	br	53ec <_dtoa_r+0x728>
    5e28:	d9801717 	ldw	r6,92(sp)
    5e2c:	00800084 	movi	r2,2
    5e30:	11bde60e 	bge	r2,r6,55cc <_dtoa_r+0x908>
    5e34:	203cfb1e 	bne	r4,zero,5224 <_dtoa_r+0x560>
    5e38:	d9001617 	ldw	r4,88(sp)
    5e3c:	900b883a 	mov	r5,r18
    5e40:	01800144 	movi	r6,5
    5e44:	000f883a 	mov	r7,zero
    5e48:	0008e740 	call	8e74 <__multadd>
    5e4c:	d9000717 	ldw	r4,28(sp)
    5e50:	100b883a 	mov	r5,r2
    5e54:	1025883a 	mov	r18,r2
    5e58:	000831c0 	call	831c <__mcmp>
    5e5c:	00bcf10e 	bge	zero,r2,5224 <_dtoa_r+0x560>
    5e60:	d8c00d17 	ldw	r3,52(sp)
    5e64:	d9000517 	ldw	r4,20(sp)
    5e68:	d8000615 	stw	zero,24(sp)
    5e6c:	18c00044 	addi	r3,r3,1
    5e70:	d8c00d15 	stw	r3,52(sp)
    5e74:	00800c44 	movi	r2,49
    5e78:	27000044 	addi	fp,r4,1
    5e7c:	20800005 	stb	r2,0(r4)
    5e80:	003e8906 	br	58a8 <_dtoa_r+0xbe4>
    5e84:	d8c00517 	ldw	r3,20(sp)
    5e88:	003bc206 	br	4d94 <_dtoa_r+0xd0>
    5e8c:	01800074 	movhi	r6,1
    5e90:	318a1704 	addi	r6,r6,10332
    5e94:	30c00917 	ldw	r3,36(r6)
    5e98:	30800817 	ldw	r2,32(r6)
    5e9c:	d9001217 	ldw	r4,72(sp)
    5ea0:	d9401317 	ldw	r5,76(sp)
    5ea4:	180f883a 	mov	r7,r3
    5ea8:	100d883a 	mov	r6,r2
    5eac:	000e8e00 	call	e8e0 <__divdf3>
    5eb0:	948003cc 	andi	r18,r18,15
    5eb4:	058000c4 	movi	r22,3
    5eb8:	1029883a 	mov	r20,r2
    5ebc:	182b883a 	mov	r21,r3
    5ec0:	003c8906 	br	50e8 <_dtoa_r+0x424>
    5ec4:	d9001017 	ldw	r4,64(sp)
    5ec8:	d9800917 	ldw	r6,36(sp)
    5ecc:	0025883a 	mov	r18,zero
    5ed0:	1105c83a 	sub	r2,r2,r4
    5ed4:	2089883a 	add	r4,r4,r2
    5ed8:	308d883a 	add	r6,r6,r2
    5edc:	d9001015 	stw	r4,64(sp)
    5ee0:	d9800915 	stw	r6,36(sp)
    5ee4:	003e3206 	br	57b0 <_dtoa_r+0xaec>
    5ee8:	28800044 	addi	r2,r5,1
    5eec:	27000044 	addi	fp,r4,1
    5ef0:	20800005 	stb	r2,0(r4)
    5ef4:	003e6c06 	br	58a8 <_dtoa_r+0xbe4>
    5ef8:	d8800f17 	ldw	r2,60(sp)
    5efc:	00bce016 	blt	zero,r2,5280 <_dtoa_r+0x5bc>
    5f00:	d9800f17 	ldw	r6,60(sp)
    5f04:	303cc51e 	bne	r6,zero,521c <_dtoa_r+0x558>
    5f08:	0005883a 	mov	r2,zero
    5f0c:	00d00534 	movhi	r3,16404
    5f10:	980b883a 	mov	r5,r19
    5f14:	180f883a 	mov	r7,r3
    5f18:	9009883a 	mov	r4,r18
    5f1c:	100d883a 	mov	r6,r2
    5f20:	000e51c0 	call	e51c <__muldf3>
    5f24:	180b883a 	mov	r5,r3
    5f28:	a80f883a 	mov	r7,r21
    5f2c:	1009883a 	mov	r4,r2
    5f30:	a00d883a 	mov	r6,r20
    5f34:	000ecd00 	call	ecd0 <__gedf2>
    5f38:	103cb80e 	bge	r2,zero,521c <_dtoa_r+0x558>
    5f3c:	0027883a 	mov	r19,zero
    5f40:	0025883a 	mov	r18,zero
    5f44:	003fc606 	br	5e60 <_dtoa_r+0x119c>
    5f48:	99400117 	ldw	r5,4(r19)
    5f4c:	d9001617 	ldw	r4,88(sp)
    5f50:	00087400 	call	8740 <_Balloc>
    5f54:	99800417 	ldw	r6,16(r19)
    5f58:	11000304 	addi	r4,r2,12
    5f5c:	99400304 	addi	r5,r19,12
    5f60:	318d883a 	add	r6,r6,r6
    5f64:	318d883a 	add	r6,r6,r6
    5f68:	31800204 	addi	r6,r6,8
    5f6c:	1023883a 	mov	r17,r2
    5f70:	0007fa80 	call	7fa8 <memcpy>
    5f74:	d9001617 	ldw	r4,88(sp)
    5f78:	880b883a 	mov	r5,r17
    5f7c:	01800044 	movi	r6,1
    5f80:	0008b040 	call	8b04 <__lshift>
    5f84:	100b883a 	mov	r5,r2
    5f88:	003d9c06 	br	55fc <_dtoa_r+0x938>
    5f8c:	00800e44 	movi	r2,57
    5f90:	b8807026 	beq	r23,r2,6154 <_dtoa_r+0x1490>
    5f94:	b8800044 	addi	r2,r23,1
    5f98:	b7000044 	addi	fp,r22,1
    5f9c:	b0800005 	stb	r2,0(r22)
    5fa0:	003e4106 	br	58a8 <_dtoa_r+0xbe4>
    5fa4:	d8800317 	ldw	r2,12(sp)
    5fa8:	01800074 	movhi	r6,1
    5fac:	3189e504 	addi	r6,r6,10132
    5fb0:	b009883a 	mov	r4,r22
    5fb4:	100e90fa 	slli	r7,r2,3
    5fb8:	b80b883a 	mov	r5,r23
    5fbc:	398f883a 	add	r7,r7,r6
    5fc0:	38bffe17 	ldw	r2,-8(r7)
    5fc4:	d9800517 	ldw	r6,20(sp)
    5fc8:	38ffff17 	ldw	r3,-4(r7)
    5fcc:	37000044 	addi	fp,r6,1
    5fd0:	180f883a 	mov	r7,r3
    5fd4:	100d883a 	mov	r6,r2
    5fd8:	000e51c0 	call	e51c <__muldf3>
    5fdc:	a80b883a 	mov	r5,r21
    5fe0:	a009883a 	mov	r4,r20
    5fe4:	182f883a 	mov	r23,r3
    5fe8:	102d883a 	mov	r22,r2
    5fec:	000ef600 	call	ef60 <__fixdfsi>
    5ff0:	1009883a 	mov	r4,r2
    5ff4:	1027883a 	mov	r19,r2
    5ff8:	000ee680 	call	ee68 <__floatsidf>
    5ffc:	a80b883a 	mov	r5,r21
    6000:	a009883a 	mov	r4,r20
    6004:	180f883a 	mov	r7,r3
    6008:	100d883a 	mov	r6,r2
    600c:	000e4280 	call	e428 <__subdf3>
    6010:	180b883a 	mov	r5,r3
    6014:	d8c00517 	ldw	r3,20(sp)
    6018:	9cc00c04 	addi	r19,r19,48
    601c:	1009883a 	mov	r4,r2
    6020:	1cc00005 	stb	r19,0(r3)
    6024:	2021883a 	mov	r16,r4
    6028:	d9000317 	ldw	r4,12(sp)
    602c:	00800044 	movi	r2,1
    6030:	2823883a 	mov	r17,r5
    6034:	20802226 	beq	r4,r2,60c0 <_dtoa_r+0x13fc>
    6038:	1029883a 	mov	r20,r2
    603c:	0005883a 	mov	r2,zero
    6040:	00d00934 	movhi	r3,16420
    6044:	180f883a 	mov	r7,r3
    6048:	100d883a 	mov	r6,r2
    604c:	880b883a 	mov	r5,r17
    6050:	8009883a 	mov	r4,r16
    6054:	000e51c0 	call	e51c <__muldf3>
    6058:	180b883a 	mov	r5,r3
    605c:	1009883a 	mov	r4,r2
    6060:	1823883a 	mov	r17,r3
    6064:	1021883a 	mov	r16,r2
    6068:	000ef600 	call	ef60 <__fixdfsi>
    606c:	1009883a 	mov	r4,r2
    6070:	102b883a 	mov	r21,r2
    6074:	000ee680 	call	ee68 <__floatsidf>
    6078:	880b883a 	mov	r5,r17
    607c:	8009883a 	mov	r4,r16
    6080:	180f883a 	mov	r7,r3
    6084:	100d883a 	mov	r6,r2
    6088:	000e4280 	call	e428 <__subdf3>
    608c:	180b883a 	mov	r5,r3
    6090:	d8c00517 	ldw	r3,20(sp)
    6094:	1009883a 	mov	r4,r2
    6098:	ad400c04 	addi	r21,r21,48
    609c:	1d05883a 	add	r2,r3,r20
    60a0:	15400005 	stb	r21,0(r2)
    60a4:	2021883a 	mov	r16,r4
    60a8:	d9000317 	ldw	r4,12(sp)
    60ac:	a5000044 	addi	r20,r20,1
    60b0:	2823883a 	mov	r17,r5
    60b4:	a13fe11e 	bne	r20,r4,603c <_dtoa_r+0x1378>
    60b8:	e505883a 	add	r2,fp,r20
    60bc:	173fffc4 	addi	fp,r2,-1
    60c0:	0025883a 	mov	r18,zero
    60c4:	04cff834 	movhi	r19,16352
    60c8:	b009883a 	mov	r4,r22
    60cc:	b80b883a 	mov	r5,r23
    60d0:	900d883a 	mov	r6,r18
    60d4:	980f883a 	mov	r7,r19
    60d8:	000e4a80 	call	e4a8 <__adddf3>
    60dc:	180b883a 	mov	r5,r3
    60e0:	1009883a 	mov	r4,r2
    60e4:	800d883a 	mov	r6,r16
    60e8:	880f883a 	mov	r7,r17
    60ec:	000ed580 	call	ed58 <__ltdf2>
    60f0:	103cab16 	blt	r2,zero,53a0 <_dtoa_r+0x6dc>
    60f4:	0009883a 	mov	r4,zero
    60f8:	980b883a 	mov	r5,r19
    60fc:	b80f883a 	mov	r7,r23
    6100:	b00d883a 	mov	r6,r22
    6104:	000e4280 	call	e428 <__subdf3>
    6108:	180b883a 	mov	r5,r3
    610c:	880f883a 	mov	r7,r17
    6110:	1009883a 	mov	r4,r2
    6114:	800d883a 	mov	r6,r16
    6118:	000ec480 	call	ec48 <__gtdf2>
    611c:	00bc470e 	bge	zero,r2,523c <_dtoa_r+0x578>
    6120:	00c00c04 	movi	r3,48
    6124:	e73fffc4 	addi	fp,fp,-1
    6128:	e0800007 	ldb	r2,0(fp)
    612c:	10fffd26 	beq	r2,r3,6124 <_dtoa_r+0x1460>
    6130:	d9800417 	ldw	r6,16(sp)
    6134:	e7000044 	addi	fp,fp,1
    6138:	d9800d15 	stw	r6,52(sp)
    613c:	003cab06 	br	53ec <_dtoa_r+0x728>
    6140:	d8c00f17 	ldw	r3,60(sp)
    6144:	d9001117 	ldw	r4,68(sp)
    6148:	20e1c83a 	sub	r16,r4,r3
    614c:	0007883a 	mov	r3,zero
    6150:	003d9b06 	br	57c0 <_dtoa_r+0xafc>
    6154:	00800e44 	movi	r2,57
    6158:	b0800005 	stb	r2,0(r22)
    615c:	b5800044 	addi	r22,r22,1
    6160:	003dc106 	br	5868 <_dtoa_r+0xba4>
    6164:	05800084 	movi	r22,2
    6168:	003bf706 	br	5148 <_dtoa_r+0x484>
    616c:	d9000f17 	ldw	r4,60(sp)
    6170:	013c000e 	bge	zero,r4,5174 <_dtoa_r+0x4b0>
    6174:	d9800e17 	ldw	r6,56(sp)
    6178:	01bc300e 	bge	zero,r6,523c <_dtoa_r+0x578>
    617c:	0005883a 	mov	r2,zero
    6180:	00d00934 	movhi	r3,16420
    6184:	a80b883a 	mov	r5,r21
    6188:	180f883a 	mov	r7,r3
    618c:	a009883a 	mov	r4,r20
    6190:	100d883a 	mov	r6,r2
    6194:	000e51c0 	call	e51c <__muldf3>
    6198:	b1000044 	addi	r4,r22,1
    619c:	1021883a 	mov	r16,r2
    61a0:	1823883a 	mov	r17,r3
    61a4:	000ee680 	call	ee68 <__floatsidf>
    61a8:	880b883a 	mov	r5,r17
    61ac:	8009883a 	mov	r4,r16
    61b0:	180f883a 	mov	r7,r3
    61b4:	100d883a 	mov	r6,r2
    61b8:	000e51c0 	call	e51c <__muldf3>
    61bc:	0011883a 	mov	r8,zero
    61c0:	02500734 	movhi	r9,16412
    61c4:	180b883a 	mov	r5,r3
    61c8:	480f883a 	mov	r7,r9
    61cc:	1009883a 	mov	r4,r2
    61d0:	400d883a 	mov	r6,r8
    61d4:	000e4a80 	call	e4a8 <__adddf3>
    61d8:	102d883a 	mov	r22,r2
    61dc:	00bf3034 	movhi	r2,64704
    61e0:	10ef883a 	add	r23,r2,r3
    61e4:	d8800d17 	ldw	r2,52(sp)
    61e8:	d8c00e17 	ldw	r3,56(sp)
    61ec:	8029883a 	mov	r20,r16
    61f0:	10bfffc4 	addi	r2,r2,-1
    61f4:	882b883a 	mov	r21,r17
    61f8:	d8800415 	stw	r2,16(sp)
    61fc:	d8c00315 	stw	r3,12(sp)
    6200:	003e8306 	br	5c10 <_dtoa_r+0xf4c>
    6204:	d8800117 	ldw	r2,4(sp)
    6208:	dc001117 	ldw	r16,68(sp)
    620c:	dc801017 	ldw	r18,64(sp)
    6210:	00c00d84 	movi	r3,54
    6214:	1887c83a 	sub	r3,r3,r2
    6218:	003d6906 	br	57c0 <_dtoa_r+0xafc>
    621c:	01800044 	movi	r6,1
    6220:	3021883a 	mov	r16,r6
    6224:	d9800f15 	stw	r6,60(sp)
    6228:	d9802615 	stw	r6,152(sp)
    622c:	d9800e15 	stw	r6,56(sp)
    6230:	003b9306 	br	5080 <_dtoa_r+0x3bc>
    6234:	b021883a 	mov	r16,r22
    6238:	dd800f15 	stw	r22,60(sp)
    623c:	003b9006 	br	5080 <_dtoa_r+0x3bc>
    6240:	103e221e 	bne	r2,zero,5acc <_dtoa_r+0xe08>
    6244:	b880004c 	andi	r2,r23,1
    6248:	1005003a 	cmpeq	r2,r2,zero
    624c:	103e1f1e 	bne	r2,zero,5acc <_dtoa_r+0xe08>
    6250:	003e1b06 	br	5ac0 <_dtoa_r+0xdfc>
    6254:	d9001617 	ldw	r4,88(sp)
    6258:	980b883a 	mov	r5,r19
    625c:	01800284 	movi	r6,10
    6260:	000f883a 	mov	r7,zero
    6264:	0008e740 	call	8e74 <__multadd>
    6268:	d8c00e17 	ldw	r3,56(sp)
    626c:	1027883a 	mov	r19,r2
    6270:	d8c00f15 	stw	r3,60(sp)
    6274:	003cd306 	br	55c4 <_dtoa_r+0x900>

00006278 <_fflush_r>:
    6278:	defffb04 	addi	sp,sp,-20
    627c:	dcc00315 	stw	r19,12(sp)
    6280:	dc800215 	stw	r18,8(sp)
    6284:	dfc00415 	stw	ra,16(sp)
    6288:	dc400115 	stw	r17,4(sp)
    628c:	dc000015 	stw	r16,0(sp)
    6290:	2027883a 	mov	r19,r4
    6294:	2825883a 	mov	r18,r5
    6298:	20000226 	beq	r4,zero,62a4 <_fflush_r+0x2c>
    629c:	20800e17 	ldw	r2,56(r4)
    62a0:	10005626 	beq	r2,zero,63fc <_fflush_r+0x184>
    62a4:	9100030b 	ldhu	r4,12(r18)
    62a8:	20ffffcc 	andi	r3,r4,65535
    62ac:	18e0001c 	xori	r3,r3,32768
    62b0:	18e00004 	addi	r3,r3,-32768
    62b4:	1880020c 	andi	r2,r3,8
    62b8:	1000261e 	bne	r2,zero,6354 <_fflush_r+0xdc>
    62bc:	90c00117 	ldw	r3,4(r18)
    62c0:	20820014 	ori	r2,r4,2048
    62c4:	9080030d 	sth	r2,12(r18)
    62c8:	1009883a 	mov	r4,r2
    62cc:	00c0400e 	bge	zero,r3,63d0 <_fflush_r+0x158>
    62d0:	92000a17 	ldw	r8,40(r18)
    62d4:	40004026 	beq	r8,zero,63d8 <_fflush_r+0x160>
    62d8:	2084000c 	andi	r2,r4,4096
    62dc:	10005326 	beq	r2,zero,642c <_fflush_r+0x1b4>
    62e0:	94001417 	ldw	r16,80(r18)
    62e4:	9080030b 	ldhu	r2,12(r18)
    62e8:	1080010c 	andi	r2,r2,4
    62ec:	1000481e 	bne	r2,zero,6410 <_fflush_r+0x198>
    62f0:	91400717 	ldw	r5,28(r18)
    62f4:	9809883a 	mov	r4,r19
    62f8:	800d883a 	mov	r6,r16
    62fc:	000f883a 	mov	r7,zero
    6300:	403ee83a 	callr	r8
    6304:	8080261e 	bne	r16,r2,63a0 <_fflush_r+0x128>
    6308:	9080030b 	ldhu	r2,12(r18)
    630c:	91000417 	ldw	r4,16(r18)
    6310:	90000115 	stw	zero,4(r18)
    6314:	10bdffcc 	andi	r2,r2,63487
    6318:	10ffffcc 	andi	r3,r2,65535
    631c:	18c4000c 	andi	r3,r3,4096
    6320:	9080030d 	sth	r2,12(r18)
    6324:	91000015 	stw	r4,0(r18)
    6328:	18002b26 	beq	r3,zero,63d8 <_fflush_r+0x160>
    632c:	0007883a 	mov	r3,zero
    6330:	1805883a 	mov	r2,r3
    6334:	94001415 	stw	r16,80(r18)
    6338:	dfc00417 	ldw	ra,16(sp)
    633c:	dcc00317 	ldw	r19,12(sp)
    6340:	dc800217 	ldw	r18,8(sp)
    6344:	dc400117 	ldw	r17,4(sp)
    6348:	dc000017 	ldw	r16,0(sp)
    634c:	dec00504 	addi	sp,sp,20
    6350:	f800283a 	ret
    6354:	94400417 	ldw	r17,16(r18)
    6358:	88001f26 	beq	r17,zero,63d8 <_fflush_r+0x160>
    635c:	90800017 	ldw	r2,0(r18)
    6360:	18c000cc 	andi	r3,r3,3
    6364:	94400015 	stw	r17,0(r18)
    6368:	1461c83a 	sub	r16,r2,r17
    636c:	18002526 	beq	r3,zero,6404 <_fflush_r+0x18c>
    6370:	0005883a 	mov	r2,zero
    6374:	90800215 	stw	r2,8(r18)
    6378:	0400170e 	bge	zero,r16,63d8 <_fflush_r+0x160>
    637c:	90c00917 	ldw	r3,36(r18)
    6380:	91400717 	ldw	r5,28(r18)
    6384:	880d883a 	mov	r6,r17
    6388:	800f883a 	mov	r7,r16
    638c:	9809883a 	mov	r4,r19
    6390:	183ee83a 	callr	r3
    6394:	88a3883a 	add	r17,r17,r2
    6398:	80a1c83a 	sub	r16,r16,r2
    639c:	00bff616 	blt	zero,r2,6378 <_fflush_r+0x100>
    63a0:	9080030b 	ldhu	r2,12(r18)
    63a4:	00ffffc4 	movi	r3,-1
    63a8:	10801014 	ori	r2,r2,64
    63ac:	9080030d 	sth	r2,12(r18)
    63b0:	1805883a 	mov	r2,r3
    63b4:	dfc00417 	ldw	ra,16(sp)
    63b8:	dcc00317 	ldw	r19,12(sp)
    63bc:	dc800217 	ldw	r18,8(sp)
    63c0:	dc400117 	ldw	r17,4(sp)
    63c4:	dc000017 	ldw	r16,0(sp)
    63c8:	dec00504 	addi	sp,sp,20
    63cc:	f800283a 	ret
    63d0:	90800f17 	ldw	r2,60(r18)
    63d4:	00bfbe16 	blt	zero,r2,62d0 <_fflush_r+0x58>
    63d8:	0007883a 	mov	r3,zero
    63dc:	1805883a 	mov	r2,r3
    63e0:	dfc00417 	ldw	ra,16(sp)
    63e4:	dcc00317 	ldw	r19,12(sp)
    63e8:	dc800217 	ldw	r18,8(sp)
    63ec:	dc400117 	ldw	r17,4(sp)
    63f0:	dc000017 	ldw	r16,0(sp)
    63f4:	dec00504 	addi	sp,sp,20
    63f8:	f800283a 	ret
    63fc:	00065100 	call	6510 <__sinit>
    6400:	003fa806 	br	62a4 <_fflush_r+0x2c>
    6404:	90800517 	ldw	r2,20(r18)
    6408:	90800215 	stw	r2,8(r18)
    640c:	003fda06 	br	6378 <_fflush_r+0x100>
    6410:	90800117 	ldw	r2,4(r18)
    6414:	90c00c17 	ldw	r3,48(r18)
    6418:	80a1c83a 	sub	r16,r16,r2
    641c:	183fb426 	beq	r3,zero,62f0 <_fflush_r+0x78>
    6420:	90800f17 	ldw	r2,60(r18)
    6424:	80a1c83a 	sub	r16,r16,r2
    6428:	003fb106 	br	62f0 <_fflush_r+0x78>
    642c:	91400717 	ldw	r5,28(r18)
    6430:	9809883a 	mov	r4,r19
    6434:	000d883a 	mov	r6,zero
    6438:	01c00044 	movi	r7,1
    643c:	403ee83a 	callr	r8
    6440:	1021883a 	mov	r16,r2
    6444:	00bfffc4 	movi	r2,-1
    6448:	80800226 	beq	r16,r2,6454 <_fflush_r+0x1dc>
    644c:	92000a17 	ldw	r8,40(r18)
    6450:	003fa406 	br	62e4 <_fflush_r+0x6c>
    6454:	98c00017 	ldw	r3,0(r19)
    6458:	00800744 	movi	r2,29
    645c:	18bfde26 	beq	r3,r2,63d8 <_fflush_r+0x160>
    6460:	9080030b 	ldhu	r2,12(r18)
    6464:	8007883a 	mov	r3,r16
    6468:	10801014 	ori	r2,r2,64
    646c:	9080030d 	sth	r2,12(r18)
    6470:	003fcf06 	br	63b0 <_fflush_r+0x138>

00006474 <fflush>:
    6474:	01400034 	movhi	r5,0
    6478:	29589e04 	addi	r5,r5,25208
    647c:	2007883a 	mov	r3,r4
    6480:	20000526 	beq	r4,zero,6498 <fflush+0x24>
    6484:	00800074 	movhi	r2,1
    6488:	10917404 	addi	r2,r2,17872
    648c:	11000017 	ldw	r4,0(r2)
    6490:	180b883a 	mov	r5,r3
    6494:	00062781 	jmpi	6278 <_fflush_r>
    6498:	00800074 	movhi	r2,1
    649c:	10917504 	addi	r2,r2,17876
    64a0:	11000017 	ldw	r4,0(r2)
    64a4:	00072801 	jmpi	7280 <_fwalk_reent>

000064a8 <std>:
    64a8:	00800074 	movhi	r2,1
    64ac:	10a70104 	addi	r2,r2,-25596
    64b0:	20800b15 	stw	r2,44(r4)
    64b4:	00800074 	movhi	r2,1
    64b8:	10a73c04 	addi	r2,r2,-25360
    64bc:	20800815 	stw	r2,32(r4)
    64c0:	00c00074 	movhi	r3,1
    64c4:	18e71d04 	addi	r3,r3,-25484
    64c8:	00800074 	movhi	r2,1
    64cc:	10a70304 	addi	r2,r2,-25588
    64d0:	2140030d 	sth	r5,12(r4)
    64d4:	2180038d 	sth	r6,14(r4)
    64d8:	20c00915 	stw	r3,36(r4)
    64dc:	20800a15 	stw	r2,40(r4)
    64e0:	20000015 	stw	zero,0(r4)
    64e4:	20000115 	stw	zero,4(r4)
    64e8:	20000215 	stw	zero,8(r4)
    64ec:	20000415 	stw	zero,16(r4)
    64f0:	20000515 	stw	zero,20(r4)
    64f4:	20000615 	stw	zero,24(r4)
    64f8:	21000715 	stw	r4,28(r4)
    64fc:	f800283a 	ret

00006500 <__sfp_lock_acquire>:
    6500:	f800283a 	ret

00006504 <__sfp_lock_release>:
    6504:	f800283a 	ret

00006508 <__sinit_lock_acquire>:
    6508:	f800283a 	ret

0000650c <__sinit_lock_release>:
    650c:	f800283a 	ret

00006510 <__sinit>:
    6510:	20800e17 	ldw	r2,56(r4)
    6514:	defffd04 	addi	sp,sp,-12
    6518:	dc400115 	stw	r17,4(sp)
    651c:	dc000015 	stw	r16,0(sp)
    6520:	dfc00215 	stw	ra,8(sp)
    6524:	04400044 	movi	r17,1
    6528:	01400104 	movi	r5,4
    652c:	000d883a 	mov	r6,zero
    6530:	2021883a 	mov	r16,r4
    6534:	2200bb04 	addi	r8,r4,748
    6538:	200f883a 	mov	r7,r4
    653c:	10000526 	beq	r2,zero,6554 <__sinit+0x44>
    6540:	dfc00217 	ldw	ra,8(sp)
    6544:	dc400117 	ldw	r17,4(sp)
    6548:	dc000017 	ldw	r16,0(sp)
    654c:	dec00304 	addi	sp,sp,12
    6550:	f800283a 	ret
    6554:	21000117 	ldw	r4,4(r4)
    6558:	00800034 	movhi	r2,0
    655c:	10997d04 	addi	r2,r2,26100
    6560:	00c000c4 	movi	r3,3
    6564:	80800f15 	stw	r2,60(r16)
    6568:	80c0b915 	stw	r3,740(r16)
    656c:	8200ba15 	stw	r8,744(r16)
    6570:	84400e15 	stw	r17,56(r16)
    6574:	8000b815 	stw	zero,736(r16)
    6578:	00064a80 	call	64a8 <std>
    657c:	81000217 	ldw	r4,8(r16)
    6580:	880d883a 	mov	r6,r17
    6584:	800f883a 	mov	r7,r16
    6588:	01400284 	movi	r5,10
    658c:	00064a80 	call	64a8 <std>
    6590:	81000317 	ldw	r4,12(r16)
    6594:	800f883a 	mov	r7,r16
    6598:	01400484 	movi	r5,18
    659c:	01800084 	movi	r6,2
    65a0:	dfc00217 	ldw	ra,8(sp)
    65a4:	dc400117 	ldw	r17,4(sp)
    65a8:	dc000017 	ldw	r16,0(sp)
    65ac:	dec00304 	addi	sp,sp,12
    65b0:	00064a81 	jmpi	64a8 <std>

000065b4 <__fp_lock>:
    65b4:	0005883a 	mov	r2,zero
    65b8:	f800283a 	ret

000065bc <__fp_unlock>:
    65bc:	0005883a 	mov	r2,zero
    65c0:	f800283a 	ret

000065c4 <__fp_unlock_all>:
    65c4:	00800074 	movhi	r2,1
    65c8:	10917404 	addi	r2,r2,17872
    65cc:	11000017 	ldw	r4,0(r2)
    65d0:	01400034 	movhi	r5,0
    65d4:	29596f04 	addi	r5,r5,26044
    65d8:	00073481 	jmpi	7348 <_fwalk>

000065dc <__fp_lock_all>:
    65dc:	00800074 	movhi	r2,1
    65e0:	10917404 	addi	r2,r2,17872
    65e4:	11000017 	ldw	r4,0(r2)
    65e8:	01400034 	movhi	r5,0
    65ec:	29596d04 	addi	r5,r5,26036
    65f0:	00073481 	jmpi	7348 <_fwalk>

000065f4 <_cleanup_r>:
    65f4:	01400074 	movhi	r5,1
    65f8:	29713c04 	addi	r5,r5,-15120
    65fc:	00073481 	jmpi	7348 <_fwalk>

00006600 <_cleanup>:
    6600:	00800074 	movhi	r2,1
    6604:	10917504 	addi	r2,r2,17876
    6608:	11000017 	ldw	r4,0(r2)
    660c:	00065f41 	jmpi	65f4 <_cleanup_r>

00006610 <__sfmoreglue>:
    6610:	defffc04 	addi	sp,sp,-16
    6614:	dc400115 	stw	r17,4(sp)
    6618:	2c401724 	muli	r17,r5,92
    661c:	dc800215 	stw	r18,8(sp)
    6620:	2825883a 	mov	r18,r5
    6624:	89400304 	addi	r5,r17,12
    6628:	dc000015 	stw	r16,0(sp)
    662c:	dfc00315 	stw	ra,12(sp)
    6630:	00076840 	call	7684 <_malloc_r>
    6634:	0021883a 	mov	r16,zero
    6638:	880d883a 	mov	r6,r17
    663c:	000b883a 	mov	r5,zero
    6640:	10000626 	beq	r2,zero,665c <__sfmoreglue+0x4c>
    6644:	11000304 	addi	r4,r2,12
    6648:	14800115 	stw	r18,4(r2)
    664c:	10000015 	stw	zero,0(r2)
    6650:	11000215 	stw	r4,8(r2)
    6654:	1021883a 	mov	r16,r2
    6658:	00081280 	call	8128 <memset>
    665c:	8005883a 	mov	r2,r16
    6660:	dfc00317 	ldw	ra,12(sp)
    6664:	dc800217 	ldw	r18,8(sp)
    6668:	dc400117 	ldw	r17,4(sp)
    666c:	dc000017 	ldw	r16,0(sp)
    6670:	dec00404 	addi	sp,sp,16
    6674:	f800283a 	ret

00006678 <__sfp>:
    6678:	defffd04 	addi	sp,sp,-12
    667c:	00800074 	movhi	r2,1
    6680:	10917504 	addi	r2,r2,17876
    6684:	dc000015 	stw	r16,0(sp)
    6688:	14000017 	ldw	r16,0(r2)
    668c:	dc400115 	stw	r17,4(sp)
    6690:	dfc00215 	stw	ra,8(sp)
    6694:	80800e17 	ldw	r2,56(r16)
    6698:	2023883a 	mov	r17,r4
    669c:	10002626 	beq	r2,zero,6738 <__sfp+0xc0>
    66a0:	8400b804 	addi	r16,r16,736
    66a4:	80800117 	ldw	r2,4(r16)
    66a8:	81000217 	ldw	r4,8(r16)
    66ac:	10ffffc4 	addi	r3,r2,-1
    66b0:	18000916 	blt	r3,zero,66d8 <__sfp+0x60>
    66b4:	2080030f 	ldh	r2,12(r4)
    66b8:	10000b26 	beq	r2,zero,66e8 <__sfp+0x70>
    66bc:	017fffc4 	movi	r5,-1
    66c0:	00000206 	br	66cc <__sfp+0x54>
    66c4:	2080030f 	ldh	r2,12(r4)
    66c8:	10000726 	beq	r2,zero,66e8 <__sfp+0x70>
    66cc:	18ffffc4 	addi	r3,r3,-1
    66d0:	21001704 	addi	r4,r4,92
    66d4:	197ffb1e 	bne	r3,r5,66c4 <__sfp+0x4c>
    66d8:	80800017 	ldw	r2,0(r16)
    66dc:	10001926 	beq	r2,zero,6744 <__sfp+0xcc>
    66e0:	1021883a 	mov	r16,r2
    66e4:	003fef06 	br	66a4 <__sfp+0x2c>
    66e8:	00bfffc4 	movi	r2,-1
    66ec:	00c00044 	movi	r3,1
    66f0:	2080038d 	sth	r2,14(r4)
    66f4:	20c0030d 	sth	r3,12(r4)
    66f8:	20000015 	stw	zero,0(r4)
    66fc:	20000215 	stw	zero,8(r4)
    6700:	20000115 	stw	zero,4(r4)
    6704:	20000415 	stw	zero,16(r4)
    6708:	20000515 	stw	zero,20(r4)
    670c:	20000615 	stw	zero,24(r4)
    6710:	20000c15 	stw	zero,48(r4)
    6714:	20000d15 	stw	zero,52(r4)
    6718:	20001115 	stw	zero,68(r4)
    671c:	20001215 	stw	zero,72(r4)
    6720:	2005883a 	mov	r2,r4
    6724:	dfc00217 	ldw	ra,8(sp)
    6728:	dc400117 	ldw	r17,4(sp)
    672c:	dc000017 	ldw	r16,0(sp)
    6730:	dec00304 	addi	sp,sp,12
    6734:	f800283a 	ret
    6738:	8009883a 	mov	r4,r16
    673c:	00065100 	call	6510 <__sinit>
    6740:	003fd706 	br	66a0 <__sfp+0x28>
    6744:	8809883a 	mov	r4,r17
    6748:	01400104 	movi	r5,4
    674c:	00066100 	call	6610 <__sfmoreglue>
    6750:	80800015 	stw	r2,0(r16)
    6754:	103fe21e 	bne	r2,zero,66e0 <__sfp+0x68>
    6758:	00800304 	movi	r2,12
    675c:	0009883a 	mov	r4,zero
    6760:	88800015 	stw	r2,0(r17)
    6764:	003fee06 	br	6720 <__sfp+0xa8>

00006768 <_fread_r>:
    6768:	defff504 	addi	sp,sp,-44
    676c:	ddc00815 	stw	r23,32(sp)
    6770:	39af383a 	mul	r23,r7,r6
    6774:	df000915 	stw	fp,36(sp)
    6778:	dd800715 	stw	r22,28(sp)
    677c:	dcc00415 	stw	r19,16(sp)
    6780:	dc000115 	stw	r16,4(sp)
    6784:	dfc00a15 	stw	ra,40(sp)
    6788:	dd400615 	stw	r21,24(sp)
    678c:	dd000515 	stw	r20,20(sp)
    6790:	dc800315 	stw	r18,12(sp)
    6794:	dc400215 	stw	r17,8(sp)
    6798:	d9800015 	stw	r6,0(sp)
    679c:	3839883a 	mov	fp,r7
    67a0:	2821883a 	mov	r16,r5
    67a4:	202d883a 	mov	r22,r4
    67a8:	dcc00b17 	ldw	r19,44(sp)
    67ac:	b8005926 	beq	r23,zero,6914 <_fread_r+0x1ac>
    67b0:	20000226 	beq	r4,zero,67bc <_fread_r+0x54>
    67b4:	20800e17 	ldw	r2,56(r4)
    67b8:	10005826 	beq	r2,zero,691c <_fread_r+0x1b4>
    67bc:	9c400117 	ldw	r17,4(r19)
    67c0:	88005916 	blt	r17,zero,6928 <_fread_r+0x1c0>
    67c4:	9880030b 	ldhu	r2,12(r19)
    67c8:	8029883a 	mov	r20,r16
    67cc:	1080008c 	andi	r2,r2,2
    67d0:	1000221e 	bne	r2,zero,685c <_fread_r+0xf4>
    67d4:	b825883a 	mov	r18,r23
    67d8:	00000106 	br	67e0 <_fread_r+0x78>
    67dc:	9c400117 	ldw	r17,4(r19)
    67e0:	a009883a 	mov	r4,r20
    67e4:	880d883a 	mov	r6,r17
    67e8:	8c80542e 	bgeu	r17,r18,693c <_fread_r+0x1d4>
    67ec:	99400017 	ldw	r5,0(r19)
    67f0:	a469883a 	add	r20,r20,r17
    67f4:	9465c83a 	sub	r18,r18,r17
    67f8:	0007fa80 	call	7fa8 <memcpy>
    67fc:	98800017 	ldw	r2,0(r19)
    6800:	b009883a 	mov	r4,r22
    6804:	980b883a 	mov	r5,r19
    6808:	1461883a 	add	r16,r2,r17
    680c:	9c000015 	stw	r16,0(r19)
    6810:	00097a80 	call	97a8 <__srefill_r>
    6814:	103ff126 	beq	r2,zero,67dc <_fread_r+0x74>
    6818:	d9400017 	ldw	r5,0(sp)
    681c:	bc89c83a 	sub	r4,r23,r18
    6820:	000f37c0 	call	f37c <__udivsi3>
    6824:	1039883a 	mov	fp,r2
    6828:	e005883a 	mov	r2,fp
    682c:	dfc00a17 	ldw	ra,40(sp)
    6830:	df000917 	ldw	fp,36(sp)
    6834:	ddc00817 	ldw	r23,32(sp)
    6838:	dd800717 	ldw	r22,28(sp)
    683c:	dd400617 	ldw	r21,24(sp)
    6840:	dd000517 	ldw	r20,20(sp)
    6844:	dcc00417 	ldw	r19,16(sp)
    6848:	dc800317 	ldw	r18,12(sp)
    684c:	dc400217 	ldw	r17,8(sp)
    6850:	dc000117 	ldw	r16,4(sp)
    6854:	dec00b04 	addi	sp,sp,44
    6858:	f800283a 	ret
    685c:	b825883a 	mov	r18,r23
    6860:	8dc03436 	bltu	r17,r23,6934 <_fread_r+0x1cc>
    6864:	99400017 	ldw	r5,0(r19)
    6868:	a009883a 	mov	r4,r20
    686c:	900d883a 	mov	r6,r18
    6870:	0007fa80 	call	7fa8 <memcpy>
    6874:	9c000017 	ldw	r16,0(r19)
    6878:	98800117 	ldw	r2,4(r19)
    687c:	99400c17 	ldw	r5,48(r19)
    6880:	84a1883a 	add	r16,r16,r18
    6884:	14a3c83a 	sub	r17,r2,r18
    6888:	a4ab883a 	add	r21,r20,r18
    688c:	9c400115 	stw	r17,4(r19)
    6890:	9c000015 	stw	r16,0(r19)
    6894:	bca9c83a 	sub	r20,r23,r18
    6898:	28000826 	beq	r5,zero,68bc <_fread_r+0x154>
    689c:	a03fe226 	beq	r20,zero,6828 <_fread_r+0xc0>
    68a0:	98801004 	addi	r2,r19,64
    68a4:	28800326 	beq	r5,r2,68b4 <_fread_r+0x14c>
    68a8:	b009883a 	mov	r4,r22
    68ac:	0006ad00 	call	6ad0 <_free_r>
    68b0:	9c000017 	ldw	r16,0(r19)
    68b4:	98000c15 	stw	zero,48(r19)
    68b8:	00000106 	br	68c0 <_fread_r+0x158>
    68bc:	a03fda26 	beq	r20,zero,6828 <_fread_r+0xc0>
    68c0:	9c800417 	ldw	r18,16(r19)
    68c4:	9c400517 	ldw	r17,20(r19)
    68c8:	9d400015 	stw	r21,0(r19)
    68cc:	9d400415 	stw	r21,16(r19)
    68d0:	9d000515 	stw	r20,20(r19)
    68d4:	b009883a 	mov	r4,r22
    68d8:	980b883a 	mov	r5,r19
    68dc:	00097a80 	call	97a8 <__srefill_r>
    68e0:	98c00117 	ldw	r3,4(r19)
    68e4:	9c800415 	stw	r18,16(r19)
    68e8:	9c400515 	stw	r17,20(r19)
    68ec:	a8eb883a 	add	r21,r21,r3
    68f0:	9c000015 	stw	r16,0(r19)
    68f4:	a0e9c83a 	sub	r20,r20,r3
    68f8:	98000115 	stw	zero,4(r19)
    68fc:	103fef26 	beq	r2,zero,68bc <_fread_r+0x154>
    6900:	d9400017 	ldw	r5,0(sp)
    6904:	bd09c83a 	sub	r4,r23,r20
    6908:	000f37c0 	call	f37c <__udivsi3>
    690c:	1039883a 	mov	fp,r2
    6910:	003fc506 	br	6828 <_fread_r+0xc0>
    6914:	0039883a 	mov	fp,zero
    6918:	003fc306 	br	6828 <_fread_r+0xc0>
    691c:	00065100 	call	6510 <__sinit>
    6920:	9c400117 	ldw	r17,4(r19)
    6924:	883fa70e 	bge	r17,zero,67c4 <_fread_r+0x5c>
    6928:	0023883a 	mov	r17,zero
    692c:	98000115 	stw	zero,4(r19)
    6930:	003fa406 	br	67c4 <_fread_r+0x5c>
    6934:	8825883a 	mov	r18,r17
    6938:	003fca06 	br	6864 <_fread_r+0xfc>
    693c:	99400017 	ldw	r5,0(r19)
    6940:	900d883a 	mov	r6,r18
    6944:	0007fa80 	call	7fa8 <memcpy>
    6948:	98c00117 	ldw	r3,4(r19)
    694c:	98800017 	ldw	r2,0(r19)
    6950:	1c87c83a 	sub	r3,r3,r18
    6954:	1485883a 	add	r2,r2,r18
    6958:	98800015 	stw	r2,0(r19)
    695c:	98c00115 	stw	r3,4(r19)
    6960:	003fb106 	br	6828 <_fread_r+0xc0>

00006964 <fread>:
    6964:	00800074 	movhi	r2,1
    6968:	10917404 	addi	r2,r2,17872
    696c:	2017883a 	mov	r11,r4
    6970:	11000017 	ldw	r4,0(r2)
    6974:	defffe04 	addi	sp,sp,-8
    6978:	3013883a 	mov	r9,r6
    697c:	2805883a 	mov	r2,r5
    6980:	d9c00015 	stw	r7,0(sp)
    6984:	580b883a 	mov	r5,r11
    6988:	100d883a 	mov	r6,r2
    698c:	480f883a 	mov	r7,r9
    6990:	dfc00115 	stw	ra,4(sp)
    6994:	00067680 	call	6768 <_fread_r>
    6998:	dfc00117 	ldw	ra,4(sp)
    699c:	dec00204 	addi	sp,sp,8
    69a0:	f800283a 	ret

000069a4 <_malloc_trim_r>:
    69a4:	defffb04 	addi	sp,sp,-20
    69a8:	dcc00315 	stw	r19,12(sp)
    69ac:	04c00074 	movhi	r19,1
    69b0:	9ccb7b04 	addi	r19,r19,11756
    69b4:	dc800215 	stw	r18,8(sp)
    69b8:	dc400115 	stw	r17,4(sp)
    69bc:	dc000015 	stw	r16,0(sp)
    69c0:	2823883a 	mov	r17,r5
    69c4:	2025883a 	mov	r18,r4
    69c8:	dfc00415 	stw	ra,16(sp)
    69cc:	000f94c0 	call	f94c <__malloc_lock>
    69d0:	98800217 	ldw	r2,8(r19)
    69d4:	9009883a 	mov	r4,r18
    69d8:	000b883a 	mov	r5,zero
    69dc:	10c00117 	ldw	r3,4(r2)
    69e0:	00bfff04 	movi	r2,-4
    69e4:	18a0703a 	and	r16,r3,r2
    69e8:	8463c83a 	sub	r17,r16,r17
    69ec:	8c43fbc4 	addi	r17,r17,4079
    69f0:	8822d33a 	srli	r17,r17,12
    69f4:	0083ffc4 	movi	r2,4095
    69f8:	8c7fffc4 	addi	r17,r17,-1
    69fc:	8822933a 	slli	r17,r17,12
    6a00:	1440060e 	bge	r2,r17,6a1c <_malloc_trim_r+0x78>
    6a04:	00099f80 	call	99f8 <_sbrk_r>
    6a08:	98c00217 	ldw	r3,8(r19)
    6a0c:	9009883a 	mov	r4,r18
    6a10:	044bc83a 	sub	r5,zero,r17
    6a14:	80c7883a 	add	r3,r16,r3
    6a18:	10c00926 	beq	r2,r3,6a40 <_malloc_trim_r+0x9c>
    6a1c:	000f9500 	call	f950 <__malloc_unlock>
    6a20:	0005883a 	mov	r2,zero
    6a24:	dfc00417 	ldw	ra,16(sp)
    6a28:	dcc00317 	ldw	r19,12(sp)
    6a2c:	dc800217 	ldw	r18,8(sp)
    6a30:	dc400117 	ldw	r17,4(sp)
    6a34:	dc000017 	ldw	r16,0(sp)
    6a38:	dec00504 	addi	sp,sp,20
    6a3c:	f800283a 	ret
    6a40:	9009883a 	mov	r4,r18
    6a44:	00099f80 	call	99f8 <_sbrk_r>
    6a48:	844dc83a 	sub	r6,r16,r17
    6a4c:	00ffffc4 	movi	r3,-1
    6a50:	9009883a 	mov	r4,r18
    6a54:	000b883a 	mov	r5,zero
    6a58:	01c00074 	movhi	r7,1
    6a5c:	39d89d04 	addi	r7,r7,25204
    6a60:	31800054 	ori	r6,r6,1
    6a64:	10c00926 	beq	r2,r3,6a8c <_malloc_trim_r+0xe8>
    6a68:	38800017 	ldw	r2,0(r7)
    6a6c:	98c00217 	ldw	r3,8(r19)
    6a70:	9009883a 	mov	r4,r18
    6a74:	1445c83a 	sub	r2,r2,r17
    6a78:	38800015 	stw	r2,0(r7)
    6a7c:	19800115 	stw	r6,4(r3)
    6a80:	000f9500 	call	f950 <__malloc_unlock>
    6a84:	00800044 	movi	r2,1
    6a88:	003fe606 	br	6a24 <_malloc_trim_r+0x80>
    6a8c:	00099f80 	call	99f8 <_sbrk_r>
    6a90:	99800217 	ldw	r6,8(r19)
    6a94:	100f883a 	mov	r7,r2
    6a98:	9009883a 	mov	r4,r18
    6a9c:	1187c83a 	sub	r3,r2,r6
    6aa0:	008003c4 	movi	r2,15
    6aa4:	19400054 	ori	r5,r3,1
    6aa8:	10ffdc0e 	bge	r2,r3,6a1c <_malloc_trim_r+0x78>
    6aac:	00800074 	movhi	r2,1
    6ab0:	10917904 	addi	r2,r2,17892
    6ab4:	10c00017 	ldw	r3,0(r2)
    6ab8:	00800074 	movhi	r2,1
    6abc:	10989d04 	addi	r2,r2,25204
    6ac0:	31400115 	stw	r5,4(r6)
    6ac4:	38c7c83a 	sub	r3,r7,r3
    6ac8:	10c00015 	stw	r3,0(r2)
    6acc:	003fd306 	br	6a1c <_malloc_trim_r+0x78>

00006ad0 <_free_r>:
    6ad0:	defffd04 	addi	sp,sp,-12
    6ad4:	dc400115 	stw	r17,4(sp)
    6ad8:	dc000015 	stw	r16,0(sp)
    6adc:	dfc00215 	stw	ra,8(sp)
    6ae0:	2821883a 	mov	r16,r5
    6ae4:	2023883a 	mov	r17,r4
    6ae8:	28005a26 	beq	r5,zero,6c54 <_free_r+0x184>
    6aec:	000f94c0 	call	f94c <__malloc_lock>
    6af0:	823ffe04 	addi	r8,r16,-8
    6af4:	41400117 	ldw	r5,4(r8)
    6af8:	00bfff84 	movi	r2,-2
    6afc:	02800074 	movhi	r10,1
    6b00:	528b7b04 	addi	r10,r10,11756
    6b04:	288e703a 	and	r7,r5,r2
    6b08:	41cd883a 	add	r6,r8,r7
    6b0c:	30c00117 	ldw	r3,4(r6)
    6b10:	51000217 	ldw	r4,8(r10)
    6b14:	00bfff04 	movi	r2,-4
    6b18:	1892703a 	and	r9,r3,r2
    6b1c:	5017883a 	mov	r11,r10
    6b20:	31006726 	beq	r6,r4,6cc0 <_free_r+0x1f0>
    6b24:	2880004c 	andi	r2,r5,1
    6b28:	1005003a 	cmpeq	r2,r2,zero
    6b2c:	32400115 	stw	r9,4(r6)
    6b30:	10001a1e 	bne	r2,zero,6b9c <_free_r+0xcc>
    6b34:	000b883a 	mov	r5,zero
    6b38:	3247883a 	add	r3,r6,r9
    6b3c:	18800117 	ldw	r2,4(r3)
    6b40:	1080004c 	andi	r2,r2,1
    6b44:	1000231e 	bne	r2,zero,6bd4 <_free_r+0x104>
    6b48:	280ac03a 	cmpne	r5,r5,zero
    6b4c:	3a4f883a 	add	r7,r7,r9
    6b50:	2800451e 	bne	r5,zero,6c68 <_free_r+0x198>
    6b54:	31000217 	ldw	r4,8(r6)
    6b58:	00800074 	movhi	r2,1
    6b5c:	108b7d04 	addi	r2,r2,11764
    6b60:	20807b26 	beq	r4,r2,6d50 <_free_r+0x280>
    6b64:	30800317 	ldw	r2,12(r6)
    6b68:	3a07883a 	add	r3,r7,r8
    6b6c:	19c00015 	stw	r7,0(r3)
    6b70:	11000215 	stw	r4,8(r2)
    6b74:	20800315 	stw	r2,12(r4)
    6b78:	38800054 	ori	r2,r7,1
    6b7c:	40800115 	stw	r2,4(r8)
    6b80:	28001a26 	beq	r5,zero,6bec <_free_r+0x11c>
    6b84:	8809883a 	mov	r4,r17
    6b88:	dfc00217 	ldw	ra,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00304 	addi	sp,sp,12
    6b98:	000f9501 	jmpi	f950 <__malloc_unlock>
    6b9c:	80bffe17 	ldw	r2,-8(r16)
    6ba0:	50c00204 	addi	r3,r10,8
    6ba4:	4091c83a 	sub	r8,r8,r2
    6ba8:	41000217 	ldw	r4,8(r8)
    6bac:	388f883a 	add	r7,r7,r2
    6bb0:	20c06126 	beq	r4,r3,6d38 <_free_r+0x268>
    6bb4:	40800317 	ldw	r2,12(r8)
    6bb8:	3247883a 	add	r3,r6,r9
    6bbc:	000b883a 	mov	r5,zero
    6bc0:	11000215 	stw	r4,8(r2)
    6bc4:	20800315 	stw	r2,12(r4)
    6bc8:	18800117 	ldw	r2,4(r3)
    6bcc:	1080004c 	andi	r2,r2,1
    6bd0:	103fdd26 	beq	r2,zero,6b48 <_free_r+0x78>
    6bd4:	38800054 	ori	r2,r7,1
    6bd8:	3a07883a 	add	r3,r7,r8
    6bdc:	280ac03a 	cmpne	r5,r5,zero
    6be0:	40800115 	stw	r2,4(r8)
    6be4:	19c00015 	stw	r7,0(r3)
    6be8:	283fe61e 	bne	r5,zero,6b84 <_free_r+0xb4>
    6bec:	00807fc4 	movi	r2,511
    6bf0:	11c01f2e 	bgeu	r2,r7,6c70 <_free_r+0x1a0>
    6bf4:	3806d27a 	srli	r3,r7,9
    6bf8:	1800481e 	bne	r3,zero,6d1c <_free_r+0x24c>
    6bfc:	3804d0fa 	srli	r2,r7,3
    6c00:	100690fa 	slli	r3,r2,3
    6c04:	1acd883a 	add	r6,r3,r11
    6c08:	31400217 	ldw	r5,8(r6)
    6c0c:	31405926 	beq	r6,r5,6d74 <_free_r+0x2a4>
    6c10:	28800117 	ldw	r2,4(r5)
    6c14:	00ffff04 	movi	r3,-4
    6c18:	10c4703a 	and	r2,r2,r3
    6c1c:	3880022e 	bgeu	r7,r2,6c28 <_free_r+0x158>
    6c20:	29400217 	ldw	r5,8(r5)
    6c24:	317ffa1e 	bne	r6,r5,6c10 <_free_r+0x140>
    6c28:	29800317 	ldw	r6,12(r5)
    6c2c:	41800315 	stw	r6,12(r8)
    6c30:	41400215 	stw	r5,8(r8)
    6c34:	8809883a 	mov	r4,r17
    6c38:	2a000315 	stw	r8,12(r5)
    6c3c:	32000215 	stw	r8,8(r6)
    6c40:	dfc00217 	ldw	ra,8(sp)
    6c44:	dc400117 	ldw	r17,4(sp)
    6c48:	dc000017 	ldw	r16,0(sp)
    6c4c:	dec00304 	addi	sp,sp,12
    6c50:	000f9501 	jmpi	f950 <__malloc_unlock>
    6c54:	dfc00217 	ldw	ra,8(sp)
    6c58:	dc400117 	ldw	r17,4(sp)
    6c5c:	dc000017 	ldw	r16,0(sp)
    6c60:	dec00304 	addi	sp,sp,12
    6c64:	f800283a 	ret
    6c68:	31000217 	ldw	r4,8(r6)
    6c6c:	003fbd06 	br	6b64 <_free_r+0x94>
    6c70:	3806d0fa 	srli	r3,r7,3
    6c74:	00800044 	movi	r2,1
    6c78:	51400117 	ldw	r5,4(r10)
    6c7c:	180890fa 	slli	r4,r3,3
    6c80:	1807d0ba 	srai	r3,r3,2
    6c84:	22c9883a 	add	r4,r4,r11
    6c88:	21800217 	ldw	r6,8(r4)
    6c8c:	10c4983a 	sll	r2,r2,r3
    6c90:	41000315 	stw	r4,12(r8)
    6c94:	41800215 	stw	r6,8(r8)
    6c98:	288ab03a 	or	r5,r5,r2
    6c9c:	22000215 	stw	r8,8(r4)
    6ca0:	8809883a 	mov	r4,r17
    6ca4:	51400115 	stw	r5,4(r10)
    6ca8:	32000315 	stw	r8,12(r6)
    6cac:	dfc00217 	ldw	ra,8(sp)
    6cb0:	dc400117 	ldw	r17,4(sp)
    6cb4:	dc000017 	ldw	r16,0(sp)
    6cb8:	dec00304 	addi	sp,sp,12
    6cbc:	000f9501 	jmpi	f950 <__malloc_unlock>
    6cc0:	2880004c 	andi	r2,r5,1
    6cc4:	3a4d883a 	add	r6,r7,r9
    6cc8:	1000071e 	bne	r2,zero,6ce8 <_free_r+0x218>
    6ccc:	80bffe17 	ldw	r2,-8(r16)
    6cd0:	4091c83a 	sub	r8,r8,r2
    6cd4:	41000317 	ldw	r4,12(r8)
    6cd8:	40c00217 	ldw	r3,8(r8)
    6cdc:	308d883a 	add	r6,r6,r2
    6ce0:	20c00215 	stw	r3,8(r4)
    6ce4:	19000315 	stw	r4,12(r3)
    6ce8:	00800074 	movhi	r2,1
    6cec:	10917804 	addi	r2,r2,17888
    6cf0:	11000017 	ldw	r4,0(r2)
    6cf4:	30c00054 	ori	r3,r6,1
    6cf8:	52000215 	stw	r8,8(r10)
    6cfc:	40c00115 	stw	r3,4(r8)
    6d00:	313fa036 	bltu	r6,r4,6b84 <_free_r+0xb4>
    6d04:	00800074 	movhi	r2,1
    6d08:	10989304 	addi	r2,r2,25164
    6d0c:	11400017 	ldw	r5,0(r2)
    6d10:	8809883a 	mov	r4,r17
    6d14:	00069a40 	call	69a4 <_malloc_trim_r>
    6d18:	003f9a06 	br	6b84 <_free_r+0xb4>
    6d1c:	00800104 	movi	r2,4
    6d20:	10c0072e 	bgeu	r2,r3,6d40 <_free_r+0x270>
    6d24:	00800504 	movi	r2,20
    6d28:	10c01936 	bltu	r2,r3,6d90 <_free_r+0x2c0>
    6d2c:	188016c4 	addi	r2,r3,91
    6d30:	100690fa 	slli	r3,r2,3
    6d34:	003fb306 	br	6c04 <_free_r+0x134>
    6d38:	01400044 	movi	r5,1
    6d3c:	003f7e06 	br	6b38 <_free_r+0x68>
    6d40:	3804d1ba 	srli	r2,r7,6
    6d44:	10800e04 	addi	r2,r2,56
    6d48:	100690fa 	slli	r3,r2,3
    6d4c:	003fad06 	br	6c04 <_free_r+0x134>
    6d50:	22000315 	stw	r8,12(r4)
    6d54:	22000215 	stw	r8,8(r4)
    6d58:	3a05883a 	add	r2,r7,r8
    6d5c:	38c00054 	ori	r3,r7,1
    6d60:	11c00015 	stw	r7,0(r2)
    6d64:	41000215 	stw	r4,8(r8)
    6d68:	40c00115 	stw	r3,4(r8)
    6d6c:	41000315 	stw	r4,12(r8)
    6d70:	003f8406 	br	6b84 <_free_r+0xb4>
    6d74:	1005d0ba 	srai	r2,r2,2
    6d78:	00c00044 	movi	r3,1
    6d7c:	51000117 	ldw	r4,4(r10)
    6d80:	1886983a 	sll	r3,r3,r2
    6d84:	20c8b03a 	or	r4,r4,r3
    6d88:	51000115 	stw	r4,4(r10)
    6d8c:	003fa706 	br	6c2c <_free_r+0x15c>
    6d90:	00801504 	movi	r2,84
    6d94:	10c00436 	bltu	r2,r3,6da8 <_free_r+0x2d8>
    6d98:	3804d33a 	srli	r2,r7,12
    6d9c:	10801b84 	addi	r2,r2,110
    6da0:	100690fa 	slli	r3,r2,3
    6da4:	003f9706 	br	6c04 <_free_r+0x134>
    6da8:	00805504 	movi	r2,340
    6dac:	10c00436 	bltu	r2,r3,6dc0 <_free_r+0x2f0>
    6db0:	3804d3fa 	srli	r2,r7,15
    6db4:	10801dc4 	addi	r2,r2,119
    6db8:	100690fa 	slli	r3,r2,3
    6dbc:	003f9106 	br	6c04 <_free_r+0x134>
    6dc0:	00815504 	movi	r2,1364
    6dc4:	10c0032e 	bgeu	r2,r3,6dd4 <_free_r+0x304>
    6dc8:	00801f84 	movi	r2,126
    6dcc:	00c0fc04 	movi	r3,1008
    6dd0:	003f8c06 	br	6c04 <_free_r+0x134>
    6dd4:	3804d4ba 	srli	r2,r7,18
    6dd8:	10801f04 	addi	r2,r2,124
    6ddc:	100690fa 	slli	r3,r2,3
    6de0:	003f8806 	br	6c04 <_free_r+0x134>

00006de4 <__sfvwrite_r>:
    6de4:	30800217 	ldw	r2,8(r6)
    6de8:	defff504 	addi	sp,sp,-44
    6dec:	df000915 	stw	fp,36(sp)
    6df0:	dd800715 	stw	r22,28(sp)
    6df4:	dc800315 	stw	r18,12(sp)
    6df8:	dfc00a15 	stw	ra,40(sp)
    6dfc:	ddc00815 	stw	r23,32(sp)
    6e00:	dd400615 	stw	r21,24(sp)
    6e04:	dd000515 	stw	r20,20(sp)
    6e08:	dcc00415 	stw	r19,16(sp)
    6e0c:	dc400215 	stw	r17,8(sp)
    6e10:	dc000115 	stw	r16,4(sp)
    6e14:	302d883a 	mov	r22,r6
    6e18:	2039883a 	mov	fp,r4
    6e1c:	2825883a 	mov	r18,r5
    6e20:	10001c26 	beq	r2,zero,6e94 <__sfvwrite_r+0xb0>
    6e24:	29c0030b 	ldhu	r7,12(r5)
    6e28:	3880020c 	andi	r2,r7,8
    6e2c:	10002726 	beq	r2,zero,6ecc <__sfvwrite_r+0xe8>
    6e30:	28800417 	ldw	r2,16(r5)
    6e34:	10002526 	beq	r2,zero,6ecc <__sfvwrite_r+0xe8>
    6e38:	3880008c 	andi	r2,r7,2
    6e3c:	b5400017 	ldw	r21,0(r22)
    6e40:	10002826 	beq	r2,zero,6ee4 <__sfvwrite_r+0x100>
    6e44:	0021883a 	mov	r16,zero
    6e48:	0023883a 	mov	r17,zero
    6e4c:	880d883a 	mov	r6,r17
    6e50:	e009883a 	mov	r4,fp
    6e54:	00810004 	movi	r2,1024
    6e58:	80006e26 	beq	r16,zero,7014 <__sfvwrite_r+0x230>
    6e5c:	800f883a 	mov	r7,r16
    6e60:	91400717 	ldw	r5,28(r18)
    6e64:	1400012e 	bgeu	r2,r16,6e6c <__sfvwrite_r+0x88>
    6e68:	100f883a 	mov	r7,r2
    6e6c:	90c00917 	ldw	r3,36(r18)
    6e70:	183ee83a 	callr	r3
    6e74:	1007883a 	mov	r3,r2
    6e78:	80a1c83a 	sub	r16,r16,r2
    6e7c:	88a3883a 	add	r17,r17,r2
    6e80:	00806d0e 	bge	zero,r2,7038 <__sfvwrite_r+0x254>
    6e84:	b0800217 	ldw	r2,8(r22)
    6e88:	10c5c83a 	sub	r2,r2,r3
    6e8c:	b0800215 	stw	r2,8(r22)
    6e90:	103fee1e 	bne	r2,zero,6e4c <__sfvwrite_r+0x68>
    6e94:	0009883a 	mov	r4,zero
    6e98:	2005883a 	mov	r2,r4
    6e9c:	dfc00a17 	ldw	ra,40(sp)
    6ea0:	df000917 	ldw	fp,36(sp)
    6ea4:	ddc00817 	ldw	r23,32(sp)
    6ea8:	dd800717 	ldw	r22,28(sp)
    6eac:	dd400617 	ldw	r21,24(sp)
    6eb0:	dd000517 	ldw	r20,20(sp)
    6eb4:	dcc00417 	ldw	r19,16(sp)
    6eb8:	dc800317 	ldw	r18,12(sp)
    6ebc:	dc400217 	ldw	r17,8(sp)
    6ec0:	dc000117 	ldw	r16,4(sp)
    6ec4:	dec00b04 	addi	sp,sp,44
    6ec8:	f800283a 	ret
    6ecc:	00049700 	call	4970 <__swsetup_r>
    6ed0:	1000e41e 	bne	r2,zero,7264 <__sfvwrite_r+0x480>
    6ed4:	91c0030b 	ldhu	r7,12(r18)
    6ed8:	b5400017 	ldw	r21,0(r22)
    6edc:	3880008c 	andi	r2,r7,2
    6ee0:	103fd81e 	bne	r2,zero,6e44 <__sfvwrite_r+0x60>
    6ee4:	3880004c 	andi	r2,r7,1
    6ee8:	1005003a 	cmpeq	r2,r2,zero
    6eec:	10005726 	beq	r2,zero,704c <__sfvwrite_r+0x268>
    6ef0:	0029883a 	mov	r20,zero
    6ef4:	002f883a 	mov	r23,zero
    6ef8:	a0004226 	beq	r20,zero,7004 <__sfvwrite_r+0x220>
    6efc:	3880800c 	andi	r2,r7,512
    6f00:	94000217 	ldw	r16,8(r18)
    6f04:	10008b26 	beq	r2,zero,7134 <__sfvwrite_r+0x350>
    6f08:	800d883a 	mov	r6,r16
    6f0c:	a400a536 	bltu	r20,r16,71a4 <__sfvwrite_r+0x3c0>
    6f10:	3881200c 	andi	r2,r7,1152
    6f14:	10002726 	beq	r2,zero,6fb4 <__sfvwrite_r+0x1d0>
    6f18:	90800517 	ldw	r2,20(r18)
    6f1c:	92000417 	ldw	r8,16(r18)
    6f20:	91400017 	ldw	r5,0(r18)
    6f24:	1087883a 	add	r3,r2,r2
    6f28:	1887883a 	add	r3,r3,r2
    6f2c:	1808d7fa 	srli	r4,r3,31
    6f30:	2a21c83a 	sub	r16,r5,r8
    6f34:	80800044 	addi	r2,r16,1
    6f38:	20c9883a 	add	r4,r4,r3
    6f3c:	2027d07a 	srai	r19,r4,1
    6f40:	a085883a 	add	r2,r20,r2
    6f44:	980d883a 	mov	r6,r19
    6f48:	9880022e 	bgeu	r19,r2,6f54 <__sfvwrite_r+0x170>
    6f4c:	1027883a 	mov	r19,r2
    6f50:	100d883a 	mov	r6,r2
    6f54:	3881000c 	andi	r2,r7,1024
    6f58:	1000b826 	beq	r2,zero,723c <__sfvwrite_r+0x458>
    6f5c:	300b883a 	mov	r5,r6
    6f60:	e009883a 	mov	r4,fp
    6f64:	00076840 	call	7684 <_malloc_r>
    6f68:	10003126 	beq	r2,zero,7030 <__sfvwrite_r+0x24c>
    6f6c:	91400417 	ldw	r5,16(r18)
    6f70:	1009883a 	mov	r4,r2
    6f74:	800d883a 	mov	r6,r16
    6f78:	1023883a 	mov	r17,r2
    6f7c:	0007fa80 	call	7fa8 <memcpy>
    6f80:	90c0030b 	ldhu	r3,12(r18)
    6f84:	00beffc4 	movi	r2,-1025
    6f88:	1886703a 	and	r3,r3,r2
    6f8c:	18c02014 	ori	r3,r3,128
    6f90:	90c0030d 	sth	r3,12(r18)
    6f94:	9c07c83a 	sub	r3,r19,r16
    6f98:	8c05883a 	add	r2,r17,r16
    6f9c:	a00d883a 	mov	r6,r20
    6fa0:	a021883a 	mov	r16,r20
    6fa4:	90800015 	stw	r2,0(r18)
    6fa8:	90c00215 	stw	r3,8(r18)
    6fac:	94400415 	stw	r17,16(r18)
    6fb0:	94c00515 	stw	r19,20(r18)
    6fb4:	91000017 	ldw	r4,0(r18)
    6fb8:	b80b883a 	mov	r5,r23
    6fbc:	a023883a 	mov	r17,r20
    6fc0:	00080480 	call	8048 <memmove>
    6fc4:	90c00217 	ldw	r3,8(r18)
    6fc8:	90800017 	ldw	r2,0(r18)
    6fcc:	a027883a 	mov	r19,r20
    6fd0:	1c07c83a 	sub	r3,r3,r16
    6fd4:	1405883a 	add	r2,r2,r16
    6fd8:	90c00215 	stw	r3,8(r18)
    6fdc:	a021883a 	mov	r16,r20
    6fe0:	90800015 	stw	r2,0(r18)
    6fe4:	b0800217 	ldw	r2,8(r22)
    6fe8:	1405c83a 	sub	r2,r2,r16
    6fec:	b0800215 	stw	r2,8(r22)
    6ff0:	103fa826 	beq	r2,zero,6e94 <__sfvwrite_r+0xb0>
    6ff4:	a469c83a 	sub	r20,r20,r17
    6ff8:	91c0030b 	ldhu	r7,12(r18)
    6ffc:	bcef883a 	add	r23,r23,r19
    7000:	a03fbe1e 	bne	r20,zero,6efc <__sfvwrite_r+0x118>
    7004:	adc00017 	ldw	r23,0(r21)
    7008:	ad000117 	ldw	r20,4(r21)
    700c:	ad400204 	addi	r21,r21,8
    7010:	003fb906 	br	6ef8 <__sfvwrite_r+0x114>
    7014:	ac400017 	ldw	r17,0(r21)
    7018:	ac000117 	ldw	r16,4(r21)
    701c:	ad400204 	addi	r21,r21,8
    7020:	003f8a06 	br	6e4c <__sfvwrite_r+0x68>
    7024:	91400417 	ldw	r5,16(r18)
    7028:	e009883a 	mov	r4,fp
    702c:	0006ad00 	call	6ad0 <_free_r>
    7030:	00800304 	movi	r2,12
    7034:	e0800015 	stw	r2,0(fp)
    7038:	9080030b 	ldhu	r2,12(r18)
    703c:	013fffc4 	movi	r4,-1
    7040:	10801014 	ori	r2,r2,64
    7044:	9080030d 	sth	r2,12(r18)
    7048:	003f9306 	br	6e98 <__sfvwrite_r+0xb4>
    704c:	0027883a 	mov	r19,zero
    7050:	002f883a 	mov	r23,zero
    7054:	d8000015 	stw	zero,0(sp)
    7058:	0029883a 	mov	r20,zero
    705c:	98001e26 	beq	r19,zero,70d8 <__sfvwrite_r+0x2f4>
    7060:	d8c00017 	ldw	r3,0(sp)
    7064:	1804c03a 	cmpne	r2,r3,zero
    7068:	10005e26 	beq	r2,zero,71e4 <__sfvwrite_r+0x400>
    706c:	9821883a 	mov	r16,r19
    7070:	a4c0012e 	bgeu	r20,r19,7078 <__sfvwrite_r+0x294>
    7074:	a021883a 	mov	r16,r20
    7078:	91000017 	ldw	r4,0(r18)
    707c:	90800417 	ldw	r2,16(r18)
    7080:	91800217 	ldw	r6,8(r18)
    7084:	91c00517 	ldw	r7,20(r18)
    7088:	1100022e 	bgeu	r2,r4,7094 <__sfvwrite_r+0x2b0>
    708c:	31e3883a 	add	r17,r6,r7
    7090:	8c001616 	blt	r17,r16,70ec <__sfvwrite_r+0x308>
    7094:	81c03816 	blt	r16,r7,7178 <__sfvwrite_r+0x394>
    7098:	90c00917 	ldw	r3,36(r18)
    709c:	91400717 	ldw	r5,28(r18)
    70a0:	e009883a 	mov	r4,fp
    70a4:	b80d883a 	mov	r6,r23
    70a8:	183ee83a 	callr	r3
    70ac:	1023883a 	mov	r17,r2
    70b0:	00bfe10e 	bge	zero,r2,7038 <__sfvwrite_r+0x254>
    70b4:	a469c83a 	sub	r20,r20,r17
    70b8:	a0001826 	beq	r20,zero,711c <__sfvwrite_r+0x338>
    70bc:	b0800217 	ldw	r2,8(r22)
    70c0:	1445c83a 	sub	r2,r2,r17
    70c4:	b0800215 	stw	r2,8(r22)
    70c8:	103f7226 	beq	r2,zero,6e94 <__sfvwrite_r+0xb0>
    70cc:	9c67c83a 	sub	r19,r19,r17
    70d0:	bc6f883a 	add	r23,r23,r17
    70d4:	983fe21e 	bne	r19,zero,7060 <__sfvwrite_r+0x27c>
    70d8:	adc00017 	ldw	r23,0(r21)
    70dc:	acc00117 	ldw	r19,4(r21)
    70e0:	ad400204 	addi	r21,r21,8
    70e4:	d8000015 	stw	zero,0(sp)
    70e8:	003fdc06 	br	705c <__sfvwrite_r+0x278>
    70ec:	b80b883a 	mov	r5,r23
    70f0:	880d883a 	mov	r6,r17
    70f4:	00080480 	call	8048 <memmove>
    70f8:	90c00017 	ldw	r3,0(r18)
    70fc:	e009883a 	mov	r4,fp
    7100:	900b883a 	mov	r5,r18
    7104:	1c47883a 	add	r3,r3,r17
    7108:	90c00015 	stw	r3,0(r18)
    710c:	00062780 	call	6278 <_fflush_r>
    7110:	103fc91e 	bne	r2,zero,7038 <__sfvwrite_r+0x254>
    7114:	a469c83a 	sub	r20,r20,r17
    7118:	a03fe81e 	bne	r20,zero,70bc <__sfvwrite_r+0x2d8>
    711c:	e009883a 	mov	r4,fp
    7120:	900b883a 	mov	r5,r18
    7124:	00062780 	call	6278 <_fflush_r>
    7128:	103fc31e 	bne	r2,zero,7038 <__sfvwrite_r+0x254>
    712c:	d8000015 	stw	zero,0(sp)
    7130:	003fe206 	br	70bc <__sfvwrite_r+0x2d8>
    7134:	91000017 	ldw	r4,0(r18)
    7138:	90800417 	ldw	r2,16(r18)
    713c:	1100022e 	bgeu	r2,r4,7148 <__sfvwrite_r+0x364>
    7140:	8023883a 	mov	r17,r16
    7144:	85003136 	bltu	r16,r20,720c <__sfvwrite_r+0x428>
    7148:	91c00517 	ldw	r7,20(r18)
    714c:	a1c01836 	bltu	r20,r7,71b0 <__sfvwrite_r+0x3cc>
    7150:	90c00917 	ldw	r3,36(r18)
    7154:	91400717 	ldw	r5,28(r18)
    7158:	e009883a 	mov	r4,fp
    715c:	b80d883a 	mov	r6,r23
    7160:	183ee83a 	callr	r3
    7164:	1021883a 	mov	r16,r2
    7168:	00bfb30e 	bge	zero,r2,7038 <__sfvwrite_r+0x254>
    716c:	1023883a 	mov	r17,r2
    7170:	1027883a 	mov	r19,r2
    7174:	003f9b06 	br	6fe4 <__sfvwrite_r+0x200>
    7178:	b80b883a 	mov	r5,r23
    717c:	800d883a 	mov	r6,r16
    7180:	00080480 	call	8048 <memmove>
    7184:	90c00217 	ldw	r3,8(r18)
    7188:	90800017 	ldw	r2,0(r18)
    718c:	8023883a 	mov	r17,r16
    7190:	1c07c83a 	sub	r3,r3,r16
    7194:	1405883a 	add	r2,r2,r16
    7198:	90c00215 	stw	r3,8(r18)
    719c:	90800015 	stw	r2,0(r18)
    71a0:	003fc406 	br	70b4 <__sfvwrite_r+0x2d0>
    71a4:	a00d883a 	mov	r6,r20
    71a8:	a021883a 	mov	r16,r20
    71ac:	003f8106 	br	6fb4 <__sfvwrite_r+0x1d0>
    71b0:	b80b883a 	mov	r5,r23
    71b4:	a00d883a 	mov	r6,r20
    71b8:	00080480 	call	8048 <memmove>
    71bc:	90c00217 	ldw	r3,8(r18)
    71c0:	90800017 	ldw	r2,0(r18)
    71c4:	a021883a 	mov	r16,r20
    71c8:	1d07c83a 	sub	r3,r3,r20
    71cc:	1505883a 	add	r2,r2,r20
    71d0:	a023883a 	mov	r17,r20
    71d4:	a027883a 	mov	r19,r20
    71d8:	90c00215 	stw	r3,8(r18)
    71dc:	90800015 	stw	r2,0(r18)
    71e0:	003f8006 	br	6fe4 <__sfvwrite_r+0x200>
    71e4:	b809883a 	mov	r4,r23
    71e8:	01400284 	movi	r5,10
    71ec:	980d883a 	mov	r6,r19
    71f0:	0007ec40 	call	7ec4 <memchr>
    71f4:	10001726 	beq	r2,zero,7254 <__sfvwrite_r+0x470>
    71f8:	15c5c83a 	sub	r2,r2,r23
    71fc:	15000044 	addi	r20,r2,1
    7200:	00800044 	movi	r2,1
    7204:	d8800015 	stw	r2,0(sp)
    7208:	003f9806 	br	706c <__sfvwrite_r+0x288>
    720c:	b80b883a 	mov	r5,r23
    7210:	800d883a 	mov	r6,r16
    7214:	00080480 	call	8048 <memmove>
    7218:	90c00017 	ldw	r3,0(r18)
    721c:	e009883a 	mov	r4,fp
    7220:	900b883a 	mov	r5,r18
    7224:	1c07883a 	add	r3,r3,r16
    7228:	90c00015 	stw	r3,0(r18)
    722c:	8027883a 	mov	r19,r16
    7230:	00062780 	call	6278 <_fflush_r>
    7234:	103f6b26 	beq	r2,zero,6fe4 <__sfvwrite_r+0x200>
    7238:	003f7f06 	br	7038 <__sfvwrite_r+0x254>
    723c:	400b883a 	mov	r5,r8
    7240:	e009883a 	mov	r4,fp
    7244:	00091b40 	call	91b4 <_realloc_r>
    7248:	103f7626 	beq	r2,zero,7024 <__sfvwrite_r+0x240>
    724c:	1023883a 	mov	r17,r2
    7250:	003f5006 	br	6f94 <__sfvwrite_r+0x1b0>
    7254:	00c00044 	movi	r3,1
    7258:	9d000044 	addi	r20,r19,1
    725c:	d8c00015 	stw	r3,0(sp)
    7260:	003f8206 	br	706c <__sfvwrite_r+0x288>
    7264:	9080030b 	ldhu	r2,12(r18)
    7268:	00c00244 	movi	r3,9
    726c:	013fffc4 	movi	r4,-1
    7270:	10801014 	ori	r2,r2,64
    7274:	9080030d 	sth	r2,12(r18)
    7278:	e0c00015 	stw	r3,0(fp)
    727c:	003f0606 	br	6e98 <__sfvwrite_r+0xb4>

00007280 <_fwalk_reent>:
    7280:	defff704 	addi	sp,sp,-36
    7284:	dcc00315 	stw	r19,12(sp)
    7288:	24c0b804 	addi	r19,r4,736
    728c:	dd800615 	stw	r22,24(sp)
    7290:	dd400515 	stw	r21,20(sp)
    7294:	dfc00815 	stw	ra,32(sp)
    7298:	ddc00715 	stw	r23,28(sp)
    729c:	dd000415 	stw	r20,16(sp)
    72a0:	dc800215 	stw	r18,8(sp)
    72a4:	dc400115 	stw	r17,4(sp)
    72a8:	dc000015 	stw	r16,0(sp)
    72ac:	202b883a 	mov	r21,r4
    72b0:	282d883a 	mov	r22,r5
    72b4:	00065000 	call	6500 <__sfp_lock_acquire>
    72b8:	98002126 	beq	r19,zero,7340 <_fwalk_reent+0xc0>
    72bc:	002f883a 	mov	r23,zero
    72c0:	9c800117 	ldw	r18,4(r19)
    72c4:	9c000217 	ldw	r16,8(r19)
    72c8:	90bfffc4 	addi	r2,r18,-1
    72cc:	10000d16 	blt	r2,zero,7304 <_fwalk_reent+0x84>
    72d0:	0023883a 	mov	r17,zero
    72d4:	053fffc4 	movi	r20,-1
    72d8:	8080030f 	ldh	r2,12(r16)
    72dc:	8c400044 	addi	r17,r17,1
    72e0:	10000626 	beq	r2,zero,72fc <_fwalk_reent+0x7c>
    72e4:	8080038f 	ldh	r2,14(r16)
    72e8:	800b883a 	mov	r5,r16
    72ec:	a809883a 	mov	r4,r21
    72f0:	15000226 	beq	r2,r20,72fc <_fwalk_reent+0x7c>
    72f4:	b03ee83a 	callr	r22
    72f8:	b8aeb03a 	or	r23,r23,r2
    72fc:	84001704 	addi	r16,r16,92
    7300:	947ff51e 	bne	r18,r17,72d8 <_fwalk_reent+0x58>
    7304:	9cc00017 	ldw	r19,0(r19)
    7308:	983fed1e 	bne	r19,zero,72c0 <_fwalk_reent+0x40>
    730c:	00065040 	call	6504 <__sfp_lock_release>
    7310:	b805883a 	mov	r2,r23
    7314:	dfc00817 	ldw	ra,32(sp)
    7318:	ddc00717 	ldw	r23,28(sp)
    731c:	dd800617 	ldw	r22,24(sp)
    7320:	dd400517 	ldw	r21,20(sp)
    7324:	dd000417 	ldw	r20,16(sp)
    7328:	dcc00317 	ldw	r19,12(sp)
    732c:	dc800217 	ldw	r18,8(sp)
    7330:	dc400117 	ldw	r17,4(sp)
    7334:	dc000017 	ldw	r16,0(sp)
    7338:	dec00904 	addi	sp,sp,36
    733c:	f800283a 	ret
    7340:	002f883a 	mov	r23,zero
    7344:	003ff106 	br	730c <_fwalk_reent+0x8c>

00007348 <_fwalk>:
    7348:	defff804 	addi	sp,sp,-32
    734c:	dcc00315 	stw	r19,12(sp)
    7350:	24c0b804 	addi	r19,r4,736
    7354:	dd400515 	stw	r21,20(sp)
    7358:	dfc00715 	stw	ra,28(sp)
    735c:	dd800615 	stw	r22,24(sp)
    7360:	dd000415 	stw	r20,16(sp)
    7364:	dc800215 	stw	r18,8(sp)
    7368:	dc400115 	stw	r17,4(sp)
    736c:	dc000015 	stw	r16,0(sp)
    7370:	282b883a 	mov	r21,r5
    7374:	00065000 	call	6500 <__sfp_lock_acquire>
    7378:	98001f26 	beq	r19,zero,73f8 <_fwalk+0xb0>
    737c:	002d883a 	mov	r22,zero
    7380:	9c800117 	ldw	r18,4(r19)
    7384:	9c000217 	ldw	r16,8(r19)
    7388:	90bfffc4 	addi	r2,r18,-1
    738c:	10000c16 	blt	r2,zero,73c0 <_fwalk+0x78>
    7390:	0023883a 	mov	r17,zero
    7394:	053fffc4 	movi	r20,-1
    7398:	8080030f 	ldh	r2,12(r16)
    739c:	8c400044 	addi	r17,r17,1
    73a0:	10000526 	beq	r2,zero,73b8 <_fwalk+0x70>
    73a4:	8080038f 	ldh	r2,14(r16)
    73a8:	8009883a 	mov	r4,r16
    73ac:	15000226 	beq	r2,r20,73b8 <_fwalk+0x70>
    73b0:	a83ee83a 	callr	r21
    73b4:	b0acb03a 	or	r22,r22,r2
    73b8:	84001704 	addi	r16,r16,92
    73bc:	947ff61e 	bne	r18,r17,7398 <_fwalk+0x50>
    73c0:	9cc00017 	ldw	r19,0(r19)
    73c4:	983fee1e 	bne	r19,zero,7380 <_fwalk+0x38>
    73c8:	00065040 	call	6504 <__sfp_lock_release>
    73cc:	b005883a 	mov	r2,r22
    73d0:	dfc00717 	ldw	ra,28(sp)
    73d4:	dd800617 	ldw	r22,24(sp)
    73d8:	dd400517 	ldw	r21,20(sp)
    73dc:	dd000417 	ldw	r20,16(sp)
    73e0:	dcc00317 	ldw	r19,12(sp)
    73e4:	dc800217 	ldw	r18,8(sp)
    73e8:	dc400117 	ldw	r17,4(sp)
    73ec:	dc000017 	ldw	r16,0(sp)
    73f0:	dec00804 	addi	sp,sp,32
    73f4:	f800283a 	ret
    73f8:	002d883a 	mov	r22,zero
    73fc:	003ff206 	br	73c8 <_fwalk+0x80>

00007400 <iswspace>:
    7400:	00803fc4 	movi	r2,255
    7404:	0007883a 	mov	r3,zero
    7408:	11000636 	bltu	r2,r4,7424 <iswspace+0x24>
    740c:	00800074 	movhi	r2,1
    7410:	10917304 	addi	r2,r2,17868
    7414:	10c00017 	ldw	r3,0(r2)
    7418:	1907883a 	add	r3,r3,r4
    741c:	18800003 	ldbu	r2,0(r3)
    7420:	10c0020c 	andi	r3,r2,8
    7424:	1805883a 	mov	r2,r3
    7428:	f800283a 	ret

0000742c <__locale_charset>:
    742c:	d0a00417 	ldw	r2,-32752(gp)
    7430:	f800283a 	ret

00007434 <_localeconv_r>:
    7434:	00800074 	movhi	r2,1
    7438:	1089d904 	addi	r2,r2,10084
    743c:	f800283a 	ret

00007440 <localeconv>:
    7440:	00800074 	movhi	r2,1
    7444:	10917404 	addi	r2,r2,17872
    7448:	11000017 	ldw	r4,0(r2)
    744c:	00074341 	jmpi	7434 <_localeconv_r>

00007450 <_setlocale_r>:
    7450:	defffc04 	addi	sp,sp,-16
    7454:	00c00074 	movhi	r3,1
    7458:	18c9d404 	addi	r3,r3,10064
    745c:	dc800215 	stw	r18,8(sp)
    7460:	dc400115 	stw	r17,4(sp)
    7464:	dc000015 	stw	r16,0(sp)
    7468:	2023883a 	mov	r17,r4
    746c:	2825883a 	mov	r18,r5
    7470:	dfc00315 	stw	ra,12(sp)
    7474:	3021883a 	mov	r16,r6
    7478:	3009883a 	mov	r4,r6
    747c:	180b883a 	mov	r5,r3
    7480:	30000926 	beq	r6,zero,74a8 <_setlocale_r+0x58>
    7484:	0009d500 	call	9d50 <strcmp>
    7488:	8009883a 	mov	r4,r16
    748c:	01400074 	movhi	r5,1
    7490:	2948a404 	addi	r5,r5,8848
    7494:	10000b1e 	bne	r2,zero,74c4 <_setlocale_r+0x74>
    7498:	8c000d15 	stw	r16,52(r17)
    749c:	8c800c15 	stw	r18,48(r17)
    74a0:	00c00074 	movhi	r3,1
    74a4:	18c9d404 	addi	r3,r3,10064
    74a8:	1805883a 	mov	r2,r3
    74ac:	dfc00317 	ldw	ra,12(sp)
    74b0:	dc800217 	ldw	r18,8(sp)
    74b4:	dc400117 	ldw	r17,4(sp)
    74b8:	dc000017 	ldw	r16,0(sp)
    74bc:	dec00404 	addi	sp,sp,16
    74c0:	f800283a 	ret
    74c4:	0009d500 	call	9d50 <strcmp>
    74c8:	0007883a 	mov	r3,zero
    74cc:	103ff226 	beq	r2,zero,7498 <_setlocale_r+0x48>
    74d0:	003ff506 	br	74a8 <_setlocale_r+0x58>

000074d4 <setlocale>:
    74d4:	01800074 	movhi	r6,1
    74d8:	31917404 	addi	r6,r6,17872
    74dc:	2007883a 	mov	r3,r4
    74e0:	31000017 	ldw	r4,0(r6)
    74e4:	280d883a 	mov	r6,r5
    74e8:	180b883a 	mov	r5,r3
    74ec:	00074501 	jmpi	7450 <_setlocale_r>

000074f0 <__smakebuf_r>:
    74f0:	2880030b 	ldhu	r2,12(r5)
    74f4:	deffed04 	addi	sp,sp,-76
    74f8:	dc401015 	stw	r17,64(sp)
    74fc:	1080008c 	andi	r2,r2,2
    7500:	dc000f15 	stw	r16,60(sp)
    7504:	dfc01215 	stw	ra,72(sp)
    7508:	dc801115 	stw	r18,68(sp)
    750c:	2821883a 	mov	r16,r5
    7510:	2023883a 	mov	r17,r4
    7514:	10000b26 	beq	r2,zero,7544 <__smakebuf_r+0x54>
    7518:	28c010c4 	addi	r3,r5,67
    751c:	00800044 	movi	r2,1
    7520:	28800515 	stw	r2,20(r5)
    7524:	28c00415 	stw	r3,16(r5)
    7528:	28c00015 	stw	r3,0(r5)
    752c:	dfc01217 	ldw	ra,72(sp)
    7530:	dc801117 	ldw	r18,68(sp)
    7534:	dc401017 	ldw	r17,64(sp)
    7538:	dc000f17 	ldw	r16,60(sp)
    753c:	dec01304 	addi	sp,sp,76
    7540:	f800283a 	ret
    7544:	2940038f 	ldh	r5,14(r5)
    7548:	28002116 	blt	r5,zero,75d0 <__smakebuf_r+0xe0>
    754c:	d80d883a 	mov	r6,sp
    7550:	000c5040 	call	c504 <_fstat_r>
    7554:	10001e16 	blt	r2,zero,75d0 <__smakebuf_r+0xe0>
    7558:	d8800117 	ldw	r2,4(sp)
    755c:	00e00014 	movui	r3,32768
    7560:	113c000c 	andi	r4,r2,61440
    7564:	20c03126 	beq	r4,r3,762c <__smakebuf_r+0x13c>
    7568:	8080030b 	ldhu	r2,12(r16)
    756c:	00c80004 	movi	r3,8192
    7570:	10820014 	ori	r2,r2,2048
    7574:	8080030d 	sth	r2,12(r16)
    7578:	20c01e26 	beq	r4,r3,75f4 <__smakebuf_r+0x104>
    757c:	04810004 	movi	r18,1024
    7580:	8809883a 	mov	r4,r17
    7584:	900b883a 	mov	r5,r18
    7588:	00076840 	call	7684 <_malloc_r>
    758c:	1009883a 	mov	r4,r2
    7590:	10003126 	beq	r2,zero,7658 <__smakebuf_r+0x168>
    7594:	80c0030b 	ldhu	r3,12(r16)
    7598:	00800034 	movhi	r2,0
    759c:	10997d04 	addi	r2,r2,26100
    75a0:	88800f15 	stw	r2,60(r17)
    75a4:	18c02014 	ori	r3,r3,128
    75a8:	84800515 	stw	r18,20(r16)
    75ac:	80c0030d 	sth	r3,12(r16)
    75b0:	81000415 	stw	r4,16(r16)
    75b4:	81000015 	stw	r4,0(r16)
    75b8:	dfc01217 	ldw	ra,72(sp)
    75bc:	dc801117 	ldw	r18,68(sp)
    75c0:	dc401017 	ldw	r17,64(sp)
    75c4:	dc000f17 	ldw	r16,60(sp)
    75c8:	dec01304 	addi	sp,sp,76
    75cc:	f800283a 	ret
    75d0:	80c0030b 	ldhu	r3,12(r16)
    75d4:	1880200c 	andi	r2,r3,128
    75d8:	10000426 	beq	r2,zero,75ec <__smakebuf_r+0xfc>
    75dc:	04801004 	movi	r18,64
    75e0:	18820014 	ori	r2,r3,2048
    75e4:	8080030d 	sth	r2,12(r16)
    75e8:	003fe506 	br	7580 <__smakebuf_r+0x90>
    75ec:	04810004 	movi	r18,1024
    75f0:	003ffb06 	br	75e0 <__smakebuf_r+0xf0>
    75f4:	8140038f 	ldh	r5,14(r16)
    75f8:	8809883a 	mov	r4,r17
    75fc:	000d1000 	call	d100 <_isatty_r>
    7600:	103fde26 	beq	r2,zero,757c <__smakebuf_r+0x8c>
    7604:	8080030b 	ldhu	r2,12(r16)
    7608:	80c010c4 	addi	r3,r16,67
    760c:	04810004 	movi	r18,1024
    7610:	10800054 	ori	r2,r2,1
    7614:	8080030d 	sth	r2,12(r16)
    7618:	00800044 	movi	r2,1
    761c:	80c00415 	stw	r3,16(r16)
    7620:	80800515 	stw	r2,20(r16)
    7624:	80c00015 	stw	r3,0(r16)
    7628:	003fd506 	br	7580 <__smakebuf_r+0x90>
    762c:	80c00a17 	ldw	r3,40(r16)
    7630:	00800074 	movhi	r2,1
    7634:	10a70304 	addi	r2,r2,-25588
    7638:	18bfcb1e 	bne	r3,r2,7568 <__smakebuf_r+0x78>
    763c:	8080030b 	ldhu	r2,12(r16)
    7640:	00c10004 	movi	r3,1024
    7644:	1825883a 	mov	r18,r3
    7648:	10c4b03a 	or	r2,r2,r3
    764c:	8080030d 	sth	r2,12(r16)
    7650:	80c01315 	stw	r3,76(r16)
    7654:	003fca06 	br	7580 <__smakebuf_r+0x90>
    7658:	8100030b 	ldhu	r4,12(r16)
    765c:	2080800c 	andi	r2,r4,512
    7660:	103fb21e 	bne	r2,zero,752c <__smakebuf_r+0x3c>
    7664:	80c010c4 	addi	r3,r16,67
    7668:	21000094 	ori	r4,r4,2
    766c:	00800044 	movi	r2,1
    7670:	80800515 	stw	r2,20(r16)
    7674:	8100030d 	sth	r4,12(r16)
    7678:	80c00415 	stw	r3,16(r16)
    767c:	80c00015 	stw	r3,0(r16)
    7680:	003faa06 	br	752c <__smakebuf_r+0x3c>

00007684 <_malloc_r>:
    7684:	defff604 	addi	sp,sp,-40
    7688:	28c002c4 	addi	r3,r5,11
    768c:	00800584 	movi	r2,22
    7690:	dc800215 	stw	r18,8(sp)
    7694:	dfc00915 	stw	ra,36(sp)
    7698:	df000815 	stw	fp,32(sp)
    769c:	ddc00715 	stw	r23,28(sp)
    76a0:	dd800615 	stw	r22,24(sp)
    76a4:	dd400515 	stw	r21,20(sp)
    76a8:	dd000415 	stw	r20,16(sp)
    76ac:	dcc00315 	stw	r19,12(sp)
    76b0:	dc400115 	stw	r17,4(sp)
    76b4:	dc000015 	stw	r16,0(sp)
    76b8:	2025883a 	mov	r18,r4
    76bc:	10c01236 	bltu	r2,r3,7708 <_malloc_r+0x84>
    76c0:	04400404 	movi	r17,16
    76c4:	8940142e 	bgeu	r17,r5,7718 <_malloc_r+0x94>
    76c8:	00800304 	movi	r2,12
    76cc:	0007883a 	mov	r3,zero
    76d0:	90800015 	stw	r2,0(r18)
    76d4:	1805883a 	mov	r2,r3
    76d8:	dfc00917 	ldw	ra,36(sp)
    76dc:	df000817 	ldw	fp,32(sp)
    76e0:	ddc00717 	ldw	r23,28(sp)
    76e4:	dd800617 	ldw	r22,24(sp)
    76e8:	dd400517 	ldw	r21,20(sp)
    76ec:	dd000417 	ldw	r20,16(sp)
    76f0:	dcc00317 	ldw	r19,12(sp)
    76f4:	dc800217 	ldw	r18,8(sp)
    76f8:	dc400117 	ldw	r17,4(sp)
    76fc:	dc000017 	ldw	r16,0(sp)
    7700:	dec00a04 	addi	sp,sp,40
    7704:	f800283a 	ret
    7708:	00bffe04 	movi	r2,-8
    770c:	18a2703a 	and	r17,r3,r2
    7710:	883fed16 	blt	r17,zero,76c8 <_malloc_r+0x44>
    7714:	897fec36 	bltu	r17,r5,76c8 <_malloc_r+0x44>
    7718:	9009883a 	mov	r4,r18
    771c:	000f94c0 	call	f94c <__malloc_lock>
    7720:	00807dc4 	movi	r2,503
    7724:	14402b2e 	bgeu	r2,r17,77d4 <_malloc_r+0x150>
    7728:	8806d27a 	srli	r3,r17,9
    772c:	18003f1e 	bne	r3,zero,782c <_malloc_r+0x1a8>
    7730:	880cd0fa 	srli	r6,r17,3
    7734:	300490fa 	slli	r2,r6,3
    7738:	02c00074 	movhi	r11,1
    773c:	5acb7b04 	addi	r11,r11,11756
    7740:	12cb883a 	add	r5,r2,r11
    7744:	2c000317 	ldw	r16,12(r5)
    7748:	580f883a 	mov	r7,r11
    774c:	2c00041e 	bne	r5,r16,7760 <_malloc_r+0xdc>
    7750:	00000a06 	br	777c <_malloc_r+0xf8>
    7754:	1800860e 	bge	r3,zero,7970 <_malloc_r+0x2ec>
    7758:	84000317 	ldw	r16,12(r16)
    775c:	2c000726 	beq	r5,r16,777c <_malloc_r+0xf8>
    7760:	80800117 	ldw	r2,4(r16)
    7764:	00ffff04 	movi	r3,-4
    7768:	10c8703a 	and	r4,r2,r3
    776c:	2447c83a 	sub	r3,r4,r17
    7770:	008003c4 	movi	r2,15
    7774:	10fff70e 	bge	r2,r3,7754 <_malloc_r+0xd0>
    7778:	31bfffc4 	addi	r6,r6,-1
    777c:	32400044 	addi	r9,r6,1
    7780:	02800074 	movhi	r10,1
    7784:	528b7d04 	addi	r10,r10,11764
    7788:	54000217 	ldw	r16,8(r10)
    778c:	8280a026 	beq	r16,r10,7a10 <_malloc_r+0x38c>
    7790:	80800117 	ldw	r2,4(r16)
    7794:	00ffff04 	movi	r3,-4
    7798:	10ca703a 	and	r5,r2,r3
    779c:	2c4dc83a 	sub	r6,r5,r17
    77a0:	008003c4 	movi	r2,15
    77a4:	11808316 	blt	r2,r6,79b4 <_malloc_r+0x330>
    77a8:	52800315 	stw	r10,12(r10)
    77ac:	52800215 	stw	r10,8(r10)
    77b0:	30002916 	blt	r6,zero,7858 <_malloc_r+0x1d4>
    77b4:	8147883a 	add	r3,r16,r5
    77b8:	18800117 	ldw	r2,4(r3)
    77bc:	9009883a 	mov	r4,r18
    77c0:	10800054 	ori	r2,r2,1
    77c4:	18800115 	stw	r2,4(r3)
    77c8:	000f9500 	call	f950 <__malloc_unlock>
    77cc:	80c00204 	addi	r3,r16,8
    77d0:	003fc006 	br	76d4 <_malloc_r+0x50>
    77d4:	02c00074 	movhi	r11,1
    77d8:	5acb7b04 	addi	r11,r11,11756
    77dc:	8ac5883a 	add	r2,r17,r11
    77e0:	14000317 	ldw	r16,12(r2)
    77e4:	580f883a 	mov	r7,r11
    77e8:	8806d0fa 	srli	r3,r17,3
    77ec:	14006c26 	beq	r2,r16,79a0 <_malloc_r+0x31c>
    77f0:	80c00117 	ldw	r3,4(r16)
    77f4:	00bfff04 	movi	r2,-4
    77f8:	81800317 	ldw	r6,12(r16)
    77fc:	1886703a 	and	r3,r3,r2
    7800:	80c7883a 	add	r3,r16,r3
    7804:	18800117 	ldw	r2,4(r3)
    7808:	81400217 	ldw	r5,8(r16)
    780c:	9009883a 	mov	r4,r18
    7810:	10800054 	ori	r2,r2,1
    7814:	18800115 	stw	r2,4(r3)
    7818:	31400215 	stw	r5,8(r6)
    781c:	29800315 	stw	r6,12(r5)
    7820:	000f9500 	call	f950 <__malloc_unlock>
    7824:	80c00204 	addi	r3,r16,8
    7828:	003faa06 	br	76d4 <_malloc_r+0x50>
    782c:	00800104 	movi	r2,4
    7830:	10c0052e 	bgeu	r2,r3,7848 <_malloc_r+0x1c4>
    7834:	00800504 	movi	r2,20
    7838:	10c07836 	bltu	r2,r3,7a1c <_malloc_r+0x398>
    783c:	198016c4 	addi	r6,r3,91
    7840:	300490fa 	slli	r2,r6,3
    7844:	003fbc06 	br	7738 <_malloc_r+0xb4>
    7848:	8804d1ba 	srli	r2,r17,6
    784c:	11800e04 	addi	r6,r2,56
    7850:	300490fa 	slli	r2,r6,3
    7854:	003fb806 	br	7738 <_malloc_r+0xb4>
    7858:	00807fc4 	movi	r2,511
    785c:	1140bb36 	bltu	r2,r5,7b4c <_malloc_r+0x4c8>
    7860:	2806d0fa 	srli	r3,r5,3
    7864:	573ffe04 	addi	fp,r10,-8
    7868:	00800044 	movi	r2,1
    786c:	180890fa 	slli	r4,r3,3
    7870:	1807d0ba 	srai	r3,r3,2
    7874:	e1c00117 	ldw	r7,4(fp)
    7878:	5909883a 	add	r4,r11,r4
    787c:	21400217 	ldw	r5,8(r4)
    7880:	10c4983a 	sll	r2,r2,r3
    7884:	81000315 	stw	r4,12(r16)
    7888:	81400215 	stw	r5,8(r16)
    788c:	388eb03a 	or	r7,r7,r2
    7890:	2c000315 	stw	r16,12(r5)
    7894:	24000215 	stw	r16,8(r4)
    7898:	e1c00115 	stw	r7,4(fp)
    789c:	4807883a 	mov	r3,r9
    78a0:	4800cd16 	blt	r9,zero,7bd8 <_malloc_r+0x554>
    78a4:	1807d0ba 	srai	r3,r3,2
    78a8:	00800044 	movi	r2,1
    78ac:	10c8983a 	sll	r4,r2,r3
    78b0:	39004436 	bltu	r7,r4,79c4 <_malloc_r+0x340>
    78b4:	21c4703a 	and	r2,r4,r7
    78b8:	10000a1e 	bne	r2,zero,78e4 <_malloc_r+0x260>
    78bc:	2109883a 	add	r4,r4,r4
    78c0:	00bfff04 	movi	r2,-4
    78c4:	4884703a 	and	r2,r9,r2
    78c8:	3906703a 	and	r3,r7,r4
    78cc:	12400104 	addi	r9,r2,4
    78d0:	1800041e 	bne	r3,zero,78e4 <_malloc_r+0x260>
    78d4:	2109883a 	add	r4,r4,r4
    78d8:	3904703a 	and	r2,r7,r4
    78dc:	4a400104 	addi	r9,r9,4
    78e0:	103ffc26 	beq	r2,zero,78d4 <_malloc_r+0x250>
    78e4:	480490fa 	slli	r2,r9,3
    78e8:	4819883a 	mov	r12,r9
    78ec:	023fff04 	movi	r8,-4
    78f0:	589b883a 	add	r13,r11,r2
    78f4:	6807883a 	mov	r3,r13
    78f8:	014003c4 	movi	r5,15
    78fc:	1c000317 	ldw	r16,12(r3)
    7900:	1c00041e 	bne	r3,r16,7914 <_malloc_r+0x290>
    7904:	0000a706 	br	7ba4 <_malloc_r+0x520>
    7908:	3000ab0e 	bge	r6,zero,7bb8 <_malloc_r+0x534>
    790c:	84000317 	ldw	r16,12(r16)
    7910:	1c00a426 	beq	r3,r16,7ba4 <_malloc_r+0x520>
    7914:	80800117 	ldw	r2,4(r16)
    7918:	1204703a 	and	r2,r2,r8
    791c:	144dc83a 	sub	r6,r2,r17
    7920:	29bff90e 	bge	r5,r6,7908 <_malloc_r+0x284>
    7924:	81000317 	ldw	r4,12(r16)
    7928:	80c00217 	ldw	r3,8(r16)
    792c:	89400054 	ori	r5,r17,1
    7930:	8445883a 	add	r2,r16,r17
    7934:	20c00215 	stw	r3,8(r4)
    7938:	19000315 	stw	r4,12(r3)
    793c:	81400115 	stw	r5,4(r16)
    7940:	1187883a 	add	r3,r2,r6
    7944:	31000054 	ori	r4,r6,1
    7948:	50800315 	stw	r2,12(r10)
    794c:	50800215 	stw	r2,8(r10)
    7950:	19800015 	stw	r6,0(r3)
    7954:	11000115 	stw	r4,4(r2)
    7958:	12800215 	stw	r10,8(r2)
    795c:	12800315 	stw	r10,12(r2)
    7960:	9009883a 	mov	r4,r18
    7964:	000f9500 	call	f950 <__malloc_unlock>
    7968:	80c00204 	addi	r3,r16,8
    796c:	003f5906 	br	76d4 <_malloc_r+0x50>
    7970:	8109883a 	add	r4,r16,r4
    7974:	20800117 	ldw	r2,4(r4)
    7978:	80c00217 	ldw	r3,8(r16)
    797c:	81400317 	ldw	r5,12(r16)
    7980:	10800054 	ori	r2,r2,1
    7984:	20800115 	stw	r2,4(r4)
    7988:	28c00215 	stw	r3,8(r5)
    798c:	19400315 	stw	r5,12(r3)
    7990:	9009883a 	mov	r4,r18
    7994:	000f9500 	call	f950 <__malloc_unlock>
    7998:	80c00204 	addi	r3,r16,8
    799c:	003f4d06 	br	76d4 <_malloc_r+0x50>
    79a0:	80800204 	addi	r2,r16,8
    79a4:	14000317 	ldw	r16,12(r2)
    79a8:	143f911e 	bne	r2,r16,77f0 <_malloc_r+0x16c>
    79ac:	1a400084 	addi	r9,r3,2
    79b0:	003f7306 	br	7780 <_malloc_r+0xfc>
    79b4:	88c00054 	ori	r3,r17,1
    79b8:	8445883a 	add	r2,r16,r17
    79bc:	80c00115 	stw	r3,4(r16)
    79c0:	003fdf06 	br	7940 <_malloc_r+0x2bc>
    79c4:	e4000217 	ldw	r16,8(fp)
    79c8:	00bfff04 	movi	r2,-4
    79cc:	80c00117 	ldw	r3,4(r16)
    79d0:	802d883a 	mov	r22,r16
    79d4:	18aa703a 	and	r21,r3,r2
    79d8:	ac401636 	bltu	r21,r17,7a34 <_malloc_r+0x3b0>
    79dc:	ac49c83a 	sub	r4,r21,r17
    79e0:	008003c4 	movi	r2,15
    79e4:	1100130e 	bge	r2,r4,7a34 <_malloc_r+0x3b0>
    79e8:	88800054 	ori	r2,r17,1
    79ec:	8447883a 	add	r3,r16,r17
    79f0:	80800115 	stw	r2,4(r16)
    79f4:	20800054 	ori	r2,r4,1
    79f8:	18800115 	stw	r2,4(r3)
    79fc:	e0c00215 	stw	r3,8(fp)
    7a00:	9009883a 	mov	r4,r18
    7a04:	000f9500 	call	f950 <__malloc_unlock>
    7a08:	80c00204 	addi	r3,r16,8
    7a0c:	003f3106 	br	76d4 <_malloc_r+0x50>
    7a10:	39c00117 	ldw	r7,4(r7)
    7a14:	573ffe04 	addi	fp,r10,-8
    7a18:	003fa006 	br	789c <_malloc_r+0x218>
    7a1c:	00801504 	movi	r2,84
    7a20:	10c06736 	bltu	r2,r3,7bc0 <_malloc_r+0x53c>
    7a24:	8804d33a 	srli	r2,r17,12
    7a28:	11801b84 	addi	r6,r2,110
    7a2c:	300490fa 	slli	r2,r6,3
    7a30:	003f4106 	br	7738 <_malloc_r+0xb4>
    7a34:	d0a72017 	ldw	r2,-25472(gp)
    7a38:	d0e00617 	ldw	r3,-32744(gp)
    7a3c:	053fffc4 	movi	r20,-1
    7a40:	10800404 	addi	r2,r2,16
    7a44:	88a7883a 	add	r19,r17,r2
    7a48:	1d000326 	beq	r3,r20,7a58 <_malloc_r+0x3d4>
    7a4c:	98c3ffc4 	addi	r3,r19,4095
    7a50:	00bc0004 	movi	r2,-4096
    7a54:	18a6703a 	and	r19,r3,r2
    7a58:	9009883a 	mov	r4,r18
    7a5c:	980b883a 	mov	r5,r19
    7a60:	00099f80 	call	99f8 <_sbrk_r>
    7a64:	1009883a 	mov	r4,r2
    7a68:	15000426 	beq	r2,r20,7a7c <_malloc_r+0x3f8>
    7a6c:	854b883a 	add	r5,r16,r21
    7a70:	1029883a 	mov	r20,r2
    7a74:	11405a2e 	bgeu	r2,r5,7be0 <_malloc_r+0x55c>
    7a78:	87000c26 	beq	r16,fp,7aac <_malloc_r+0x428>
    7a7c:	e4000217 	ldw	r16,8(fp)
    7a80:	80c00117 	ldw	r3,4(r16)
    7a84:	00bfff04 	movi	r2,-4
    7a88:	1884703a 	and	r2,r3,r2
    7a8c:	14400336 	bltu	r2,r17,7a9c <_malloc_r+0x418>
    7a90:	1449c83a 	sub	r4,r2,r17
    7a94:	008003c4 	movi	r2,15
    7a98:	113fd316 	blt	r2,r4,79e8 <_malloc_r+0x364>
    7a9c:	9009883a 	mov	r4,r18
    7aa0:	000f9500 	call	f950 <__malloc_unlock>
    7aa4:	0007883a 	mov	r3,zero
    7aa8:	003f0a06 	br	76d4 <_malloc_r+0x50>
    7aac:	05c00074 	movhi	r23,1
    7ab0:	bdd89d04 	addi	r23,r23,25204
    7ab4:	b8800017 	ldw	r2,0(r23)
    7ab8:	988d883a 	add	r6,r19,r2
    7abc:	b9800015 	stw	r6,0(r23)
    7ac0:	d0e00617 	ldw	r3,-32744(gp)
    7ac4:	00bfffc4 	movi	r2,-1
    7ac8:	18808e26 	beq	r3,r2,7d04 <_malloc_r+0x680>
    7acc:	2145c83a 	sub	r2,r4,r5
    7ad0:	3085883a 	add	r2,r6,r2
    7ad4:	b8800015 	stw	r2,0(r23)
    7ad8:	20c001cc 	andi	r3,r4,7
    7adc:	18005f1e 	bne	r3,zero,7c5c <_malloc_r+0x5d8>
    7ae0:	000b883a 	mov	r5,zero
    7ae4:	a4c5883a 	add	r2,r20,r19
    7ae8:	1083ffcc 	andi	r2,r2,4095
    7aec:	00c40004 	movi	r3,4096
    7af0:	1887c83a 	sub	r3,r3,r2
    7af4:	28e7883a 	add	r19,r5,r3
    7af8:	9009883a 	mov	r4,r18
    7afc:	980b883a 	mov	r5,r19
    7b00:	00099f80 	call	99f8 <_sbrk_r>
    7b04:	1007883a 	mov	r3,r2
    7b08:	00bfffc4 	movi	r2,-1
    7b0c:	18807a26 	beq	r3,r2,7cf8 <_malloc_r+0x674>
    7b10:	1d05c83a 	sub	r2,r3,r20
    7b14:	9885883a 	add	r2,r19,r2
    7b18:	10c00054 	ori	r3,r2,1
    7b1c:	b8800017 	ldw	r2,0(r23)
    7b20:	a021883a 	mov	r16,r20
    7b24:	a0c00115 	stw	r3,4(r20)
    7b28:	9885883a 	add	r2,r19,r2
    7b2c:	b8800015 	stw	r2,0(r23)
    7b30:	e5000215 	stw	r20,8(fp)
    7b34:	b7003626 	beq	r22,fp,7c10 <_malloc_r+0x58c>
    7b38:	018003c4 	movi	r6,15
    7b3c:	35404b36 	bltu	r6,r21,7c6c <_malloc_r+0x5e8>
    7b40:	00800044 	movi	r2,1
    7b44:	a0800115 	stw	r2,4(r20)
    7b48:	003fcd06 	br	7a80 <_malloc_r+0x3fc>
    7b4c:	2808d27a 	srli	r4,r5,9
    7b50:	2000371e 	bne	r4,zero,7c30 <_malloc_r+0x5ac>
    7b54:	2808d0fa 	srli	r4,r5,3
    7b58:	200690fa 	slli	r3,r4,3
    7b5c:	1ad1883a 	add	r8,r3,r11
    7b60:	41800217 	ldw	r6,8(r8)
    7b64:	41805b26 	beq	r8,r6,7cd4 <_malloc_r+0x650>
    7b68:	30800117 	ldw	r2,4(r6)
    7b6c:	00ffff04 	movi	r3,-4
    7b70:	10c4703a 	and	r2,r2,r3
    7b74:	2880022e 	bgeu	r5,r2,7b80 <_malloc_r+0x4fc>
    7b78:	31800217 	ldw	r6,8(r6)
    7b7c:	41bffa1e 	bne	r8,r6,7b68 <_malloc_r+0x4e4>
    7b80:	32000317 	ldw	r8,12(r6)
    7b84:	39c00117 	ldw	r7,4(r7)
    7b88:	82000315 	stw	r8,12(r16)
    7b8c:	81800215 	stw	r6,8(r16)
    7b90:	07000074 	movhi	fp,1
    7b94:	e70b7b04 	addi	fp,fp,11756
    7b98:	34000315 	stw	r16,12(r6)
    7b9c:	44000215 	stw	r16,8(r8)
    7ba0:	003f3e06 	br	789c <_malloc_r+0x218>
    7ba4:	63000044 	addi	r12,r12,1
    7ba8:	608000cc 	andi	r2,r12,3
    7bac:	10005d26 	beq	r2,zero,7d24 <_malloc_r+0x6a0>
    7bb0:	18c00204 	addi	r3,r3,8
    7bb4:	003f5106 	br	78fc <_malloc_r+0x278>
    7bb8:	8089883a 	add	r4,r16,r2
    7bbc:	003f6d06 	br	7974 <_malloc_r+0x2f0>
    7bc0:	00805504 	movi	r2,340
    7bc4:	10c02036 	bltu	r2,r3,7c48 <_malloc_r+0x5c4>
    7bc8:	8804d3fa 	srli	r2,r17,15
    7bcc:	11801dc4 	addi	r6,r2,119
    7bd0:	300490fa 	slli	r2,r6,3
    7bd4:	003ed806 	br	7738 <_malloc_r+0xb4>
    7bd8:	48c000c4 	addi	r3,r9,3
    7bdc:	003f3106 	br	78a4 <_malloc_r+0x220>
    7be0:	05c00074 	movhi	r23,1
    7be4:	bdd89d04 	addi	r23,r23,25204
    7be8:	b8800017 	ldw	r2,0(r23)
    7bec:	988d883a 	add	r6,r19,r2
    7bf0:	b9800015 	stw	r6,0(r23)
    7bf4:	293fb21e 	bne	r5,r4,7ac0 <_malloc_r+0x43c>
    7bf8:	2083ffcc 	andi	r2,r4,4095
    7bfc:	103fb01e 	bne	r2,zero,7ac0 <_malloc_r+0x43c>
    7c00:	e4000217 	ldw	r16,8(fp)
    7c04:	9d45883a 	add	r2,r19,r21
    7c08:	10800054 	ori	r2,r2,1
    7c0c:	80800115 	stw	r2,4(r16)
    7c10:	b8c00017 	ldw	r3,0(r23)
    7c14:	d0a72117 	ldw	r2,-25468(gp)
    7c18:	10c0012e 	bgeu	r2,r3,7c20 <_malloc_r+0x59c>
    7c1c:	d0e72115 	stw	r3,-25468(gp)
    7c20:	d0a72217 	ldw	r2,-25464(gp)
    7c24:	10ff962e 	bgeu	r2,r3,7a80 <_malloc_r+0x3fc>
    7c28:	d0e72215 	stw	r3,-25464(gp)
    7c2c:	003f9406 	br	7a80 <_malloc_r+0x3fc>
    7c30:	00800104 	movi	r2,4
    7c34:	11001e36 	bltu	r2,r4,7cb0 <_malloc_r+0x62c>
    7c38:	2804d1ba 	srli	r2,r5,6
    7c3c:	11000e04 	addi	r4,r2,56
    7c40:	200690fa 	slli	r3,r4,3
    7c44:	003fc506 	br	7b5c <_malloc_r+0x4d8>
    7c48:	00815504 	movi	r2,1364
    7c4c:	10c01d2e 	bgeu	r2,r3,7cc4 <_malloc_r+0x640>
    7c50:	01801f84 	movi	r6,126
    7c54:	0080fc04 	movi	r2,1008
    7c58:	003eb706 	br	7738 <_malloc_r+0xb4>
    7c5c:	00800204 	movi	r2,8
    7c60:	10cbc83a 	sub	r5,r2,r3
    7c64:	2169883a 	add	r20,r4,r5
    7c68:	003f9e06 	br	7ae4 <_malloc_r+0x460>
    7c6c:	00bffe04 	movi	r2,-8
    7c70:	a93ffd04 	addi	r4,r21,-12
    7c74:	2088703a 	and	r4,r4,r2
    7c78:	b10b883a 	add	r5,r22,r4
    7c7c:	00c00144 	movi	r3,5
    7c80:	28c00215 	stw	r3,8(r5)
    7c84:	28c00115 	stw	r3,4(r5)
    7c88:	b0800117 	ldw	r2,4(r22)
    7c8c:	1080004c 	andi	r2,r2,1
    7c90:	2084b03a 	or	r2,r4,r2
    7c94:	b0800115 	stw	r2,4(r22)
    7c98:	313fdd2e 	bgeu	r6,r4,7c10 <_malloc_r+0x58c>
    7c9c:	b1400204 	addi	r5,r22,8
    7ca0:	9009883a 	mov	r4,r18
    7ca4:	0006ad00 	call	6ad0 <_free_r>
    7ca8:	e4000217 	ldw	r16,8(fp)
    7cac:	003fd806 	br	7c10 <_malloc_r+0x58c>
    7cb0:	00800504 	movi	r2,20
    7cb4:	11001536 	bltu	r2,r4,7d0c <_malloc_r+0x688>
    7cb8:	210016c4 	addi	r4,r4,91
    7cbc:	200690fa 	slli	r3,r4,3
    7cc0:	003fa606 	br	7b5c <_malloc_r+0x4d8>
    7cc4:	8804d4ba 	srli	r2,r17,18
    7cc8:	11801f04 	addi	r6,r2,124
    7ccc:	300490fa 	slli	r2,r6,3
    7cd0:	003e9906 	br	7738 <_malloc_r+0xb4>
    7cd4:	2009d0ba 	srai	r4,r4,2
    7cd8:	01400074 	movhi	r5,1
    7cdc:	294b7b04 	addi	r5,r5,11756
    7ce0:	00c00044 	movi	r3,1
    7ce4:	28800117 	ldw	r2,4(r5)
    7ce8:	1906983a 	sll	r3,r3,r4
    7cec:	10c4b03a 	or	r2,r2,r3
    7cf0:	28800115 	stw	r2,4(r5)
    7cf4:	003fa306 	br	7b84 <_malloc_r+0x500>
    7cf8:	0027883a 	mov	r19,zero
    7cfc:	00c00044 	movi	r3,1
    7d00:	003f8606 	br	7b1c <_malloc_r+0x498>
    7d04:	d1200615 	stw	r4,-32744(gp)
    7d08:	003f7306 	br	7ad8 <_malloc_r+0x454>
    7d0c:	00801504 	movi	r2,84
    7d10:	11001936 	bltu	r2,r4,7d78 <_malloc_r+0x6f4>
    7d14:	2804d33a 	srli	r2,r5,12
    7d18:	11001b84 	addi	r4,r2,110
    7d1c:	200690fa 	slli	r3,r4,3
    7d20:	003f8e06 	br	7b5c <_malloc_r+0x4d8>
    7d24:	480b883a 	mov	r5,r9
    7d28:	6807883a 	mov	r3,r13
    7d2c:	288000cc 	andi	r2,r5,3
    7d30:	18fffe04 	addi	r3,r3,-8
    7d34:	297fffc4 	addi	r5,r5,-1
    7d38:	10001526 	beq	r2,zero,7d90 <_malloc_r+0x70c>
    7d3c:	18800217 	ldw	r2,8(r3)
    7d40:	10fffa26 	beq	r2,r3,7d2c <_malloc_r+0x6a8>
    7d44:	2109883a 	add	r4,r4,r4
    7d48:	393f1e36 	bltu	r7,r4,79c4 <_malloc_r+0x340>
    7d4c:	203f1d26 	beq	r4,zero,79c4 <_malloc_r+0x340>
    7d50:	21c4703a 	and	r2,r4,r7
    7d54:	10000226 	beq	r2,zero,7d60 <_malloc_r+0x6dc>
    7d58:	6013883a 	mov	r9,r12
    7d5c:	003ee106 	br	78e4 <_malloc_r+0x260>
    7d60:	2109883a 	add	r4,r4,r4
    7d64:	3904703a 	and	r2,r7,r4
    7d68:	63000104 	addi	r12,r12,4
    7d6c:	103ffc26 	beq	r2,zero,7d60 <_malloc_r+0x6dc>
    7d70:	6013883a 	mov	r9,r12
    7d74:	003edb06 	br	78e4 <_malloc_r+0x260>
    7d78:	00805504 	movi	r2,340
    7d7c:	11000836 	bltu	r2,r4,7da0 <_malloc_r+0x71c>
    7d80:	2804d3fa 	srli	r2,r5,15
    7d84:	11001dc4 	addi	r4,r2,119
    7d88:	200690fa 	slli	r3,r4,3
    7d8c:	003f7306 	br	7b5c <_malloc_r+0x4d8>
    7d90:	0104303a 	nor	r2,zero,r4
    7d94:	388e703a 	and	r7,r7,r2
    7d98:	e1c00115 	stw	r7,4(fp)
    7d9c:	003fe906 	br	7d44 <_malloc_r+0x6c0>
    7da0:	00815504 	movi	r2,1364
    7da4:	1100032e 	bgeu	r2,r4,7db4 <_malloc_r+0x730>
    7da8:	01001f84 	movi	r4,126
    7dac:	00c0fc04 	movi	r3,1008
    7db0:	003f6a06 	br	7b5c <_malloc_r+0x4d8>
    7db4:	2804d4ba 	srli	r2,r5,18
    7db8:	11001f04 	addi	r4,r2,124
    7dbc:	200690fa 	slli	r3,r4,3
    7dc0:	003f6606 	br	7b5c <_malloc_r+0x4d8>

00007dc4 <_mbrtowc_r>:
    7dc4:	defffc04 	addi	sp,sp,-16
    7dc8:	dc400215 	stw	r17,8(sp)
    7dcc:	dc000115 	stw	r16,4(sp)
    7dd0:	dfc00315 	stw	ra,12(sp)
    7dd4:	dc000417 	ldw	r16,16(sp)
    7dd8:	2023883a 	mov	r17,r4
    7ddc:	30000f26 	beq	r6,zero,7e1c <_mbrtowc_r+0x58>
    7de0:	dc000015 	stw	r16,0(sp)
    7de4:	0007e840 	call	7e84 <_mbtowc_r>
    7de8:	1007883a 	mov	r3,r2
    7dec:	00bfffc4 	movi	r2,-1
    7df0:	1809883a 	mov	r4,r3
    7df4:	1880111e 	bne	r3,r2,7e3c <_mbrtowc_r+0x78>
    7df8:	80000015 	stw	zero,0(r16)
    7dfc:	00802284 	movi	r2,138
    7e00:	88800015 	stw	r2,0(r17)
    7e04:	2005883a 	mov	r2,r4
    7e08:	dfc00317 	ldw	ra,12(sp)
    7e0c:	dc400217 	ldw	r17,8(sp)
    7e10:	dc000117 	ldw	r16,4(sp)
    7e14:	dec00404 	addi	sp,sp,16
    7e18:	f800283a 	ret
    7e1c:	000b883a 	mov	r5,zero
    7e20:	01800074 	movhi	r6,1
    7e24:	3188a404 	addi	r6,r6,8848
    7e28:	01c00044 	movi	r7,1
    7e2c:	dc000015 	stw	r16,0(sp)
    7e30:	0007e840 	call	7e84 <_mbtowc_r>
    7e34:	1007883a 	mov	r3,r2
    7e38:	003fec06 	br	7dec <_mbrtowc_r+0x28>
    7e3c:	1809883a 	mov	r4,r3
    7e40:	003ff006 	br	7e04 <_mbrtowc_r+0x40>

00007e44 <mbrtowc>:
    7e44:	00800074 	movhi	r2,1
    7e48:	10917404 	addi	r2,r2,17872
    7e4c:	2017883a 	mov	r11,r4
    7e50:	11000017 	ldw	r4,0(r2)
    7e54:	defffe04 	addi	sp,sp,-8
    7e58:	3013883a 	mov	r9,r6
    7e5c:	2805883a 	mov	r2,r5
    7e60:	d9c00015 	stw	r7,0(sp)
    7e64:	580b883a 	mov	r5,r11
    7e68:	100d883a 	mov	r6,r2
    7e6c:	480f883a 	mov	r7,r9
    7e70:	dfc00115 	stw	ra,4(sp)
    7e74:	0007dc40 	call	7dc4 <_mbrtowc_r>
    7e78:	dfc00117 	ldw	ra,4(sp)
    7e7c:	dec00204 	addi	sp,sp,8
    7e80:	f800283a 	ret

00007e84 <_mbtowc_r>:
    7e84:	deffff04 	addi	sp,sp,-4
    7e88:	0005883a 	mov	r2,zero
    7e8c:	28000326 	beq	r5,zero,7e9c <_mbtowc_r+0x18>
    7e90:	3000041e 	bne	r6,zero,7ea4 <_mbtowc_r+0x20>
    7e94:	dec00104 	addi	sp,sp,4
    7e98:	f800283a 	ret
    7e9c:	d80b883a 	mov	r5,sp
    7ea0:	303ffc26 	beq	r6,zero,7e94 <_mbtowc_r+0x10>
    7ea4:	00bfff84 	movi	r2,-2
    7ea8:	383ffa26 	beq	r7,zero,7e94 <_mbtowc_r+0x10>
    7eac:	30800003 	ldbu	r2,0(r6)
    7eb0:	28800015 	stw	r2,0(r5)
    7eb4:	30c00003 	ldbu	r3,0(r6)
    7eb8:	1804c03a 	cmpne	r2,r3,zero
    7ebc:	dec00104 	addi	sp,sp,4
    7ec0:	f800283a 	ret

00007ec4 <memchr>:
    7ec4:	008000c4 	movi	r2,3
    7ec8:	29403fcc 	andi	r5,r5,255
    7ecc:	2007883a 	mov	r3,r4
    7ed0:	1180022e 	bgeu	r2,r6,7edc <memchr+0x18>
    7ed4:	2084703a 	and	r2,r4,r2
    7ed8:	10000b26 	beq	r2,zero,7f08 <memchr+0x44>
    7edc:	313fffc4 	addi	r4,r6,-1
    7ee0:	3000051e 	bne	r6,zero,7ef8 <memchr+0x34>
    7ee4:	00002c06 	br	7f98 <memchr+0xd4>
    7ee8:	213fffc4 	addi	r4,r4,-1
    7eec:	00bfffc4 	movi	r2,-1
    7ef0:	18c00044 	addi	r3,r3,1
    7ef4:	20802826 	beq	r4,r2,7f98 <memchr+0xd4>
    7ef8:	18800003 	ldbu	r2,0(r3)
    7efc:	28bffa1e 	bne	r5,r2,7ee8 <memchr+0x24>
    7f00:	1805883a 	mov	r2,r3
    7f04:	f800283a 	ret
    7f08:	0011883a 	mov	r8,zero
    7f0c:	0007883a 	mov	r3,zero
    7f10:	01c00104 	movi	r7,4
    7f14:	4004923a 	slli	r2,r8,8
    7f18:	18c00044 	addi	r3,r3,1
    7f1c:	1151883a 	add	r8,r2,r5
    7f20:	19fffc1e 	bne	r3,r7,7f14 <memchr+0x50>
    7f24:	02bfbff4 	movhi	r10,65279
    7f28:	52bfbfc4 	addi	r10,r10,-257
    7f2c:	02602074 	movhi	r9,32897
    7f30:	4a602004 	addi	r9,r9,-32640
    7f34:	02c000c4 	movi	r11,3
    7f38:	20800017 	ldw	r2,0(r4)
    7f3c:	31bfff04 	addi	r6,r6,-4
    7f40:	200f883a 	mov	r7,r4
    7f44:	1204f03a 	xor	r2,r2,r8
    7f48:	1287883a 	add	r3,r2,r10
    7f4c:	1a46703a 	and	r3,r3,r9
    7f50:	0084303a 	nor	r2,zero,r2
    7f54:	10c4703a 	and	r2,r2,r3
    7f58:	10000b26 	beq	r2,zero,7f88 <memchr+0xc4>
    7f5c:	20800003 	ldbu	r2,0(r4)
    7f60:	28800f26 	beq	r5,r2,7fa0 <memchr+0xdc>
    7f64:	20800043 	ldbu	r2,1(r4)
    7f68:	21c00044 	addi	r7,r4,1
    7f6c:	28800c26 	beq	r5,r2,7fa0 <memchr+0xdc>
    7f70:	20800083 	ldbu	r2,2(r4)
    7f74:	21c00084 	addi	r7,r4,2
    7f78:	28800926 	beq	r5,r2,7fa0 <memchr+0xdc>
    7f7c:	208000c3 	ldbu	r2,3(r4)
    7f80:	21c000c4 	addi	r7,r4,3
    7f84:	28800626 	beq	r5,r2,7fa0 <memchr+0xdc>
    7f88:	21000104 	addi	r4,r4,4
    7f8c:	59bfea36 	bltu	r11,r6,7f38 <memchr+0x74>
    7f90:	2007883a 	mov	r3,r4
    7f94:	003fd106 	br	7edc <memchr+0x18>
    7f98:	0005883a 	mov	r2,zero
    7f9c:	f800283a 	ret
    7fa0:	3805883a 	mov	r2,r7
    7fa4:	f800283a 	ret

00007fa8 <memcpy>:
    7fa8:	01c003c4 	movi	r7,15
    7fac:	2007883a 	mov	r3,r4
    7fb0:	3980032e 	bgeu	r7,r6,7fc0 <memcpy+0x18>
    7fb4:	2904b03a 	or	r2,r5,r4
    7fb8:	108000cc 	andi	r2,r2,3
    7fbc:	10000926 	beq	r2,zero,7fe4 <memcpy+0x3c>
    7fc0:	30000626 	beq	r6,zero,7fdc <memcpy+0x34>
    7fc4:	30cd883a 	add	r6,r6,r3
    7fc8:	28800003 	ldbu	r2,0(r5)
    7fcc:	29400044 	addi	r5,r5,1
    7fd0:	18800005 	stb	r2,0(r3)
    7fd4:	18c00044 	addi	r3,r3,1
    7fd8:	30fffb1e 	bne	r6,r3,7fc8 <memcpy+0x20>
    7fdc:	2005883a 	mov	r2,r4
    7fe0:	f800283a 	ret
    7fe4:	3811883a 	mov	r8,r7
    7fe8:	200f883a 	mov	r7,r4
    7fec:	28c00017 	ldw	r3,0(r5)
    7ff0:	31bffc04 	addi	r6,r6,-16
    7ff4:	38c00015 	stw	r3,0(r7)
    7ff8:	28800117 	ldw	r2,4(r5)
    7ffc:	38800115 	stw	r2,4(r7)
    8000:	28c00217 	ldw	r3,8(r5)
    8004:	38c00215 	stw	r3,8(r7)
    8008:	28800317 	ldw	r2,12(r5)
    800c:	29400404 	addi	r5,r5,16
    8010:	38800315 	stw	r2,12(r7)
    8014:	39c00404 	addi	r7,r7,16
    8018:	41bff436 	bltu	r8,r6,7fec <memcpy+0x44>
    801c:	008000c4 	movi	r2,3
    8020:	1180072e 	bgeu	r2,r6,8040 <memcpy+0x98>
    8024:	1007883a 	mov	r3,r2
    8028:	28800017 	ldw	r2,0(r5)
    802c:	31bfff04 	addi	r6,r6,-4
    8030:	29400104 	addi	r5,r5,4
    8034:	38800015 	stw	r2,0(r7)
    8038:	39c00104 	addi	r7,r7,4
    803c:	19bffa36 	bltu	r3,r6,8028 <memcpy+0x80>
    8040:	3807883a 	mov	r3,r7
    8044:	003fde06 	br	7fc0 <memcpy+0x18>

00008048 <memmove>:
    8048:	2807883a 	mov	r3,r5
    804c:	2011883a 	mov	r8,r4
    8050:	29000c2e 	bgeu	r5,r4,8084 <memmove+0x3c>
    8054:	298f883a 	add	r7,r5,r6
    8058:	21c00a2e 	bgeu	r4,r7,8084 <memmove+0x3c>
    805c:	30000726 	beq	r6,zero,807c <memmove+0x34>
    8060:	2187883a 	add	r3,r4,r6
    8064:	198dc83a 	sub	r6,r3,r6
    8068:	39ffffc4 	addi	r7,r7,-1
    806c:	38800003 	ldbu	r2,0(r7)
    8070:	18ffffc4 	addi	r3,r3,-1
    8074:	18800005 	stb	r2,0(r3)
    8078:	19bffb1e 	bne	r3,r6,8068 <memmove+0x20>
    807c:	2005883a 	mov	r2,r4
    8080:	f800283a 	ret
    8084:	01c003c4 	movi	r7,15
    8088:	39800a36 	bltu	r7,r6,80b4 <memmove+0x6c>
    808c:	303ffb26 	beq	r6,zero,807c <memmove+0x34>
    8090:	400f883a 	mov	r7,r8
    8094:	320d883a 	add	r6,r6,r8
    8098:	28800003 	ldbu	r2,0(r5)
    809c:	29400044 	addi	r5,r5,1
    80a0:	38800005 	stb	r2,0(r7)
    80a4:	39c00044 	addi	r7,r7,1
    80a8:	39bffb1e 	bne	r7,r6,8098 <memmove+0x50>
    80ac:	2005883a 	mov	r2,r4
    80b0:	f800283a 	ret
    80b4:	1904b03a 	or	r2,r3,r4
    80b8:	108000cc 	andi	r2,r2,3
    80bc:	103ff31e 	bne	r2,zero,808c <memmove+0x44>
    80c0:	3811883a 	mov	r8,r7
    80c4:	180b883a 	mov	r5,r3
    80c8:	200f883a 	mov	r7,r4
    80cc:	28c00017 	ldw	r3,0(r5)
    80d0:	31bffc04 	addi	r6,r6,-16
    80d4:	38c00015 	stw	r3,0(r7)
    80d8:	28800117 	ldw	r2,4(r5)
    80dc:	38800115 	stw	r2,4(r7)
    80e0:	28c00217 	ldw	r3,8(r5)
    80e4:	38c00215 	stw	r3,8(r7)
    80e8:	28800317 	ldw	r2,12(r5)
    80ec:	29400404 	addi	r5,r5,16
    80f0:	38800315 	stw	r2,12(r7)
    80f4:	39c00404 	addi	r7,r7,16
    80f8:	41bff436 	bltu	r8,r6,80cc <memmove+0x84>
    80fc:	008000c4 	movi	r2,3
    8100:	1180072e 	bgeu	r2,r6,8120 <memmove+0xd8>
    8104:	1007883a 	mov	r3,r2
    8108:	28800017 	ldw	r2,0(r5)
    810c:	31bfff04 	addi	r6,r6,-4
    8110:	29400104 	addi	r5,r5,4
    8114:	38800015 	stw	r2,0(r7)
    8118:	39c00104 	addi	r7,r7,4
    811c:	19bffa36 	bltu	r3,r6,8108 <memmove+0xc0>
    8120:	3811883a 	mov	r8,r7
    8124:	003fd906 	br	808c <memmove+0x44>

00008128 <memset>:
    8128:	008000c4 	movi	r2,3
    812c:	29403fcc 	andi	r5,r5,255
    8130:	2007883a 	mov	r3,r4
    8134:	1180022e 	bgeu	r2,r6,8140 <memset+0x18>
    8138:	2084703a 	and	r2,r4,r2
    813c:	10000826 	beq	r2,zero,8160 <memset+0x38>
    8140:	30000526 	beq	r6,zero,8158 <memset+0x30>
    8144:	2805883a 	mov	r2,r5
    8148:	30cd883a 	add	r6,r6,r3
    814c:	18800005 	stb	r2,0(r3)
    8150:	18c00044 	addi	r3,r3,1
    8154:	19bffd1e 	bne	r3,r6,814c <memset+0x24>
    8158:	2005883a 	mov	r2,r4
    815c:	f800283a 	ret
    8160:	2804923a 	slli	r2,r5,8
    8164:	020003c4 	movi	r8,15
    8168:	200f883a 	mov	r7,r4
    816c:	2884b03a 	or	r2,r5,r2
    8170:	1006943a 	slli	r3,r2,16
    8174:	10c6b03a 	or	r3,r2,r3
    8178:	41800a2e 	bgeu	r8,r6,81a4 <memset+0x7c>
    817c:	4005883a 	mov	r2,r8
    8180:	31bffc04 	addi	r6,r6,-16
    8184:	38c00015 	stw	r3,0(r7)
    8188:	38c00115 	stw	r3,4(r7)
    818c:	38c00215 	stw	r3,8(r7)
    8190:	38c00315 	stw	r3,12(r7)
    8194:	39c00404 	addi	r7,r7,16
    8198:	11bff936 	bltu	r2,r6,8180 <memset+0x58>
    819c:	008000c4 	movi	r2,3
    81a0:	1180052e 	bgeu	r2,r6,81b8 <memset+0x90>
    81a4:	31bfff04 	addi	r6,r6,-4
    81a8:	008000c4 	movi	r2,3
    81ac:	38c00015 	stw	r3,0(r7)
    81b0:	39c00104 	addi	r7,r7,4
    81b4:	11bffb36 	bltu	r2,r6,81a4 <memset+0x7c>
    81b8:	3807883a 	mov	r3,r7
    81bc:	003fe006 	br	8140 <memset+0x18>

000081c0 <_Bfree>:
    81c0:	28000826 	beq	r5,zero,81e4 <_Bfree+0x24>
    81c4:	28800117 	ldw	r2,4(r5)
    81c8:	21001317 	ldw	r4,76(r4)
    81cc:	1085883a 	add	r2,r2,r2
    81d0:	1085883a 	add	r2,r2,r2
    81d4:	1105883a 	add	r2,r2,r4
    81d8:	10c00017 	ldw	r3,0(r2)
    81dc:	28c00015 	stw	r3,0(r5)
    81e0:	11400015 	stw	r5,0(r2)
    81e4:	f800283a 	ret

000081e8 <__hi0bits>:
    81e8:	20bfffec 	andhi	r2,r4,65535
    81ec:	10001426 	beq	r2,zero,8240 <__hi0bits+0x58>
    81f0:	0007883a 	mov	r3,zero
    81f4:	20bfc02c 	andhi	r2,r4,65280
    81f8:	1000021e 	bne	r2,zero,8204 <__hi0bits+0x1c>
    81fc:	2008923a 	slli	r4,r4,8
    8200:	18c00204 	addi	r3,r3,8
    8204:	20bc002c 	andhi	r2,r4,61440
    8208:	1000021e 	bne	r2,zero,8214 <__hi0bits+0x2c>
    820c:	2008913a 	slli	r4,r4,4
    8210:	18c00104 	addi	r3,r3,4
    8214:	20b0002c 	andhi	r2,r4,49152
    8218:	1000031e 	bne	r2,zero,8228 <__hi0bits+0x40>
    821c:	2105883a 	add	r2,r4,r4
    8220:	18c00084 	addi	r3,r3,2
    8224:	1089883a 	add	r4,r2,r2
    8228:	20000316 	blt	r4,zero,8238 <__hi0bits+0x50>
    822c:	2090002c 	andhi	r2,r4,16384
    8230:	10000626 	beq	r2,zero,824c <__hi0bits+0x64>
    8234:	18c00044 	addi	r3,r3,1
    8238:	1805883a 	mov	r2,r3
    823c:	f800283a 	ret
    8240:	2008943a 	slli	r4,r4,16
    8244:	00c00404 	movi	r3,16
    8248:	003fea06 	br	81f4 <__hi0bits+0xc>
    824c:	00c00804 	movi	r3,32
    8250:	1805883a 	mov	r2,r3
    8254:	f800283a 	ret

00008258 <__lo0bits>:
    8258:	20c00017 	ldw	r3,0(r4)
    825c:	188001cc 	andi	r2,r3,7
    8260:	10000a26 	beq	r2,zero,828c <__lo0bits+0x34>
    8264:	1880004c 	andi	r2,r3,1
    8268:	1005003a 	cmpeq	r2,r2,zero
    826c:	10002126 	beq	r2,zero,82f4 <__lo0bits+0x9c>
    8270:	1880008c 	andi	r2,r3,2
    8274:	1000251e 	bne	r2,zero,830c <__lo0bits+0xb4>
    8278:	1804d0ba 	srli	r2,r3,2
    827c:	01400084 	movi	r5,2
    8280:	20800015 	stw	r2,0(r4)
    8284:	2805883a 	mov	r2,r5
    8288:	f800283a 	ret
    828c:	18bfffcc 	andi	r2,r3,65535
    8290:	10001526 	beq	r2,zero,82e8 <__lo0bits+0x90>
    8294:	000b883a 	mov	r5,zero
    8298:	18803fcc 	andi	r2,r3,255
    829c:	1000021e 	bne	r2,zero,82a8 <__lo0bits+0x50>
    82a0:	1806d23a 	srli	r3,r3,8
    82a4:	29400204 	addi	r5,r5,8
    82a8:	188003cc 	andi	r2,r3,15
    82ac:	1000021e 	bne	r2,zero,82b8 <__lo0bits+0x60>
    82b0:	1806d13a 	srli	r3,r3,4
    82b4:	29400104 	addi	r5,r5,4
    82b8:	188000cc 	andi	r2,r3,3
    82bc:	1000021e 	bne	r2,zero,82c8 <__lo0bits+0x70>
    82c0:	1806d0ba 	srli	r3,r3,2
    82c4:	29400084 	addi	r5,r5,2
    82c8:	1880004c 	andi	r2,r3,1
    82cc:	1000031e 	bne	r2,zero,82dc <__lo0bits+0x84>
    82d0:	1806d07a 	srli	r3,r3,1
    82d4:	18000a26 	beq	r3,zero,8300 <__lo0bits+0xa8>
    82d8:	29400044 	addi	r5,r5,1
    82dc:	2805883a 	mov	r2,r5
    82e0:	20c00015 	stw	r3,0(r4)
    82e4:	f800283a 	ret
    82e8:	1806d43a 	srli	r3,r3,16
    82ec:	01400404 	movi	r5,16
    82f0:	003fe906 	br	8298 <__lo0bits+0x40>
    82f4:	000b883a 	mov	r5,zero
    82f8:	2805883a 	mov	r2,r5
    82fc:	f800283a 	ret
    8300:	01400804 	movi	r5,32
    8304:	2805883a 	mov	r2,r5
    8308:	f800283a 	ret
    830c:	1804d07a 	srli	r2,r3,1
    8310:	01400044 	movi	r5,1
    8314:	20800015 	stw	r2,0(r4)
    8318:	003fda06 	br	8284 <__lo0bits+0x2c>

0000831c <__mcmp>:
    831c:	20800417 	ldw	r2,16(r4)
    8320:	28c00417 	ldw	r3,16(r5)
    8324:	10cfc83a 	sub	r7,r2,r3
    8328:	38000c1e 	bne	r7,zero,835c <__mcmp+0x40>
    832c:	18c5883a 	add	r2,r3,r3
    8330:	1085883a 	add	r2,r2,r2
    8334:	10c00504 	addi	r3,r2,20
    8338:	21000504 	addi	r4,r4,20
    833c:	28cb883a 	add	r5,r5,r3
    8340:	2085883a 	add	r2,r4,r2
    8344:	10bfff04 	addi	r2,r2,-4
    8348:	297fff04 	addi	r5,r5,-4
    834c:	11800017 	ldw	r6,0(r2)
    8350:	28c00017 	ldw	r3,0(r5)
    8354:	30c0031e 	bne	r6,r3,8364 <__mcmp+0x48>
    8358:	20bffa36 	bltu	r4,r2,8344 <__mcmp+0x28>
    835c:	3805883a 	mov	r2,r7
    8360:	f800283a 	ret
    8364:	30c00336 	bltu	r6,r3,8374 <__mcmp+0x58>
    8368:	01c00044 	movi	r7,1
    836c:	3805883a 	mov	r2,r7
    8370:	f800283a 	ret
    8374:	01ffffc4 	movi	r7,-1
    8378:	003ff806 	br	835c <__mcmp+0x40>

0000837c <__ulp>:
    837c:	295ffc2c 	andhi	r5,r5,32752
    8380:	013f3034 	movhi	r4,64704
    8384:	290b883a 	add	r5,r5,r4
    8388:	0145c83a 	sub	r2,zero,r5
    838c:	1007d53a 	srai	r3,r2,20
    8390:	000d883a 	mov	r6,zero
    8394:	0140040e 	bge	zero,r5,83a8 <__ulp+0x2c>
    8398:	280f883a 	mov	r7,r5
    839c:	3807883a 	mov	r3,r7
    83a0:	3005883a 	mov	r2,r6
    83a4:	f800283a 	ret
    83a8:	008004c4 	movi	r2,19
    83ac:	193ffb04 	addi	r4,r3,-20
    83b0:	10c00c0e 	bge	r2,r3,83e4 <__ulp+0x68>
    83b4:	008007c4 	movi	r2,31
    83b8:	1107c83a 	sub	r3,r2,r4
    83bc:	00800784 	movi	r2,30
    83c0:	01400044 	movi	r5,1
    83c4:	11000216 	blt	r2,r4,83d0 <__ulp+0x54>
    83c8:	00800044 	movi	r2,1
    83cc:	10ca983a 	sll	r5,r2,r3
    83d0:	000f883a 	mov	r7,zero
    83d4:	280d883a 	mov	r6,r5
    83d8:	3807883a 	mov	r3,r7
    83dc:	3005883a 	mov	r2,r6
    83e0:	f800283a 	ret
    83e4:	00800234 	movhi	r2,8
    83e8:	10cfd83a 	sra	r7,r2,r3
    83ec:	000d883a 	mov	r6,zero
    83f0:	3005883a 	mov	r2,r6
    83f4:	3807883a 	mov	r3,r7
    83f8:	f800283a 	ret

000083fc <__b2d>:
    83fc:	20800417 	ldw	r2,16(r4)
    8400:	defff904 	addi	sp,sp,-28
    8404:	dd000415 	stw	r20,16(sp)
    8408:	1085883a 	add	r2,r2,r2
    840c:	25000504 	addi	r20,r4,20
    8410:	1085883a 	add	r2,r2,r2
    8414:	dc000015 	stw	r16,0(sp)
    8418:	a0a1883a 	add	r16,r20,r2
    841c:	dd400515 	stw	r21,20(sp)
    8420:	857fff17 	ldw	r21,-4(r16)
    8424:	dc400115 	stw	r17,4(sp)
    8428:	dfc00615 	stw	ra,24(sp)
    842c:	a809883a 	mov	r4,r21
    8430:	2823883a 	mov	r17,r5
    8434:	dcc00315 	stw	r19,12(sp)
    8438:	dc800215 	stw	r18,8(sp)
    843c:	00081e80 	call	81e8 <__hi0bits>
    8440:	100b883a 	mov	r5,r2
    8444:	00800804 	movi	r2,32
    8448:	1145c83a 	sub	r2,r2,r5
    844c:	88800015 	stw	r2,0(r17)
    8450:	00800284 	movi	r2,10
    8454:	80ffff04 	addi	r3,r16,-4
    8458:	11401416 	blt	r2,r5,84ac <__b2d+0xb0>
    845c:	008002c4 	movi	r2,11
    8460:	1149c83a 	sub	r4,r2,r5
    8464:	a0c02736 	bltu	r20,r3,8504 <__b2d+0x108>
    8468:	000d883a 	mov	r6,zero
    846c:	28800544 	addi	r2,r5,21
    8470:	a906d83a 	srl	r3,r21,r4
    8474:	a884983a 	sll	r2,r21,r2
    8478:	1ccffc34 	orhi	r19,r3,16368
    847c:	11a4b03a 	or	r18,r2,r6
    8480:	9005883a 	mov	r2,r18
    8484:	9807883a 	mov	r3,r19
    8488:	dfc00617 	ldw	ra,24(sp)
    848c:	dd400517 	ldw	r21,20(sp)
    8490:	dd000417 	ldw	r20,16(sp)
    8494:	dcc00317 	ldw	r19,12(sp)
    8498:	dc800217 	ldw	r18,8(sp)
    849c:	dc400117 	ldw	r17,4(sp)
    84a0:	dc000017 	ldw	r16,0(sp)
    84a4:	dec00704 	addi	sp,sp,28
    84a8:	f800283a 	ret
    84ac:	a0c00e36 	bltu	r20,r3,84e8 <__b2d+0xec>
    84b0:	293ffd44 	addi	r4,r5,-11
    84b4:	000d883a 	mov	r6,zero
    84b8:	20000f26 	beq	r4,zero,84f8 <__b2d+0xfc>
    84bc:	00800804 	movi	r2,32
    84c0:	110bc83a 	sub	r5,r2,r4
    84c4:	a0c01236 	bltu	r20,r3,8510 <__b2d+0x114>
    84c8:	000f883a 	mov	r7,zero
    84cc:	a904983a 	sll	r2,r21,r4
    84d0:	3146d83a 	srl	r3,r6,r5
    84d4:	3108983a 	sll	r4,r6,r4
    84d8:	108ffc34 	orhi	r2,r2,16368
    84dc:	18a6b03a 	or	r19,r3,r2
    84e0:	3924b03a 	or	r18,r7,r4
    84e4:	003fe606 	br	8480 <__b2d+0x84>
    84e8:	293ffd44 	addi	r4,r5,-11
    84ec:	81bffe17 	ldw	r6,-8(r16)
    84f0:	80fffe04 	addi	r3,r16,-8
    84f4:	203ff11e 	bne	r4,zero,84bc <__b2d+0xc0>
    84f8:	accffc34 	orhi	r19,r21,16368
    84fc:	3025883a 	mov	r18,r6
    8500:	003fdf06 	br	8480 <__b2d+0x84>
    8504:	18bfff17 	ldw	r2,-4(r3)
    8508:	110cd83a 	srl	r6,r2,r4
    850c:	003fd706 	br	846c <__b2d+0x70>
    8510:	18bfff17 	ldw	r2,-4(r3)
    8514:	114ed83a 	srl	r7,r2,r5
    8518:	003fec06 	br	84cc <__b2d+0xd0>

0000851c <__ratio>:
    851c:	defff904 	addi	sp,sp,-28
    8520:	dc400215 	stw	r17,8(sp)
    8524:	2823883a 	mov	r17,r5
    8528:	d80b883a 	mov	r5,sp
    852c:	dfc00615 	stw	ra,24(sp)
    8530:	dd000515 	stw	r20,20(sp)
    8534:	dcc00415 	stw	r19,16(sp)
    8538:	dc800315 	stw	r18,12(sp)
    853c:	2025883a 	mov	r18,r4
    8540:	00083fc0 	call	83fc <__b2d>
    8544:	8809883a 	mov	r4,r17
    8548:	d9400104 	addi	r5,sp,4
    854c:	1027883a 	mov	r19,r2
    8550:	1829883a 	mov	r20,r3
    8554:	00083fc0 	call	83fc <__b2d>
    8558:	89000417 	ldw	r4,16(r17)
    855c:	91c00417 	ldw	r7,16(r18)
    8560:	d9800117 	ldw	r6,4(sp)
    8564:	180b883a 	mov	r5,r3
    8568:	390fc83a 	sub	r7,r7,r4
    856c:	1009883a 	mov	r4,r2
    8570:	d8800017 	ldw	r2,0(sp)
    8574:	380e917a 	slli	r7,r7,5
    8578:	2011883a 	mov	r8,r4
    857c:	1185c83a 	sub	r2,r2,r6
    8580:	11c5883a 	add	r2,r2,r7
    8584:	1006953a 	slli	r3,r2,20
    8588:	2813883a 	mov	r9,r5
    858c:	00800d0e 	bge	zero,r2,85c4 <__ratio+0xa8>
    8590:	1d29883a 	add	r20,r3,r20
    8594:	a00b883a 	mov	r5,r20
    8598:	480f883a 	mov	r7,r9
    859c:	9809883a 	mov	r4,r19
    85a0:	400d883a 	mov	r6,r8
    85a4:	000e8e00 	call	e8e0 <__divdf3>
    85a8:	dfc00617 	ldw	ra,24(sp)
    85ac:	dd000517 	ldw	r20,20(sp)
    85b0:	dcc00417 	ldw	r19,16(sp)
    85b4:	dc800317 	ldw	r18,12(sp)
    85b8:	dc400217 	ldw	r17,8(sp)
    85bc:	dec00704 	addi	sp,sp,28
    85c0:	f800283a 	ret
    85c4:	28d3c83a 	sub	r9,r5,r3
    85c8:	003ff206 	br	8594 <__ratio+0x78>

000085cc <_mprec_log10>:
    85cc:	defffe04 	addi	sp,sp,-8
    85d0:	008005c4 	movi	r2,23
    85d4:	dc000015 	stw	r16,0(sp)
    85d8:	dfc00115 	stw	ra,4(sp)
    85dc:	2021883a 	mov	r16,r4
    85e0:	11000c16 	blt	r2,r4,8614 <_mprec_log10+0x48>
    85e4:	200490fa 	slli	r2,r4,3
    85e8:	00c00074 	movhi	r3,1
    85ec:	18c9e504 	addi	r3,r3,10132
    85f0:	10c5883a 	add	r2,r2,r3
    85f4:	12400117 	ldw	r9,4(r2)
    85f8:	12000017 	ldw	r8,0(r2)
    85fc:	4807883a 	mov	r3,r9
    8600:	4005883a 	mov	r2,r8
    8604:	dfc00117 	ldw	ra,4(sp)
    8608:	dc000017 	ldw	r16,0(sp)
    860c:	dec00204 	addi	sp,sp,8
    8610:	f800283a 	ret
    8614:	0011883a 	mov	r8,zero
    8618:	024ffc34 	movhi	r9,16368
    861c:	0005883a 	mov	r2,zero
    8620:	00d00934 	movhi	r3,16420
    8624:	480b883a 	mov	r5,r9
    8628:	4009883a 	mov	r4,r8
    862c:	180f883a 	mov	r7,r3
    8630:	100d883a 	mov	r6,r2
    8634:	000e51c0 	call	e51c <__muldf3>
    8638:	843fffc4 	addi	r16,r16,-1
    863c:	1011883a 	mov	r8,r2
    8640:	1813883a 	mov	r9,r3
    8644:	803ff51e 	bne	r16,zero,861c <_mprec_log10+0x50>
    8648:	4005883a 	mov	r2,r8
    864c:	4807883a 	mov	r3,r9
    8650:	dfc00117 	ldw	ra,4(sp)
    8654:	dc000017 	ldw	r16,0(sp)
    8658:	dec00204 	addi	sp,sp,8
    865c:	f800283a 	ret

00008660 <__copybits>:
    8660:	297fffc4 	addi	r5,r5,-1
    8664:	30800417 	ldw	r2,16(r6)
    8668:	280bd17a 	srai	r5,r5,5
    866c:	31800504 	addi	r6,r6,20
    8670:	1085883a 	add	r2,r2,r2
    8674:	294b883a 	add	r5,r5,r5
    8678:	294b883a 	add	r5,r5,r5
    867c:	1085883a 	add	r2,r2,r2
    8680:	290b883a 	add	r5,r5,r4
    8684:	3087883a 	add	r3,r6,r2
    8688:	29400104 	addi	r5,r5,4
    868c:	30c0052e 	bgeu	r6,r3,86a4 <__copybits+0x44>
    8690:	30800017 	ldw	r2,0(r6)
    8694:	31800104 	addi	r6,r6,4
    8698:	20800015 	stw	r2,0(r4)
    869c:	21000104 	addi	r4,r4,4
    86a0:	30fffb36 	bltu	r6,r3,8690 <__copybits+0x30>
    86a4:	2140032e 	bgeu	r4,r5,86b4 <__copybits+0x54>
    86a8:	20000015 	stw	zero,0(r4)
    86ac:	21000104 	addi	r4,r4,4
    86b0:	217ffd36 	bltu	r4,r5,86a8 <__copybits+0x48>
    86b4:	f800283a 	ret

000086b8 <__any_on>:
    86b8:	20800417 	ldw	r2,16(r4)
    86bc:	2807d17a 	srai	r3,r5,5
    86c0:	21000504 	addi	r4,r4,20
    86c4:	10c00d0e 	bge	r2,r3,86fc <__any_on+0x44>
    86c8:	1085883a 	add	r2,r2,r2
    86cc:	1085883a 	add	r2,r2,r2
    86d0:	208d883a 	add	r6,r4,r2
    86d4:	2180182e 	bgeu	r4,r6,8738 <__any_on+0x80>
    86d8:	30bfff17 	ldw	r2,-4(r6)
    86dc:	30ffff04 	addi	r3,r6,-4
    86e0:	1000041e 	bne	r2,zero,86f4 <__any_on+0x3c>
    86e4:	20c0142e 	bgeu	r4,r3,8738 <__any_on+0x80>
    86e8:	18ffff04 	addi	r3,r3,-4
    86ec:	18800017 	ldw	r2,0(r3)
    86f0:	103ffc26 	beq	r2,zero,86e4 <__any_on+0x2c>
    86f4:	00800044 	movi	r2,1
    86f8:	f800283a 	ret
    86fc:	18800a0e 	bge	r3,r2,8728 <__any_on+0x70>
    8700:	294007cc 	andi	r5,r5,31
    8704:	28000826 	beq	r5,zero,8728 <__any_on+0x70>
    8708:	18c5883a 	add	r2,r3,r3
    870c:	1085883a 	add	r2,r2,r2
    8710:	208d883a 	add	r6,r4,r2
    8714:	30c00017 	ldw	r3,0(r6)
    8718:	1944d83a 	srl	r2,r3,r5
    871c:	1144983a 	sll	r2,r2,r5
    8720:	18bff41e 	bne	r3,r2,86f4 <__any_on+0x3c>
    8724:	003feb06 	br	86d4 <__any_on+0x1c>
    8728:	18c5883a 	add	r2,r3,r3
    872c:	1085883a 	add	r2,r2,r2
    8730:	208d883a 	add	r6,r4,r2
    8734:	003fe706 	br	86d4 <__any_on+0x1c>
    8738:	0005883a 	mov	r2,zero
    873c:	f800283a 	ret

00008740 <_Balloc>:
    8740:	20c01317 	ldw	r3,76(r4)
    8744:	defffb04 	addi	sp,sp,-20
    8748:	dcc00315 	stw	r19,12(sp)
    874c:	dc800215 	stw	r18,8(sp)
    8750:	dfc00415 	stw	ra,16(sp)
    8754:	2825883a 	mov	r18,r5
    8758:	dc400115 	stw	r17,4(sp)
    875c:	dc000015 	stw	r16,0(sp)
    8760:	2027883a 	mov	r19,r4
    8764:	01800404 	movi	r6,16
    8768:	01400104 	movi	r5,4
    876c:	18001726 	beq	r3,zero,87cc <_Balloc+0x8c>
    8770:	01400044 	movi	r5,1
    8774:	9485883a 	add	r2,r18,r18
    8778:	2ca2983a 	sll	r17,r5,r18
    877c:	1085883a 	add	r2,r2,r2
    8780:	10c7883a 	add	r3,r2,r3
    8784:	1c000017 	ldw	r16,0(r3)
    8788:	8c4d883a 	add	r6,r17,r17
    878c:	318d883a 	add	r6,r6,r6
    8790:	9809883a 	mov	r4,r19
    8794:	31800504 	addi	r6,r6,20
    8798:	80001226 	beq	r16,zero,87e4 <_Balloc+0xa4>
    879c:	80800017 	ldw	r2,0(r16)
    87a0:	18800015 	stw	r2,0(r3)
    87a4:	80000415 	stw	zero,16(r16)
    87a8:	80000315 	stw	zero,12(r16)
    87ac:	8005883a 	mov	r2,r16
    87b0:	dfc00417 	ldw	ra,16(sp)
    87b4:	dcc00317 	ldw	r19,12(sp)
    87b8:	dc800217 	ldw	r18,8(sp)
    87bc:	dc400117 	ldw	r17,4(sp)
    87c0:	dc000017 	ldw	r16,0(sp)
    87c4:	dec00504 	addi	sp,sp,20
    87c8:	f800283a 	ret
    87cc:	000c2bc0 	call	c2bc <_calloc_r>
    87d0:	1007883a 	mov	r3,r2
    87d4:	0021883a 	mov	r16,zero
    87d8:	98801315 	stw	r2,76(r19)
    87dc:	103fe41e 	bne	r2,zero,8770 <_Balloc+0x30>
    87e0:	003ff206 	br	87ac <_Balloc+0x6c>
    87e4:	000c2bc0 	call	c2bc <_calloc_r>
    87e8:	103ff026 	beq	r2,zero,87ac <_Balloc+0x6c>
    87ec:	1021883a 	mov	r16,r2
    87f0:	14800115 	stw	r18,4(r2)
    87f4:	14400215 	stw	r17,8(r2)
    87f8:	003fea06 	br	87a4 <_Balloc+0x64>

000087fc <__d2b>:
    87fc:	defff504 	addi	sp,sp,-44
    8800:	dcc00515 	stw	r19,20(sp)
    8804:	04c00044 	movi	r19,1
    8808:	dc000215 	stw	r16,8(sp)
    880c:	2821883a 	mov	r16,r5
    8810:	980b883a 	mov	r5,r19
    8814:	ddc00915 	stw	r23,36(sp)
    8818:	dd800815 	stw	r22,32(sp)
    881c:	dd400715 	stw	r21,28(sp)
    8820:	dd000615 	stw	r20,24(sp)
    8824:	dc800415 	stw	r18,16(sp)
    8828:	dc400315 	stw	r17,12(sp)
    882c:	dfc00a15 	stw	ra,40(sp)
    8830:	3023883a 	mov	r17,r6
    8834:	382d883a 	mov	r22,r7
    8838:	ddc00b17 	ldw	r23,44(sp)
    883c:	00087400 	call	8740 <_Balloc>
    8840:	1025883a 	mov	r18,r2
    8844:	00a00034 	movhi	r2,32768
    8848:	10bfffc4 	addi	r2,r2,-1
    884c:	8888703a 	and	r4,r17,r2
    8850:	202ad53a 	srli	r21,r4,20
    8854:	00800434 	movhi	r2,16
    8858:	10bfffc4 	addi	r2,r2,-1
    885c:	8886703a 	and	r3,r17,r2
    8860:	a829003a 	cmpeq	r20,r21,zero
    8864:	800b883a 	mov	r5,r16
    8868:	d8c00115 	stw	r3,4(sp)
    886c:	94000504 	addi	r16,r18,20
    8870:	a000021e 	bne	r20,zero,887c <__d2b+0x80>
    8874:	18c00434 	orhi	r3,r3,16
    8878:	d8c00115 	stw	r3,4(sp)
    887c:	28002726 	beq	r5,zero,891c <__d2b+0x120>
    8880:	d809883a 	mov	r4,sp
    8884:	d9400015 	stw	r5,0(sp)
    8888:	00082580 	call	8258 <__lo0bits>
    888c:	100d883a 	mov	r6,r2
    8890:	10003526 	beq	r2,zero,8968 <__d2b+0x16c>
    8894:	d8c00117 	ldw	r3,4(sp)
    8898:	00800804 	movi	r2,32
    889c:	1185c83a 	sub	r2,r2,r6
    88a0:	d9000017 	ldw	r4,0(sp)
    88a4:	1886983a 	sll	r3,r3,r2
    88a8:	1906b03a 	or	r3,r3,r4
    88ac:	90c00515 	stw	r3,20(r18)
    88b0:	d8c00117 	ldw	r3,4(sp)
    88b4:	1986d83a 	srl	r3,r3,r6
    88b8:	d8c00115 	stw	r3,4(sp)
    88bc:	180b003a 	cmpeq	r5,r3,zero
    88c0:	00800084 	movi	r2,2
    88c4:	114bc83a 	sub	r5,r2,r5
    88c8:	80c00115 	stw	r3,4(r16)
    88cc:	91400415 	stw	r5,16(r18)
    88d0:	a0001a1e 	bne	r20,zero,893c <__d2b+0x140>
    88d4:	3545883a 	add	r2,r6,r21
    88d8:	10bef344 	addi	r2,r2,-1075
    88dc:	00c00d44 	movi	r3,53
    88e0:	b0800015 	stw	r2,0(r22)
    88e4:	1987c83a 	sub	r3,r3,r6
    88e8:	b8c00015 	stw	r3,0(r23)
    88ec:	9005883a 	mov	r2,r18
    88f0:	dfc00a17 	ldw	ra,40(sp)
    88f4:	ddc00917 	ldw	r23,36(sp)
    88f8:	dd800817 	ldw	r22,32(sp)
    88fc:	dd400717 	ldw	r21,28(sp)
    8900:	dd000617 	ldw	r20,24(sp)
    8904:	dcc00517 	ldw	r19,20(sp)
    8908:	dc800417 	ldw	r18,16(sp)
    890c:	dc400317 	ldw	r17,12(sp)
    8910:	dc000217 	ldw	r16,8(sp)
    8914:	dec00b04 	addi	sp,sp,44
    8918:	f800283a 	ret
    891c:	d9000104 	addi	r4,sp,4
    8920:	00082580 	call	8258 <__lo0bits>
    8924:	11800804 	addi	r6,r2,32
    8928:	d8800117 	ldw	r2,4(sp)
    892c:	94c00415 	stw	r19,16(r18)
    8930:	980b883a 	mov	r5,r19
    8934:	90800515 	stw	r2,20(r18)
    8938:	a03fe626 	beq	r20,zero,88d4 <__d2b+0xd8>
    893c:	2945883a 	add	r2,r5,r5
    8940:	1085883a 	add	r2,r2,r2
    8944:	1405883a 	add	r2,r2,r16
    8948:	113fff17 	ldw	r4,-4(r2)
    894c:	30fef384 	addi	r3,r6,-1074
    8950:	2820917a 	slli	r16,r5,5
    8954:	b0c00015 	stw	r3,0(r22)
    8958:	00081e80 	call	81e8 <__hi0bits>
    895c:	80a1c83a 	sub	r16,r16,r2
    8960:	bc000015 	stw	r16,0(r23)
    8964:	003fe106 	br	88ec <__d2b+0xf0>
    8968:	d8800017 	ldw	r2,0(sp)
    896c:	90800515 	stw	r2,20(r18)
    8970:	d8c00117 	ldw	r3,4(sp)
    8974:	003fd106 	br	88bc <__d2b+0xc0>

00008978 <__mdiff>:
    8978:	defffb04 	addi	sp,sp,-20
    897c:	dc000015 	stw	r16,0(sp)
    8980:	2821883a 	mov	r16,r5
    8984:	dc800215 	stw	r18,8(sp)
    8988:	300b883a 	mov	r5,r6
    898c:	2025883a 	mov	r18,r4
    8990:	8009883a 	mov	r4,r16
    8994:	dc400115 	stw	r17,4(sp)
    8998:	dfc00415 	stw	ra,16(sp)
    899c:	dcc00315 	stw	r19,12(sp)
    89a0:	3023883a 	mov	r17,r6
    89a4:	000831c0 	call	831c <__mcmp>
    89a8:	10004226 	beq	r2,zero,8ab4 <__mdiff+0x13c>
    89ac:	10005016 	blt	r2,zero,8af0 <__mdiff+0x178>
    89b0:	0027883a 	mov	r19,zero
    89b4:	81400117 	ldw	r5,4(r16)
    89b8:	9009883a 	mov	r4,r18
    89bc:	00087400 	call	8740 <_Balloc>
    89c0:	1019883a 	mov	r12,r2
    89c4:	82800417 	ldw	r10,16(r16)
    89c8:	88800417 	ldw	r2,16(r17)
    89cc:	81800504 	addi	r6,r16,20
    89d0:	5287883a 	add	r3,r10,r10
    89d4:	1085883a 	add	r2,r2,r2
    89d8:	18c7883a 	add	r3,r3,r3
    89dc:	1085883a 	add	r2,r2,r2
    89e0:	8a000504 	addi	r8,r17,20
    89e4:	64c00315 	stw	r19,12(r12)
    89e8:	30db883a 	add	r13,r6,r3
    89ec:	4097883a 	add	r11,r8,r2
    89f0:	61c00504 	addi	r7,r12,20
    89f4:	0013883a 	mov	r9,zero
    89f8:	31000017 	ldw	r4,0(r6)
    89fc:	41400017 	ldw	r5,0(r8)
    8a00:	42000104 	addi	r8,r8,4
    8a04:	20bfffcc 	andi	r2,r4,65535
    8a08:	28ffffcc 	andi	r3,r5,65535
    8a0c:	10c5c83a 	sub	r2,r2,r3
    8a10:	1245883a 	add	r2,r2,r9
    8a14:	2008d43a 	srli	r4,r4,16
    8a18:	280ad43a 	srli	r5,r5,16
    8a1c:	1007d43a 	srai	r3,r2,16
    8a20:	3880000d 	sth	r2,0(r7)
    8a24:	2149c83a 	sub	r4,r4,r5
    8a28:	20c9883a 	add	r4,r4,r3
    8a2c:	3900008d 	sth	r4,2(r7)
    8a30:	31800104 	addi	r6,r6,4
    8a34:	39c00104 	addi	r7,r7,4
    8a38:	2013d43a 	srai	r9,r4,16
    8a3c:	42ffee36 	bltu	r8,r11,89f8 <__mdiff+0x80>
    8a40:	33400c2e 	bgeu	r6,r13,8a74 <__mdiff+0xfc>
    8a44:	30800017 	ldw	r2,0(r6)
    8a48:	31800104 	addi	r6,r6,4
    8a4c:	10ffffcc 	andi	r3,r2,65535
    8a50:	1a47883a 	add	r3,r3,r9
    8a54:	1004d43a 	srli	r2,r2,16
    8a58:	1809d43a 	srai	r4,r3,16
    8a5c:	38c0000d 	sth	r3,0(r7)
    8a60:	1105883a 	add	r2,r2,r4
    8a64:	3880008d 	sth	r2,2(r7)
    8a68:	1013d43a 	srai	r9,r2,16
    8a6c:	39c00104 	addi	r7,r7,4
    8a70:	337ff436 	bltu	r6,r13,8a44 <__mdiff+0xcc>
    8a74:	38bfff17 	ldw	r2,-4(r7)
    8a78:	38ffff04 	addi	r3,r7,-4
    8a7c:	1000041e 	bne	r2,zero,8a90 <__mdiff+0x118>
    8a80:	18ffff04 	addi	r3,r3,-4
    8a84:	18800017 	ldw	r2,0(r3)
    8a88:	52bfffc4 	addi	r10,r10,-1
    8a8c:	103ffc26 	beq	r2,zero,8a80 <__mdiff+0x108>
    8a90:	6005883a 	mov	r2,r12
    8a94:	62800415 	stw	r10,16(r12)
    8a98:	dfc00417 	ldw	ra,16(sp)
    8a9c:	dcc00317 	ldw	r19,12(sp)
    8aa0:	dc800217 	ldw	r18,8(sp)
    8aa4:	dc400117 	ldw	r17,4(sp)
    8aa8:	dc000017 	ldw	r16,0(sp)
    8aac:	dec00504 	addi	sp,sp,20
    8ab0:	f800283a 	ret
    8ab4:	9009883a 	mov	r4,r18
    8ab8:	000b883a 	mov	r5,zero
    8abc:	00087400 	call	8740 <_Balloc>
    8ac0:	1019883a 	mov	r12,r2
    8ac4:	00800044 	movi	r2,1
    8ac8:	60800415 	stw	r2,16(r12)
    8acc:	6005883a 	mov	r2,r12
    8ad0:	60000515 	stw	zero,20(r12)
    8ad4:	dfc00417 	ldw	ra,16(sp)
    8ad8:	dcc00317 	ldw	r19,12(sp)
    8adc:	dc800217 	ldw	r18,8(sp)
    8ae0:	dc400117 	ldw	r17,4(sp)
    8ae4:	dc000017 	ldw	r16,0(sp)
    8ae8:	dec00504 	addi	sp,sp,20
    8aec:	f800283a 	ret
    8af0:	880d883a 	mov	r6,r17
    8af4:	04c00044 	movi	r19,1
    8af8:	8023883a 	mov	r17,r16
    8afc:	3021883a 	mov	r16,r6
    8b00:	003fac06 	br	89b4 <__mdiff+0x3c>

00008b04 <__lshift>:
    8b04:	defff904 	addi	sp,sp,-28
    8b08:	28800417 	ldw	r2,16(r5)
    8b0c:	dc000015 	stw	r16,0(sp)
    8b10:	3021d17a 	srai	r16,r6,5
    8b14:	28c00217 	ldw	r3,8(r5)
    8b18:	10800044 	addi	r2,r2,1
    8b1c:	dc400115 	stw	r17,4(sp)
    8b20:	80a3883a 	add	r17,r16,r2
    8b24:	dd400515 	stw	r21,20(sp)
    8b28:	dd000415 	stw	r20,16(sp)
    8b2c:	dc800215 	stw	r18,8(sp)
    8b30:	dfc00615 	stw	ra,24(sp)
    8b34:	2825883a 	mov	r18,r5
    8b38:	dcc00315 	stw	r19,12(sp)
    8b3c:	3029883a 	mov	r20,r6
    8b40:	202b883a 	mov	r21,r4
    8b44:	29400117 	ldw	r5,4(r5)
    8b48:	1c40030e 	bge	r3,r17,8b58 <__lshift+0x54>
    8b4c:	18c7883a 	add	r3,r3,r3
    8b50:	29400044 	addi	r5,r5,1
    8b54:	1c7ffd16 	blt	r3,r17,8b4c <__lshift+0x48>
    8b58:	a809883a 	mov	r4,r21
    8b5c:	00087400 	call	8740 <_Balloc>
    8b60:	1027883a 	mov	r19,r2
    8b64:	11400504 	addi	r5,r2,20
    8b68:	0400090e 	bge	zero,r16,8b90 <__lshift+0x8c>
    8b6c:	2805883a 	mov	r2,r5
    8b70:	0007883a 	mov	r3,zero
    8b74:	18c00044 	addi	r3,r3,1
    8b78:	10000015 	stw	zero,0(r2)
    8b7c:	10800104 	addi	r2,r2,4
    8b80:	80fffc1e 	bne	r16,r3,8b74 <__lshift+0x70>
    8b84:	8405883a 	add	r2,r16,r16
    8b88:	1085883a 	add	r2,r2,r2
    8b8c:	288b883a 	add	r5,r5,r2
    8b90:	90800417 	ldw	r2,16(r18)
    8b94:	91000504 	addi	r4,r18,20
    8b98:	a18007cc 	andi	r6,r20,31
    8b9c:	1085883a 	add	r2,r2,r2
    8ba0:	1085883a 	add	r2,r2,r2
    8ba4:	208f883a 	add	r7,r4,r2
    8ba8:	30001e26 	beq	r6,zero,8c24 <__lshift+0x120>
    8bac:	00800804 	movi	r2,32
    8bb0:	1191c83a 	sub	r8,r2,r6
    8bb4:	0007883a 	mov	r3,zero
    8bb8:	20800017 	ldw	r2,0(r4)
    8bbc:	1184983a 	sll	r2,r2,r6
    8bc0:	1884b03a 	or	r2,r3,r2
    8bc4:	28800015 	stw	r2,0(r5)
    8bc8:	20c00017 	ldw	r3,0(r4)
    8bcc:	21000104 	addi	r4,r4,4
    8bd0:	29400104 	addi	r5,r5,4
    8bd4:	1a06d83a 	srl	r3,r3,r8
    8bd8:	21fff736 	bltu	r4,r7,8bb8 <__lshift+0xb4>
    8bdc:	28c00015 	stw	r3,0(r5)
    8be0:	18000126 	beq	r3,zero,8be8 <__lshift+0xe4>
    8be4:	8c400044 	addi	r17,r17,1
    8be8:	88bfffc4 	addi	r2,r17,-1
    8bec:	98800415 	stw	r2,16(r19)
    8bf0:	a809883a 	mov	r4,r21
    8bf4:	900b883a 	mov	r5,r18
    8bf8:	00081c00 	call	81c0 <_Bfree>
    8bfc:	9805883a 	mov	r2,r19
    8c00:	dfc00617 	ldw	ra,24(sp)
    8c04:	dd400517 	ldw	r21,20(sp)
    8c08:	dd000417 	ldw	r20,16(sp)
    8c0c:	dcc00317 	ldw	r19,12(sp)
    8c10:	dc800217 	ldw	r18,8(sp)
    8c14:	dc400117 	ldw	r17,4(sp)
    8c18:	dc000017 	ldw	r16,0(sp)
    8c1c:	dec00704 	addi	sp,sp,28
    8c20:	f800283a 	ret
    8c24:	20800017 	ldw	r2,0(r4)
    8c28:	21000104 	addi	r4,r4,4
    8c2c:	28800015 	stw	r2,0(r5)
    8c30:	29400104 	addi	r5,r5,4
    8c34:	21ffec2e 	bgeu	r4,r7,8be8 <__lshift+0xe4>
    8c38:	20800017 	ldw	r2,0(r4)
    8c3c:	21000104 	addi	r4,r4,4
    8c40:	28800015 	stw	r2,0(r5)
    8c44:	29400104 	addi	r5,r5,4
    8c48:	21fff636 	bltu	r4,r7,8c24 <__lshift+0x120>
    8c4c:	003fe606 	br	8be8 <__lshift+0xe4>

00008c50 <__multiply>:
    8c50:	defff904 	addi	sp,sp,-28
    8c54:	dcc00315 	stw	r19,12(sp)
    8c58:	dc800215 	stw	r18,8(sp)
    8c5c:	2cc00417 	ldw	r19,16(r5)
    8c60:	34800417 	ldw	r18,16(r6)
    8c64:	dd000415 	stw	r20,16(sp)
    8c68:	dc400115 	stw	r17,4(sp)
    8c6c:	dfc00615 	stw	ra,24(sp)
    8c70:	dd400515 	stw	r21,20(sp)
    8c74:	dc000015 	stw	r16,0(sp)
    8c78:	2823883a 	mov	r17,r5
    8c7c:	3029883a 	mov	r20,r6
    8c80:	9c80040e 	bge	r19,r18,8c94 <__multiply+0x44>
    8c84:	9027883a 	mov	r19,r18
    8c88:	2c800417 	ldw	r18,16(r5)
    8c8c:	2829883a 	mov	r20,r5
    8c90:	3023883a 	mov	r17,r6
    8c94:	88800217 	ldw	r2,8(r17)
    8c98:	9ca1883a 	add	r16,r19,r18
    8c9c:	89400117 	ldw	r5,4(r17)
    8ca0:	1400010e 	bge	r2,r16,8ca8 <__multiply+0x58>
    8ca4:	29400044 	addi	r5,r5,1
    8ca8:	00087400 	call	8740 <_Balloc>
    8cac:	102b883a 	mov	r21,r2
    8cb0:	8405883a 	add	r2,r16,r16
    8cb4:	1085883a 	add	r2,r2,r2
    8cb8:	a9000504 	addi	r4,r21,20
    8cbc:	209d883a 	add	r14,r4,r2
    8cc0:	2380042e 	bgeu	r4,r14,8cd4 <__multiply+0x84>
    8cc4:	2005883a 	mov	r2,r4
    8cc8:	10000015 	stw	zero,0(r2)
    8ccc:	10800104 	addi	r2,r2,4
    8cd0:	13bffd36 	bltu	r2,r14,8cc8 <__multiply+0x78>
    8cd4:	9485883a 	add	r2,r18,r18
    8cd8:	9cc7883a 	add	r3,r19,r19
    8cdc:	a1800504 	addi	r6,r20,20
    8ce0:	1085883a 	add	r2,r2,r2
    8ce4:	8b400504 	addi	r13,r17,20
    8ce8:	18c7883a 	add	r3,r3,r3
    8cec:	309f883a 	add	r15,r6,r2
    8cf0:	68d7883a 	add	r11,r13,r3
    8cf4:	33c03b2e 	bgeu	r6,r15,8de4 <__multiply+0x194>
    8cf8:	2019883a 	mov	r12,r4
    8cfc:	30800017 	ldw	r2,0(r6)
    8d00:	127fffcc 	andi	r9,r2,65535
    8d04:	48001826 	beq	r9,zero,8d68 <__multiply+0x118>
    8d08:	6811883a 	mov	r8,r13
    8d0c:	600f883a 	mov	r7,r12
    8d10:	0015883a 	mov	r10,zero
    8d14:	40c00017 	ldw	r3,0(r8)
    8d18:	39400017 	ldw	r5,0(r7)
    8d1c:	42000104 	addi	r8,r8,4
    8d20:	193fffcc 	andi	r4,r3,65535
    8d24:	4909383a 	mul	r4,r9,r4
    8d28:	1806d43a 	srli	r3,r3,16
    8d2c:	28bfffcc 	andi	r2,r5,65535
    8d30:	5085883a 	add	r2,r10,r2
    8d34:	2089883a 	add	r4,r4,r2
    8d38:	48c7383a 	mul	r3,r9,r3
    8d3c:	280ad43a 	srli	r5,r5,16
    8d40:	2004d43a 	srli	r2,r4,16
    8d44:	3900000d 	sth	r4,0(r7)
    8d48:	1947883a 	add	r3,r3,r5
    8d4c:	10c5883a 	add	r2,r2,r3
    8d50:	3880008d 	sth	r2,2(r7)
    8d54:	1014d43a 	srli	r10,r2,16
    8d58:	39c00104 	addi	r7,r7,4
    8d5c:	42ffed36 	bltu	r8,r11,8d14 <__multiply+0xc4>
    8d60:	3a800015 	stw	r10,0(r7)
    8d64:	30800017 	ldw	r2,0(r6)
    8d68:	1012d43a 	srli	r9,r2,16
    8d6c:	48001926 	beq	r9,zero,8dd4 <__multiply+0x184>
    8d70:	60800017 	ldw	r2,0(r12)
    8d74:	6811883a 	mov	r8,r13
    8d78:	600f883a 	mov	r7,r12
    8d7c:	0015883a 	mov	r10,zero
    8d80:	100b883a 	mov	r5,r2
    8d84:	41000017 	ldw	r4,0(r8)
    8d88:	2806d43a 	srli	r3,r5,16
    8d8c:	3880000d 	sth	r2,0(r7)
    8d90:	20bfffcc 	andi	r2,r4,65535
    8d94:	4885383a 	mul	r2,r9,r2
    8d98:	50c7883a 	add	r3,r10,r3
    8d9c:	2008d43a 	srli	r4,r4,16
    8da0:	10c5883a 	add	r2,r2,r3
    8da4:	3880008d 	sth	r2,2(r7)
    8da8:	39c00104 	addi	r7,r7,4
    8dac:	39400017 	ldw	r5,0(r7)
    8db0:	4909383a 	mul	r4,r9,r4
    8db4:	1004d43a 	srli	r2,r2,16
    8db8:	28ffffcc 	andi	r3,r5,65535
    8dbc:	20c9883a 	add	r4,r4,r3
    8dc0:	1105883a 	add	r2,r2,r4
    8dc4:	42000104 	addi	r8,r8,4
    8dc8:	1014d43a 	srli	r10,r2,16
    8dcc:	42ffed36 	bltu	r8,r11,8d84 <__multiply+0x134>
    8dd0:	38800015 	stw	r2,0(r7)
    8dd4:	31800104 	addi	r6,r6,4
    8dd8:	33c0022e 	bgeu	r6,r15,8de4 <__multiply+0x194>
    8ddc:	63000104 	addi	r12,r12,4
    8de0:	003fc606 	br	8cfc <__multiply+0xac>
    8de4:	0400090e 	bge	zero,r16,8e0c <__multiply+0x1bc>
    8de8:	70bfff17 	ldw	r2,-4(r14)
    8dec:	70ffff04 	addi	r3,r14,-4
    8df0:	10000326 	beq	r2,zero,8e00 <__multiply+0x1b0>
    8df4:	00000506 	br	8e0c <__multiply+0x1bc>
    8df8:	18800017 	ldw	r2,0(r3)
    8dfc:	1000031e 	bne	r2,zero,8e0c <__multiply+0x1bc>
    8e00:	843fffc4 	addi	r16,r16,-1
    8e04:	18ffff04 	addi	r3,r3,-4
    8e08:	803ffb1e 	bne	r16,zero,8df8 <__multiply+0x1a8>
    8e0c:	a805883a 	mov	r2,r21
    8e10:	ac000415 	stw	r16,16(r21)
    8e14:	dfc00617 	ldw	ra,24(sp)
    8e18:	dd400517 	ldw	r21,20(sp)
    8e1c:	dd000417 	ldw	r20,16(sp)
    8e20:	dcc00317 	ldw	r19,12(sp)
    8e24:	dc800217 	ldw	r18,8(sp)
    8e28:	dc400117 	ldw	r17,4(sp)
    8e2c:	dc000017 	ldw	r16,0(sp)
    8e30:	dec00704 	addi	sp,sp,28
    8e34:	f800283a 	ret

00008e38 <__i2b>:
    8e38:	defffd04 	addi	sp,sp,-12
    8e3c:	dc000015 	stw	r16,0(sp)
    8e40:	04000044 	movi	r16,1
    8e44:	dc800115 	stw	r18,4(sp)
    8e48:	2825883a 	mov	r18,r5
    8e4c:	800b883a 	mov	r5,r16
    8e50:	dfc00215 	stw	ra,8(sp)
    8e54:	00087400 	call	8740 <_Balloc>
    8e58:	14000415 	stw	r16,16(r2)
    8e5c:	14800515 	stw	r18,20(r2)
    8e60:	dfc00217 	ldw	ra,8(sp)
    8e64:	dc800117 	ldw	r18,4(sp)
    8e68:	dc000017 	ldw	r16,0(sp)
    8e6c:	dec00304 	addi	sp,sp,12
    8e70:	f800283a 	ret

00008e74 <__multadd>:
    8e74:	defffa04 	addi	sp,sp,-24
    8e78:	dc800215 	stw	r18,8(sp)
    8e7c:	2c800417 	ldw	r18,16(r5)
    8e80:	dd000415 	stw	r20,16(sp)
    8e84:	dcc00315 	stw	r19,12(sp)
    8e88:	dc000015 	stw	r16,0(sp)
    8e8c:	dfc00515 	stw	ra,20(sp)
    8e90:	3821883a 	mov	r16,r7
    8e94:	dc400115 	stw	r17,4(sp)
    8e98:	2827883a 	mov	r19,r5
    8e9c:	2029883a 	mov	r20,r4
    8ea0:	2a000504 	addi	r8,r5,20
    8ea4:	000f883a 	mov	r7,zero
    8ea8:	40800017 	ldw	r2,0(r8)
    8eac:	39c00044 	addi	r7,r7,1
    8eb0:	10ffffcc 	andi	r3,r2,65535
    8eb4:	1987383a 	mul	r3,r3,r6
    8eb8:	1004d43a 	srli	r2,r2,16
    8ebc:	1c07883a 	add	r3,r3,r16
    8ec0:	180ad43a 	srli	r5,r3,16
    8ec4:	1185383a 	mul	r2,r2,r6
    8ec8:	18ffffcc 	andi	r3,r3,65535
    8ecc:	1145883a 	add	r2,r2,r5
    8ed0:	1008943a 	slli	r4,r2,16
    8ed4:	1020d43a 	srli	r16,r2,16
    8ed8:	20c9883a 	add	r4,r4,r3
    8edc:	41000015 	stw	r4,0(r8)
    8ee0:	42000104 	addi	r8,r8,4
    8ee4:	3cbff016 	blt	r7,r18,8ea8 <__multadd+0x34>
    8ee8:	80000826 	beq	r16,zero,8f0c <__multadd+0x98>
    8eec:	98800217 	ldw	r2,8(r19)
    8ef0:	90800f0e 	bge	r18,r2,8f30 <__multadd+0xbc>
    8ef4:	9485883a 	add	r2,r18,r18
    8ef8:	1085883a 	add	r2,r2,r2
    8efc:	14c5883a 	add	r2,r2,r19
    8f00:	90c00044 	addi	r3,r18,1
    8f04:	14000515 	stw	r16,20(r2)
    8f08:	98c00415 	stw	r3,16(r19)
    8f0c:	9805883a 	mov	r2,r19
    8f10:	dfc00517 	ldw	ra,20(sp)
    8f14:	dd000417 	ldw	r20,16(sp)
    8f18:	dcc00317 	ldw	r19,12(sp)
    8f1c:	dc800217 	ldw	r18,8(sp)
    8f20:	dc400117 	ldw	r17,4(sp)
    8f24:	dc000017 	ldw	r16,0(sp)
    8f28:	dec00604 	addi	sp,sp,24
    8f2c:	f800283a 	ret
    8f30:	99400117 	ldw	r5,4(r19)
    8f34:	a009883a 	mov	r4,r20
    8f38:	29400044 	addi	r5,r5,1
    8f3c:	00087400 	call	8740 <_Balloc>
    8f40:	99800417 	ldw	r6,16(r19)
    8f44:	99400304 	addi	r5,r19,12
    8f48:	11000304 	addi	r4,r2,12
    8f4c:	318d883a 	add	r6,r6,r6
    8f50:	318d883a 	add	r6,r6,r6
    8f54:	31800204 	addi	r6,r6,8
    8f58:	1023883a 	mov	r17,r2
    8f5c:	0007fa80 	call	7fa8 <memcpy>
    8f60:	980b883a 	mov	r5,r19
    8f64:	a009883a 	mov	r4,r20
    8f68:	00081c00 	call	81c0 <_Bfree>
    8f6c:	8827883a 	mov	r19,r17
    8f70:	003fe006 	br	8ef4 <__multadd+0x80>

00008f74 <__pow5mult>:
    8f74:	defffa04 	addi	sp,sp,-24
    8f78:	308000cc 	andi	r2,r6,3
    8f7c:	dd000415 	stw	r20,16(sp)
    8f80:	dcc00315 	stw	r19,12(sp)
    8f84:	dc000015 	stw	r16,0(sp)
    8f88:	dfc00515 	stw	ra,20(sp)
    8f8c:	dc800215 	stw	r18,8(sp)
    8f90:	dc400115 	stw	r17,4(sp)
    8f94:	3021883a 	mov	r16,r6
    8f98:	2027883a 	mov	r19,r4
    8f9c:	2829883a 	mov	r20,r5
    8fa0:	10002b1e 	bne	r2,zero,9050 <__pow5mult+0xdc>
    8fa4:	8025d0ba 	srai	r18,r16,2
    8fa8:	90001b26 	beq	r18,zero,9018 <__pow5mult+0xa4>
    8fac:	9c001217 	ldw	r16,72(r19)
    8fb0:	8000081e 	bne	r16,zero,8fd4 <__pow5mult+0x60>
    8fb4:	00003006 	br	9078 <__pow5mult+0x104>
    8fb8:	800b883a 	mov	r5,r16
    8fbc:	800d883a 	mov	r6,r16
    8fc0:	9809883a 	mov	r4,r19
    8fc4:	90001426 	beq	r18,zero,9018 <__pow5mult+0xa4>
    8fc8:	80800017 	ldw	r2,0(r16)
    8fcc:	10001b26 	beq	r2,zero,903c <__pow5mult+0xc8>
    8fd0:	1021883a 	mov	r16,r2
    8fd4:	9080004c 	andi	r2,r18,1
    8fd8:	1005003a 	cmpeq	r2,r2,zero
    8fdc:	9025d07a 	srai	r18,r18,1
    8fe0:	800d883a 	mov	r6,r16
    8fe4:	9809883a 	mov	r4,r19
    8fe8:	a00b883a 	mov	r5,r20
    8fec:	103ff21e 	bne	r2,zero,8fb8 <__pow5mult+0x44>
    8ff0:	0008c500 	call	8c50 <__multiply>
    8ff4:	a00b883a 	mov	r5,r20
    8ff8:	9809883a 	mov	r4,r19
    8ffc:	1023883a 	mov	r17,r2
    9000:	00081c00 	call	81c0 <_Bfree>
    9004:	8829883a 	mov	r20,r17
    9008:	800b883a 	mov	r5,r16
    900c:	800d883a 	mov	r6,r16
    9010:	9809883a 	mov	r4,r19
    9014:	903fec1e 	bne	r18,zero,8fc8 <__pow5mult+0x54>
    9018:	a005883a 	mov	r2,r20
    901c:	dfc00517 	ldw	ra,20(sp)
    9020:	dd000417 	ldw	r20,16(sp)
    9024:	dcc00317 	ldw	r19,12(sp)
    9028:	dc800217 	ldw	r18,8(sp)
    902c:	dc400117 	ldw	r17,4(sp)
    9030:	dc000017 	ldw	r16,0(sp)
    9034:	dec00604 	addi	sp,sp,24
    9038:	f800283a 	ret
    903c:	0008c500 	call	8c50 <__multiply>
    9040:	80800015 	stw	r2,0(r16)
    9044:	1021883a 	mov	r16,r2
    9048:	10000015 	stw	zero,0(r2)
    904c:	003fe106 	br	8fd4 <__pow5mult+0x60>
    9050:	1085883a 	add	r2,r2,r2
    9054:	00c00074 	movhi	r3,1
    9058:	18ca2b04 	addi	r3,r3,10412
    905c:	1085883a 	add	r2,r2,r2
    9060:	10c5883a 	add	r2,r2,r3
    9064:	11bfff17 	ldw	r6,-4(r2)
    9068:	000f883a 	mov	r7,zero
    906c:	0008e740 	call	8e74 <__multadd>
    9070:	1029883a 	mov	r20,r2
    9074:	003fcb06 	br	8fa4 <__pow5mult+0x30>
    9078:	9809883a 	mov	r4,r19
    907c:	01409c44 	movi	r5,625
    9080:	0008e380 	call	8e38 <__i2b>
    9084:	98801215 	stw	r2,72(r19)
    9088:	1021883a 	mov	r16,r2
    908c:	10000015 	stw	zero,0(r2)
    9090:	003fd006 	br	8fd4 <__pow5mult+0x60>

00009094 <__s2b>:
    9094:	defff904 	addi	sp,sp,-28
    9098:	dcc00315 	stw	r19,12(sp)
    909c:	dc800215 	stw	r18,8(sp)
    90a0:	2827883a 	mov	r19,r5
    90a4:	2025883a 	mov	r18,r4
    90a8:	01400244 	movi	r5,9
    90ac:	39000204 	addi	r4,r7,8
    90b0:	dd000415 	stw	r20,16(sp)
    90b4:	dc400115 	stw	r17,4(sp)
    90b8:	dfc00615 	stw	ra,24(sp)
    90bc:	dd400515 	stw	r21,20(sp)
    90c0:	dc000015 	stw	r16,0(sp)
    90c4:	3829883a 	mov	r20,r7
    90c8:	3023883a 	mov	r17,r6
    90cc:	000f2bc0 	call	f2bc <__divsi3>
    90d0:	00c00044 	movi	r3,1
    90d4:	1880350e 	bge	r3,r2,91ac <__s2b+0x118>
    90d8:	000b883a 	mov	r5,zero
    90dc:	18c7883a 	add	r3,r3,r3
    90e0:	29400044 	addi	r5,r5,1
    90e4:	18bffd16 	blt	r3,r2,90dc <__s2b+0x48>
    90e8:	9009883a 	mov	r4,r18
    90ec:	00087400 	call	8740 <_Balloc>
    90f0:	1011883a 	mov	r8,r2
    90f4:	d8800717 	ldw	r2,28(sp)
    90f8:	00c00044 	movi	r3,1
    90fc:	01800244 	movi	r6,9
    9100:	40800515 	stw	r2,20(r8)
    9104:	40c00415 	stw	r3,16(r8)
    9108:	3440260e 	bge	r6,r17,91a4 <__s2b+0x110>
    910c:	3021883a 	mov	r16,r6
    9110:	99ab883a 	add	r21,r19,r6
    9114:	9c05883a 	add	r2,r19,r16
    9118:	11c00007 	ldb	r7,0(r2)
    911c:	400b883a 	mov	r5,r8
    9120:	9009883a 	mov	r4,r18
    9124:	39fff404 	addi	r7,r7,-48
    9128:	01800284 	movi	r6,10
    912c:	0008e740 	call	8e74 <__multadd>
    9130:	84000044 	addi	r16,r16,1
    9134:	1011883a 	mov	r8,r2
    9138:	8c3ff61e 	bne	r17,r16,9114 <__s2b+0x80>
    913c:	ac45883a 	add	r2,r21,r17
    9140:	117ffe04 	addi	r5,r2,-8
    9144:	880d883a 	mov	r6,r17
    9148:	35000c0e 	bge	r6,r20,917c <__s2b+0xe8>
    914c:	a185c83a 	sub	r2,r20,r6
    9150:	2821883a 	mov	r16,r5
    9154:	28a3883a 	add	r17,r5,r2
    9158:	81c00007 	ldb	r7,0(r16)
    915c:	400b883a 	mov	r5,r8
    9160:	9009883a 	mov	r4,r18
    9164:	39fff404 	addi	r7,r7,-48
    9168:	01800284 	movi	r6,10
    916c:	0008e740 	call	8e74 <__multadd>
    9170:	84000044 	addi	r16,r16,1
    9174:	1011883a 	mov	r8,r2
    9178:	847ff71e 	bne	r16,r17,9158 <__s2b+0xc4>
    917c:	4005883a 	mov	r2,r8
    9180:	dfc00617 	ldw	ra,24(sp)
    9184:	dd400517 	ldw	r21,20(sp)
    9188:	dd000417 	ldw	r20,16(sp)
    918c:	dcc00317 	ldw	r19,12(sp)
    9190:	dc800217 	ldw	r18,8(sp)
    9194:	dc400117 	ldw	r17,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00704 	addi	sp,sp,28
    91a0:	f800283a 	ret
    91a4:	99400284 	addi	r5,r19,10
    91a8:	003fe706 	br	9148 <__s2b+0xb4>
    91ac:	000b883a 	mov	r5,zero
    91b0:	003fcd06 	br	90e8 <__s2b+0x54>

000091b4 <_realloc_r>:
    91b4:	defff404 	addi	sp,sp,-48
    91b8:	dd800815 	stw	r22,32(sp)
    91bc:	dc800415 	stw	r18,16(sp)
    91c0:	dc400315 	stw	r17,12(sp)
    91c4:	dfc00b15 	stw	ra,44(sp)
    91c8:	df000a15 	stw	fp,40(sp)
    91cc:	ddc00915 	stw	r23,36(sp)
    91d0:	dd400715 	stw	r21,28(sp)
    91d4:	dd000615 	stw	r20,24(sp)
    91d8:	dcc00515 	stw	r19,20(sp)
    91dc:	dc000215 	stw	r16,8(sp)
    91e0:	2825883a 	mov	r18,r5
    91e4:	3023883a 	mov	r17,r6
    91e8:	202d883a 	mov	r22,r4
    91ec:	2800c926 	beq	r5,zero,9514 <_realloc_r+0x360>
    91f0:	000f94c0 	call	f94c <__malloc_lock>
    91f4:	943ffe04 	addi	r16,r18,-8
    91f8:	88c002c4 	addi	r3,r17,11
    91fc:	00800584 	movi	r2,22
    9200:	82000117 	ldw	r8,4(r16)
    9204:	10c01b2e 	bgeu	r2,r3,9274 <_realloc_r+0xc0>
    9208:	00bffe04 	movi	r2,-8
    920c:	188e703a 	and	r7,r3,r2
    9210:	3839883a 	mov	fp,r7
    9214:	38001a16 	blt	r7,zero,9280 <_realloc_r+0xcc>
    9218:	e4401936 	bltu	fp,r17,9280 <_realloc_r+0xcc>
    921c:	013fff04 	movi	r4,-4
    9220:	4126703a 	and	r19,r8,r4
    9224:	99c02616 	blt	r19,r7,92c0 <_realloc_r+0x10c>
    9228:	802b883a 	mov	r21,r16
    922c:	9829883a 	mov	r20,r19
    9230:	84000204 	addi	r16,r16,8
    9234:	a80f883a 	mov	r7,r21
    9238:	a70dc83a 	sub	r6,r20,fp
    923c:	008003c4 	movi	r2,15
    9240:	1180c136 	bltu	r2,r6,9548 <_realloc_r+0x394>
    9244:	38800117 	ldw	r2,4(r7)
    9248:	a549883a 	add	r4,r20,r21
    924c:	1080004c 	andi	r2,r2,1
    9250:	a084b03a 	or	r2,r20,r2
    9254:	38800115 	stw	r2,4(r7)
    9258:	20c00117 	ldw	r3,4(r4)
    925c:	18c00054 	ori	r3,r3,1
    9260:	20c00115 	stw	r3,4(r4)
    9264:	b009883a 	mov	r4,r22
    9268:	000f9500 	call	f950 <__malloc_unlock>
    926c:	8023883a 	mov	r17,r16
    9270:	00000606 	br	928c <_realloc_r+0xd8>
    9274:	01c00404 	movi	r7,16
    9278:	3839883a 	mov	fp,r7
    927c:	e47fe72e 	bgeu	fp,r17,921c <_realloc_r+0x68>
    9280:	00800304 	movi	r2,12
    9284:	0023883a 	mov	r17,zero
    9288:	b0800015 	stw	r2,0(r22)
    928c:	8805883a 	mov	r2,r17
    9290:	dfc00b17 	ldw	ra,44(sp)
    9294:	df000a17 	ldw	fp,40(sp)
    9298:	ddc00917 	ldw	r23,36(sp)
    929c:	dd800817 	ldw	r22,32(sp)
    92a0:	dd400717 	ldw	r21,28(sp)
    92a4:	dd000617 	ldw	r20,24(sp)
    92a8:	dcc00517 	ldw	r19,20(sp)
    92ac:	dc800417 	ldw	r18,16(sp)
    92b0:	dc400317 	ldw	r17,12(sp)
    92b4:	dc000217 	ldw	r16,8(sp)
    92b8:	dec00c04 	addi	sp,sp,48
    92bc:	f800283a 	ret
    92c0:	00800074 	movhi	r2,1
    92c4:	108b7b04 	addi	r2,r2,11756
    92c8:	12400217 	ldw	r9,8(r2)
    92cc:	84cd883a 	add	r6,r16,r19
    92d0:	802b883a 	mov	r21,r16
    92d4:	3240b926 	beq	r6,r9,95bc <_realloc_r+0x408>
    92d8:	31400117 	ldw	r5,4(r6)
    92dc:	00bfff84 	movi	r2,-2
    92e0:	2884703a 	and	r2,r5,r2
    92e4:	1185883a 	add	r2,r2,r6
    92e8:	10c00117 	ldw	r3,4(r2)
    92ec:	18c0004c 	andi	r3,r3,1
    92f0:	1807003a 	cmpeq	r3,r3,zero
    92f4:	1800a326 	beq	r3,zero,9584 <_realloc_r+0x3d0>
    92f8:	2908703a 	and	r4,r5,r4
    92fc:	9929883a 	add	r20,r19,r4
    9300:	a1c0a30e 	bge	r20,r7,9590 <_realloc_r+0x3dc>
    9304:	4080004c 	andi	r2,r8,1
    9308:	1000551e 	bne	r2,zero,9460 <_realloc_r+0x2ac>
    930c:	80800017 	ldw	r2,0(r16)
    9310:	80afc83a 	sub	r23,r16,r2
    9314:	b8c00117 	ldw	r3,4(r23)
    9318:	00bfff04 	movi	r2,-4
    931c:	1884703a 	and	r2,r3,r2
    9320:	30002e26 	beq	r6,zero,93dc <_realloc_r+0x228>
    9324:	3240b926 	beq	r6,r9,960c <_realloc_r+0x458>
    9328:	98a9883a 	add	r20,r19,r2
    932c:	2509883a 	add	r4,r4,r20
    9330:	d9000015 	stw	r4,0(sp)
    9334:	21c02a16 	blt	r4,r7,93e0 <_realloc_r+0x22c>
    9338:	30800317 	ldw	r2,12(r6)
    933c:	30c00217 	ldw	r3,8(r6)
    9340:	01400904 	movi	r5,36
    9344:	99bfff04 	addi	r6,r19,-4
    9348:	18800315 	stw	r2,12(r3)
    934c:	10c00215 	stw	r3,8(r2)
    9350:	b9000317 	ldw	r4,12(r23)
    9354:	b8800217 	ldw	r2,8(r23)
    9358:	b82b883a 	mov	r21,r23
    935c:	bc000204 	addi	r16,r23,8
    9360:	20800215 	stw	r2,8(r4)
    9364:	11000315 	stw	r4,12(r2)
    9368:	2980e436 	bltu	r5,r6,96fc <_realloc_r+0x548>
    936c:	008004c4 	movi	r2,19
    9370:	9009883a 	mov	r4,r18
    9374:	8011883a 	mov	r8,r16
    9378:	11800f2e 	bgeu	r2,r6,93b8 <_realloc_r+0x204>
    937c:	90800017 	ldw	r2,0(r18)
    9380:	ba000404 	addi	r8,r23,16
    9384:	91000204 	addi	r4,r18,8
    9388:	b8800215 	stw	r2,8(r23)
    938c:	90c00117 	ldw	r3,4(r18)
    9390:	008006c4 	movi	r2,27
    9394:	b8c00315 	stw	r3,12(r23)
    9398:	1180072e 	bgeu	r2,r6,93b8 <_realloc_r+0x204>
    939c:	90c00217 	ldw	r3,8(r18)
    93a0:	ba000604 	addi	r8,r23,24
    93a4:	91000404 	addi	r4,r18,16
    93a8:	b8c00415 	stw	r3,16(r23)
    93ac:	90800317 	ldw	r2,12(r18)
    93b0:	b8800515 	stw	r2,20(r23)
    93b4:	3140e726 	beq	r6,r5,9754 <_realloc_r+0x5a0>
    93b8:	20800017 	ldw	r2,0(r4)
    93bc:	dd000017 	ldw	r20,0(sp)
    93c0:	b80f883a 	mov	r7,r23
    93c4:	40800015 	stw	r2,0(r8)
    93c8:	20c00117 	ldw	r3,4(r4)
    93cc:	40c00115 	stw	r3,4(r8)
    93d0:	20800217 	ldw	r2,8(r4)
    93d4:	40800215 	stw	r2,8(r8)
    93d8:	003f9706 	br	9238 <_realloc_r+0x84>
    93dc:	98a9883a 	add	r20,r19,r2
    93e0:	a1c01f16 	blt	r20,r7,9460 <_realloc_r+0x2ac>
    93e4:	b8c00317 	ldw	r3,12(r23)
    93e8:	b8800217 	ldw	r2,8(r23)
    93ec:	99bfff04 	addi	r6,r19,-4
    93f0:	01400904 	movi	r5,36
    93f4:	b82b883a 	mov	r21,r23
    93f8:	18800215 	stw	r2,8(r3)
    93fc:	10c00315 	stw	r3,12(r2)
    9400:	bc000204 	addi	r16,r23,8
    9404:	2980c336 	bltu	r5,r6,9714 <_realloc_r+0x560>
    9408:	008004c4 	movi	r2,19
    940c:	9009883a 	mov	r4,r18
    9410:	8011883a 	mov	r8,r16
    9414:	11800f2e 	bgeu	r2,r6,9454 <_realloc_r+0x2a0>
    9418:	90800017 	ldw	r2,0(r18)
    941c:	ba000404 	addi	r8,r23,16
    9420:	91000204 	addi	r4,r18,8
    9424:	b8800215 	stw	r2,8(r23)
    9428:	90c00117 	ldw	r3,4(r18)
    942c:	008006c4 	movi	r2,27
    9430:	b8c00315 	stw	r3,12(r23)
    9434:	1180072e 	bgeu	r2,r6,9454 <_realloc_r+0x2a0>
    9438:	90c00217 	ldw	r3,8(r18)
    943c:	ba000604 	addi	r8,r23,24
    9440:	91000404 	addi	r4,r18,16
    9444:	b8c00415 	stw	r3,16(r23)
    9448:	90800317 	ldw	r2,12(r18)
    944c:	b8800515 	stw	r2,20(r23)
    9450:	3140c726 	beq	r6,r5,9770 <_realloc_r+0x5bc>
    9454:	20800017 	ldw	r2,0(r4)
    9458:	b80f883a 	mov	r7,r23
    945c:	003fd906 	br	93c4 <_realloc_r+0x210>
    9460:	880b883a 	mov	r5,r17
    9464:	b009883a 	mov	r4,r22
    9468:	00076840 	call	7684 <_malloc_r>
    946c:	1023883a 	mov	r17,r2
    9470:	10002526 	beq	r2,zero,9508 <_realloc_r+0x354>
    9474:	80800117 	ldw	r2,4(r16)
    9478:	00ffff84 	movi	r3,-2
    947c:	893ffe04 	addi	r4,r17,-8
    9480:	10c4703a 	and	r2,r2,r3
    9484:	8085883a 	add	r2,r16,r2
    9488:	20809526 	beq	r4,r2,96e0 <_realloc_r+0x52c>
    948c:	99bfff04 	addi	r6,r19,-4
    9490:	01c00904 	movi	r7,36
    9494:	39804536 	bltu	r7,r6,95ac <_realloc_r+0x3f8>
    9498:	008004c4 	movi	r2,19
    949c:	9009883a 	mov	r4,r18
    94a0:	880b883a 	mov	r5,r17
    94a4:	11800f2e 	bgeu	r2,r6,94e4 <_realloc_r+0x330>
    94a8:	90800017 	ldw	r2,0(r18)
    94ac:	89400204 	addi	r5,r17,8
    94b0:	91000204 	addi	r4,r18,8
    94b4:	88800015 	stw	r2,0(r17)
    94b8:	90c00117 	ldw	r3,4(r18)
    94bc:	008006c4 	movi	r2,27
    94c0:	88c00115 	stw	r3,4(r17)
    94c4:	1180072e 	bgeu	r2,r6,94e4 <_realloc_r+0x330>
    94c8:	90c00217 	ldw	r3,8(r18)
    94cc:	89400404 	addi	r5,r17,16
    94d0:	91000404 	addi	r4,r18,16
    94d4:	88c00215 	stw	r3,8(r17)
    94d8:	90800317 	ldw	r2,12(r18)
    94dc:	88800315 	stw	r2,12(r17)
    94e0:	31c09126 	beq	r6,r7,9728 <_realloc_r+0x574>
    94e4:	20800017 	ldw	r2,0(r4)
    94e8:	28800015 	stw	r2,0(r5)
    94ec:	20c00117 	ldw	r3,4(r4)
    94f0:	28c00115 	stw	r3,4(r5)
    94f4:	20800217 	ldw	r2,8(r4)
    94f8:	28800215 	stw	r2,8(r5)
    94fc:	900b883a 	mov	r5,r18
    9500:	b009883a 	mov	r4,r22
    9504:	0006ad00 	call	6ad0 <_free_r>
    9508:	b009883a 	mov	r4,r22
    950c:	000f9500 	call	f950 <__malloc_unlock>
    9510:	003f5e06 	br	928c <_realloc_r+0xd8>
    9514:	300b883a 	mov	r5,r6
    9518:	dfc00b17 	ldw	ra,44(sp)
    951c:	df000a17 	ldw	fp,40(sp)
    9520:	ddc00917 	ldw	r23,36(sp)
    9524:	dd800817 	ldw	r22,32(sp)
    9528:	dd400717 	ldw	r21,28(sp)
    952c:	dd000617 	ldw	r20,24(sp)
    9530:	dcc00517 	ldw	r19,20(sp)
    9534:	dc800417 	ldw	r18,16(sp)
    9538:	dc400317 	ldw	r17,12(sp)
    953c:	dc000217 	ldw	r16,8(sp)
    9540:	dec00c04 	addi	sp,sp,48
    9544:	00076841 	jmpi	7684 <_malloc_r>
    9548:	38800117 	ldw	r2,4(r7)
    954c:	e54b883a 	add	r5,fp,r21
    9550:	31000054 	ori	r4,r6,1
    9554:	1080004c 	andi	r2,r2,1
    9558:	1704b03a 	or	r2,r2,fp
    955c:	38800115 	stw	r2,4(r7)
    9560:	29000115 	stw	r4,4(r5)
    9564:	2987883a 	add	r3,r5,r6
    9568:	18800117 	ldw	r2,4(r3)
    956c:	29400204 	addi	r5,r5,8
    9570:	b009883a 	mov	r4,r22
    9574:	10800054 	ori	r2,r2,1
    9578:	18800115 	stw	r2,4(r3)
    957c:	0006ad00 	call	6ad0 <_free_r>
    9580:	003f3806 	br	9264 <_realloc_r+0xb0>
    9584:	000d883a 	mov	r6,zero
    9588:	0009883a 	mov	r4,zero
    958c:	003f5d06 	br	9304 <_realloc_r+0x150>
    9590:	30c00217 	ldw	r3,8(r6)
    9594:	30800317 	ldw	r2,12(r6)
    9598:	800f883a 	mov	r7,r16
    959c:	84000204 	addi	r16,r16,8
    95a0:	10c00215 	stw	r3,8(r2)
    95a4:	18800315 	stw	r2,12(r3)
    95a8:	003f2306 	br	9238 <_realloc_r+0x84>
    95ac:	8809883a 	mov	r4,r17
    95b0:	900b883a 	mov	r5,r18
    95b4:	00080480 	call	8048 <memmove>
    95b8:	003fd006 	br	94fc <_realloc_r+0x348>
    95bc:	30800117 	ldw	r2,4(r6)
    95c0:	e0c00404 	addi	r3,fp,16
    95c4:	1108703a 	and	r4,r2,r4
    95c8:	9905883a 	add	r2,r19,r4
    95cc:	10ff4d16 	blt	r2,r3,9304 <_realloc_r+0x150>
    95d0:	1705c83a 	sub	r2,r2,fp
    95d4:	870b883a 	add	r5,r16,fp
    95d8:	10800054 	ori	r2,r2,1
    95dc:	28800115 	stw	r2,4(r5)
    95e0:	80c00117 	ldw	r3,4(r16)
    95e4:	00800074 	movhi	r2,1
    95e8:	108b7b04 	addi	r2,r2,11756
    95ec:	b009883a 	mov	r4,r22
    95f0:	18c0004c 	andi	r3,r3,1
    95f4:	e0c6b03a 	or	r3,fp,r3
    95f8:	11400215 	stw	r5,8(r2)
    95fc:	80c00115 	stw	r3,4(r16)
    9600:	000f9500 	call	f950 <__malloc_unlock>
    9604:	84400204 	addi	r17,r16,8
    9608:	003f2006 	br	928c <_realloc_r+0xd8>
    960c:	98a9883a 	add	r20,r19,r2
    9610:	2509883a 	add	r4,r4,r20
    9614:	e0800404 	addi	r2,fp,16
    9618:	d9000115 	stw	r4,4(sp)
    961c:	20bf7016 	blt	r4,r2,93e0 <_realloc_r+0x22c>
    9620:	b8c00317 	ldw	r3,12(r23)
    9624:	b8800217 	ldw	r2,8(r23)
    9628:	99bfff04 	addi	r6,r19,-4
    962c:	01400904 	movi	r5,36
    9630:	18800215 	stw	r2,8(r3)
    9634:	10c00315 	stw	r3,12(r2)
    9638:	bc400204 	addi	r17,r23,8
    963c:	29804136 	bltu	r5,r6,9744 <_realloc_r+0x590>
    9640:	008004c4 	movi	r2,19
    9644:	9009883a 	mov	r4,r18
    9648:	880f883a 	mov	r7,r17
    964c:	11800f2e 	bgeu	r2,r6,968c <_realloc_r+0x4d8>
    9650:	90800017 	ldw	r2,0(r18)
    9654:	b9c00404 	addi	r7,r23,16
    9658:	91000204 	addi	r4,r18,8
    965c:	b8800215 	stw	r2,8(r23)
    9660:	90c00117 	ldw	r3,4(r18)
    9664:	008006c4 	movi	r2,27
    9668:	b8c00315 	stw	r3,12(r23)
    966c:	1180072e 	bgeu	r2,r6,968c <_realloc_r+0x4d8>
    9670:	90c00217 	ldw	r3,8(r18)
    9674:	b9c00604 	addi	r7,r23,24
    9678:	91000404 	addi	r4,r18,16
    967c:	b8c00415 	stw	r3,16(r23)
    9680:	90800317 	ldw	r2,12(r18)
    9684:	b8800515 	stw	r2,20(r23)
    9688:	31404026 	beq	r6,r5,978c <_realloc_r+0x5d8>
    968c:	20800017 	ldw	r2,0(r4)
    9690:	38800015 	stw	r2,0(r7)
    9694:	20c00117 	ldw	r3,4(r4)
    9698:	38c00115 	stw	r3,4(r7)
    969c:	20800217 	ldw	r2,8(r4)
    96a0:	38800215 	stw	r2,8(r7)
    96a4:	d8c00117 	ldw	r3,4(sp)
    96a8:	bf0b883a 	add	r5,r23,fp
    96ac:	b009883a 	mov	r4,r22
    96b0:	1f05c83a 	sub	r2,r3,fp
    96b4:	10800054 	ori	r2,r2,1
    96b8:	28800115 	stw	r2,4(r5)
    96bc:	b8c00117 	ldw	r3,4(r23)
    96c0:	00800074 	movhi	r2,1
    96c4:	108b7b04 	addi	r2,r2,11756
    96c8:	11400215 	stw	r5,8(r2)
    96cc:	18c0004c 	andi	r3,r3,1
    96d0:	e0c6b03a 	or	r3,fp,r3
    96d4:	b8c00115 	stw	r3,4(r23)
    96d8:	000f9500 	call	f950 <__malloc_unlock>
    96dc:	003eeb06 	br	928c <_realloc_r+0xd8>
    96e0:	20800117 	ldw	r2,4(r4)
    96e4:	00ffff04 	movi	r3,-4
    96e8:	800f883a 	mov	r7,r16
    96ec:	10c4703a 	and	r2,r2,r3
    96f0:	98a9883a 	add	r20,r19,r2
    96f4:	84000204 	addi	r16,r16,8
    96f8:	003ecf06 	br	9238 <_realloc_r+0x84>
    96fc:	900b883a 	mov	r5,r18
    9700:	8009883a 	mov	r4,r16
    9704:	00080480 	call	8048 <memmove>
    9708:	dd000017 	ldw	r20,0(sp)
    970c:	b80f883a 	mov	r7,r23
    9710:	003ec906 	br	9238 <_realloc_r+0x84>
    9714:	900b883a 	mov	r5,r18
    9718:	8009883a 	mov	r4,r16
    971c:	00080480 	call	8048 <memmove>
    9720:	b80f883a 	mov	r7,r23
    9724:	003ec406 	br	9238 <_realloc_r+0x84>
    9728:	90c00417 	ldw	r3,16(r18)
    972c:	89400604 	addi	r5,r17,24
    9730:	91000604 	addi	r4,r18,24
    9734:	88c00415 	stw	r3,16(r17)
    9738:	90800517 	ldw	r2,20(r18)
    973c:	88800515 	stw	r2,20(r17)
    9740:	003f6806 	br	94e4 <_realloc_r+0x330>
    9744:	900b883a 	mov	r5,r18
    9748:	8809883a 	mov	r4,r17
    974c:	00080480 	call	8048 <memmove>
    9750:	003fd406 	br	96a4 <_realloc_r+0x4f0>
    9754:	90c00417 	ldw	r3,16(r18)
    9758:	91000604 	addi	r4,r18,24
    975c:	ba000804 	addi	r8,r23,32
    9760:	b8c00615 	stw	r3,24(r23)
    9764:	90800517 	ldw	r2,20(r18)
    9768:	b8800715 	stw	r2,28(r23)
    976c:	003f1206 	br	93b8 <_realloc_r+0x204>
    9770:	90c00417 	ldw	r3,16(r18)
    9774:	91000604 	addi	r4,r18,24
    9778:	ba000804 	addi	r8,r23,32
    977c:	b8c00615 	stw	r3,24(r23)
    9780:	90800517 	ldw	r2,20(r18)
    9784:	b8800715 	stw	r2,28(r23)
    9788:	003f3206 	br	9454 <_realloc_r+0x2a0>
    978c:	90c00417 	ldw	r3,16(r18)
    9790:	91000604 	addi	r4,r18,24
    9794:	b9c00804 	addi	r7,r23,32
    9798:	b8c00615 	stw	r3,24(r23)
    979c:	90800517 	ldw	r2,20(r18)
    97a0:	b8800715 	stw	r2,28(r23)
    97a4:	003fb906 	br	968c <_realloc_r+0x4d8>

000097a8 <__srefill_r>:
    97a8:	defffd04 	addi	sp,sp,-12
    97ac:	dc400115 	stw	r17,4(sp)
    97b0:	dc000015 	stw	r16,0(sp)
    97b4:	dfc00215 	stw	ra,8(sp)
    97b8:	2023883a 	mov	r17,r4
    97bc:	2821883a 	mov	r16,r5
    97c0:	20000226 	beq	r4,zero,97cc <__srefill_r+0x24>
    97c4:	20800e17 	ldw	r2,56(r4)
    97c8:	10004126 	beq	r2,zero,98d0 <__srefill_r+0x128>
    97cc:	80c0030b 	ldhu	r3,12(r16)
    97d0:	80000115 	stw	zero,4(r16)
    97d4:	1880080c 	andi	r2,r3,32
    97d8:	1000361e 	bne	r2,zero,98b4 <__srefill_r+0x10c>
    97dc:	1880010c 	andi	r2,r3,4
    97e0:	1000211e 	bne	r2,zero,9868 <__srefill_r+0xc0>
    97e4:	1880040c 	andi	r2,r3,16
    97e8:	10005026 	beq	r2,zero,992c <__srefill_r+0x184>
    97ec:	1880020c 	andi	r2,r3,8
    97f0:	1000541e 	bne	r2,zero,9944 <__srefill_r+0x19c>
    97f4:	8080030b 	ldhu	r2,12(r16)
    97f8:	10800114 	ori	r2,r2,4
    97fc:	8080030d 	sth	r2,12(r16)
    9800:	80800417 	ldw	r2,16(r16)
    9804:	10004526 	beq	r2,zero,991c <__srefill_r+0x174>
    9808:	8080030b 	ldhu	r2,12(r16)
    980c:	108000cc 	andi	r2,r2,3
    9810:	1000361e 	bne	r2,zero,98ec <__srefill_r+0x144>
    9814:	81800417 	ldw	r6,16(r16)
    9818:	80c00817 	ldw	r3,32(r16)
    981c:	81400717 	ldw	r5,28(r16)
    9820:	81c00517 	ldw	r7,20(r16)
    9824:	8809883a 	mov	r4,r17
    9828:	81800015 	stw	r6,0(r16)
    982c:	183ee83a 	callr	r3
    9830:	80c0030b 	ldhu	r3,12(r16)
    9834:	1009883a 	mov	r4,r2
    9838:	80800115 	stw	r2,4(r16)
    983c:	00b7ffc4 	movi	r2,-8193
    9840:	1884703a 	and	r2,r3,r2
    9844:	8080030d 	sth	r2,12(r16)
    9848:	0100230e 	bge	zero,r4,98d8 <__srefill_r+0x130>
    984c:	0009883a 	mov	r4,zero
    9850:	2005883a 	mov	r2,r4
    9854:	dfc00217 	ldw	ra,8(sp)
    9858:	dc400117 	ldw	r17,4(sp)
    985c:	dc000017 	ldw	r16,0(sp)
    9860:	dec00304 	addi	sp,sp,12
    9864:	f800283a 	ret
    9868:	81400c17 	ldw	r5,48(r16)
    986c:	283fe426 	beq	r5,zero,9800 <__srefill_r+0x58>
    9870:	80801004 	addi	r2,r16,64
    9874:	28800226 	beq	r5,r2,9880 <__srefill_r+0xd8>
    9878:	8809883a 	mov	r4,r17
    987c:	0006ad00 	call	6ad0 <_free_r>
    9880:	80800f17 	ldw	r2,60(r16)
    9884:	80000c15 	stw	zero,48(r16)
    9888:	80800115 	stw	r2,4(r16)
    988c:	103fdc26 	beq	r2,zero,9800 <__srefill_r+0x58>
    9890:	80800e17 	ldw	r2,56(r16)
    9894:	0009883a 	mov	r4,zero
    9898:	80800015 	stw	r2,0(r16)
    989c:	2005883a 	mov	r2,r4
    98a0:	dfc00217 	ldw	ra,8(sp)
    98a4:	dc400117 	ldw	r17,4(sp)
    98a8:	dc000017 	ldw	r16,0(sp)
    98ac:	dec00304 	addi	sp,sp,12
    98b0:	f800283a 	ret
    98b4:	013fffc4 	movi	r4,-1
    98b8:	2005883a 	mov	r2,r4
    98bc:	dfc00217 	ldw	ra,8(sp)
    98c0:	dc400117 	ldw	r17,4(sp)
    98c4:	dc000017 	ldw	r16,0(sp)
    98c8:	dec00304 	addi	sp,sp,12
    98cc:	f800283a 	ret
    98d0:	00065100 	call	6510 <__sinit>
    98d4:	003fbd06 	br	97cc <__srefill_r+0x24>
    98d8:	20000b1e 	bne	r4,zero,9908 <__srefill_r+0x160>
    98dc:	10800814 	ori	r2,r2,32
    98e0:	013fffc4 	movi	r4,-1
    98e4:	8080030d 	sth	r2,12(r16)
    98e8:	003fd906 	br	9850 <__srefill_r+0xa8>
    98ec:	00800074 	movhi	r2,1
    98f0:	10917504 	addi	r2,r2,17876
    98f4:	11000017 	ldw	r4,0(r2)
    98f8:	01400074 	movhi	r5,1
    98fc:	29665b04 	addi	r5,r5,-26260
    9900:	00073480 	call	7348 <_fwalk>
    9904:	003fc306 	br	9814 <__srefill_r+0x6c>
    9908:	10801014 	ori	r2,r2,64
    990c:	013fffc4 	movi	r4,-1
    9910:	8080030d 	sth	r2,12(r16)
    9914:	80000115 	stw	zero,4(r16)
    9918:	003fcd06 	br	9850 <__srefill_r+0xa8>
    991c:	8809883a 	mov	r4,r17
    9920:	800b883a 	mov	r5,r16
    9924:	00074f00 	call	74f0 <__smakebuf_r>
    9928:	003fb706 	br	9808 <__srefill_r+0x60>
    992c:	18c01014 	ori	r3,r3,64
    9930:	00800244 	movi	r2,9
    9934:	013fffc4 	movi	r4,-1
    9938:	88800015 	stw	r2,0(r17)
    993c:	80c0030d 	sth	r3,12(r16)
    9940:	003fc306 	br	9850 <__srefill_r+0xa8>
    9944:	8809883a 	mov	r4,r17
    9948:	800b883a 	mov	r5,r16
    994c:	00062780 	call	6278 <_fflush_r>
    9950:	103fd81e 	bne	r2,zero,98b4 <__srefill_r+0x10c>
    9954:	8080030b 	ldhu	r2,12(r16)
    9958:	80000215 	stw	zero,8(r16)
    995c:	80000615 	stw	zero,24(r16)
    9960:	10bffdcc 	andi	r2,r2,65527
    9964:	8080030d 	sth	r2,12(r16)
    9968:	003fa206 	br	97f4 <__srefill_r+0x4c>

0000996c <lflush>:
    996c:	20c0030b 	ldhu	r3,12(r4)
    9970:	01400244 	movi	r5,9
    9974:	0005883a 	mov	r2,zero
    9978:	18c0024c 	andi	r3,r3,9
    997c:	19400126 	beq	r3,r5,9984 <lflush+0x18>
    9980:	f800283a 	ret
    9984:	00064741 	jmpi	6474 <fflush>

00009988 <__isinfd>:
    9988:	200d883a 	mov	r6,r4
    998c:	0109c83a 	sub	r4,zero,r4
    9990:	2188b03a 	or	r4,r4,r6
    9994:	2008d7fa 	srli	r4,r4,31
    9998:	00a00034 	movhi	r2,32768
    999c:	10bfffc4 	addi	r2,r2,-1
    99a0:	1144703a 	and	r2,r2,r5
    99a4:	2088b03a 	or	r4,r4,r2
    99a8:	009ffc34 	movhi	r2,32752
    99ac:	1105c83a 	sub	r2,r2,r4
    99b0:	0087c83a 	sub	r3,zero,r2
    99b4:	10c4b03a 	or	r2,r2,r3
    99b8:	1004d7fa 	srli	r2,r2,31
    99bc:	00c00044 	movi	r3,1
    99c0:	1885c83a 	sub	r2,r3,r2
    99c4:	f800283a 	ret

000099c8 <__isnand>:
    99c8:	200d883a 	mov	r6,r4
    99cc:	0109c83a 	sub	r4,zero,r4
    99d0:	2188b03a 	or	r4,r4,r6
    99d4:	2008d7fa 	srli	r4,r4,31
    99d8:	00a00034 	movhi	r2,32768
    99dc:	10bfffc4 	addi	r2,r2,-1
    99e0:	1144703a 	and	r2,r2,r5
    99e4:	2088b03a 	or	r4,r4,r2
    99e8:	009ffc34 	movhi	r2,32752
    99ec:	1105c83a 	sub	r2,r2,r4
    99f0:	1004d7fa 	srli	r2,r2,31
    99f4:	f800283a 	ret

000099f8 <_sbrk_r>:
    99f8:	defffd04 	addi	sp,sp,-12
    99fc:	dc000015 	stw	r16,0(sp)
    9a00:	04000074 	movhi	r16,1
    9a04:	84189604 	addi	r16,r16,25176
    9a08:	dc400115 	stw	r17,4(sp)
    9a0c:	80000015 	stw	zero,0(r16)
    9a10:	2023883a 	mov	r17,r4
    9a14:	2809883a 	mov	r4,r5
    9a18:	dfc00215 	stw	ra,8(sp)
    9a1c:	000fc740 	call	fc74 <sbrk>
    9a20:	1007883a 	mov	r3,r2
    9a24:	00bfffc4 	movi	r2,-1
    9a28:	18800626 	beq	r3,r2,9a44 <_sbrk_r+0x4c>
    9a2c:	1805883a 	mov	r2,r3
    9a30:	dfc00217 	ldw	ra,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00304 	addi	sp,sp,12
    9a40:	f800283a 	ret
    9a44:	80800017 	ldw	r2,0(r16)
    9a48:	103ff826 	beq	r2,zero,9a2c <_sbrk_r+0x34>
    9a4c:	88800015 	stw	r2,0(r17)
    9a50:	1805883a 	mov	r2,r3
    9a54:	dfc00217 	ldw	ra,8(sp)
    9a58:	dc400117 	ldw	r17,4(sp)
    9a5c:	dc000017 	ldw	r16,0(sp)
    9a60:	dec00304 	addi	sp,sp,12
    9a64:	f800283a 	ret

00009a68 <__sccl>:
    9a68:	28c00003 	ldbu	r3,0(r5)
    9a6c:	00801784 	movi	r2,94
    9a70:	2a000044 	addi	r8,r5,1
    9a74:	18802526 	beq	r3,r2,9b0c <__sccl+0xa4>
    9a78:	180f883a 	mov	r7,r3
    9a7c:	0013883a 	mov	r9,zero
    9a80:	000d883a 	mov	r6,zero
    9a84:	0007883a 	mov	r3,zero
    9a88:	01404004 	movi	r5,256
    9a8c:	1905883a 	add	r2,r3,r4
    9a90:	18c00044 	addi	r3,r3,1
    9a94:	11800005 	stb	r6,0(r2)
    9a98:	197ffc1e 	bne	r3,r5,9a8c <__sccl+0x24>
    9a9c:	38000c26 	beq	r7,zero,9ad0 <__sccl+0x68>
    9aa0:	00800044 	movi	r2,1
    9aa4:	124dc83a 	sub	r6,r2,r9
    9aa8:	3905883a 	add	r2,r7,r4
    9aac:	11800005 	stb	r6,0(r2)
    9ab0:	41400044 	addi	r5,r8,1
    9ab4:	02400b44 	movi	r9,45
    9ab8:	02801744 	movi	r10,93
    9abc:	28bfffc3 	ldbu	r2,-1(r5)
    9ac0:	2811883a 	mov	r8,r5
    9ac4:	12400726 	beq	r2,r9,9ae4 <__sccl+0x7c>
    9ac8:	12800226 	beq	r2,r10,9ad4 <__sccl+0x6c>
    9acc:	1000031e 	bne	r2,zero,9adc <__sccl+0x74>
    9ad0:	423fffc4 	addi	r8,r8,-1
    9ad4:	4005883a 	mov	r2,r8
    9ad8:	f800283a 	ret
    9adc:	100f883a 	mov	r7,r2
    9ae0:	003ff106 	br	9aa8 <__sccl+0x40>
    9ae4:	28c00003 	ldbu	r3,0(r5)
    9ae8:	1a800d26 	beq	r3,r10,9b20 <__sccl+0xb8>
    9aec:	19c00c16 	blt	r3,r7,9b20 <__sccl+0xb8>
    9af0:	21c5883a 	add	r2,r4,r7
    9af4:	39c00044 	addi	r7,r7,1
    9af8:	11800045 	stb	r6,1(r2)
    9afc:	10800044 	addi	r2,r2,1
    9b00:	38fffc16 	blt	r7,r3,9af4 <__sccl+0x8c>
    9b04:	29400084 	addi	r5,r5,2
    9b08:	003fec06 	br	9abc <__sccl+0x54>
    9b0c:	29c00043 	ldbu	r7,1(r5)
    9b10:	02400044 	movi	r9,1
    9b14:	2a000084 	addi	r8,r5,2
    9b18:	480d883a 	mov	r6,r9
    9b1c:	003fd906 	br	9a84 <__sccl+0x1c>
    9b20:	01c00b44 	movi	r7,45
    9b24:	003fe006 	br	9aa8 <__sccl+0x40>

00009b28 <nanf>:
    9b28:	009ff034 	movhi	r2,32704
    9b2c:	f800283a 	ret

00009b30 <sprintf>:
    9b30:	deffe504 	addi	sp,sp,-108
    9b34:	2013883a 	mov	r9,r4
    9b38:	dfc01815 	stw	ra,96(sp)
    9b3c:	d9801915 	stw	r6,100(sp)
    9b40:	d9c01a15 	stw	r7,104(sp)
    9b44:	d8801904 	addi	r2,sp,100
    9b48:	d8800015 	stw	r2,0(sp)
    9b4c:	00800074 	movhi	r2,1
    9b50:	10917404 	addi	r2,r2,17872
    9b54:	11000017 	ldw	r4,0(r2)
    9b58:	d9c00017 	ldw	r7,0(sp)
    9b5c:	00808204 	movi	r2,520
    9b60:	00e00034 	movhi	r3,32768
    9b64:	18ffffc4 	addi	r3,r3,-1
    9b68:	280d883a 	mov	r6,r5
    9b6c:	d880040d 	sth	r2,16(sp)
    9b70:	d9400104 	addi	r5,sp,4
    9b74:	00bfffc4 	movi	r2,-1
    9b78:	d8c00615 	stw	r3,24(sp)
    9b7c:	d8c00315 	stw	r3,12(sp)
    9b80:	da400515 	stw	r9,20(sp)
    9b84:	d880048d 	sth	r2,18(sp)
    9b88:	da400115 	stw	r9,4(sp)
    9b8c:	00013200 	call	1320 <___vfprintf_internal_r>
    9b90:	d8c00117 	ldw	r3,4(sp)
    9b94:	18000005 	stb	zero,0(r3)
    9b98:	dfc01817 	ldw	ra,96(sp)
    9b9c:	dec01b04 	addi	sp,sp,108
    9ba0:	f800283a 	ret

00009ba4 <_sprintf_r>:
    9ba4:	deffe604 	addi	sp,sp,-104
    9ba8:	2813883a 	mov	r9,r5
    9bac:	dfc01815 	stw	ra,96(sp)
    9bb0:	d9c01915 	stw	r7,100(sp)
    9bb4:	d8801904 	addi	r2,sp,100
    9bb8:	d8800015 	stw	r2,0(sp)
    9bbc:	100f883a 	mov	r7,r2
    9bc0:	00808204 	movi	r2,520
    9bc4:	00e00034 	movhi	r3,32768
    9bc8:	18ffffc4 	addi	r3,r3,-1
    9bcc:	d880040d 	sth	r2,16(sp)
    9bd0:	d9400104 	addi	r5,sp,4
    9bd4:	00bfffc4 	movi	r2,-1
    9bd8:	d8c00615 	stw	r3,24(sp)
    9bdc:	d8c00315 	stw	r3,12(sp)
    9be0:	da400515 	stw	r9,20(sp)
    9be4:	d880048d 	sth	r2,18(sp)
    9be8:	da400115 	stw	r9,4(sp)
    9bec:	00013200 	call	1320 <___vfprintf_internal_r>
    9bf0:	d8c00117 	ldw	r3,4(sp)
    9bf4:	18000005 	stb	zero,0(r3)
    9bf8:	dfc01817 	ldw	ra,96(sp)
    9bfc:	dec01a04 	addi	sp,sp,104
    9c00:	f800283a 	ret

00009c04 <__sclose>:
    9c04:	2940038f 	ldh	r5,14(r5)
    9c08:	000c3701 	jmpi	c370 <_close_r>

00009c0c <__sseek>:
    9c0c:	defffe04 	addi	sp,sp,-8
    9c10:	dc000015 	stw	r16,0(sp)
    9c14:	2821883a 	mov	r16,r5
    9c18:	2940038f 	ldh	r5,14(r5)
    9c1c:	dfc00115 	stw	ra,4(sp)
    9c20:	000d1700 	call	d170 <_lseek_r>
    9c24:	1007883a 	mov	r3,r2
    9c28:	00bfffc4 	movi	r2,-1
    9c2c:	18800926 	beq	r3,r2,9c54 <__sseek+0x48>
    9c30:	8080030b 	ldhu	r2,12(r16)
    9c34:	80c01415 	stw	r3,80(r16)
    9c38:	10840014 	ori	r2,r2,4096
    9c3c:	8080030d 	sth	r2,12(r16)
    9c40:	1805883a 	mov	r2,r3
    9c44:	dfc00117 	ldw	ra,4(sp)
    9c48:	dc000017 	ldw	r16,0(sp)
    9c4c:	dec00204 	addi	sp,sp,8
    9c50:	f800283a 	ret
    9c54:	8080030b 	ldhu	r2,12(r16)
    9c58:	10bbffcc 	andi	r2,r2,61439
    9c5c:	8080030d 	sth	r2,12(r16)
    9c60:	1805883a 	mov	r2,r3
    9c64:	dfc00117 	ldw	ra,4(sp)
    9c68:	dc000017 	ldw	r16,0(sp)
    9c6c:	dec00204 	addi	sp,sp,8
    9c70:	f800283a 	ret

00009c74 <__swrite>:
    9c74:	2880030b 	ldhu	r2,12(r5)
    9c78:	defffb04 	addi	sp,sp,-20
    9c7c:	dcc00315 	stw	r19,12(sp)
    9c80:	1080400c 	andi	r2,r2,256
    9c84:	dc800215 	stw	r18,8(sp)
    9c88:	dc400115 	stw	r17,4(sp)
    9c8c:	dc000015 	stw	r16,0(sp)
    9c90:	3027883a 	mov	r19,r6
    9c94:	3825883a 	mov	r18,r7
    9c98:	dfc00415 	stw	ra,16(sp)
    9c9c:	2821883a 	mov	r16,r5
    9ca0:	000d883a 	mov	r6,zero
    9ca4:	01c00084 	movi	r7,2
    9ca8:	2023883a 	mov	r17,r4
    9cac:	10000226 	beq	r2,zero,9cb8 <__swrite+0x44>
    9cb0:	2940038f 	ldh	r5,14(r5)
    9cb4:	000d1700 	call	d170 <_lseek_r>
    9cb8:	8080030b 	ldhu	r2,12(r16)
    9cbc:	8140038f 	ldh	r5,14(r16)
    9cc0:	8809883a 	mov	r4,r17
    9cc4:	10bbffcc 	andi	r2,r2,61439
    9cc8:	980d883a 	mov	r6,r19
    9ccc:	900f883a 	mov	r7,r18
    9cd0:	8080030d 	sth	r2,12(r16)
    9cd4:	dfc00417 	ldw	ra,16(sp)
    9cd8:	dcc00317 	ldw	r19,12(sp)
    9cdc:	dc800217 	ldw	r18,8(sp)
    9ce0:	dc400117 	ldw	r17,4(sp)
    9ce4:	dc000017 	ldw	r16,0(sp)
    9ce8:	dec00504 	addi	sp,sp,20
    9cec:	000c2441 	jmpi	c244 <_write_r>

00009cf0 <__sread>:
    9cf0:	defffe04 	addi	sp,sp,-8
    9cf4:	dc000015 	stw	r16,0(sp)
    9cf8:	2821883a 	mov	r16,r5
    9cfc:	2940038f 	ldh	r5,14(r5)
    9d00:	dfc00115 	stw	ra,4(sp)
    9d04:	000d1e80 	call	d1e8 <_read_r>
    9d08:	1007883a 	mov	r3,r2
    9d0c:	10000816 	blt	r2,zero,9d30 <__sread+0x40>
    9d10:	80801417 	ldw	r2,80(r16)
    9d14:	10c5883a 	add	r2,r2,r3
    9d18:	80801415 	stw	r2,80(r16)
    9d1c:	1805883a 	mov	r2,r3
    9d20:	dfc00117 	ldw	ra,4(sp)
    9d24:	dc000017 	ldw	r16,0(sp)
    9d28:	dec00204 	addi	sp,sp,8
    9d2c:	f800283a 	ret
    9d30:	8080030b 	ldhu	r2,12(r16)
    9d34:	10bbffcc 	andi	r2,r2,61439
    9d38:	8080030d 	sth	r2,12(r16)
    9d3c:	1805883a 	mov	r2,r3
    9d40:	dfc00117 	ldw	ra,4(sp)
    9d44:	dc000017 	ldw	r16,0(sp)
    9d48:	dec00204 	addi	sp,sp,8
    9d4c:	f800283a 	ret

00009d50 <strcmp>:
    9d50:	2144b03a 	or	r2,r4,r5
    9d54:	108000cc 	andi	r2,r2,3
    9d58:	10001d1e 	bne	r2,zero,9dd0 <strcmp+0x80>
    9d5c:	200f883a 	mov	r7,r4
    9d60:	28800017 	ldw	r2,0(r5)
    9d64:	21000017 	ldw	r4,0(r4)
    9d68:	280d883a 	mov	r6,r5
    9d6c:	2080161e 	bne	r4,r2,9dc8 <strcmp+0x78>
    9d70:	023fbff4 	movhi	r8,65279
    9d74:	423fbfc4 	addi	r8,r8,-257
    9d78:	2207883a 	add	r3,r4,r8
    9d7c:	01602074 	movhi	r5,32897
    9d80:	29602004 	addi	r5,r5,-32640
    9d84:	1946703a 	and	r3,r3,r5
    9d88:	0104303a 	nor	r2,zero,r4
    9d8c:	10c4703a 	and	r2,r2,r3
    9d90:	10001c1e 	bne	r2,zero,9e04 <strcmp+0xb4>
    9d94:	4013883a 	mov	r9,r8
    9d98:	2811883a 	mov	r8,r5
    9d9c:	00000106 	br	9da4 <strcmp+0x54>
    9da0:	1800181e 	bne	r3,zero,9e04 <strcmp+0xb4>
    9da4:	39c00104 	addi	r7,r7,4
    9da8:	39000017 	ldw	r4,0(r7)
    9dac:	31800104 	addi	r6,r6,4
    9db0:	31400017 	ldw	r5,0(r6)
    9db4:	2245883a 	add	r2,r4,r9
    9db8:	1204703a 	and	r2,r2,r8
    9dbc:	0106303a 	nor	r3,zero,r4
    9dc0:	1886703a 	and	r3,r3,r2
    9dc4:	217ff626 	beq	r4,r5,9da0 <strcmp+0x50>
    9dc8:	3809883a 	mov	r4,r7
    9dcc:	300b883a 	mov	r5,r6
    9dd0:	20c00007 	ldb	r3,0(r4)
    9dd4:	1800051e 	bne	r3,zero,9dec <strcmp+0x9c>
    9dd8:	00000606 	br	9df4 <strcmp+0xa4>
    9ddc:	21000044 	addi	r4,r4,1
    9de0:	20c00007 	ldb	r3,0(r4)
    9de4:	29400044 	addi	r5,r5,1
    9de8:	18000226 	beq	r3,zero,9df4 <strcmp+0xa4>
    9dec:	28800007 	ldb	r2,0(r5)
    9df0:	18bffa26 	beq	r3,r2,9ddc <strcmp+0x8c>
    9df4:	20c00003 	ldbu	r3,0(r4)
    9df8:	28800003 	ldbu	r2,0(r5)
    9dfc:	1885c83a 	sub	r2,r3,r2
    9e00:	f800283a 	ret
    9e04:	0005883a 	mov	r2,zero
    9e08:	f800283a 	ret

00009e0c <strlen>:
    9e0c:	208000cc 	andi	r2,r4,3
    9e10:	2011883a 	mov	r8,r4
    9e14:	1000161e 	bne	r2,zero,9e70 <strlen+0x64>
    9e18:	20c00017 	ldw	r3,0(r4)
    9e1c:	017fbff4 	movhi	r5,65279
    9e20:	297fbfc4 	addi	r5,r5,-257
    9e24:	01e02074 	movhi	r7,32897
    9e28:	39e02004 	addi	r7,r7,-32640
    9e2c:	1945883a 	add	r2,r3,r5
    9e30:	11c4703a 	and	r2,r2,r7
    9e34:	00c6303a 	nor	r3,zero,r3
    9e38:	1886703a 	and	r3,r3,r2
    9e3c:	18000c1e 	bne	r3,zero,9e70 <strlen+0x64>
    9e40:	280d883a 	mov	r6,r5
    9e44:	380b883a 	mov	r5,r7
    9e48:	21000104 	addi	r4,r4,4
    9e4c:	20800017 	ldw	r2,0(r4)
    9e50:	1187883a 	add	r3,r2,r6
    9e54:	1946703a 	and	r3,r3,r5
    9e58:	0084303a 	nor	r2,zero,r2
    9e5c:	10c4703a 	and	r2,r2,r3
    9e60:	103ff926 	beq	r2,zero,9e48 <strlen+0x3c>
    9e64:	20800007 	ldb	r2,0(r4)
    9e68:	10000326 	beq	r2,zero,9e78 <strlen+0x6c>
    9e6c:	21000044 	addi	r4,r4,1
    9e70:	20800007 	ldb	r2,0(r4)
    9e74:	103ffd1e 	bne	r2,zero,9e6c <strlen+0x60>
    9e78:	2205c83a 	sub	r2,r4,r8
    9e7c:	f800283a 	ret

00009e80 <match>:
    9e80:	21800017 	ldw	r6,0(r4)
    9e84:	01c01004 	movi	r7,64
    9e88:	02001684 	movi	r8,90
    9e8c:	28800007 	ldb	r2,0(r5)
    9e90:	29400044 	addi	r5,r5,1
    9e94:	10000826 	beq	r2,zero,9eb8 <match+0x38>
    9e98:	31800044 	addi	r6,r6,1
    9e9c:	30c00007 	ldb	r3,0(r6)
    9ea0:	38c0020e 	bge	r7,r3,9eac <match+0x2c>
    9ea4:	40c00116 	blt	r8,r3,9eac <match+0x2c>
    9ea8:	18c00804 	addi	r3,r3,32
    9eac:	18bff726 	beq	r3,r2,9e8c <match+0xc>
    9eb0:	0005883a 	mov	r2,zero
    9eb4:	f800283a 	ret
    9eb8:	30800044 	addi	r2,r6,1
    9ebc:	20800015 	stw	r2,0(r4)
    9ec0:	00800044 	movi	r2,1
    9ec4:	f800283a 	ret

00009ec8 <_strtod_r>:
    9ec8:	deffde04 	addi	sp,sp,-136
    9ecc:	df002015 	stw	fp,128(sp)
    9ed0:	dd401d15 	stw	r21,116(sp)
    9ed4:	dc401915 	stw	r17,100(sp)
    9ed8:	dfc02115 	stw	ra,132(sp)
    9edc:	ddc01f15 	stw	r23,124(sp)
    9ee0:	dd801e15 	stw	r22,120(sp)
    9ee4:	dd001c15 	stw	r20,112(sp)
    9ee8:	dcc01b15 	stw	r19,108(sp)
    9eec:	dc801a15 	stw	r18,104(sp)
    9ef0:	dc001815 	stw	r16,96(sp)
    9ef4:	2823883a 	mov	r17,r5
    9ef8:	202b883a 	mov	r21,r4
    9efc:	d9801515 	stw	r6,84(sp)
    9f00:	d8000915 	stw	zero,36(sp)
    9f04:	d8000a15 	stw	zero,40(sp)
    9f08:	d9400415 	stw	r5,16(sp)
    9f0c:	df000904 	addi	fp,sp,36
    9f10:	da000417 	ldw	r8,16(sp)
    9f14:	00800b44 	movi	r2,45
    9f18:	40c00003 	ldbu	r3,0(r8)
    9f1c:	10c03536 	bltu	r2,r3,9ff4 <_strtod_r+0x12c>
    9f20:	18c5883a 	add	r2,r3,r3
    9f24:	1085883a 	add	r2,r2,r2
    9f28:	00c00074 	movhi	r3,1
    9f2c:	18e7cf04 	addi	r3,r3,-24772
    9f30:	10c5883a 	add	r2,r2,r3
    9f34:	11000017 	ldw	r4,0(r2)
    9f38:	2000683a 	jmp	r4
    9f3c:	0000a130 	cmpltui	zero,zero,644
    9f40:	00009ff4 	movhi	zero,639
    9f44:	00009ff4 	movhi	zero,639
    9f48:	00009ff4 	movhi	zero,639
    9f4c:	00009ff4 	movhi	zero,639
    9f50:	00009ff4 	movhi	zero,639
    9f54:	00009ff4 	movhi	zero,639
    9f58:	00009ff4 	movhi	zero,639
    9f5c:	00009ff4 	movhi	zero,639
    9f60:	0000a448 	cmpgei	zero,zero,657
    9f64:	0000a448 	cmpgei	zero,zero,657
    9f68:	0000a448 	cmpgei	zero,zero,657
    9f6c:	0000a448 	cmpgei	zero,zero,657
    9f70:	0000a448 	cmpgei	zero,zero,657
    9f74:	00009ff4 	movhi	zero,639
    9f78:	00009ff4 	movhi	zero,639
    9f7c:	00009ff4 	movhi	zero,639
    9f80:	00009ff4 	movhi	zero,639
    9f84:	00009ff4 	movhi	zero,639
    9f88:	00009ff4 	movhi	zero,639
    9f8c:	00009ff4 	movhi	zero,639
    9f90:	00009ff4 	movhi	zero,639
    9f94:	00009ff4 	movhi	zero,639
    9f98:	00009ff4 	movhi	zero,639
    9f9c:	00009ff4 	movhi	zero,639
    9fa0:	00009ff4 	movhi	zero,639
    9fa4:	00009ff4 	movhi	zero,639
    9fa8:	00009ff4 	movhi	zero,639
    9fac:	00009ff4 	movhi	zero,639
    9fb0:	00009ff4 	movhi	zero,639
    9fb4:	00009ff4 	movhi	zero,639
    9fb8:	00009ff4 	movhi	zero,639
    9fbc:	0000a448 	cmpgei	zero,zero,657
    9fc0:	00009ff4 	movhi	zero,639
    9fc4:	00009ff4 	movhi	zero,639
    9fc8:	00009ff4 	movhi	zero,639
    9fcc:	00009ff4 	movhi	zero,639
    9fd0:	00009ff4 	movhi	zero,639
    9fd4:	00009ff4 	movhi	zero,639
    9fd8:	00009ff4 	movhi	zero,639
    9fdc:	00009ff4 	movhi	zero,639
    9fe0:	00009ff4 	movhi	zero,639
    9fe4:	00009ff4 	movhi	zero,639
    9fe8:	0000a428 	cmpgeui	zero,zero,656
    9fec:	00009ff4 	movhi	zero,639
    9ff0:	0000a454 	movui	zero,657
    9ff4:	d8001115 	stw	zero,68(sp)
    9ff8:	40c00007 	ldb	r3,0(r8)
    9ffc:	00800c04 	movi	r2,48
    a000:	1880d026 	beq	r3,r2,a344 <_strtod_r+0x47c>
    a004:	001f883a 	mov	r15,zero
    a008:	41000007 	ldb	r4,0(r8)
    a00c:	00c00bc4 	movi	r3,47
    a010:	402d883a 	mov	r22,r8
    a014:	1903470e 	bge	r3,r4,ad34 <_strtod_r+0xe6c>
    a018:	00800e44 	movi	r2,57
    a01c:	11034516 	blt	r2,r4,ad34 <_strtod_r+0xe6c>
    a020:	180f883a 	mov	r7,r3
    a024:	1013883a 	mov	r9,r2
    a028:	4007883a 	mov	r3,r8
    a02c:	000d883a 	mov	r6,zero
    a030:	0029883a 	mov	r20,zero
    a034:	0021883a 	mov	r16,zero
    a038:	01400204 	movi	r5,8
    a03c:	028003c4 	movi	r10,15
    a040:	29803116 	blt	r5,r6,a108 <_strtod_r+0x240>
    a044:	a08002a4 	muli	r2,r20,10
    a048:	1105883a 	add	r2,r2,r4
    a04c:	153ff404 	addi	r20,r2,-48
    a050:	1a000044 	addi	r8,r3,1
    a054:	da000415 	stw	r8,16(sp)
    a058:	41000007 	ldb	r4,0(r8)
    a05c:	31800044 	addi	r6,r6,1
    a060:	4007883a 	mov	r3,r8
    a064:	3900010e 	bge	r7,r4,a06c <_strtod_r+0x1a4>
    a068:	493ff50e 	bge	r9,r4,a040 <_strtod_r+0x178>
    a06c:	00800b84 	movi	r2,46
    a070:	2080c126 	beq	r4,r2,a378 <_strtod_r+0x4b0>
    a074:	3027883a 	mov	r19,r6
    a078:	0025883a 	mov	r18,zero
    a07c:	0015883a 	mov	r10,zero
    a080:	000f883a 	mov	r7,zero
    a084:	00801944 	movi	r2,101
    a088:	20802426 	beq	r4,r2,a11c <_strtod_r+0x254>
    a08c:	00801144 	movi	r2,69
    a090:	20802226 	beq	r4,r2,a11c <_strtod_r+0x254>
    a094:	9816c03a 	cmpne	r11,r19,zero
    a098:	000b883a 	mov	r5,zero
    a09c:	5800631e 	bne	r11,zero,a22c <_strtod_r+0x364>
    a0a0:	3800c126 	beq	r7,zero,a3a8 <_strtod_r+0x4e0>
    a0a4:	d8c01517 	ldw	r3,84(sp)
    a0a8:	18000226 	beq	r3,zero,a0b4 <_strtod_r+0x1ec>
    a0ac:	d8800417 	ldw	r2,16(sp)
    a0b0:	18800015 	stw	r2,0(r3)
    a0b4:	d9001117 	ldw	r4,68(sp)
    a0b8:	2005003a 	cmpeq	r2,r4,zero
    a0bc:	10001f1e 	bne	r2,zero,a13c <_strtod_r+0x274>
    a0c0:	e0800017 	ldw	r2,0(fp)
    a0c4:	e0c00117 	ldw	r3,4(fp)
    a0c8:	1009883a 	mov	r4,r2
    a0cc:	1960003c 	xorhi	r5,r3,32768
    a0d0:	2005883a 	mov	r2,r4
    a0d4:	2807883a 	mov	r3,r5
    a0d8:	dfc02117 	ldw	ra,132(sp)
    a0dc:	df002017 	ldw	fp,128(sp)
    a0e0:	ddc01f17 	ldw	r23,124(sp)
    a0e4:	dd801e17 	ldw	r22,120(sp)
    a0e8:	dd401d17 	ldw	r21,116(sp)
    a0ec:	dd001c17 	ldw	r20,112(sp)
    a0f0:	dcc01b17 	ldw	r19,108(sp)
    a0f4:	dc801a17 	ldw	r18,104(sp)
    a0f8:	dc401917 	ldw	r17,100(sp)
    a0fc:	dc001817 	ldw	r16,96(sp)
    a100:	dec02204 	addi	sp,sp,136
    a104:	f800283a 	ret
    a108:	51bfd116 	blt	r10,r6,a050 <_strtod_r+0x188>
    a10c:	808002a4 	muli	r2,r16,10
    a110:	1105883a 	add	r2,r2,r4
    a114:	143ff404 	addi	r16,r2,-48
    a118:	003fcd06 	br	a050 <_strtod_r+0x188>
    a11c:	9816c03a 	cmpne	r11,r19,zero
    a120:	5800091e 	bne	r11,zero,a148 <_strtod_r+0x280>
    a124:	3800081e 	bne	r7,zero,a148 <_strtod_r+0x280>
    a128:	7805003a 	cmpeq	r2,r15,zero
    a12c:	10000626 	beq	r2,zero,a148 <_strtod_r+0x280>
    a130:	d8001115 	stw	zero,68(sp)
    a134:	dc400415 	stw	r17,16(sp)
    a138:	003fda06 	br	a0a4 <_strtod_r+0x1dc>
    a13c:	e1000017 	ldw	r4,0(fp)
    a140:	e1400117 	ldw	r5,4(fp)
    a144:	003fe206 	br	a0d0 <_strtod_r+0x208>
    a148:	dc400417 	ldw	r17,16(sp)
    a14c:	00800ac4 	movi	r2,43
    a150:	8a000044 	addi	r8,r17,1
    a154:	da000415 	stw	r8,16(sp)
    a158:	88c00047 	ldb	r3,1(r17)
    a15c:	4009883a 	mov	r4,r8
    a160:	1880bf26 	beq	r3,r2,a460 <_strtod_r+0x598>
    a164:	00800b44 	movi	r2,45
    a168:	18834526 	beq	r3,r2,ae80 <_strtod_r+0xfb8>
    a16c:	1809883a 	mov	r4,r3
    a170:	20fff404 	addi	r3,r4,-48
    a174:	00800244 	movi	r2,9
    a178:	001d883a 	mov	r14,zero
    a17c:	10c0bf36 	bltu	r2,r3,a47c <_strtod_r+0x5b4>
    a180:	00800c04 	movi	r2,48
    a184:	2080061e 	bne	r4,r2,a1a0 <_strtod_r+0x2d8>
    a188:	da000417 	ldw	r8,16(sp)
    a18c:	2005883a 	mov	r2,r4
    a190:	42000044 	addi	r8,r8,1
    a194:	da000415 	stw	r8,16(sp)
    a198:	41000007 	ldb	r4,0(r8)
    a19c:	20bffc26 	beq	r4,r2,a190 <_strtod_r+0x2c8>
    a1a0:	20fff3c4 	addi	r3,r4,-49
    a1a4:	00800204 	movi	r2,8
    a1a8:	10ffbb36 	bltu	r2,r3,a098 <_strtod_r+0x1d0>
    a1ac:	da000417 	ldw	r8,16(sp)
    a1b0:	227ff404 	addi	r9,r4,-48
    a1b4:	03000bc4 	movi	r12,47
    a1b8:	4007883a 	mov	r3,r8
    a1bc:	42000044 	addi	r8,r8,1
    a1c0:	da000415 	stw	r8,16(sp)
    a1c4:	41000007 	ldb	r4,0(r8)
    a1c8:	61000d0e 	bge	r12,r4,a200 <_strtod_r+0x338>
    a1cc:	00800e44 	movi	r2,57
    a1d0:	11000b16 	blt	r2,r4,a200 <_strtod_r+0x338>
    a1d4:	601b883a 	mov	r13,r12
    a1d8:	1019883a 	mov	r12,r2
    a1dc:	00000106 	br	a1e4 <_strtod_r+0x31c>
    a1e0:	61000716 	blt	r12,r4,a200 <_strtod_r+0x338>
    a1e4:	488002a4 	muli	r2,r9,10
    a1e8:	42000044 	addi	r8,r8,1
    a1ec:	da000415 	stw	r8,16(sp)
    a1f0:	2085883a 	add	r2,r4,r2
    a1f4:	41000007 	ldb	r4,0(r8)
    a1f8:	127ff404 	addi	r9,r2,-48
    a1fc:	693ff816 	blt	r13,r4,a1e0 <_strtod_r+0x318>
    a200:	40c7c83a 	sub	r3,r8,r3
    a204:	00800204 	movi	r2,8
    a208:	10c2e416 	blt	r2,r3,ad9c <_strtod_r+0xed4>
    a20c:	009387c4 	movi	r2,19999
    a210:	480b883a 	mov	r5,r9
    a214:	1240010e 	bge	r2,r9,a21c <_strtod_r+0x354>
    a218:	100b883a 	mov	r5,r2
    a21c:	7005003a 	cmpeq	r2,r14,zero
    a220:	103f9e1e 	bne	r2,zero,a09c <_strtod_r+0x1d4>
    a224:	014bc83a 	sub	r5,zero,r5
    a228:	583f9d26 	beq	r11,zero,a0a0 <_strtod_r+0x1d8>
    a22c:	2a8bc83a 	sub	r5,r5,r10
    a230:	d9400f15 	stw	r5,60(sp)
    a234:	30007a1e 	bne	r6,zero,a420 <_strtod_r+0x558>
    a238:	dcc01215 	stw	r19,72(sp)
    a23c:	00800404 	movi	r2,16
    a240:	9825883a 	mov	r18,r19
    a244:	14c0010e 	bge	r2,r19,a24c <_strtod_r+0x384>
    a248:	1025883a 	mov	r18,r2
    a24c:	a009883a 	mov	r4,r20
    a250:	000f0ac0 	call	f0ac <__floatunsidf>
    a254:	100f883a 	mov	r7,r2
    a258:	e0800015 	stw	r2,0(fp)
    a25c:	00800244 	movi	r2,9
    a260:	e0c00115 	stw	r3,4(fp)
    a264:	1480160e 	bge	r2,r18,a2c0 <_strtod_r+0x3f8>
    a268:	900c90fa 	slli	r6,r18,3
    a26c:	01000074 	movhi	r4,1
    a270:	2109e504 	addi	r4,r4,10132
    a274:	180b883a 	mov	r5,r3
    a278:	310d883a 	add	r6,r6,r4
    a27c:	30ffef17 	ldw	r3,-68(r6)
    a280:	30bfee17 	ldw	r2,-72(r6)
    a284:	3809883a 	mov	r4,r7
    a288:	180f883a 	mov	r7,r3
    a28c:	100d883a 	mov	r6,r2
    a290:	000e51c0 	call	e51c <__muldf3>
    a294:	8009883a 	mov	r4,r16
    a298:	1823883a 	mov	r17,r3
    a29c:	1021883a 	mov	r16,r2
    a2a0:	000f0ac0 	call	f0ac <__floatunsidf>
    a2a4:	880b883a 	mov	r5,r17
    a2a8:	180f883a 	mov	r7,r3
    a2ac:	8009883a 	mov	r4,r16
    a2b0:	100d883a 	mov	r6,r2
    a2b4:	000e4a80 	call	e4a8 <__adddf3>
    a2b8:	e0c00115 	stw	r3,4(fp)
    a2bc:	e0800015 	stw	r2,0(fp)
    a2c0:	010003c4 	movi	r4,15
    a2c4:	24c09816 	blt	r4,r19,a528 <_strtod_r+0x660>
    a2c8:	d9800f17 	ldw	r6,60(sp)
    a2cc:	303f7526 	beq	r6,zero,a0a4 <_strtod_r+0x1dc>
    a2d0:	0183be0e 	bge	zero,r6,b1cc <_strtod_r+0x1304>
    a2d4:	00800584 	movi	r2,22
    a2d8:	1182b20e 	bge	r2,r6,ada4 <_strtod_r+0xedc>
    a2dc:	d8c00f17 	ldw	r3,60(sp)
    a2e0:	24e3c83a 	sub	r17,r4,r19
    a2e4:	88800584 	addi	r2,r17,22
    a2e8:	10c08f16 	blt	r2,r3,a528 <_strtod_r+0x660>
    a2ec:	880890fa 	slli	r4,r17,3
    a2f0:	04000074 	movhi	r16,1
    a2f4:	8409e504 	addi	r16,r16,10132
    a2f8:	e0800017 	ldw	r2,0(fp)
    a2fc:	2409883a 	add	r4,r4,r16
    a300:	22000017 	ldw	r8,0(r4)
    a304:	22400117 	ldw	r9,4(r4)
    a308:	e0c00117 	ldw	r3,4(fp)
    a30c:	1009883a 	mov	r4,r2
    a310:	480f883a 	mov	r7,r9
    a314:	180b883a 	mov	r5,r3
    a318:	400d883a 	mov	r6,r8
    a31c:	000e51c0 	call	e51c <__muldf3>
    a320:	d9000f17 	ldw	r4,60(sp)
    a324:	180b883a 	mov	r5,r3
    a328:	2455c83a 	sub	r10,r4,r17
    a32c:	501490fa 	slli	r10,r10,3
    a330:	1009883a 	mov	r4,r2
    a334:	5415883a 	add	r10,r10,r16
    a338:	52000017 	ldw	r8,0(r10)
    a33c:	52400117 	ldw	r9,4(r10)
    a340:	0002a206 	br	adcc <_strtod_r+0xf04>
    a344:	40c00047 	ldb	r3,1(r8)
    a348:	00801604 	movi	r2,88
    a34c:	18804e26 	beq	r3,r2,a488 <_strtod_r+0x5c0>
    a350:	00801e04 	movi	r2,120
    a354:	18804c26 	beq	r3,r2,a488 <_strtod_r+0x5c0>
    a358:	42000044 	addi	r8,r8,1
    a35c:	da000415 	stw	r8,16(sp)
    a360:	40c00007 	ldb	r3,0(r8)
    a364:	00800c04 	movi	r2,48
    a368:	18bffb26 	beq	r3,r2,a358 <_strtod_r+0x490>
    a36c:	183f4d26 	beq	r3,zero,a0a4 <_strtod_r+0x1dc>
    a370:	03c00044 	movi	r15,1
    a374:	003f2406 	br	a008 <_strtod_r+0x140>
    a378:	42000044 	addi	r8,r8,1
    a37c:	da000415 	stw	r8,16(sp)
    a380:	19000047 	ldb	r4,1(r3)
    a384:	3000b726 	beq	r6,zero,a664 <_strtod_r+0x79c>
    a388:	3027883a 	mov	r19,r6
    a38c:	0015883a 	mov	r10,zero
    a390:	000f883a 	mov	r7,zero
    a394:	227ff404 	addi	r9,r4,-48
    a398:	00800244 	movi	r2,9
    a39c:	1242592e 	bgeu	r2,r9,ad04 <_strtod_r+0xe3c>
    a3a0:	04800044 	movi	r18,1
    a3a4:	003f3706 	br	a084 <_strtod_r+0x1bc>
    a3a8:	7804c03a 	cmpne	r2,r15,zero
    a3ac:	103f3d1e 	bne	r2,zero,a0a4 <_strtod_r+0x1dc>
    a3b0:	9004c03a 	cmpne	r2,r18,zero
    a3b4:	103f5e1e 	bne	r2,zero,a130 <_strtod_r+0x268>
    a3b8:	00801384 	movi	r2,78
    a3bc:	2083a226 	beq	r4,r2,b248 <_strtod_r+0x1380>
    a3c0:	11039d16 	blt	r2,r4,b238 <_strtod_r+0x1370>
    a3c4:	00801244 	movi	r2,73
    a3c8:	20bf591e 	bne	r4,r2,a130 <_strtod_r+0x268>
    a3cc:	dc000404 	addi	r16,sp,16
    a3d0:	8009883a 	mov	r4,r16
    a3d4:	01400074 	movhi	r5,1
    a3d8:	294a2e04 	addi	r5,r5,10424
    a3dc:	0009e800 	call	9e80 <match>
    a3e0:	103f5326 	beq	r2,zero,a130 <_strtod_r+0x268>
    a3e4:	d8800417 	ldw	r2,16(sp)
    a3e8:	8009883a 	mov	r4,r16
    a3ec:	01400074 	movhi	r5,1
    a3f0:	294a2f04 	addi	r5,r5,10428
    a3f4:	123fffc4 	addi	r8,r2,-1
    a3f8:	da000415 	stw	r8,16(sp)
    a3fc:	0009e800 	call	9e80 <match>
    a400:	1000031e 	bne	r2,zero,a410 <_strtod_r+0x548>
    a404:	d8800417 	ldw	r2,16(sp)
    a408:	12000044 	addi	r8,r2,1
    a40c:	da000415 	stw	r8,16(sp)
    a410:	019ffc34 	movhi	r6,32752
    a414:	e1800115 	stw	r6,4(fp)
    a418:	e0000015 	stw	zero,0(fp)
    a41c:	003f2106 	br	a0a4 <_strtod_r+0x1dc>
    a420:	d9801215 	stw	r6,72(sp)
    a424:	003f8506 	br	a23c <_strtod_r+0x374>
    a428:	d8001115 	stw	zero,68(sp)
    a42c:	42000044 	addi	r8,r8,1
    a430:	da000415 	stw	r8,16(sp)
    a434:	40800007 	ldb	r2,0(r8)
    a438:	103eef1e 	bne	r2,zero,9ff8 <_strtod_r+0x130>
    a43c:	d8001115 	stw	zero,68(sp)
    a440:	dc400415 	stw	r17,16(sp)
    a444:	003f1706 	br	a0a4 <_strtod_r+0x1dc>
    a448:	42000044 	addi	r8,r8,1
    a44c:	da000415 	stw	r8,16(sp)
    a450:	003eaf06 	br	9f10 <_strtod_r+0x48>
    a454:	00800044 	movi	r2,1
    a458:	d8801115 	stw	r2,68(sp)
    a45c:	003ff306 	br	a42c <_strtod_r+0x564>
    a460:	001d883a 	mov	r14,zero
    a464:	42000044 	addi	r8,r8,1
    a468:	da000415 	stw	r8,16(sp)
    a46c:	21000047 	ldb	r4,1(r4)
    a470:	00800244 	movi	r2,9
    a474:	20fff404 	addi	r3,r4,-48
    a478:	10ff412e 	bgeu	r2,r3,a180 <_strtod_r+0x2b8>
    a47c:	000b883a 	mov	r5,zero
    a480:	dc400415 	stw	r17,16(sp)
    a484:	003f0506 	br	a09c <_strtod_r+0x1d4>
    a488:	d8c01117 	ldw	r3,68(sp)
    a48c:	04800074 	movhi	r18,1
    a490:	948c8204 	addi	r18,r18,12808
    a494:	d8800504 	addi	r2,sp,20
    a498:	a809883a 	mov	r4,r21
    a49c:	d9400404 	addi	r5,sp,16
    a4a0:	900d883a 	mov	r6,r18
    a4a4:	d9c00604 	addi	r7,sp,24
    a4a8:	d8800015 	stw	r2,0(sp)
    a4ac:	d8c00115 	stw	r3,4(sp)
    a4b0:	000c6b40 	call	c6b4 <__gethex>
    a4b4:	140001cc 	andi	r16,r2,7
    a4b8:	1027883a 	mov	r19,r2
    a4bc:	803ef926 	beq	r16,zero,a0a4 <_strtod_r+0x1dc>
    a4c0:	05000184 	movi	r20,6
    a4c4:	853f1a26 	beq	r16,r20,a130 <_strtod_r+0x268>
    a4c8:	d9800517 	ldw	r6,20(sp)
    a4cc:	30000626 	beq	r6,zero,a4e8 <_strtod_r+0x620>
    a4d0:	91400017 	ldw	r5,0(r18)
    a4d4:	d9000d04 	addi	r4,sp,52
    a4d8:	00086600 	call	8660 <__copybits>
    a4dc:	d9400517 	ldw	r5,20(sp)
    a4e0:	a809883a 	mov	r4,r21
    a4e4:	00081c00 	call	81c0 <_Bfree>
    a4e8:	d9400617 	ldw	r5,24(sp)
    a4ec:	a4024136 	bltu	r20,r16,adf4 <_strtod_r+0xf2c>
    a4f0:	8405883a 	add	r2,r16,r16
    a4f4:	1085883a 	add	r2,r2,r2
    a4f8:	00c00074 	movhi	r3,1
    a4fc:	18e94304 	addi	r3,r3,-23284
    a500:	10c5883a 	add	r2,r2,r3
    a504:	11000017 	ldw	r4,0(r2)
    a508:	2000683a 	jmp	r4
    a50c:	0000ae34 	movhi	zero,696
    a510:	0000ae40 	call	ae4 <__extendsfdf2>
    a514:	0000ade4 	muli	zero,zero,695
    a518:	0000ae0c 	andi	zero,zero,696
    a51c:	0000ae1c 	xori	zero,zero,696
    a520:	0000ae40 	call	ae4 <__extendsfdf2>
    a524:	0000ae34 	movhi	zero,696
    a528:	d8c00f17 	ldw	r3,60(sp)
    a52c:	9c85c83a 	sub	r2,r19,r18
    a530:	18a1883a 	add	r16,r3,r2
    a534:	0402d00e 	bge	zero,r16,b078 <_strtod_r+0x11b0>
    a538:	814003cc 	andi	r5,r16,15
    a53c:	28000f26 	beq	r5,zero,a57c <_strtod_r+0x6b4>
    a540:	280a90fa 	slli	r5,r5,3
    a544:	01000074 	movhi	r4,1
    a548:	2109e504 	addi	r4,r4,10132
    a54c:	e0800017 	ldw	r2,0(fp)
    a550:	290b883a 	add	r5,r5,r4
    a554:	2a000017 	ldw	r8,0(r5)
    a558:	e0c00117 	ldw	r3,4(fp)
    a55c:	2a400117 	ldw	r9,4(r5)
    a560:	1009883a 	mov	r4,r2
    a564:	180b883a 	mov	r5,r3
    a568:	480f883a 	mov	r7,r9
    a56c:	400d883a 	mov	r6,r8
    a570:	000e51c0 	call	e51c <__muldf3>
    a574:	e0c00115 	stw	r3,4(fp)
    a578:	e0800015 	stw	r2,0(fp)
    a57c:	00bffc04 	movi	r2,-16
    a580:	808c703a 	and	r6,r16,r2
    a584:	30005b26 	beq	r6,zero,a6f4 <_strtod_r+0x82c>
    a588:	00804d04 	movi	r2,308
    a58c:	1181fd16 	blt	r2,r6,ad84 <_strtod_r+0xebc>
    a590:	3021d13a 	srai	r16,r6,4
    a594:	00800044 	movi	r2,1
    a598:	1403610e 	bge	r2,r16,b320 <_strtod_r+0x1458>
    a59c:	102f883a 	mov	r23,r2
    a5a0:	0025883a 	mov	r18,zero
    a5a4:	04400074 	movhi	r17,1
    a5a8:	8c4a1704 	addi	r17,r17,10332
    a5ac:	8080004c 	andi	r2,r16,1
    a5b0:	1005003a 	cmpeq	r2,r2,zero
    a5b4:	1000091e 	bne	r2,zero,a5dc <_strtod_r+0x714>
    a5b8:	e0800017 	ldw	r2,0(fp)
    a5bc:	e0c00117 	ldw	r3,4(fp)
    a5c0:	89800017 	ldw	r6,0(r17)
    a5c4:	89c00117 	ldw	r7,4(r17)
    a5c8:	180b883a 	mov	r5,r3
    a5cc:	1009883a 	mov	r4,r2
    a5d0:	000e51c0 	call	e51c <__muldf3>
    a5d4:	e0c00115 	stw	r3,4(fp)
    a5d8:	e0800015 	stw	r2,0(fp)
    a5dc:	8021d07a 	srai	r16,r16,1
    a5e0:	94800044 	addi	r18,r18,1
    a5e4:	8c400204 	addi	r17,r17,8
    a5e8:	bc3ff016 	blt	r23,r16,a5ac <_strtod_r+0x6e4>
    a5ec:	900e90fa 	slli	r7,r18,3
    a5f0:	01800074 	movhi	r6,1
    a5f4:	318a1704 	addi	r6,r6,10332
    a5f8:	e2000117 	ldw	r8,4(fp)
    a5fc:	398f883a 	add	r7,r7,r6
    a600:	38800017 	ldw	r2,0(r7)
    a604:	38c00117 	ldw	r3,4(r7)
    a608:	e1000017 	ldw	r4,0(fp)
    a60c:	01bf2c34 	movhi	r6,64688
    a610:	418d883a 	add	r6,r8,r6
    a614:	300b883a 	mov	r5,r6
    a618:	180f883a 	mov	r7,r3
    a61c:	100d883a 	mov	r6,r2
    a620:	000e51c0 	call	e51c <__muldf3>
    a624:	1009883a 	mov	r4,r2
    a628:	180b883a 	mov	r5,r3
    a62c:	199ffc2c 	andhi	r6,r3,32752
    a630:	009f2834 	movhi	r2,31904
    a634:	e1000015 	stw	r4,0(fp)
    a638:	e1400115 	stw	r5,4(fp)
    a63c:	1181d136 	bltu	r2,r6,ad84 <_strtod_r+0xebc>
    a640:	009f2434 	movhi	r2,31888
    a644:	1183202e 	bgeu	r2,r6,b2c8 <_strtod_r+0x1400>
    a648:	d8001415 	stw	zero,80(sp)
    a64c:	019ffc34 	movhi	r6,32752
    a650:	31bfffc4 	addi	r6,r6,-1
    a654:	01ffffc4 	movi	r7,-1
    a658:	e1800115 	stw	r6,4(fp)
    a65c:	e1c00015 	stw	r7,0(fp)
    a660:	00002506 	br	a6f8 <_strtod_r+0x830>
    a664:	00800c04 	movi	r2,48
    a668:	2083151e 	bne	r4,r2,b2c0 <_strtod_r+0x13f8>
    a66c:	2005883a 	mov	r2,r4
    a670:	000f883a 	mov	r7,zero
    a674:	42000044 	addi	r8,r8,1
    a678:	da000415 	stw	r8,16(sp)
    a67c:	41000007 	ldb	r4,0(r8)
    a680:	39c00044 	addi	r7,r7,1
    a684:	20bffb26 	beq	r4,r2,a674 <_strtod_r+0x7ac>
    a688:	20fff3c4 	addi	r3,r4,-49
    a68c:	00800204 	movi	r2,8
    a690:	10c1b836 	bltu	r2,r3,ad74 <_strtod_r+0xeac>
    a694:	dd800417 	ldw	r22,16(sp)
    a698:	3815883a 	mov	r10,r7
    a69c:	227ff404 	addi	r9,r4,-48
    a6a0:	b011883a 	mov	r8,r22
    a6a4:	0027883a 	mov	r19,zero
    a6a8:	01c00044 	movi	r7,1
    a6ac:	4801fe26 	beq	r9,zero,aea8 <_strtod_r+0xfe0>
    a6b0:	00800044 	movi	r2,1
    a6b4:	51d5883a 	add	r10,r10,r7
    a6b8:	11c31f0e 	bge	r2,r7,b338 <_strtod_r+0x1470>
    a6bc:	1009883a 	mov	r4,r2
    a6c0:	9807883a 	mov	r3,r19
    a6c4:	02c00204 	movi	r11,8
    a6c8:	03000404 	movi	r12,16
    a6cc:	00000306 	br	a6dc <_strtod_r+0x814>
    a6d0:	a50002a4 	muli	r20,r20,10
    a6d4:	21000044 	addi	r4,r4,1
    a6d8:	21c1eb26 	beq	r4,r7,ae88 <_strtod_r+0xfc0>
    a6dc:	18c00044 	addi	r3,r3,1
    a6e0:	18bfffc4 	addi	r2,r3,-1
    a6e4:	58bffa0e 	bge	r11,r2,a6d0 <_strtod_r+0x808>
    a6e8:	60fffa16 	blt	r12,r3,a6d4 <_strtod_r+0x80c>
    a6ec:	840002a4 	muli	r16,r16,10
    a6f0:	003ff806 	br	a6d4 <_strtod_r+0x80c>
    a6f4:	d8001415 	stw	zero,80(sp)
    a6f8:	d9801217 	ldw	r6,72(sp)
    a6fc:	a809883a 	mov	r4,r21
    a700:	b00b883a 	mov	r5,r22
    a704:	980f883a 	mov	r7,r19
    a708:	dd000015 	stw	r20,0(sp)
    a70c:	00090940 	call	9094 <__s2b>
    a710:	d9800f17 	ldw	r6,60(sp)
    a714:	11000304 	addi	r4,r2,12
    a718:	d8801015 	stw	r2,64(sp)
    a71c:	300c803a 	cmplt	r6,r6,zero
    a720:	d9001715 	stw	r4,92(sp)
    a724:	d9801615 	stw	r6,88(sp)
    a728:	d8801017 	ldw	r2,64(sp)
    a72c:	a809883a 	mov	r4,r21
    a730:	11400117 	ldw	r5,4(r2)
    a734:	00087400 	call	8740 <_Balloc>
    a738:	d8c01017 	ldw	r3,64(sp)
    a73c:	d9401717 	ldw	r5,92(sp)
    a740:	11000304 	addi	r4,r2,12
    a744:	19800417 	ldw	r6,16(r3)
    a748:	102f883a 	mov	r23,r2
    a74c:	318d883a 	add	r6,r6,r6
    a750:	318d883a 	add	r6,r6,r6
    a754:	31800204 	addi	r6,r6,8
    a758:	0007fa80 	call	7fa8 <memcpy>
    a75c:	e2000017 	ldw	r8,0(fp)
    a760:	e2400117 	ldw	r9,4(fp)
    a764:	d9800304 	addi	r6,sp,12
    a768:	400b883a 	mov	r5,r8
    a76c:	a809883a 	mov	r4,r21
    a770:	d9c00204 	addi	r7,sp,8
    a774:	d9800015 	stw	r6,0(sp)
    a778:	480d883a 	mov	r6,r9
    a77c:	00087fc0 	call	87fc <__d2b>
    a780:	a809883a 	mov	r4,r21
    a784:	01400044 	movi	r5,1
    a788:	d8800515 	stw	r2,20(sp)
    a78c:	0008e380 	call	8e38 <__i2b>
    a790:	102d883a 	mov	r22,r2
    a794:	d8801617 	ldw	r2,88(sp)
    a798:	1001051e 	bne	r2,zero,abb0 <_strtod_r+0xce8>
    a79c:	dd000f17 	ldw	r20,60(sp)
    a7a0:	000f883a 	mov	r7,zero
    a7a4:	0013883a 	mov	r9,zero
    a7a8:	a011883a 	mov	r8,r20
    a7ac:	d8800217 	ldw	r2,8(sp)
    a7b0:	1000fd16 	blt	r2,zero,aba8 <_strtod_r+0xce0>
    a7b4:	388f883a 	add	r7,r7,r2
    a7b8:	d9801417 	ldw	r6,80(sp)
    a7bc:	d9400317 	ldw	r5,12(sp)
    a7c0:	00ff0084 	movi	r3,-1022
    a7c4:	1189c83a 	sub	r4,r2,r6
    a7c8:	2145883a 	add	r2,r4,r5
    a7cc:	10bfffc4 	addi	r2,r2,-1
    a7d0:	10c09f0e 	bge	r2,r3,aa50 <_strtod_r+0xb88>
    a7d4:	21810cc4 	addi	r6,r4,1075
    a7d8:	d8c01417 	ldw	r3,80(sp)
    a7dc:	4185883a 	add	r2,r8,r6
    a7e0:	39a1883a 	add	r16,r7,r6
    a7e4:	18a5883a 	add	r18,r3,r2
    a7e8:	3807883a 	mov	r3,r7
    a7ec:	81c0010e 	bge	r16,r7,a7f4 <_strtod_r+0x92c>
    a7f0:	8007883a 	mov	r3,r16
    a7f4:	9005883a 	mov	r2,r18
    a7f8:	1c80010e 	bge	r3,r18,a800 <_strtod_r+0x938>
    a7fc:	1805883a 	mov	r2,r3
    a800:	0080e70e 	bge	zero,r2,aba0 <_strtod_r+0xcd8>
    a804:	38a7c83a 	sub	r19,r7,r2
    a808:	80a1c83a 	sub	r16,r16,r2
    a80c:	90a5c83a 	sub	r18,r18,r2
    a810:	02400e0e 	bge	zero,r9,a84c <_strtod_r+0x984>
    a814:	480d883a 	mov	r6,r9
    a818:	b00b883a 	mov	r5,r22
    a81c:	a809883a 	mov	r4,r21
    a820:	0008f740 	call	8f74 <__pow5mult>
    a824:	d9800517 	ldw	r6,20(sp)
    a828:	a809883a 	mov	r4,r21
    a82c:	100b883a 	mov	r5,r2
    a830:	102d883a 	mov	r22,r2
    a834:	0008c500 	call	8c50 <__multiply>
    a838:	d9400517 	ldw	r5,20(sp)
    a83c:	1023883a 	mov	r17,r2
    a840:	a809883a 	mov	r4,r21
    a844:	00081c00 	call	81c0 <_Bfree>
    a848:	dc400515 	stw	r17,20(sp)
    a84c:	0400050e 	bge	zero,r16,a864 <_strtod_r+0x99c>
    a850:	d9400517 	ldw	r5,20(sp)
    a854:	800d883a 	mov	r6,r16
    a858:	a809883a 	mov	r4,r21
    a85c:	0008b040 	call	8b04 <__lshift>
    a860:	d8800515 	stw	r2,20(sp)
    a864:	a000741e 	bne	r20,zero,aa38 <_strtod_r+0xb70>
    a868:	0480050e 	bge	zero,r18,a880 <_strtod_r+0x9b8>
    a86c:	b80b883a 	mov	r5,r23
    a870:	900d883a 	mov	r6,r18
    a874:	a809883a 	mov	r4,r21
    a878:	0008b040 	call	8b04 <__lshift>
    a87c:	102f883a 	mov	r23,r2
    a880:	04c0050e 	bge	zero,r19,a898 <_strtod_r+0x9d0>
    a884:	b00b883a 	mov	r5,r22
    a888:	980d883a 	mov	r6,r19
    a88c:	a809883a 	mov	r4,r21
    a890:	0008b040 	call	8b04 <__lshift>
    a894:	102d883a 	mov	r22,r2
    a898:	d9400517 	ldw	r5,20(sp)
    a89c:	a809883a 	mov	r4,r21
    a8a0:	b80d883a 	mov	r6,r23
    a8a4:	00089780 	call	8978 <__mdiff>
    a8a8:	11000317 	ldw	r4,12(r2)
    a8ac:	b00b883a 	mov	r5,r22
    a8b0:	10000315 	stw	zero,12(r2)
    a8b4:	d9001315 	stw	r4,76(sp)
    a8b8:	1009883a 	mov	r4,r2
    a8bc:	1029883a 	mov	r20,r2
    a8c0:	000831c0 	call	831c <__mcmp>
    a8c4:	10017c16 	blt	r2,zero,aeb8 <_strtod_r+0xff0>
    a8c8:	1001af26 	beq	r2,zero,af88 <_strtod_r+0x10c0>
    a8cc:	a009883a 	mov	r4,r20
    a8d0:	b00b883a 	mov	r5,r22
    a8d4:	000851c0 	call	851c <__ratio>
    a8d8:	0011883a 	mov	r8,zero
    a8dc:	02500034 	movhi	r9,16384
    a8e0:	480f883a 	mov	r7,r9
    a8e4:	1009883a 	mov	r4,r2
    a8e8:	180b883a 	mov	r5,r3
    a8ec:	400d883a 	mov	r6,r8
    a8f0:	1021883a 	mov	r16,r2
    a8f4:	1823883a 	mov	r17,r3
    a8f8:	000ede00 	call	ede0 <__ledf2>
    a8fc:	00805716 	blt	zero,r2,aa5c <_strtod_r+0xb94>
    a900:	d9801317 	ldw	r6,76(sp)
    a904:	3025003a 	cmpeq	r18,r6,zero
    a908:	90008b1e 	bne	r18,zero,ab38 <_strtod_r+0xc70>
    a90c:	008ffc34 	movhi	r2,16368
    a910:	0021883a 	mov	r16,zero
    a914:	1023883a 	mov	r17,r2
    a918:	d8000715 	stw	zero,28(sp)
    a91c:	d8800815 	stw	r2,32(sp)
    a920:	e1c00117 	ldw	r7,4(fp)
    a924:	009ff834 	movhi	r2,32736
    a928:	3cdffc2c 	andhi	r19,r7,32752
    a92c:	98805e26 	beq	r19,r2,aaa8 <_strtod_r+0xbe0>
    a930:	d8801417 	ldw	r2,80(sp)
    a934:	10001b26 	beq	r2,zero,a9a4 <_strtod_r+0xadc>
    a938:	0081a834 	movhi	r2,1696
    a93c:	14c01936 	bltu	r2,r19,a9a4 <_strtod_r+0xadc>
    a940:	00bff034 	movhi	r2,65472
    a944:	00d07834 	movhi	r3,16864
    a948:	18ffffc4 	addi	r3,r3,-1
    a94c:	180f883a 	mov	r7,r3
    a950:	8009883a 	mov	r4,r16
    a954:	880b883a 	mov	r5,r17
    a958:	100d883a 	mov	r6,r2
    a95c:	000ede00 	call	ede0 <__ledf2>
    a960:	00800b16 	blt	zero,r2,a990 <_strtod_r+0xac8>
    a964:	880b883a 	mov	r5,r17
    a968:	8009883a 	mov	r4,r16
    a96c:	000d2f80 	call	d2f8 <__fixunsdfsi>
    a970:	1000df1e 	bne	r2,zero,acf0 <_strtod_r+0xe28>
    a974:	0021883a 	mov	r16,zero
    a978:	044ffc34 	movhi	r17,16368
    a97c:	9000d91e 	bne	r18,zero,ace4 <_strtod_r+0xe1c>
    a980:	8005883a 	mov	r2,r16
    a984:	8807883a 	mov	r3,r17
    a988:	d8c00815 	stw	r3,32(sp)
    a98c:	d8800715 	stw	r2,28(sp)
    a990:	d8800817 	ldw	r2,32(sp)
    a994:	00c1ac34 	movhi	r3,1712
    a998:	14c5c83a 	sub	r2,r2,r19
    a99c:	10c5883a 	add	r2,r2,r3
    a9a0:	d8800815 	stw	r2,32(sp)
    a9a4:	e0800017 	ldw	r2,0(fp)
    a9a8:	e0c00117 	ldw	r3,4(fp)
    a9ac:	1009883a 	mov	r4,r2
    a9b0:	180b883a 	mov	r5,r3
    a9b4:	000837c0 	call	837c <__ulp>
    a9b8:	d9800717 	ldw	r6,28(sp)
    a9bc:	d9c00817 	ldw	r7,32(sp)
    a9c0:	180b883a 	mov	r5,r3
    a9c4:	1009883a 	mov	r4,r2
    a9c8:	000e51c0 	call	e51c <__muldf3>
    a9cc:	e2000017 	ldw	r8,0(fp)
    a9d0:	e2400117 	ldw	r9,4(fp)
    a9d4:	180b883a 	mov	r5,r3
    a9d8:	1009883a 	mov	r4,r2
    a9dc:	480f883a 	mov	r7,r9
    a9e0:	400d883a 	mov	r6,r8
    a9e4:	000e4a80 	call	e4a8 <__adddf3>
    a9e8:	e0c00115 	stw	r3,4(fp)
    a9ec:	e0800015 	stw	r2,0(fp)
    a9f0:	d8c01417 	ldw	r3,80(sp)
    a9f4:	e4800117 	ldw	r18,4(fp)
    a9f8:	1800021e 	bne	r3,zero,aa04 <_strtod_r+0xb3c>
    a9fc:	909ffc2c 	andhi	r2,r18,32752
    aa00:	98807b26 	beq	r19,r2,abf0 <_strtod_r+0xd28>
    aa04:	d9400517 	ldw	r5,20(sp)
    aa08:	a809883a 	mov	r4,r21
    aa0c:	00081c00 	call	81c0 <_Bfree>
    aa10:	a809883a 	mov	r4,r21
    aa14:	b80b883a 	mov	r5,r23
    aa18:	00081c00 	call	81c0 <_Bfree>
    aa1c:	a809883a 	mov	r4,r21
    aa20:	b00b883a 	mov	r5,r22
    aa24:	00081c00 	call	81c0 <_Bfree>
    aa28:	a809883a 	mov	r4,r21
    aa2c:	a00b883a 	mov	r5,r20
    aa30:	00081c00 	call	81c0 <_Bfree>
    aa34:	003f3c06 	br	a728 <_strtod_r+0x860>
    aa38:	b80b883a 	mov	r5,r23
    aa3c:	a00d883a 	mov	r6,r20
    aa40:	a809883a 	mov	r4,r21
    aa44:	0008f740 	call	8f74 <__pow5mult>
    aa48:	102f883a 	mov	r23,r2
    aa4c:	003f8606 	br	a868 <_strtod_r+0x9a0>
    aa50:	00800d84 	movi	r2,54
    aa54:	114dc83a 	sub	r6,r2,r5
    aa58:	003f5f06 	br	a7d8 <_strtod_r+0x910>
    aa5c:	0005883a 	mov	r2,zero
    aa60:	00cff834 	movhi	r3,16352
    aa64:	880b883a 	mov	r5,r17
    aa68:	8009883a 	mov	r4,r16
    aa6c:	100d883a 	mov	r6,r2
    aa70:	180f883a 	mov	r7,r3
    aa74:	000e51c0 	call	e51c <__muldf3>
    aa78:	d9801317 	ldw	r6,76(sp)
    aa7c:	1021883a 	mov	r16,r2
    aa80:	1823883a 	mov	r17,r3
    aa84:	3025003a 	cmpeq	r18,r6,zero
    aa88:	90000126 	beq	r18,zero,aa90 <_strtod_r+0xbc8>
    aa8c:	18e0003c 	xorhi	r3,r3,32768
    aa90:	d8800715 	stw	r2,28(sp)
    aa94:	d8c00815 	stw	r3,32(sp)
    aa98:	e1c00117 	ldw	r7,4(fp)
    aa9c:	009ff834 	movhi	r2,32736
    aaa0:	3cdffc2c 	andhi	r19,r7,32752
    aaa4:	98bfa21e 	bne	r19,r2,a930 <_strtod_r+0xa68>
    aaa8:	e1000017 	ldw	r4,0(fp)
    aaac:	01bf2c34 	movhi	r6,64688
    aab0:	398d883a 	add	r6,r7,r6
    aab4:	d9000b15 	stw	r4,44(sp)
    aab8:	d9c00c15 	stw	r7,48(sp)
    aabc:	300b883a 	mov	r5,r6
    aac0:	e1800115 	stw	r6,4(fp)
    aac4:	000837c0 	call	837c <__ulp>
    aac8:	d9800717 	ldw	r6,28(sp)
    aacc:	d9c00817 	ldw	r7,32(sp)
    aad0:	180b883a 	mov	r5,r3
    aad4:	1009883a 	mov	r4,r2
    aad8:	000e51c0 	call	e51c <__muldf3>
    aadc:	e2000017 	ldw	r8,0(fp)
    aae0:	e2400117 	ldw	r9,4(fp)
    aae4:	180b883a 	mov	r5,r3
    aae8:	1009883a 	mov	r4,r2
    aaec:	480f883a 	mov	r7,r9
    aaf0:	400d883a 	mov	r6,r8
    aaf4:	000e4a80 	call	e4a8 <__adddf3>
    aaf8:	1009883a 	mov	r4,r2
    aafc:	180b883a 	mov	r5,r3
    ab00:	009f2834 	movhi	r2,31904
    ab04:	10bfffc4 	addi	r2,r2,-1
    ab08:	18dffc2c 	andhi	r3,r3,32752
    ab0c:	e1000015 	stw	r4,0(fp)
    ab10:	e1400115 	stw	r5,4(fp)
    ab14:	10c06f2e 	bgeu	r2,r3,acd4 <_strtod_r+0xe0c>
    ab18:	d8800c17 	ldw	r2,48(sp)
    ab1c:	011ffc34 	movhi	r4,32752
    ab20:	213fffc4 	addi	r4,r4,-1
    ab24:	11007a26 	beq	r2,r4,ad10 <_strtod_r+0xe48>
    ab28:	01ffffc4 	movi	r7,-1
    ab2c:	e1000115 	stw	r4,4(fp)
    ab30:	e1c00015 	stw	r7,0(fp)
    ab34:	003fb306 	br	aa04 <_strtod_r+0xb3c>
    ab38:	e0c00017 	ldw	r3,0(fp)
    ab3c:	1800221e 	bne	r3,zero,abc8 <_strtod_r+0xd00>
    ab40:	e0800117 	ldw	r2,4(fp)
    ab44:	00c00434 	movhi	r3,16
    ab48:	18ffffc4 	addi	r3,r3,-1
    ab4c:	10c4703a 	and	r2,r2,r3
    ab50:	1000211e 	bne	r2,zero,abd8 <_strtod_r+0xd10>
    ab54:	0005883a 	mov	r2,zero
    ab58:	00cffc34 	movhi	r3,16368
    ab5c:	180f883a 	mov	r7,r3
    ab60:	8009883a 	mov	r4,r16
    ab64:	880b883a 	mov	r5,r17
    ab68:	100d883a 	mov	r6,r2
    ab6c:	000ed580 	call	ed58 <__ltdf2>
    ab70:	10013c16 	blt	r2,zero,b064 <_strtod_r+0x119c>
    ab74:	0005883a 	mov	r2,zero
    ab78:	00cff834 	movhi	r3,16352
    ab7c:	880b883a 	mov	r5,r17
    ab80:	8009883a 	mov	r4,r16
    ab84:	180f883a 	mov	r7,r3
    ab88:	100d883a 	mov	r6,r2
    ab8c:	000e51c0 	call	e51c <__muldf3>
    ab90:	1823883a 	mov	r17,r3
    ab94:	1021883a 	mov	r16,r2
    ab98:	18e0003c 	xorhi	r3,r3,32768
    ab9c:	003fbc06 	br	aa90 <_strtod_r+0xbc8>
    aba0:	3827883a 	mov	r19,r7
    aba4:	003f1a06 	br	a810 <_strtod_r+0x948>
    aba8:	4091c83a 	sub	r8,r8,r2
    abac:	003f0206 	br	a7b8 <_strtod_r+0x8f0>
    abb0:	d8c00f17 	ldw	r3,60(sp)
    abb4:	0011883a 	mov	r8,zero
    abb8:	0029883a 	mov	r20,zero
    abbc:	00d3c83a 	sub	r9,zero,r3
    abc0:	480f883a 	mov	r7,r9
    abc4:	003ef906 	br	a7ac <_strtod_r+0x8e4>
    abc8:	00800044 	movi	r2,1
    abcc:	1880021e 	bne	r3,r2,abd8 <_strtod_r+0xd10>
    abd0:	e0800117 	ldw	r2,4(fp)
    abd4:	1000a526 	beq	r2,zero,ae6c <_strtod_r+0xfa4>
    abd8:	00affc34 	movhi	r2,49136
    abdc:	0021883a 	mov	r16,zero
    abe0:	044ffc34 	movhi	r17,16368
    abe4:	d8800815 	stw	r2,32(sp)
    abe8:	d8000715 	stw	zero,28(sp)
    abec:	003f4c06 	br	a920 <_strtod_r+0xa58>
    abf0:	880b883a 	mov	r5,r17
    abf4:	8009883a 	mov	r4,r16
    abf8:	000ef600 	call	ef60 <__fixdfsi>
    abfc:	1009883a 	mov	r4,r2
    ac00:	000ee680 	call	ee68 <__floatsidf>
    ac04:	880b883a 	mov	r5,r17
    ac08:	8009883a 	mov	r4,r16
    ac0c:	100d883a 	mov	r6,r2
    ac10:	180f883a 	mov	r7,r3
    ac14:	000e4280 	call	e428 <__subdf3>
    ac18:	d9001317 	ldw	r4,76(sp)
    ac1c:	100b883a 	mov	r5,r2
    ac20:	180d883a 	mov	r6,r3
    ac24:	1021883a 	mov	r16,r2
    ac28:	1823883a 	mov	r17,r3
    ac2c:	2000061e 	bne	r4,zero,ac48 <_strtod_r+0xd80>
    ac30:	e0800017 	ldw	r2,0(fp)
    ac34:	1000041e 	bne	r2,zero,ac48 <_strtod_r+0xd80>
    ac38:	00c00434 	movhi	r3,16
    ac3c:	18ffffc4 	addi	r3,r3,-1
    ac40:	90c4703a 	and	r2,r18,r3
    ac44:	10004026 	beq	r2,zero,ad48 <_strtod_r+0xe80>
    ac48:	00a52834 	movhi	r2,38048
    ac4c:	108d6544 	addi	r2,r2,13717
    ac50:	00cff834 	movhi	r3,16352
    ac54:	18ffffc4 	addi	r3,r3,-1
    ac58:	180f883a 	mov	r7,r3
    ac5c:	8009883a 	mov	r4,r16
    ac60:	880b883a 	mov	r5,r17
    ac64:	100d883a 	mov	r6,r2
    ac68:	000ed580 	call	ed58 <__ltdf2>
    ac6c:	10000916 	blt	r2,zero,ac94 <_strtod_r+0xdcc>
    ac70:	008d6c34 	movhi	r2,13744
    ac74:	10b94d44 	addi	r2,r2,-6859
    ac78:	00cff834 	movhi	r3,16352
    ac7c:	880b883a 	mov	r5,r17
    ac80:	180f883a 	mov	r7,r3
    ac84:	8009883a 	mov	r4,r16
    ac88:	100d883a 	mov	r6,r2
    ac8c:	000ec480 	call	ec48 <__gtdf2>
    ac90:	00bf5c0e 	bge	zero,r2,aa04 <_strtod_r+0xb3c>
    ac94:	d9400517 	ldw	r5,20(sp)
    ac98:	a809883a 	mov	r4,r21
    ac9c:	00081c00 	call	81c0 <_Bfree>
    aca0:	a809883a 	mov	r4,r21
    aca4:	b80b883a 	mov	r5,r23
    aca8:	00081c00 	call	81c0 <_Bfree>
    acac:	a809883a 	mov	r4,r21
    acb0:	b00b883a 	mov	r5,r22
    acb4:	00081c00 	call	81c0 <_Bfree>
    acb8:	d9401017 	ldw	r5,64(sp)
    acbc:	a809883a 	mov	r4,r21
    acc0:	00081c00 	call	81c0 <_Bfree>
    acc4:	a809883a 	mov	r4,r21
    acc8:	a00b883a 	mov	r5,r20
    accc:	00081c00 	call	81c0 <_Bfree>
    acd0:	003cf406 	br	a0a4 <_strtod_r+0x1dc>
    acd4:	0080d434 	movhi	r2,848
    acd8:	288d883a 	add	r6,r5,r2
    acdc:	e1800115 	stw	r6,4(fp)
    ace0:	003f4306 	br	a9f0 <_strtod_r+0xb28>
    ace4:	8005883a 	mov	r2,r16
    ace8:	88e0003c 	xorhi	r3,r17,32768
    acec:	003f2606 	br	a988 <_strtod_r+0xac0>
    acf0:	1009883a 	mov	r4,r2
    acf4:	000f0ac0 	call	f0ac <__floatunsidf>
    acf8:	1021883a 	mov	r16,r2
    acfc:	1823883a 	mov	r17,r3
    ad00:	003f1e06 	br	a97c <_strtod_r+0xab4>
    ad04:	da000417 	ldw	r8,16(sp)
    ad08:	39c00044 	addi	r7,r7,1
    ad0c:	003e6706 	br	a6ac <_strtod_r+0x7e4>
    ad10:	d8c00b17 	ldw	r3,44(sp)
    ad14:	00bfffc4 	movi	r2,-1
    ad18:	18bf831e 	bne	r3,r2,ab28 <_strtod_r+0xc60>
    ad1c:	00c00884 	movi	r3,34
    ad20:	a8c00015 	stw	r3,0(r21)
    ad24:	009ffc34 	movhi	r2,32752
    ad28:	e0800115 	stw	r2,4(fp)
    ad2c:	e0000015 	stw	zero,0(fp)
    ad30:	003fd806 	br	ac94 <_strtod_r+0xdcc>
    ad34:	4007883a 	mov	r3,r8
    ad38:	000d883a 	mov	r6,zero
    ad3c:	0029883a 	mov	r20,zero
    ad40:	0021883a 	mov	r16,zero
    ad44:	003cc906 	br	a06c <_strtod_r+0x1a4>
    ad48:	00a52834 	movhi	r2,38048
    ad4c:	108d6544 	addi	r2,r2,13717
    ad50:	00cff434 	movhi	r3,16336
    ad54:	18ffffc4 	addi	r3,r3,-1
    ad58:	2809883a 	mov	r4,r5
    ad5c:	180f883a 	mov	r7,r3
    ad60:	300b883a 	mov	r5,r6
    ad64:	100d883a 	mov	r6,r2
    ad68:	000ed580 	call	ed58 <__ltdf2>
    ad6c:	103f250e 	bge	r2,zero,aa04 <_strtod_r+0xb3c>
    ad70:	003fc806 	br	ac94 <_strtod_r+0xdcc>
    ad74:	0027883a 	mov	r19,zero
    ad78:	04800044 	movi	r18,1
    ad7c:	0015883a 	mov	r10,zero
    ad80:	003cc006 	br	a084 <_strtod_r+0x1bc>
    ad84:	00800884 	movi	r2,34
    ad88:	a8800015 	stw	r2,0(r21)
    ad8c:	019ffc34 	movhi	r6,32752
    ad90:	e1800115 	stw	r6,4(fp)
    ad94:	e0000015 	stw	zero,0(fp)
    ad98:	003cc206 	br	a0a4 <_strtod_r+0x1dc>
    ad9c:	015387c4 	movi	r5,19999
    ada0:	003d1e06 	br	a21c <_strtod_r+0x354>
    ada4:	300a90fa 	slli	r5,r6,3
    ada8:	e0800017 	ldw	r2,0(fp)
    adac:	e0c00117 	ldw	r3,4(fp)
    adb0:	01000074 	movhi	r4,1
    adb4:	2109e504 	addi	r4,r4,10132
    adb8:	290b883a 	add	r5,r5,r4
    adbc:	2a000017 	ldw	r8,0(r5)
    adc0:	2a400117 	ldw	r9,4(r5)
    adc4:	1009883a 	mov	r4,r2
    adc8:	180b883a 	mov	r5,r3
    adcc:	480f883a 	mov	r7,r9
    add0:	400d883a 	mov	r6,r8
    add4:	000e51c0 	call	e51c <__muldf3>
    add8:	e0c00115 	stw	r3,4(fp)
    addc:	e0800015 	stw	r2,0(fp)
    ade0:	003cb006 	br	a0a4 <_strtod_r+0x1dc>
    ade4:	d8800d17 	ldw	r2,52(sp)
    ade8:	e0800015 	stw	r2,0(fp)
    adec:	d8c00e17 	ldw	r3,56(sp)
    adf0:	e0c00115 	stw	r3,4(fp)
    adf4:	9880020c 	andi	r2,r19,8
    adf8:	103caa26 	beq	r2,zero,a0a4 <_strtod_r+0x1dc>
    adfc:	e0800117 	ldw	r2,4(fp)
    ae00:	10a00034 	orhi	r2,r2,32768
    ae04:	e0800115 	stw	r2,4(fp)
    ae08:	003ca606 	br	a0a4 <_strtod_r+0x1dc>
    ae0c:	009ffc34 	movhi	r2,32752
    ae10:	e0800115 	stw	r2,4(fp)
    ae14:	e0000015 	stw	zero,0(fp)
    ae18:	003ff606 	br	adf4 <_strtod_r+0xf2c>
    ae1c:	00a00034 	movhi	r2,32768
    ae20:	10bfffc4 	addi	r2,r2,-1
    ae24:	00ffffc4 	movi	r3,-1
    ae28:	e0800115 	stw	r2,4(fp)
    ae2c:	e0c00015 	stw	r3,0(fp)
    ae30:	003ff006 	br	adf4 <_strtod_r+0xf2c>
    ae34:	e0000115 	stw	zero,4(fp)
    ae38:	e0000015 	stw	zero,0(fp)
    ae3c:	003fed06 	br	adf4 <_strtod_r+0xf2c>
    ae40:	d8800e17 	ldw	r2,56(sp)
    ae44:	29010cc4 	addi	r4,r5,1075
    ae48:	00fffc34 	movhi	r3,65520
    ae4c:	18ffffc4 	addi	r3,r3,-1
    ae50:	2008953a 	slli	r4,r4,20
    ae54:	10c4703a 	and	r2,r2,r3
    ae58:	d8c00d17 	ldw	r3,52(sp)
    ae5c:	1104b03a 	or	r2,r2,r4
    ae60:	e0800115 	stw	r2,4(fp)
    ae64:	e0c00015 	stw	r3,0(fp)
    ae68:	003fe206 	br	adf4 <_strtod_r+0xf2c>
    ae6c:	00800884 	movi	r2,34
    ae70:	a8800015 	stw	r2,0(r21)
    ae74:	e0000015 	stw	zero,0(fp)
    ae78:	e0000115 	stw	zero,4(fp)
    ae7c:	003f8506 	br	ac94 <_strtod_r+0xdcc>
    ae80:	03800044 	movi	r14,1
    ae84:	003d7706 	br	a464 <_strtod_r+0x59c>
    ae88:	99c5883a 	add	r2,r19,r7
    ae8c:	11ffffc4 	addi	r7,r2,-1
    ae90:	00800204 	movi	r2,8
    ae94:	3cc00044 	addi	r19,r7,1
    ae98:	11c0df16 	blt	r2,r7,b218 <_strtod_r+0x1350>
    ae9c:	a08002a4 	muli	r2,r20,10
    aea0:	000f883a 	mov	r7,zero
    aea4:	1269883a 	add	r20,r2,r9
    aea8:	42000044 	addi	r8,r8,1
    aeac:	da000415 	stw	r8,16(sp)
    aeb0:	41000007 	ldb	r4,0(r8)
    aeb4:	003d3706 	br	a394 <_strtod_r+0x4cc>
    aeb8:	d9801317 	ldw	r6,76(sp)
    aebc:	3000511e 	bne	r6,zero,b004 <_strtod_r+0x113c>
    aec0:	e0800017 	ldw	r2,0(fp)
    aec4:	1000d81e 	bne	r2,zero,b228 <_strtod_r+0x1360>
    aec8:	e0c00117 	ldw	r3,4(fp)
    aecc:	01000434 	movhi	r4,16
    aed0:	213fffc4 	addi	r4,r4,-1
    aed4:	1904703a 	and	r2,r3,r4
    aed8:	1000b01e 	bne	r2,zero,b19c <_strtod_r+0x12d4>
    aedc:	18dffc2c 	andhi	r3,r3,32752
    aee0:	0081ac34 	movhi	r2,1712
    aee4:	10c1102e 	bgeu	r2,r3,b328 <_strtod_r+0x1460>
    aee8:	a0800517 	ldw	r2,20(r20)
    aeec:	1000031e 	bne	r2,zero,aefc <_strtod_r+0x1034>
    aef0:	a0c00417 	ldw	r3,16(r20)
    aef4:	00800044 	movi	r2,1
    aef8:	10c0420e 	bge	r2,r3,b004 <_strtod_r+0x113c>
    aefc:	a00b883a 	mov	r5,r20
    af00:	a809883a 	mov	r4,r21
    af04:	01800044 	movi	r6,1
    af08:	0008b040 	call	8b04 <__lshift>
    af0c:	1009883a 	mov	r4,r2
    af10:	b00b883a 	mov	r5,r22
    af14:	1029883a 	mov	r20,r2
    af18:	000831c0 	call	831c <__mcmp>
    af1c:	0080c20e 	bge	zero,r2,b228 <_strtod_r+0x1360>
    af20:	e1800117 	ldw	r6,4(fp)
    af24:	d9001417 	ldw	r4,80(sp)
    af28:	2013003a 	cmpeq	r9,r4,zero
    af2c:	4800ef1e 	bne	r9,zero,b2ec <_strtod_r+0x1424>
    af30:	30dffc2c 	andhi	r3,r6,32752
    af34:	0081ac34 	movhi	r2,1712
    af38:	10c0ec36 	bltu	r2,r3,b2ec <_strtod_r+0x1424>
    af3c:	0080dc34 	movhi	r2,880
    af40:	10ffca2e 	bgeu	r2,r3,ae6c <_strtod_r+0xfa4>
    af44:	e0800017 	ldw	r2,0(fp)
    af48:	e0c00117 	ldw	r3,4(fp)
    af4c:	020e5434 	movhi	r8,14672
    af50:	000d883a 	mov	r6,zero
    af54:	400f883a 	mov	r7,r8
    af58:	180b883a 	mov	r5,r3
    af5c:	1009883a 	mov	r4,r2
    af60:	da000c15 	stw	r8,48(sp)
    af64:	d8000b15 	stw	zero,44(sp)
    af68:	000e51c0 	call	e51c <__muldf3>
    af6c:	e0800015 	stw	r2,0(fp)
    af70:	e0c00115 	stw	r3,4(fp)
    af74:	183f471e 	bne	r3,zero,ac94 <_strtod_r+0xdcc>
    af78:	103f461e 	bne	r2,zero,ac94 <_strtod_r+0xdcc>
    af7c:	00800884 	movi	r2,34
    af80:	a8800015 	stw	r2,0(r21)
    af84:	003f4306 	br	ac94 <_strtod_r+0xdcc>
    af88:	d8801317 	ldw	r2,76(sp)
    af8c:	1025003a 	cmpeq	r18,r2,zero
    af90:	9000861e 	bne	r18,zero,b1ac <_strtod_r+0x12e4>
    af94:	e1400117 	ldw	r5,4(fp)
    af98:	00c00434 	movhi	r3,16
    af9c:	18ffffc4 	addi	r3,r3,-1
    afa0:	28c4703a 	and	r2,r5,r3
    afa4:	10c01b26 	beq	r2,r3,b014 <_strtod_r+0x114c>
    afa8:	e1c00017 	ldw	r7,0(fp)
    afac:	3880004c 	andi	r2,r7,1
    afb0:	1005003a 	cmpeq	r2,r2,zero
    afb4:	1000791e 	bne	r2,zero,b19c <_strtod_r+0x12d4>
    afb8:	9000b126 	beq	r18,zero,b280 <_strtod_r+0x13b8>
    afbc:	e4400117 	ldw	r17,4(fp)
    afc0:	3809883a 	mov	r4,r7
    afc4:	3821883a 	mov	r16,r7
    afc8:	880b883a 	mov	r5,r17
    afcc:	000837c0 	call	837c <__ulp>
    afd0:	180f883a 	mov	r7,r3
    afd4:	880b883a 	mov	r5,r17
    afd8:	8009883a 	mov	r4,r16
    afdc:	100d883a 	mov	r6,r2
    afe0:	000e4280 	call	e428 <__subdf3>
    afe4:	1009883a 	mov	r4,r2
    afe8:	000d883a 	mov	r6,zero
    afec:	000f883a 	mov	r7,zero
    aff0:	180b883a 	mov	r5,r3
    aff4:	e0800015 	stw	r2,0(fp)
    aff8:	e0c00115 	stw	r3,4(fp)
    affc:	000ebc00 	call	ebc0 <__nedf2>
    b000:	103f9a26 	beq	r2,zero,ae6c <_strtod_r+0xfa4>
    b004:	d9001417 	ldw	r4,80(sp)
    b008:	2013003a 	cmpeq	r9,r4,zero
    b00c:	483f211e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b010:	003fcc06 	br	af44 <_strtod_r+0x107c>
    b014:	d9001417 	ldw	r4,80(sp)
    b018:	e1c00017 	ldw	r7,0(fp)
    b01c:	2013003a 	cmpeq	r9,r4,zero
    b020:	4800bd1e 	bne	r9,zero,b318 <_strtod_r+0x1450>
    b024:	28dffc2c 	andhi	r3,r5,32752
    b028:	0081a834 	movhi	r2,1696
    b02c:	10c0ba36 	bltu	r2,r3,b318 <_strtod_r+0x1450>
    b030:	1804d53a 	srli	r2,r3,20
    b034:	00c01ac4 	movi	r3,107
    b038:	013fffc4 	movi	r4,-1
    b03c:	1887c83a 	sub	r3,r3,r2
    b040:	20c4983a 	sll	r2,r4,r3
    b044:	11ffd91e 	bne	r2,r7,afac <_strtod_r+0x10e4>
    b048:	28dffc2c 	andhi	r3,r5,32752
    b04c:	00800434 	movhi	r2,16
    b050:	188d883a 	add	r6,r3,r2
    b054:	e1800115 	stw	r6,4(fp)
    b058:	e0000015 	stw	zero,0(fp)
    b05c:	483f0d1e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b060:	003fb806 	br	af44 <_strtod_r+0x107c>
    b064:	0021883a 	mov	r16,zero
    b068:	0005883a 	mov	r2,zero
    b06c:	044ff834 	movhi	r17,16352
    b070:	00eff834 	movhi	r3,49120
    b074:	003e8606 	br	aa90 <_strtod_r+0xbc8>
    b078:	803d9e26 	beq	r16,zero,a6f4 <_strtod_r+0x82c>
    b07c:	0421c83a 	sub	r16,zero,r16
    b080:	814003cc 	andi	r5,r16,15
    b084:	28000f26 	beq	r5,zero,b0c4 <_strtod_r+0x11fc>
    b088:	280a90fa 	slli	r5,r5,3
    b08c:	01000074 	movhi	r4,1
    b090:	2109e504 	addi	r4,r4,10132
    b094:	e0800017 	ldw	r2,0(fp)
    b098:	290b883a 	add	r5,r5,r4
    b09c:	2a000017 	ldw	r8,0(r5)
    b0a0:	e0c00117 	ldw	r3,4(fp)
    b0a4:	2a400117 	ldw	r9,4(r5)
    b0a8:	1009883a 	mov	r4,r2
    b0ac:	180b883a 	mov	r5,r3
    b0b0:	480f883a 	mov	r7,r9
    b0b4:	400d883a 	mov	r6,r8
    b0b8:	000e8e00 	call	e8e0 <__divdf3>
    b0bc:	e0c00115 	stw	r3,4(fp)
    b0c0:	e0800015 	stw	r2,0(fp)
    b0c4:	8021d13a 	srai	r16,r16,4
    b0c8:	803d8a26 	beq	r16,zero,a6f4 <_strtod_r+0x82c>
    b0cc:	008007c4 	movi	r2,31
    b0d0:	14002d16 	blt	r2,r16,b188 <_strtod_r+0x12c0>
    b0d4:	8080040c 	andi	r2,r16,16
    b0d8:	10009926 	beq	r2,zero,b340 <_strtod_r+0x1478>
    b0dc:	00801a84 	movi	r2,106
    b0e0:	d8801415 	stw	r2,80(sp)
    b0e4:	0400110e 	bge	zero,r16,b12c <_strtod_r+0x1264>
    b0e8:	04400074 	movhi	r17,1
    b0ec:	8c4a3204 	addi	r17,r17,10440
    b0f0:	8080004c 	andi	r2,r16,1
    b0f4:	1005003a 	cmpeq	r2,r2,zero
    b0f8:	1000091e 	bne	r2,zero,b120 <_strtod_r+0x1258>
    b0fc:	e0800017 	ldw	r2,0(fp)
    b100:	e0c00117 	ldw	r3,4(fp)
    b104:	89800017 	ldw	r6,0(r17)
    b108:	89c00117 	ldw	r7,4(r17)
    b10c:	180b883a 	mov	r5,r3
    b110:	1009883a 	mov	r4,r2
    b114:	000e51c0 	call	e51c <__muldf3>
    b118:	e0c00115 	stw	r3,4(fp)
    b11c:	e0800015 	stw	r2,0(fp)
    b120:	8021d07a 	srai	r16,r16,1
    b124:	8c400204 	addi	r17,r17,8
    b128:	043ff116 	blt	zero,r16,b0f0 <_strtod_r+0x1228>
    b12c:	d8c01417 	ldw	r3,80(sp)
    b130:	18000d26 	beq	r3,zero,b168 <_strtod_r+0x12a0>
    b134:	e1000117 	ldw	r4,4(fp)
    b138:	00c01ac4 	movi	r3,107
    b13c:	209ffc2c 	andhi	r2,r4,32752
    b140:	1004d53a 	srli	r2,r2,20
    b144:	1887c83a 	sub	r3,r3,r2
    b148:	00c0070e 	bge	zero,r3,b168 <_strtod_r+0x12a0>
    b14c:	008007c4 	movi	r2,31
    b150:	10c0900e 	bge	r2,r3,b394 <_strtod_r+0x14cc>
    b154:	00800d04 	movi	r2,52
    b158:	e0000015 	stw	zero,0(fp)
    b15c:	10c0870e 	bge	r2,r3,b37c <_strtod_r+0x14b4>
    b160:	0180dc34 	movhi	r6,880
    b164:	e1800115 	stw	r6,4(fp)
    b168:	e0800017 	ldw	r2,0(fp)
    b16c:	e0c00117 	ldw	r3,4(fp)
    b170:	000d883a 	mov	r6,zero
    b174:	000f883a 	mov	r7,zero
    b178:	180b883a 	mov	r5,r3
    b17c:	1009883a 	mov	r4,r2
    b180:	000ebc00 	call	ebc0 <__nedf2>
    b184:	103d5c1e 	bne	r2,zero,a6f8 <_strtod_r+0x830>
    b188:	00800884 	movi	r2,34
    b18c:	a8800015 	stw	r2,0(r21)
    b190:	e0000015 	stw	zero,0(fp)
    b194:	e0000115 	stw	zero,4(fp)
    b198:	003bc206 	br	a0a4 <_strtod_r+0x1dc>
    b19c:	d8801417 	ldw	r2,80(sp)
    b1a0:	1013003a 	cmpeq	r9,r2,zero
    b1a4:	483ebb1e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b1a8:	003f6606 	br	af44 <_strtod_r+0x107c>
    b1ac:	e1800117 	ldw	r6,4(fp)
    b1b0:	00c00434 	movhi	r3,16
    b1b4:	18ffffc4 	addi	r3,r3,-1
    b1b8:	30c4703a 	and	r2,r6,r3
    b1bc:	103f7a1e 	bne	r2,zero,afa8 <_strtod_r+0x10e0>
    b1c0:	e1c00017 	ldw	r7,0(fp)
    b1c4:	383f791e 	bne	r7,zero,afac <_strtod_r+0x10e4>
    b1c8:	003f5606 	br	af24 <_strtod_r+0x105c>
    b1cc:	d9800f17 	ldw	r6,60(sp)
    b1d0:	00bffa84 	movi	r2,-22
    b1d4:	30bcd416 	blt	r6,r2,a528 <_strtod_r+0x660>
    b1d8:	317ffe24 	muli	r5,r6,-8
    b1dc:	01000074 	movhi	r4,1
    b1e0:	2109e504 	addi	r4,r4,10132
    b1e4:	e0800017 	ldw	r2,0(fp)
    b1e8:	290b883a 	add	r5,r5,r4
    b1ec:	2a000017 	ldw	r8,0(r5)
    b1f0:	e0c00117 	ldw	r3,4(fp)
    b1f4:	2a400117 	ldw	r9,4(r5)
    b1f8:	1009883a 	mov	r4,r2
    b1fc:	180b883a 	mov	r5,r3
    b200:	480f883a 	mov	r7,r9
    b204:	400d883a 	mov	r6,r8
    b208:	000e8e00 	call	e8e0 <__divdf3>
    b20c:	e0c00115 	stw	r3,4(fp)
    b210:	e0800015 	stw	r2,0(fp)
    b214:	003ba306 	br	a0a4 <_strtod_r+0x1dc>
    b218:	00800404 	movi	r2,16
    b21c:	14c02f0e 	bge	r2,r19,b2dc <_strtod_r+0x1414>
    b220:	000f883a 	mov	r7,zero
    b224:	003f2006 	br	aea8 <_strtod_r+0xfe0>
    b228:	d9801417 	ldw	r6,80(sp)
    b22c:	3013003a 	cmpeq	r9,r6,zero
    b230:	483e981e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b234:	003f4306 	br	af44 <_strtod_r+0x107c>
    b238:	00801a44 	movi	r2,105
    b23c:	20bc6326 	beq	r4,r2,a3cc <_strtod_r+0x504>
    b240:	00801b84 	movi	r2,110
    b244:	20bbba1e 	bne	r4,r2,a130 <_strtod_r+0x268>
    b248:	dc000404 	addi	r16,sp,16
    b24c:	8009883a 	mov	r4,r16
    b250:	01400074 	movhi	r5,1
    b254:	294a3104 	addi	r5,r5,10436
    b258:	0009e800 	call	9e80 <match>
    b25c:	103bb426 	beq	r2,zero,a130 <_strtod_r+0x268>
    b260:	d8800417 	ldw	r2,16(sp)
    b264:	00c00a04 	movi	r3,40
    b268:	11000007 	ldb	r4,0(r2)
    b26c:	20c03626 	beq	r4,r3,b348 <_strtod_r+0x1480>
    b270:	01bffe34 	movhi	r6,65528
    b274:	e1800115 	stw	r6,4(fp)
    b278:	e0000015 	stw	zero,0(fp)
    b27c:	003b8906 	br	a0a4 <_strtod_r+0x1dc>
    b280:	e4400117 	ldw	r17,4(fp)
    b284:	3809883a 	mov	r4,r7
    b288:	3821883a 	mov	r16,r7
    b28c:	880b883a 	mov	r5,r17
    b290:	000837c0 	call	837c <__ulp>
    b294:	100d883a 	mov	r6,r2
    b298:	880b883a 	mov	r5,r17
    b29c:	180f883a 	mov	r7,r3
    b2a0:	8009883a 	mov	r4,r16
    b2a4:	000e4a80 	call	e4a8 <__adddf3>
    b2a8:	d9801417 	ldw	r6,80(sp)
    b2ac:	e0c00115 	stw	r3,4(fp)
    b2b0:	e0800015 	stw	r2,0(fp)
    b2b4:	3013003a 	cmpeq	r9,r6,zero
    b2b8:	483e761e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b2bc:	003f2106 	br	af44 <_strtod_r+0x107c>
    b2c0:	000f883a 	mov	r7,zero
    b2c4:	003cf006 	br	a688 <_strtod_r+0x7c0>
    b2c8:	0080d434 	movhi	r2,848
    b2cc:	188d883a 	add	r6,r3,r2
    b2d0:	d8001415 	stw	zero,80(sp)
    b2d4:	e1800115 	stw	r6,4(fp)
    b2d8:	003d0706 	br	a6f8 <_strtod_r+0x830>
    b2dc:	808002a4 	muli	r2,r16,10
    b2e0:	000f883a 	mov	r7,zero
    b2e4:	1261883a 	add	r16,r2,r9
    b2e8:	003eef06 	br	aea8 <_strtod_r+0xfe0>
    b2ec:	309ffc2c 	andhi	r2,r6,32752
    b2f0:	00fffc34 	movhi	r3,65520
    b2f4:	10c5883a 	add	r2,r2,r3
    b2f8:	00c00434 	movhi	r3,16
    b2fc:	18ffffc4 	addi	r3,r3,-1
    b300:	10ccb03a 	or	r6,r2,r3
    b304:	01ffffc4 	movi	r7,-1
    b308:	e1800115 	stw	r6,4(fp)
    b30c:	e1c00015 	stw	r7,0(fp)
    b310:	483e601e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b314:	003f0b06 	br	af44 <_strtod_r+0x107c>
    b318:	00bfffc4 	movi	r2,-1
    b31c:	003f4906 	br	b044 <_strtod_r+0x117c>
    b320:	0025883a 	mov	r18,zero
    b324:	003cb106 	br	a5ec <_strtod_r+0x724>
    b328:	d8c01417 	ldw	r3,80(sp)
    b32c:	1813003a 	cmpeq	r9,r3,zero
    b330:	483e581e 	bne	r9,zero,ac94 <_strtod_r+0xdcc>
    b334:	003f0306 	br	af44 <_strtod_r+0x107c>
    b338:	980f883a 	mov	r7,r19
    b33c:	003ed406 	br	ae90 <_strtod_r+0xfc8>
    b340:	d8001415 	stw	zero,80(sp)
    b344:	003f6706 	br	b0e4 <_strtod_r+0x121c>
    b348:	8009883a 	mov	r4,r16
    b34c:	01400074 	movhi	r5,1
    b350:	294c7d04 	addi	r5,r5,12788
    b354:	d9800d04 	addi	r6,sp,52
    b358:	000ceb80 	call	ceb8 <__hexnan>
    b35c:	00c00144 	movi	r3,5
    b360:	10ffc31e 	bne	r2,r3,b270 <_strtod_r+0x13a8>
    b364:	d8800e17 	ldw	r2,56(sp)
    b368:	d9c00d17 	ldw	r7,52(sp)
    b36c:	119ffc34 	orhi	r6,r2,32752
    b370:	e1800115 	stw	r6,4(fp)
    b374:	e1c00015 	stw	r7,0(fp)
    b378:	003b4a06 	br	a0a4 <_strtod_r+0x1dc>
    b37c:	18fff804 	addi	r3,r3,-32
    b380:	00bfffc4 	movi	r2,-1
    b384:	10c4983a 	sll	r2,r2,r3
    b388:	208c703a 	and	r6,r4,r2
    b38c:	e1800115 	stw	r6,4(fp)
    b390:	003f7506 	br	b168 <_strtod_r+0x12a0>
    b394:	00bfffc4 	movi	r2,-1
    b398:	10c4983a 	sll	r2,r2,r3
    b39c:	e0c00017 	ldw	r3,0(fp)
    b3a0:	188e703a 	and	r7,r3,r2
    b3a4:	e1c00015 	stw	r7,0(fp)
    b3a8:	003f6f06 	br	b168 <_strtod_r+0x12a0>

0000b3ac <strtof>:
    b3ac:	defffa04 	addi	sp,sp,-24
    b3b0:	dd000415 	stw	r20,16(sp)
    b3b4:	05000074 	movhi	r20,1
    b3b8:	a5117404 	addi	r20,r20,17872
    b3bc:	2007883a 	mov	r3,r4
    b3c0:	a1000017 	ldw	r4,0(r20)
    b3c4:	280d883a 	mov	r6,r5
    b3c8:	180b883a 	mov	r5,r3
    b3cc:	dfc00515 	stw	ra,20(sp)
    b3d0:	dcc00315 	stw	r19,12(sp)
    b3d4:	dc800215 	stw	r18,8(sp)
    b3d8:	dc400115 	stw	r17,4(sp)
    b3dc:	dc000015 	stw	r16,0(sp)
    b3e0:	0009ec80 	call	9ec8 <_strtod_r>
    b3e4:	180b883a 	mov	r5,r3
    b3e8:	1009883a 	mov	r4,r2
    b3ec:	1823883a 	mov	r17,r3
    b3f0:	1021883a 	mov	r16,r2
    b3f4:	000f0380 	call	f038 <__truncdfsf2>
    b3f8:	1009883a 	mov	r4,r2
    b3fc:	000b883a 	mov	r5,zero
    b400:	1025883a 	mov	r18,r2
    b404:	1027883a 	mov	r19,r2
    b408:	000df280 	call	df28 <__nesf2>
    b40c:	000d883a 	mov	r6,zero
    b410:	000f883a 	mov	r7,zero
    b414:	8009883a 	mov	r4,r16
    b418:	880b883a 	mov	r5,r17
    b41c:	10000e1e 	bne	r2,zero,b458 <strtof+0xac>
    b420:	000ebc00 	call	ebc0 <__nedf2>
    b424:	10000c26 	beq	r2,zero,b458 <strtof+0xac>
    b428:	a0c00017 	ldw	r3,0(r20)
    b42c:	00800884 	movi	r2,34
    b430:	18800015 	stw	r2,0(r3)
    b434:	9805883a 	mov	r2,r19
    b438:	dfc00517 	ldw	ra,20(sp)
    b43c:	dd000417 	ldw	r20,16(sp)
    b440:	dcc00317 	ldw	r19,12(sp)
    b444:	dc800217 	ldw	r18,8(sp)
    b448:	dc400117 	ldw	r17,4(sp)
    b44c:	dc000017 	ldw	r16,0(sp)
    b450:	dec00604 	addi	sp,sp,24
    b454:	f800283a 	ret
    b458:	9009883a 	mov	r4,r18
    b45c:	015fe034 	movhi	r5,32640
    b460:	297fffc4 	addi	r5,r5,-1
    b464:	000dfa00 	call	dfa0 <__gtsf2>
    b468:	00ffffc4 	movi	r3,-1
    b46c:	011ffc34 	movhi	r4,32752
    b470:	213fffc4 	addi	r4,r4,-1
    b474:	200f883a 	mov	r7,r4
    b478:	180d883a 	mov	r6,r3
    b47c:	8009883a 	mov	r4,r16
    b480:	880b883a 	mov	r5,r17
    b484:	00800f16 	blt	zero,r2,b4c4 <strtof+0x118>
    b488:	9009883a 	mov	r4,r18
    b48c:	017fe034 	movhi	r5,65408
    b490:	297fffc4 	addi	r5,r5,-1
    b494:	00009d40 	call	9d4 <__ltsf2>
    b498:	023fffc4 	movi	r8,-1
    b49c:	027ffc34 	movhi	r9,65520
    b4a0:	4a7fffc4 	addi	r9,r9,-1
    b4a4:	880b883a 	mov	r5,r17
    b4a8:	480f883a 	mov	r7,r9
    b4ac:	8009883a 	mov	r4,r16
    b4b0:	400d883a 	mov	r6,r8
    b4b4:	103fdf0e 	bge	r2,zero,b434 <strtof+0x88>
    b4b8:	000ed580 	call	ed58 <__ltdf2>
    b4bc:	103fda0e 	bge	r2,zero,b428 <strtof+0x7c>
    b4c0:	003fdc06 	br	b434 <strtof+0x88>
    b4c4:	000ec480 	call	ec48 <__gtdf2>
    b4c8:	00bfd70e 	bge	zero,r2,b428 <strtof+0x7c>
    b4cc:	003fee06 	br	b488 <strtof+0xdc>

0000b4d0 <strtod>:
    b4d0:	01800074 	movhi	r6,1
    b4d4:	31917404 	addi	r6,r6,17872
    b4d8:	2007883a 	mov	r3,r4
    b4dc:	31000017 	ldw	r4,0(r6)
    b4e0:	280d883a 	mov	r6,r5
    b4e4:	180b883a 	mov	r5,r3
    b4e8:	0009ec81 	jmpi	9ec8 <_strtod_r>

0000b4ec <_strtol_r>:
    b4ec:	defff304 	addi	sp,sp,-52
    b4f0:	00800074 	movhi	r2,1
    b4f4:	10917304 	addi	r2,r2,17868
    b4f8:	dcc00615 	stw	r19,24(sp)
    b4fc:	14c00017 	ldw	r19,0(r2)
    b500:	ddc00a15 	stw	r23,40(sp)
    b504:	dc000315 	stw	r16,12(sp)
    b508:	dfc00c15 	stw	ra,48(sp)
    b50c:	df000b15 	stw	fp,44(sp)
    b510:	dd800915 	stw	r22,36(sp)
    b514:	dd400815 	stw	r21,32(sp)
    b518:	dd000715 	stw	r20,28(sp)
    b51c:	dc800515 	stw	r18,20(sp)
    b520:	dc400415 	stw	r17,16(sp)
    b524:	282f883a 	mov	r23,r5
    b528:	d9000015 	stw	r4,0(sp)
    b52c:	d9800115 	stw	r6,4(sp)
    b530:	2821883a 	mov	r16,r5
    b534:	84400007 	ldb	r17,0(r16)
    b538:	84000044 	addi	r16,r16,1
    b53c:	9c47883a 	add	r3,r19,r17
    b540:	18800003 	ldbu	r2,0(r3)
    b544:	1080020c 	andi	r2,r2,8
    b548:	103ffa1e 	bne	r2,zero,b534 <_strtol_r+0x48>
    b54c:	00800b44 	movi	r2,45
    b550:	88805c26 	beq	r17,r2,b6c4 <_strtol_r+0x1d8>
    b554:	00800ac4 	movi	r2,43
    b558:	88805726 	beq	r17,r2,b6b8 <_strtol_r+0x1cc>
    b55c:	0039883a 	mov	fp,zero
    b560:	3807003a 	cmpeq	r3,r7,zero
    b564:	1800431e 	bne	r3,zero,b674 <_strtol_r+0x188>
    b568:	00800404 	movi	r2,16
    b56c:	38804126 	beq	r7,r2,b674 <_strtol_r+0x188>
    b570:	3829883a 	mov	r20,r7
    b574:	e02cc03a 	cmpne	r22,fp,zero
    b578:	b0004b1e 	bne	r22,zero,b6a8 <_strtol_r+0x1bc>
    b57c:	04a00034 	movhi	r18,32768
    b580:	94bfffc4 	addi	r18,r18,-1
    b584:	9009883a 	mov	r4,r18
    b588:	a00b883a 	mov	r5,r20
    b58c:	d9c00215 	stw	r7,8(sp)
    b590:	000f3840 	call	f384 <__umodsi3>
    b594:	9009883a 	mov	r4,r18
    b598:	a00b883a 	mov	r5,r20
    b59c:	102b883a 	mov	r21,r2
    b5a0:	000f37c0 	call	f37c <__udivsi3>
    b5a4:	1011883a 	mov	r8,r2
    b5a8:	9c45883a 	add	r2,r19,r17
    b5ac:	11000003 	ldbu	r4,0(r2)
    b5b0:	000b883a 	mov	r5,zero
    b5b4:	000d883a 	mov	r6,zero
    b5b8:	20c0010c 	andi	r3,r4,4
    b5bc:	d9c00217 	ldw	r7,8(sp)
    b5c0:	18000e26 	beq	r3,zero,b5fc <_strtol_r+0x110>
    b5c4:	88fff404 	addi	r3,r17,-48
    b5c8:	19c0140e 	bge	r3,r7,b61c <_strtol_r+0x130>
    b5cc:	30003116 	blt	r6,zero,b694 <_strtol_r+0x1a8>
    b5d0:	41403036 	bltu	r8,r5,b694 <_strtol_r+0x1a8>
    b5d4:	2a002e26 	beq	r5,r8,b690 <_strtol_r+0x1a4>
    b5d8:	2d05383a 	mul	r2,r5,r20
    b5dc:	01800044 	movi	r6,1
    b5e0:	10cb883a 	add	r5,r2,r3
    b5e4:	84400007 	ldb	r17,0(r16)
    b5e8:	84000044 	addi	r16,r16,1
    b5ec:	9c45883a 	add	r2,r19,r17
    b5f0:	11000003 	ldbu	r4,0(r2)
    b5f4:	20c0010c 	andi	r3,r4,4
    b5f8:	183ff21e 	bne	r3,zero,b5c4 <_strtol_r+0xd8>
    b5fc:	208000cc 	andi	r2,r4,3
    b600:	10000626 	beq	r2,zero,b61c <_strtol_r+0x130>
    b604:	2080004c 	andi	r2,r4,1
    b608:	1005003a 	cmpeq	r2,r2,zero
    b60c:	1000231e 	bne	r2,zero,b69c <_strtol_r+0x1b0>
    b610:	00800dc4 	movi	r2,55
    b614:	8887c83a 	sub	r3,r17,r2
    b618:	19ffec16 	blt	r3,r7,b5cc <_strtol_r+0xe0>
    b61c:	30002d16 	blt	r6,zero,b6d4 <_strtol_r+0x1e8>
    b620:	b000231e 	bne	r22,zero,b6b0 <_strtol_r+0x1c4>
    b624:	2807883a 	mov	r3,r5
    b628:	d8800117 	ldw	r2,4(sp)
    b62c:	10000426 	beq	r2,zero,b640 <_strtol_r+0x154>
    b630:	30000126 	beq	r6,zero,b638 <_strtol_r+0x14c>
    b634:	85ffffc4 	addi	r23,r16,-1
    b638:	d9000117 	ldw	r4,4(sp)
    b63c:	25c00015 	stw	r23,0(r4)
    b640:	1805883a 	mov	r2,r3
    b644:	dfc00c17 	ldw	ra,48(sp)
    b648:	df000b17 	ldw	fp,44(sp)
    b64c:	ddc00a17 	ldw	r23,40(sp)
    b650:	dd800917 	ldw	r22,36(sp)
    b654:	dd400817 	ldw	r21,32(sp)
    b658:	dd000717 	ldw	r20,28(sp)
    b65c:	dcc00617 	ldw	r19,24(sp)
    b660:	dc800517 	ldw	r18,20(sp)
    b664:	dc400417 	ldw	r17,16(sp)
    b668:	dc000317 	ldw	r16,12(sp)
    b66c:	dec00d04 	addi	sp,sp,52
    b670:	f800283a 	ret
    b674:	00800c04 	movi	r2,48
    b678:	88801d26 	beq	r17,r2,b6f0 <_strtol_r+0x204>
    b67c:	183fbc26 	beq	r3,zero,b570 <_strtol_r+0x84>
    b680:	00800c04 	movi	r2,48
    b684:	88802726 	beq	r17,r2,b724 <_strtol_r+0x238>
    b688:	01c00284 	movi	r7,10
    b68c:	003fb806 	br	b570 <_strtol_r+0x84>
    b690:	a8ffd10e 	bge	r21,r3,b5d8 <_strtol_r+0xec>
    b694:	01bfffc4 	movi	r6,-1
    b698:	003fd206 	br	b5e4 <_strtol_r+0xf8>
    b69c:	008015c4 	movi	r2,87
    b6a0:	8887c83a 	sub	r3,r17,r2
    b6a4:	003fdc06 	br	b618 <_strtol_r+0x12c>
    b6a8:	04a00034 	movhi	r18,32768
    b6ac:	003fb506 	br	b584 <_strtol_r+0x98>
    b6b0:	0147c83a 	sub	r3,zero,r5
    b6b4:	003fdc06 	br	b628 <_strtol_r+0x13c>
    b6b8:	84400007 	ldb	r17,0(r16)
    b6bc:	84000044 	addi	r16,r16,1
    b6c0:	003fa606 	br	b55c <_strtol_r+0x70>
    b6c4:	84400007 	ldb	r17,0(r16)
    b6c8:	07000044 	movi	fp,1
    b6cc:	84000044 	addi	r16,r16,1
    b6d0:	003fa306 	br	b560 <_strtol_r+0x74>
    b6d4:	e005003a 	cmpeq	r2,fp,zero
    b6d8:	10000f1e 	bne	r2,zero,b718 <_strtol_r+0x22c>
    b6dc:	00e00034 	movhi	r3,32768
    b6e0:	d9000017 	ldw	r4,0(sp)
    b6e4:	00800884 	movi	r2,34
    b6e8:	20800015 	stw	r2,0(r4)
    b6ec:	003fce06 	br	b628 <_strtol_r+0x13c>
    b6f0:	81000007 	ldb	r4,0(r16)
    b6f4:	00801e04 	movi	r2,120
    b6f8:	20800226 	beq	r4,r2,b704 <_strtol_r+0x218>
    b6fc:	00801604 	movi	r2,88
    b700:	20bfde1e 	bne	r4,r2,b67c <_strtol_r+0x190>
    b704:	84400047 	ldb	r17,1(r16)
    b708:	01c00404 	movi	r7,16
    b70c:	84000084 	addi	r16,r16,2
    b710:	3829883a 	mov	r20,r7
    b714:	003f9706 	br	b574 <_strtol_r+0x88>
    b718:	00e00034 	movhi	r3,32768
    b71c:	18ffffc4 	addi	r3,r3,-1
    b720:	003fef06 	br	b6e0 <_strtol_r+0x1f4>
    b724:	01c00204 	movi	r7,8
    b728:	3829883a 	mov	r20,r7
    b72c:	003f9106 	br	b574 <_strtol_r+0x88>

0000b730 <strtol>:
    b730:	00800074 	movhi	r2,1
    b734:	10917404 	addi	r2,r2,17872
    b738:	2013883a 	mov	r9,r4
    b73c:	11000017 	ldw	r4,0(r2)
    b740:	2805883a 	mov	r2,r5
    b744:	300f883a 	mov	r7,r6
    b748:	480b883a 	mov	r5,r9
    b74c:	100d883a 	mov	r6,r2
    b750:	000b4ec1 	jmpi	b4ec <_strtol_r>

0000b754 <_strtoll_r>:
    b754:	defff004 	addi	sp,sp,-64
    b758:	00800074 	movhi	r2,1
    b75c:	10917304 	addi	r2,r2,17868
    b760:	df000e15 	stw	fp,56(sp)
    b764:	17000017 	ldw	fp,0(r2)
    b768:	ddc00d15 	stw	r23,52(sp)
    b76c:	dd000a15 	stw	r20,40(sp)
    b770:	dfc00f15 	stw	ra,60(sp)
    b774:	dd800c15 	stw	r22,48(sp)
    b778:	dd400b15 	stw	r21,44(sp)
    b77c:	dcc00915 	stw	r19,36(sp)
    b780:	dc800815 	stw	r18,32(sp)
    b784:	dc400715 	stw	r17,28(sp)
    b788:	dc000615 	stw	r16,24(sp)
    b78c:	d9400315 	stw	r5,12(sp)
    b790:	d9000215 	stw	r4,8(sp)
    b794:	d9800415 	stw	r6,16(sp)
    b798:	382f883a 	mov	r23,r7
    b79c:	2829883a 	mov	r20,r5
    b7a0:	a4c00007 	ldb	r19,0(r20)
    b7a4:	a5000044 	addi	r20,r20,1
    b7a8:	e4c7883a 	add	r3,fp,r19
    b7ac:	18800003 	ldbu	r2,0(r3)
    b7b0:	1080020c 	andi	r2,r2,8
    b7b4:	103ffa1e 	bne	r2,zero,b7a0 <_strtoll_r+0x4c>
    b7b8:	00800b44 	movi	r2,45
    b7bc:	98808826 	beq	r19,r2,b9e0 <_strtoll_r+0x28c>
    b7c0:	00800ac4 	movi	r2,43
    b7c4:	98808326 	beq	r19,r2,b9d4 <_strtoll_r+0x280>
    b7c8:	d8000115 	stw	zero,4(sp)
    b7cc:	b807003a 	cmpeq	r3,r23,zero
    b7d0:	18005f1e 	bne	r3,zero,b950 <_strtoll_r+0x1fc>
    b7d4:	00800404 	movi	r2,16
    b7d8:	b8805d26 	beq	r23,r2,b950 <_strtoll_r+0x1fc>
    b7dc:	b82dd7fa 	srai	r22,r23,31
    b7e0:	b82b883a 	mov	r21,r23
    b7e4:	d8c00117 	ldw	r3,4(sp)
    b7e8:	1806c03a 	cmpne	r3,r3,zero
    b7ec:	d8c00515 	stw	r3,20(sp)
    b7f0:	1800631e 	bne	r3,zero,b980 <_strtoll_r+0x22c>
    b7f4:	043fffc4 	movi	r16,-1
    b7f8:	04600034 	movhi	r17,32768
    b7fc:	8c7fffc4 	addi	r17,r17,-1
    b800:	880b883a 	mov	r5,r17
    b804:	8009883a 	mov	r4,r16
    b808:	a80d883a 	mov	r6,r21
    b80c:	b00f883a 	mov	r7,r22
    b810:	000d9780 	call	d978 <__umoddi3>
    b814:	880b883a 	mov	r5,r17
    b818:	8009883a 	mov	r4,r16
    b81c:	b00f883a 	mov	r7,r22
    b820:	a80d883a 	mov	r6,r21
    b824:	d8800015 	stw	r2,0(sp)
    b828:	000d39c0 	call	d39c <__udivdi3>
    b82c:	1023883a 	mov	r17,r2
    b830:	e4c5883a 	add	r2,fp,r19
    b834:	11000003 	ldbu	r4,0(r2)
    b838:	1825883a 	mov	r18,r3
    b83c:	0015883a 	mov	r10,zero
    b840:	20c0010c 	andi	r3,r4,4
    b844:	0017883a 	mov	r11,zero
    b848:	000f883a 	mov	r7,zero
    b84c:	18001a26 	beq	r3,zero,b8b8 <_strtoll_r+0x164>
    b850:	9c3ff404 	addi	r16,r19,-48
    b854:	85c0200e 	bge	r16,r23,b8d8 <_strtoll_r+0x184>
    b858:	38003b16 	blt	r7,zero,b948 <_strtoll_r+0x1f4>
    b85c:	92c03a36 	bltu	r18,r11,b948 <_strtoll_r+0x1f4>
    b860:	5c803826 	beq	r11,r18,b944 <_strtoll_r+0x1f0>
    b864:	54404c26 	beq	r10,r17,b998 <_strtoll_r+0x244>
    b868:	580b883a 	mov	r5,r11
    b86c:	5009883a 	mov	r4,r10
    b870:	a80d883a 	mov	r6,r21
    b874:	b00f883a 	mov	r7,r22
    b878:	000d2600 	call	d260 <__muldi3>
    b87c:	8013d7fa 	srai	r9,r16,31
    b880:	100d883a 	mov	r6,r2
    b884:	1405883a 	add	r2,r2,r16
    b888:	118d803a 	cmpltu	r6,r2,r6
    b88c:	1a47883a 	add	r3,r3,r9
    b890:	30cd883a 	add	r6,r6,r3
    b894:	1015883a 	mov	r10,r2
    b898:	3017883a 	mov	r11,r6
    b89c:	01c00044 	movi	r7,1
    b8a0:	a4c00007 	ldb	r19,0(r20)
    b8a4:	a5000044 	addi	r20,r20,1
    b8a8:	e4c5883a 	add	r2,fp,r19
    b8ac:	11000003 	ldbu	r4,0(r2)
    b8b0:	20c0010c 	andi	r3,r4,4
    b8b4:	183fe61e 	bne	r3,zero,b850 <_strtoll_r+0xfc>
    b8b8:	208000cc 	andi	r2,r4,3
    b8bc:	10000626 	beq	r2,zero,b8d8 <_strtoll_r+0x184>
    b8c0:	2080004c 	andi	r2,r4,1
    b8c4:	1005003a 	cmpeq	r2,r2,zero
    b8c8:	1000301e 	bne	r2,zero,b98c <_strtoll_r+0x238>
    b8cc:	02000dc4 	movi	r8,55
    b8d0:	9a21c83a 	sub	r16,r19,r8
    b8d4:	85ffe016 	blt	r16,r23,b858 <_strtoll_r+0x104>
    b8d8:	38004616 	blt	r7,zero,b9f4 <_strtoll_r+0x2a0>
    b8dc:	d8800517 	ldw	r2,20(sp)
    b8e0:	1000341e 	bne	r2,zero,b9b4 <_strtoll_r+0x260>
    b8e4:	500b883a 	mov	r5,r10
    b8e8:	580d883a 	mov	r6,r11
    b8ec:	d8c00417 	ldw	r3,16(sp)
    b8f0:	18000626 	beq	r3,zero,b90c <_strtoll_r+0x1b8>
    b8f4:	38000226 	beq	r7,zero,b900 <_strtoll_r+0x1ac>
    b8f8:	a53fffc4 	addi	r20,r20,-1
    b8fc:	dd000315 	stw	r20,12(sp)
    b900:	d8c00317 	ldw	r3,12(sp)
    b904:	d8800417 	ldw	r2,16(sp)
    b908:	10c00015 	stw	r3,0(r2)
    b90c:	2805883a 	mov	r2,r5
    b910:	3007883a 	mov	r3,r6
    b914:	dfc00f17 	ldw	ra,60(sp)
    b918:	df000e17 	ldw	fp,56(sp)
    b91c:	ddc00d17 	ldw	r23,52(sp)
    b920:	dd800c17 	ldw	r22,48(sp)
    b924:	dd400b17 	ldw	r21,44(sp)
    b928:	dd000a17 	ldw	r20,40(sp)
    b92c:	dcc00917 	ldw	r19,36(sp)
    b930:	dc800817 	ldw	r18,32(sp)
    b934:	dc400717 	ldw	r17,28(sp)
    b938:	dc000617 	ldw	r16,24(sp)
    b93c:	dec01004 	addi	sp,sp,64
    b940:	f800283a 	ret
    b944:	8abfc72e 	bgeu	r17,r10,b864 <_strtoll_r+0x110>
    b948:	01ffffc4 	movi	r7,-1
    b94c:	003fd406 	br	b8a0 <_strtoll_r+0x14c>
    b950:	00800c04 	movi	r2,48
    b954:	98803226 	beq	r19,r2,ba20 <_strtoll_r+0x2cc>
    b958:	183fa026 	beq	r3,zero,b7dc <_strtoll_r+0x88>
    b95c:	00800c04 	movi	r2,48
    b960:	98803e26 	beq	r19,r2,ba5c <_strtoll_r+0x308>
    b964:	d8c00117 	ldw	r3,4(sp)
    b968:	05c00284 	movi	r23,10
    b96c:	b82b883a 	mov	r21,r23
    b970:	1806c03a 	cmpne	r3,r3,zero
    b974:	002d883a 	mov	r22,zero
    b978:	d8c00515 	stw	r3,20(sp)
    b97c:	183f9d26 	beq	r3,zero,b7f4 <_strtoll_r+0xa0>
    b980:	0021883a 	mov	r16,zero
    b984:	04600034 	movhi	r17,32768
    b988:	003f9d06 	br	b800 <_strtoll_r+0xac>
    b98c:	020015c4 	movi	r8,87
    b990:	9a21c83a 	sub	r16,r19,r8
    b994:	003fcf06 	br	b8d4 <_strtoll_r+0x180>
    b998:	5cbfb31e 	bne	r11,r18,b868 <_strtoll_r+0x114>
    b99c:	d8800017 	ldw	r2,0(sp)
    b9a0:	143fb10e 	bge	r2,r16,b868 <_strtoll_r+0x114>
    b9a4:	8815883a 	mov	r10,r17
    b9a8:	9017883a 	mov	r11,r18
    b9ac:	01ffffc4 	movi	r7,-1
    b9b0:	003fbb06 	br	b8a0 <_strtoll_r+0x14c>
    b9b4:	0009883a 	mov	r4,zero
    b9b8:	2285c83a 	sub	r2,r4,r10
    b9bc:	2089803a 	cmpltu	r4,r4,r2
    b9c0:	02c7c83a 	sub	r3,zero,r11
    b9c4:	1909c83a 	sub	r4,r3,r4
    b9c8:	100b883a 	mov	r5,r2
    b9cc:	200d883a 	mov	r6,r4
    b9d0:	003fc606 	br	b8ec <_strtoll_r+0x198>
    b9d4:	a4c00007 	ldb	r19,0(r20)
    b9d8:	a5000044 	addi	r20,r20,1
    b9dc:	003f7a06 	br	b7c8 <_strtoll_r+0x74>
    b9e0:	a4c00007 	ldb	r19,0(r20)
    b9e4:	00800044 	movi	r2,1
    b9e8:	a5000044 	addi	r20,r20,1
    b9ec:	d8800115 	stw	r2,4(sp)
    b9f0:	003f7606 	br	b7cc <_strtoll_r+0x78>
    b9f4:	d8c00117 	ldw	r3,4(sp)
    b9f8:	1805003a 	cmpeq	r2,r3,zero
    b9fc:	1000131e 	bne	r2,zero,ba4c <_strtoll_r+0x2f8>
    ba00:	0005883a 	mov	r2,zero
    ba04:	00e00034 	movhi	r3,32768
    ba08:	100b883a 	mov	r5,r2
    ba0c:	180d883a 	mov	r6,r3
    ba10:	d8c00217 	ldw	r3,8(sp)
    ba14:	00800884 	movi	r2,34
    ba18:	18800015 	stw	r2,0(r3)
    ba1c:	003fb306 	br	b8ec <_strtoll_r+0x198>
    ba20:	a1000007 	ldb	r4,0(r20)
    ba24:	00801e04 	movi	r2,120
    ba28:	20800226 	beq	r4,r2,ba34 <_strtoll_r+0x2e0>
    ba2c:	00801604 	movi	r2,88
    ba30:	20bfc91e 	bne	r4,r2,b958 <_strtoll_r+0x204>
    ba34:	a4c00047 	ldb	r19,1(r20)
    ba38:	05c00404 	movi	r23,16
    ba3c:	b82b883a 	mov	r21,r23
    ba40:	a5000084 	addi	r20,r20,2
    ba44:	002d883a 	mov	r22,zero
    ba48:	003f6606 	br	b7e4 <_strtoll_r+0x90>
    ba4c:	017fffc4 	movi	r5,-1
    ba50:	01a00034 	movhi	r6,32768
    ba54:	31bfffc4 	addi	r6,r6,-1
    ba58:	003fed06 	br	ba10 <_strtoll_r+0x2bc>
    ba5c:	05c00204 	movi	r23,8
    ba60:	b82b883a 	mov	r21,r23
    ba64:	002d883a 	mov	r22,zero
    ba68:	003f5e06 	br	b7e4 <_strtoll_r+0x90>

0000ba6c <_strtoul_r>:
    ba6c:	defff604 	addi	sp,sp,-40
    ba70:	00800074 	movhi	r2,1
    ba74:	10917304 	addi	r2,r2,17868
    ba78:	dd000415 	stw	r20,16(sp)
    ba7c:	15000017 	ldw	r20,0(r2)
    ba80:	ddc00715 	stw	r23,28(sp)
    ba84:	dd800615 	stw	r22,24(sp)
    ba88:	dd400515 	stw	r21,20(sp)
    ba8c:	dc800215 	stw	r18,8(sp)
    ba90:	dc000015 	stw	r16,0(sp)
    ba94:	dfc00915 	stw	ra,36(sp)
    ba98:	df000815 	stw	fp,32(sp)
    ba9c:	dcc00315 	stw	r19,12(sp)
    baa0:	dc400115 	stw	r17,4(sp)
    baa4:	282b883a 	mov	r21,r5
    baa8:	202f883a 	mov	r23,r4
    baac:	302d883a 	mov	r22,r6
    bab0:	3825883a 	mov	r18,r7
    bab4:	2821883a 	mov	r16,r5
    bab8:	84400007 	ldb	r17,0(r16)
    babc:	84000044 	addi	r16,r16,1
    bac0:	a447883a 	add	r3,r20,r17
    bac4:	18800003 	ldbu	r2,0(r3)
    bac8:	1080020c 	andi	r2,r2,8
    bacc:	103ffa1e 	bne	r2,zero,bab8 <_strtoul_r+0x4c>
    bad0:	00800b44 	movi	r2,45
    bad4:	88805626 	beq	r17,r2,bc30 <_strtoul_r+0x1c4>
    bad8:	00800ac4 	movi	r2,43
    badc:	88805126 	beq	r17,r2,bc24 <_strtoul_r+0x1b8>
    bae0:	0039883a 	mov	fp,zero
    bae4:	9007003a 	cmpeq	r3,r18,zero
    bae8:	18003b1e 	bne	r3,zero,bbd8 <_strtoul_r+0x16c>
    baec:	00800404 	movi	r2,16
    baf0:	90803926 	beq	r18,r2,bbd8 <_strtoul_r+0x16c>
    baf4:	013fffc4 	movi	r4,-1
    baf8:	900b883a 	mov	r5,r18
    bafc:	000f37c0 	call	f37c <__udivsi3>
    bb00:	013fffc4 	movi	r4,-1
    bb04:	900b883a 	mov	r5,r18
    bb08:	1027883a 	mov	r19,r2
    bb0c:	000f3840 	call	f384 <__umodsi3>
    bb10:	1011883a 	mov	r8,r2
    bb14:	900f883a 	mov	r7,r18
    bb18:	a445883a 	add	r2,r20,r17
    bb1c:	11000003 	ldbu	r4,0(r2)
    bb20:	000b883a 	mov	r5,zero
    bb24:	000d883a 	mov	r6,zero
    bb28:	20c0010c 	andi	r3,r4,4
    bb2c:	18000e26 	beq	r3,zero,bb68 <_strtoul_r+0xfc>
    bb30:	88fff404 	addi	r3,r17,-48
    bb34:	1c80140e 	bge	r3,r18,bb88 <_strtoul_r+0x11c>
    bb38:	30003316 	blt	r6,zero,bc08 <_strtoul_r+0x19c>
    bb3c:	99403236 	bltu	r19,r5,bc08 <_strtoul_r+0x19c>
    bb40:	2cc03026 	beq	r5,r19,bc04 <_strtoul_r+0x198>
    bb44:	29c5383a 	mul	r2,r5,r7
    bb48:	01800044 	movi	r6,1
    bb4c:	10cb883a 	add	r5,r2,r3
    bb50:	84400007 	ldb	r17,0(r16)
    bb54:	84000044 	addi	r16,r16,1
    bb58:	a445883a 	add	r2,r20,r17
    bb5c:	11000003 	ldbu	r4,0(r2)
    bb60:	20c0010c 	andi	r3,r4,4
    bb64:	183ff21e 	bne	r3,zero,bb30 <_strtoul_r+0xc4>
    bb68:	208000cc 	andi	r2,r4,3
    bb6c:	10000626 	beq	r2,zero,bb88 <_strtoul_r+0x11c>
    bb70:	2080004c 	andi	r2,r4,1
    bb74:	1005003a 	cmpeq	r2,r2,zero
    bb78:	1000251e 	bne	r2,zero,bc10 <_strtoul_r+0x1a4>
    bb7c:	00800dc4 	movi	r2,55
    bb80:	8887c83a 	sub	r3,r17,r2
    bb84:	1cbfec16 	blt	r3,r18,bb38 <_strtoul_r+0xcc>
    bb88:	3000400e 	bge	r6,zero,bc8c <_strtoul_r+0x220>
    bb8c:	00800884 	movi	r2,34
    bb90:	017fffc4 	movi	r5,-1
    bb94:	b8800015 	stw	r2,0(r23)
    bb98:	b0000226 	beq	r22,zero,bba4 <_strtoul_r+0x138>
    bb9c:	30001f1e 	bne	r6,zero,bc1c <_strtoul_r+0x1b0>
    bba0:	b5400015 	stw	r21,0(r22)
    bba4:	2805883a 	mov	r2,r5
    bba8:	dfc00917 	ldw	ra,36(sp)
    bbac:	df000817 	ldw	fp,32(sp)
    bbb0:	ddc00717 	ldw	r23,28(sp)
    bbb4:	dd800617 	ldw	r22,24(sp)
    bbb8:	dd400517 	ldw	r21,20(sp)
    bbbc:	dd000417 	ldw	r20,16(sp)
    bbc0:	dcc00317 	ldw	r19,12(sp)
    bbc4:	dc800217 	ldw	r18,8(sp)
    bbc8:	dc400117 	ldw	r17,4(sp)
    bbcc:	dc000017 	ldw	r16,0(sp)
    bbd0:	dec00a04 	addi	sp,sp,40
    bbd4:	f800283a 	ret
    bbd8:	00800c04 	movi	r2,48
    bbdc:	88801826 	beq	r17,r2,bc40 <_strtoul_r+0x1d4>
    bbe0:	183fc426 	beq	r3,zero,baf4 <_strtoul_r+0x88>
    bbe4:	00800c04 	movi	r2,48
    bbe8:	88802226 	beq	r17,r2,bc74 <_strtoul_r+0x208>
    bbec:	04800284 	movi	r18,10
    bbf0:	900f883a 	mov	r7,r18
    bbf4:	04c666b4 	movhi	r19,6554
    bbf8:	9ce66644 	addi	r19,r19,-26215
    bbfc:	02000144 	movi	r8,5
    bc00:	003fc506 	br	bb18 <_strtoul_r+0xac>
    bc04:	40ffcf0e 	bge	r8,r3,bb44 <_strtoul_r+0xd8>
    bc08:	01bfffc4 	movi	r6,-1
    bc0c:	003fd006 	br	bb50 <_strtoul_r+0xe4>
    bc10:	008015c4 	movi	r2,87
    bc14:	8887c83a 	sub	r3,r17,r2
    bc18:	003fda06 	br	bb84 <_strtoul_r+0x118>
    bc1c:	857fffc4 	addi	r21,r16,-1
    bc20:	003fdf06 	br	bba0 <_strtoul_r+0x134>
    bc24:	84400007 	ldb	r17,0(r16)
    bc28:	84000044 	addi	r16,r16,1
    bc2c:	003fac06 	br	bae0 <_strtoul_r+0x74>
    bc30:	84400007 	ldb	r17,0(r16)
    bc34:	07000044 	movi	fp,1
    bc38:	84000044 	addi	r16,r16,1
    bc3c:	003fa906 	br	bae4 <_strtoul_r+0x78>
    bc40:	81000007 	ldb	r4,0(r16)
    bc44:	00801e04 	movi	r2,120
    bc48:	20800226 	beq	r4,r2,bc54 <_strtoul_r+0x1e8>
    bc4c:	00801604 	movi	r2,88
    bc50:	20bfe31e 	bne	r4,r2,bbe0 <_strtoul_r+0x174>
    bc54:	84400047 	ldb	r17,1(r16)
    bc58:	04800404 	movi	r18,16
    bc5c:	84000084 	addi	r16,r16,2
    bc60:	900f883a 	mov	r7,r18
    bc64:	04c40034 	movhi	r19,4096
    bc68:	9cffffc4 	addi	r19,r19,-1
    bc6c:	020003c4 	movi	r8,15
    bc70:	003fa906 	br	bb18 <_strtoul_r+0xac>
    bc74:	04800204 	movi	r18,8
    bc78:	900f883a 	mov	r7,r18
    bc7c:	04c80034 	movhi	r19,8192
    bc80:	9cffffc4 	addi	r19,r19,-1
    bc84:	020001c4 	movi	r8,7
    bc88:	003fa306 	br	bb18 <_strtoul_r+0xac>
    bc8c:	e005003a 	cmpeq	r2,fp,zero
    bc90:	103fc11e 	bne	r2,zero,bb98 <_strtoul_r+0x12c>
    bc94:	014bc83a 	sub	r5,zero,r5
    bc98:	003fbf06 	br	bb98 <_strtoul_r+0x12c>

0000bc9c <strtoul>:
    bc9c:	00800074 	movhi	r2,1
    bca0:	10917404 	addi	r2,r2,17872
    bca4:	2013883a 	mov	r9,r4
    bca8:	11000017 	ldw	r4,0(r2)
    bcac:	2805883a 	mov	r2,r5
    bcb0:	300f883a 	mov	r7,r6
    bcb4:	480b883a 	mov	r5,r9
    bcb8:	100d883a 	mov	r6,r2
    bcbc:	000ba6c1 	jmpi	ba6c <_strtoul_r>

0000bcc0 <_strtoull_r>:
    bcc0:	defff104 	addi	sp,sp,-60
    bcc4:	00800074 	movhi	r2,1
    bcc8:	10917304 	addi	r2,r2,17868
    bccc:	df000d15 	stw	fp,52(sp)
    bcd0:	17000017 	ldw	fp,0(r2)
    bcd4:	ddc00c15 	stw	r23,48(sp)
    bcd8:	dcc00815 	stw	r19,32(sp)
    bcdc:	dfc00e15 	stw	ra,56(sp)
    bce0:	dd800b15 	stw	r22,44(sp)
    bce4:	dd400a15 	stw	r21,40(sp)
    bce8:	dd000915 	stw	r20,36(sp)
    bcec:	dc800715 	stw	r18,28(sp)
    bcf0:	dc400615 	stw	r17,24(sp)
    bcf4:	dc000515 	stw	r16,20(sp)
    bcf8:	d9400215 	stw	r5,8(sp)
    bcfc:	d9000115 	stw	r4,4(sp)
    bd00:	d9800315 	stw	r6,12(sp)
    bd04:	382f883a 	mov	r23,r7
    bd08:	2827883a 	mov	r19,r5
    bd0c:	9d000007 	ldb	r20,0(r19)
    bd10:	9cc00044 	addi	r19,r19,1
    bd14:	e507883a 	add	r3,fp,r20
    bd18:	18800003 	ldbu	r2,0(r3)
    bd1c:	1080020c 	andi	r2,r2,8
    bd20:	103ffa1e 	bne	r2,zero,bd0c <_strtoull_r+0x4c>
    bd24:	00800b44 	movi	r2,45
    bd28:	a0807a26 	beq	r20,r2,bf14 <_strtoull_r+0x254>
    bd2c:	00800ac4 	movi	r2,43
    bd30:	a0807526 	beq	r20,r2,bf08 <_strtoull_r+0x248>
    bd34:	d8000015 	stw	zero,0(sp)
    bd38:	b807003a 	cmpeq	r3,r23,zero
    bd3c:	18005a1e 	bne	r3,zero,bea8 <_strtoull_r+0x1e8>
    bd40:	00800404 	movi	r2,16
    bd44:	b8805826 	beq	r23,r2,bea8 <_strtoull_r+0x1e8>
    bd48:	b82dd7fa 	srai	r22,r23,31
    bd4c:	043fffc4 	movi	r16,-1
    bd50:	8009883a 	mov	r4,r16
    bd54:	800b883a 	mov	r5,r16
    bd58:	b80d883a 	mov	r6,r23
    bd5c:	b00f883a 	mov	r7,r22
    bd60:	000d39c0 	call	d39c <__udivdi3>
    bd64:	8009883a 	mov	r4,r16
    bd68:	800b883a 	mov	r5,r16
    bd6c:	b80d883a 	mov	r6,r23
    bd70:	b00f883a 	mov	r7,r22
    bd74:	1023883a 	mov	r17,r2
    bd78:	1825883a 	mov	r18,r3
    bd7c:	000d9780 	call	d978 <__umoddi3>
    bd80:	b82b883a 	mov	r21,r23
    bd84:	1019883a 	mov	r12,r2
    bd88:	e505883a 	add	r2,fp,r20
    bd8c:	11000003 	ldbu	r4,0(r2)
    bd90:	0015883a 	mov	r10,zero
    bd94:	0017883a 	mov	r11,zero
    bd98:	20c0010c 	andi	r3,r4,4
    bd9c:	000d883a 	mov	r6,zero
    bda0:	18001c26 	beq	r3,zero,be14 <_strtoull_r+0x154>
    bda4:	a43ff404 	addi	r16,r20,-48
    bda8:	85c0220e 	bge	r16,r23,be34 <_strtoull_r+0x174>
    bdac:	30003c16 	blt	r6,zero,bea0 <_strtoull_r+0x1e0>
    bdb0:	92c03b36 	bltu	r18,r11,bea0 <_strtoull_r+0x1e0>
    bdb4:	5c803926 	beq	r11,r18,be9c <_strtoull_r+0x1dc>
    bdb8:	54404c26 	beq	r10,r17,beec <_strtoull_r+0x22c>
    bdbc:	580b883a 	mov	r5,r11
    bdc0:	5009883a 	mov	r4,r10
    bdc4:	a80d883a 	mov	r6,r21
    bdc8:	b00f883a 	mov	r7,r22
    bdcc:	db000415 	stw	r12,16(sp)
    bdd0:	000d2600 	call	d260 <__muldi3>
    bdd4:	8013d7fa 	srai	r9,r16,31
    bdd8:	100d883a 	mov	r6,r2
    bddc:	1405883a 	add	r2,r2,r16
    bde0:	118d803a 	cmpltu	r6,r2,r6
    bde4:	1a47883a 	add	r3,r3,r9
    bde8:	db000417 	ldw	r12,16(sp)
    bdec:	30cd883a 	add	r6,r6,r3
    bdf0:	3017883a 	mov	r11,r6
    bdf4:	1015883a 	mov	r10,r2
    bdf8:	01800044 	movi	r6,1
    bdfc:	9d000007 	ldb	r20,0(r19)
    be00:	9cc00044 	addi	r19,r19,1
    be04:	e505883a 	add	r2,fp,r20
    be08:	11000003 	ldbu	r4,0(r2)
    be0c:	20c0010c 	andi	r3,r4,4
    be10:	183fe41e 	bne	r3,zero,bda4 <_strtoull_r+0xe4>
    be14:	208000cc 	andi	r2,r4,3
    be18:	10000626 	beq	r2,zero,be34 <_strtoull_r+0x174>
    be1c:	2080004c 	andi	r2,r4,1
    be20:	1005003a 	cmpeq	r2,r2,zero
    be24:	10002e1e 	bne	r2,zero,bee0 <_strtoull_r+0x220>
    be28:	02000dc4 	movi	r8,55
    be2c:	a221c83a 	sub	r16,r20,r8
    be30:	85ffde16 	blt	r16,r23,bdac <_strtoull_r+0xec>
    be34:	3000530e 	bge	r6,zero,bf84 <_strtoull_r+0x2c4>
    be38:	d8c00117 	ldw	r3,4(sp)
    be3c:	02bfffc4 	movi	r10,-1
    be40:	00800884 	movi	r2,34
    be44:	5017883a 	mov	r11,r10
    be48:	18800015 	stw	r2,0(r3)
    be4c:	d8800317 	ldw	r2,12(sp)
    be50:	10000426 	beq	r2,zero,be64 <_strtoull_r+0x1a4>
    be54:	3000291e 	bne	r6,zero,befc <_strtoull_r+0x23c>
    be58:	d8800217 	ldw	r2,8(sp)
    be5c:	d8c00317 	ldw	r3,12(sp)
    be60:	18800015 	stw	r2,0(r3)
    be64:	5005883a 	mov	r2,r10
    be68:	5807883a 	mov	r3,r11
    be6c:	dfc00e17 	ldw	ra,56(sp)
    be70:	df000d17 	ldw	fp,52(sp)
    be74:	ddc00c17 	ldw	r23,48(sp)
    be78:	dd800b17 	ldw	r22,44(sp)
    be7c:	dd400a17 	ldw	r21,40(sp)
    be80:	dd000917 	ldw	r20,36(sp)
    be84:	dcc00817 	ldw	r19,32(sp)
    be88:	dc800717 	ldw	r18,28(sp)
    be8c:	dc400617 	ldw	r17,24(sp)
    be90:	dc000517 	ldw	r16,20(sp)
    be94:	dec00f04 	addi	sp,sp,60
    be98:	f800283a 	ret
    be9c:	8abfc62e 	bgeu	r17,r10,bdb8 <_strtoull_r+0xf8>
    bea0:	01bfffc4 	movi	r6,-1
    bea4:	003fd506 	br	bdfc <_strtoull_r+0x13c>
    bea8:	00800c04 	movi	r2,48
    beac:	a0801e26 	beq	r20,r2,bf28 <_strtoull_r+0x268>
    beb0:	183fa526 	beq	r3,zero,bd48 <_strtoull_r+0x88>
    beb4:	00800c04 	movi	r2,48
    beb8:	a0802a26 	beq	r20,r2,bf64 <_strtoull_r+0x2a4>
    bebc:	05c00284 	movi	r23,10
    bec0:	b82b883a 	mov	r21,r23
    bec4:	046666b4 	movhi	r17,39322
    bec8:	8c666644 	addi	r17,r17,-26215
    becc:	002d883a 	mov	r22,zero
    bed0:	048666b4 	movhi	r18,6554
    bed4:	94a66644 	addi	r18,r18,-26215
    bed8:	03000144 	movi	r12,5
    bedc:	003faa06 	br	bd88 <_strtoull_r+0xc8>
    bee0:	020015c4 	movi	r8,87
    bee4:	a221c83a 	sub	r16,r20,r8
    bee8:	003fd106 	br	be30 <_strtoull_r+0x170>
    beec:	5cbfb31e 	bne	r11,r18,bdbc <_strtoull_r+0xfc>
    bef0:	643fb20e 	bge	r12,r16,bdbc <_strtoull_r+0xfc>
    bef4:	01bfffc4 	movi	r6,-1
    bef8:	003fc006 	br	bdfc <_strtoull_r+0x13c>
    befc:	9cffffc4 	addi	r19,r19,-1
    bf00:	dcc00215 	stw	r19,8(sp)
    bf04:	003fd406 	br	be58 <_strtoull_r+0x198>
    bf08:	9d000007 	ldb	r20,0(r19)
    bf0c:	9cc00044 	addi	r19,r19,1
    bf10:	003f8806 	br	bd34 <_strtoull_r+0x74>
    bf14:	9d000007 	ldb	r20,0(r19)
    bf18:	00800044 	movi	r2,1
    bf1c:	9cc00044 	addi	r19,r19,1
    bf20:	d8800015 	stw	r2,0(sp)
    bf24:	003f8406 	br	bd38 <_strtoull_r+0x78>
    bf28:	99000007 	ldb	r4,0(r19)
    bf2c:	00801e04 	movi	r2,120
    bf30:	20800226 	beq	r4,r2,bf3c <_strtoull_r+0x27c>
    bf34:	00801604 	movi	r2,88
    bf38:	20bfdd1e 	bne	r4,r2,beb0 <_strtoull_r+0x1f0>
    bf3c:	9d000047 	ldb	r20,1(r19)
    bf40:	05c00404 	movi	r23,16
    bf44:	b82b883a 	mov	r21,r23
    bf48:	047fffc4 	movi	r17,-1
    bf4c:	9cc00084 	addi	r19,r19,2
    bf50:	002d883a 	mov	r22,zero
    bf54:	04840034 	movhi	r18,4096
    bf58:	94bfffc4 	addi	r18,r18,-1
    bf5c:	030003c4 	movi	r12,15
    bf60:	003f8906 	br	bd88 <_strtoull_r+0xc8>
    bf64:	05c00204 	movi	r23,8
    bf68:	b82b883a 	mov	r21,r23
    bf6c:	047fffc4 	movi	r17,-1
    bf70:	002d883a 	mov	r22,zero
    bf74:	04880034 	movhi	r18,8192
    bf78:	94bfffc4 	addi	r18,r18,-1
    bf7c:	030001c4 	movi	r12,7
    bf80:	003f8106 	br	bd88 <_strtoull_r+0xc8>
    bf84:	d8c00017 	ldw	r3,0(sp)
    bf88:	1805003a 	cmpeq	r2,r3,zero
    bf8c:	103faf1e 	bne	r2,zero,be4c <_strtoull_r+0x18c>
    bf90:	0009883a 	mov	r4,zero
    bf94:	2285c83a 	sub	r2,r4,r10
    bf98:	02c7c83a 	sub	r3,zero,r11
    bf9c:	2089803a 	cmpltu	r4,r4,r2
    bfa0:	1909c83a 	sub	r4,r3,r4
    bfa4:	1015883a 	mov	r10,r2
    bfa8:	2017883a 	mov	r11,r4
    bfac:	003fa706 	br	be4c <_strtoull_r+0x18c>

0000bfb0 <__submore>:
    bfb0:	defffa04 	addi	sp,sp,-24
    bfb4:	28c00c17 	ldw	r3,48(r5)
    bfb8:	dc800215 	stw	r18,8(sp)
    bfbc:	2825883a 	mov	r18,r5
    bfc0:	dc000015 	stw	r16,0(sp)
    bfc4:	90801004 	addi	r2,r18,64
    bfc8:	04010004 	movi	r16,1024
    bfcc:	dfc00515 	stw	ra,20(sp)
    bfd0:	dd000415 	stw	r20,16(sp)
    bfd4:	dcc00315 	stw	r19,12(sp)
    bfd8:	dc400115 	stw	r17,4(sp)
    bfdc:	800b883a 	mov	r5,r16
    bfe0:	18801b26 	beq	r3,r2,c050 <__submore+0xa0>
    bfe4:	94400d17 	ldw	r17,52(r18)
    bfe8:	180b883a 	mov	r5,r3
    bfec:	8c69883a 	add	r20,r17,r17
    bff0:	a00d883a 	mov	r6,r20
    bff4:	00091b40 	call	91b4 <_realloc_r>
    bff8:	1467883a 	add	r19,r2,r17
    bffc:	1021883a 	mov	r16,r2
    c000:	880d883a 	mov	r6,r17
    c004:	9809883a 	mov	r4,r19
    c008:	100b883a 	mov	r5,r2
    c00c:	10000e26 	beq	r2,zero,c048 <__submore+0x98>
    c010:	0007fa80 	call	7fa8 <memcpy>
    c014:	000d883a 	mov	r6,zero
    c018:	95000d15 	stw	r20,52(r18)
    c01c:	94c00015 	stw	r19,0(r18)
    c020:	94000c15 	stw	r16,48(r18)
    c024:	3005883a 	mov	r2,r6
    c028:	dfc00517 	ldw	ra,20(sp)
    c02c:	dd000417 	ldw	r20,16(sp)
    c030:	dcc00317 	ldw	r19,12(sp)
    c034:	dc800217 	ldw	r18,8(sp)
    c038:	dc400117 	ldw	r17,4(sp)
    c03c:	dc000017 	ldw	r16,0(sp)
    c040:	dec00604 	addi	sp,sp,24
    c044:	f800283a 	ret
    c048:	01bfffc4 	movi	r6,-1
    c04c:	003ff506 	br	c024 <__submore+0x74>
    c050:	00076840 	call	7684 <_malloc_r>
    c054:	1009883a 	mov	r4,r2
    c058:	1140ff44 	addi	r5,r2,1021
    c05c:	000d883a 	mov	r6,zero
    c060:	103ff926 	beq	r2,zero,c048 <__submore+0x98>
    c064:	90801083 	ldbu	r2,66(r18)
    c068:	94000d15 	stw	r16,52(r18)
    c06c:	91000c15 	stw	r4,48(r18)
    c070:	28800085 	stb	r2,2(r5)
    c074:	90c01043 	ldbu	r3,65(r18)
    c078:	28c00045 	stb	r3,1(r5)
    c07c:	90801003 	ldbu	r2,64(r18)
    c080:	2080ff45 	stb	r2,1021(r4)
    c084:	91400015 	stw	r5,0(r18)
    c088:	003fe606 	br	c024 <__submore+0x74>

0000c08c <_ungetc_r>:
    c08c:	defffc04 	addi	sp,sp,-16
    c090:	00bfffc4 	movi	r2,-1
    c094:	dc400215 	stw	r17,8(sp)
    c098:	dc000115 	stw	r16,4(sp)
    c09c:	dfc00315 	stw	ra,12(sp)
    c0a0:	2821883a 	mov	r16,r5
    c0a4:	2023883a 	mov	r17,r4
    c0a8:	28801826 	beq	r5,r2,c10c <_ungetc_r+0x80>
    c0ac:	20000226 	beq	r4,zero,c0b8 <_ungetc_r+0x2c>
    c0b0:	20800e17 	ldw	r2,56(r4)
    c0b4:	10001b26 	beq	r2,zero,c124 <_ungetc_r+0x98>
    c0b8:	3100030b 	ldhu	r4,12(r6)
    c0bc:	00bff7c4 	movi	r2,-33
    c0c0:	2084703a 	and	r2,r4,r2
    c0c4:	117fffcc 	andi	r5,r2,65535
    c0c8:	28c0010c 	andi	r3,r5,4
    c0cc:	1009883a 	mov	r4,r2
    c0d0:	3080030d 	sth	r2,12(r6)
    c0d4:	18003526 	beq	r3,zero,c1ac <_ungetc_r+0x120>
    c0d8:	30800c17 	ldw	r2,48(r6)
    c0dc:	84003fcc 	andi	r16,r16,255
    c0e0:	10001426 	beq	r2,zero,c134 <_ungetc_r+0xa8>
    c0e4:	30c00117 	ldw	r3,4(r6)
    c0e8:	30800d17 	ldw	r2,52(r6)
    c0ec:	1880380e 	bge	r3,r2,c1d0 <_ungetc_r+0x144>
    c0f0:	30c00017 	ldw	r3,0(r6)
    c0f4:	19ffffc4 	addi	r7,r3,-1
    c0f8:	31c00015 	stw	r7,0(r6)
    c0fc:	1c3fffc5 	stb	r16,-1(r3)
    c100:	30800117 	ldw	r2,4(r6)
    c104:	10800044 	addi	r2,r2,1
    c108:	30800115 	stw	r2,4(r6)
    c10c:	8005883a 	mov	r2,r16
    c110:	dfc00317 	ldw	ra,12(sp)
    c114:	dc400217 	ldw	r17,8(sp)
    c118:	dc000117 	ldw	r16,4(sp)
    c11c:	dec00404 	addi	sp,sp,16
    c120:	f800283a 	ret
    c124:	d9800015 	stw	r6,0(sp)
    c128:	00065100 	call	6510 <__sinit>
    c12c:	d9800017 	ldw	r6,0(sp)
    c130:	003fe106 	br	c0b8 <_ungetc_r+0x2c>
    c134:	30800417 	ldw	r2,16(r6)
    c138:	10002326 	beq	r2,zero,c1c8 <_ungetc_r+0x13c>
    c13c:	31c00017 	ldw	r7,0(r6)
    c140:	11c0022e 	bgeu	r2,r7,c14c <_ungetc_r+0xc0>
    c144:	38bfffc3 	ldbu	r2,-1(r7)
    c148:	80801226 	beq	r16,r2,c194 <_ungetc_r+0x108>
    c14c:	30c00117 	ldw	r3,4(r6)
    c150:	00800044 	movi	r2,1
    c154:	30800115 	stw	r2,4(r6)
    c158:	008000c4 	movi	r2,3
    c15c:	31001004 	addi	r4,r6,64
    c160:	31401084 	addi	r5,r6,66
    c164:	30800d15 	stw	r2,52(r6)
    c168:	8005883a 	mov	r2,r16
    c16c:	30c00f15 	stw	r3,60(r6)
    c170:	31c00e15 	stw	r7,56(r6)
    c174:	31000c15 	stw	r4,48(r6)
    c178:	31400015 	stw	r5,0(r6)
    c17c:	34001085 	stb	r16,66(r6)
    c180:	dfc00317 	ldw	ra,12(sp)
    c184:	dc400217 	ldw	r17,8(sp)
    c188:	dc000117 	ldw	r16,4(sp)
    c18c:	dec00404 	addi	sp,sp,16
    c190:	f800283a 	ret
    c194:	30800117 	ldw	r2,4(r6)
    c198:	39ffffc4 	addi	r7,r7,-1
    c19c:	31c00015 	stw	r7,0(r6)
    c1a0:	10800044 	addi	r2,r2,1
    c1a4:	30800115 	stw	r2,4(r6)
    c1a8:	003fd806 	br	c10c <_ungetc_r+0x80>
    c1ac:	2880040c 	andi	r2,r5,16
    c1b0:	10000d26 	beq	r2,zero,c1e8 <_ungetc_r+0x15c>
    c1b4:	2880020c 	andi	r2,r5,8
    c1b8:	10000d1e 	bne	r2,zero,c1f0 <_ungetc_r+0x164>
    c1bc:	20800114 	ori	r2,r4,4
    c1c0:	3080030d 	sth	r2,12(r6)
    c1c4:	003fc406 	br	c0d8 <_ungetc_r+0x4c>
    c1c8:	31c00017 	ldw	r7,0(r6)
    c1cc:	003fdf06 	br	c14c <_ungetc_r+0xc0>
    c1d0:	300b883a 	mov	r5,r6
    c1d4:	8809883a 	mov	r4,r17
    c1d8:	d9800015 	stw	r6,0(sp)
    c1dc:	000bfb00 	call	bfb0 <__submore>
    c1e0:	d9800017 	ldw	r6,0(sp)
    c1e4:	103fc226 	beq	r2,zero,c0f0 <_ungetc_r+0x64>
    c1e8:	043fffc4 	movi	r16,-1
    c1ec:	003fc706 	br	c10c <_ungetc_r+0x80>
    c1f0:	300b883a 	mov	r5,r6
    c1f4:	8809883a 	mov	r4,r17
    c1f8:	d9800015 	stw	r6,0(sp)
    c1fc:	00062780 	call	6278 <_fflush_r>
    c200:	d9800017 	ldw	r6,0(sp)
    c204:	103ff81e 	bne	r2,zero,c1e8 <_ungetc_r+0x15c>
    c208:	3100030b 	ldhu	r4,12(r6)
    c20c:	00bffdc4 	movi	r2,-9
    c210:	30000215 	stw	zero,8(r6)
    c214:	2084703a 	and	r2,r4,r2
    c218:	1009883a 	mov	r4,r2
    c21c:	3080030d 	sth	r2,12(r6)
    c220:	30000615 	stw	zero,24(r6)
    c224:	003fe506 	br	c1bc <_ungetc_r+0x130>

0000c228 <ungetc>:
    c228:	01800074 	movhi	r6,1
    c22c:	31917404 	addi	r6,r6,17872
    c230:	2007883a 	mov	r3,r4
    c234:	31000017 	ldw	r4,0(r6)
    c238:	280d883a 	mov	r6,r5
    c23c:	180b883a 	mov	r5,r3
    c240:	000c08c1 	jmpi	c08c <_ungetc_r>

0000c244 <_write_r>:
    c244:	defffd04 	addi	sp,sp,-12
    c248:	dc000015 	stw	r16,0(sp)
    c24c:	04000074 	movhi	r16,1
    c250:	84189604 	addi	r16,r16,25176
    c254:	dc400115 	stw	r17,4(sp)
    c258:	80000015 	stw	zero,0(r16)
    c25c:	2023883a 	mov	r17,r4
    c260:	2809883a 	mov	r4,r5
    c264:	300b883a 	mov	r5,r6
    c268:	380d883a 	mov	r6,r7
    c26c:	dfc00215 	stw	ra,8(sp)
    c270:	000fcc40 	call	fcc4 <write>
    c274:	1007883a 	mov	r3,r2
    c278:	00bfffc4 	movi	r2,-1
    c27c:	18800626 	beq	r3,r2,c298 <_write_r+0x54>
    c280:	1805883a 	mov	r2,r3
    c284:	dfc00217 	ldw	ra,8(sp)
    c288:	dc400117 	ldw	r17,4(sp)
    c28c:	dc000017 	ldw	r16,0(sp)
    c290:	dec00304 	addi	sp,sp,12
    c294:	f800283a 	ret
    c298:	80800017 	ldw	r2,0(r16)
    c29c:	103ff826 	beq	r2,zero,c280 <_write_r+0x3c>
    c2a0:	88800015 	stw	r2,0(r17)
    c2a4:	1805883a 	mov	r2,r3
    c2a8:	dfc00217 	ldw	ra,8(sp)
    c2ac:	dc400117 	ldw	r17,4(sp)
    c2b0:	dc000017 	ldw	r16,0(sp)
    c2b4:	dec00304 	addi	sp,sp,12
    c2b8:	f800283a 	ret

0000c2bc <_calloc_r>:
    c2bc:	298b383a 	mul	r5,r5,r6
    c2c0:	defffe04 	addi	sp,sp,-8
    c2c4:	dc000015 	stw	r16,0(sp)
    c2c8:	dfc00115 	stw	ra,4(sp)
    c2cc:	00076840 	call	7684 <_malloc_r>
    c2d0:	1021883a 	mov	r16,r2
    c2d4:	01c00904 	movi	r7,36
    c2d8:	10000d26 	beq	r2,zero,c310 <_calloc_r+0x54>
    c2dc:	10ffff17 	ldw	r3,-4(r2)
    c2e0:	1009883a 	mov	r4,r2
    c2e4:	00bfff04 	movi	r2,-4
    c2e8:	1886703a 	and	r3,r3,r2
    c2ec:	1887883a 	add	r3,r3,r2
    c2f0:	180d883a 	mov	r6,r3
    c2f4:	000b883a 	mov	r5,zero
    c2f8:	38c01736 	bltu	r7,r3,c358 <_calloc_r+0x9c>
    c2fc:	008004c4 	movi	r2,19
    c300:	10c00836 	bltu	r2,r3,c324 <_calloc_r+0x68>
    c304:	20000215 	stw	zero,8(r4)
    c308:	20000015 	stw	zero,0(r4)
    c30c:	20000115 	stw	zero,4(r4)
    c310:	8005883a 	mov	r2,r16
    c314:	dfc00117 	ldw	ra,4(sp)
    c318:	dc000017 	ldw	r16,0(sp)
    c31c:	dec00204 	addi	sp,sp,8
    c320:	f800283a 	ret
    c324:	008006c4 	movi	r2,27
    c328:	80000015 	stw	zero,0(r16)
    c32c:	80000115 	stw	zero,4(r16)
    c330:	81000204 	addi	r4,r16,8
    c334:	10fff32e 	bgeu	r2,r3,c304 <_calloc_r+0x48>
    c338:	80000215 	stw	zero,8(r16)
    c33c:	80000315 	stw	zero,12(r16)
    c340:	81000404 	addi	r4,r16,16
    c344:	19ffef1e 	bne	r3,r7,c304 <_calloc_r+0x48>
    c348:	81000604 	addi	r4,r16,24
    c34c:	80000415 	stw	zero,16(r16)
    c350:	80000515 	stw	zero,20(r16)
    c354:	003feb06 	br	c304 <_calloc_r+0x48>
    c358:	00081280 	call	8128 <memset>
    c35c:	8005883a 	mov	r2,r16
    c360:	dfc00117 	ldw	ra,4(sp)
    c364:	dc000017 	ldw	r16,0(sp)
    c368:	dec00204 	addi	sp,sp,8
    c36c:	f800283a 	ret

0000c370 <_close_r>:
    c370:	defffd04 	addi	sp,sp,-12
    c374:	dc000015 	stw	r16,0(sp)
    c378:	04000074 	movhi	r16,1
    c37c:	84189604 	addi	r16,r16,25176
    c380:	dc400115 	stw	r17,4(sp)
    c384:	80000015 	stw	zero,0(r16)
    c388:	2023883a 	mov	r17,r4
    c38c:	2809883a 	mov	r4,r5
    c390:	dfc00215 	stw	ra,8(sp)
    c394:	000f5b80 	call	f5b8 <close>
    c398:	1007883a 	mov	r3,r2
    c39c:	00bfffc4 	movi	r2,-1
    c3a0:	18800626 	beq	r3,r2,c3bc <_close_r+0x4c>
    c3a4:	1805883a 	mov	r2,r3
    c3a8:	dfc00217 	ldw	ra,8(sp)
    c3ac:	dc400117 	ldw	r17,4(sp)
    c3b0:	dc000017 	ldw	r16,0(sp)
    c3b4:	dec00304 	addi	sp,sp,12
    c3b8:	f800283a 	ret
    c3bc:	80800017 	ldw	r2,0(r16)
    c3c0:	103ff826 	beq	r2,zero,c3a4 <_close_r+0x34>
    c3c4:	88800015 	stw	r2,0(r17)
    c3c8:	1805883a 	mov	r2,r3
    c3cc:	dfc00217 	ldw	ra,8(sp)
    c3d0:	dc400117 	ldw	r17,4(sp)
    c3d4:	dc000017 	ldw	r16,0(sp)
    c3d8:	dec00304 	addi	sp,sp,12
    c3dc:	f800283a 	ret

0000c3e0 <_fclose_r>:
    c3e0:	defffc04 	addi	sp,sp,-16
    c3e4:	dc400115 	stw	r17,4(sp)
    c3e8:	dc000015 	stw	r16,0(sp)
    c3ec:	dfc00315 	stw	ra,12(sp)
    c3f0:	dc800215 	stw	r18,8(sp)
    c3f4:	2821883a 	mov	r16,r5
    c3f8:	2023883a 	mov	r17,r4
    c3fc:	28002926 	beq	r5,zero,c4a4 <_fclose_r+0xc4>
    c400:	00065000 	call	6500 <__sfp_lock_acquire>
    c404:	88000226 	beq	r17,zero,c410 <_fclose_r+0x30>
    c408:	88800e17 	ldw	r2,56(r17)
    c40c:	10002d26 	beq	r2,zero,c4c4 <_fclose_r+0xe4>
    c410:	8080030f 	ldh	r2,12(r16)
    c414:	10002226 	beq	r2,zero,c4a0 <_fclose_r+0xc0>
    c418:	8809883a 	mov	r4,r17
    c41c:	800b883a 	mov	r5,r16
    c420:	00062780 	call	6278 <_fflush_r>
    c424:	1025883a 	mov	r18,r2
    c428:	80800b17 	ldw	r2,44(r16)
    c42c:	10000426 	beq	r2,zero,c440 <_fclose_r+0x60>
    c430:	81400717 	ldw	r5,28(r16)
    c434:	8809883a 	mov	r4,r17
    c438:	103ee83a 	callr	r2
    c43c:	10002a16 	blt	r2,zero,c4e8 <_fclose_r+0x108>
    c440:	8080030b 	ldhu	r2,12(r16)
    c444:	1080200c 	andi	r2,r2,128
    c448:	1000231e 	bne	r2,zero,c4d8 <_fclose_r+0xf8>
    c44c:	81400c17 	ldw	r5,48(r16)
    c450:	28000526 	beq	r5,zero,c468 <_fclose_r+0x88>
    c454:	80801004 	addi	r2,r16,64
    c458:	28800226 	beq	r5,r2,c464 <_fclose_r+0x84>
    c45c:	8809883a 	mov	r4,r17
    c460:	0006ad00 	call	6ad0 <_free_r>
    c464:	80000c15 	stw	zero,48(r16)
    c468:	81401117 	ldw	r5,68(r16)
    c46c:	28000326 	beq	r5,zero,c47c <_fclose_r+0x9c>
    c470:	8809883a 	mov	r4,r17
    c474:	0006ad00 	call	6ad0 <_free_r>
    c478:	80001115 	stw	zero,68(r16)
    c47c:	8000030d 	sth	zero,12(r16)
    c480:	00065040 	call	6504 <__sfp_lock_release>
    c484:	9005883a 	mov	r2,r18
    c488:	dfc00317 	ldw	ra,12(sp)
    c48c:	dc800217 	ldw	r18,8(sp)
    c490:	dc400117 	ldw	r17,4(sp)
    c494:	dc000017 	ldw	r16,0(sp)
    c498:	dec00404 	addi	sp,sp,16
    c49c:	f800283a 	ret
    c4a0:	00065040 	call	6504 <__sfp_lock_release>
    c4a4:	0025883a 	mov	r18,zero
    c4a8:	9005883a 	mov	r2,r18
    c4ac:	dfc00317 	ldw	ra,12(sp)
    c4b0:	dc800217 	ldw	r18,8(sp)
    c4b4:	dc400117 	ldw	r17,4(sp)
    c4b8:	dc000017 	ldw	r16,0(sp)
    c4bc:	dec00404 	addi	sp,sp,16
    c4c0:	f800283a 	ret
    c4c4:	8809883a 	mov	r4,r17
    c4c8:	00065100 	call	6510 <__sinit>
    c4cc:	8080030f 	ldh	r2,12(r16)
    c4d0:	103fd11e 	bne	r2,zero,c418 <_fclose_r+0x38>
    c4d4:	003ff206 	br	c4a0 <_fclose_r+0xc0>
    c4d8:	81400417 	ldw	r5,16(r16)
    c4dc:	8809883a 	mov	r4,r17
    c4e0:	0006ad00 	call	6ad0 <_free_r>
    c4e4:	003fd906 	br	c44c <_fclose_r+0x6c>
    c4e8:	04bfffc4 	movi	r18,-1
    c4ec:	003fd406 	br	c440 <_fclose_r+0x60>

0000c4f0 <fclose>:
    c4f0:	00800074 	movhi	r2,1
    c4f4:	10917404 	addi	r2,r2,17872
    c4f8:	200b883a 	mov	r5,r4
    c4fc:	11000017 	ldw	r4,0(r2)
    c500:	000c3e01 	jmpi	c3e0 <_fclose_r>

0000c504 <_fstat_r>:
    c504:	defffd04 	addi	sp,sp,-12
    c508:	dc000015 	stw	r16,0(sp)
    c50c:	04000074 	movhi	r16,1
    c510:	84189604 	addi	r16,r16,25176
    c514:	dc400115 	stw	r17,4(sp)
    c518:	80000015 	stw	zero,0(r16)
    c51c:	2023883a 	mov	r17,r4
    c520:	2809883a 	mov	r4,r5
    c524:	300b883a 	mov	r5,r6
    c528:	dfc00215 	stw	ra,8(sp)
    c52c:	000f69c0 	call	f69c <fstat>
    c530:	1007883a 	mov	r3,r2
    c534:	00bfffc4 	movi	r2,-1
    c538:	18800626 	beq	r3,r2,c554 <_fstat_r+0x50>
    c53c:	1805883a 	mov	r2,r3
    c540:	dfc00217 	ldw	ra,8(sp)
    c544:	dc400117 	ldw	r17,4(sp)
    c548:	dc000017 	ldw	r16,0(sp)
    c54c:	dec00304 	addi	sp,sp,12
    c550:	f800283a 	ret
    c554:	80800017 	ldw	r2,0(r16)
    c558:	103ff826 	beq	r2,zero,c53c <_fstat_r+0x38>
    c55c:	88800015 	stw	r2,0(r17)
    c560:	1805883a 	mov	r2,r3
    c564:	dfc00217 	ldw	ra,8(sp)
    c568:	dc400117 	ldw	r17,4(sp)
    c56c:	dc000017 	ldw	r16,0(sp)
    c570:	dec00304 	addi	sp,sp,12
    c574:	f800283a 	ret

0000c578 <htinit>:
    c578:	28800003 	ldbu	r2,0(r5)
    c57c:	10000626 	beq	r2,zero,c598 <htinit+0x20>
    c580:	1105883a 	add	r2,r2,r4
    c584:	11800005 	stb	r6,0(r2)
    c588:	28800043 	ldbu	r2,1(r5)
    c58c:	31800044 	addi	r6,r6,1
    c590:	29400044 	addi	r5,r5,1
    c594:	103ffa1e 	bne	r2,zero,c580 <htinit+0x8>
    c598:	f800283a 	ret

0000c59c <__hexdig_init>:
    c59c:	defffd04 	addi	sp,sp,-12
    c5a0:	dc400015 	stw	r17,0(sp)
    c5a4:	04400074 	movhi	r17,1
    c5a8:	8c58a704 	addi	r17,r17,25244
    c5ac:	dcc00115 	stw	r19,4(sp)
    c5b0:	8809883a 	mov	r4,r17
    c5b4:	04c00684 	movi	r19,26
    c5b8:	01400074 	movhi	r5,1
    c5bc:	294a3c04 	addi	r5,r5,10480
    c5c0:	01800404 	movi	r6,16
    c5c4:	dfc00215 	stw	ra,8(sp)
    c5c8:	000c5780 	call	c578 <htinit>
    c5cc:	980d883a 	mov	r6,r19
    c5d0:	8809883a 	mov	r4,r17
    c5d4:	01400074 	movhi	r5,1
    c5d8:	294a3f04 	addi	r5,r5,10492
    c5dc:	000c5780 	call	c578 <htinit>
    c5e0:	8809883a 	mov	r4,r17
    c5e4:	980d883a 	mov	r6,r19
    c5e8:	01400074 	movhi	r5,1
    c5ec:	294a4104 	addi	r5,r5,10500
    c5f0:	dfc00217 	ldw	ra,8(sp)
    c5f4:	dcc00117 	ldw	r19,4(sp)
    c5f8:	dc400017 	ldw	r17,0(sp)
    c5fc:	dec00304 	addi	sp,sp,12
    c600:	000c5781 	jmpi	c578 <htinit>

0000c604 <rshift>:
    c604:	2807d17a 	srai	r3,r5,5
    c608:	20800417 	ldw	r2,16(r4)
    c60c:	22400504 	addi	r9,r4,20
    c610:	480f883a 	mov	r7,r9
    c614:	1880190e 	bge	r3,r2,c67c <rshift+0x78>
    c618:	1085883a 	add	r2,r2,r2
    c61c:	18c7883a 	add	r3,r3,r3
    c620:	1085883a 	add	r2,r2,r2
    c624:	18c7883a 	add	r3,r3,r3
    c628:	294007cc 	andi	r5,r5,31
    c62c:	4891883a 	add	r8,r9,r2
    c630:	48cd883a 	add	r6,r9,r3
    c634:	28001726 	beq	r5,zero,c694 <rshift+0x90>
    c638:	30c00017 	ldw	r3,0(r6)
    c63c:	00800804 	movi	r2,32
    c640:	31800104 	addi	r6,r6,4
    c644:	1155c83a 	sub	r10,r2,r5
    c648:	1946d83a 	srl	r3,r3,r5
    c64c:	3200092e 	bgeu	r6,r8,c674 <rshift+0x70>
    c650:	30800017 	ldw	r2,0(r6)
    c654:	1284983a 	sll	r2,r2,r10
    c658:	10c4b03a 	or	r2,r2,r3
    c65c:	38800015 	stw	r2,0(r7)
    c660:	30c00017 	ldw	r3,0(r6)
    c664:	31800104 	addi	r6,r6,4
    c668:	39c00104 	addi	r7,r7,4
    c66c:	1946d83a 	srl	r3,r3,r5
    c670:	323ff736 	bltu	r6,r8,c650 <rshift+0x4c>
    c674:	38c00015 	stw	r3,0(r7)
    c678:	18000c1e 	bne	r3,zero,c6ac <rshift+0xa8>
    c67c:	3a45c83a 	sub	r2,r7,r9
    c680:	1005d0ba 	srai	r2,r2,2
    c684:	20800415 	stw	r2,16(r4)
    c688:	1000011e 	bne	r2,zero,c690 <rshift+0x8c>
    c68c:	20000515 	stw	zero,20(r4)
    c690:	f800283a 	ret
    c694:	323ff92e 	bgeu	r6,r8,c67c <rshift+0x78>
    c698:	30800017 	ldw	r2,0(r6)
    c69c:	31800104 	addi	r6,r6,4
    c6a0:	38800015 	stw	r2,0(r7)
    c6a4:	39c00104 	addi	r7,r7,4
    c6a8:	003ffa06 	br	c694 <rshift+0x90>
    c6ac:	39c00104 	addi	r7,r7,4
    c6b0:	003ff206 	br	c67c <rshift+0x78>

0000c6b4 <__gethex>:
    c6b4:	defff304 	addi	sp,sp,-52
    c6b8:	dd400815 	stw	r21,32(sp)
    c6bc:	dd000715 	stw	r20,28(sp)
    c6c0:	dcc00615 	stw	r19,24(sp)
    c6c4:	dc400415 	stw	r17,16(sp)
    c6c8:	dfc00c15 	stw	ra,48(sp)
    c6cc:	df000b15 	stw	fp,44(sp)
    c6d0:	ddc00a15 	stw	r23,40(sp)
    c6d4:	dd800915 	stw	r22,36(sp)
    c6d8:	dc800515 	stw	r18,20(sp)
    c6dc:	dc000315 	stw	r16,12(sp)
    c6e0:	04400074 	movhi	r17,1
    c6e4:	8c58a704 	addi	r17,r17,25244
    c6e8:	88800c03 	ldbu	r2,48(r17)
    c6ec:	202b883a 	mov	r21,r4
    c6f0:	2827883a 	mov	r19,r5
    c6f4:	3029883a 	mov	r20,r6
    c6f8:	d9c00115 	stw	r7,4(sp)
    c6fc:	10006e26 	beq	r2,zero,c8b8 <__gethex+0x204>
    c700:	99800017 	ldw	r6,0(r19)
    c704:	00800c04 	movi	r2,48
    c708:	31000083 	ldbu	r4,2(r6)
    c70c:	30c00084 	addi	r3,r6,2
    c710:	20806f1e 	bne	r4,r2,c8d0 <__gethex+0x21c>
    c714:	200b883a 	mov	r5,r4
    c718:	3007883a 	mov	r3,r6
    c71c:	188000c3 	ldbu	r2,3(r3)
    c720:	18c00044 	addi	r3,r3,1
    c724:	1009883a 	mov	r4,r2
    c728:	117ffc26 	beq	r2,r5,c71c <__gethex+0x68>
    c72c:	1997c83a 	sub	r11,r3,r6
    c730:	19400084 	addi	r5,r3,2
    c734:	2445883a 	add	r2,r4,r17
    c738:	10c00003 	ldbu	r3,0(r2)
    c73c:	18002d26 	beq	r3,zero,c7f4 <__gethex+0x140>
    c740:	29000003 	ldbu	r4,0(r5)
    c744:	2825883a 	mov	r18,r5
    c748:	000d883a 	mov	r6,zero
    c74c:	0013883a 	mov	r9,zero
    c750:	21003fcc 	andi	r4,r4,255
    c754:	2445883a 	add	r2,r4,r17
    c758:	10c00003 	ldbu	r3,0(r2)
    c75c:	18000526 	beq	r3,zero,c774 <__gethex+0xc0>
    c760:	29400044 	addi	r5,r5,1
    c764:	29000003 	ldbu	r4,0(r5)
    c768:	2445883a 	add	r2,r4,r17
    c76c:	10c00003 	ldbu	r3,0(r2)
    c770:	183ffb1e 	bne	r3,zero,c760 <__gethex+0xac>
    c774:	00800b84 	movi	r2,46
    c778:	20805826 	beq	r4,r2,c8dc <__gethex+0x228>
    c77c:	30007a26 	beq	r6,zero,c968 <__gethex+0x2b4>
    c780:	2985c83a 	sub	r2,r5,r6
    c784:	1085883a 	add	r2,r2,r2
    c788:	1085883a 	add	r2,r2,r2
    c78c:	00adc83a 	sub	r22,zero,r2
    c790:	2821883a 	mov	r16,r5
    c794:	80c00003 	ldbu	r3,0(r16)
    c798:	00801404 	movi	r2,80
    c79c:	18801e26 	beq	r3,r2,c818 <__gethex+0x164>
    c7a0:	00801c04 	movi	r2,112
    c7a4:	18801c26 	beq	r3,r2,c818 <__gethex+0x164>
    c7a8:	800d883a 	mov	r6,r16
    c7ac:	4805003a 	cmpeq	r2,r9,zero
    c7b0:	99800015 	stw	r6,0(r19)
    c7b4:	1000861e 	bne	r2,zero,c9d0 <__gethex+0x31c>
    c7b8:	58003d26 	beq	r11,zero,c8b0 <__gethex+0x1fc>
    c7bc:	0025883a 	mov	r18,zero
    c7c0:	9005883a 	mov	r2,r18
    c7c4:	dfc00c17 	ldw	ra,48(sp)
    c7c8:	df000b17 	ldw	fp,44(sp)
    c7cc:	ddc00a17 	ldw	r23,40(sp)
    c7d0:	dd800917 	ldw	r22,36(sp)
    c7d4:	dd400817 	ldw	r21,32(sp)
    c7d8:	dd000717 	ldw	r20,28(sp)
    c7dc:	dcc00617 	ldw	r19,24(sp)
    c7e0:	dc800517 	ldw	r18,20(sp)
    c7e4:	dc400417 	ldw	r17,16(sp)
    c7e8:	dc000317 	ldw	r16,12(sp)
    c7ec:	dec00d04 	addi	sp,sp,52
    c7f0:	f800283a 	ret
    c7f4:	00800b84 	movi	r2,46
    c7f8:	20804a26 	beq	r4,r2,c924 <__gethex+0x270>
    c7fc:	2821883a 	mov	r16,r5
    c800:	80c00003 	ldbu	r3,0(r16)
    c804:	00801404 	movi	r2,80
    c808:	2825883a 	mov	r18,r5
    c80c:	02400044 	movi	r9,1
    c810:	002d883a 	mov	r22,zero
    c814:	18bfe21e 	bne	r3,r2,c7a0 <__gethex+0xec>
    c818:	80c00043 	ldbu	r3,1(r16)
    c81c:	00800ac4 	movi	r2,43
    c820:	81000044 	addi	r4,r16,1
    c824:	18804a26 	beq	r3,r2,c950 <__gethex+0x29c>
    c828:	00800b44 	movi	r2,45
    c82c:	18804c26 	beq	r3,r2,c960 <__gethex+0x2ac>
    c830:	0015883a 	mov	r10,zero
    c834:	1c45883a 	add	r2,r3,r17
    c838:	10800003 	ldbu	r2,0(r2)
    c83c:	103fda26 	beq	r2,zero,c7a8 <__gethex+0xf4>
    c840:	02000644 	movi	r8,25
    c844:	40bfd816 	blt	r8,r2,c7a8 <__gethex+0xf4>
    c848:	20c00043 	ldbu	r3,1(r4)
    c84c:	11fffc04 	addi	r7,r2,-16
    c850:	00800074 	movhi	r2,1
    c854:	1098a704 	addi	r2,r2,25244
    c858:	1887883a 	add	r3,r3,r2
    c85c:	18800003 	ldbu	r2,0(r3)
    c860:	21800044 	addi	r6,r4,1
    c864:	10000d26 	beq	r2,zero,c89c <__gethex+0x1e8>
    c868:	100b883a 	mov	r5,r2
    c86c:	4080020e 	bge	r8,r2,c878 <__gethex+0x1c4>
    c870:	00000a06 	br	c89c <__gethex+0x1e8>
    c874:	41000916 	blt	r8,r4,c89c <__gethex+0x1e8>
    c878:	31800044 	addi	r6,r6,1
    c87c:	30800003 	ldbu	r2,0(r6)
    c880:	38c002a4 	muli	r3,r7,10
    c884:	1445883a 	add	r2,r2,r17
    c888:	11000003 	ldbu	r4,0(r2)
    c88c:	1947883a 	add	r3,r3,r5
    c890:	19fffc04 	addi	r7,r3,-16
    c894:	200b883a 	mov	r5,r4
    c898:	203ff61e 	bne	r4,zero,c874 <__gethex+0x1c0>
    c89c:	5005003a 	cmpeq	r2,r10,zero
    c8a0:	1000011e 	bne	r2,zero,c8a8 <__gethex+0x1f4>
    c8a4:	01cfc83a 	sub	r7,zero,r7
    c8a8:	b1ed883a 	add	r22,r22,r7
    c8ac:	003fbf06 	br	c7ac <__gethex+0xf8>
    c8b0:	04800184 	movi	r18,6
    c8b4:	003fc206 	br	c7c0 <__gethex+0x10c>
    c8b8:	000c59c0 	call	c59c <__hexdig_init>
    c8bc:	99800017 	ldw	r6,0(r19)
    c8c0:	00800c04 	movi	r2,48
    c8c4:	31000083 	ldbu	r4,2(r6)
    c8c8:	30c00084 	addi	r3,r6,2
    c8cc:	20bf9126 	beq	r4,r2,c714 <__gethex+0x60>
    c8d0:	180b883a 	mov	r5,r3
    c8d4:	0017883a 	mov	r11,zero
    c8d8:	003f9606 	br	c734 <__gethex+0x80>
    c8dc:	303fa81e 	bne	r6,zero,c780 <__gethex+0xcc>
    c8e0:	29400044 	addi	r5,r5,1
    c8e4:	28800003 	ldbu	r2,0(r5)
    c8e8:	1445883a 	add	r2,r2,r17
    c8ec:	10c00003 	ldbu	r3,0(r2)
    c8f0:	1800ad26 	beq	r3,zero,cba8 <__gethex+0x4f4>
    c8f4:	2809883a 	mov	r4,r5
    c8f8:	21000044 	addi	r4,r4,1
    c8fc:	20800003 	ldbu	r2,0(r4)
    c900:	1445883a 	add	r2,r2,r17
    c904:	10c00003 	ldbu	r3,0(r2)
    c908:	183ffb1e 	bne	r3,zero,c8f8 <__gethex+0x244>
    c90c:	2145c83a 	sub	r2,r4,r5
    c910:	1085883a 	add	r2,r2,r2
    c914:	1085883a 	add	r2,r2,r2
    c918:	00adc83a 	sub	r22,zero,r2
    c91c:	200b883a 	mov	r5,r4
    c920:	003f9b06 	br	c790 <__gethex+0xdc>
    c924:	29000043 	ldbu	r4,1(r5)
    c928:	00800074 	movhi	r2,1
    c92c:	1098a704 	addi	r2,r2,25244
    c930:	2c000044 	addi	r16,r5,1
    c934:	2085883a 	add	r2,r4,r2
    c938:	10c00003 	ldbu	r3,0(r2)
    c93c:	18000d1e 	bne	r3,zero,c974 <__gethex+0x2c0>
    c940:	2825883a 	mov	r18,r5
    c944:	02400044 	movi	r9,1
    c948:	002d883a 	mov	r22,zero
    c94c:	003f9106 	br	c794 <__gethex+0xe0>
    c950:	0015883a 	mov	r10,zero
    c954:	21000044 	addi	r4,r4,1
    c958:	20c00003 	ldbu	r3,0(r4)
    c95c:	003fb506 	br	c834 <__gethex+0x180>
    c960:	02800044 	movi	r10,1
    c964:	003ffb06 	br	c954 <__gethex+0x2a0>
    c968:	2821883a 	mov	r16,r5
    c96c:	002d883a 	mov	r22,zero
    c970:	003f8806 	br	c794 <__gethex+0xe0>
    c974:	00800c04 	movi	r2,48
    c978:	20800e1e 	bne	r4,r2,c9b4 <__gethex+0x300>
    c97c:	2007883a 	mov	r3,r4
    c980:	800b883a 	mov	r5,r16
    c984:	29400044 	addi	r5,r5,1
    c988:	29000003 	ldbu	r4,0(r5)
    c98c:	20803fcc 	andi	r2,r4,255
    c990:	10fffc26 	beq	r2,r3,c984 <__gethex+0x2d0>
    c994:	1445883a 	add	r2,r2,r17
    c998:	10c00003 	ldbu	r3,0(r2)
    c99c:	1800071e 	bne	r3,zero,c9bc <__gethex+0x308>
    c9a0:	02c00044 	movi	r11,1
    c9a4:	800d883a 	mov	r6,r16
    c9a8:	2825883a 	mov	r18,r5
    c9ac:	5813883a 	mov	r9,r11
    c9b0:	003f6706 	br	c750 <__gethex+0x9c>
    c9b4:	81000003 	ldbu	r4,0(r16)
    c9b8:	800b883a 	mov	r5,r16
    c9bc:	800d883a 	mov	r6,r16
    c9c0:	2825883a 	mov	r18,r5
    c9c4:	02c00044 	movi	r11,1
    c9c8:	0013883a 	mov	r9,zero
    c9cc:	003f6006 	br	c750 <__gethex+0x9c>
    c9d0:	8485c83a 	sub	r2,r16,r18
    c9d4:	10bfffc4 	addi	r2,r2,-1
    c9d8:	00c001c4 	movi	r3,7
    c9dc:	1880700e 	bge	r3,r2,cba0 <__gethex+0x4ec>
    c9e0:	000b883a 	mov	r5,zero
    c9e4:	1005d07a 	srai	r2,r2,1
    c9e8:	29400044 	addi	r5,r5,1
    c9ec:	18bffd16 	blt	r3,r2,c9e4 <__gethex+0x330>
    c9f0:	a809883a 	mov	r4,r21
    c9f4:	00087400 	call	8740 <_Balloc>
    c9f8:	1027883a 	mov	r19,r2
    c9fc:	10800504 	addi	r2,r2,20
    ca00:	d8800215 	stw	r2,8(sp)
    ca04:	9400522e 	bgeu	r18,r16,cb50 <__gethex+0x49c>
    ca08:	da000217 	ldw	r8,8(sp)
    ca0c:	800b883a 	mov	r5,r16
    ca10:	000f883a 	mov	r7,zero
    ca14:	0009883a 	mov	r4,zero
    ca18:	02400b84 	movi	r9,46
    ca1c:	02800804 	movi	r10,32
    ca20:	297fffc4 	addi	r5,r5,-1
    ca24:	28c00003 	ldbu	r3,0(r5)
    ca28:	1a400826 	beq	r3,r9,ca4c <__gethex+0x398>
    ca2c:	380d883a 	mov	r6,r7
    ca30:	3a802726 	beq	r7,r10,cad0 <__gethex+0x41c>
    ca34:	39c00104 	addi	r7,r7,4
    ca38:	1c47883a 	add	r3,r3,r17
    ca3c:	18800003 	ldbu	r2,0(r3)
    ca40:	108003cc 	andi	r2,r2,15
    ca44:	1184983a 	sll	r2,r2,r6
    ca48:	2088b03a 	or	r4,r4,r2
    ca4c:	917ff436 	bltu	r18,r5,ca20 <__gethex+0x36c>
    ca50:	d8c00217 	ldw	r3,8(sp)
    ca54:	40800104 	addi	r2,r8,4
    ca58:	41000015 	stw	r4,0(r8)
    ca5c:	10c5c83a 	sub	r2,r2,r3
    ca60:	1021d0ba 	srai	r16,r2,2
    ca64:	9c000415 	stw	r16,16(r19)
    ca68:	00081e80 	call	81e8 <__hi0bits>
    ca6c:	8006917a 	slli	r3,r16,5
    ca70:	a5c00017 	ldw	r23,0(r20)
    ca74:	1885c83a 	sub	r2,r3,r2
    ca78:	b8801c16 	blt	r23,r2,caec <__gethex+0x438>
    ca7c:	15c00a16 	blt	r2,r23,caa8 <__gethex+0x3f4>
    ca80:	0039883a 	mov	fp,zero
    ca84:	a0800217 	ldw	r2,8(r20)
    ca88:	1580340e 	bge	r2,r22,cb5c <__gethex+0x4a8>
    ca8c:	a809883a 	mov	r4,r21
    ca90:	980b883a 	mov	r5,r19
    ca94:	00081c00 	call	81c0 <_Bfree>
    ca98:	d8c00d17 	ldw	r3,52(sp)
    ca9c:	048028c4 	movi	r18,163
    caa0:	18000015 	stw	zero,0(r3)
    caa4:	003f4606 	br	c7c0 <__gethex+0x10c>
    caa8:	b8a1c83a 	sub	r16,r23,r2
    caac:	980b883a 	mov	r5,r19
    cab0:	a809883a 	mov	r4,r21
    cab4:	800d883a 	mov	r6,r16
    cab8:	0008b040 	call	8b04 <__lshift>
    cabc:	1027883a 	mov	r19,r2
    cac0:	b42dc83a 	sub	r22,r22,r16
    cac4:	10800504 	addi	r2,r2,20
    cac8:	d8800215 	stw	r2,8(sp)
    cacc:	003fec06 	br	ca80 <__gethex+0x3cc>
    cad0:	41000015 	stw	r4,0(r8)
    cad4:	28c00003 	ldbu	r3,0(r5)
    cad8:	01c00104 	movi	r7,4
    cadc:	000d883a 	mov	r6,zero
    cae0:	41d1883a 	add	r8,r8,r7
    cae4:	0009883a 	mov	r4,zero
    cae8:	003fd306 	br	ca38 <__gethex+0x384>
    caec:	15e1c83a 	sub	r16,r2,r23
    caf0:	9809883a 	mov	r4,r19
    caf4:	800b883a 	mov	r5,r16
    caf8:	00086b80 	call	86b8 <__any_on>
    cafc:	1000061e 	bne	r2,zero,cb18 <__gethex+0x464>
    cb00:	0039883a 	mov	fp,zero
    cb04:	9809883a 	mov	r4,r19
    cb08:	800b883a 	mov	r5,r16
    cb0c:	000c6040 	call	c604 <rshift>
    cb10:	b42d883a 	add	r22,r22,r16
    cb14:	003fdb06 	br	ca84 <__gethex+0x3d0>
    cb18:	817fffc4 	addi	r5,r16,-1
    cb1c:	2805d17a 	srai	r2,r5,5
    cb20:	d8c00217 	ldw	r3,8(sp)
    cb24:	290007cc 	andi	r4,r5,31
    cb28:	1085883a 	add	r2,r2,r2
    cb2c:	1085883a 	add	r2,r2,r2
    cb30:	01800044 	movi	r6,1
    cb34:	10c5883a 	add	r2,r2,r3
    cb38:	3108983a 	sll	r4,r6,r4
    cb3c:	10c00017 	ldw	r3,0(r2)
    cb40:	20c8703a 	and	r4,r4,r3
    cb44:	20001a1e 	bne	r4,zero,cbb0 <__gethex+0x4fc>
    cb48:	3039883a 	mov	fp,r6
    cb4c:	003fed06 	br	cb04 <__gethex+0x450>
    cb50:	1011883a 	mov	r8,r2
    cb54:	0009883a 	mov	r4,zero
    cb58:	003fbd06 	br	ca50 <__gethex+0x39c>
    cb5c:	a1000117 	ldw	r4,4(r20)
    cb60:	b1001a16 	blt	r22,r4,cbcc <__gethex+0x518>
    cb64:	04800044 	movi	r18,1
    cb68:	e0000826 	beq	fp,zero,cb8c <__gethex+0x4d8>
    cb6c:	a1000317 	ldw	r4,12(r20)
    cb70:	00800084 	movi	r2,2
    cb74:	20809426 	beq	r4,r2,cdc8 <__gethex+0x714>
    cb78:	008000c4 	movi	r2,3
    cb7c:	20805826 	beq	r4,r2,cce0 <__gethex+0x62c>
    cb80:	00800044 	movi	r2,1
    cb84:	20803f26 	beq	r4,r2,cc84 <__gethex+0x5d0>
    cb88:	94800414 	ori	r18,r18,16
    cb8c:	d8800d17 	ldw	r2,52(sp)
    cb90:	d8c00117 	ldw	r3,4(sp)
    cb94:	14c00015 	stw	r19,0(r2)
    cb98:	1d800015 	stw	r22,0(r3)
    cb9c:	003f0806 	br	c7c0 <__gethex+0x10c>
    cba0:	000b883a 	mov	r5,zero
    cba4:	003f9206 	br	c9f0 <__gethex+0x33c>
    cba8:	002d883a 	mov	r22,zero
    cbac:	003ef806 	br	c790 <__gethex+0xdc>
    cbb0:	3140160e 	bge	r6,r5,cc0c <__gethex+0x558>
    cbb4:	9809883a 	mov	r4,r19
    cbb8:	817fff84 	addi	r5,r16,-2
    cbbc:	00086b80 	call	86b8 <__any_on>
    cbc0:	10001226 	beq	r2,zero,cc0c <__gethex+0x558>
    cbc4:	070000c4 	movi	fp,3
    cbc8:	003fce06 	br	cb04 <__gethex+0x450>
    cbcc:	25a3c83a 	sub	r17,r4,r22
    cbd0:	8dc01016 	blt	r17,r23,cc14 <__gethex+0x560>
    cbd4:	a0c00317 	ldw	r3,12(r20)
    cbd8:	00800084 	movi	r2,2
    cbdc:	18809326 	beq	r3,r2,ce2c <__gethex+0x778>
    cbe0:	008000c4 	movi	r2,3
    cbe4:	18808e26 	beq	r3,r2,ce20 <__gethex+0x76c>
    cbe8:	00800044 	movi	r2,1
    cbec:	18807b26 	beq	r3,r2,cddc <__gethex+0x728>
    cbf0:	a809883a 	mov	r4,r21
    cbf4:	980b883a 	mov	r5,r19
    cbf8:	00081c00 	call	81c0 <_Bfree>
    cbfc:	d8c00d17 	ldw	r3,52(sp)
    cc00:	04801404 	movi	r18,80
    cc04:	18000015 	stw	zero,0(r3)
    cc08:	003eed06 	br	c7c0 <__gethex+0x10c>
    cc0c:	07000084 	movi	fp,2
    cc10:	003fbc06 	br	cb04 <__gethex+0x450>
    cc14:	8c3fffc4 	addi	r16,r17,-1
    cc18:	e0001426 	beq	fp,zero,cc6c <__gethex+0x5b8>
    cc1c:	07000044 	movi	fp,1
    cc20:	8005d17a 	srai	r2,r16,5
    cc24:	d8c00217 	ldw	r3,8(sp)
    cc28:	814007cc 	andi	r5,r16,31
    cc2c:	1085883a 	add	r2,r2,r2
    cc30:	1085883a 	add	r2,r2,r2
    cc34:	10c5883a 	add	r2,r2,r3
    cc38:	00c00044 	movi	r3,1
    cc3c:	1946983a 	sll	r3,r3,r5
    cc40:	11000017 	ldw	r4,0(r2)
    cc44:	1906703a 	and	r3,r3,r4
    cc48:	18000126 	beq	r3,zero,cc50 <__gethex+0x59c>
    cc4c:	e7000094 	ori	fp,fp,2
    cc50:	880b883a 	mov	r5,r17
    cc54:	9809883a 	mov	r4,r19
    cc58:	000c6040 	call	c604 <rshift>
    cc5c:	a5800117 	ldw	r22,4(r20)
    cc60:	bc6fc83a 	sub	r23,r23,r17
    cc64:	04800084 	movi	r18,2
    cc68:	003fbf06 	br	cb68 <__gethex+0x4b4>
    cc6c:	043fec0e 	bge	zero,r16,cc20 <__gethex+0x56c>
    cc70:	9809883a 	mov	r4,r19
    cc74:	800b883a 	mov	r5,r16
    cc78:	00086b80 	call	86b8 <__any_on>
    cc7c:	1039883a 	mov	fp,r2
    cc80:	003fe706 	br	cc20 <__gethex+0x56c>
    cc84:	e080008c 	andi	r2,fp,2
    cc88:	103fbf26 	beq	r2,zero,cb88 <__gethex+0x4d4>
    cc8c:	d8c00217 	ldw	r3,8(sp)
    cc90:	18800017 	ldw	r2,0(r3)
    cc94:	e084b03a 	or	r2,fp,r2
    cc98:	1104703a 	and	r2,r2,r4
    cc9c:	103fba26 	beq	r2,zero,cb88 <__gethex+0x4d4>
    cca0:	9c000417 	ldw	r16,16(r19)
    cca4:	d8c00217 	ldw	r3,8(sp)
    cca8:	017fffc4 	movi	r5,-1
    ccac:	8405883a 	add	r2,r16,r16
    ccb0:	10b9883a 	add	fp,r2,r2
    ccb4:	1f09883a 	add	r4,r3,fp
    ccb8:	dc000015 	stw	r16,0(sp)
    ccbc:	00000306 	br	cccc <__gethex+0x618>
    ccc0:	18000015 	stw	zero,0(r3)
    ccc4:	18c00104 	addi	r3,r3,4
    ccc8:	1900082e 	bgeu	r3,r4,ccec <__gethex+0x638>
    cccc:	18800017 	ldw	r2,0(r3)
    ccd0:	117ffb26 	beq	r2,r5,ccc0 <__gethex+0x60c>
    ccd4:	10800044 	addi	r2,r2,1
    ccd8:	18800015 	stw	r2,0(r3)
    ccdc:	00001f06 	br	cd5c <__gethex+0x6a8>
    cce0:	d8800e17 	ldw	r2,56(sp)
    cce4:	103fa826 	beq	r2,zero,cb88 <__gethex+0x4d4>
    cce8:	003fed06 	br	cca0 <__gethex+0x5ec>
    ccec:	98800217 	ldw	r2,8(r19)
    ccf0:	80801316 	blt	r16,r2,cd40 <__gethex+0x68c>
    ccf4:	99400117 	ldw	r5,4(r19)
    ccf8:	a809883a 	mov	r4,r21
    ccfc:	29400044 	addi	r5,r5,1
    cd00:	00087400 	call	8740 <_Balloc>
    cd04:	99800417 	ldw	r6,16(r19)
    cd08:	99400304 	addi	r5,r19,12
    cd0c:	11000304 	addi	r4,r2,12
    cd10:	318d883a 	add	r6,r6,r6
    cd14:	318d883a 	add	r6,r6,r6
    cd18:	31800204 	addi	r6,r6,8
    cd1c:	1023883a 	mov	r17,r2
    cd20:	0007fa80 	call	7fa8 <memcpy>
    cd24:	980b883a 	mov	r5,r19
    cd28:	a809883a 	mov	r4,r21
    cd2c:	00081c00 	call	81c0 <_Bfree>
    cd30:	8c000417 	ldw	r16,16(r17)
    cd34:	88800504 	addi	r2,r17,20
    cd38:	8827883a 	mov	r19,r17
    cd3c:	d8800215 	stw	r2,8(sp)
    cd40:	8405883a 	add	r2,r16,r16
    cd44:	1085883a 	add	r2,r2,r2
    cd48:	14c5883a 	add	r2,r2,r19
    cd4c:	84000044 	addi	r16,r16,1
    cd50:	00c00044 	movi	r3,1
    cd54:	10c00515 	stw	r3,20(r2)
    cd58:	9c000415 	stw	r16,16(r19)
    cd5c:	00800084 	movi	r2,2
    cd60:	90801426 	beq	r18,r2,cdb4 <__gethex+0x700>
    cd64:	d8800017 	ldw	r2,0(sp)
    cd68:	14000b16 	blt	r2,r16,cd98 <__gethex+0x6e4>
    cd6c:	bc0007cc 	andi	r16,r23,31
    cd70:	8000021e 	bne	r16,zero,cd7c <__gethex+0x6c8>
    cd74:	94800814 	ori	r18,r18,32
    cd78:	003f8406 	br	cb8c <__gethex+0x4d8>
    cd7c:	d8c00217 	ldw	r3,8(sp)
    cd80:	1f05883a 	add	r2,r3,fp
    cd84:	113fff17 	ldw	r4,-4(r2)
    cd88:	00081e80 	call	81e8 <__hi0bits>
    cd8c:	00c00804 	movi	r3,32
    cd90:	1c07c83a 	sub	r3,r3,r16
    cd94:	10fff70e 	bge	r2,r3,cd74 <__gethex+0x6c0>
    cd98:	9809883a 	mov	r4,r19
    cd9c:	01400044 	movi	r5,1
    cda0:	000c6040 	call	c604 <rshift>
    cda4:	a0800217 	ldw	r2,8(r20)
    cda8:	b5800044 	addi	r22,r22,1
    cdac:	15bf3716 	blt	r2,r22,ca8c <__gethex+0x3d8>
    cdb0:	003ff006 	br	cd74 <__gethex+0x6c0>
    cdb4:	a0800017 	ldw	r2,0(r20)
    cdb8:	10bfffc4 	addi	r2,r2,-1
    cdbc:	b8801e26 	beq	r23,r2,ce38 <__gethex+0x784>
    cdc0:	04800884 	movi	r18,34
    cdc4:	003f7106 	br	cb8c <__gethex+0x4d8>
    cdc8:	d8c00e17 	ldw	r3,56(sp)
    cdcc:	00800044 	movi	r2,1
    cdd0:	10c5c83a 	sub	r2,r2,r3
    cdd4:	103f6c26 	beq	r2,zero,cb88 <__gethex+0x4d4>
    cdd8:	003fb106 	br	cca0 <__gethex+0x5ec>
    cddc:	bc7f841e 	bne	r23,r17,cbf0 <__gethex+0x53c>
    cde0:	1dc0050e 	bge	r3,r23,cdf8 <__gethex+0x744>
    cde4:	b8cbc83a 	sub	r5,r23,r3
    cde8:	9809883a 	mov	r4,r19
    cdec:	00086b80 	call	86b8 <__any_on>
    cdf0:	103f7f26 	beq	r2,zero,cbf0 <__gethex+0x53c>
    cdf4:	a1000117 	ldw	r4,4(r20)
    cdf8:	d8800117 	ldw	r2,4(sp)
    cdfc:	d8c00217 	ldw	r3,8(sp)
    ce00:	04000044 	movi	r16,1
    ce04:	11000015 	stw	r4,0(r2)
    ce08:	d8800d17 	ldw	r2,52(sp)
    ce0c:	04801884 	movi	r18,98
    ce10:	1c000015 	stw	r16,0(r3)
    ce14:	14c00015 	stw	r19,0(r2)
    ce18:	9c000415 	stw	r16,16(r19)
    ce1c:	003e6806 	br	c7c0 <__gethex+0x10c>
    ce20:	d8c00e17 	ldw	r3,56(sp)
    ce24:	183f7226 	beq	r3,zero,cbf0 <__gethex+0x53c>
    ce28:	003ff306 	br	cdf8 <__gethex+0x744>
    ce2c:	d8800e17 	ldw	r2,56(sp)
    ce30:	103ff126 	beq	r2,zero,cdf8 <__gethex+0x744>
    ce34:	003f6e06 	br	cbf0 <__gethex+0x53c>
    ce38:	b805d17a 	srai	r2,r23,5
    ce3c:	d8c00217 	ldw	r3,8(sp)
    ce40:	b94007cc 	andi	r5,r23,31
    ce44:	1085883a 	add	r2,r2,r2
    ce48:	1085883a 	add	r2,r2,r2
    ce4c:	10c5883a 	add	r2,r2,r3
    ce50:	00c00044 	movi	r3,1
    ce54:	1946983a 	sll	r3,r3,r5
    ce58:	11000017 	ldw	r4,0(r2)
    ce5c:	1906703a 	and	r3,r3,r4
    ce60:	183fd726 	beq	r3,zero,cdc0 <__gethex+0x70c>
    ce64:	04800844 	movi	r18,33
    ce68:	003f4806 	br	cb8c <__gethex+0x4d8>

0000ce6c <L_shift>:
    ce6c:	00800204 	movi	r2,8
    ce70:	1185c83a 	sub	r2,r2,r6
    ce74:	1085883a 	add	r2,r2,r2
    ce78:	21c00017 	ldw	r7,0(r4)
    ce7c:	1093883a 	add	r9,r2,r2
    ce80:	00800804 	movi	r2,32
    ce84:	200d883a 	mov	r6,r4
    ce88:	1251c83a 	sub	r8,r2,r9
    ce8c:	31800104 	addi	r6,r6,4
    ce90:	3805883a 	mov	r2,r7
    ce94:	31c00017 	ldw	r7,0(r6)
    ce98:	3a08983a 	sll	r4,r7,r8
    ce9c:	3a46d83a 	srl	r3,r7,r9
    cea0:	1104b03a 	or	r2,r2,r4
    cea4:	180f883a 	mov	r7,r3
    cea8:	30bfff15 	stw	r2,-4(r6)
    ceac:	30c00015 	stw	r3,0(r6)
    ceb0:	317ff636 	bltu	r6,r5,ce8c <L_shift+0x20>
    ceb4:	f800283a 	ret

0000ceb8 <__hexnan>:
    ceb8:	defff404 	addi	sp,sp,-48
    cebc:	dd800815 	stw	r22,32(sp)
    cec0:	05800074 	movhi	r22,1
    cec4:	b598a704 	addi	r22,r22,25244
    cec8:	b0800c03 	ldbu	r2,48(r22)
    cecc:	dcc00515 	stw	r19,20(sp)
    ced0:	dc000215 	stw	r16,8(sp)
    ced4:	dfc00b15 	stw	ra,44(sp)
    ced8:	df000a15 	stw	fp,40(sp)
    cedc:	ddc00915 	stw	r23,36(sp)
    cee0:	dd400715 	stw	r21,28(sp)
    cee4:	dd000615 	stw	r20,24(sp)
    cee8:	dc800415 	stw	r18,16(sp)
    ceec:	dc400315 	stw	r17,12(sp)
    cef0:	d9000115 	stw	r4,4(sp)
    cef4:	2821883a 	mov	r16,r5
    cef8:	3027883a 	mov	r19,r6
    cefc:	10007426 	beq	r2,zero,d0d0 <__hexnan+0x218>
    cf00:	80c00017 	ldw	r3,0(r16)
    cf04:	1805d17a 	srai	r2,r3,5
    cf08:	18c007cc 	andi	r3,r3,31
    cf0c:	1839003a 	cmpeq	fp,r3,zero
    cf10:	1085883a 	add	r2,r2,r2
    cf14:	1085883a 	add	r2,r2,r2
    cf18:	d8c00015 	stw	r3,0(sp)
    cf1c:	14c5883a 	add	r2,r2,r19
    cf20:	e000011e 	bne	fp,zero,cf28 <__hexnan+0x70>
    cf24:	10800104 	addi	r2,r2,4
    cf28:	d8c00117 	ldw	r3,4(sp)
    cf2c:	153fff04 	addi	r20,r2,-4
    cf30:	a021883a 	mov	r16,r20
    cf34:	1c400017 	ldw	r17,0(r3)
    cf38:	a02b883a 	mov	r21,r20
    cf3c:	0025883a 	mov	r18,zero
    cf40:	002f883a 	mov	r23,zero
    cf44:	000d883a 	mov	r6,zero
    cf48:	103fff15 	stw	zero,-4(r2)
    cf4c:	8c400044 	addi	r17,r17,1
    cf50:	89000003 	ldbu	r4,0(r17)
    cf54:	20000e26 	beq	r4,zero,cf90 <__hexnan+0xd8>
    cf58:	2585883a 	add	r2,r4,r22
    cf5c:	10c00003 	ldbu	r3,0(r2)
    cf60:	18002e1e 	bne	r3,zero,d01c <__hexnan+0x164>
    cf64:	00800804 	movi	r2,32
    cf68:	11005536 	bltu	r2,r4,d0c0 <__hexnan+0x208>
    cf6c:	bcbff70e 	bge	r23,r18,cf4c <__hexnan+0x94>
    cf70:	8540022e 	bgeu	r16,r21,cf7c <__hexnan+0xc4>
    cf74:	008001c4 	movi	r2,7
    cf78:	11803c0e 	bge	r2,r6,d06c <__hexnan+0x1b4>
    cf7c:	9c003536 	bltu	r19,r16,d054 <__hexnan+0x19c>
    cf80:	8c400044 	addi	r17,r17,1
    cf84:	89000003 	ldbu	r4,0(r17)
    cf88:	01800204 	movi	r6,8
    cf8c:	203ff21e 	bne	r4,zero,cf58 <__hexnan+0xa0>
    cf90:	90004d26 	beq	r18,zero,d0c8 <__hexnan+0x210>
    cf94:	85404336 	bltu	r16,r21,d0a4 <__hexnan+0x1ec>
    cf98:	9c00382e 	bgeu	r19,r16,d07c <__hexnan+0x1c4>
    cf9c:	9807883a 	mov	r3,r19
    cfa0:	80800017 	ldw	r2,0(r16)
    cfa4:	84000104 	addi	r16,r16,4
    cfa8:	18800015 	stw	r2,0(r3)
    cfac:	18c00104 	addi	r3,r3,4
    cfb0:	a43ffb2e 	bgeu	r20,r16,cfa0 <__hexnan+0xe8>
    cfb4:	18000015 	stw	zero,0(r3)
    cfb8:	18c00104 	addi	r3,r3,4
    cfbc:	a0fffd2e 	bgeu	r20,r3,cfb4 <__hexnan+0xfc>
    cfc0:	a0800017 	ldw	r2,0(r20)
    cfc4:	1000071e 	bne	r2,zero,cfe4 <__hexnan+0x12c>
    cfc8:	9d004326 	beq	r19,r20,d0d8 <__hexnan+0x220>
    cfcc:	a007883a 	mov	r3,r20
    cfd0:	00000106 	br	cfd8 <__hexnan+0x120>
    cfd4:	98c04026 	beq	r19,r3,d0d8 <__hexnan+0x220>
    cfd8:	18ffff04 	addi	r3,r3,-4
    cfdc:	18800017 	ldw	r2,0(r3)
    cfe0:	103ffc26 	beq	r2,zero,cfd4 <__hexnan+0x11c>
    cfe4:	00c00144 	movi	r3,5
    cfe8:	1805883a 	mov	r2,r3
    cfec:	dfc00b17 	ldw	ra,44(sp)
    cff0:	df000a17 	ldw	fp,40(sp)
    cff4:	ddc00917 	ldw	r23,36(sp)
    cff8:	dd800817 	ldw	r22,32(sp)
    cffc:	dd400717 	ldw	r21,28(sp)
    d000:	dd000617 	ldw	r20,24(sp)
    d004:	dcc00517 	ldw	r19,20(sp)
    d008:	dc800417 	ldw	r18,16(sp)
    d00c:	dc400317 	ldw	r17,12(sp)
    d010:	dc000217 	ldw	r16,8(sp)
    d014:	dec00c04 	addi	sp,sp,48
    d018:	f800283a 	ret
    d01c:	31800044 	addi	r6,r6,1
    d020:	00800204 	movi	r2,8
    d024:	94800044 	addi	r18,r18,1
    d028:	1180040e 	bge	r2,r6,d03c <__hexnan+0x184>
    d02c:	9c3fc72e 	bgeu	r19,r16,cf4c <__hexnan+0x94>
    d030:	843fff04 	addi	r16,r16,-4
    d034:	80000015 	stw	zero,0(r16)
    d038:	01800044 	movi	r6,1
    d03c:	80800017 	ldw	r2,0(r16)
    d040:	18c003cc 	andi	r3,r3,15
    d044:	1004913a 	slli	r2,r2,4
    d048:	10c4b03a 	or	r2,r2,r3
    d04c:	80800015 	stw	r2,0(r16)
    d050:	003fbe06 	br	cf4c <__hexnan+0x94>
    d054:	843fff04 	addi	r16,r16,-4
    d058:	802b883a 	mov	r21,r16
    d05c:	902f883a 	mov	r23,r18
    d060:	000d883a 	mov	r6,zero
    d064:	80000015 	stw	zero,0(r16)
    d068:	003fb806 	br	cf4c <__hexnan+0x94>
    d06c:	8009883a 	mov	r4,r16
    d070:	a80b883a 	mov	r5,r21
    d074:	000ce6c0 	call	ce6c <L_shift>
    d078:	003fc006 	br	cf7c <__hexnan+0xc4>
    d07c:	e03fd01e 	bne	fp,zero,cfc0 <__hexnan+0x108>
    d080:	d8c00017 	ldw	r3,0(sp)
    d084:	00800804 	movi	r2,32
    d088:	10c5c83a 	sub	r2,r2,r3
    d08c:	00ffffc4 	movi	r3,-1
    d090:	1886d83a 	srl	r3,r3,r2
    d094:	a0800017 	ldw	r2,0(r20)
    d098:	10c4703a 	and	r2,r2,r3
    d09c:	a0800015 	stw	r2,0(r20)
    d0a0:	003fc806 	br	cfc4 <__hexnan+0x10c>
    d0a4:	008001c4 	movi	r2,7
    d0a8:	11bfbb16 	blt	r2,r6,cf98 <__hexnan+0xe0>
    d0ac:	a80b883a 	mov	r5,r21
    d0b0:	8009883a 	mov	r4,r16
    d0b4:	000ce6c0 	call	ce6c <L_shift>
    d0b8:	9c3ff02e 	bgeu	r19,r16,d07c <__hexnan+0x1c4>
    d0bc:	003fb706 	br	cf9c <__hexnan+0xe4>
    d0c0:	00800a44 	movi	r2,41
    d0c4:	20800826 	beq	r4,r2,d0e8 <__hexnan+0x230>
    d0c8:	00c00104 	movi	r3,4
    d0cc:	003fc606 	br	cfe8 <__hexnan+0x130>
    d0d0:	000c59c0 	call	c59c <__hexdig_init>
    d0d4:	003f8a06 	br	cf00 <__hexnan+0x48>
    d0d8:	00800044 	movi	r2,1
    d0dc:	00c00144 	movi	r3,5
    d0e0:	98800015 	stw	r2,0(r19)
    d0e4:	003fc006 	br	cfe8 <__hexnan+0x130>
    d0e8:	903ff726 	beq	r18,zero,d0c8 <__hexnan+0x210>
    d0ec:	d8c00117 	ldw	r3,4(sp)
    d0f0:	88800044 	addi	r2,r17,1
    d0f4:	18800015 	stw	r2,0(r3)
    d0f8:	857fa72e 	bgeu	r16,r21,cf98 <__hexnan+0xe0>
    d0fc:	003fe906 	br	d0a4 <__hexnan+0x1ec>

0000d100 <_isatty_r>:
    d100:	defffd04 	addi	sp,sp,-12
    d104:	dc000015 	stw	r16,0(sp)
    d108:	04000074 	movhi	r16,1
    d10c:	84189604 	addi	r16,r16,25176
    d110:	dc400115 	stw	r17,4(sp)
    d114:	80000015 	stw	zero,0(r16)
    d118:	2023883a 	mov	r17,r4
    d11c:	2809883a 	mov	r4,r5
    d120:	dfc00215 	stw	ra,8(sp)
    d124:	000f71c0 	call	f71c <isatty>
    d128:	1007883a 	mov	r3,r2
    d12c:	00bfffc4 	movi	r2,-1
    d130:	18800626 	beq	r3,r2,d14c <_isatty_r+0x4c>
    d134:	1805883a 	mov	r2,r3
    d138:	dfc00217 	ldw	ra,8(sp)
    d13c:	dc400117 	ldw	r17,4(sp)
    d140:	dc000017 	ldw	r16,0(sp)
    d144:	dec00304 	addi	sp,sp,12
    d148:	f800283a 	ret
    d14c:	80800017 	ldw	r2,0(r16)
    d150:	103ff826 	beq	r2,zero,d134 <_isatty_r+0x34>
    d154:	88800015 	stw	r2,0(r17)
    d158:	1805883a 	mov	r2,r3
    d15c:	dfc00217 	ldw	ra,8(sp)
    d160:	dc400117 	ldw	r17,4(sp)
    d164:	dc000017 	ldw	r16,0(sp)
    d168:	dec00304 	addi	sp,sp,12
    d16c:	f800283a 	ret

0000d170 <_lseek_r>:
    d170:	defffd04 	addi	sp,sp,-12
    d174:	dc000015 	stw	r16,0(sp)
    d178:	04000074 	movhi	r16,1
    d17c:	84189604 	addi	r16,r16,25176
    d180:	dc400115 	stw	r17,4(sp)
    d184:	80000015 	stw	zero,0(r16)
    d188:	2023883a 	mov	r17,r4
    d18c:	2809883a 	mov	r4,r5
    d190:	300b883a 	mov	r5,r6
    d194:	380d883a 	mov	r6,r7
    d198:	dfc00215 	stw	ra,8(sp)
    d19c:	000f8640 	call	f864 <lseek>
    d1a0:	1007883a 	mov	r3,r2
    d1a4:	00bfffc4 	movi	r2,-1
    d1a8:	18800626 	beq	r3,r2,d1c4 <_lseek_r+0x54>
    d1ac:	1805883a 	mov	r2,r3
    d1b0:	dfc00217 	ldw	ra,8(sp)
    d1b4:	dc400117 	ldw	r17,4(sp)
    d1b8:	dc000017 	ldw	r16,0(sp)
    d1bc:	dec00304 	addi	sp,sp,12
    d1c0:	f800283a 	ret
    d1c4:	80800017 	ldw	r2,0(r16)
    d1c8:	103ff826 	beq	r2,zero,d1ac <_lseek_r+0x3c>
    d1cc:	88800015 	stw	r2,0(r17)
    d1d0:	1805883a 	mov	r2,r3
    d1d4:	dfc00217 	ldw	ra,8(sp)
    d1d8:	dc400117 	ldw	r17,4(sp)
    d1dc:	dc000017 	ldw	r16,0(sp)
    d1e0:	dec00304 	addi	sp,sp,12
    d1e4:	f800283a 	ret

0000d1e8 <_read_r>:
    d1e8:	defffd04 	addi	sp,sp,-12
    d1ec:	dc000015 	stw	r16,0(sp)
    d1f0:	04000074 	movhi	r16,1
    d1f4:	84189604 	addi	r16,r16,25176
    d1f8:	dc400115 	stw	r17,4(sp)
    d1fc:	80000015 	stw	zero,0(r16)
    d200:	2023883a 	mov	r17,r4
    d204:	2809883a 	mov	r4,r5
    d208:	300b883a 	mov	r5,r6
    d20c:	380d883a 	mov	r6,r7
    d210:	dfc00215 	stw	ra,8(sp)
    d214:	000fb580 	call	fb58 <read>
    d218:	1007883a 	mov	r3,r2
    d21c:	00bfffc4 	movi	r2,-1
    d220:	18800626 	beq	r3,r2,d23c <_read_r+0x54>
    d224:	1805883a 	mov	r2,r3
    d228:	dfc00217 	ldw	ra,8(sp)
    d22c:	dc400117 	ldw	r17,4(sp)
    d230:	dc000017 	ldw	r16,0(sp)
    d234:	dec00304 	addi	sp,sp,12
    d238:	f800283a 	ret
    d23c:	80800017 	ldw	r2,0(r16)
    d240:	103ff826 	beq	r2,zero,d224 <_read_r+0x3c>
    d244:	88800015 	stw	r2,0(r17)
    d248:	1805883a 	mov	r2,r3
    d24c:	dfc00217 	ldw	ra,8(sp)
    d250:	dc400117 	ldw	r17,4(sp)
    d254:	dc000017 	ldw	r16,0(sp)
    d258:	dec00304 	addi	sp,sp,12
    d25c:	f800283a 	ret

0000d260 <__muldi3>:
    d260:	2011883a 	mov	r8,r4
    d264:	427fffcc 	andi	r9,r8,65535
    d268:	4018d43a 	srli	r12,r8,16
    d26c:	32bfffcc 	andi	r10,r6,65535
    d270:	3016d43a 	srli	r11,r6,16
    d274:	4a85383a 	mul	r2,r9,r10
    d278:	6295383a 	mul	r10,r12,r10
    d27c:	4ad3383a 	mul	r9,r9,r11
    d280:	113fffcc 	andi	r4,r2,65535
    d284:	1004d43a 	srli	r2,r2,16
    d288:	4a93883a 	add	r9,r9,r10
    d28c:	3807883a 	mov	r3,r7
    d290:	1245883a 	add	r2,r2,r9
    d294:	280f883a 	mov	r7,r5
    d298:	180b883a 	mov	r5,r3
    d29c:	1006943a 	slli	r3,r2,16
    d2a0:	defffd04 	addi	sp,sp,-12
    d2a4:	dc800215 	stw	r18,8(sp)
    d2a8:	1907883a 	add	r3,r3,r4
    d2ac:	dc400115 	stw	r17,4(sp)
    d2b0:	dc000015 	stw	r16,0(sp)
    d2b4:	4165383a 	mul	r18,r8,r5
    d2b8:	31e3383a 	mul	r17,r6,r7
    d2bc:	1012d43a 	srli	r9,r2,16
    d2c0:	62d9383a 	mul	r12,r12,r11
    d2c4:	181f883a 	mov	r15,r3
    d2c8:	1280022e 	bgeu	r2,r10,d2d4 <__muldi3+0x74>
    d2cc:	00800074 	movhi	r2,1
    d2d0:	6099883a 	add	r12,r12,r2
    d2d4:	624d883a 	add	r6,r12,r9
    d2d8:	9187883a 	add	r3,r18,r6
    d2dc:	88c7883a 	add	r3,r17,r3
    d2e0:	7805883a 	mov	r2,r15
    d2e4:	dc800217 	ldw	r18,8(sp)
    d2e8:	dc400117 	ldw	r17,4(sp)
    d2ec:	dc000017 	ldw	r16,0(sp)
    d2f0:	dec00304 	addi	sp,sp,12
    d2f4:	f800283a 	ret

0000d2f8 <__fixunsdfsi>:
    d2f8:	defffb04 	addi	sp,sp,-20
    d2fc:	dc400115 	stw	r17,4(sp)
    d300:	dc000015 	stw	r16,0(sp)
    d304:	04507834 	movhi	r17,16864
    d308:	0021883a 	mov	r16,zero
    d30c:	800d883a 	mov	r6,r16
    d310:	880f883a 	mov	r7,r17
    d314:	dcc00315 	stw	r19,12(sp)
    d318:	dc800215 	stw	r18,8(sp)
    d31c:	2827883a 	mov	r19,r5
    d320:	2025883a 	mov	r18,r4
    d324:	dfc00415 	stw	ra,16(sp)
    d328:	000ecd00 	call	ecd0 <__gedf2>
    d32c:	000d883a 	mov	r6,zero
    d330:	880f883a 	mov	r7,r17
    d334:	980b883a 	mov	r5,r19
    d338:	9009883a 	mov	r4,r18
    d33c:	10000d16 	blt	r2,zero,d374 <__fixunsdfsi+0x7c>
    d340:	000e4280 	call	e428 <__subdf3>
    d344:	180b883a 	mov	r5,r3
    d348:	1009883a 	mov	r4,r2
    d34c:	000ef600 	call	ef60 <__fixdfsi>
    d350:	00e00034 	movhi	r3,32768
    d354:	10c5883a 	add	r2,r2,r3
    d358:	dfc00417 	ldw	ra,16(sp)
    d35c:	dcc00317 	ldw	r19,12(sp)
    d360:	dc800217 	ldw	r18,8(sp)
    d364:	dc400117 	ldw	r17,4(sp)
    d368:	dc000017 	ldw	r16,0(sp)
    d36c:	dec00504 	addi	sp,sp,20
    d370:	f800283a 	ret
    d374:	980b883a 	mov	r5,r19
    d378:	9009883a 	mov	r4,r18
    d37c:	000ef600 	call	ef60 <__fixdfsi>
    d380:	dfc00417 	ldw	ra,16(sp)
    d384:	dcc00317 	ldw	r19,12(sp)
    d388:	dc800217 	ldw	r18,8(sp)
    d38c:	dc400117 	ldw	r17,4(sp)
    d390:	dc000017 	ldw	r16,0(sp)
    d394:	dec00504 	addi	sp,sp,20
    d398:	f800283a 	ret

0000d39c <__udivdi3>:
    d39c:	defff004 	addi	sp,sp,-64
    d3a0:	2005883a 	mov	r2,r4
    d3a4:	3011883a 	mov	r8,r6
    d3a8:	df000e15 	stw	fp,56(sp)
    d3ac:	dd000a15 	stw	r20,40(sp)
    d3b0:	dc000615 	stw	r16,24(sp)
    d3b4:	dfc00f15 	stw	ra,60(sp)
    d3b8:	ddc00d15 	stw	r23,52(sp)
    d3bc:	dd800c15 	stw	r22,48(sp)
    d3c0:	dd400b15 	stw	r21,44(sp)
    d3c4:	dcc00915 	stw	r19,36(sp)
    d3c8:	dc800815 	stw	r18,32(sp)
    d3cc:	dc400715 	stw	r17,28(sp)
    d3d0:	4021883a 	mov	r16,r8
    d3d4:	1039883a 	mov	fp,r2
    d3d8:	2829883a 	mov	r20,r5
    d3dc:	38003b1e 	bne	r7,zero,d4cc <__udivdi3+0x130>
    d3e0:	2a005c36 	bltu	r5,r8,d554 <__udivdi3+0x1b8>
    d3e4:	4000a626 	beq	r8,zero,d680 <__udivdi3+0x2e4>
    d3e8:	00bfffd4 	movui	r2,65535
    d3ec:	14009e36 	bltu	r2,r16,d668 <__udivdi3+0x2cc>
    d3f0:	00803fc4 	movi	r2,255
    d3f4:	14013d36 	bltu	r2,r16,d8ec <__udivdi3+0x550>
    d3f8:	000b883a 	mov	r5,zero
    d3fc:	0005883a 	mov	r2,zero
    d400:	8084d83a 	srl	r2,r16,r2
    d404:	01000074 	movhi	r4,1
    d408:	2108c504 	addi	r4,r4,8980
    d40c:	01800804 	movi	r6,32
    d410:	1105883a 	add	r2,r2,r4
    d414:	10c00003 	ldbu	r3,0(r2)
    d418:	28c7883a 	add	r3,r5,r3
    d41c:	30edc83a 	sub	r22,r6,r3
    d420:	b000ee1e 	bne	r22,zero,d7dc <__udivdi3+0x440>
    d424:	802ad43a 	srli	r21,r16,16
    d428:	00800044 	movi	r2,1
    d42c:	a423c83a 	sub	r17,r20,r16
    d430:	85ffffcc 	andi	r23,r16,65535
    d434:	d8800315 	stw	r2,12(sp)
    d438:	8809883a 	mov	r4,r17
    d43c:	a80b883a 	mov	r5,r21
    d440:	000f37c0 	call	f37c <__udivsi3>
    d444:	8809883a 	mov	r4,r17
    d448:	a80b883a 	mov	r5,r21
    d44c:	102d883a 	mov	r22,r2
    d450:	000f3840 	call	f384 <__umodsi3>
    d454:	1004943a 	slli	r2,r2,16
    d458:	e006d43a 	srli	r3,fp,16
    d45c:	bda3383a 	mul	r17,r23,r22
    d460:	10c4b03a 	or	r2,r2,r3
    d464:	1440042e 	bgeu	r2,r17,d478 <__udivdi3+0xdc>
    d468:	1405883a 	add	r2,r2,r16
    d46c:	b5bfffc4 	addi	r22,r22,-1
    d470:	14000136 	bltu	r2,r16,d478 <__udivdi3+0xdc>
    d474:	14413d36 	bltu	r2,r17,d96c <__udivdi3+0x5d0>
    d478:	1463c83a 	sub	r17,r2,r17
    d47c:	8809883a 	mov	r4,r17
    d480:	a80b883a 	mov	r5,r21
    d484:	000f37c0 	call	f37c <__udivsi3>
    d488:	8809883a 	mov	r4,r17
    d48c:	a80b883a 	mov	r5,r21
    d490:	1029883a 	mov	r20,r2
    d494:	000f3840 	call	f384 <__umodsi3>
    d498:	1004943a 	slli	r2,r2,16
    d49c:	bd09383a 	mul	r4,r23,r20
    d4a0:	e0ffffcc 	andi	r3,fp,65535
    d4a4:	10c4b03a 	or	r2,r2,r3
    d4a8:	1100042e 	bgeu	r2,r4,d4bc <__udivdi3+0x120>
    d4ac:	8085883a 	add	r2,r16,r2
    d4b0:	a53fffc4 	addi	r20,r20,-1
    d4b4:	14000136 	bltu	r2,r16,d4bc <__udivdi3+0x120>
    d4b8:	11012036 	bltu	r2,r4,d93c <__udivdi3+0x5a0>
    d4bc:	b004943a 	slli	r2,r22,16
    d4c0:	d9000317 	ldw	r4,12(sp)
    d4c4:	a084b03a 	or	r2,r20,r2
    d4c8:	00001506 	br	d520 <__udivdi3+0x184>
    d4cc:	380d883a 	mov	r6,r7
    d4d0:	29c06236 	bltu	r5,r7,d65c <__udivdi3+0x2c0>
    d4d4:	00bfffd4 	movui	r2,65535
    d4d8:	11c05a36 	bltu	r2,r7,d644 <__udivdi3+0x2a8>
    d4dc:	00803fc4 	movi	r2,255
    d4e0:	11c0fc36 	bltu	r2,r7,d8d4 <__udivdi3+0x538>
    d4e4:	000b883a 	mov	r5,zero
    d4e8:	0005883a 	mov	r2,zero
    d4ec:	3084d83a 	srl	r2,r6,r2
    d4f0:	01000074 	movhi	r4,1
    d4f4:	2108c504 	addi	r4,r4,8980
    d4f8:	01c00804 	movi	r7,32
    d4fc:	1105883a 	add	r2,r2,r4
    d500:	10c00003 	ldbu	r3,0(r2)
    d504:	28c7883a 	add	r3,r5,r3
    d508:	38efc83a 	sub	r23,r7,r3
    d50c:	b800691e 	bne	r23,zero,d6b4 <__udivdi3+0x318>
    d510:	35000136 	bltu	r6,r20,d518 <__udivdi3+0x17c>
    d514:	e4005136 	bltu	fp,r16,d65c <__udivdi3+0x2c0>
    d518:	00800044 	movi	r2,1
    d51c:	0009883a 	mov	r4,zero
    d520:	2007883a 	mov	r3,r4
    d524:	dfc00f17 	ldw	ra,60(sp)
    d528:	df000e17 	ldw	fp,56(sp)
    d52c:	ddc00d17 	ldw	r23,52(sp)
    d530:	dd800c17 	ldw	r22,48(sp)
    d534:	dd400b17 	ldw	r21,44(sp)
    d538:	dd000a17 	ldw	r20,40(sp)
    d53c:	dcc00917 	ldw	r19,36(sp)
    d540:	dc800817 	ldw	r18,32(sp)
    d544:	dc400717 	ldw	r17,28(sp)
    d548:	dc000617 	ldw	r16,24(sp)
    d54c:	dec01004 	addi	sp,sp,64
    d550:	f800283a 	ret
    d554:	00bfffd4 	movui	r2,65535
    d558:	12005036 	bltu	r2,r8,d69c <__udivdi3+0x300>
    d55c:	00803fc4 	movi	r2,255
    d560:	1200e836 	bltu	r2,r8,d904 <__udivdi3+0x568>
    d564:	000b883a 	mov	r5,zero
    d568:	0005883a 	mov	r2,zero
    d56c:	8084d83a 	srl	r2,r16,r2
    d570:	01000074 	movhi	r4,1
    d574:	2108c504 	addi	r4,r4,8980
    d578:	01800804 	movi	r6,32
    d57c:	1105883a 	add	r2,r2,r4
    d580:	10c00003 	ldbu	r3,0(r2)
    d584:	28c7883a 	add	r3,r5,r3
    d588:	30cbc83a 	sub	r5,r6,r3
    d58c:	28000626 	beq	r5,zero,d5a8 <__udivdi3+0x20c>
    d590:	3145c83a 	sub	r2,r6,r5
    d594:	e084d83a 	srl	r2,fp,r2
    d598:	a146983a 	sll	r3,r20,r5
    d59c:	e178983a 	sll	fp,fp,r5
    d5a0:	8160983a 	sll	r16,r16,r5
    d5a4:	18a8b03a 	or	r20,r3,r2
    d5a8:	802ad43a 	srli	r21,r16,16
    d5ac:	a009883a 	mov	r4,r20
    d5b0:	85ffffcc 	andi	r23,r16,65535
    d5b4:	a80b883a 	mov	r5,r21
    d5b8:	000f37c0 	call	f37c <__udivsi3>
    d5bc:	a009883a 	mov	r4,r20
    d5c0:	a80b883a 	mov	r5,r21
    d5c4:	102d883a 	mov	r22,r2
    d5c8:	000f3840 	call	f384 <__umodsi3>
    d5cc:	1004943a 	slli	r2,r2,16
    d5d0:	e006d43a 	srli	r3,fp,16
    d5d4:	bda3383a 	mul	r17,r23,r22
    d5d8:	10c4b03a 	or	r2,r2,r3
    d5dc:	1440042e 	bgeu	r2,r17,d5f0 <__udivdi3+0x254>
    d5e0:	1405883a 	add	r2,r2,r16
    d5e4:	b5bfffc4 	addi	r22,r22,-1
    d5e8:	14000136 	bltu	r2,r16,d5f0 <__udivdi3+0x254>
    d5ec:	1440d536 	bltu	r2,r17,d944 <__udivdi3+0x5a8>
    d5f0:	1463c83a 	sub	r17,r2,r17
    d5f4:	8809883a 	mov	r4,r17
    d5f8:	a80b883a 	mov	r5,r21
    d5fc:	000f37c0 	call	f37c <__udivsi3>
    d600:	8809883a 	mov	r4,r17
    d604:	a80b883a 	mov	r5,r21
    d608:	1029883a 	mov	r20,r2
    d60c:	000f3840 	call	f384 <__umodsi3>
    d610:	1004943a 	slli	r2,r2,16
    d614:	bd09383a 	mul	r4,r23,r20
    d618:	e0ffffcc 	andi	r3,fp,65535
    d61c:	10c4b03a 	or	r2,r2,r3
    d620:	1100042e 	bgeu	r2,r4,d634 <__udivdi3+0x298>
    d624:	8085883a 	add	r2,r16,r2
    d628:	a53fffc4 	addi	r20,r20,-1
    d62c:	14000136 	bltu	r2,r16,d634 <__udivdi3+0x298>
    d630:	1100c736 	bltu	r2,r4,d950 <__udivdi3+0x5b4>
    d634:	b004943a 	slli	r2,r22,16
    d638:	0009883a 	mov	r4,zero
    d63c:	a084b03a 	or	r2,r20,r2
    d640:	003fb706 	br	d520 <__udivdi3+0x184>
    d644:	00804034 	movhi	r2,256
    d648:	10bfffc4 	addi	r2,r2,-1
    d64c:	11c0a436 	bltu	r2,r7,d8e0 <__udivdi3+0x544>
    d650:	01400404 	movi	r5,16
    d654:	2805883a 	mov	r2,r5
    d658:	003fa406 	br	d4ec <__udivdi3+0x150>
    d65c:	0005883a 	mov	r2,zero
    d660:	0009883a 	mov	r4,zero
    d664:	003fae06 	br	d520 <__udivdi3+0x184>
    d668:	00804034 	movhi	r2,256
    d66c:	10bfffc4 	addi	r2,r2,-1
    d670:	1400a136 	bltu	r2,r16,d8f8 <__udivdi3+0x55c>
    d674:	01400404 	movi	r5,16
    d678:	2805883a 	mov	r2,r5
    d67c:	003f6006 	br	d400 <__udivdi3+0x64>
    d680:	01000044 	movi	r4,1
    d684:	000b883a 	mov	r5,zero
    d688:	000f37c0 	call	f37c <__udivsi3>
    d68c:	1021883a 	mov	r16,r2
    d690:	00bfffd4 	movui	r2,65535
    d694:	143ff436 	bltu	r2,r16,d668 <__udivdi3+0x2cc>
    d698:	003f5506 	br	d3f0 <__udivdi3+0x54>
    d69c:	00804034 	movhi	r2,256
    d6a0:	10bfffc4 	addi	r2,r2,-1
    d6a4:	12009a36 	bltu	r2,r8,d910 <__udivdi3+0x574>
    d6a8:	01400404 	movi	r5,16
    d6ac:	2805883a 	mov	r2,r5
    d6b0:	003fae06 	br	d56c <__udivdi3+0x1d0>
    d6b4:	3dc5c83a 	sub	r2,r7,r23
    d6b8:	35c8983a 	sll	r4,r6,r23
    d6bc:	8086d83a 	srl	r3,r16,r2
    d6c0:	a0a2d83a 	srl	r17,r20,r2
    d6c4:	e084d83a 	srl	r2,fp,r2
    d6c8:	20eab03a 	or	r21,r4,r3
    d6cc:	a82cd43a 	srli	r22,r21,16
    d6d0:	a5c6983a 	sll	r3,r20,r23
    d6d4:	8809883a 	mov	r4,r17
    d6d8:	b00b883a 	mov	r5,r22
    d6dc:	1886b03a 	or	r3,r3,r2
    d6e0:	d8c00215 	stw	r3,8(sp)
    d6e4:	000f37c0 	call	f37c <__udivsi3>
    d6e8:	8809883a 	mov	r4,r17
    d6ec:	b00b883a 	mov	r5,r22
    d6f0:	1029883a 	mov	r20,r2
    d6f4:	000f3840 	call	f384 <__umodsi3>
    d6f8:	a8ffffcc 	andi	r3,r21,65535
    d6fc:	d8c00515 	stw	r3,20(sp)
    d700:	d9000217 	ldw	r4,8(sp)
    d704:	d9400517 	ldw	r5,20(sp)
    d708:	1004943a 	slli	r2,r2,16
    d70c:	2006d43a 	srli	r3,r4,16
    d710:	85e0983a 	sll	r16,r16,r23
    d714:	2d23383a 	mul	r17,r5,r20
    d718:	10c4b03a 	or	r2,r2,r3
    d71c:	dc000015 	stw	r16,0(sp)
    d720:	1440032e 	bgeu	r2,r17,d730 <__udivdi3+0x394>
    d724:	1545883a 	add	r2,r2,r21
    d728:	a53fffc4 	addi	r20,r20,-1
    d72c:	15407f2e 	bgeu	r2,r21,d92c <__udivdi3+0x590>
    d730:	1463c83a 	sub	r17,r2,r17
    d734:	8809883a 	mov	r4,r17
    d738:	b00b883a 	mov	r5,r22
    d73c:	000f37c0 	call	f37c <__udivsi3>
    d740:	8809883a 	mov	r4,r17
    d744:	b00b883a 	mov	r5,r22
    d748:	1021883a 	mov	r16,r2
    d74c:	000f3840 	call	f384 <__umodsi3>
    d750:	d8c00517 	ldw	r3,20(sp)
    d754:	d9000217 	ldw	r4,8(sp)
    d758:	1004943a 	slli	r2,r2,16
    d75c:	1c0f383a 	mul	r7,r3,r16
    d760:	20ffffcc 	andi	r3,r4,65535
    d764:	10e2b03a 	or	r17,r2,r3
    d768:	89c0032e 	bgeu	r17,r7,d778 <__udivdi3+0x3dc>
    d76c:	8d63883a 	add	r17,r17,r21
    d770:	843fffc4 	addi	r16,r16,-1
    d774:	8d40692e 	bgeu	r17,r21,d91c <__udivdi3+0x580>
    d778:	a008943a 	slli	r4,r20,16
    d77c:	d9400017 	ldw	r5,0(sp)
    d780:	89e3c83a 	sub	r17,r17,r7
    d784:	8110b03a 	or	r8,r16,r4
    d788:	280cd43a 	srli	r6,r5,16
    d78c:	28ffffcc 	andi	r3,r5,65535
    d790:	40bfffcc 	andi	r2,r8,65535
    d794:	400ad43a 	srli	r5,r8,16
    d798:	10d3383a 	mul	r9,r2,r3
    d79c:	1185383a 	mul	r2,r2,r6
    d7a0:	28c7383a 	mul	r3,r5,r3
    d7a4:	4808d43a 	srli	r4,r9,16
    d7a8:	298b383a 	mul	r5,r5,r6
    d7ac:	10c5883a 	add	r2,r2,r3
    d7b0:	2089883a 	add	r4,r4,r2
    d7b4:	20c0022e 	bgeu	r4,r3,d7c0 <__udivdi3+0x424>
    d7b8:	00800074 	movhi	r2,1
    d7bc:	288b883a 	add	r5,r5,r2
    d7c0:	2004d43a 	srli	r2,r4,16
    d7c4:	288b883a 	add	r5,r5,r2
    d7c8:	89403f36 	bltu	r17,r5,d8c8 <__udivdi3+0x52c>
    d7cc:	89403926 	beq	r17,r5,d8b4 <__udivdi3+0x518>
    d7d0:	4005883a 	mov	r2,r8
    d7d4:	0009883a 	mov	r4,zero
    d7d8:	003f5106 	br	d520 <__udivdi3+0x184>
    d7dc:	85a0983a 	sll	r16,r16,r22
    d7e0:	3585c83a 	sub	r2,r6,r22
    d7e4:	a0a2d83a 	srl	r17,r20,r2
    d7e8:	802ad43a 	srli	r21,r16,16
    d7ec:	e084d83a 	srl	r2,fp,r2
    d7f0:	a586983a 	sll	r3,r20,r22
    d7f4:	8809883a 	mov	r4,r17
    d7f8:	a80b883a 	mov	r5,r21
    d7fc:	1886b03a 	or	r3,r3,r2
    d800:	d8c00115 	stw	r3,4(sp)
    d804:	000f37c0 	call	f37c <__udivsi3>
    d808:	8809883a 	mov	r4,r17
    d80c:	a80b883a 	mov	r5,r21
    d810:	d8800415 	stw	r2,16(sp)
    d814:	000f3840 	call	f384 <__umodsi3>
    d818:	d9000117 	ldw	r4,4(sp)
    d81c:	d9400417 	ldw	r5,16(sp)
    d820:	1004943a 	slli	r2,r2,16
    d824:	85ffffcc 	andi	r23,r16,65535
    d828:	2006d43a 	srli	r3,r4,16
    d82c:	b963383a 	mul	r17,r23,r5
    d830:	10c4b03a 	or	r2,r2,r3
    d834:	1440042e 	bgeu	r2,r17,d848 <__udivdi3+0x4ac>
    d838:	297fffc4 	addi	r5,r5,-1
    d83c:	1405883a 	add	r2,r2,r16
    d840:	d9400415 	stw	r5,16(sp)
    d844:	1400442e 	bgeu	r2,r16,d958 <__udivdi3+0x5bc>
    d848:	1463c83a 	sub	r17,r2,r17
    d84c:	8809883a 	mov	r4,r17
    d850:	a80b883a 	mov	r5,r21
    d854:	000f37c0 	call	f37c <__udivsi3>
    d858:	8809883a 	mov	r4,r17
    d85c:	a80b883a 	mov	r5,r21
    d860:	1029883a 	mov	r20,r2
    d864:	000f3840 	call	f384 <__umodsi3>
    d868:	d9400117 	ldw	r5,4(sp)
    d86c:	1004943a 	slli	r2,r2,16
    d870:	bd09383a 	mul	r4,r23,r20
    d874:	28ffffcc 	andi	r3,r5,65535
    d878:	10c6b03a 	or	r3,r2,r3
    d87c:	1900062e 	bgeu	r3,r4,d898 <__udivdi3+0x4fc>
    d880:	1c07883a 	add	r3,r3,r16
    d884:	a53fffc4 	addi	r20,r20,-1
    d888:	1c000336 	bltu	r3,r16,d898 <__udivdi3+0x4fc>
    d88c:	1900022e 	bgeu	r3,r4,d898 <__udivdi3+0x4fc>
    d890:	a53fffc4 	addi	r20,r20,-1
    d894:	1c07883a 	add	r3,r3,r16
    d898:	d9400417 	ldw	r5,16(sp)
    d89c:	e5b8983a 	sll	fp,fp,r22
    d8a0:	1923c83a 	sub	r17,r3,r4
    d8a4:	2804943a 	slli	r2,r5,16
    d8a8:	a0a8b03a 	or	r20,r20,r2
    d8ac:	dd000315 	stw	r20,12(sp)
    d8b0:	003ee106 	br	d438 <__udivdi3+0x9c>
    d8b4:	2004943a 	slli	r2,r4,16
    d8b8:	e5c8983a 	sll	r4,fp,r23
    d8bc:	48ffffcc 	andi	r3,r9,65535
    d8c0:	10c5883a 	add	r2,r2,r3
    d8c4:	20bfc22e 	bgeu	r4,r2,d7d0 <__udivdi3+0x434>
    d8c8:	40bfffc4 	addi	r2,r8,-1
    d8cc:	0009883a 	mov	r4,zero
    d8d0:	003f1306 	br	d520 <__udivdi3+0x184>
    d8d4:	01400204 	movi	r5,8
    d8d8:	2805883a 	mov	r2,r5
    d8dc:	003f0306 	br	d4ec <__udivdi3+0x150>
    d8e0:	01400604 	movi	r5,24
    d8e4:	2805883a 	mov	r2,r5
    d8e8:	003f0006 	br	d4ec <__udivdi3+0x150>
    d8ec:	01400204 	movi	r5,8
    d8f0:	2805883a 	mov	r2,r5
    d8f4:	003ec206 	br	d400 <__udivdi3+0x64>
    d8f8:	01400604 	movi	r5,24
    d8fc:	2805883a 	mov	r2,r5
    d900:	003ebf06 	br	d400 <__udivdi3+0x64>
    d904:	01400204 	movi	r5,8
    d908:	2805883a 	mov	r2,r5
    d90c:	003f1706 	br	d56c <__udivdi3+0x1d0>
    d910:	01400604 	movi	r5,24
    d914:	2805883a 	mov	r2,r5
    d918:	003f1406 	br	d56c <__udivdi3+0x1d0>
    d91c:	89ff962e 	bgeu	r17,r7,d778 <__udivdi3+0x3dc>
    d920:	8d63883a 	add	r17,r17,r21
    d924:	843fffc4 	addi	r16,r16,-1
    d928:	003f9306 	br	d778 <__udivdi3+0x3dc>
    d92c:	147f802e 	bgeu	r2,r17,d730 <__udivdi3+0x394>
    d930:	a53fffc4 	addi	r20,r20,-1
    d934:	1545883a 	add	r2,r2,r21
    d938:	003f7d06 	br	d730 <__udivdi3+0x394>
    d93c:	a53fffc4 	addi	r20,r20,-1
    d940:	003ede06 	br	d4bc <__udivdi3+0x120>
    d944:	b5bfffc4 	addi	r22,r22,-1
    d948:	1405883a 	add	r2,r2,r16
    d94c:	003f2806 	br	d5f0 <__udivdi3+0x254>
    d950:	a53fffc4 	addi	r20,r20,-1
    d954:	003f3706 	br	d634 <__udivdi3+0x298>
    d958:	147fbb2e 	bgeu	r2,r17,d848 <__udivdi3+0x4ac>
    d95c:	297fffc4 	addi	r5,r5,-1
    d960:	1405883a 	add	r2,r2,r16
    d964:	d9400415 	stw	r5,16(sp)
    d968:	003fb706 	br	d848 <__udivdi3+0x4ac>
    d96c:	b5bfffc4 	addi	r22,r22,-1
    d970:	1405883a 	add	r2,r2,r16
    d974:	003ec006 	br	d478 <__udivdi3+0xdc>

0000d978 <__umoddi3>:
    d978:	defff104 	addi	sp,sp,-60
    d97c:	dd800b15 	stw	r22,44(sp)
    d980:	dd000915 	stw	r20,36(sp)
    d984:	dc000515 	stw	r16,20(sp)
    d988:	dfc00e15 	stw	ra,56(sp)
    d98c:	df000d15 	stw	fp,52(sp)
    d990:	ddc00c15 	stw	r23,48(sp)
    d994:	dd400a15 	stw	r21,40(sp)
    d998:	dcc00815 	stw	r19,32(sp)
    d99c:	dc800715 	stw	r18,28(sp)
    d9a0:	dc400615 	stw	r17,24(sp)
    d9a4:	3021883a 	mov	r16,r6
    d9a8:	202d883a 	mov	r22,r4
    d9ac:	2829883a 	mov	r20,r5
    d9b0:	38002b1e 	bne	r7,zero,da60 <__umoddi3+0xe8>
    d9b4:	29805036 	bltu	r5,r6,daf8 <__umoddi3+0x180>
    d9b8:	30008a26 	beq	r6,zero,dbe4 <__umoddi3+0x26c>
    d9bc:	00bfffd4 	movui	r2,65535
    d9c0:	14008236 	bltu	r2,r16,dbcc <__umoddi3+0x254>
    d9c4:	00803fc4 	movi	r2,255
    d9c8:	14013636 	bltu	r2,r16,dea4 <__umoddi3+0x52c>
    d9cc:	000b883a 	mov	r5,zero
    d9d0:	0005883a 	mov	r2,zero
    d9d4:	8084d83a 	srl	r2,r16,r2
    d9d8:	01000074 	movhi	r4,1
    d9dc:	2108c504 	addi	r4,r4,8980
    d9e0:	01800804 	movi	r6,32
    d9e4:	1105883a 	add	r2,r2,r4
    d9e8:	10c00003 	ldbu	r3,0(r2)
    d9ec:	28c7883a 	add	r3,r5,r3
    d9f0:	30efc83a 	sub	r23,r6,r3
    d9f4:	b800941e 	bne	r23,zero,dc48 <__umoddi3+0x2d0>
    d9f8:	802ad43a 	srli	r21,r16,16
    d9fc:	a423c83a 	sub	r17,r20,r16
    da00:	0039883a 	mov	fp,zero
    da04:	853fffcc 	andi	r20,r16,65535
    da08:	8809883a 	mov	r4,r17
    da0c:	a80b883a 	mov	r5,r21
    da10:	000f37c0 	call	f37c <__udivsi3>
    da14:	8809883a 	mov	r4,r17
    da18:	a80b883a 	mov	r5,r21
    da1c:	a0a3383a 	mul	r17,r20,r2
    da20:	000f3840 	call	f384 <__umodsi3>
    da24:	1004943a 	slli	r2,r2,16
    da28:	b006d43a 	srli	r3,r22,16
    da2c:	10c4b03a 	or	r2,r2,r3
    da30:	1440032e 	bgeu	r2,r17,da40 <__umoddi3+0xc8>
    da34:	1405883a 	add	r2,r2,r16
    da38:	14000136 	bltu	r2,r16,da40 <__umoddi3+0xc8>
    da3c:	14413536 	bltu	r2,r17,df14 <__umoddi3+0x59c>
    da40:	1463c83a 	sub	r17,r2,r17
    da44:	8809883a 	mov	r4,r17
    da48:	a80b883a 	mov	r5,r21
    da4c:	000f37c0 	call	f37c <__udivsi3>
    da50:	8809883a 	mov	r4,r17
    da54:	a0a3383a 	mul	r17,r20,r2
    da58:	a80b883a 	mov	r5,r21
    da5c:	00004d06 	br	db94 <__umoddi3+0x21c>
    da60:	380d883a 	mov	r6,r7
    da64:	29c0102e 	bgeu	r5,r7,daa8 <__umoddi3+0x130>
    da68:	2011883a 	mov	r8,r4
    da6c:	2813883a 	mov	r9,r5
    da70:	4005883a 	mov	r2,r8
    da74:	4807883a 	mov	r3,r9
    da78:	dfc00e17 	ldw	ra,56(sp)
    da7c:	df000d17 	ldw	fp,52(sp)
    da80:	ddc00c17 	ldw	r23,48(sp)
    da84:	dd800b17 	ldw	r22,44(sp)
    da88:	dd400a17 	ldw	r21,40(sp)
    da8c:	dd000917 	ldw	r20,36(sp)
    da90:	dcc00817 	ldw	r19,32(sp)
    da94:	dc800717 	ldw	r18,28(sp)
    da98:	dc400617 	ldw	r17,24(sp)
    da9c:	dc000517 	ldw	r16,20(sp)
    daa0:	dec00f04 	addi	sp,sp,60
    daa4:	f800283a 	ret
    daa8:	00bfffd4 	movui	r2,65535
    daac:	11c05a36 	bltu	r2,r7,dc18 <__umoddi3+0x2a0>
    dab0:	00803fc4 	movi	r2,255
    dab4:	11c0fe36 	bltu	r2,r7,deb0 <__umoddi3+0x538>
    dab8:	000b883a 	mov	r5,zero
    dabc:	0005883a 	mov	r2,zero
    dac0:	3084d83a 	srl	r2,r6,r2
    dac4:	01000074 	movhi	r4,1
    dac8:	2108c504 	addi	r4,r4,8980
    dacc:	01c00804 	movi	r7,32
    dad0:	1105883a 	add	r2,r2,r4
    dad4:	10c00003 	ldbu	r3,0(r2)
    dad8:	28c7883a 	add	r3,r5,r3
    dadc:	38ebc83a 	sub	r21,r7,r3
    dae0:	a800851e 	bne	r21,zero,dcf8 <__umoddi3+0x380>
    dae4:	35005236 	bltu	r6,r20,dc30 <__umoddi3+0x2b8>
    dae8:	b400512e 	bgeu	r22,r16,dc30 <__umoddi3+0x2b8>
    daec:	b011883a 	mov	r8,r22
    daf0:	a013883a 	mov	r9,r20
    daf4:	003fde06 	br	da70 <__umoddi3+0xf8>
    daf8:	00bfffd4 	movui	r2,65535
    dafc:	11804036 	bltu	r2,r6,dc00 <__umoddi3+0x288>
    db00:	00803fc4 	movi	r2,255
    db04:	1180ed36 	bltu	r2,r6,debc <__umoddi3+0x544>
    db08:	000b883a 	mov	r5,zero
    db0c:	0005883a 	mov	r2,zero
    db10:	8084d83a 	srl	r2,r16,r2
    db14:	01000074 	movhi	r4,1
    db18:	2108c504 	addi	r4,r4,8980
    db1c:	01800804 	movi	r6,32
    db20:	1105883a 	add	r2,r2,r4
    db24:	10c00003 	ldbu	r3,0(r2)
    db28:	28c7883a 	add	r3,r5,r3
    db2c:	30c7c83a 	sub	r3,r6,r3
    db30:	1800bf1e 	bne	r3,zero,de30 <__umoddi3+0x4b8>
    db34:	0039883a 	mov	fp,zero
    db38:	802ad43a 	srli	r21,r16,16
    db3c:	a009883a 	mov	r4,r20
    db40:	85ffffcc 	andi	r23,r16,65535
    db44:	a80b883a 	mov	r5,r21
    db48:	000f37c0 	call	f37c <__udivsi3>
    db4c:	a009883a 	mov	r4,r20
    db50:	a80b883a 	mov	r5,r21
    db54:	b8a3383a 	mul	r17,r23,r2
    db58:	000f3840 	call	f384 <__umodsi3>
    db5c:	1004943a 	slli	r2,r2,16
    db60:	b006d43a 	srli	r3,r22,16
    db64:	10c4b03a 	or	r2,r2,r3
    db68:	1440032e 	bgeu	r2,r17,db78 <__umoddi3+0x200>
    db6c:	1405883a 	add	r2,r2,r16
    db70:	14000136 	bltu	r2,r16,db78 <__umoddi3+0x200>
    db74:	1440e536 	bltu	r2,r17,df0c <__umoddi3+0x594>
    db78:	1463c83a 	sub	r17,r2,r17
    db7c:	8809883a 	mov	r4,r17
    db80:	a80b883a 	mov	r5,r21
    db84:	000f37c0 	call	f37c <__udivsi3>
    db88:	8809883a 	mov	r4,r17
    db8c:	b8a3383a 	mul	r17,r23,r2
    db90:	a80b883a 	mov	r5,r21
    db94:	000f3840 	call	f384 <__umodsi3>
    db98:	1004943a 	slli	r2,r2,16
    db9c:	b0ffffcc 	andi	r3,r22,65535
    dba0:	10c4b03a 	or	r2,r2,r3
    dba4:	1440042e 	bgeu	r2,r17,dbb8 <__umoddi3+0x240>
    dba8:	1405883a 	add	r2,r2,r16
    dbac:	14000236 	bltu	r2,r16,dbb8 <__umoddi3+0x240>
    dbb0:	1440012e 	bgeu	r2,r17,dbb8 <__umoddi3+0x240>
    dbb4:	1405883a 	add	r2,r2,r16
    dbb8:	1445c83a 	sub	r2,r2,r17
    dbbc:	1724d83a 	srl	r18,r2,fp
    dbc0:	0013883a 	mov	r9,zero
    dbc4:	9011883a 	mov	r8,r18
    dbc8:	003fa906 	br	da70 <__umoddi3+0xf8>
    dbcc:	00804034 	movhi	r2,256
    dbd0:	10bfffc4 	addi	r2,r2,-1
    dbd4:	1400b036 	bltu	r2,r16,de98 <__umoddi3+0x520>
    dbd8:	01400404 	movi	r5,16
    dbdc:	2805883a 	mov	r2,r5
    dbe0:	003f7c06 	br	d9d4 <__umoddi3+0x5c>
    dbe4:	01000044 	movi	r4,1
    dbe8:	000b883a 	mov	r5,zero
    dbec:	000f37c0 	call	f37c <__udivsi3>
    dbf0:	1021883a 	mov	r16,r2
    dbf4:	00bfffd4 	movui	r2,65535
    dbf8:	143ff436 	bltu	r2,r16,dbcc <__umoddi3+0x254>
    dbfc:	003f7106 	br	d9c4 <__umoddi3+0x4c>
    dc00:	00804034 	movhi	r2,256
    dc04:	10bfffc4 	addi	r2,r2,-1
    dc08:	1180af36 	bltu	r2,r6,dec8 <__umoddi3+0x550>
    dc0c:	01400404 	movi	r5,16
    dc10:	2805883a 	mov	r2,r5
    dc14:	003fbe06 	br	db10 <__umoddi3+0x198>
    dc18:	00804034 	movhi	r2,256
    dc1c:	10bfffc4 	addi	r2,r2,-1
    dc20:	11c0ac36 	bltu	r2,r7,ded4 <__umoddi3+0x55c>
    dc24:	01400404 	movi	r5,16
    dc28:	2805883a 	mov	r2,r5
    dc2c:	003fa406 	br	dac0 <__umoddi3+0x148>
    dc30:	b409c83a 	sub	r4,r22,r16
    dc34:	b105803a 	cmpltu	r2,r22,r4
    dc38:	a187c83a 	sub	r3,r20,r6
    dc3c:	18a9c83a 	sub	r20,r3,r2
    dc40:	202d883a 	mov	r22,r4
    dc44:	003fa906 	br	daec <__umoddi3+0x174>
    dc48:	85e0983a 	sll	r16,r16,r23
    dc4c:	35c5c83a 	sub	r2,r6,r23
    dc50:	a0a2d83a 	srl	r17,r20,r2
    dc54:	802ad43a 	srli	r21,r16,16
    dc58:	b084d83a 	srl	r2,r22,r2
    dc5c:	a5c6983a 	sll	r3,r20,r23
    dc60:	8809883a 	mov	r4,r17
    dc64:	a80b883a 	mov	r5,r21
    dc68:	1886b03a 	or	r3,r3,r2
    dc6c:	d8c00115 	stw	r3,4(sp)
    dc70:	853fffcc 	andi	r20,r16,65535
    dc74:	000f37c0 	call	f37c <__udivsi3>
    dc78:	8809883a 	mov	r4,r17
    dc7c:	a80b883a 	mov	r5,r21
    dc80:	a0a3383a 	mul	r17,r20,r2
    dc84:	000f3840 	call	f384 <__umodsi3>
    dc88:	d9000117 	ldw	r4,4(sp)
    dc8c:	1004943a 	slli	r2,r2,16
    dc90:	b839883a 	mov	fp,r23
    dc94:	2006d43a 	srli	r3,r4,16
    dc98:	10c4b03a 	or	r2,r2,r3
    dc9c:	1440022e 	bgeu	r2,r17,dca8 <__umoddi3+0x330>
    dca0:	1405883a 	add	r2,r2,r16
    dca4:	1400962e 	bgeu	r2,r16,df00 <__umoddi3+0x588>
    dca8:	1463c83a 	sub	r17,r2,r17
    dcac:	8809883a 	mov	r4,r17
    dcb0:	a80b883a 	mov	r5,r21
    dcb4:	000f37c0 	call	f37c <__udivsi3>
    dcb8:	8809883a 	mov	r4,r17
    dcbc:	a80b883a 	mov	r5,r21
    dcc0:	a0a3383a 	mul	r17,r20,r2
    dcc4:	000f3840 	call	f384 <__umodsi3>
    dcc8:	d9400117 	ldw	r5,4(sp)
    dccc:	1004943a 	slli	r2,r2,16
    dcd0:	28ffffcc 	andi	r3,r5,65535
    dcd4:	10c4b03a 	or	r2,r2,r3
    dcd8:	1440042e 	bgeu	r2,r17,dcec <__umoddi3+0x374>
    dcdc:	1405883a 	add	r2,r2,r16
    dce0:	14000236 	bltu	r2,r16,dcec <__umoddi3+0x374>
    dce4:	1440012e 	bgeu	r2,r17,dcec <__umoddi3+0x374>
    dce8:	1405883a 	add	r2,r2,r16
    dcec:	b5ec983a 	sll	r22,r22,r23
    dcf0:	1463c83a 	sub	r17,r2,r17
    dcf4:	003f4406 	br	da08 <__umoddi3+0x90>
    dcf8:	3d4fc83a 	sub	r7,r7,r21
    dcfc:	3546983a 	sll	r3,r6,r21
    dd00:	81c4d83a 	srl	r2,r16,r7
    dd04:	a1e2d83a 	srl	r17,r20,r7
    dd08:	a54c983a 	sll	r6,r20,r21
    dd0c:	18aeb03a 	or	r23,r3,r2
    dd10:	b828d43a 	srli	r20,r23,16
    dd14:	b1c4d83a 	srl	r2,r22,r7
    dd18:	8809883a 	mov	r4,r17
    dd1c:	a00b883a 	mov	r5,r20
    dd20:	308cb03a 	or	r6,r6,r2
    dd24:	d9c00315 	stw	r7,12(sp)
    dd28:	d9800215 	stw	r6,8(sp)
    dd2c:	000f37c0 	call	f37c <__udivsi3>
    dd30:	8809883a 	mov	r4,r17
    dd34:	a00b883a 	mov	r5,r20
    dd38:	1039883a 	mov	fp,r2
    dd3c:	000f3840 	call	f384 <__umodsi3>
    dd40:	b8ffffcc 	andi	r3,r23,65535
    dd44:	d8c00415 	stw	r3,16(sp)
    dd48:	d9000217 	ldw	r4,8(sp)
    dd4c:	d9400417 	ldw	r5,16(sp)
    dd50:	1004943a 	slli	r2,r2,16
    dd54:	2006d43a 	srli	r3,r4,16
    dd58:	8560983a 	sll	r16,r16,r21
    dd5c:	2f23383a 	mul	r17,r5,fp
    dd60:	10c4b03a 	or	r2,r2,r3
    dd64:	dc000015 	stw	r16,0(sp)
    dd68:	b56c983a 	sll	r22,r22,r21
    dd6c:	1440032e 	bgeu	r2,r17,dd7c <__umoddi3+0x404>
    dd70:	15c5883a 	add	r2,r2,r23
    dd74:	e73fffc4 	addi	fp,fp,-1
    dd78:	15c05d2e 	bgeu	r2,r23,def0 <__umoddi3+0x578>
    dd7c:	1463c83a 	sub	r17,r2,r17
    dd80:	8809883a 	mov	r4,r17
    dd84:	a00b883a 	mov	r5,r20
    dd88:	000f37c0 	call	f37c <__udivsi3>
    dd8c:	8809883a 	mov	r4,r17
    dd90:	a00b883a 	mov	r5,r20
    dd94:	1021883a 	mov	r16,r2
    dd98:	000f3840 	call	f384 <__umodsi3>
    dd9c:	d8c00417 	ldw	r3,16(sp)
    dda0:	d9000217 	ldw	r4,8(sp)
    dda4:	1004943a 	slli	r2,r2,16
    dda8:	1c23383a 	mul	r17,r3,r16
    ddac:	20ffffcc 	andi	r3,r4,65535
    ddb0:	10ceb03a 	or	r7,r2,r3
    ddb4:	3c40032e 	bgeu	r7,r17,ddc4 <__umoddi3+0x44c>
    ddb8:	3dcf883a 	add	r7,r7,r23
    ddbc:	843fffc4 	addi	r16,r16,-1
    ddc0:	3dc0472e 	bgeu	r7,r23,dee0 <__umoddi3+0x568>
    ddc4:	e004943a 	slli	r2,fp,16
    ddc8:	d9400017 	ldw	r5,0(sp)
    ddcc:	3c4fc83a 	sub	r7,r7,r17
    ddd0:	8084b03a 	or	r2,r16,r2
    ddd4:	28ffffcc 	andi	r3,r5,65535
    ddd8:	280cd43a 	srli	r6,r5,16
    dddc:	100ad43a 	srli	r5,r2,16
    dde0:	10bfffcc 	andi	r2,r2,65535
    dde4:	10d1383a 	mul	r8,r2,r3
    dde8:	28c7383a 	mul	r3,r5,r3
    ddec:	1185383a 	mul	r2,r2,r6
    ddf0:	4008d43a 	srli	r4,r8,16
    ddf4:	298b383a 	mul	r5,r5,r6
    ddf8:	10c5883a 	add	r2,r2,r3
    ddfc:	2089883a 	add	r4,r4,r2
    de00:	20c0022e 	bgeu	r4,r3,de0c <__umoddi3+0x494>
    de04:	00800074 	movhi	r2,1
    de08:	288b883a 	add	r5,r5,r2
    de0c:	2004d43a 	srli	r2,r4,16
    de10:	2008943a 	slli	r4,r4,16
    de14:	40ffffcc 	andi	r3,r8,65535
    de18:	288b883a 	add	r5,r5,r2
    de1c:	20c9883a 	add	r4,r4,r3
    de20:	39400b36 	bltu	r7,r5,de50 <__umoddi3+0x4d8>
    de24:	39403d26 	beq	r7,r5,df1c <__umoddi3+0x5a4>
    de28:	394bc83a 	sub	r5,r7,r5
    de2c:	00000f06 	br	de6c <__umoddi3+0x4f4>
    de30:	30c5c83a 	sub	r2,r6,r3
    de34:	1839883a 	mov	fp,r3
    de38:	b084d83a 	srl	r2,r22,r2
    de3c:	a0c6983a 	sll	r3,r20,r3
    de40:	8720983a 	sll	r16,r16,fp
    de44:	b72c983a 	sll	r22,r22,fp
    de48:	18a8b03a 	or	r20,r3,r2
    de4c:	003f3a06 	br	db38 <__umoddi3+0x1c0>
    de50:	d8c00017 	ldw	r3,0(sp)
    de54:	20c5c83a 	sub	r2,r4,r3
    de58:	2089803a 	cmpltu	r4,r4,r2
    de5c:	2dc7c83a 	sub	r3,r5,r23
    de60:	1907c83a 	sub	r3,r3,r4
    de64:	38cbc83a 	sub	r5,r7,r3
    de68:	1009883a 	mov	r4,r2
    de6c:	b105c83a 	sub	r2,r22,r4
    de70:	b087803a 	cmpltu	r3,r22,r2
    de74:	28c7c83a 	sub	r3,r5,r3
    de78:	d9400317 	ldw	r5,12(sp)
    de7c:	1544d83a 	srl	r2,r2,r21
    de80:	1948983a 	sll	r4,r3,r5
    de84:	1d46d83a 	srl	r3,r3,r21
    de88:	20a4b03a 	or	r18,r4,r2
    de8c:	9011883a 	mov	r8,r18
    de90:	1813883a 	mov	r9,r3
    de94:	003ef606 	br	da70 <__umoddi3+0xf8>
    de98:	01400604 	movi	r5,24
    de9c:	2805883a 	mov	r2,r5
    dea0:	003ecc06 	br	d9d4 <__umoddi3+0x5c>
    dea4:	01400204 	movi	r5,8
    dea8:	2805883a 	mov	r2,r5
    deac:	003ec906 	br	d9d4 <__umoddi3+0x5c>
    deb0:	01400204 	movi	r5,8
    deb4:	2805883a 	mov	r2,r5
    deb8:	003f0106 	br	dac0 <__umoddi3+0x148>
    debc:	01400204 	movi	r5,8
    dec0:	2805883a 	mov	r2,r5
    dec4:	003f1206 	br	db10 <__umoddi3+0x198>
    dec8:	01400604 	movi	r5,24
    decc:	2805883a 	mov	r2,r5
    ded0:	003f0f06 	br	db10 <__umoddi3+0x198>
    ded4:	01400604 	movi	r5,24
    ded8:	2805883a 	mov	r2,r5
    dedc:	003ef806 	br	dac0 <__umoddi3+0x148>
    dee0:	3c7fb82e 	bgeu	r7,r17,ddc4 <__umoddi3+0x44c>
    dee4:	843fffc4 	addi	r16,r16,-1
    dee8:	3dcf883a 	add	r7,r7,r23
    deec:	003fb506 	br	ddc4 <__umoddi3+0x44c>
    def0:	147fa22e 	bgeu	r2,r17,dd7c <__umoddi3+0x404>
    def4:	e73fffc4 	addi	fp,fp,-1
    def8:	15c5883a 	add	r2,r2,r23
    defc:	003f9f06 	br	dd7c <__umoddi3+0x404>
    df00:	147f692e 	bgeu	r2,r17,dca8 <__umoddi3+0x330>
    df04:	1405883a 	add	r2,r2,r16
    df08:	003f6706 	br	dca8 <__umoddi3+0x330>
    df0c:	1405883a 	add	r2,r2,r16
    df10:	003f1906 	br	db78 <__umoddi3+0x200>
    df14:	1405883a 	add	r2,r2,r16
    df18:	003ec906 	br	da40 <__umoddi3+0xc8>
    df1c:	b13fcc36 	bltu	r22,r4,de50 <__umoddi3+0x4d8>
    df20:	000b883a 	mov	r5,zero
    df24:	003fd106 	br	de6c <__umoddi3+0x4f4>

0000df28 <__nesf2>:
    df28:	defff304 	addi	sp,sp,-52
    df2c:	dc400b15 	stw	r17,44(sp)
    df30:	dc400204 	addi	r17,sp,8
    df34:	dc000a15 	stw	r16,40(sp)
    df38:	d9000015 	stw	r4,0(sp)
    df3c:	d9400115 	stw	r5,4(sp)
    df40:	d809883a 	mov	r4,sp
    df44:	880b883a 	mov	r5,r17
    df48:	dc000604 	addi	r16,sp,24
    df4c:	dfc00c15 	stw	ra,48(sp)
    df50:	0000d500 	call	d50 <__unpack_f>
    df54:	d9000104 	addi	r4,sp,4
    df58:	800b883a 	mov	r5,r16
    df5c:	0000d500 	call	d50 <__unpack_f>
    df60:	d8800217 	ldw	r2,8(sp)
    df64:	00c00044 	movi	r3,1
    df68:	180d883a 	mov	r6,r3
    df6c:	1880062e 	bgeu	r3,r2,df88 <__nesf2+0x60>
    df70:	d8800617 	ldw	r2,24(sp)
    df74:	8809883a 	mov	r4,r17
    df78:	800b883a 	mov	r5,r16
    df7c:	1880022e 	bgeu	r3,r2,df88 <__nesf2+0x60>
    df80:	0000e180 	call	e18 <__fpcmp_parts_f>
    df84:	100d883a 	mov	r6,r2
    df88:	3005883a 	mov	r2,r6
    df8c:	dfc00c17 	ldw	ra,48(sp)
    df90:	dc400b17 	ldw	r17,44(sp)
    df94:	dc000a17 	ldw	r16,40(sp)
    df98:	dec00d04 	addi	sp,sp,52
    df9c:	f800283a 	ret

0000dfa0 <__gtsf2>:
    dfa0:	defff304 	addi	sp,sp,-52
    dfa4:	dc400b15 	stw	r17,44(sp)
    dfa8:	dc400204 	addi	r17,sp,8
    dfac:	dc000a15 	stw	r16,40(sp)
    dfb0:	d9000015 	stw	r4,0(sp)
    dfb4:	d9400115 	stw	r5,4(sp)
    dfb8:	d809883a 	mov	r4,sp
    dfbc:	880b883a 	mov	r5,r17
    dfc0:	dc000604 	addi	r16,sp,24
    dfc4:	dfc00c15 	stw	ra,48(sp)
    dfc8:	0000d500 	call	d50 <__unpack_f>
    dfcc:	d9000104 	addi	r4,sp,4
    dfd0:	800b883a 	mov	r5,r16
    dfd4:	0000d500 	call	d50 <__unpack_f>
    dfd8:	d8800217 	ldw	r2,8(sp)
    dfdc:	00c00044 	movi	r3,1
    dfe0:	01bfffc4 	movi	r6,-1
    dfe4:	1880062e 	bgeu	r3,r2,e000 <__gtsf2+0x60>
    dfe8:	d8800617 	ldw	r2,24(sp)
    dfec:	8809883a 	mov	r4,r17
    dff0:	800b883a 	mov	r5,r16
    dff4:	1880022e 	bgeu	r3,r2,e000 <__gtsf2+0x60>
    dff8:	0000e180 	call	e18 <__fpcmp_parts_f>
    dffc:	100d883a 	mov	r6,r2
    e000:	3005883a 	mov	r2,r6
    e004:	dfc00c17 	ldw	ra,48(sp)
    e008:	dc400b17 	ldw	r17,44(sp)
    e00c:	dc000a17 	ldw	r16,40(sp)
    e010:	dec00d04 	addi	sp,sp,52
    e014:	f800283a 	ret

0000e018 <_fpadd_parts>:
    e018:	defff804 	addi	sp,sp,-32
    e01c:	dcc00315 	stw	r19,12(sp)
    e020:	2027883a 	mov	r19,r4
    e024:	21000017 	ldw	r4,0(r4)
    e028:	00c00044 	movi	r3,1
    e02c:	dd400515 	stw	r21,20(sp)
    e030:	dd000415 	stw	r20,16(sp)
    e034:	ddc00715 	stw	r23,28(sp)
    e038:	dd800615 	stw	r22,24(sp)
    e03c:	dc800215 	stw	r18,8(sp)
    e040:	dc400115 	stw	r17,4(sp)
    e044:	dc000015 	stw	r16,0(sp)
    e048:	282b883a 	mov	r21,r5
    e04c:	3029883a 	mov	r20,r6
    e050:	1900632e 	bgeu	r3,r4,e1e0 <_fpadd_parts+0x1c8>
    e054:	28800017 	ldw	r2,0(r5)
    e058:	1880812e 	bgeu	r3,r2,e260 <_fpadd_parts+0x248>
    e05c:	00c00104 	movi	r3,4
    e060:	20c0dc26 	beq	r4,r3,e3d4 <_fpadd_parts+0x3bc>
    e064:	10c07e26 	beq	r2,r3,e260 <_fpadd_parts+0x248>
    e068:	00c00084 	movi	r3,2
    e06c:	10c06726 	beq	r2,r3,e20c <_fpadd_parts+0x1f4>
    e070:	20c07b26 	beq	r4,r3,e260 <_fpadd_parts+0x248>
    e074:	9dc00217 	ldw	r23,8(r19)
    e078:	28c00217 	ldw	r3,8(r5)
    e07c:	9c400317 	ldw	r17,12(r19)
    e080:	2bc00317 	ldw	r15,12(r5)
    e084:	b8cdc83a 	sub	r6,r23,r3
    e088:	9c800417 	ldw	r18,16(r19)
    e08c:	2c000417 	ldw	r16,16(r5)
    e090:	3009883a 	mov	r4,r6
    e094:	30009716 	blt	r6,zero,e2f4 <_fpadd_parts+0x2dc>
    e098:	00800fc4 	movi	r2,63
    e09c:	11806b16 	blt	r2,r6,e24c <_fpadd_parts+0x234>
    e0a0:	0100a40e 	bge	zero,r4,e334 <_fpadd_parts+0x31c>
    e0a4:	35bff804 	addi	r22,r6,-32
    e0a8:	b000bc16 	blt	r22,zero,e39c <_fpadd_parts+0x384>
    e0ac:	8596d83a 	srl	r11,r16,r22
    e0b0:	0019883a 	mov	r12,zero
    e0b4:	0013883a 	mov	r9,zero
    e0b8:	01000044 	movi	r4,1
    e0bc:	0015883a 	mov	r10,zero
    e0c0:	b000be16 	blt	r22,zero,e3bc <_fpadd_parts+0x3a4>
    e0c4:	2590983a 	sll	r8,r4,r22
    e0c8:	000f883a 	mov	r7,zero
    e0cc:	00bfffc4 	movi	r2,-1
    e0d0:	3889883a 	add	r4,r7,r2
    e0d4:	408b883a 	add	r5,r8,r2
    e0d8:	21cd803a 	cmpltu	r6,r4,r7
    e0dc:	314b883a 	add	r5,r6,r5
    e0e0:	7904703a 	and	r2,r15,r4
    e0e4:	8146703a 	and	r3,r16,r5
    e0e8:	10c4b03a 	or	r2,r2,r3
    e0ec:	10000226 	beq	r2,zero,e0f8 <_fpadd_parts+0xe0>
    e0f0:	02400044 	movi	r9,1
    e0f4:	0015883a 	mov	r10,zero
    e0f8:	5a5eb03a 	or	r15,r11,r9
    e0fc:	62a0b03a 	or	r16,r12,r10
    e100:	99400117 	ldw	r5,4(r19)
    e104:	a8800117 	ldw	r2,4(r21)
    e108:	28806e26 	beq	r5,r2,e2c4 <_fpadd_parts+0x2ac>
    e10c:	28006626 	beq	r5,zero,e2a8 <_fpadd_parts+0x290>
    e110:	7c45c83a 	sub	r2,r15,r17
    e114:	7889803a 	cmpltu	r4,r15,r2
    e118:	8487c83a 	sub	r3,r16,r18
    e11c:	1909c83a 	sub	r4,r3,r4
    e120:	100d883a 	mov	r6,r2
    e124:	200f883a 	mov	r7,r4
    e128:	38007716 	blt	r7,zero,e308 <_fpadd_parts+0x2f0>
    e12c:	a5c00215 	stw	r23,8(r20)
    e130:	a1c00415 	stw	r7,16(r20)
    e134:	a0000115 	stw	zero,4(r20)
    e138:	a1800315 	stw	r6,12(r20)
    e13c:	a2000317 	ldw	r8,12(r20)
    e140:	a2400417 	ldw	r9,16(r20)
    e144:	00bfffc4 	movi	r2,-1
    e148:	408b883a 	add	r5,r8,r2
    e14c:	2a09803a 	cmpltu	r4,r5,r8
    e150:	488d883a 	add	r6,r9,r2
    e154:	01c40034 	movhi	r7,4096
    e158:	39ffffc4 	addi	r7,r7,-1
    e15c:	218d883a 	add	r6,r4,r6
    e160:	39801736 	bltu	r7,r6,e1c0 <_fpadd_parts+0x1a8>
    e164:	31c06526 	beq	r6,r7,e2fc <_fpadd_parts+0x2e4>
    e168:	a3000217 	ldw	r12,8(r20)
    e16c:	4209883a 	add	r4,r8,r8
    e170:	00bfffc4 	movi	r2,-1
    e174:	220f803a 	cmpltu	r7,r4,r8
    e178:	4a4b883a 	add	r5,r9,r9
    e17c:	394f883a 	add	r7,r7,r5
    e180:	2095883a 	add	r10,r4,r2
    e184:	3897883a 	add	r11,r7,r2
    e188:	510d803a 	cmpltu	r6,r10,r4
    e18c:	6099883a 	add	r12,r12,r2
    e190:	32d7883a 	add	r11,r6,r11
    e194:	00840034 	movhi	r2,4096
    e198:	10bfffc4 	addi	r2,r2,-1
    e19c:	2011883a 	mov	r8,r4
    e1a0:	3813883a 	mov	r9,r7
    e1a4:	a1000315 	stw	r4,12(r20)
    e1a8:	a1c00415 	stw	r7,16(r20)
    e1ac:	a3000215 	stw	r12,8(r20)
    e1b0:	12c00336 	bltu	r2,r11,e1c0 <_fpadd_parts+0x1a8>
    e1b4:	58bfed1e 	bne	r11,r2,e16c <_fpadd_parts+0x154>
    e1b8:	00bfff84 	movi	r2,-2
    e1bc:	12bfeb2e 	bgeu	r2,r10,e16c <_fpadd_parts+0x154>
    e1c0:	a2800417 	ldw	r10,16(r20)
    e1c4:	008000c4 	movi	r2,3
    e1c8:	00c80034 	movhi	r3,8192
    e1cc:	18ffffc4 	addi	r3,r3,-1
    e1d0:	a2400317 	ldw	r9,12(r20)
    e1d4:	a0800015 	stw	r2,0(r20)
    e1d8:	1a802336 	bltu	r3,r10,e268 <_fpadd_parts+0x250>
    e1dc:	a027883a 	mov	r19,r20
    e1e0:	9805883a 	mov	r2,r19
    e1e4:	ddc00717 	ldw	r23,28(sp)
    e1e8:	dd800617 	ldw	r22,24(sp)
    e1ec:	dd400517 	ldw	r21,20(sp)
    e1f0:	dd000417 	ldw	r20,16(sp)
    e1f4:	dcc00317 	ldw	r19,12(sp)
    e1f8:	dc800217 	ldw	r18,8(sp)
    e1fc:	dc400117 	ldw	r17,4(sp)
    e200:	dc000017 	ldw	r16,0(sp)
    e204:	dec00804 	addi	sp,sp,32
    e208:	f800283a 	ret
    e20c:	20fff41e 	bne	r4,r3,e1e0 <_fpadd_parts+0x1c8>
    e210:	31000015 	stw	r4,0(r6)
    e214:	98800117 	ldw	r2,4(r19)
    e218:	30800115 	stw	r2,4(r6)
    e21c:	98c00217 	ldw	r3,8(r19)
    e220:	30c00215 	stw	r3,8(r6)
    e224:	98800317 	ldw	r2,12(r19)
    e228:	30800315 	stw	r2,12(r6)
    e22c:	98c00417 	ldw	r3,16(r19)
    e230:	30c00415 	stw	r3,16(r6)
    e234:	98800117 	ldw	r2,4(r19)
    e238:	28c00117 	ldw	r3,4(r5)
    e23c:	3027883a 	mov	r19,r6
    e240:	10c4703a 	and	r2,r2,r3
    e244:	30800115 	stw	r2,4(r6)
    e248:	003fe506 	br	e1e0 <_fpadd_parts+0x1c8>
    e24c:	1dc02616 	blt	r3,r23,e2e8 <_fpadd_parts+0x2d0>
    e250:	0023883a 	mov	r17,zero
    e254:	182f883a 	mov	r23,r3
    e258:	0025883a 	mov	r18,zero
    e25c:	003fa806 	br	e100 <_fpadd_parts+0xe8>
    e260:	a827883a 	mov	r19,r21
    e264:	003fde06 	br	e1e0 <_fpadd_parts+0x1c8>
    e268:	01800044 	movi	r6,1
    e26c:	500497fa 	slli	r2,r10,31
    e270:	4808d07a 	srli	r4,r9,1
    e274:	518ad83a 	srl	r5,r10,r6
    e278:	a2000217 	ldw	r8,8(r20)
    e27c:	1108b03a 	or	r4,r2,r4
    e280:	0007883a 	mov	r3,zero
    e284:	4984703a 	and	r2,r9,r6
    e288:	208cb03a 	or	r6,r4,r2
    e28c:	28ceb03a 	or	r7,r5,r3
    e290:	42000044 	addi	r8,r8,1
    e294:	a027883a 	mov	r19,r20
    e298:	a1c00415 	stw	r7,16(r20)
    e29c:	a2000215 	stw	r8,8(r20)
    e2a0:	a1800315 	stw	r6,12(r20)
    e2a4:	003fce06 	br	e1e0 <_fpadd_parts+0x1c8>
    e2a8:	8bc5c83a 	sub	r2,r17,r15
    e2ac:	8889803a 	cmpltu	r4,r17,r2
    e2b0:	9407c83a 	sub	r3,r18,r16
    e2b4:	1909c83a 	sub	r4,r3,r4
    e2b8:	100d883a 	mov	r6,r2
    e2bc:	200f883a 	mov	r7,r4
    e2c0:	003f9906 	br	e128 <_fpadd_parts+0x110>
    e2c4:	8bc5883a 	add	r2,r17,r15
    e2c8:	1449803a 	cmpltu	r4,r2,r17
    e2cc:	9407883a 	add	r3,r18,r16
    e2d0:	20c9883a 	add	r4,r4,r3
    e2d4:	a1400115 	stw	r5,4(r20)
    e2d8:	a5c00215 	stw	r23,8(r20)
    e2dc:	a0800315 	stw	r2,12(r20)
    e2e0:	a1000415 	stw	r4,16(r20)
    e2e4:	003fb606 	br	e1c0 <_fpadd_parts+0x1a8>
    e2e8:	001f883a 	mov	r15,zero
    e2ec:	0021883a 	mov	r16,zero
    e2f0:	003f8306 	br	e100 <_fpadd_parts+0xe8>
    e2f4:	018dc83a 	sub	r6,zero,r6
    e2f8:	003f6706 	br	e098 <_fpadd_parts+0x80>
    e2fc:	00bfff84 	movi	r2,-2
    e300:	117faf36 	bltu	r2,r5,e1c0 <_fpadd_parts+0x1a8>
    e304:	003f9806 	br	e168 <_fpadd_parts+0x150>
    e308:	0005883a 	mov	r2,zero
    e30c:	1189c83a 	sub	r4,r2,r6
    e310:	1105803a 	cmpltu	r2,r2,r4
    e314:	01cbc83a 	sub	r5,zero,r7
    e318:	2885c83a 	sub	r2,r5,r2
    e31c:	01800044 	movi	r6,1
    e320:	a1800115 	stw	r6,4(r20)
    e324:	a5c00215 	stw	r23,8(r20)
    e328:	a1000315 	stw	r4,12(r20)
    e32c:	a0800415 	stw	r2,16(r20)
    e330:	003f8206 	br	e13c <_fpadd_parts+0x124>
    e334:	203f7226 	beq	r4,zero,e100 <_fpadd_parts+0xe8>
    e338:	35bff804 	addi	r22,r6,-32
    e33c:	b9af883a 	add	r23,r23,r6
    e340:	b0003116 	blt	r22,zero,e408 <_fpadd_parts+0x3f0>
    e344:	959ad83a 	srl	r13,r18,r22
    e348:	001d883a 	mov	r14,zero
    e34c:	000f883a 	mov	r7,zero
    e350:	01000044 	movi	r4,1
    e354:	0011883a 	mov	r8,zero
    e358:	b0002516 	blt	r22,zero,e3f0 <_fpadd_parts+0x3d8>
    e35c:	2594983a 	sll	r10,r4,r22
    e360:	0013883a 	mov	r9,zero
    e364:	00bfffc4 	movi	r2,-1
    e368:	4889883a 	add	r4,r9,r2
    e36c:	508b883a 	add	r5,r10,r2
    e370:	224d803a 	cmpltu	r6,r4,r9
    e374:	314b883a 	add	r5,r6,r5
    e378:	8904703a 	and	r2,r17,r4
    e37c:	9146703a 	and	r3,r18,r5
    e380:	10c4b03a 	or	r2,r2,r3
    e384:	10000226 	beq	r2,zero,e390 <_fpadd_parts+0x378>
    e388:	01c00044 	movi	r7,1
    e38c:	0011883a 	mov	r8,zero
    e390:	69e2b03a 	or	r17,r13,r7
    e394:	7224b03a 	or	r18,r14,r8
    e398:	003f5906 	br	e100 <_fpadd_parts+0xe8>
    e39c:	8407883a 	add	r3,r16,r16
    e3a0:	008007c4 	movi	r2,31
    e3a4:	1185c83a 	sub	r2,r2,r6
    e3a8:	1886983a 	sll	r3,r3,r2
    e3ac:	7996d83a 	srl	r11,r15,r6
    e3b0:	8198d83a 	srl	r12,r16,r6
    e3b4:	1ad6b03a 	or	r11,r3,r11
    e3b8:	003f3e06 	br	e0b4 <_fpadd_parts+0x9c>
    e3bc:	2006d07a 	srli	r3,r4,1
    e3c0:	008007c4 	movi	r2,31
    e3c4:	1185c83a 	sub	r2,r2,r6
    e3c8:	1890d83a 	srl	r8,r3,r2
    e3cc:	218e983a 	sll	r7,r4,r6
    e3d0:	003f3e06 	br	e0cc <_fpadd_parts+0xb4>
    e3d4:	113f821e 	bne	r2,r4,e1e0 <_fpadd_parts+0x1c8>
    e3d8:	28c00117 	ldw	r3,4(r5)
    e3dc:	98800117 	ldw	r2,4(r19)
    e3e0:	10ff7f26 	beq	r2,r3,e1e0 <_fpadd_parts+0x1c8>
    e3e4:	04c00074 	movhi	r19,1
    e3e8:	9cca4304 	addi	r19,r19,10508
    e3ec:	003f7c06 	br	e1e0 <_fpadd_parts+0x1c8>
    e3f0:	2006d07a 	srli	r3,r4,1
    e3f4:	008007c4 	movi	r2,31
    e3f8:	1185c83a 	sub	r2,r2,r6
    e3fc:	1894d83a 	srl	r10,r3,r2
    e400:	2192983a 	sll	r9,r4,r6
    e404:	003fd706 	br	e364 <_fpadd_parts+0x34c>
    e408:	9487883a 	add	r3,r18,r18
    e40c:	008007c4 	movi	r2,31
    e410:	1185c83a 	sub	r2,r2,r6
    e414:	1886983a 	sll	r3,r3,r2
    e418:	899ad83a 	srl	r13,r17,r6
    e41c:	919cd83a 	srl	r14,r18,r6
    e420:	1b5ab03a 	or	r13,r3,r13
    e424:	003fc906 	br	e34c <_fpadd_parts+0x334>

0000e428 <__subdf3>:
    e428:	deffea04 	addi	sp,sp,-88
    e42c:	dcc01415 	stw	r19,80(sp)
    e430:	dcc00404 	addi	r19,sp,16
    e434:	2011883a 	mov	r8,r4
    e438:	2813883a 	mov	r9,r5
    e43c:	dc401315 	stw	r17,76(sp)
    e440:	d809883a 	mov	r4,sp
    e444:	980b883a 	mov	r5,r19
    e448:	dc400904 	addi	r17,sp,36
    e44c:	dfc01515 	stw	ra,84(sp)
    e450:	da400115 	stw	r9,4(sp)
    e454:	d9c00315 	stw	r7,12(sp)
    e458:	da000015 	stw	r8,0(sp)
    e45c:	d9800215 	stw	r6,8(sp)
    e460:	000f3b80 	call	f3b8 <__unpack_d>
    e464:	d9000204 	addi	r4,sp,8
    e468:	880b883a 	mov	r5,r17
    e46c:	000f3b80 	call	f3b8 <__unpack_d>
    e470:	d8800a17 	ldw	r2,40(sp)
    e474:	880b883a 	mov	r5,r17
    e478:	9809883a 	mov	r4,r19
    e47c:	d9800e04 	addi	r6,sp,56
    e480:	1080005c 	xori	r2,r2,1
    e484:	d8800a15 	stw	r2,40(sp)
    e488:	000e0180 	call	e018 <_fpadd_parts>
    e48c:	1009883a 	mov	r4,r2
    e490:	0000ec00 	call	ec0 <__pack_d>
    e494:	dfc01517 	ldw	ra,84(sp)
    e498:	dcc01417 	ldw	r19,80(sp)
    e49c:	dc401317 	ldw	r17,76(sp)
    e4a0:	dec01604 	addi	sp,sp,88
    e4a4:	f800283a 	ret

0000e4a8 <__adddf3>:
    e4a8:	deffea04 	addi	sp,sp,-88
    e4ac:	dcc01415 	stw	r19,80(sp)
    e4b0:	dcc00404 	addi	r19,sp,16
    e4b4:	2011883a 	mov	r8,r4
    e4b8:	2813883a 	mov	r9,r5
    e4bc:	dc401315 	stw	r17,76(sp)
    e4c0:	d809883a 	mov	r4,sp
    e4c4:	980b883a 	mov	r5,r19
    e4c8:	dc400904 	addi	r17,sp,36
    e4cc:	dfc01515 	stw	ra,84(sp)
    e4d0:	da400115 	stw	r9,4(sp)
    e4d4:	d9c00315 	stw	r7,12(sp)
    e4d8:	da000015 	stw	r8,0(sp)
    e4dc:	d9800215 	stw	r6,8(sp)
    e4e0:	000f3b80 	call	f3b8 <__unpack_d>
    e4e4:	d9000204 	addi	r4,sp,8
    e4e8:	880b883a 	mov	r5,r17
    e4ec:	000f3b80 	call	f3b8 <__unpack_d>
    e4f0:	d9800e04 	addi	r6,sp,56
    e4f4:	9809883a 	mov	r4,r19
    e4f8:	880b883a 	mov	r5,r17
    e4fc:	000e0180 	call	e018 <_fpadd_parts>
    e500:	1009883a 	mov	r4,r2
    e504:	0000ec00 	call	ec0 <__pack_d>
    e508:	dfc01517 	ldw	ra,84(sp)
    e50c:	dcc01417 	ldw	r19,80(sp)
    e510:	dc401317 	ldw	r17,76(sp)
    e514:	dec01604 	addi	sp,sp,88
    e518:	f800283a 	ret

0000e51c <__muldf3>:
    e51c:	deffe004 	addi	sp,sp,-128
    e520:	dc401815 	stw	r17,96(sp)
    e524:	dc400404 	addi	r17,sp,16
    e528:	2011883a 	mov	r8,r4
    e52c:	2813883a 	mov	r9,r5
    e530:	dc001715 	stw	r16,92(sp)
    e534:	d809883a 	mov	r4,sp
    e538:	880b883a 	mov	r5,r17
    e53c:	dc000904 	addi	r16,sp,36
    e540:	dfc01f15 	stw	ra,124(sp)
    e544:	da400115 	stw	r9,4(sp)
    e548:	d9c00315 	stw	r7,12(sp)
    e54c:	da000015 	stw	r8,0(sp)
    e550:	d9800215 	stw	r6,8(sp)
    e554:	ddc01e15 	stw	r23,120(sp)
    e558:	dd801d15 	stw	r22,116(sp)
    e55c:	dd401c15 	stw	r21,112(sp)
    e560:	dd001b15 	stw	r20,108(sp)
    e564:	dcc01a15 	stw	r19,104(sp)
    e568:	dc801915 	stw	r18,100(sp)
    e56c:	000f3b80 	call	f3b8 <__unpack_d>
    e570:	d9000204 	addi	r4,sp,8
    e574:	800b883a 	mov	r5,r16
    e578:	000f3b80 	call	f3b8 <__unpack_d>
    e57c:	d9000417 	ldw	r4,16(sp)
    e580:	00800044 	movi	r2,1
    e584:	1100102e 	bgeu	r2,r4,e5c8 <__muldf3+0xac>
    e588:	d8c00917 	ldw	r3,36(sp)
    e58c:	10c0062e 	bgeu	r2,r3,e5a8 <__muldf3+0x8c>
    e590:	00800104 	movi	r2,4
    e594:	20800a26 	beq	r4,r2,e5c0 <__muldf3+0xa4>
    e598:	1880cc26 	beq	r3,r2,e8cc <__muldf3+0x3b0>
    e59c:	00800084 	movi	r2,2
    e5a0:	20800926 	beq	r4,r2,e5c8 <__muldf3+0xac>
    e5a4:	1880191e 	bne	r3,r2,e60c <__muldf3+0xf0>
    e5a8:	d8c00a17 	ldw	r3,40(sp)
    e5ac:	d8800517 	ldw	r2,20(sp)
    e5b0:	8009883a 	mov	r4,r16
    e5b4:	10c4c03a 	cmpne	r2,r2,r3
    e5b8:	d8800a15 	stw	r2,40(sp)
    e5bc:	00000706 	br	e5dc <__muldf3+0xc0>
    e5c0:	00800084 	movi	r2,2
    e5c4:	1880c326 	beq	r3,r2,e8d4 <__muldf3+0x3b8>
    e5c8:	d8800517 	ldw	r2,20(sp)
    e5cc:	d8c00a17 	ldw	r3,40(sp)
    e5d0:	8809883a 	mov	r4,r17
    e5d4:	10c4c03a 	cmpne	r2,r2,r3
    e5d8:	d8800515 	stw	r2,20(sp)
    e5dc:	0000ec00 	call	ec0 <__pack_d>
    e5e0:	dfc01f17 	ldw	ra,124(sp)
    e5e4:	ddc01e17 	ldw	r23,120(sp)
    e5e8:	dd801d17 	ldw	r22,116(sp)
    e5ec:	dd401c17 	ldw	r21,112(sp)
    e5f0:	dd001b17 	ldw	r20,108(sp)
    e5f4:	dcc01a17 	ldw	r19,104(sp)
    e5f8:	dc801917 	ldw	r18,100(sp)
    e5fc:	dc401817 	ldw	r17,96(sp)
    e600:	dc001717 	ldw	r16,92(sp)
    e604:	dec02004 	addi	sp,sp,128
    e608:	f800283a 	ret
    e60c:	dd800717 	ldw	r22,28(sp)
    e610:	dc800c17 	ldw	r18,48(sp)
    e614:	002b883a 	mov	r21,zero
    e618:	0023883a 	mov	r17,zero
    e61c:	a80b883a 	mov	r5,r21
    e620:	b00d883a 	mov	r6,r22
    e624:	880f883a 	mov	r7,r17
    e628:	ddc00817 	ldw	r23,32(sp)
    e62c:	dcc00d17 	ldw	r19,52(sp)
    e630:	9009883a 	mov	r4,r18
    e634:	000d2600 	call	d260 <__muldi3>
    e638:	001b883a 	mov	r13,zero
    e63c:	680f883a 	mov	r7,r13
    e640:	b009883a 	mov	r4,r22
    e644:	000b883a 	mov	r5,zero
    e648:	980d883a 	mov	r6,r19
    e64c:	b82d883a 	mov	r22,r23
    e650:	002f883a 	mov	r23,zero
    e654:	db401615 	stw	r13,88(sp)
    e658:	d8801315 	stw	r2,76(sp)
    e65c:	d8c01415 	stw	r3,80(sp)
    e660:	dcc01515 	stw	r19,84(sp)
    e664:	000d2600 	call	d260 <__muldi3>
    e668:	b00d883a 	mov	r6,r22
    e66c:	000b883a 	mov	r5,zero
    e670:	9009883a 	mov	r4,r18
    e674:	b80f883a 	mov	r7,r23
    e678:	1021883a 	mov	r16,r2
    e67c:	1823883a 	mov	r17,r3
    e680:	000d2600 	call	d260 <__muldi3>
    e684:	8085883a 	add	r2,r16,r2
    e688:	140d803a 	cmpltu	r6,r2,r16
    e68c:	88c7883a 	add	r3,r17,r3
    e690:	30cd883a 	add	r6,r6,r3
    e694:	1029883a 	mov	r20,r2
    e698:	302b883a 	mov	r21,r6
    e69c:	da801317 	ldw	r10,76(sp)
    e6a0:	dac01417 	ldw	r11,80(sp)
    e6a4:	db001517 	ldw	r12,84(sp)
    e6a8:	db401617 	ldw	r13,88(sp)
    e6ac:	3440612e 	bgeu	r6,r17,e834 <__muldf3+0x318>
    e6b0:	0009883a 	mov	r4,zero
    e6b4:	5105883a 	add	r2,r10,r4
    e6b8:	128d803a 	cmpltu	r6,r2,r10
    e6bc:	5d07883a 	add	r3,r11,r20
    e6c0:	30cd883a 	add	r6,r6,r3
    e6c4:	0021883a 	mov	r16,zero
    e6c8:	04400044 	movi	r17,1
    e6cc:	1025883a 	mov	r18,r2
    e6d0:	3027883a 	mov	r19,r6
    e6d4:	32c06236 	bltu	r6,r11,e860 <__muldf3+0x344>
    e6d8:	59807a26 	beq	r11,r6,e8c4 <__muldf3+0x3a8>
    e6dc:	680b883a 	mov	r5,r13
    e6e0:	b80f883a 	mov	r7,r23
    e6e4:	6009883a 	mov	r4,r12
    e6e8:	b00d883a 	mov	r6,r22
    e6ec:	000d2600 	call	d260 <__muldi3>
    e6f0:	1009883a 	mov	r4,r2
    e6f4:	000f883a 	mov	r7,zero
    e6f8:	1545883a 	add	r2,r2,r21
    e6fc:	1111803a 	cmpltu	r8,r2,r4
    e700:	19c7883a 	add	r3,r3,r7
    e704:	40c7883a 	add	r3,r8,r3
    e708:	88cb883a 	add	r5,r17,r3
    e70c:	d8c00617 	ldw	r3,24(sp)
    e710:	8089883a 	add	r4,r16,r2
    e714:	d8800b17 	ldw	r2,44(sp)
    e718:	18c00104 	addi	r3,r3,4
    e71c:	240d803a 	cmpltu	r6,r4,r16
    e720:	10c7883a 	add	r3,r2,r3
    e724:	2013883a 	mov	r9,r4
    e728:	d8800a17 	ldw	r2,40(sp)
    e72c:	d9000517 	ldw	r4,20(sp)
    e730:	314d883a 	add	r6,r6,r5
    e734:	3015883a 	mov	r10,r6
    e738:	2088c03a 	cmpne	r4,r4,r2
    e73c:	00880034 	movhi	r2,8192
    e740:	10bfffc4 	addi	r2,r2,-1
    e744:	d9000f15 	stw	r4,60(sp)
    e748:	d8c01015 	stw	r3,64(sp)
    e74c:	1180162e 	bgeu	r2,r6,e7a8 <__muldf3+0x28c>
    e750:	1811883a 	mov	r8,r3
    e754:	101f883a 	mov	r15,r2
    e758:	980497fa 	slli	r2,r19,31
    e75c:	9016d07a 	srli	r11,r18,1
    e760:	500697fa 	slli	r3,r10,31
    e764:	480cd07a 	srli	r6,r9,1
    e768:	500ed07a 	srli	r7,r10,1
    e76c:	12d6b03a 	or	r11,r2,r11
    e770:	00800044 	movi	r2,1
    e774:	198cb03a 	or	r6,r3,r6
    e778:	4888703a 	and	r4,r9,r2
    e77c:	9818d07a 	srli	r12,r19,1
    e780:	001b883a 	mov	r13,zero
    e784:	03a00034 	movhi	r14,32768
    e788:	3013883a 	mov	r9,r6
    e78c:	3815883a 	mov	r10,r7
    e790:	4091883a 	add	r8,r8,r2
    e794:	20000226 	beq	r4,zero,e7a0 <__muldf3+0x284>
    e798:	5b64b03a 	or	r18,r11,r13
    e79c:	63a6b03a 	or	r19,r12,r14
    e7a0:	7abfed36 	bltu	r15,r10,e758 <__muldf3+0x23c>
    e7a4:	da001015 	stw	r8,64(sp)
    e7a8:	00840034 	movhi	r2,4096
    e7ac:	10bfffc4 	addi	r2,r2,-1
    e7b0:	12801436 	bltu	r2,r10,e804 <__muldf3+0x2e8>
    e7b4:	da001017 	ldw	r8,64(sp)
    e7b8:	101f883a 	mov	r15,r2
    e7bc:	4a45883a 	add	r2,r9,r9
    e7c0:	124d803a 	cmpltu	r6,r2,r9
    e7c4:	5287883a 	add	r3,r10,r10
    e7c8:	9497883a 	add	r11,r18,r18
    e7cc:	5c8f803a 	cmpltu	r7,r11,r18
    e7d0:	9cd9883a 	add	r12,r19,r19
    e7d4:	01000044 	movi	r4,1
    e7d8:	30cd883a 	add	r6,r6,r3
    e7dc:	3b0f883a 	add	r7,r7,r12
    e7e0:	423fffc4 	addi	r8,r8,-1
    e7e4:	1013883a 	mov	r9,r2
    e7e8:	3015883a 	mov	r10,r6
    e7ec:	111ab03a 	or	r13,r2,r4
    e7f0:	98003016 	blt	r19,zero,e8b4 <__muldf3+0x398>
    e7f4:	5825883a 	mov	r18,r11
    e7f8:	3827883a 	mov	r19,r7
    e7fc:	7abfef2e 	bgeu	r15,r10,e7bc <__muldf3+0x2a0>
    e800:	da001015 	stw	r8,64(sp)
    e804:	00803fc4 	movi	r2,255
    e808:	488e703a 	and	r7,r9,r2
    e80c:	00802004 	movi	r2,128
    e810:	0007883a 	mov	r3,zero
    e814:	0011883a 	mov	r8,zero
    e818:	38801826 	beq	r7,r2,e87c <__muldf3+0x360>
    e81c:	008000c4 	movi	r2,3
    e820:	d9000e04 	addi	r4,sp,56
    e824:	da801215 	stw	r10,72(sp)
    e828:	d8800e15 	stw	r2,56(sp)
    e82c:	da401115 	stw	r9,68(sp)
    e830:	003f6a06 	br	e5dc <__muldf3+0xc0>
    e834:	89802126 	beq	r17,r6,e8bc <__muldf3+0x3a0>
    e838:	0009883a 	mov	r4,zero
    e83c:	5105883a 	add	r2,r10,r4
    e840:	128d803a 	cmpltu	r6,r2,r10
    e844:	5d07883a 	add	r3,r11,r20
    e848:	30cd883a 	add	r6,r6,r3
    e84c:	0021883a 	mov	r16,zero
    e850:	0023883a 	mov	r17,zero
    e854:	1025883a 	mov	r18,r2
    e858:	3027883a 	mov	r19,r6
    e85c:	32ff9e2e 	bgeu	r6,r11,e6d8 <__muldf3+0x1bc>
    e860:	00800044 	movi	r2,1
    e864:	8089883a 	add	r4,r16,r2
    e868:	240d803a 	cmpltu	r6,r4,r16
    e86c:	344d883a 	add	r6,r6,r17
    e870:	2021883a 	mov	r16,r4
    e874:	3023883a 	mov	r17,r6
    e878:	003f9806 	br	e6dc <__muldf3+0x1c0>
    e87c:	403fe71e 	bne	r8,zero,e81c <__muldf3+0x300>
    e880:	01004004 	movi	r4,256
    e884:	4904703a 	and	r2,r9,r4
    e888:	10c4b03a 	or	r2,r2,r3
    e88c:	103fe31e 	bne	r2,zero,e81c <__muldf3+0x300>
    e890:	94c4b03a 	or	r2,r18,r19
    e894:	103fe126 	beq	r2,zero,e81c <__muldf3+0x300>
    e898:	49c5883a 	add	r2,r9,r7
    e89c:	1251803a 	cmpltu	r8,r2,r9
    e8a0:	4291883a 	add	r8,r8,r10
    e8a4:	013fc004 	movi	r4,-256
    e8a8:	1112703a 	and	r9,r2,r4
    e8ac:	4015883a 	mov	r10,r8
    e8b0:	003fda06 	br	e81c <__muldf3+0x300>
    e8b4:	6813883a 	mov	r9,r13
    e8b8:	003fce06 	br	e7f4 <__muldf3+0x2d8>
    e8bc:	143f7c36 	bltu	r2,r16,e6b0 <__muldf3+0x194>
    e8c0:	003fdd06 	br	e838 <__muldf3+0x31c>
    e8c4:	12bf852e 	bgeu	r2,r10,e6dc <__muldf3+0x1c0>
    e8c8:	003fe506 	br	e860 <__muldf3+0x344>
    e8cc:	00800084 	movi	r2,2
    e8d0:	20bf351e 	bne	r4,r2,e5a8 <__muldf3+0x8c>
    e8d4:	01000074 	movhi	r4,1
    e8d8:	210a4304 	addi	r4,r4,10508
    e8dc:	003f3f06 	br	e5dc <__muldf3+0xc0>

0000e8e0 <__divdf3>:
    e8e0:	deffed04 	addi	sp,sp,-76
    e8e4:	dcc01115 	stw	r19,68(sp)
    e8e8:	dcc00404 	addi	r19,sp,16
    e8ec:	2011883a 	mov	r8,r4
    e8f0:	2813883a 	mov	r9,r5
    e8f4:	dc000e15 	stw	r16,56(sp)
    e8f8:	d809883a 	mov	r4,sp
    e8fc:	980b883a 	mov	r5,r19
    e900:	dc000904 	addi	r16,sp,36
    e904:	dfc01215 	stw	ra,72(sp)
    e908:	da400115 	stw	r9,4(sp)
    e90c:	d9c00315 	stw	r7,12(sp)
    e910:	da000015 	stw	r8,0(sp)
    e914:	d9800215 	stw	r6,8(sp)
    e918:	dc801015 	stw	r18,64(sp)
    e91c:	dc400f15 	stw	r17,60(sp)
    e920:	000f3b80 	call	f3b8 <__unpack_d>
    e924:	d9000204 	addi	r4,sp,8
    e928:	800b883a 	mov	r5,r16
    e92c:	000f3b80 	call	f3b8 <__unpack_d>
    e930:	d9000417 	ldw	r4,16(sp)
    e934:	00800044 	movi	r2,1
    e938:	11000b2e 	bgeu	r2,r4,e968 <__divdf3+0x88>
    e93c:	d9400917 	ldw	r5,36(sp)
    e940:	1140762e 	bgeu	r2,r5,eb1c <__divdf3+0x23c>
    e944:	d8800517 	ldw	r2,20(sp)
    e948:	d8c00a17 	ldw	r3,40(sp)
    e94c:	01800104 	movi	r6,4
    e950:	10c4f03a 	xor	r2,r2,r3
    e954:	d8800515 	stw	r2,20(sp)
    e958:	21800226 	beq	r4,r6,e964 <__divdf3+0x84>
    e95c:	00800084 	movi	r2,2
    e960:	2080141e 	bne	r4,r2,e9b4 <__divdf3+0xd4>
    e964:	29000926 	beq	r5,r4,e98c <__divdf3+0xac>
    e968:	9809883a 	mov	r4,r19
    e96c:	0000ec00 	call	ec0 <__pack_d>
    e970:	dfc01217 	ldw	ra,72(sp)
    e974:	dcc01117 	ldw	r19,68(sp)
    e978:	dc801017 	ldw	r18,64(sp)
    e97c:	dc400f17 	ldw	r17,60(sp)
    e980:	dc000e17 	ldw	r16,56(sp)
    e984:	dec01304 	addi	sp,sp,76
    e988:	f800283a 	ret
    e98c:	01000074 	movhi	r4,1
    e990:	210a4304 	addi	r4,r4,10508
    e994:	0000ec00 	call	ec0 <__pack_d>
    e998:	dfc01217 	ldw	ra,72(sp)
    e99c:	dcc01117 	ldw	r19,68(sp)
    e9a0:	dc801017 	ldw	r18,64(sp)
    e9a4:	dc400f17 	ldw	r17,60(sp)
    e9a8:	dc000e17 	ldw	r16,56(sp)
    e9ac:	dec01304 	addi	sp,sp,76
    e9b0:	f800283a 	ret
    e9b4:	29805b26 	beq	r5,r6,eb24 <__divdf3+0x244>
    e9b8:	28802d26 	beq	r5,r2,ea70 <__divdf3+0x190>
    e9bc:	d8c00617 	ldw	r3,24(sp)
    e9c0:	d8800b17 	ldw	r2,44(sp)
    e9c4:	d9c00817 	ldw	r7,32(sp)
    e9c8:	dc400d17 	ldw	r17,52(sp)
    e9cc:	188bc83a 	sub	r5,r3,r2
    e9d0:	d9800717 	ldw	r6,28(sp)
    e9d4:	dc000c17 	ldw	r16,48(sp)
    e9d8:	d9400615 	stw	r5,24(sp)
    e9dc:	3c403836 	bltu	r7,r17,eac0 <__divdf3+0x1e0>
    e9e0:	89c03626 	beq	r17,r7,eabc <__divdf3+0x1dc>
    e9e4:	0015883a 	mov	r10,zero
    e9e8:	001d883a 	mov	r14,zero
    e9ec:	02c40034 	movhi	r11,4096
    e9f0:	001f883a 	mov	r15,zero
    e9f4:	003f883a 	mov	ra,zero
    e9f8:	04800f44 	movi	r18,61
    e9fc:	00000f06 	br	ea3c <__divdf3+0x15c>
    ea00:	601d883a 	mov	r14,r12
    ea04:	681f883a 	mov	r15,r13
    ea08:	400d883a 	mov	r6,r8
    ea0c:	100f883a 	mov	r7,r2
    ea10:	3191883a 	add	r8,r6,r6
    ea14:	5808d07a 	srli	r4,r11,1
    ea18:	4185803a 	cmpltu	r2,r8,r6
    ea1c:	39d3883a 	add	r9,r7,r7
    ea20:	28c6b03a 	or	r3,r5,r3
    ea24:	1245883a 	add	r2,r2,r9
    ea28:	1815883a 	mov	r10,r3
    ea2c:	2017883a 	mov	r11,r4
    ea30:	400d883a 	mov	r6,r8
    ea34:	100f883a 	mov	r7,r2
    ea38:	fc801726 	beq	ra,r18,ea98 <__divdf3+0x1b8>
    ea3c:	580a97fa 	slli	r5,r11,31
    ea40:	5006d07a 	srli	r3,r10,1
    ea44:	ffc00044 	addi	ra,ra,1
    ea48:	3c7ff136 	bltu	r7,r17,ea10 <__divdf3+0x130>
    ea4c:	3411c83a 	sub	r8,r6,r16
    ea50:	3205803a 	cmpltu	r2,r6,r8
    ea54:	3c53c83a 	sub	r9,r7,r17
    ea58:	7298b03a 	or	r12,r14,r10
    ea5c:	7adab03a 	or	r13,r15,r11
    ea60:	4885c83a 	sub	r2,r9,r2
    ea64:	89ffe61e 	bne	r17,r7,ea00 <__divdf3+0x120>
    ea68:	343fe936 	bltu	r6,r16,ea10 <__divdf3+0x130>
    ea6c:	003fe406 	br	ea00 <__divdf3+0x120>
    ea70:	9809883a 	mov	r4,r19
    ea74:	d9800415 	stw	r6,16(sp)
    ea78:	0000ec00 	call	ec0 <__pack_d>
    ea7c:	dfc01217 	ldw	ra,72(sp)
    ea80:	dcc01117 	ldw	r19,68(sp)
    ea84:	dc801017 	ldw	r18,64(sp)
    ea88:	dc400f17 	ldw	r17,60(sp)
    ea8c:	dc000e17 	ldw	r16,56(sp)
    ea90:	dec01304 	addi	sp,sp,76
    ea94:	f800283a 	ret
    ea98:	00803fc4 	movi	r2,255
    ea9c:	7090703a 	and	r8,r14,r2
    eaa0:	00802004 	movi	r2,128
    eaa4:	0007883a 	mov	r3,zero
    eaa8:	0013883a 	mov	r9,zero
    eaac:	40800d26 	beq	r8,r2,eae4 <__divdf3+0x204>
    eab0:	dbc00815 	stw	r15,32(sp)
    eab4:	db800715 	stw	r14,28(sp)
    eab8:	003fab06 	br	e968 <__divdf3+0x88>
    eabc:	343fc92e 	bgeu	r6,r16,e9e4 <__divdf3+0x104>
    eac0:	3185883a 	add	r2,r6,r6
    eac4:	1189803a 	cmpltu	r4,r2,r6
    eac8:	39c7883a 	add	r3,r7,r7
    eacc:	20c9883a 	add	r4,r4,r3
    ead0:	297fffc4 	addi	r5,r5,-1
    ead4:	100d883a 	mov	r6,r2
    ead8:	200f883a 	mov	r7,r4
    eadc:	d9400615 	stw	r5,24(sp)
    eae0:	003fc006 	br	e9e4 <__divdf3+0x104>
    eae4:	483ff21e 	bne	r9,zero,eab0 <__divdf3+0x1d0>
    eae8:	01004004 	movi	r4,256
    eaec:	7104703a 	and	r2,r14,r4
    eaf0:	10c4b03a 	or	r2,r2,r3
    eaf4:	103fee1e 	bne	r2,zero,eab0 <__divdf3+0x1d0>
    eaf8:	31c4b03a 	or	r2,r6,r7
    eafc:	103fec26 	beq	r2,zero,eab0 <__divdf3+0x1d0>
    eb00:	7205883a 	add	r2,r14,r8
    eb04:	1391803a 	cmpltu	r8,r2,r14
    eb08:	43d1883a 	add	r8,r8,r15
    eb0c:	013fc004 	movi	r4,-256
    eb10:	111c703a 	and	r14,r2,r4
    eb14:	401f883a 	mov	r15,r8
    eb18:	003fe506 	br	eab0 <__divdf3+0x1d0>
    eb1c:	8009883a 	mov	r4,r16
    eb20:	003f9206 	br	e96c <__divdf3+0x8c>
    eb24:	9809883a 	mov	r4,r19
    eb28:	d8000715 	stw	zero,28(sp)
    eb2c:	d8000815 	stw	zero,32(sp)
    eb30:	d8000615 	stw	zero,24(sp)
    eb34:	003f8d06 	br	e96c <__divdf3+0x8c>

0000eb38 <__eqdf2>:
    eb38:	deffef04 	addi	sp,sp,-68
    eb3c:	dc400f15 	stw	r17,60(sp)
    eb40:	dc400404 	addi	r17,sp,16
    eb44:	2005883a 	mov	r2,r4
    eb48:	2807883a 	mov	r3,r5
    eb4c:	dc000e15 	stw	r16,56(sp)
    eb50:	d809883a 	mov	r4,sp
    eb54:	880b883a 	mov	r5,r17
    eb58:	dc000904 	addi	r16,sp,36
    eb5c:	d8c00115 	stw	r3,4(sp)
    eb60:	d8800015 	stw	r2,0(sp)
    eb64:	d9800215 	stw	r6,8(sp)
    eb68:	dfc01015 	stw	ra,64(sp)
    eb6c:	d9c00315 	stw	r7,12(sp)
    eb70:	000f3b80 	call	f3b8 <__unpack_d>
    eb74:	d9000204 	addi	r4,sp,8
    eb78:	800b883a 	mov	r5,r16
    eb7c:	000f3b80 	call	f3b8 <__unpack_d>
    eb80:	d8800417 	ldw	r2,16(sp)
    eb84:	00c00044 	movi	r3,1
    eb88:	180d883a 	mov	r6,r3
    eb8c:	1880062e 	bgeu	r3,r2,eba8 <__eqdf2+0x70>
    eb90:	d8800917 	ldw	r2,36(sp)
    eb94:	8809883a 	mov	r4,r17
    eb98:	800b883a 	mov	r5,r16
    eb9c:	1880022e 	bgeu	r3,r2,eba8 <__eqdf2+0x70>
    eba0:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    eba4:	100d883a 	mov	r6,r2
    eba8:	3005883a 	mov	r2,r6
    ebac:	dfc01017 	ldw	ra,64(sp)
    ebb0:	dc400f17 	ldw	r17,60(sp)
    ebb4:	dc000e17 	ldw	r16,56(sp)
    ebb8:	dec01104 	addi	sp,sp,68
    ebbc:	f800283a 	ret

0000ebc0 <__nedf2>:
    ebc0:	deffef04 	addi	sp,sp,-68
    ebc4:	dc400f15 	stw	r17,60(sp)
    ebc8:	dc400404 	addi	r17,sp,16
    ebcc:	2005883a 	mov	r2,r4
    ebd0:	2807883a 	mov	r3,r5
    ebd4:	dc000e15 	stw	r16,56(sp)
    ebd8:	d809883a 	mov	r4,sp
    ebdc:	880b883a 	mov	r5,r17
    ebe0:	dc000904 	addi	r16,sp,36
    ebe4:	d8c00115 	stw	r3,4(sp)
    ebe8:	d8800015 	stw	r2,0(sp)
    ebec:	d9800215 	stw	r6,8(sp)
    ebf0:	dfc01015 	stw	ra,64(sp)
    ebf4:	d9c00315 	stw	r7,12(sp)
    ebf8:	000f3b80 	call	f3b8 <__unpack_d>
    ebfc:	d9000204 	addi	r4,sp,8
    ec00:	800b883a 	mov	r5,r16
    ec04:	000f3b80 	call	f3b8 <__unpack_d>
    ec08:	d8800417 	ldw	r2,16(sp)
    ec0c:	00c00044 	movi	r3,1
    ec10:	180d883a 	mov	r6,r3
    ec14:	1880062e 	bgeu	r3,r2,ec30 <__nedf2+0x70>
    ec18:	d8800917 	ldw	r2,36(sp)
    ec1c:	8809883a 	mov	r4,r17
    ec20:	800b883a 	mov	r5,r16
    ec24:	1880022e 	bgeu	r3,r2,ec30 <__nedf2+0x70>
    ec28:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    ec2c:	100d883a 	mov	r6,r2
    ec30:	3005883a 	mov	r2,r6
    ec34:	dfc01017 	ldw	ra,64(sp)
    ec38:	dc400f17 	ldw	r17,60(sp)
    ec3c:	dc000e17 	ldw	r16,56(sp)
    ec40:	dec01104 	addi	sp,sp,68
    ec44:	f800283a 	ret

0000ec48 <__gtdf2>:
    ec48:	deffef04 	addi	sp,sp,-68
    ec4c:	dc400f15 	stw	r17,60(sp)
    ec50:	dc400404 	addi	r17,sp,16
    ec54:	2005883a 	mov	r2,r4
    ec58:	2807883a 	mov	r3,r5
    ec5c:	dc000e15 	stw	r16,56(sp)
    ec60:	d809883a 	mov	r4,sp
    ec64:	880b883a 	mov	r5,r17
    ec68:	dc000904 	addi	r16,sp,36
    ec6c:	d8c00115 	stw	r3,4(sp)
    ec70:	d8800015 	stw	r2,0(sp)
    ec74:	d9800215 	stw	r6,8(sp)
    ec78:	dfc01015 	stw	ra,64(sp)
    ec7c:	d9c00315 	stw	r7,12(sp)
    ec80:	000f3b80 	call	f3b8 <__unpack_d>
    ec84:	d9000204 	addi	r4,sp,8
    ec88:	800b883a 	mov	r5,r16
    ec8c:	000f3b80 	call	f3b8 <__unpack_d>
    ec90:	d8800417 	ldw	r2,16(sp)
    ec94:	00c00044 	movi	r3,1
    ec98:	01bfffc4 	movi	r6,-1
    ec9c:	1880062e 	bgeu	r3,r2,ecb8 <__gtdf2+0x70>
    eca0:	d8800917 	ldw	r2,36(sp)
    eca4:	8809883a 	mov	r4,r17
    eca8:	800b883a 	mov	r5,r16
    ecac:	1880022e 	bgeu	r3,r2,ecb8 <__gtdf2+0x70>
    ecb0:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    ecb4:	100d883a 	mov	r6,r2
    ecb8:	3005883a 	mov	r2,r6
    ecbc:	dfc01017 	ldw	ra,64(sp)
    ecc0:	dc400f17 	ldw	r17,60(sp)
    ecc4:	dc000e17 	ldw	r16,56(sp)
    ecc8:	dec01104 	addi	sp,sp,68
    eccc:	f800283a 	ret

0000ecd0 <__gedf2>:
    ecd0:	deffef04 	addi	sp,sp,-68
    ecd4:	dc400f15 	stw	r17,60(sp)
    ecd8:	dc400404 	addi	r17,sp,16
    ecdc:	2005883a 	mov	r2,r4
    ece0:	2807883a 	mov	r3,r5
    ece4:	dc000e15 	stw	r16,56(sp)
    ece8:	d809883a 	mov	r4,sp
    ecec:	880b883a 	mov	r5,r17
    ecf0:	dc000904 	addi	r16,sp,36
    ecf4:	d8c00115 	stw	r3,4(sp)
    ecf8:	d8800015 	stw	r2,0(sp)
    ecfc:	d9800215 	stw	r6,8(sp)
    ed00:	dfc01015 	stw	ra,64(sp)
    ed04:	d9c00315 	stw	r7,12(sp)
    ed08:	000f3b80 	call	f3b8 <__unpack_d>
    ed0c:	d9000204 	addi	r4,sp,8
    ed10:	800b883a 	mov	r5,r16
    ed14:	000f3b80 	call	f3b8 <__unpack_d>
    ed18:	d8800417 	ldw	r2,16(sp)
    ed1c:	00c00044 	movi	r3,1
    ed20:	01bfffc4 	movi	r6,-1
    ed24:	1880062e 	bgeu	r3,r2,ed40 <__gedf2+0x70>
    ed28:	d8800917 	ldw	r2,36(sp)
    ed2c:	8809883a 	mov	r4,r17
    ed30:	800b883a 	mov	r5,r16
    ed34:	1880022e 	bgeu	r3,r2,ed40 <__gedf2+0x70>
    ed38:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    ed3c:	100d883a 	mov	r6,r2
    ed40:	3005883a 	mov	r2,r6
    ed44:	dfc01017 	ldw	ra,64(sp)
    ed48:	dc400f17 	ldw	r17,60(sp)
    ed4c:	dc000e17 	ldw	r16,56(sp)
    ed50:	dec01104 	addi	sp,sp,68
    ed54:	f800283a 	ret

0000ed58 <__ltdf2>:
    ed58:	deffef04 	addi	sp,sp,-68
    ed5c:	dc400f15 	stw	r17,60(sp)
    ed60:	dc400404 	addi	r17,sp,16
    ed64:	2005883a 	mov	r2,r4
    ed68:	2807883a 	mov	r3,r5
    ed6c:	dc000e15 	stw	r16,56(sp)
    ed70:	d809883a 	mov	r4,sp
    ed74:	880b883a 	mov	r5,r17
    ed78:	dc000904 	addi	r16,sp,36
    ed7c:	d8c00115 	stw	r3,4(sp)
    ed80:	d8800015 	stw	r2,0(sp)
    ed84:	d9800215 	stw	r6,8(sp)
    ed88:	dfc01015 	stw	ra,64(sp)
    ed8c:	d9c00315 	stw	r7,12(sp)
    ed90:	000f3b80 	call	f3b8 <__unpack_d>
    ed94:	d9000204 	addi	r4,sp,8
    ed98:	800b883a 	mov	r5,r16
    ed9c:	000f3b80 	call	f3b8 <__unpack_d>
    eda0:	d8800417 	ldw	r2,16(sp)
    eda4:	00c00044 	movi	r3,1
    eda8:	180d883a 	mov	r6,r3
    edac:	1880062e 	bgeu	r3,r2,edc8 <__ltdf2+0x70>
    edb0:	d8800917 	ldw	r2,36(sp)
    edb4:	8809883a 	mov	r4,r17
    edb8:	800b883a 	mov	r5,r16
    edbc:	1880022e 	bgeu	r3,r2,edc8 <__ltdf2+0x70>
    edc0:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    edc4:	100d883a 	mov	r6,r2
    edc8:	3005883a 	mov	r2,r6
    edcc:	dfc01017 	ldw	ra,64(sp)
    edd0:	dc400f17 	ldw	r17,60(sp)
    edd4:	dc000e17 	ldw	r16,56(sp)
    edd8:	dec01104 	addi	sp,sp,68
    eddc:	f800283a 	ret

0000ede0 <__ledf2>:
    ede0:	deffef04 	addi	sp,sp,-68
    ede4:	dc400f15 	stw	r17,60(sp)
    ede8:	dc400404 	addi	r17,sp,16
    edec:	2005883a 	mov	r2,r4
    edf0:	2807883a 	mov	r3,r5
    edf4:	dc000e15 	stw	r16,56(sp)
    edf8:	d809883a 	mov	r4,sp
    edfc:	880b883a 	mov	r5,r17
    ee00:	dc000904 	addi	r16,sp,36
    ee04:	d8c00115 	stw	r3,4(sp)
    ee08:	d8800015 	stw	r2,0(sp)
    ee0c:	d9800215 	stw	r6,8(sp)
    ee10:	dfc01015 	stw	ra,64(sp)
    ee14:	d9c00315 	stw	r7,12(sp)
    ee18:	000f3b80 	call	f3b8 <__unpack_d>
    ee1c:	d9000204 	addi	r4,sp,8
    ee20:	800b883a 	mov	r5,r16
    ee24:	000f3b80 	call	f3b8 <__unpack_d>
    ee28:	d8800417 	ldw	r2,16(sp)
    ee2c:	00c00044 	movi	r3,1
    ee30:	180d883a 	mov	r6,r3
    ee34:	1880062e 	bgeu	r3,r2,ee50 <__ledf2+0x70>
    ee38:	d8800917 	ldw	r2,36(sp)
    ee3c:	8809883a 	mov	r4,r17
    ee40:	800b883a 	mov	r5,r16
    ee44:	1880022e 	bgeu	r3,r2,ee50 <__ledf2+0x70>
    ee48:	000f4f00 	call	f4f0 <__fpcmp_parts_d>
    ee4c:	100d883a 	mov	r6,r2
    ee50:	3005883a 	mov	r2,r6
    ee54:	dfc01017 	ldw	ra,64(sp)
    ee58:	dc400f17 	ldw	r17,60(sp)
    ee5c:	dc000e17 	ldw	r16,56(sp)
    ee60:	dec01104 	addi	sp,sp,68
    ee64:	f800283a 	ret

0000ee68 <__floatsidf>:
    ee68:	2006d7fa 	srli	r3,r4,31
    ee6c:	defff604 	addi	sp,sp,-40
    ee70:	008000c4 	movi	r2,3
    ee74:	dfc00915 	stw	ra,36(sp)
    ee78:	dcc00815 	stw	r19,32(sp)
    ee7c:	dc800715 	stw	r18,28(sp)
    ee80:	dc400615 	stw	r17,24(sp)
    ee84:	dc000515 	stw	r16,20(sp)
    ee88:	d8800015 	stw	r2,0(sp)
    ee8c:	d8c00115 	stw	r3,4(sp)
    ee90:	20000f1e 	bne	r4,zero,eed0 <__floatsidf+0x68>
    ee94:	00800084 	movi	r2,2
    ee98:	d8800015 	stw	r2,0(sp)
    ee9c:	d809883a 	mov	r4,sp
    eea0:	0000ec00 	call	ec0 <__pack_d>
    eea4:	1009883a 	mov	r4,r2
    eea8:	180b883a 	mov	r5,r3
    eeac:	2005883a 	mov	r2,r4
    eeb0:	2807883a 	mov	r3,r5
    eeb4:	dfc00917 	ldw	ra,36(sp)
    eeb8:	dcc00817 	ldw	r19,32(sp)
    eebc:	dc800717 	ldw	r18,28(sp)
    eec0:	dc400617 	ldw	r17,24(sp)
    eec4:	dc000517 	ldw	r16,20(sp)
    eec8:	dec00a04 	addi	sp,sp,40
    eecc:	f800283a 	ret
    eed0:	00800f04 	movi	r2,60
    eed4:	1807003a 	cmpeq	r3,r3,zero
    eed8:	d8800215 	stw	r2,8(sp)
    eedc:	18001126 	beq	r3,zero,ef24 <__floatsidf+0xbc>
    eee0:	0027883a 	mov	r19,zero
    eee4:	2025883a 	mov	r18,r4
    eee8:	d9000315 	stw	r4,12(sp)
    eeec:	dcc00415 	stw	r19,16(sp)
    eef0:	0000b700 	call	b70 <__clzsi2>
    eef4:	11000744 	addi	r4,r2,29
    eef8:	013fe80e 	bge	zero,r4,ee9c <__floatsidf+0x34>
    eefc:	10bfff44 	addi	r2,r2,-3
    ef00:	10000c16 	blt	r2,zero,ef34 <__floatsidf+0xcc>
    ef04:	90a2983a 	sll	r17,r18,r2
    ef08:	0021883a 	mov	r16,zero
    ef0c:	d8800217 	ldw	r2,8(sp)
    ef10:	dc400415 	stw	r17,16(sp)
    ef14:	dc000315 	stw	r16,12(sp)
    ef18:	1105c83a 	sub	r2,r2,r4
    ef1c:	d8800215 	stw	r2,8(sp)
    ef20:	003fde06 	br	ee9c <__floatsidf+0x34>
    ef24:	00a00034 	movhi	r2,32768
    ef28:	20800a26 	beq	r4,r2,ef54 <__floatsidf+0xec>
    ef2c:	0109c83a 	sub	r4,zero,r4
    ef30:	003feb06 	br	eee0 <__floatsidf+0x78>
    ef34:	9006d07a 	srli	r3,r18,1
    ef38:	008007c4 	movi	r2,31
    ef3c:	1105c83a 	sub	r2,r2,r4
    ef40:	1886d83a 	srl	r3,r3,r2
    ef44:	9922983a 	sll	r17,r19,r4
    ef48:	9120983a 	sll	r16,r18,r4
    ef4c:	1c62b03a 	or	r17,r3,r17
    ef50:	003fee06 	br	ef0c <__floatsidf+0xa4>
    ef54:	0009883a 	mov	r4,zero
    ef58:	01707834 	movhi	r5,49632
    ef5c:	003fd306 	br	eeac <__floatsidf+0x44>

0000ef60 <__fixdfsi>:
    ef60:	defff804 	addi	sp,sp,-32
    ef64:	2005883a 	mov	r2,r4
    ef68:	2807883a 	mov	r3,r5
    ef6c:	d809883a 	mov	r4,sp
    ef70:	d9400204 	addi	r5,sp,8
    ef74:	d8c00115 	stw	r3,4(sp)
    ef78:	d8800015 	stw	r2,0(sp)
    ef7c:	dfc00715 	stw	ra,28(sp)
    ef80:	000f3b80 	call	f3b8 <__unpack_d>
    ef84:	d8c00217 	ldw	r3,8(sp)
    ef88:	00800084 	movi	r2,2
    ef8c:	1880051e 	bne	r3,r2,efa4 <__fixdfsi+0x44>
    ef90:	0007883a 	mov	r3,zero
    ef94:	1805883a 	mov	r2,r3
    ef98:	dfc00717 	ldw	ra,28(sp)
    ef9c:	dec00804 	addi	sp,sp,32
    efa0:	f800283a 	ret
    efa4:	00800044 	movi	r2,1
    efa8:	10fff92e 	bgeu	r2,r3,ef90 <__fixdfsi+0x30>
    efac:	00800104 	movi	r2,4
    efb0:	18800426 	beq	r3,r2,efc4 <__fixdfsi+0x64>
    efb4:	d8c00417 	ldw	r3,16(sp)
    efb8:	183ff516 	blt	r3,zero,ef90 <__fixdfsi+0x30>
    efbc:	00800784 	movi	r2,30
    efc0:	10c0080e 	bge	r2,r3,efe4 <__fixdfsi+0x84>
    efc4:	d8800317 	ldw	r2,12(sp)
    efc8:	1000121e 	bne	r2,zero,f014 <__fixdfsi+0xb4>
    efcc:	00e00034 	movhi	r3,32768
    efd0:	18ffffc4 	addi	r3,r3,-1
    efd4:	1805883a 	mov	r2,r3
    efd8:	dfc00717 	ldw	ra,28(sp)
    efdc:	dec00804 	addi	sp,sp,32
    efe0:	f800283a 	ret
    efe4:	00800f04 	movi	r2,60
    efe8:	10d1c83a 	sub	r8,r2,r3
    efec:	40bff804 	addi	r2,r8,-32
    eff0:	d9800517 	ldw	r6,20(sp)
    eff4:	d9c00617 	ldw	r7,24(sp)
    eff8:	10000816 	blt	r2,zero,f01c <__fixdfsi+0xbc>
    effc:	3888d83a 	srl	r4,r7,r2
    f000:	d8800317 	ldw	r2,12(sp)
    f004:	2007883a 	mov	r3,r4
    f008:	103fe226 	beq	r2,zero,ef94 <__fixdfsi+0x34>
    f00c:	0107c83a 	sub	r3,zero,r4
    f010:	003fe006 	br	ef94 <__fixdfsi+0x34>
    f014:	00e00034 	movhi	r3,32768
    f018:	003fde06 	br	ef94 <__fixdfsi+0x34>
    f01c:	39c7883a 	add	r3,r7,r7
    f020:	008007c4 	movi	r2,31
    f024:	1205c83a 	sub	r2,r2,r8
    f028:	1886983a 	sll	r3,r3,r2
    f02c:	3208d83a 	srl	r4,r6,r8
    f030:	1908b03a 	or	r4,r3,r4
    f034:	003ff206 	br	f000 <__fixdfsi+0xa0>

0000f038 <__truncdfsf2>:
    f038:	defff804 	addi	sp,sp,-32
    f03c:	2005883a 	mov	r2,r4
    f040:	2807883a 	mov	r3,r5
    f044:	d809883a 	mov	r4,sp
    f048:	d9400204 	addi	r5,sp,8
    f04c:	d8c00115 	stw	r3,4(sp)
    f050:	d8800015 	stw	r2,0(sp)
    f054:	dfc00715 	stw	ra,28(sp)
    f058:	000f3b80 	call	f3b8 <__unpack_d>
    f05c:	d9c00517 	ldw	r7,20(sp)
    f060:	da000617 	ldw	r8,24(sp)
    f064:	02d00034 	movhi	r11,16384
    f068:	5affffc4 	addi	r11,r11,-1
    f06c:	3812d7ba 	srli	r9,r7,30
    f070:	401a90ba 	slli	r13,r8,2
    f074:	3ac4703a 	and	r2,r7,r11
    f078:	0007883a 	mov	r3,zero
    f07c:	6a52b03a 	or	r9,r13,r9
    f080:	10c4b03a 	or	r2,r2,r3
    f084:	d9000217 	ldw	r4,8(sp)
    f088:	d9400317 	ldw	r5,12(sp)
    f08c:	d9800417 	ldw	r6,16(sp)
    f090:	480f883a 	mov	r7,r9
    f094:	10000126 	beq	r2,zero,f09c <__truncdfsf2+0x64>
    f098:	49c00054 	ori	r7,r9,1
    f09c:	000f38c0 	call	f38c <__make_fp>
    f0a0:	dfc00717 	ldw	ra,28(sp)
    f0a4:	dec00804 	addi	sp,sp,32
    f0a8:	f800283a 	ret

0000f0ac <__floatunsidf>:
    f0ac:	defff204 	addi	sp,sp,-56
    f0b0:	dfc00d15 	stw	ra,52(sp)
    f0b4:	ddc00c15 	stw	r23,48(sp)
    f0b8:	dd800b15 	stw	r22,44(sp)
    f0bc:	dd400a15 	stw	r21,40(sp)
    f0c0:	dd000915 	stw	r20,36(sp)
    f0c4:	dcc00815 	stw	r19,32(sp)
    f0c8:	dc800715 	stw	r18,28(sp)
    f0cc:	dc400615 	stw	r17,24(sp)
    f0d0:	dc000515 	stw	r16,20(sp)
    f0d4:	d8000115 	stw	zero,4(sp)
    f0d8:	20000f1e 	bne	r4,zero,f118 <__floatunsidf+0x6c>
    f0dc:	00800084 	movi	r2,2
    f0e0:	d8800015 	stw	r2,0(sp)
    f0e4:	d809883a 	mov	r4,sp
    f0e8:	0000ec00 	call	ec0 <__pack_d>
    f0ec:	dfc00d17 	ldw	ra,52(sp)
    f0f0:	ddc00c17 	ldw	r23,48(sp)
    f0f4:	dd800b17 	ldw	r22,44(sp)
    f0f8:	dd400a17 	ldw	r21,40(sp)
    f0fc:	dd000917 	ldw	r20,36(sp)
    f100:	dcc00817 	ldw	r19,32(sp)
    f104:	dc800717 	ldw	r18,28(sp)
    f108:	dc400617 	ldw	r17,24(sp)
    f10c:	dc000517 	ldw	r16,20(sp)
    f110:	dec00e04 	addi	sp,sp,56
    f114:	f800283a 	ret
    f118:	008000c4 	movi	r2,3
    f11c:	00c00f04 	movi	r3,60
    f120:	002f883a 	mov	r23,zero
    f124:	202d883a 	mov	r22,r4
    f128:	d8800015 	stw	r2,0(sp)
    f12c:	d8c00215 	stw	r3,8(sp)
    f130:	d9000315 	stw	r4,12(sp)
    f134:	ddc00415 	stw	r23,16(sp)
    f138:	0000b700 	call	b70 <__clzsi2>
    f13c:	12400744 	addi	r9,r2,29
    f140:	48000b16 	blt	r9,zero,f170 <__floatunsidf+0xc4>
    f144:	483fe726 	beq	r9,zero,f0e4 <__floatunsidf+0x38>
    f148:	10bfff44 	addi	r2,r2,-3
    f14c:	10002e16 	blt	r2,zero,f208 <__floatunsidf+0x15c>
    f150:	b0a2983a 	sll	r17,r22,r2
    f154:	0021883a 	mov	r16,zero
    f158:	d8800217 	ldw	r2,8(sp)
    f15c:	dc400415 	stw	r17,16(sp)
    f160:	dc000315 	stw	r16,12(sp)
    f164:	1245c83a 	sub	r2,r2,r9
    f168:	d8800215 	stw	r2,8(sp)
    f16c:	003fdd06 	br	f0e4 <__floatunsidf+0x38>
    f170:	0255c83a 	sub	r10,zero,r9
    f174:	51bff804 	addi	r6,r10,-32
    f178:	30001b16 	blt	r6,zero,f1e8 <__floatunsidf+0x13c>
    f17c:	b9a8d83a 	srl	r20,r23,r6
    f180:	002b883a 	mov	r21,zero
    f184:	000f883a 	mov	r7,zero
    f188:	01000044 	movi	r4,1
    f18c:	0011883a 	mov	r8,zero
    f190:	30002516 	blt	r6,zero,f228 <__floatunsidf+0x17c>
    f194:	21a6983a 	sll	r19,r4,r6
    f198:	0025883a 	mov	r18,zero
    f19c:	00bfffc4 	movi	r2,-1
    f1a0:	9089883a 	add	r4,r18,r2
    f1a4:	988b883a 	add	r5,r19,r2
    f1a8:	248d803a 	cmpltu	r6,r4,r18
    f1ac:	314b883a 	add	r5,r6,r5
    f1b0:	b104703a 	and	r2,r22,r4
    f1b4:	b946703a 	and	r3,r23,r5
    f1b8:	10c4b03a 	or	r2,r2,r3
    f1bc:	10000226 	beq	r2,zero,f1c8 <__floatunsidf+0x11c>
    f1c0:	01c00044 	movi	r7,1
    f1c4:	0011883a 	mov	r8,zero
    f1c8:	d9000217 	ldw	r4,8(sp)
    f1cc:	a1c4b03a 	or	r2,r20,r7
    f1d0:	aa06b03a 	or	r3,r21,r8
    f1d4:	2249c83a 	sub	r4,r4,r9
    f1d8:	d8c00415 	stw	r3,16(sp)
    f1dc:	d9000215 	stw	r4,8(sp)
    f1e0:	d8800315 	stw	r2,12(sp)
    f1e4:	003fbf06 	br	f0e4 <__floatunsidf+0x38>
    f1e8:	bdc7883a 	add	r3,r23,r23
    f1ec:	008007c4 	movi	r2,31
    f1f0:	1285c83a 	sub	r2,r2,r10
    f1f4:	1886983a 	sll	r3,r3,r2
    f1f8:	b2a8d83a 	srl	r20,r22,r10
    f1fc:	baaad83a 	srl	r21,r23,r10
    f200:	1d28b03a 	or	r20,r3,r20
    f204:	003fdf06 	br	f184 <__floatunsidf+0xd8>
    f208:	b006d07a 	srli	r3,r22,1
    f20c:	008007c4 	movi	r2,31
    f210:	1245c83a 	sub	r2,r2,r9
    f214:	1886d83a 	srl	r3,r3,r2
    f218:	ba62983a 	sll	r17,r23,r9
    f21c:	b260983a 	sll	r16,r22,r9
    f220:	1c62b03a 	or	r17,r3,r17
    f224:	003fcc06 	br	f158 <__floatunsidf+0xac>
    f228:	2006d07a 	srli	r3,r4,1
    f22c:	008007c4 	movi	r2,31
    f230:	1285c83a 	sub	r2,r2,r10
    f234:	18a6d83a 	srl	r19,r3,r2
    f238:	22a4983a 	sll	r18,r4,r10
    f23c:	003fd706 	br	f19c <__floatunsidf+0xf0>

0000f240 <udivmodsi4>:
    f240:	29001b2e 	bgeu	r5,r4,f2b0 <udivmodsi4+0x70>
    f244:	28001a16 	blt	r5,zero,f2b0 <udivmodsi4+0x70>
    f248:	00800044 	movi	r2,1
    f24c:	0007883a 	mov	r3,zero
    f250:	01c007c4 	movi	r7,31
    f254:	00000306 	br	f264 <udivmodsi4+0x24>
    f258:	19c01326 	beq	r3,r7,f2a8 <udivmodsi4+0x68>
    f25c:	18c00044 	addi	r3,r3,1
    f260:	28000416 	blt	r5,zero,f274 <udivmodsi4+0x34>
    f264:	294b883a 	add	r5,r5,r5
    f268:	1085883a 	add	r2,r2,r2
    f26c:	293ffa36 	bltu	r5,r4,f258 <udivmodsi4+0x18>
    f270:	10000d26 	beq	r2,zero,f2a8 <udivmodsi4+0x68>
    f274:	0007883a 	mov	r3,zero
    f278:	21400236 	bltu	r4,r5,f284 <udivmodsi4+0x44>
    f27c:	2149c83a 	sub	r4,r4,r5
    f280:	1886b03a 	or	r3,r3,r2
    f284:	1004d07a 	srli	r2,r2,1
    f288:	280ad07a 	srli	r5,r5,1
    f28c:	103ffa1e 	bne	r2,zero,f278 <udivmodsi4+0x38>
    f290:	30000226 	beq	r6,zero,f29c <udivmodsi4+0x5c>
    f294:	2005883a 	mov	r2,r4
    f298:	f800283a 	ret
    f29c:	1809883a 	mov	r4,r3
    f2a0:	2005883a 	mov	r2,r4
    f2a4:	f800283a 	ret
    f2a8:	0007883a 	mov	r3,zero
    f2ac:	003ff806 	br	f290 <udivmodsi4+0x50>
    f2b0:	00800044 	movi	r2,1
    f2b4:	0007883a 	mov	r3,zero
    f2b8:	003fef06 	br	f278 <udivmodsi4+0x38>

0000f2bc <__divsi3>:
    f2bc:	defffe04 	addi	sp,sp,-8
    f2c0:	dc000015 	stw	r16,0(sp)
    f2c4:	dfc00115 	stw	ra,4(sp)
    f2c8:	0021883a 	mov	r16,zero
    f2cc:	20000c16 	blt	r4,zero,f300 <__divsi3+0x44>
    f2d0:	000d883a 	mov	r6,zero
    f2d4:	28000e16 	blt	r5,zero,f310 <__divsi3+0x54>
    f2d8:	000f2400 	call	f240 <udivmodsi4>
    f2dc:	1007883a 	mov	r3,r2
    f2e0:	8005003a 	cmpeq	r2,r16,zero
    f2e4:	1000011e 	bne	r2,zero,f2ec <__divsi3+0x30>
    f2e8:	00c7c83a 	sub	r3,zero,r3
    f2ec:	1805883a 	mov	r2,r3
    f2f0:	dfc00117 	ldw	ra,4(sp)
    f2f4:	dc000017 	ldw	r16,0(sp)
    f2f8:	dec00204 	addi	sp,sp,8
    f2fc:	f800283a 	ret
    f300:	0109c83a 	sub	r4,zero,r4
    f304:	04000044 	movi	r16,1
    f308:	000d883a 	mov	r6,zero
    f30c:	283ff20e 	bge	r5,zero,f2d8 <__divsi3+0x1c>
    f310:	014bc83a 	sub	r5,zero,r5
    f314:	8021003a 	cmpeq	r16,r16,zero
    f318:	003fef06 	br	f2d8 <__divsi3+0x1c>

0000f31c <__modsi3>:
    f31c:	deffff04 	addi	sp,sp,-4
    f320:	dfc00015 	stw	ra,0(sp)
    f324:	01800044 	movi	r6,1
    f328:	2807883a 	mov	r3,r5
    f32c:	20000416 	blt	r4,zero,f340 <__modsi3+0x24>
    f330:	28000c16 	blt	r5,zero,f364 <__modsi3+0x48>
    f334:	dfc00017 	ldw	ra,0(sp)
    f338:	dec00104 	addi	sp,sp,4
    f33c:	000f2401 	jmpi	f240 <udivmodsi4>
    f340:	0109c83a 	sub	r4,zero,r4
    f344:	28000b16 	blt	r5,zero,f374 <__modsi3+0x58>
    f348:	180b883a 	mov	r5,r3
    f34c:	01800044 	movi	r6,1
    f350:	000f2400 	call	f240 <udivmodsi4>
    f354:	0085c83a 	sub	r2,zero,r2
    f358:	dfc00017 	ldw	ra,0(sp)
    f35c:	dec00104 	addi	sp,sp,4
    f360:	f800283a 	ret
    f364:	014bc83a 	sub	r5,zero,r5
    f368:	dfc00017 	ldw	ra,0(sp)
    f36c:	dec00104 	addi	sp,sp,4
    f370:	000f2401 	jmpi	f240 <udivmodsi4>
    f374:	0147c83a 	sub	r3,zero,r5
    f378:	003ff306 	br	f348 <__modsi3+0x2c>

0000f37c <__udivsi3>:
    f37c:	000d883a 	mov	r6,zero
    f380:	000f2401 	jmpi	f240 <udivmodsi4>

0000f384 <__umodsi3>:
    f384:	01800044 	movi	r6,1
    f388:	000f2401 	jmpi	f240 <udivmodsi4>

0000f38c <__make_fp>:
    f38c:	defffb04 	addi	sp,sp,-20
    f390:	d9000015 	stw	r4,0(sp)
    f394:	d809883a 	mov	r4,sp
    f398:	dfc00415 	stw	ra,16(sp)
    f39c:	d9400115 	stw	r5,4(sp)
    f3a0:	d9800215 	stw	r6,8(sp)
    f3a4:	d9c00315 	stw	r7,12(sp)
    f3a8:	0000bf00 	call	bf0 <__pack_f>
    f3ac:	dfc00417 	ldw	ra,16(sp)
    f3b0:	dec00504 	addi	sp,sp,20
    f3b4:	f800283a 	ret

0000f3b8 <__unpack_d>:
    f3b8:	20c00117 	ldw	r3,4(r4)
    f3bc:	22400017 	ldw	r9,0(r4)
    f3c0:	00800434 	movhi	r2,16
    f3c4:	10bfffc4 	addi	r2,r2,-1
    f3c8:	1808d53a 	srli	r4,r3,20
    f3cc:	180cd7fa 	srli	r6,r3,31
    f3d0:	1894703a 	and	r10,r3,r2
    f3d4:	2201ffcc 	andi	r8,r4,2047
    f3d8:	281b883a 	mov	r13,r5
    f3dc:	4817883a 	mov	r11,r9
    f3e0:	29800115 	stw	r6,4(r5)
    f3e4:	5019883a 	mov	r12,r10
    f3e8:	40001e1e 	bne	r8,zero,f464 <__unpack_d+0xac>
    f3ec:	4a84b03a 	or	r2,r9,r10
    f3f0:	10001926 	beq	r2,zero,f458 <__unpack_d+0xa0>
    f3f4:	4804d63a 	srli	r2,r9,24
    f3f8:	500c923a 	slli	r6,r10,8
    f3fc:	013f0084 	movi	r4,-1022
    f400:	00c40034 	movhi	r3,4096
    f404:	18ffffc4 	addi	r3,r3,-1
    f408:	118cb03a 	or	r6,r2,r6
    f40c:	008000c4 	movi	r2,3
    f410:	480a923a 	slli	r5,r9,8
    f414:	68800015 	stw	r2,0(r13)
    f418:	69000215 	stw	r4,8(r13)
    f41c:	19800b36 	bltu	r3,r6,f44c <__unpack_d+0x94>
    f420:	200f883a 	mov	r7,r4
    f424:	1811883a 	mov	r8,r3
    f428:	2945883a 	add	r2,r5,r5
    f42c:	1149803a 	cmpltu	r4,r2,r5
    f430:	3187883a 	add	r3,r6,r6
    f434:	20c9883a 	add	r4,r4,r3
    f438:	100b883a 	mov	r5,r2
    f43c:	200d883a 	mov	r6,r4
    f440:	39ffffc4 	addi	r7,r7,-1
    f444:	413ff82e 	bgeu	r8,r4,f428 <__unpack_d+0x70>
    f448:	69c00215 	stw	r7,8(r13)
    f44c:	69800415 	stw	r6,16(r13)
    f450:	69400315 	stw	r5,12(r13)
    f454:	f800283a 	ret
    f458:	00800084 	movi	r2,2
    f45c:	28800015 	stw	r2,0(r5)
    f460:	f800283a 	ret
    f464:	0081ffc4 	movi	r2,2047
    f468:	40800f26 	beq	r8,r2,f4a8 <__unpack_d+0xf0>
    f46c:	480cd63a 	srli	r6,r9,24
    f470:	5006923a 	slli	r3,r10,8
    f474:	4804923a 	slli	r2,r9,8
    f478:	0009883a 	mov	r4,zero
    f47c:	30c6b03a 	or	r3,r6,r3
    f480:	01440034 	movhi	r5,4096
    f484:	110cb03a 	or	r6,r2,r4
    f488:	423f0044 	addi	r8,r8,-1023
    f48c:	194eb03a 	or	r7,r3,r5
    f490:	008000c4 	movi	r2,3
    f494:	69c00415 	stw	r7,16(r13)
    f498:	6a000215 	stw	r8,8(r13)
    f49c:	68800015 	stw	r2,0(r13)
    f4a0:	69800315 	stw	r6,12(r13)
    f4a4:	f800283a 	ret
    f4a8:	4a84b03a 	or	r2,r9,r10
    f4ac:	1000031e 	bne	r2,zero,f4bc <__unpack_d+0x104>
    f4b0:	00800104 	movi	r2,4
    f4b4:	28800015 	stw	r2,0(r5)
    f4b8:	f800283a 	ret
    f4bc:	0009883a 	mov	r4,zero
    f4c0:	01400234 	movhi	r5,8
    f4c4:	4904703a 	and	r2,r9,r4
    f4c8:	5146703a 	and	r3,r10,r5
    f4cc:	10c4b03a 	or	r2,r2,r3
    f4d0:	10000526 	beq	r2,zero,f4e8 <__unpack_d+0x130>
    f4d4:	00800044 	movi	r2,1
    f4d8:	68800015 	stw	r2,0(r13)
    f4dc:	6b000415 	stw	r12,16(r13)
    f4e0:	6ac00315 	stw	r11,12(r13)
    f4e4:	f800283a 	ret
    f4e8:	68000015 	stw	zero,0(r13)
    f4ec:	003ffb06 	br	f4dc <__unpack_d+0x124>

0000f4f0 <__fpcmp_parts_d>:
    f4f0:	21800017 	ldw	r6,0(r4)
    f4f4:	00c00044 	movi	r3,1
    f4f8:	19800a2e 	bgeu	r3,r6,f524 <__fpcmp_parts_d+0x34>
    f4fc:	28800017 	ldw	r2,0(r5)
    f500:	1880082e 	bgeu	r3,r2,f524 <__fpcmp_parts_d+0x34>
    f504:	00c00104 	movi	r3,4
    f508:	30c02626 	beq	r6,r3,f5a4 <__fpcmp_parts_d+0xb4>
    f50c:	10c02226 	beq	r2,r3,f598 <__fpcmp_parts_d+0xa8>
    f510:	00c00084 	movi	r3,2
    f514:	30c00526 	beq	r6,r3,f52c <__fpcmp_parts_d+0x3c>
    f518:	10c0071e 	bne	r2,r3,f538 <__fpcmp_parts_d+0x48>
    f51c:	20800117 	ldw	r2,4(r4)
    f520:	1000091e 	bne	r2,zero,f548 <__fpcmp_parts_d+0x58>
    f524:	00800044 	movi	r2,1
    f528:	f800283a 	ret
    f52c:	10c01a1e 	bne	r2,r3,f598 <__fpcmp_parts_d+0xa8>
    f530:	0005883a 	mov	r2,zero
    f534:	f800283a 	ret
    f538:	22000117 	ldw	r8,4(r4)
    f53c:	28800117 	ldw	r2,4(r5)
    f540:	40800326 	beq	r8,r2,f550 <__fpcmp_parts_d+0x60>
    f544:	403ff726 	beq	r8,zero,f524 <__fpcmp_parts_d+0x34>
    f548:	00bfffc4 	movi	r2,-1
    f54c:	f800283a 	ret
    f550:	20c00217 	ldw	r3,8(r4)
    f554:	28800217 	ldw	r2,8(r5)
    f558:	10fffa16 	blt	r2,r3,f544 <__fpcmp_parts_d+0x54>
    f55c:	18800916 	blt	r3,r2,f584 <__fpcmp_parts_d+0x94>
    f560:	21c00417 	ldw	r7,16(r4)
    f564:	28c00417 	ldw	r3,16(r5)
    f568:	21800317 	ldw	r6,12(r4)
    f56c:	28800317 	ldw	r2,12(r5)
    f570:	19fff436 	bltu	r3,r7,f544 <__fpcmp_parts_d+0x54>
    f574:	38c00526 	beq	r7,r3,f58c <__fpcmp_parts_d+0x9c>
    f578:	38c00236 	bltu	r7,r3,f584 <__fpcmp_parts_d+0x94>
    f57c:	19ffec1e 	bne	r3,r7,f530 <__fpcmp_parts_d+0x40>
    f580:	30bfeb2e 	bgeu	r6,r2,f530 <__fpcmp_parts_d+0x40>
    f584:	403fe71e 	bne	r8,zero,f524 <__fpcmp_parts_d+0x34>
    f588:	003fef06 	br	f548 <__fpcmp_parts_d+0x58>
    f58c:	11bffa2e 	bgeu	r2,r6,f578 <__fpcmp_parts_d+0x88>
    f590:	403fe426 	beq	r8,zero,f524 <__fpcmp_parts_d+0x34>
    f594:	003fec06 	br	f548 <__fpcmp_parts_d+0x58>
    f598:	28800117 	ldw	r2,4(r5)
    f59c:	103fe11e 	bne	r2,zero,f524 <__fpcmp_parts_d+0x34>
    f5a0:	003fe906 	br	f548 <__fpcmp_parts_d+0x58>
    f5a4:	11bfdd1e 	bne	r2,r6,f51c <__fpcmp_parts_d+0x2c>
    f5a8:	28c00117 	ldw	r3,4(r5)
    f5ac:	20800117 	ldw	r2,4(r4)
    f5b0:	1885c83a 	sub	r2,r3,r2
    f5b4:	f800283a 	ret

0000f5b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f5b8:	defffd04 	addi	sp,sp,-12
    f5bc:	dfc00215 	stw	ra,8(sp)
    f5c0:	dc400115 	stw	r17,4(sp)
    f5c4:	dc000015 	stw	r16,0(sp)
    f5c8:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f5cc:	20001c16 	blt	r4,zero,f640 <close+0x88>
    f5d0:	20c00324 	muli	r3,r4,12
    f5d4:	00800074 	movhi	r2,1
    f5d8:	108c9104 	addi	r2,r2,12868
    f5dc:	1889883a 	add	r4,r3,r2

  if (fd)
    f5e0:	20001726 	beq	r4,zero,f640 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f5e4:	20800017 	ldw	r2,0(r4)
    f5e8:	10800417 	ldw	r2,16(r2)
    f5ec:	10002126 	beq	r2,zero,f674 <close+0xbc>
    f5f0:	103ee83a 	callr	r2
    f5f4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f5f8:	8009883a 	mov	r4,r16
    f5fc:	000fc500 	call	fc50 <alt_release_fd>
    if (rval < 0)
    f600:	88000216 	blt	r17,zero,f60c <close+0x54>
    f604:	0005883a 	mov	r2,zero
    f608:	00001d06 	br	f680 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    f60c:	00800074 	movhi	r2,1
    f610:	10917f04 	addi	r2,r2,17916
    f614:	10800017 	ldw	r2,0(r2)
    f618:	1000031e 	bne	r2,zero,f628 <close+0x70>
    f61c:	00c00074 	movhi	r3,1
    f620:	18d89604 	addi	r3,r3,25176
    f624:	00000206 	br	f630 <close+0x78>
    f628:	103ee83a 	callr	r2
    f62c:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    f630:	0445c83a 	sub	r2,zero,r17
    f634:	18800015 	stw	r2,0(r3)
    f638:	00bfffc4 	movi	r2,-1
    f63c:	00001006 	br	f680 <close+0xc8>
    f640:	00800074 	movhi	r2,1
    f644:	10917f04 	addi	r2,r2,17916
    f648:	10800017 	ldw	r2,0(r2)
    f64c:	1000031e 	bne	r2,zero,f65c <close+0xa4>
    f650:	00c00074 	movhi	r3,1
    f654:	18d89604 	addi	r3,r3,25176
    f658:	00000206 	br	f664 <close+0xac>
    f65c:	103ee83a 	callr	r2
    f660:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f664:	00801444 	movi	r2,81
    f668:	18800015 	stw	r2,0(r3)
    f66c:	00bfffc4 	movi	r2,-1
    f670:	00000306 	br	f680 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f674:	8009883a 	mov	r4,r16
    f678:	000fc500 	call	fc50 <alt_release_fd>
    f67c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    f680:	dfc00217 	ldw	ra,8(sp)
    f684:	dc400117 	ldw	r17,4(sp)
    f688:	dc000017 	ldw	r16,0(sp)
    f68c:	dec00304 	addi	sp,sp,12
    f690:	f800283a 	ret

0000f694 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    f694:	3005883a 	mov	r2,r6
    f698:	f800283a 	ret

0000f69c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f69c:	deffff04 	addi	sp,sp,-4
    f6a0:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f6a4:	20000e16 	blt	r4,zero,f6e0 <fstat+0x44>
    f6a8:	20c00324 	muli	r3,r4,12
    f6ac:	00800074 	movhi	r2,1
    f6b0:	108c9104 	addi	r2,r2,12868
    f6b4:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f6b8:	20000926 	beq	r4,zero,f6e0 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f6bc:	20800017 	ldw	r2,0(r4)
    f6c0:	10800817 	ldw	r2,32(r2)
    f6c4:	10000226 	beq	r2,zero,f6d0 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    f6c8:	103ee83a 	callr	r2
    f6cc:	00001006 	br	f710 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f6d0:	00880004 	movi	r2,8192
    f6d4:	28800115 	stw	r2,4(r5)
    f6d8:	0005883a 	mov	r2,zero
    f6dc:	00000c06 	br	f710 <fstat+0x74>
    f6e0:	00800074 	movhi	r2,1
    f6e4:	10917f04 	addi	r2,r2,17916
    f6e8:	10800017 	ldw	r2,0(r2)
    f6ec:	1000031e 	bne	r2,zero,f6fc <fstat+0x60>
    f6f0:	00c00074 	movhi	r3,1
    f6f4:	18d89604 	addi	r3,r3,25176
    f6f8:	00000206 	br	f704 <fstat+0x68>
    f6fc:	103ee83a 	callr	r2
    f700:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f704:	00801444 	movi	r2,81
    f708:	18800015 	stw	r2,0(r3)
    f70c:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    f710:	dfc00017 	ldw	ra,0(sp)
    f714:	dec00104 	addi	sp,sp,4
    f718:	f800283a 	ret

0000f71c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f71c:	defff004 	addi	sp,sp,-64
    f720:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f724:	20000f16 	blt	r4,zero,f764 <isatty+0x48>
    f728:	20c00324 	muli	r3,r4,12
    f72c:	00800074 	movhi	r2,1
    f730:	108c9104 	addi	r2,r2,12868
    f734:	1885883a 	add	r2,r3,r2
  
  if (fd)
    f738:	10000a26 	beq	r2,zero,f764 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f73c:	10800017 	ldw	r2,0(r2)
    f740:	10800817 	ldw	r2,32(r2)
    f744:	1000021e 	bne	r2,zero,f750 <isatty+0x34>
    f748:	00800044 	movi	r2,1
    f74c:	00001106 	br	f794 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f750:	d80b883a 	mov	r5,sp
    f754:	000f69c0 	call	f69c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f758:	d8800117 	ldw	r2,4(sp)
    f75c:	10880020 	cmpeqi	r2,r2,8192
    f760:	00000c06 	br	f794 <isatty+0x78>
    f764:	00800074 	movhi	r2,1
    f768:	10917f04 	addi	r2,r2,17916
    f76c:	10800017 	ldw	r2,0(r2)
    f770:	1000031e 	bne	r2,zero,f780 <isatty+0x64>
    f774:	00c00074 	movhi	r3,1
    f778:	18d89604 	addi	r3,r3,25176
    f77c:	00000206 	br	f788 <isatty+0x6c>
    f780:	103ee83a 	callr	r2
    f784:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f788:	00801444 	movi	r2,81
    f78c:	18800015 	stw	r2,0(r3)
    f790:	0005883a 	mov	r2,zero
    return 0;
  }
}
    f794:	dfc00f17 	ldw	ra,60(sp)
    f798:	dec01004 	addi	sp,sp,64
    f79c:	f800283a 	ret

0000f7a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f7a0:	deffff04 	addi	sp,sp,-4
    f7a4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f7a8:	01000074 	movhi	r4,1
    f7ac:	21118404 	addi	r4,r4,17936
    f7b0:	00c00074 	movhi	r3,1
    f7b4:	18ca7804 	addi	r3,r3,10720

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f7b8:	20c00926 	beq	r4,r3,f7e0 <alt_load+0x40>
    f7bc:	01800074 	movhi	r6,1
    f7c0:	31918404 	addi	r6,r6,17936
  {
    while( to != end )
    f7c4:	19800626 	beq	r3,r6,f7e0 <alt_load+0x40>
    f7c8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f7cc:	20800017 	ldw	r2,0(r4)
    f7d0:	18800015 	stw	r2,0(r3)
    f7d4:	1947883a 	add	r3,r3,r5
    f7d8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f7dc:	30fffb1e 	bne	r6,r3,f7cc <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f7e0:	01000034 	movhi	r4,0
    f7e4:	21000804 	addi	r4,r4,32
    f7e8:	00c00034 	movhi	r3,0
    f7ec:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f7f0:	20c00926 	beq	r4,r3,f818 <alt_load+0x78>
    f7f4:	01800034 	movhi	r6,0
    f7f8:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    f7fc:	19800626 	beq	r3,r6,f818 <alt_load+0x78>
    f800:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f804:	20800017 	ldw	r2,0(r4)
    f808:	18800015 	stw	r2,0(r3)
    f80c:	1947883a 	add	r3,r3,r5
    f810:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f814:	30fffb1e 	bne	r6,r3,f804 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f818:	01000074 	movhi	r4,1
    f81c:	21086204 	addi	r4,r4,8584
    f820:	00c00074 	movhi	r3,1
    f824:	18c86204 	addi	r3,r3,8584

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f828:	20c00926 	beq	r4,r3,f850 <alt_load+0xb0>
    f82c:	01800074 	movhi	r6,1
    f830:	318a7804 	addi	r6,r6,10720
  {
    while( to != end )
    f834:	19800626 	beq	r3,r6,f850 <alt_load+0xb0>
    f838:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f83c:	20800017 	ldw	r2,0(r4)
    f840:	18800015 	stw	r2,0(r3)
    f844:	1947883a 	add	r3,r3,r5
    f848:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f84c:	30fffb1e 	bne	r6,r3,f83c <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f850:	00114d00 	call	114d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f854:	00115cc0 	call	115cc <alt_icache_flush_all>
}
    f858:	dfc00017 	ldw	ra,0(sp)
    f85c:	dec00104 	addi	sp,sp,4
    f860:	f800283a 	ret

0000f864 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f864:	defffe04 	addi	sp,sp,-8
    f868:	dfc00115 	stw	ra,4(sp)
    f86c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f870:	2000020e 	bge	r4,zero,f87c <lseek+0x18>
    f874:	043febc4 	movi	r16,-81
    f878:	00000d06 	br	f8b0 <lseek+0x4c>
    f87c:	20c00324 	muli	r3,r4,12
    f880:	00800074 	movhi	r2,1
    f884:	108c9104 	addi	r2,r2,12868
    f888:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    f88c:	20001526 	beq	r4,zero,f8e4 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f890:	20800017 	ldw	r2,0(r4)
    f894:	10800717 	ldw	r2,28(r2)
    f898:	1000021e 	bne	r2,zero,f8a4 <lseek+0x40>
    f89c:	043fde84 	movi	r16,-134
    f8a0:	00000306 	br	f8b0 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f8a4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    f8a8:	1000100e 	bge	r2,zero,f8ec <lseek+0x88>
    f8ac:	1021883a 	mov	r16,r2
    f8b0:	00800074 	movhi	r2,1
    f8b4:	10917f04 	addi	r2,r2,17916
    f8b8:	10800017 	ldw	r2,0(r2)
    f8bc:	1000031e 	bne	r2,zero,f8cc <lseek+0x68>
    f8c0:	00c00074 	movhi	r3,1
    f8c4:	18d89604 	addi	r3,r3,25176
    f8c8:	00000206 	br	f8d4 <lseek+0x70>
    f8cc:	103ee83a 	callr	r2
    f8d0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    f8d4:	0405c83a 	sub	r2,zero,r16
    f8d8:	18800015 	stw	r2,0(r3)
    f8dc:	00bfffc4 	movi	r2,-1
    f8e0:	00000206 	br	f8ec <lseek+0x88>
    f8e4:	043febc4 	movi	r16,-81
    f8e8:	003ff106 	br	f8b0 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    f8ec:	dfc00117 	ldw	ra,4(sp)
    f8f0:	dc000017 	ldw	r16,0(sp)
    f8f4:	dec00204 	addi	sp,sp,8
    f8f8:	f800283a 	ret

0000f8fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f8fc:	defffe04 	addi	sp,sp,-8
    f900:	dfc00115 	stw	ra,4(sp)
    f904:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f908:	0009883a 	mov	r4,zero
    f90c:	000fdb80 	call	fdb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f910:	000fdd80 	call	fdd8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f914:	01800074 	movhi	r6,1
    f918:	318a4b04 	addi	r6,r6,10540
    f91c:	3009883a 	mov	r4,r6
    f920:	300b883a 	mov	r5,r6
    f924:	00116500 	call	11650 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f928:	d1272417 	ldw	r4,-25456(gp)
    f92c:	d1672517 	ldw	r5,-25452(gp)
    f930:	d1a72617 	ldw	r6,-25448(gp)
    f934:	00001b40 	call	1b4 <main>
    f938:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    f93c:	01000044 	movi	r4,1
    f940:	000f5b80 	call	f5b8 <close>
  exit (result);
    f944:	8009883a 	mov	r4,r16
    f948:	0011b6c0 	call	11b6c <exit>

0000f94c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    f94c:	f800283a 	ret

0000f950 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    f950:	f800283a 	ret

0000f954 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    f954:	defff804 	addi	sp,sp,-32
    f958:	dfc00415 	stw	ra,16(sp)
    f95c:	dc800315 	stw	r18,12(sp)
    f960:	dc400215 	stw	r17,8(sp)
    f964:	dc000115 	stw	r16,4(sp)
    f968:	d9400515 	stw	r5,20(sp)
    f96c:	d9800615 	stw	r6,24(sp)
    f970:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    f974:	d8800504 	addi	r2,sp,20
    f978:	d8800015 	stw	r2,0(sp)
    f97c:	2023883a 	mov	r17,r4
    f980:	00005d06 	br	faf8 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f984:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    f988:	21003fcc 	andi	r4,r4,255
    f98c:	2100201c 	xori	r4,r4,128
    f990:	213fe004 	addi	r4,r4,-128
    f994:	00800944 	movi	r2,37
    f998:	20800226 	beq	r4,r2,f9a4 <alt_printf+0x50>
        {
            alt_putchar(c);
    f99c:	000fb300 	call	fb30 <alt_putchar>
    f9a0:	00005506 	br	faf8 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    f9a4:	89400003 	ldbu	r5,0(r17)
    f9a8:	8c400044 	addi	r17,r17,1
    f9ac:	29003fcc 	andi	r4,r5,255
    f9b0:	2100201c 	xori	r4,r4,128
    f9b4:	213fe004 	addi	r4,r4,-128
    f9b8:	20005726 	beq	r4,zero,fb18 <alt_printf+0x1c4>
            {
                if (c == '%')
    f9bc:	00800944 	movi	r2,37
    f9c0:	2080021e 	bne	r4,r2,f9cc <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    f9c4:	000fb300 	call	fb30 <alt_putchar>
    f9c8:	00004b06 	br	faf8 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    f9cc:	28c03fcc 	andi	r3,r5,255
    f9d0:	18c0201c 	xori	r3,r3,128
    f9d4:	18ffe004 	addi	r3,r3,-128
    f9d8:	008018c4 	movi	r2,99
    f9dc:	1880061e 	bne	r3,r2,f9f8 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    f9e0:	d8c00017 	ldw	r3,0(sp)
    f9e4:	18800104 	addi	r2,r3,4
    f9e8:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    f9ec:	19000017 	ldw	r4,0(r3)
    f9f0:	000fb300 	call	fb30 <alt_putchar>
    f9f4:	00004006 	br	faf8 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    f9f8:	28c03fcc 	andi	r3,r5,255
    f9fc:	18c0201c 	xori	r3,r3,128
    fa00:	18ffe004 	addi	r3,r3,-128
    fa04:	00801e04 	movi	r2,120
    fa08:	1880231e 	bne	r3,r2,fa98 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    fa0c:	d8c00017 	ldw	r3,0(sp)
    fa10:	18800104 	addi	r2,r3,4
    fa14:	d8800015 	stw	r2,0(sp)
    fa18:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    fa1c:	90000326 	beq	r18,zero,fa2c <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    fa20:	90bc002c 	andhi	r2,r18,61440
    fa24:	10000426 	beq	r2,zero,fa38 <alt_printf+0xe4>
    fa28:	00003906 	br	fb10 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    fa2c:	01000c04 	movi	r4,48
    fa30:	000fb300 	call	fb30 <alt_putchar>
    fa34:	00003006 	br	faf8 <alt_printf+0x1a4>
                        continue;
    fa38:	04000704 	movi	r16,28
    fa3c:	013fff04 	movi	r4,-4
    fa40:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    fa44:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    fa48:	1c04983a 	sll	r2,r3,r16
    fa4c:	9084703a 	and	r2,r18,r2
    fa50:	103ffc26 	beq	r2,zero,fa44 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    fa54:	80002816 	blt	r16,zero,faf8 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    fa58:	008003c4 	movi	r2,15
    fa5c:	1404983a 	sll	r2,r2,r16
    fa60:	9084703a 	and	r2,r18,r2
    fa64:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    fa68:	00800244 	movi	r2,9
    fa6c:	10c00236 	bltu	r2,r3,fa78 <alt_printf+0x124>
                            c = '0' + digit;
    fa70:	19000c04 	addi	r4,r3,48
    fa74:	00000106 	br	fa7c <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    fa78:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    fa7c:	21003fcc 	andi	r4,r4,255
    fa80:	2100201c 	xori	r4,r4,128
    fa84:	213fe004 	addi	r4,r4,-128
    fa88:	000fb300 	call	fb30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    fa8c:	843fff04 	addi	r16,r16,-4
    fa90:	80001916 	blt	r16,zero,faf8 <alt_printf+0x1a4>
    fa94:	003ff006 	br	fa58 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    fa98:	28c03fcc 	andi	r3,r5,255
    fa9c:	18c0201c 	xori	r3,r3,128
    faa0:	18ffe004 	addi	r3,r3,-128
    faa4:	00801cc4 	movi	r2,115
    faa8:	1880131e 	bne	r3,r2,faf8 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    faac:	d8800017 	ldw	r2,0(sp)
    fab0:	10c00104 	addi	r3,r2,4
    fab4:	d8c00015 	stw	r3,0(sp)
    fab8:	14000017 	ldw	r16,0(r2)

                    while(*s)
    fabc:	81000003 	ldbu	r4,0(r16)
    fac0:	20803fcc 	andi	r2,r4,255
    fac4:	1080201c 	xori	r2,r2,128
    fac8:	10bfe004 	addi	r2,r2,-128
    facc:	10000a26 	beq	r2,zero,faf8 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    fad0:	84000044 	addi	r16,r16,1
    fad4:	21003fcc 	andi	r4,r4,255
    fad8:	2100201c 	xori	r4,r4,128
    fadc:	213fe004 	addi	r4,r4,-128
    fae0:	000fb300 	call	fb30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    fae4:	81000003 	ldbu	r4,0(r16)
    fae8:	20803fcc 	andi	r2,r4,255
    faec:	1080201c 	xori	r2,r2,128
    faf0:	10bfe004 	addi	r2,r2,-128
    faf4:	103ff61e 	bne	r2,zero,fad0 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    faf8:	89000003 	ldbu	r4,0(r17)
    fafc:	20803fcc 	andi	r2,r4,255
    fb00:	1080201c 	xori	r2,r2,128
    fb04:	10bfe004 	addi	r2,r2,-128
    fb08:	103f9e1e 	bne	r2,zero,f984 <alt_printf+0x30>
    fb0c:	00000206 	br	fb18 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    fb10:	04000704 	movi	r16,28
    fb14:	003fd006 	br	fa58 <alt_printf+0x104>
    fb18:	dfc00417 	ldw	ra,16(sp)
    fb1c:	dc800317 	ldw	r18,12(sp)
    fb20:	dc400217 	ldw	r17,8(sp)
    fb24:	dc000117 	ldw	r16,4(sp)
    fb28:	dec00804 	addi	sp,sp,32
    fb2c:	f800283a 	ret

0000fb30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    fb30:	deffff04 	addi	sp,sp,-4
    fb34:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    fb38:	00800074 	movhi	r2,1
    fb3c:	10917404 	addi	r2,r2,17872
    fb40:	10800017 	ldw	r2,0(r2)
    fb44:	11400217 	ldw	r5,8(r2)
    fb48:	0011c180 	call	11c18 <putc>
#endif
}
    fb4c:	dfc00017 	ldw	ra,0(sp)
    fb50:	dec00104 	addi	sp,sp,4
    fb54:	f800283a 	ret

0000fb58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fb58:	defffe04 	addi	sp,sp,-8
    fb5c:	dfc00115 	stw	ra,4(sp)
    fb60:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb64:	20002916 	blt	r4,zero,fc0c <read+0xb4>
    fb68:	20c00324 	muli	r3,r4,12
    fb6c:	00800074 	movhi	r2,1
    fb70:	108c9104 	addi	r2,r2,12868
    fb74:	1889883a 	add	r4,r3,r2
  
  if (fd)
    fb78:	20002426 	beq	r4,zero,fc0c <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fb7c:	20800217 	ldw	r2,8(r4)
    fb80:	108000cc 	andi	r2,r2,3
    fb84:	00c00044 	movi	r3,1
    fb88:	10c01326 	beq	r2,r3,fbd8 <read+0x80>
    fb8c:	20800017 	ldw	r2,0(r4)
    fb90:	10800517 	ldw	r2,20(r2)
    fb94:	10001026 	beq	r2,zero,fbd8 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fb98:	103ee83a 	callr	r2
    fb9c:	1021883a 	mov	r16,r2
    fba0:	1000260e 	bge	r2,zero,fc3c <read+0xe4>
    fba4:	00800074 	movhi	r2,1
    fba8:	10917f04 	addi	r2,r2,17916
    fbac:	10800017 	ldw	r2,0(r2)
    fbb0:	1000031e 	bne	r2,zero,fbc0 <read+0x68>
    fbb4:	00c00074 	movhi	r3,1
    fbb8:	18d89604 	addi	r3,r3,25176
    fbbc:	00000206 	br	fbc8 <read+0x70>
    fbc0:	103ee83a 	callr	r2
    fbc4:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    fbc8:	0405c83a 	sub	r2,zero,r16
    fbcc:	18800015 	stw	r2,0(r3)
    fbd0:	043fffc4 	movi	r16,-1
    fbd4:	00001906 	br	fc3c <read+0xe4>
    fbd8:	00800074 	movhi	r2,1
    fbdc:	10917f04 	addi	r2,r2,17916
    fbe0:	10800017 	ldw	r2,0(r2)
    fbe4:	1000031e 	bne	r2,zero,fbf4 <read+0x9c>
    fbe8:	00c00074 	movhi	r3,1
    fbec:	18d89604 	addi	r3,r3,25176
    fbf0:	00000206 	br	fbfc <read+0xa4>
    fbf4:	103ee83a 	callr	r2
    fbf8:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    fbfc:	00800344 	movi	r2,13
    fc00:	18800015 	stw	r2,0(r3)
    fc04:	043fffc4 	movi	r16,-1
    fc08:	00000c06 	br	fc3c <read+0xe4>
    fc0c:	00800074 	movhi	r2,1
    fc10:	10917f04 	addi	r2,r2,17916
    fc14:	10800017 	ldw	r2,0(r2)
    fc18:	1000031e 	bne	r2,zero,fc28 <read+0xd0>
    fc1c:	00c00074 	movhi	r3,1
    fc20:	18d89604 	addi	r3,r3,25176
    fc24:	00000206 	br	fc30 <read+0xd8>
    fc28:	103ee83a 	callr	r2
    fc2c:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fc30:	00801444 	movi	r2,81
    fc34:	18800015 	stw	r2,0(r3)
    fc38:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    fc3c:	8005883a 	mov	r2,r16
    fc40:	dfc00117 	ldw	ra,4(sp)
    fc44:	dc000017 	ldw	r16,0(sp)
    fc48:	dec00204 	addi	sp,sp,8
    fc4c:	f800283a 	ret

0000fc50 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    fc50:	00800084 	movi	r2,2
    fc54:	1100060e 	bge	r2,r4,fc70 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    fc58:	20800324 	muli	r2,r4,12
    fc5c:	00c00074 	movhi	r3,1
    fc60:	18cc9104 	addi	r3,r3,12868
    fc64:	10c5883a 	add	r2,r2,r3
    fc68:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    fc6c:	10000015 	stw	zero,0(r2)
    fc70:	f800283a 	ret

0000fc74 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc74:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc78:	00bfff84 	movi	r2,-2
    fc7c:	2884703a 	and	r2,r5,r2
    fc80:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fc84:	d0a00d17 	ldw	r2,-32716(gp)
    fc88:	108000c4 	addi	r2,r2,3
    fc8c:	00ffff04 	movi	r3,-4
    fc90:	10c6703a 	and	r3,r2,r3
    fc94:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fc98:	1909883a 	add	r4,r3,r4
    fc9c:	00802034 	movhi	r2,128
    fca0:	10800004 	addi	r2,r2,0
    fca4:	1100032e 	bgeu	r2,r4,fcb4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fca8:	2801703a 	wrctl	status,r5
    fcac:	00ffffc4 	movi	r3,-1
    fcb0:	00000206 	br	fcbc <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    fcb4:	d1200d15 	stw	r4,-32716(gp)
    fcb8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    fcbc:	1805883a 	mov	r2,r3
    fcc0:	f800283a 	ret

0000fcc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fcc4:	defffe04 	addi	sp,sp,-8
    fcc8:	dfc00115 	stw	ra,4(sp)
    fccc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fcd0:	20002816 	blt	r4,zero,fd74 <write+0xb0>
    fcd4:	20c00324 	muli	r3,r4,12
    fcd8:	00800074 	movhi	r2,1
    fcdc:	108c9104 	addi	r2,r2,12868
    fce0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    fce4:	20002326 	beq	r4,zero,fd74 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fce8:	20800217 	ldw	r2,8(r4)
    fcec:	108000cc 	andi	r2,r2,3
    fcf0:	10001326 	beq	r2,zero,fd40 <write+0x7c>
    fcf4:	20800017 	ldw	r2,0(r4)
    fcf8:	10800617 	ldw	r2,24(r2)
    fcfc:	10001026 	beq	r2,zero,fd40 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fd00:	103ee83a 	callr	r2
    fd04:	1021883a 	mov	r16,r2
    fd08:	1000260e 	bge	r2,zero,fda4 <write+0xe0>
    fd0c:	00800074 	movhi	r2,1
    fd10:	10917f04 	addi	r2,r2,17916
    fd14:	10800017 	ldw	r2,0(r2)
    fd18:	1000031e 	bne	r2,zero,fd28 <write+0x64>
    fd1c:	00c00074 	movhi	r3,1
    fd20:	18d89604 	addi	r3,r3,25176
    fd24:	00000206 	br	fd30 <write+0x6c>
    fd28:	103ee83a 	callr	r2
    fd2c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    fd30:	0405c83a 	sub	r2,zero,r16
    fd34:	18800015 	stw	r2,0(r3)
    fd38:	043fffc4 	movi	r16,-1
    fd3c:	00001906 	br	fda4 <write+0xe0>
    fd40:	00800074 	movhi	r2,1
    fd44:	10917f04 	addi	r2,r2,17916
    fd48:	10800017 	ldw	r2,0(r2)
    fd4c:	1000031e 	bne	r2,zero,fd5c <write+0x98>
    fd50:	00c00074 	movhi	r3,1
    fd54:	18d89604 	addi	r3,r3,25176
    fd58:	00000206 	br	fd64 <write+0xa0>
    fd5c:	103ee83a 	callr	r2
    fd60:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd64:	00800344 	movi	r2,13
    fd68:	18800015 	stw	r2,0(r3)
    fd6c:	043fffc4 	movi	r16,-1
    fd70:	00000c06 	br	fda4 <write+0xe0>
    fd74:	00800074 	movhi	r2,1
    fd78:	10917f04 	addi	r2,r2,17916
    fd7c:	10800017 	ldw	r2,0(r2)
    fd80:	1000031e 	bne	r2,zero,fd90 <write+0xcc>
    fd84:	00c00074 	movhi	r3,1
    fd88:	18d89604 	addi	r3,r3,25176
    fd8c:	00000206 	br	fd98 <write+0xd4>
    fd90:	103ee83a 	callr	r2
    fd94:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd98:	00801444 	movi	r2,81
    fd9c:	18800015 	stw	r2,0(r3)
    fda0:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    fda4:	8005883a 	mov	r2,r16
    fda8:	dfc00117 	ldw	ra,4(sp)
    fdac:	dc000017 	ldw	r16,0(sp)
    fdb0:	dec00204 	addi	sp,sp,8
    fdb4:	f800283a 	ret

0000fdb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fdb8:	deffff04 	addi	sp,sp,-4
    fdbc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    fdc0:	0011a000 	call	11a00 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fdc4:	00800044 	movi	r2,1
    fdc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fdcc:	dfc00017 	ldw	ra,0(sp)
    fdd0:	dec00104 	addi	sp,sp,4
    fdd4:	f800283a 	ret

0000fdd8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fdd8:	defffd04 	addi	sp,sp,-12
    fddc:	dfc00215 	stw	ra,8(sp)
    fde0:	dc400115 	stw	r17,4(sp)
    fde4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    fde8:	01040034 	movhi	r4,4096
    fdec:	21080004 	addi	r4,r4,8192
    fdf0:	000b883a 	mov	r5,zero
    fdf4:	01800044 	movi	r6,1
    fdf8:	01c00204 	movi	r7,8
    fdfc:	00106200 	call	10620 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, JTAG_UART_0);
    fe00:	04400074 	movhi	r17,1
    fe04:	8c4cfb04 	addi	r17,r17,13292
    fe08:	8809883a 	mov	r4,r17
    fe0c:	000b883a 	mov	r5,zero
    fe10:	000d883a 	mov	r6,zero
    fe14:	001011c0 	call	1011c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fe18:	04000074 	movhi	r16,1
    fe1c:	84117c04 	addi	r16,r16,17904
    fe20:	893ff604 	addi	r4,r17,-40
    fe24:	800b883a 	mov	r5,r16
    fe28:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe2c:	01000074 	movhi	r4,1
    fe30:	21110904 	addi	r4,r4,17444
    fe34:	800b883a 	mov	r5,r16
    fe38:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe3c:	01000074 	movhi	r4,1
    fe40:	21111504 	addi	r4,r4,17492
    fe44:	800b883a 	mov	r5,r16
    fe48:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe4c:	01000074 	movhi	r4,1
    fe50:	21112004 	addi	r4,r4,17536
    fe54:	800b883a 	mov	r5,r16
    fe58:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe5c:	01000074 	movhi	r4,1
    fe60:	21112b04 	addi	r4,r4,17580
    fe64:	800b883a 	mov	r5,r16
    fe68:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe6c:	01000074 	movhi	r4,1
    fe70:	21113604 	addi	r4,r4,17624
    fe74:	800b883a 	mov	r5,r16
    fe78:	00114ec0 	call	114ec <alt_dev_llist_insert>
    fe7c:	01000074 	movhi	r4,1
    fe80:	21114104 	addi	r4,r4,17668
    fe84:	800b883a 	mov	r5,r16
    fe88:	00114ec0 	call	114ec <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    fe8c:	01000074 	movhi	r4,1
    fe90:	21114c04 	addi	r4,r4,17712
    fe94:	20800a17 	ldw	r2,40(r4)
    fe98:	10800104 	addi	r2,r2,4
    fe9c:	10c0000b 	ldhu	r3,0(r2)
    fea0:	20c00c15 	stw	r3,48(r4)
    fea4:	10800017 	ldw	r2,0(r2)
    fea8:	100ad43a 	srli	r5,r2,16
    feac:	21400d15 	stw	r5,52(r4)
    feb0:	00801004 	movi	r2,64
    feb4:	10c00436 	bltu	r2,r3,fec8 <alt_sys_init+0xf0>
    feb8:	00800fc4 	movi	r2,63
    febc:	20800f15 	stw	r2,60(r4)
    fec0:	00800184 	movi	r2,6
    fec4:	20801015 	stw	r2,64(r4)
    fec8:	00800804 	movi	r2,32
    fecc:	11400436 	bltu	r2,r5,fee0 <alt_sys_init+0x108>
    fed0:	00c007c4 	movi	r3,31
    fed4:	00800074 	movhi	r2,1
    fed8:	10914c04 	addi	r2,r2,17712
    fedc:	10c01115 	stw	r3,68(r2)
    fee0:	04000074 	movhi	r16,1
    fee4:	84114c04 	addi	r16,r16,17712
    fee8:	8009883a 	mov	r4,r16
    feec:	001099c0 	call	1099c <alt_up_char_buffer_init>
    fef0:	8009883a 	mov	r4,r16
    fef4:	01400074 	movhi	r5,1
    fef8:	29517c04 	addi	r5,r5,17904
    fefc:	00114ec0 	call	114ec <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    ff00:	01800074 	movhi	r6,1
    ff04:	31915e04 	addi	r6,r6,17784
    ff08:	30c00a17 	ldw	r3,40(r6)
    ff0c:	18800017 	ldw	r2,0(r3)
    ff10:	30800b15 	stw	r2,44(r6)
    ff14:	18800117 	ldw	r2,4(r3)
    ff18:	30800c15 	stw	r2,48(r6)
    ff1c:	19000204 	addi	r4,r3,8
    ff20:	2080000b 	ldhu	r2,0(r4)
    ff24:	30800f15 	stw	r2,60(r6)
    ff28:	20800017 	ldw	r2,0(r4)
    ff2c:	1004d43a 	srli	r2,r2,16
    ff30:	30801015 	stw	r2,64(r6)
    ff34:	18c00304 	addi	r3,r3,12
    ff38:	18800017 	ldw	r2,0(r3)
    ff3c:	1005d07a 	srai	r2,r2,1
    ff40:	01000044 	movi	r4,1
    ff44:	1104703a 	and	r2,r2,r4
    ff48:	30800d15 	stw	r2,52(r6)
    ff4c:	18800017 	ldw	r2,0(r3)
    ff50:	1005d13a 	srai	r2,r2,4
    ff54:	114003cc 	andi	r5,r2,15
    ff58:	31400e15 	stw	r5,56(r6)
    ff5c:	1a000017 	ldw	r8,0(r3)
    ff60:	400ed43a 	srli	r7,r8,16
    ff64:	2900021e 	bne	r5,r4,ff70 <alt_sys_init+0x198>
    ff68:	30001115 	stw	zero,68(r6)
    ff6c:	00000b06 	br	ff9c <alt_sys_init+0x1c4>
    ff70:	00800084 	movi	r2,2
    ff74:	2880051e 	bne	r5,r2,ff8c <alt_sys_init+0x1b4>
    ff78:	00c00044 	movi	r3,1
    ff7c:	00800074 	movhi	r2,1
    ff80:	10915e04 	addi	r2,r2,17784
    ff84:	10c01115 	stw	r3,68(r2)
    ff88:	00000406 	br	ff9c <alt_sys_init+0x1c4>
    ff8c:	00c00084 	movi	r3,2
    ff90:	00800074 	movhi	r2,1
    ff94:	10915e04 	addi	r2,r2,17784
    ff98:	10c01115 	stw	r3,68(r2)
    ff9c:	01000074 	movhi	r4,1
    ffa0:	21115e04 	addi	r4,r4,17784
    ffa4:	38c03fcc 	andi	r3,r7,255
    ffa8:	01800804 	movi	r6,32
    ffac:	30c5c83a 	sub	r2,r6,r3
    ffb0:	017fffc4 	movi	r5,-1
    ffb4:	2884d83a 	srl	r2,r5,r2
    ffb8:	20801215 	stw	r2,72(r4)
    ffbc:	20801117 	ldw	r2,68(r4)
    ffc0:	1887883a 	add	r3,r3,r2
    ffc4:	20c01315 	stw	r3,76(r4)
    ffc8:	4004d63a 	srli	r2,r8,24
    ffcc:	308dc83a 	sub	r6,r6,r2
    ffd0:	298ad83a 	srl	r5,r5,r6
    ffd4:	21401415 	stw	r5,80(r4)
    ffd8:	01400074 	movhi	r5,1
    ffdc:	29517c04 	addi	r5,r5,17904
    ffe0:	00114ec0 	call	114ec <alt_dev_llist_insert>
}
    ffe4:	dfc00217 	ldw	ra,8(sp)
    ffe8:	dc400117 	ldw	r17,4(sp)
    ffec:	dc000017 	ldw	r16,0(sp)
    fff0:	dec00304 	addi	sp,sp,12
    fff4:	f800283a 	ret

0000fff8 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fff8:	deffff04 	addi	sp,sp,-4
    fffc:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10000:	21000017 	ldw	r4,0(r4)
   10004:	21000a04 	addi	r4,r4,40
   10008:	00102c80 	call	102c8 <altera_avalon_jtag_uart_ioctl>
}
   1000c:	dfc00017 	ldw	ra,0(sp)
   10010:	dec00104 	addi	sp,sp,4
   10014:	f800283a 	ret

00010018 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10018:	deffff04 	addi	sp,sp,-4
   1001c:	dfc00015 	stw	ra,0(sp)
   10020:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10024:	21000017 	ldw	r4,0(r4)
   10028:	21000a04 	addi	r4,r4,40
   1002c:	11400217 	ldw	r5,8(r2)
   10030:	00100900 	call	10090 <altera_avalon_jtag_uart_close>
}
   10034:	dfc00017 	ldw	ra,0(sp)
   10038:	dec00104 	addi	sp,sp,4
   1003c:	f800283a 	ret

00010040 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10040:	deffff04 	addi	sp,sp,-4
   10044:	dfc00015 	stw	ra,0(sp)
   10048:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1004c:	21000017 	ldw	r4,0(r4)
   10050:	21000a04 	addi	r4,r4,40
   10054:	11c00217 	ldw	r7,8(r2)
   10058:	00104a40 	call	104a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1005c:	dfc00017 	ldw	ra,0(sp)
   10060:	dec00104 	addi	sp,sp,4
   10064:	f800283a 	ret

00010068 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10068:	deffff04 	addi	sp,sp,-4
   1006c:	dfc00015 	stw	ra,0(sp)
   10070:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10074:	21000017 	ldw	r4,0(r4)
   10078:	21000a04 	addi	r4,r4,40
   1007c:	11c00217 	ldw	r7,8(r2)
   10080:	001033c0 	call	1033c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10084:	dfc00017 	ldw	ra,0(sp)
   10088:	dec00104 	addi	sp,sp,4
   1008c:	f800283a 	ret

00010090 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10090:	21800c17 	ldw	r6,48(r4)
   10094:	2950000c 	andi	r5,r5,16384
   10098:	280b003a 	cmpeq	r5,r5,zero
   1009c:	00000306 	br	100ac <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
   100a0:	2800021e 	bne	r5,zero,100ac <altera_avalon_jtag_uart_close+0x1c>
   100a4:	00bffd44 	movi	r2,-11
   100a8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   100ac:	20800d17 	ldw	r2,52(r4)
   100b0:	11800326 	beq	r2,r6,100c0 <altera_avalon_jtag_uart_close+0x30>
   100b4:	20c00917 	ldw	r3,36(r4)
   100b8:	20800117 	ldw	r2,4(r4)
   100bc:	18bff836 	bltu	r3,r2,100a0 <altera_avalon_jtag_uart_close+0x10>
   100c0:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   100c4:	f800283a 	ret

000100c8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   100c8:	20800017 	ldw	r2,0(r4)
   100cc:	10c00104 	addi	r3,r2,4
   100d0:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   100d4:	01410004 	movi	r5,1024
   100d8:	1144703a 	and	r2,r2,r5
   100dc:	10000526 	beq	r2,zero,100f4 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   100e0:	20800817 	ldw	r2,32(r4)
   100e4:	1144b03a 	or	r2,r2,r5
   100e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   100ec:	20000915 	stw	zero,36(r4)
   100f0:	00000606 	br	1010c <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   100f4:	20c00917 	ldw	r3,36(r4)
   100f8:	00a00034 	movhi	r2,32768
   100fc:	10bfff04 	addi	r2,r2,-4
   10100:	10c00236 	bltu	r2,r3,1010c <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
   10104:	18800044 	addi	r2,r3,1
   10108:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1010c:	00800074 	movhi	r2,1
   10110:	10989b04 	addi	r2,r2,25196
   10114:	10800017 	ldw	r2,0(r2)
   10118:	f800283a 	ret

0001011c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1011c:	defffe04 	addi	sp,sp,-8
   10120:	dfc00115 	stw	ra,4(sp)
   10124:	dc000015 	stw	r16,0(sp)
   10128:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1012c:	00c00044 	movi	r3,1
   10130:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10134:	20800017 	ldw	r2,0(r4)
   10138:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1013c:	3009883a 	mov	r4,r6
   10140:	800b883a 	mov	r5,r16
   10144:	01800074 	movhi	r6,1
   10148:	31806504 	addi	r6,r6,404
   1014c:	00116e80 	call	116e8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10150:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10154:	81000204 	addi	r4,r16,8
   10158:	00800074 	movhi	r2,1
   1015c:	10989b04 	addi	r2,r2,25196
   10160:	11400017 	ldw	r5,0(r2)
   10164:	01800074 	movhi	r6,1
   10168:	31803204 	addi	r6,r6,200
   1016c:	800f883a 	mov	r7,r16
   10170:	001143c0 	call	1143c <alt_alarm_start>
   10174:	1000030e 	bge	r2,zero,10184 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10178:	00a00034 	movhi	r2,32768
   1017c:	10bfffc4 	addi	r2,r2,-1
   10180:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10184:	dfc00117 	ldw	ra,4(sp)
   10188:	dc000017 	ldw	r16,0(sp)
   1018c:	dec00204 	addi	sp,sp,8
   10190:	f800283a 	ret

00010194 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   10194:	22000017 	ldw	r8,0(r4)
   10198:	03800104 	movi	r14,4
   1019c:	4399883a 	add	r12,r8,r14
   101a0:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   101a4:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   101a8:	5880c00c 	andi	r2,r11,768
   101ac:	10004526 	beq	r2,zero,102c4 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   101b0:	5880400c 	andi	r2,r11,256
   101b4:	10002126 	beq	r2,zero,1023c <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101b8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   101bc:	10800044 	addi	r2,r2,1
   101c0:	1081ffcc 	andi	r2,r2,2047
   101c4:	20c00b17 	ldw	r3,44(r4)
   101c8:	10c01626 	beq	r2,r3,10224 <altera_avalon_jtag_uart_irq+0x90>
   101cc:	02a00014 	movui	r10,32768
   101d0:	02400e04 	movi	r9,56
   101d4:	01c00044 	movi	r7,1
   101d8:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   101dc:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   101e0:	2a84703a 	and	r2,r5,r10
   101e4:	10000d26 	beq	r2,zero,1021c <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   101e8:	20800a17 	ldw	r2,40(r4)
   101ec:	1105883a 	add	r2,r2,r4
   101f0:	1245883a 	add	r2,r2,r9
   101f4:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101f8:	20800a17 	ldw	r2,40(r4)
   101fc:	11c5883a 	add	r2,r2,r7
   10200:	1184703a 	and	r2,r2,r6
   10204:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10208:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   1020c:	11c5883a 	add	r2,r2,r7
   10210:	1184703a 	and	r2,r2,r6
   10214:	20c00b17 	ldw	r3,44(r4)
   10218:	10fff01e 	bne	r2,r3,101dc <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1021c:	2b44703a 	and	r2,r5,r13
   10220:	10000626 	beq	r2,zero,1023c <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10224:	20800817 	ldw	r2,32(r4)
   10228:	00ffff84 	movi	r3,-2
   1022c:	10c4703a 	and	r2,r2,r3
   10230:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10234:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10238:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1023c:	5880800c 	andi	r2,r11,512
   10240:	103fd826 	beq	r2,zero,101a4 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10244:	5b44703a 	and	r2,r11,r13
   10248:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   1024c:	283fd526 	beq	r5,zero,101a4 <altera_avalon_jtag_uart_irq+0x10>
   10250:	20c00d17 	ldw	r3,52(r4)
   10254:	20800c17 	ldw	r2,48(r4)
   10258:	18801126 	beq	r3,r2,102a0 <altera_avalon_jtag_uart_irq+0x10c>
   1025c:	02420e04 	movi	r9,2104
   10260:	01800044 	movi	r6,1
   10264:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10268:	20800d17 	ldw	r2,52(r4)
   1026c:	1105883a 	add	r2,r2,r4
   10270:	1245883a 	add	r2,r2,r9
   10274:	10800007 	ldb	r2,0(r2)
   10278:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1027c:	20800d17 	ldw	r2,52(r4)
   10280:	1185883a 	add	r2,r2,r6
   10284:	11c4703a 	and	r2,r2,r7
   10288:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1028c:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10290:	283fc426 	beq	r5,zero,101a4 <altera_avalon_jtag_uart_irq+0x10>
   10294:	20c00d17 	ldw	r3,52(r4)
   10298:	20800c17 	ldw	r2,48(r4)
   1029c:	18bff21e 	bne	r3,r2,10268 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   102a0:	20c00817 	ldw	r3,32(r4)
   102a4:	00bfff44 	movi	r2,-3
   102a8:	1886703a 	and	r3,r3,r2
   102ac:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   102b0:	20800017 	ldw	r2,0(r4)
   102b4:	1385883a 	add	r2,r2,r14
   102b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   102bc:	60800037 	ldwio	r2,0(r12)
   102c0:	003fb806 	br	101a4 <altera_avalon_jtag_uart_irq+0x10>
   102c4:	f800283a 	ret

000102c8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   102c8:	009a8044 	movi	r2,27137
   102cc:	28800326 	beq	r5,r2,102dc <altera_avalon_jtag_uart_ioctl+0x14>
   102d0:	009a8084 	movi	r2,27138
   102d4:	2880171e 	bne	r5,r2,10334 <altera_avalon_jtag_uart_ioctl+0x6c>
   102d8:	00000d06 	br	10310 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   102dc:	20c00117 	ldw	r3,4(r4)
   102e0:	00a00034 	movhi	r2,32768
   102e4:	10bfffc4 	addi	r2,r2,-1
   102e8:	18801226 	beq	r3,r2,10334 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   102ec:	31800017 	ldw	r6,0(r6)
   102f0:	30ffff84 	addi	r3,r6,-2
   102f4:	10bfff44 	addi	r2,r2,-3
   102f8:	10c0022e 	bgeu	r2,r3,10304 <altera_avalon_jtag_uart_ioctl+0x3c>
   102fc:	01a00034 	movhi	r6,32768
   10300:	31bfff84 	addi	r6,r6,-2
   10304:	21800115 	stw	r6,4(r4)
   10308:	0005883a 	mov	r2,zero
   1030c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10310:	20c00117 	ldw	r3,4(r4)
   10314:	00a00034 	movhi	r2,32768
   10318:	10bfffc4 	addi	r2,r2,-1
   1031c:	18800526 	beq	r3,r2,10334 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10320:	20800917 	ldw	r2,36(r4)
   10324:	10c5803a 	cmpltu	r2,r2,r3
   10328:	30800015 	stw	r2,0(r6)
   1032c:	0005883a 	mov	r2,zero
   10330:	f800283a 	ret
   10334:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   10338:	f800283a 	ret

0001033c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1033c:	defff604 	addi	sp,sp,-40
   10340:	dfc00915 	stw	ra,36(sp)
   10344:	df000815 	stw	fp,32(sp)
   10348:	ddc00715 	stw	r23,28(sp)
   1034c:	dd800615 	stw	r22,24(sp)
   10350:	dd400515 	stw	r21,20(sp)
   10354:	dd000415 	stw	r20,16(sp)
   10358:	dcc00315 	stw	r19,12(sp)
   1035c:	dc800215 	stw	r18,8(sp)
   10360:	dc400115 	stw	r17,4(sp)
   10364:	dc000015 	stw	r16,0(sp)
   10368:	2025883a 	mov	r18,r4
   1036c:	282f883a 	mov	r23,r5
   10370:	3027883a 	mov	r19,r6
   10374:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10378:	0180220e 	bge	zero,r6,10404 <altera_avalon_jtag_uart_read+0xc8>
   1037c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10380:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
   10384:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
   10388:	b4400236 	bltu	r22,r17,10394 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
   1038c:	b461c83a 	sub	r16,r22,r17
   10390:	00000206 	br	1039c <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10394:	00820004 	movi	r2,2048
   10398:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
   1039c:	80000d26 	beq	r16,zero,103d4 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
   103a0:	9829883a 	mov	r20,r19
   103a4:	9c001d36 	bltu	r19,r16,1041c <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   103a8:	91400e04 	addi	r5,r18,56
   103ac:	a809883a 	mov	r4,r21
   103b0:	2c4b883a 	add	r5,r5,r17
   103b4:	800d883a 	mov	r6,r16
   103b8:	0007fa80 	call	7fa8 <memcpy>
      ptr   += n;
   103bc:	ac2b883a 	add	r21,r21,r16
      space -= n;
   103c0:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   103c4:	8445883a 	add	r2,r16,r17
   103c8:	1081ffcc 	andi	r2,r2,2047
   103cc:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
   103d0:	04ffeb16 	blt	zero,r19,10380 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   103d4:	adc01c1e 	bne	r21,r23,10448 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   103d8:	e090000c 	andi	r2,fp,16384
   103dc:	10000d1e 	bne	r2,zero,10414 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   103e0:	90800a17 	ldw	r2,40(r18)
   103e4:	b080031e 	bne	r22,r2,103f4 <altera_avalon_jtag_uart_read+0xb8>
   103e8:	90c00917 	ldw	r3,36(r18)
   103ec:	90800117 	ldw	r2,4(r18)
   103f0:	18bffb36 	bltu	r3,r2,103e0 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   103f4:	90800a17 	ldw	r2,40(r18)
   103f8:	b0800426 	beq	r22,r2,1040c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   103fc:	04c0030e 	bge	zero,r19,1040c <altera_avalon_jtag_uart_read+0xd0>
   10400:	003fde06 	br	1037c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   10404:	3890000c 	andi	r2,r7,16384
   10408:	1000021e 	bne	r2,zero,10414 <altera_avalon_jtag_uart_read+0xd8>
   1040c:	00bffec4 	movi	r2,-5
   10410:	00001806 	br	10474 <altera_avalon_jtag_uart_read+0x138>
   10414:	00bffd44 	movi	r2,-11
   10418:	00001606 	br	10474 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   1041c:	91400e04 	addi	r5,r18,56
   10420:	a809883a 	mov	r4,r21
   10424:	894b883a 	add	r5,r17,r5
   10428:	980d883a 	mov	r6,r19
   1042c:	0007fa80 	call	7fa8 <memcpy>
      ptr   += n;
   10430:	aceb883a 	add	r21,r21,r19
      space -= n;
   10434:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10438:	a445883a 	add	r2,r20,r17
   1043c:	1081ffcc 	andi	r2,r2,2047
   10440:	90800b15 	stw	r2,44(r18)
   10444:	003fe306 	br	103d4 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10448:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1044c:	00bfff84 	movi	r2,-2
   10450:	2084703a 	and	r2,r4,r2
   10454:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10458:	90800817 	ldw	r2,32(r18)
   1045c:	10800054 	ori	r2,r2,1
   10460:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10464:	90c00017 	ldw	r3,0(r18)
   10468:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1046c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   10470:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   10474:	dfc00917 	ldw	ra,36(sp)
   10478:	df000817 	ldw	fp,32(sp)
   1047c:	ddc00717 	ldw	r23,28(sp)
   10480:	dd800617 	ldw	r22,24(sp)
   10484:	dd400517 	ldw	r21,20(sp)
   10488:	dd000417 	ldw	r20,16(sp)
   1048c:	dcc00317 	ldw	r19,12(sp)
   10490:	dc800217 	ldw	r18,8(sp)
   10494:	dc400117 	ldw	r17,4(sp)
   10498:	dc000017 	ldw	r16,0(sp)
   1049c:	dec00a04 	addi	sp,sp,40
   104a0:	f800283a 	ret

000104a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   104a4:	defff804 	addi	sp,sp,-32
   104a8:	dfc00715 	stw	ra,28(sp)
   104ac:	dd800615 	stw	r22,24(sp)
   104b0:	dd400515 	stw	r21,20(sp)
   104b4:	dd000415 	stw	r20,16(sp)
   104b8:	dcc00315 	stw	r19,12(sp)
   104bc:	dc800215 	stw	r18,8(sp)
   104c0:	dc400115 	stw	r17,4(sp)
   104c4:	dc000015 	stw	r16,0(sp)
   104c8:	2021883a 	mov	r16,r4
   104cc:	282d883a 	mov	r22,r5
   104d0:	3011883a 	mov	r8,r6
   104d4:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   104d8:	01800616 	blt	zero,r6,104f4 <altera_avalon_jtag_uart_write+0x50>
   104dc:	2829883a 	mov	r20,r5
   104e0:	00002106 	br	10568 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   104e4:	a585c83a 	sub	r2,r20,r22
   104e8:	00004306 	br	105f8 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
   104ec:	00bffd44 	movi	r2,-11
   104f0:	00004106 	br	105f8 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   104f4:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   104f8:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   104fc:	81400d17 	ldw	r5,52(r16)

      if (in < out)
   10500:	9140032e 	bgeu	r18,r5,10510 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10504:	2c85c83a 	sub	r2,r5,r18
   10508:	11bfffc4 	addi	r6,r2,-1
   1050c:	00000606 	br	10528 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
   10510:	28000326 	beq	r5,zero,10520 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10514:	00820004 	movi	r2,2048
   10518:	148dc83a 	sub	r6,r2,r18
   1051c:	00000206 	br	10528 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10520:	0081ffc4 	movi	r2,2047
   10524:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
   10528:	30002626 	beq	r6,zero,105c4 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
   1052c:	4027883a 	mov	r19,r8
   10530:	3023883a 	mov	r17,r6
   10534:	4180012e 	bgeu	r8,r6,1053c <altera_avalon_jtag_uart_write+0x98>
   10538:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   1053c:	81020e04 	addi	r4,r16,2104
   10540:	2489883a 	add	r4,r4,r18
   10544:	a00b883a 	mov	r5,r20
   10548:	880d883a 	mov	r6,r17
   1054c:	0007fa80 	call	7fa8 <memcpy>
      ptr   += n;
   10550:	a469883a 	add	r20,r20,r17
      count -= n;
   10554:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10558:	9445883a 	add	r2,r18,r17
   1055c:	1081ffcc 	andi	r2,r2,2047
   10560:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10564:	023fe416 	blt	zero,r8,104f8 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10568:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1056c:	00bfff84 	movi	r2,-2
   10570:	2084703a 	and	r2,r4,r2
   10574:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10578:	80800817 	ldw	r2,32(r16)
   1057c:	10800094 	ori	r2,r2,2
   10580:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10584:	80c00017 	ldw	r3,0(r16)
   10588:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1058c:	2001703a 	wrctl	status,r4
   10590:	00000706 	br	105b0 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10594:	80800d17 	ldw	r2,52(r16)
   10598:	1140031e 	bne	r2,r5,105a8 <altera_avalon_jtag_uart_write+0x104>
   1059c:	80c00917 	ldw	r3,36(r16)
   105a0:	80800117 	ldw	r2,4(r16)
   105a4:	18bffb36 	bltu	r3,r2,10594 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   105a8:	80800d17 	ldw	r2,52(r16)
   105ac:	117fed1e 	bne	r2,r5,10564 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   105b0:	b53fcc1e 	bne	r22,r20,104e4 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
   105b4:	a890000c 	andi	r2,r21,16384
   105b8:	103fcc1e 	bne	r2,zero,104ec <altera_avalon_jtag_uart_write+0x48>
   105bc:	00bffec4 	movi	r2,-5
   105c0:	00000d06 	br	105f8 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105c8:	00bfff84 	movi	r2,-2
   105cc:	2084703a 	and	r2,r4,r2
   105d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   105d4:	80800817 	ldw	r2,32(r16)
   105d8:	10800094 	ori	r2,r2,2
   105dc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   105e0:	80c00017 	ldw	r3,0(r16)
   105e4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105e8:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   105ec:	a890000c 	andi	r2,r21,16384
   105f0:	103fe826 	beq	r2,zero,10594 <altera_avalon_jtag_uart_write+0xf0>
   105f4:	003fee06 	br	105b0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
   105f8:	dfc00717 	ldw	ra,28(sp)
   105fc:	dd800617 	ldw	r22,24(sp)
   10600:	dd400517 	ldw	r21,20(sp)
   10604:	dd000417 	ldw	r20,16(sp)
   10608:	dcc00317 	ldw	r19,12(sp)
   1060c:	dc800217 	ldw	r18,8(sp)
   10610:	dc400117 	ldw	r17,4(sp)
   10614:	dc000017 	ldw	r16,0(sp)
   10618:	dec00804 	addi	sp,sp,32
   1061c:	f800283a 	ret

00010620 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10620:	deffff04 	addi	sp,sp,-4
   10624:	dfc00015 	stw	ra,0(sp)
   10628:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1062c:	00c00074 	movhi	r3,1
   10630:	18d89b04 	addi	r3,r3,25196
   10634:	18800017 	ldw	r2,0(r3)
   10638:	1000011e 	bne	r2,zero,10640 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
   1063c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10640:	008001c4 	movi	r2,7
   10644:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   10648:	3009883a 	mov	r4,r6
   1064c:	01800074 	movhi	r6,1
   10650:	31819904 	addi	r6,r6,1636
   10654:	00116e80 	call	116e8 <alt_irq_register>
#endif  
}
   10658:	dfc00017 	ldw	ra,0(sp)
   1065c:	dec00104 	addi	sp,sp,4
   10660:	f800283a 	ret

00010664 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10664:	defffe04 	addi	sp,sp,-8
   10668:	dfc00115 	stw	ra,4(sp)
   1066c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10670:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10674:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10678:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1067c:	00bfff84 	movi	r2,-2
   10680:	8084703a 	and	r2,r16,r2
   10684:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   10688:	00119540 	call	11954 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1068c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   10690:	dfc00117 	ldw	ra,4(sp)
   10694:	dc000017 	ldw	r16,0(sp)
   10698:	dec00204 	addi	sp,sp,8
   1069c:	f800283a 	ret

000106a0 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
   106a0:	200495ba 	slli	r2,r4,22
}
   106a4:	1005d7fa 	srai	r2,r2,31
   106a8:	f800283a 	ret

000106ac <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   106ac:	deffff04 	addi	sp,sp,-4
   106b0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   106b4:	01400074 	movhi	r5,1
   106b8:	29517c04 	addi	r5,r5,17904
   106bc:	001155c0 	call	1155c <alt_find_dev>

  return dev;
}
   106c0:	dfc00017 	ldw	ra,0(sp)
   106c4:	dec00104 	addi	sp,sp,4
   106c8:	f800283a 	ret

000106cc <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   106cc:	defffd04 	addi	sp,sp,-12
   106d0:	dfc00215 	stw	ra,8(sp)
   106d4:	dc400115 	stw	r17,4(sp)
   106d8:	dc000015 	stw	r16,0(sp)
   106dc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   106e0:	20800a17 	ldw	r2,40(r4)
   106e4:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   106e8:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   106ec:	8009883a 	mov	r4,r16
   106f0:	00106a00 	call	106a0 <alt_up_rs232_check_parity>
   106f4:	88800005 	stb	r2,0(r17)
   106f8:	8420000c 	andi	r16,r16,32768
   106fc:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
   10700:	80bfffc4 	addi	r2,r16,-1
   10704:	dfc00217 	ldw	ra,8(sp)
   10708:	dc400117 	ldw	r17,4(sp)
   1070c:	dc000017 	ldw	r16,0(sp)
   10710:	dec00304 	addi	sp,sp,12
   10714:	f800283a 	ret

00010718 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   10718:	defff904 	addi	sp,sp,-28
   1071c:	dfc00615 	stw	ra,24(sp)
   10720:	dd000515 	stw	r20,20(sp)
   10724:	dcc00415 	stw	r19,16(sp)
   10728:	dc800315 	stw	r18,12(sp)
   1072c:	dc400215 	stw	r17,8(sp)
   10730:	dc000115 	stw	r16,4(sp)
   10734:	2821883a 	mov	r16,r5
   10738:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1073c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   10740:	3000021e 	bne	r6,zero,1074c <alt_up_rs232_read_fd+0x34>
   10744:	0025883a 	mov	r18,zero
   10748:	00000a06 	br	10774 <alt_up_rs232_read_fd+0x5c>
   1074c:	0025883a 	mov	r18,zero
   10750:	04400044 	movi	r17,1
   10754:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
   10758:	8461883a 	add	r16,r16,r17
   1075c:	9809883a 	mov	r4,r19
   10760:	d80d883a 	mov	r6,sp
   10764:	00106cc0 	call	106cc <alt_up_rs232_read_data>
   10768:	1000021e 	bne	r2,zero,10774 <alt_up_rs232_read_fd+0x5c>
			count++;
   1076c:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   10770:	a4bff81e 	bne	r20,r18,10754 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
   10774:	9005883a 	mov	r2,r18
   10778:	dfc00617 	ldw	ra,24(sp)
   1077c:	dd000517 	ldw	r20,20(sp)
   10780:	dcc00417 	ldw	r19,16(sp)
   10784:	dc800317 	ldw	r18,12(sp)
   10788:	dc400217 	ldw	r17,8(sp)
   1078c:	dc000117 	ldw	r16,4(sp)
   10790:	dec00704 	addi	sp,sp,28
   10794:	f800283a 	ret

00010798 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10798:	20800a17 	ldw	r2,40(r4)
   1079c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
   107a0:	1004d43a 	srli	r2,r2,16
   107a4:	f800283a 	ret

000107a8 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   107a8:	20800a17 	ldw	r2,40(r4)
   107ac:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   107b0:	29403fcc 	andi	r5,r5,255
   107b4:	11400035 	stwio	r5,0(r2)
	return 0;
}
   107b8:	0005883a 	mov	r2,zero
   107bc:	f800283a 	ret

000107c0 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   107c0:	defffb04 	addi	sp,sp,-20
   107c4:	dfc00415 	stw	ra,16(sp)
   107c8:	dcc00315 	stw	r19,12(sp)
   107cc:	dc800215 	stw	r18,8(sp)
   107d0:	dc400115 	stw	r17,4(sp)
   107d4:	dc000015 	stw	r16,0(sp)
   107d8:	2827883a 	mov	r19,r5
   107dc:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   107e0:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
   107e4:	3000021e 	bne	r6,zero,107f0 <alt_up_rs232_write_fd+0x30>
   107e8:	0021883a 	mov	r16,zero
   107ec:	00000806 	br	10810 <alt_up_rs232_write_fd+0x50>
   107f0:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   107f4:	84c5883a 	add	r2,r16,r19
   107f8:	8809883a 	mov	r4,r17
   107fc:	11400003 	ldbu	r5,0(r2)
   10800:	00107a80 	call	107a8 <alt_up_rs232_write_data>
   10804:	1000021e 	bne	r2,zero,10810 <alt_up_rs232_write_fd+0x50>
		{
			count++;
   10808:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1080c:	943ff91e 	bne	r18,r16,107f4 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
   10810:	8005883a 	mov	r2,r16
   10814:	dfc00417 	ldw	ra,16(sp)
   10818:	dcc00317 	ldw	r19,12(sp)
   1081c:	dc800217 	ldw	r18,8(sp)
   10820:	dc400117 	ldw	r17,4(sp)
   10824:	dc000017 	ldw	r16,0(sp)
   10828:	dec00504 	addi	sp,sp,20
   1082c:	f800283a 	ret

00010830 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10830:	20800a17 	ldw	r2,40(r4)
   10834:	10800104 	addi	r2,r2,4
   10838:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1083c:	013fff84 	movi	r4,-2
   10840:	1906703a 	and	r3,r3,r4
   10844:	10c00035 	stwio	r3,0(r2)
}
   10848:	f800283a 	ret

0001084c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1084c:	20c00a17 	ldw	r3,40(r4)
   10850:	18c00104 	addi	r3,r3,4
   10854:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10858:	10800054 	ori	r2,r2,1
   1085c:	18800035 	stwio	r2,0(r3)
}
   10860:	f800283a 	ret

00010864 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   10864:	20800a17 	ldw	r2,40(r4)
   10868:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
   1086c:	10bfffcc 	andi	r2,r2,65535
   10870:	f800283a 	ret

00010874 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10874:	20800c17 	ldw	r2,48(r4)
   10878:	30801c2e 	bgeu	r6,r2,108ec <alt_up_char_buffer_string+0x78>
   1087c:	20800d17 	ldw	r2,52(r4)
   10880:	38801a2e 	bgeu	r7,r2,108ec <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   10884:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
   10888:	28c00003 	ldbu	r3,0(r5)
   1088c:	18803fcc 	andi	r2,r3,255
   10890:	1080201c 	xori	r2,r2,128
   10894:	10bfe004 	addi	r2,r2,-128
   10898:	10001626 	beq	r2,zero,108f4 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
   1089c:	3a04983a 	sll	r2,r7,r8
   108a0:	308f883a 	add	r7,r6,r2
   108a4:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   108a8:	20800b17 	ldw	r2,44(r4)
   108ac:	3885883a 	add	r2,r7,r2
   108b0:	18c03fcc 	andi	r3,r3,255
   108b4:	18c0201c 	xori	r3,r3,128
   108b8:	18ffe004 	addi	r3,r3,-128
   108bc:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
   108c0:	320d883a 	add	r6,r6,r8
   108c4:	20800c17 	ldw	r2,48(r4)
   108c8:	3080082e 	bgeu	r6,r2,108ec <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
   108cc:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   108d0:	28c00003 	ldbu	r3,0(r5)
   108d4:	18803fcc 	andi	r2,r3,255
   108d8:	1080201c 	xori	r2,r2,128
   108dc:	10bfe004 	addi	r2,r2,-128
   108e0:	10000426 	beq	r2,zero,108f4 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
   108e4:	3a0f883a 	add	r7,r7,r8
   108e8:	003fef06 	br	108a8 <alt_up_char_buffer_string+0x34>
   108ec:	00bfffc4 	movi	r2,-1
   108f0:	f800283a 	ret
   108f4:	0005883a 	mov	r2,zero
	}
	return 0;
}
   108f8:	f800283a 	ret

000108fc <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   108fc:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10900:	20800c17 	ldw	r2,48(r4)
   10904:	3080112e 	bgeu	r6,r2,1094c <alt_up_char_buffer_draw+0x50>
   10908:	20800d17 	ldw	r2,52(r4)
   1090c:	38800f2e 	bgeu	r7,r2,1094c <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   10910:	20c00f17 	ldw	r3,60(r4)
   10914:	30c6703a 	and	r3,r6,r3
   10918:	20800e17 	ldw	r2,56(r4)
   1091c:	1886983a 	sll	r3,r3,r2
   10920:	20801117 	ldw	r2,68(r4)
   10924:	3884703a 	and	r2,r7,r2
   10928:	21001017 	ldw	r4,64(r4)
   1092c:	1104983a 	sll	r2,r2,r4
   10930:	1886b03a 	or	r3,r3,r2
   10934:	40800b17 	ldw	r2,44(r8)
   10938:	1887883a 	add	r3,r3,r2
   1093c:	28803fcc 	andi	r2,r5,255
   10940:	18800025 	stbio	r2,0(r3)
   10944:	0005883a 	mov	r2,zero
   10948:	f800283a 	ret

	return 0;
   1094c:	00bfffc4 	movi	r2,-1
}
   10950:	f800283a 	ret

00010954 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   10954:	20c00a17 	ldw	r3,40(r4)
   10958:	00800044 	movi	r2,1
   1095c:	188000a5 	stbio	r2,2(r3)
   10960:	20800a17 	ldw	r2,40(r4)
   10964:	10c00084 	addi	r3,r2,2
   10968:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1096c:	18800023 	ldbuio	r2,0(r3)
   10970:	1104703a 	and	r2,r2,r4
   10974:	103ffd1e 	bne	r2,zero,1096c <alt_up_char_buffer_clear+0x18>
	return 0;
}
   10978:	f800283a 	ret

0001097c <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1097c:	deffff04 	addi	sp,sp,-4
   10980:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   10984:	01400074 	movhi	r5,1
   10988:	29517c04 	addi	r5,r5,17904
   1098c:	001155c0 	call	1155c <alt_find_dev>

  return dev;
}
   10990:	dfc00017 	ldw	ra,0(sp)
   10994:	dec00104 	addi	sp,sp,4
   10998:	f800283a 	ret

0001099c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1099c:	defffe04 	addi	sp,sp,-8
   109a0:	dfc00115 	stw	ra,4(sp)
   109a4:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
   109a8:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
   109ac:	80800007 	ldb	r2,0(r16)
   109b0:	10000a26 	beq	r2,zero,109dc <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   109b4:	8009883a 	mov	r4,r16
   109b8:	01400074 	movhi	r5,1
   109bc:	294a7104 	addi	r5,r5,10692
   109c0:	0009d500 	call	9d50 <strcmp>
   109c4:	1000021e 	bne	r2,zero,109d0 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
   109c8:	80000005 	stb	zero,0(r16)
   109cc:	00000306 	br	109dc <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   109d0:	84000044 	addi	r16,r16,1
   109d4:	80800007 	ldb	r2,0(r16)
   109d8:	103ff61e 	bne	r2,zero,109b4 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
   109dc:	dfc00117 	ldw	ra,4(sp)
   109e0:	dc000017 	ldw	r16,0(sp)
   109e4:	dec00204 	addi	sp,sp,8
   109e8:	f800283a 	ret

000109ec <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   109ec:	da000017 	ldw	r8,0(sp)
   109f0:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
   109f4:	1800051e 	bne	r3,zero,10a0c <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   109f8:	29c5383a 	mul	r2,r5,r7
   109fc:	3085883a 	add	r2,r6,r2
   10a00:	1105883a 	add	r2,r2,r4
   10a04:	12000025 	stbio	r8,0(r2)
   10a08:	f800283a 	ret
	else if (mode == 1)
   10a0c:	00800044 	movi	r2,1
   10a10:	1880061e 	bne	r3,r2,10a2c <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   10a14:	29c5383a 	mul	r2,r5,r7
   10a18:	3085883a 	add	r2,r6,r2
   10a1c:	1085883a 	add	r2,r2,r2
   10a20:	1105883a 	add	r2,r2,r4
   10a24:	1200002d 	sthio	r8,0(r2)
   10a28:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   10a2c:	29c5383a 	mul	r2,r5,r7
   10a30:	1185883a 	add	r2,r2,r6
   10a34:	1085883a 	add	r2,r2,r2
   10a38:	1085883a 	add	r2,r2,r2
   10a3c:	1105883a 	add	r2,r2,r4
   10a40:	12000035 	stwio	r8,0(r2)
   10a44:	f800283a 	ret

00010a48 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   10a48:	defff304 	addi	sp,sp,-52
   10a4c:	dfc00c15 	stw	ra,48(sp)
   10a50:	df000b15 	stw	fp,44(sp)
   10a54:	ddc00a15 	stw	r23,40(sp)
   10a58:	dd800915 	stw	r22,36(sp)
   10a5c:	dd400815 	stw	r21,32(sp)
   10a60:	dd000715 	stw	r20,28(sp)
   10a64:	dcc00615 	stw	r19,24(sp)
   10a68:	dc800515 	stw	r18,20(sp)
   10a6c:	dc400415 	stw	r17,16(sp)
   10a70:	dc000315 	stw	r16,12(sp)
   10a74:	3011883a 	mov	r8,r6
   10a78:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   10a7c:	4987c83a 	sub	r3,r9,r6
   10a80:	1800010e 	bge	r3,zero,10a88 <alt_up_pixel_buffer_dma_draw_line+0x40>
   10a84:	00c7c83a 	sub	r3,zero,r3
   10a88:	3945c83a 	sub	r2,r7,r5
   10a8c:	1000010e 	bge	r2,zero,10a94 <alt_up_pixel_buffer_dma_draw_line+0x4c>
   10a90:	0085c83a 	sub	r2,zero,r2
   10a94:	10c4803a 	cmplt	r2,r2,r3
   10a98:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10a9c:	20c00e17 	ldw	r3,56(r4)
   10aa0:	00800044 	movi	r2,1
   10aa4:	1880021e 	bne	r3,r2,10ab0 <alt_up_pixel_buffer_dma_draw_line+0x68>
   10aa8:	d8000215 	stw	zero,8(sp)
   10aac:	00000306 	br	10abc <alt_up_pixel_buffer_dma_draw_line+0x74>
   10ab0:	18c00098 	cmpnei	r3,r3,2
   10ab4:	18c00044 	addi	r3,r3,1
   10ab8:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10abc:	20800d17 	ldw	r2,52(r4)
   10ac0:	1000061e 	bne	r2,zero,10adc <alt_up_pixel_buffer_dma_draw_line+0x94>
   10ac4:	20801317 	ldw	r2,76(r4)
   10ac8:	d8c00217 	ldw	r3,8(sp)
   10acc:	10c5c83a 	sub	r2,r2,r3
   10ad0:	00c00044 	movi	r3,1
   10ad4:	18ae983a 	sll	r23,r3,r2
   10ad8:	00000106 	br	10ae0 <alt_up_pixel_buffer_dma_draw_line+0x98>
   10adc:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
   10ae0:	d8c00f17 	ldw	r3,60(sp)
   10ae4:	00800044 	movi	r2,1
   10ae8:	1880021e 	bne	r3,r2,10af4 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
   10aec:	25800c17 	ldw	r22,48(r4)
   10af0:	00000106 	br	10af8 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   10af4:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
   10af8:	50000326 	beq	r10,zero,10b08 <alt_up_pixel_buffer_dma_draw_line+0xc0>
   10afc:	400d883a 	mov	r6,r8
   10b00:	4827883a 	mov	r19,r9
   10b04:	00000406 	br	10b18 <alt_up_pixel_buffer_dma_draw_line+0xd0>
   10b08:	280d883a 	mov	r6,r5
   10b0c:	400b883a 	mov	r5,r8
   10b10:	3827883a 	mov	r19,r7
   10b14:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
   10b18:	9980060e 	bge	r19,r6,10b34 <alt_up_pixel_buffer_dma_draw_line+0xec>
   10b1c:	9805883a 	mov	r2,r19
   10b20:	3027883a 	mov	r19,r6
   10b24:	100d883a 	mov	r6,r2
   10b28:	3805883a 	mov	r2,r7
   10b2c:	280f883a 	mov	r7,r5
   10b30:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   10b34:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
   10b38:	3969c83a 	sub	r20,r7,r5
   10b3c:	a000010e 	bge	r20,zero,10b44 <alt_up_pixel_buffer_dma_draw_line+0xfc>
   10b40:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
   10b44:	a804d7fa 	srli	r2,r21,31
   10b48:	1545883a 	add	r2,r2,r21
   10b4c:	1005d07a 	srai	r2,r2,1
   10b50:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
   10b54:	29c0020e 	bge	r5,r7,10b60 <alt_up_pixel_buffer_dma_draw_line+0x118>
   10b58:	07000044 	movi	fp,1
   10b5c:	00000106 	br	10b64 <alt_up_pixel_buffer_dma_draw_line+0x11c>
   10b60:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   10b64:	50000226 	beq	r10,zero,10b70 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
   10b68:	9980030e 	bge	r19,r6,10b78 <alt_up_pixel_buffer_dma_draw_line+0x130>
   10b6c:	00002506 	br	10c04 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10b70:	9980130e 	bge	r19,r6,10bc0 <alt_up_pixel_buffer_dma_draw_line+0x178>
   10b74:	00002306 	br	10c04 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   10b78:	3021883a 	mov	r16,r6
   10b7c:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   10b80:	d8800e17 	ldw	r2,56(sp)
   10b84:	d8800015 	stw	r2,0(sp)
   10b88:	d8c00217 	ldw	r3,8(sp)
   10b8c:	d8c00115 	stw	r3,4(sp)
   10b90:	b009883a 	mov	r4,r22
   10b94:	b80b883a 	mov	r5,r23
   10b98:	900d883a 	mov	r6,r18
   10b9c:	800f883a 	mov	r7,r16
   10ba0:	00109ec0 	call	109ec <helper_plot_pixel>
			error = error + deltay;
   10ba4:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10ba8:	0440020e 	bge	zero,r17,10bb4 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
   10bac:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10bb0:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   10bb4:	84000044 	addi	r16,r16,1
   10bb8:	9c001216 	blt	r19,r16,10c04 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   10bbc:	003ff006 	br	10b80 <alt_up_pixel_buffer_dma_draw_line+0x138>
   10bc0:	3021883a 	mov	r16,r6
   10bc4:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   10bc8:	d8800e17 	ldw	r2,56(sp)
   10bcc:	d8800015 	stw	r2,0(sp)
   10bd0:	d8c00217 	ldw	r3,8(sp)
   10bd4:	d8c00115 	stw	r3,4(sp)
   10bd8:	b009883a 	mov	r4,r22
   10bdc:	b80b883a 	mov	r5,r23
   10be0:	800d883a 	mov	r6,r16
   10be4:	900f883a 	mov	r7,r18
   10be8:	00109ec0 	call	109ec <helper_plot_pixel>
			error = error + deltay;
   10bec:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10bf0:	0440020e 	bge	zero,r17,10bfc <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
   10bf4:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10bf8:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10bfc:	84000044 	addi	r16,r16,1
   10c00:	9c3ff10e 	bge	r19,r16,10bc8 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   10c04:	dfc00c17 	ldw	ra,48(sp)
   10c08:	df000b17 	ldw	fp,44(sp)
   10c0c:	ddc00a17 	ldw	r23,40(sp)
   10c10:	dd800917 	ldw	r22,36(sp)
   10c14:	dd400817 	ldw	r21,32(sp)
   10c18:	dd000717 	ldw	r20,28(sp)
   10c1c:	dcc00617 	ldw	r19,24(sp)
   10c20:	dc800517 	ldw	r18,20(sp)
   10c24:	dc400417 	ldw	r17,16(sp)
   10c28:	dc000317 	ldw	r16,12(sp)
   10c2c:	dec00d04 	addi	sp,sp,52
   10c30:	f800283a 	ret

00010c34 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10c34:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10c38:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10c3c:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
   10c40:	3980022e 	bgeu	r7,r6,10c4c <alt_up_pixel_buffer_dma_draw_vline+0x18>
   10c44:	3011883a 	mov	r8,r6
   10c48:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   10c4c:	2a405d2e 	bgeu	r5,r9,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10c50:	30805c2e 	bgeu	r6,r2,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10c54:	40800136 	bltu	r8,r2,10c5c <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
   10c58:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10c5c:	d8c00117 	ldw	r3,4(sp)
   10c60:	00800044 	movi	r2,1
   10c64:	1880021e 	bne	r3,r2,10c70 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10c68:	20c00c17 	ldw	r3,48(r4)
   10c6c:	00000106 	br	10c74 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10c70:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   10c74:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10c78:	20800d17 	ldw	r2,52(r4)
   10c7c:	1000281e 	bne	r2,zero,10d20 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   10c80:	22801317 	ldw	r10,76(r4)
   10c84:	3284983a 	sll	r2,r6,r10
   10c88:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10c8c:	21000e17 	ldw	r4,56(r4)
   10c90:	00800044 	movi	r2,1
   10c94:	2080091e 	bne	r4,r2,10cbc <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
   10c98:	41804a36 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10c9c:	1013883a 	mov	r9,r2
   10ca0:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10ca4:	1945883a 	add	r2,r3,r5
   10ca8:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10cac:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10cb0:	324d883a 	add	r6,r6,r9
   10cb4:	41804336 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10cb8:	003ffa06 	br	10ca4 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10cbc:	00800084 	movi	r2,2
   10cc0:	2080021e 	bne	r4,r2,10ccc <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
   10cc4:	4180032e 	bgeu	r8,r6,10cd4 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
   10cc8:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10ccc:	41800a2e 	bgeu	r8,r6,10cf8 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
   10cd0:	f800283a 	ret
   10cd4:	294b883a 	add	r5,r5,r5
   10cd8:	02400044 	movi	r9,1
   10cdc:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10ce0:	28c5883a 	add	r2,r5,r3
   10ce4:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10ce8:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10cec:	324d883a 	add	r6,r6,r9
   10cf0:	41803436 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10cf4:	003ffa06 	br	10ce0 <alt_up_pixel_buffer_dma_draw_vline+0xac>
   10cf8:	2945883a 	add	r2,r5,r5
   10cfc:	108b883a 	add	r5,r2,r2
   10d00:	02400044 	movi	r9,1
   10d04:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10d08:	28c5883a 	add	r2,r5,r3
   10d0c:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10d10:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10d14:	324d883a 	add	r6,r6,r9
   10d18:	41802a36 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10d1c:	003ffa06 	br	10d08 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10d20:	21000e17 	ldw	r4,56(r4)
   10d24:	00800044 	movi	r2,1
   10d28:	20800b1e 	bne	r4,r2,10d58 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10d2c:	41802536 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10d30:	4809883a 	mov	r4,r9
   10d34:	3245383a 	mul	r2,r6,r9
   10d38:	1885883a 	add	r2,r3,r2
   10d3c:	1145883a 	add	r2,r2,r5
   10d40:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10d44:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10d48:	30cd883a 	add	r6,r6,r3
   10d4c:	1105883a 	add	r2,r2,r4
   10d50:	41801c36 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10d54:	003ffb06 	br	10d44 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10d58:	00800084 	movi	r2,2
   10d5c:	20800c1e 	bne	r4,r2,10d90 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10d60:	41801836 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   10d64:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
   10d68:	3105383a 	mul	r2,r6,r4
   10d6c:	1887883a 	add	r3,r3,r2
   10d70:	294b883a 	add	r5,r5,r5
   10d74:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10d78:	28c5883a 	add	r2,r5,r3
   10d7c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
   10d80:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10d84:	324d883a 	add	r6,r6,r9
   10d88:	41800e36 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10d8c:	003ffa06 	br	10d78 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10d90:	41800c36 	bltu	r8,r6,10dc4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10d94:	4a45883a 	add	r2,r9,r9
   10d98:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
   10d9c:	3105383a 	mul	r2,r6,r4
   10da0:	1887883a 	add	r3,r3,r2
   10da4:	2945883a 	add	r2,r5,r5
   10da8:	108b883a 	add	r5,r2,r2
   10dac:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10db0:	28c5883a 	add	r2,r5,r3
   10db4:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
   10db8:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10dbc:	324d883a 	add	r6,r6,r9
   10dc0:	41bffb2e 	bgeu	r8,r6,10db0 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
   10dc4:	f800283a 	ret

00010dc8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10dc8:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10dcc:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10dd0:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10dd4:	3140022e 	bgeu	r6,r5,10de0 <alt_up_pixel_buffer_dma_draw_hline+0x18>
   10dd8:	2813883a 	mov	r9,r5
   10ddc:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   10de0:	2a00552e 	bgeu	r5,r8,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10de4:	3880542e 	bgeu	r7,r2,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10de8:	4a000136 	bltu	r9,r8,10df0 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
   10dec:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10df0:	d8c00117 	ldw	r3,4(sp)
   10df4:	00800044 	movi	r2,1
   10df8:	1880021e 	bne	r3,r2,10e04 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10dfc:	21800c17 	ldw	r6,48(r4)
   10e00:	00000106 	br	10e08 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   10e04:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
   10e08:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10e0c:	20800d17 	ldw	r2,52(r4)
   10e10:	1000231e 	bne	r2,zero,10ea0 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
   10e14:	20801317 	ldw	r2,76(r4)
   10e18:	3884983a 	sll	r2,r7,r2
   10e1c:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10e20:	21000e17 	ldw	r4,56(r4)
   10e24:	00800044 	movi	r2,1
   10e28:	2080081e 	bne	r4,r2,10e4c <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
   10e2c:	49404236 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10e30:	3945883a 	add	r2,r7,r5
   10e34:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10e38:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10e3c:	290b883a 	add	r5,r5,r4
   10e40:	1105883a 	add	r2,r2,r4
   10e44:	49403c36 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10e48:	003ffb06 	br	10e38 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10e4c:	00800084 	movi	r2,2
   10e50:	2080021e 	bne	r4,r2,10e5c <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
   10e54:	4940032e 	bgeu	r9,r5,10e64 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
   10e58:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10e5c:	4940082e 	bgeu	r9,r5,10e80 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
   10e60:	f800283a 	ret
   10e64:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10e68:	2945883a 	add	r2,r5,r5
   10e6c:	11c5883a 	add	r2,r2,r7
   10e70:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10e74:	290b883a 	add	r5,r5,r4
   10e78:	49402f36 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10e7c:	003ffa06 	br	10e68 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
   10e80:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10e84:	2945883a 	add	r2,r5,r5
   10e88:	1085883a 	add	r2,r2,r2
   10e8c:	11c5883a 	add	r2,r2,r7
   10e90:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   10e94:	290b883a 	add	r5,r5,r4
   10e98:	49402736 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10e9c:	003ff906 	br	10e84 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10ea0:	21000e17 	ldw	r4,56(r4)
   10ea4:	00800044 	movi	r2,1
   10ea8:	20800a1e 	bne	r4,r2,10ed4 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
   10eac:	41c5383a 	mul	r2,r8,r7
   10eb0:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
   10eb4:	49402036 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10eb8:	1145883a 	add	r2,r2,r5
   10ebc:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10ec0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10ec4:	290b883a 	add	r5,r5,r4
   10ec8:	1105883a 	add	r2,r2,r4
   10ecc:	49401a36 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10ed0:	003ffb06 	br	10ec0 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10ed4:	00800084 	movi	r2,2
   10ed8:	20800b1e 	bne	r4,r2,10f08 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
   10edc:	4205883a 	add	r2,r8,r8
   10ee0:	3885383a 	mul	r2,r7,r2
   10ee4:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10ee8:	49401336 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10eec:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10ef0:	2945883a 	add	r2,r5,r5
   10ef4:	11c5883a 	add	r2,r2,r7
   10ef8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10efc:	290b883a 	add	r5,r5,r4
   10f00:	49400d36 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10f04:	003ffa06 	br	10ef0 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
   10f08:	4205883a 	add	r2,r8,r8
   10f0c:	1085883a 	add	r2,r2,r2
   10f10:	3885383a 	mul	r2,r7,r2
   10f14:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10f18:	49400736 	bltu	r9,r5,10f38 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10f1c:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10f20:	2945883a 	add	r2,r5,r5
   10f24:	1085883a 	add	r2,r2,r2
   10f28:	11c5883a 	add	r2,r2,r7
   10f2c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10f30:	290b883a 	add	r5,r5,r4
   10f34:	497ffa2e 	bgeu	r9,r5,10f20 <alt_up_pixel_buffer_dma_draw_hline+0x158>
   10f38:	f800283a 	ret

00010f3c <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10f3c:	defff604 	addi	sp,sp,-40
   10f40:	dfc00915 	stw	ra,36(sp)
   10f44:	dd800815 	stw	r22,32(sp)
   10f48:	dd400715 	stw	r21,28(sp)
   10f4c:	dd000615 	stw	r20,24(sp)
   10f50:	dcc00515 	stw	r19,20(sp)
   10f54:	dc800415 	stw	r18,16(sp)
   10f58:	dc400315 	stw	r17,12(sp)
   10f5c:	dc000215 	stw	r16,8(sp)
   10f60:	2029883a 	mov	r20,r4
   10f64:	282d883a 	mov	r22,r5
   10f68:	302b883a 	mov	r21,r6
   10f6c:	3825883a 	mov	r18,r7
   10f70:	dcc00a17 	ldw	r19,40(sp)
   10f74:	dc000b17 	ldw	r16,44(sp)
   10f78:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10f7c:	dc000015 	stw	r16,0(sp)
   10f80:	dc400115 	stw	r17,4(sp)
   10f84:	380d883a 	mov	r6,r7
   10f88:	a80f883a 	mov	r7,r21
   10f8c:	0010dc80 	call	10dc8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   10f90:	dc000015 	stw	r16,0(sp)
   10f94:	dc400115 	stw	r17,4(sp)
   10f98:	a009883a 	mov	r4,r20
   10f9c:	b00b883a 	mov	r5,r22
   10fa0:	900d883a 	mov	r6,r18
   10fa4:	980f883a 	mov	r7,r19
   10fa8:	0010dc80 	call	10dc8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10fac:	dc000015 	stw	r16,0(sp)
   10fb0:	dc400115 	stw	r17,4(sp)
   10fb4:	a009883a 	mov	r4,r20
   10fb8:	b00b883a 	mov	r5,r22
   10fbc:	a80d883a 	mov	r6,r21
   10fc0:	980f883a 	mov	r7,r19
   10fc4:	0010c340 	call	10c34 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   10fc8:	dc000015 	stw	r16,0(sp)
   10fcc:	dc400115 	stw	r17,4(sp)
   10fd0:	a009883a 	mov	r4,r20
   10fd4:	900b883a 	mov	r5,r18
   10fd8:	a80d883a 	mov	r6,r21
   10fdc:	980f883a 	mov	r7,r19
   10fe0:	0010c340 	call	10c34 <alt_up_pixel_buffer_dma_draw_vline>
}
   10fe4:	dfc00917 	ldw	ra,36(sp)
   10fe8:	dd800817 	ldw	r22,32(sp)
   10fec:	dd400717 	ldw	r21,28(sp)
   10ff0:	dd000617 	ldw	r20,24(sp)
   10ff4:	dcc00517 	ldw	r19,20(sp)
   10ff8:	dc800417 	ldw	r18,16(sp)
   10ffc:	dc400317 	ldw	r17,12(sp)
   11000:	dc000217 	ldw	r16,8(sp)
   11004:	dec00a04 	addi	sp,sp,40
   11008:	f800283a 	ret

0001100c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1100c:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   11010:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   11014:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   11018:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   1101c:	3940022e 	bgeu	r7,r5,11028 <alt_up_pixel_buffer_dma_draw_box+0x1c>
   11020:	2811883a 	mov	r8,r5
   11024:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
   11028:	5980032e 	bgeu	r11,r6,11038 <alt_up_pixel_buffer_dma_draw_box+0x2c>
   1102c:	5805883a 	mov	r2,r11
   11030:	3017883a 	mov	r11,r6
   11034:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   11038:	2a80842e 	bgeu	r5,r10,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
   1103c:	30c0832e 	bgeu	r6,r3,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   11040:	42800136 	bltu	r8,r10,11048 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
   11044:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   11048:	58c00136 	bltu	r11,r3,11050 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
   1104c:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11050:	d8c00217 	ldw	r3,8(sp)
   11054:	00800044 	movi	r2,1
   11058:	1880021e 	bne	r3,r2,11064 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
   1105c:	20c00c17 	ldw	r3,48(r4)
   11060:	00000106 	br	11068 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
   11064:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   11068:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1106c:	20800d17 	ldw	r2,52(r4)
   11070:	1000391e 	bne	r2,zero,11158 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   11074:	22801317 	ldw	r10,76(r4)
   11078:	3284983a 	sll	r2,r6,r10
   1107c:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11080:	21000e17 	ldw	r4,56(r4)
   11084:	00800044 	movi	r2,1
   11088:	2080101e 	bne	r4,r2,110cc <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
   1108c:	59806f36 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
   11090:	00000a06 	br	110bc <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   11094:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11098:	00800044 	movi	r2,1
   1109c:	1887883a 	add	r3,r3,r2
   110a0:	2089883a 	add	r4,r4,r2
   110a4:	40fffb2e 	bgeu	r8,r3,11094 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   110a8:	00800044 	movi	r2,1
   110ac:	308d883a 	add	r6,r6,r2
   110b0:	59806636 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   110b4:	1284983a 	sll	r2,r2,r10
   110b8:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   110bc:	417ffa36 	bltu	r8,r5,110a8 <alt_up_pixel_buffer_dma_draw_box+0x9c>
   110c0:	29c9883a 	add	r4,r5,r7
   110c4:	2807883a 	mov	r3,r5
   110c8:	003ff206 	br	11094 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   110cc:	00800084 	movi	r2,2
   110d0:	2080021e 	bne	r4,r2,110dc <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
   110d4:	59805d36 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
   110d8:	00000e06 	br	11114 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   110dc:	59805b36 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
   110e0:	00001b06 	br	11150 <alt_up_pixel_buffer_dma_draw_box+0x144>
   110e4:	2807883a 	mov	r3,r5
   110e8:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   110ec:	18c5883a 	add	r2,r3,r3
   110f0:	11c5883a 	add	r2,r2,r7
   110f4:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   110f8:	1907883a 	add	r3,r3,r4
   110fc:	40fffb2e 	bgeu	r8,r3,110ec <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   11100:	00800044 	movi	r2,1
   11104:	308d883a 	add	r6,r6,r2
   11108:	59805036 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   1110c:	1284983a 	sll	r2,r2,r10
   11110:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11114:	417ff32e 	bgeu	r8,r5,110e4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
   11118:	003ff906 	br	11100 <alt_up_pixel_buffer_dma_draw_box+0xf4>
   1111c:	2807883a 	mov	r3,r5
   11120:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   11124:	18c5883a 	add	r2,r3,r3
   11128:	1085883a 	add	r2,r2,r2
   1112c:	11c5883a 	add	r2,r2,r7
   11130:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11134:	1907883a 	add	r3,r3,r4
   11138:	40fffa2e 	bgeu	r8,r3,11124 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1113c:	00800044 	movi	r2,1
   11140:	308d883a 	add	r6,r6,r2
   11144:	59804136 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   11148:	1284983a 	sll	r2,r2,r10
   1114c:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11150:	417ff22e 	bgeu	r8,r5,1111c <alt_up_pixel_buffer_dma_draw_box+0x110>
   11154:	003ff906 	br	1113c <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11158:	21000e17 	ldw	r4,56(r4)
   1115c:	00800044 	movi	r2,1
   11160:	2080121e 	bne	r4,r2,111ac <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11164:	59803936 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
   11168:	5019883a 	mov	r12,r10
   1116c:	3285383a 	mul	r2,r6,r10
   11170:	1885883a 	add	r2,r3,r2
   11174:	114f883a 	add	r7,r2,r5
   11178:	00000806 	br	1119c <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   1117c:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11180:	00800044 	movi	r2,1
   11184:	1887883a 	add	r3,r3,r2
   11188:	2089883a 	add	r4,r4,r2
   1118c:	40fffb2e 	bgeu	r8,r3,1117c <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11190:	31800044 	addi	r6,r6,1
   11194:	3b0f883a 	add	r7,r7,r12
   11198:	59802c36 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
   1119c:	417ffc36 	bltu	r8,r5,11190 <alt_up_pixel_buffer_dma_draw_box+0x184>
   111a0:	3809883a 	mov	r4,r7
   111a4:	2807883a 	mov	r3,r5
   111a8:	003ff406 	br	1117c <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   111ac:	00800084 	movi	r2,2
   111b0:	2080121e 	bne	r4,r2,111fc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   111b4:	59802536 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   111b8:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
   111bc:	3285383a 	mul	r2,r6,r10
   111c0:	1889883a 	add	r4,r3,r2
   111c4:	03000044 	movi	r12,1
   111c8:	00000a06 	br	111f4 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
   111cc:	2807883a 	mov	r3,r5
   111d0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   111d4:	18c5883a 	add	r2,r3,r3
   111d8:	1105883a 	add	r2,r2,r4
   111dc:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   111e0:	19c7883a 	add	r3,r3,r7
   111e4:	40fffb2e 	bgeu	r8,r3,111d4 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   111e8:	330d883a 	add	r6,r6,r12
   111ec:	59801736 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   111f0:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   111f4:	417ff52e 	bgeu	r8,r5,111cc <alt_up_pixel_buffer_dma_draw_box+0x1c0>
   111f8:	003ffb06 	br	111e8 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   111fc:	59801336 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   11200:	5285883a 	add	r2,r10,r10
   11204:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
   11208:	3285383a 	mul	r2,r6,r10
   1120c:	1889883a 	add	r4,r3,r2
   11210:	03000044 	movi	r12,1
   11214:	00000b06 	br	11244 <alt_up_pixel_buffer_dma_draw_box+0x238>
   11218:	2807883a 	mov	r3,r5
   1121c:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   11220:	18c5883a 	add	r2,r3,r3
   11224:	1085883a 	add	r2,r2,r2
   11228:	1105883a 	add	r2,r2,r4
   1122c:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11230:	19c7883a 	add	r3,r3,r7
   11234:	40fffa2e 	bgeu	r8,r3,11220 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11238:	330d883a 	add	r6,r6,r12
   1123c:	59800336 	bltu	r11,r6,1124c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   11240:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11244:	417ff42e 	bgeu	r8,r5,11218 <alt_up_pixel_buffer_dma_draw_box+0x20c>
   11248:	003ffb06 	br	11238 <alt_up_pixel_buffer_dma_draw_box+0x22c>
   1124c:	f800283a 	ret

00011250 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11250:	00800044 	movi	r2,1
   11254:	2880021e 	bne	r5,r2,11260 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
   11258:	21c00c17 	ldw	r7,48(r4)
   1125c:	00000106 	br	11264 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
   11260:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
   11264:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11268:	20c00e17 	ldw	r3,56(r4)
   1126c:	00800084 	movi	r2,2
   11270:	1880021e 	bne	r3,r2,1127c <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
   11274:	294d883a 	add	r6,r5,r5
   11278:	00000206 	br	11284 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
   1127c:	2945883a 	add	r2,r5,r5
   11280:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   11284:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   11288:	20800d17 	ldw	r2,52(r4)
   1128c:	1000121e 	bne	r2,zero,112d8 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   11290:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
   11294:	48001a26 	beq	r9,zero,11300 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   11298:	0011883a 	mov	r8,zero
   1129c:	3014c03a 	cmpne	r10,r6,zero
   112a0:	00000b06 	br	112d0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   112a4:	0007883a 	mov	r3,zero
   112a8:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
   112ac:	19c5883a 	add	r2,r3,r7
   112b0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   112b4:	1947883a 	add	r3,r3,r5
   112b8:	19bffc36 	bltu	r3,r6,112ac <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   112bc:	00800044 	movi	r2,1
   112c0:	4091883a 	add	r8,r8,r2
   112c4:	4a000e26 	beq	r9,r8,11300 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   112c8:	1104983a 	sll	r2,r2,r4
   112cc:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   112d0:	503ff41e 	bne	r10,zero,112a4 <alt_up_pixel_buffer_dma_clear_screen+0x54>
   112d4:	003ff906 	br	112bc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   112d8:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
   112dc:	20000826 	beq	r4,zero,11300 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   112e0:	0007883a 	mov	r3,zero
   112e4:	0005883a 	mov	r2,zero
   112e8:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
   112ec:	3885883a 	add	r2,r7,r2
   112f0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   112f4:	1945883a 	add	r2,r3,r5
   112f8:	1007883a 	mov	r3,r2
   112fc:	113ffb36 	bltu	r2,r4,112ec <alt_up_pixel_buffer_dma_clear_screen+0x9c>
   11300:	f800283a 	ret

00011304 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   11304:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   11308:	20c00a17 	ldw	r3,40(r4)
   1130c:	00800044 	movi	r2,1
   11310:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   11314:	20800b17 	ldw	r2,44(r4)
   11318:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
   1131c:	21400b15 	stw	r5,44(r4)
	return 0;
}
   11320:	0005883a 	mov	r2,zero
   11324:	f800283a 	ret

00011328 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   11328:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   1132c:	22400f17 	ldw	r9,60(r4)
   11330:	32402a2e 	bgeu	r6,r9,113dc <alt_up_pixel_buffer_dma_draw+0xb4>
   11334:	20801017 	ldw	r2,64(r4)
   11338:	3880282e 	bgeu	r7,r2,113dc <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1133c:	20800d17 	ldw	r2,52(r4)
   11340:	10000a1e 	bne	r2,zero,1136c <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   11344:	21001217 	ldw	r4,72(r4)
   11348:	3108703a 	and	r4,r6,r4
   1134c:	40801117 	ldw	r2,68(r8)
   11350:	2088983a 	sll	r4,r4,r2
   11354:	40801417 	ldw	r2,80(r8)
   11358:	3884703a 	and	r2,r7,r2
   1135c:	40c01317 	ldw	r3,76(r8)
   11360:	10c4983a 	sll	r2,r2,r3
   11364:	2086b03a 	or	r3,r4,r2
   11368:	00000806 	br	1138c <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1136c:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   11370:	40c01217 	ldw	r3,72(r8)
   11374:	30c6703a 	and	r3,r6,r3
   11378:	40801417 	ldw	r2,80(r8)
   1137c:	3884703a 	and	r2,r7,r2
   11380:	4885383a 	mul	r2,r9,r2
   11384:	10c5883a 	add	r2,r2,r3
   11388:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1138c:	42400e17 	ldw	r9,56(r8)
   11390:	00800044 	movi	r2,1
   11394:	4880051e 	bne	r9,r2,113ac <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   11398:	40800c17 	ldw	r2,48(r8)
   1139c:	1885883a 	add	r2,r3,r2
   113a0:	11400025 	stbio	r5,0(r2)
   113a4:	0005883a 	mov	r2,zero
   113a8:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   113ac:	00800084 	movi	r2,2
   113b0:	4880051e 	bne	r9,r2,113c8 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   113b4:	40800c17 	ldw	r2,48(r8)
   113b8:	1885883a 	add	r2,r3,r2
   113bc:	1140002d 	sthio	r5,0(r2)
   113c0:	0005883a 	mov	r2,zero
   113c4:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   113c8:	40800c17 	ldw	r2,48(r8)
   113cc:	1885883a 	add	r2,r3,r2
   113d0:	11400035 	stwio	r5,0(r2)
   113d4:	0005883a 	mov	r2,zero
   113d8:	f800283a 	ret
   113dc:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   113e0:	f800283a 	ret

000113e4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   113e4:	20800a17 	ldw	r2,40(r4)
   113e8:	10800337 	ldwio	r2,12(r2)
}
   113ec:	1080004c 	andi	r2,r2,1
   113f0:	f800283a 	ret

000113f4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   113f4:	00c00104 	movi	r3,4
   113f8:	20800a17 	ldw	r2,40(r4)
   113fc:	10c5883a 	add	r2,r2,r3
   11400:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   11404:	20800a17 	ldw	r2,40(r4)
   11408:	10c5883a 	add	r2,r2,r3
   1140c:	10800037 	ldwio	r2,0(r2)
   11410:	20800c15 	stw	r2,48(r4)
	return 0;
}
   11414:	0005883a 	mov	r2,zero
   11418:	f800283a 	ret

0001141c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   1141c:	deffff04 	addi	sp,sp,-4
   11420:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   11424:	01400074 	movhi	r5,1
   11428:	29517c04 	addi	r5,r5,17904
   1142c:	001155c0 	call	1155c <alt_find_dev>

  return dev;
}
   11430:	dfc00017 	ldw	ra,0(sp)
   11434:	dec00104 	addi	sp,sp,4
   11438:	f800283a 	ret

0001143c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   1143c:	00800074 	movhi	r2,1
   11440:	10989b04 	addi	r2,r2,25196
   11444:	10800017 	ldw	r2,0(r2)
   11448:	1000021e 	bne	r2,zero,11454 <alt_alarm_start+0x18>
   1144c:	00bfde84 	movi	r2,-134
   11450:	f800283a 	ret
  {
    if (alarm)
   11454:	2000021e 	bne	r4,zero,11460 <alt_alarm_start+0x24>
   11458:	00bffa84 	movi	r2,-22
   1145c:	f800283a 	ret
    {
      alarm->callback = callback;
   11460:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   11464:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11468:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1146c:	00bfff84 	movi	r2,-2
   11470:	3884703a 	and	r2,r7,r2
   11474:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11478:	00800074 	movhi	r2,1
   1147c:	10989c04 	addi	r2,r2,25200
   11480:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   11484:	01800044 	movi	r6,1
   11488:	1985883a 	add	r2,r3,r6
   1148c:	2885883a 	add	r2,r5,r2
   11490:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11494:	10c0022e 	bgeu	r2,r3,114a0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   11498:	21800405 	stb	r6,16(r4)
   1149c:	00000106 	br	114a4 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   114a0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   114a4:	00800074 	movhi	r2,1
   114a8:	10918204 	addi	r2,r2,17928
   114ac:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   114b0:	10c00017 	ldw	r3,0(r2)
   114b4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   114b8:	10c00017 	ldw	r3,0(r2)
   114bc:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   114c0:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114c4:	3801703a 	wrctl	status,r7
   114c8:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   114cc:	f800283a 	ret

000114d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   114d0:	0005883a 	mov	r2,zero
   114d4:	01000104 	movi	r4,4
   114d8:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   114dc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   114e0:	1105883a 	add	r2,r2,r4
   114e4:	10fffd1e 	bne	r2,r3,114dc <alt_dcache_flush_all+0xc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   114e8:	f800283a 	ret

000114ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   114ec:	deffff04 	addi	sp,sp,-4
   114f0:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   114f4:	20000226 	beq	r4,zero,11500 <alt_dev_llist_insert+0x14>
   114f8:	20800217 	ldw	r2,8(r4)
   114fc:	10000d1e 	bne	r2,zero,11534 <alt_dev_llist_insert+0x48>
   11500:	00800074 	movhi	r2,1
   11504:	10917f04 	addi	r2,r2,17916
   11508:	10800017 	ldw	r2,0(r2)
   1150c:	1000031e 	bne	r2,zero,1151c <alt_dev_llist_insert+0x30>
   11510:	00c00074 	movhi	r3,1
   11514:	18d89604 	addi	r3,r3,25176
   11518:	00000206 	br	11524 <alt_dev_llist_insert+0x38>
   1151c:	103ee83a 	callr	r2
   11520:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   11524:	00800584 	movi	r2,22
   11528:	18800015 	stw	r2,0(r3)
   1152c:	00bffa84 	movi	r2,-22
   11530:	00000706 	br	11550 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11534:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11538:	28800017 	ldw	r2,0(r5)
   1153c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11540:	28800017 	ldw	r2,0(r5)
   11544:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11548:	29000015 	stw	r4,0(r5)
   1154c:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11550:	dfc00017 	ldw	ra,0(sp)
   11554:	dec00104 	addi	sp,sp,4
   11558:	f800283a 	ret

0001155c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1155c:	defffb04 	addi	sp,sp,-20
   11560:	dfc00415 	stw	ra,16(sp)
   11564:	dcc00315 	stw	r19,12(sp)
   11568:	dc800215 	stw	r18,8(sp)
   1156c:	dc400115 	stw	r17,4(sp)
   11570:	dc000015 	stw	r16,0(sp)
   11574:	2027883a 	mov	r19,r4
   11578:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   1157c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11580:	0009e0c0 	call	9e0c <strlen>
   11584:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11588:	8c000726 	beq	r17,r16,115a8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1158c:	89000217 	ldw	r4,8(r17)
   11590:	980b883a 	mov	r5,r19
   11594:	900d883a 	mov	r6,r18
   11598:	0011ba40 	call	11ba4 <memcmp>
   1159c:	10000326 	beq	r2,zero,115ac <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   115a0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   115a4:	847ff91e 	bne	r16,r17,1158c <alt_find_dev+0x30>
   115a8:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   115ac:	8805883a 	mov	r2,r17
   115b0:	dfc00417 	ldw	ra,16(sp)
   115b4:	dcc00317 	ldw	r19,12(sp)
   115b8:	dc800217 	ldw	r18,8(sp)
   115bc:	dc400117 	ldw	r17,4(sp)
   115c0:	dc000017 	ldw	r16,0(sp)
   115c4:	dec00504 	addi	sp,sp,20
   115c8:	f800283a 	ret

000115cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   115cc:	deffff04 	addi	sp,sp,-4
   115d0:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   115d4:	0009883a 	mov	r4,zero
   115d8:	01440004 	movi	r5,4096
   115dc:	0011b300 	call	11b30 <alt_icache_flush>
#endif
}
   115e0:	dfc00017 	ldw	ra,0(sp)
   115e4:	dec00104 	addi	sp,sp,4
   115e8:	f800283a 	ret

000115ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   115ec:	defffe04 	addi	sp,sp,-8
   115f0:	dfc00115 	stw	ra,4(sp)
   115f4:	dc000015 	stw	r16,0(sp)
   115f8:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   115fc:	2809883a 	mov	r4,r5
   11600:	300b883a 	mov	r5,r6
   11604:	380d883a 	mov	r6,r7
   11608:	00117a40 	call	117a4 <open>
   1160c:	1009883a 	mov	r4,r2

  if (old >= 0)
   11610:	10000b16 	blt	r2,zero,11640 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   11614:	10c00324 	muli	r3,r2,12
   11618:	00800074 	movhi	r2,1
   1161c:	108c9104 	addi	r2,r2,12868
   11620:	1887883a 	add	r3,r3,r2
   11624:	18800017 	ldw	r2,0(r3)
   11628:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   1162c:	18800117 	ldw	r2,4(r3)
   11630:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11634:	18800217 	ldw	r2,8(r3)
   11638:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   1163c:	000fc500 	call	fc50 <alt_release_fd>
  }
} 
   11640:	dfc00117 	ldw	ra,4(sp)
   11644:	dc000017 	ldw	r16,0(sp)
   11648:	dec00204 	addi	sp,sp,8
   1164c:	f800283a 	ret

00011650 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11650:	defffa04 	addi	sp,sp,-24
   11654:	dfc00515 	stw	ra,20(sp)
   11658:	dd000415 	stw	r20,16(sp)
   1165c:	dcc00315 	stw	r19,12(sp)
   11660:	dc800215 	stw	r18,8(sp)
   11664:	dc400115 	stw	r17,4(sp)
   11668:	dc000015 	stw	r16,0(sp)
   1166c:	2005883a 	mov	r2,r4
   11670:	2827883a 	mov	r19,r5
   11674:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11678:	04000074 	movhi	r16,1
   1167c:	840c9404 	addi	r16,r16,12880
   11680:	04800044 	movi	r18,1
   11684:	04407fc4 	movi	r17,511
   11688:	8009883a 	mov	r4,r16
   1168c:	100b883a 	mov	r5,r2
   11690:	900d883a 	mov	r6,r18
   11694:	880f883a 	mov	r7,r17
   11698:	00115ec0 	call	115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1169c:	843ffd04 	addi	r16,r16,-12
   116a0:	8009883a 	mov	r4,r16
   116a4:	980b883a 	mov	r5,r19
   116a8:	000d883a 	mov	r6,zero
   116ac:	880f883a 	mov	r7,r17
   116b0:	00115ec0 	call	115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   116b4:	81000604 	addi	r4,r16,24
   116b8:	a00b883a 	mov	r5,r20
   116bc:	900d883a 	mov	r6,r18
   116c0:	880f883a 	mov	r7,r17
   116c4:	00115ec0 	call	115ec <alt_open_fd>
}  
   116c8:	dfc00517 	ldw	ra,20(sp)
   116cc:	dd000417 	ldw	r20,16(sp)
   116d0:	dcc00317 	ldw	r19,12(sp)
   116d4:	dc800217 	ldw	r18,8(sp)
   116d8:	dc400117 	ldw	r17,4(sp)
   116dc:	dc000017 	ldw	r16,0(sp)
   116e0:	dec00604 	addi	sp,sp,24
   116e4:	f800283a 	ret

000116e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   116e8:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   116ec:	008007c4 	movi	r2,31
   116f0:	1100022e 	bgeu	r2,r4,116fc <alt_irq_register+0x14>
   116f4:	00bffa84 	movi	r2,-22
   116f8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116fc:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11700:	013fff84 	movi	r4,-2
   11704:	4104703a 	and	r2,r8,r4
   11708:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   1170c:	380490fa 	slli	r2,r7,3
   11710:	00c00074 	movhi	r3,1
   11714:	18d8e704 	addi	r3,r3,25500
   11718:	10c5883a 	add	r2,r2,r3
   1171c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11720:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11724:	30000e26 	beq	r6,zero,11760 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11728:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1172c:	2904703a 	and	r2,r5,r4
   11730:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11734:	00c00074 	movhi	r3,1
   11738:	18d89a04 	addi	r3,r3,25192
   1173c:	19000017 	ldw	r4,0(r3)
   11740:	00800044 	movi	r2,1
   11744:	11c4983a 	sll	r2,r2,r7
   11748:	1104b03a 	or	r2,r2,r4
   1174c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11750:	18800017 	ldw	r2,0(r3)
   11754:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11758:	2801703a 	wrctl	status,r5
   1175c:	00000e06 	br	11798 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11760:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11764:	00bfff84 	movi	r2,-2
   11768:	2884703a 	and	r2,r5,r2
   1176c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11770:	00c00074 	movhi	r3,1
   11774:	18d89a04 	addi	r3,r3,25192
   11778:	19000017 	ldw	r4,0(r3)
   1177c:	00bfff84 	movi	r2,-2
   11780:	11c4183a 	rol	r2,r2,r7
   11784:	1104703a 	and	r2,r2,r4
   11788:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1178c:	18800017 	ldw	r2,0(r3)
   11790:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11794:	2801703a 	wrctl	status,r5
   11798:	4001703a 	wrctl	status,r8
   1179c:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
   117a0:	f800283a 	ret

000117a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   117a4:	defff904 	addi	sp,sp,-28
   117a8:	dfc00615 	stw	ra,24(sp)
   117ac:	dd400515 	stw	r21,20(sp)
   117b0:	dd000415 	stw	r20,16(sp)
   117b4:	dcc00315 	stw	r19,12(sp)
   117b8:	dc800215 	stw	r18,8(sp)
   117bc:	dc400115 	stw	r17,4(sp)
   117c0:	dc000015 	stw	r16,0(sp)
   117c4:	2029883a 	mov	r20,r4
   117c8:	2827883a 	mov	r19,r5
   117cc:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   117d0:	01400074 	movhi	r5,1
   117d4:	29517c04 	addi	r5,r5,17904
   117d8:	001155c0 	call	1155c <alt_find_dev>
   117dc:	1021883a 	mov	r16,r2
   117e0:	10000226 	beq	r2,zero,117ec <open+0x48>
   117e4:	0025883a 	mov	r18,zero
   117e8:	00000a06 	br	11814 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   117ec:	a009883a 	mov	r4,r20
   117f0:	0011a080 	call	11a08 <alt_find_file>
   117f4:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   117f8:	1000051e 	bne	r2,zero,11810 <open+0x6c>
   117fc:	047fffc4 	movi	r17,-1
   11800:	043ffb44 	movi	r16,-19
   11804:	00002b06 	br	118b4 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11808:	043ffcc4 	movi	r16,-13
   1180c:	00002906 	br	118b4 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11810:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   11814:	8009883a 	mov	r4,r16
   11818:	0011ac40 	call	11ac4 <alt_get_fd>
   1181c:	1023883a 	mov	r17,r2
   11820:	10003316 	blt	r2,zero,118f0 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   11824:	10800324 	muli	r2,r2,12
   11828:	02000074 	movhi	r8,1
   1182c:	420c9104 	addi	r8,r8,12868
   11830:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11834:	00900034 	movhi	r2,16384
   11838:	10bfffc4 	addi	r2,r2,-1
   1183c:	9886703a 	and	r3,r19,r2
   11840:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11844:	9004c03a 	cmpne	r2,r18,zero
   11848:	1000121e 	bne	r2,zero,11894 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1184c:	18900034 	orhi	r2,r3,16384
   11850:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11854:	00800074 	movhi	r2,1
   11858:	10917e04 	addi	r2,r2,17912
   1185c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11860:	21800017 	ldw	r6,0(r4)
   11864:	000b883a 	mov	r5,zero
   11868:	4007883a 	mov	r3,r8
   1186c:	02400044 	movi	r9,1
   11870:	02000304 	movi	r8,12
   11874:	18800017 	ldw	r2,0(r3)
   11878:	1180031e 	bne	r2,r6,11888 <open+0xe4>
   1187c:	18800217 	ldw	r2,8(r3)
   11880:	1000010e 	bge	r2,zero,11888 <open+0xe4>
   11884:	193fe01e 	bne	r3,r4,11808 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11888:	2a4b883a 	add	r5,r5,r9
   1188c:	1a07883a 	add	r3,r3,r8
   11890:	397ff82e 	bgeu	r7,r5,11874 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11894:	80800317 	ldw	r2,12(r16)
   11898:	10001726 	beq	r2,zero,118f8 <open+0x154>
   1189c:	a00b883a 	mov	r5,r20
   118a0:	980d883a 	mov	r6,r19
   118a4:	a80f883a 	mov	r7,r21
   118a8:	103ee83a 	callr	r2
   118ac:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   118b0:	1000110e 	bge	r2,zero,118f8 <open+0x154>
  {
    alt_release_fd (index);  
   118b4:	8809883a 	mov	r4,r17
   118b8:	000fc500 	call	fc50 <alt_release_fd>
   118bc:	00800074 	movhi	r2,1
   118c0:	10917f04 	addi	r2,r2,17916
   118c4:	10800017 	ldw	r2,0(r2)
   118c8:	1000031e 	bne	r2,zero,118d8 <open+0x134>
   118cc:	00c00074 	movhi	r3,1
   118d0:	18d89604 	addi	r3,r3,25176
   118d4:	00000206 	br	118e0 <open+0x13c>
   118d8:	103ee83a 	callr	r2
   118dc:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   118e0:	0405c83a 	sub	r2,zero,r16
   118e4:	18800015 	stw	r2,0(r3)
   118e8:	047fffc4 	movi	r17,-1
   118ec:	00000206 	br	118f8 <open+0x154>
   118f0:	1021883a 	mov	r16,r2
   118f4:	003fef06 	br	118b4 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   118f8:	8805883a 	mov	r2,r17
   118fc:	dfc00617 	ldw	ra,24(sp)
   11900:	dd400517 	ldw	r21,20(sp)
   11904:	dd000417 	ldw	r20,16(sp)
   11908:	dcc00317 	ldw	r19,12(sp)
   1190c:	dc800217 	ldw	r18,8(sp)
   11910:	dc400117 	ldw	r17,4(sp)
   11914:	dc000017 	ldw	r16,0(sp)
   11918:	dec00704 	addi	sp,sp,28
   1191c:	f800283a 	ret

00011920 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11920:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11924:	00bfff84 	movi	r2,-2
   11928:	2884703a 	and	r2,r5,r2
   1192c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11930:	20c00017 	ldw	r3,0(r4)
   11934:	20800117 	ldw	r2,4(r4)
   11938:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1193c:	20800117 	ldw	r2,4(r4)
   11940:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11944:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   11948:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1194c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   11950:	f800283a 	ret

00011954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11954:	defffd04 	addi	sp,sp,-12
   11958:	dfc00215 	stw	ra,8(sp)
   1195c:	dc400115 	stw	r17,4(sp)
   11960:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11964:	d4200f17 	ldw	r16,-32708(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11968:	d0a72917 	ldw	r2,-25436(gp)
   1196c:	10800044 	addi	r2,r2,1
   11970:	d0a72915 	stw	r2,-25436(gp)
   11974:	00001b06 	br	119e4 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   11978:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1197c:	80800403 	ldbu	r2,16(r16)
   11980:	10000326 	beq	r2,zero,11990 <alt_tick+0x3c>
   11984:	d0a72917 	ldw	r2,-25436(gp)
   11988:	1000011e 	bne	r2,zero,11990 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   1198c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11990:	d0e72917 	ldw	r3,-25436(gp)
   11994:	80800217 	ldw	r2,8(r16)
   11998:	18801136 	bltu	r3,r2,119e0 <alt_tick+0x8c>
   1199c:	80800403 	ldbu	r2,16(r16)
   119a0:	10000f1e 	bne	r2,zero,119e0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   119a4:	80800317 	ldw	r2,12(r16)
   119a8:	81000517 	ldw	r4,20(r16)
   119ac:	103ee83a 	callr	r2
   119b0:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   119b4:	1000031e 	bne	r2,zero,119c4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   119b8:	8009883a 	mov	r4,r16
   119bc:	00119200 	call	11920 <alt_alarm_stop>
   119c0:	00000706 	br	119e0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   119c4:	80800217 	ldw	r2,8(r16)
   119c8:	1885883a 	add	r2,r3,r2
   119cc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   119d0:	d0e72917 	ldw	r3,-25436(gp)
   119d4:	10c0022e 	bgeu	r2,r3,119e0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   119d8:	00800044 	movi	r2,1
   119dc:	80800405 	stb	r2,16(r16)
   119e0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   119e4:	d0a00f04 	addi	r2,gp,-32708
   119e8:	80bfe31e 	bne	r16,r2,11978 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   119ec:	dfc00217 	ldw	ra,8(sp)
   119f0:	dc400117 	ldw	r17,4(sp)
   119f4:	dc000017 	ldw	r16,0(sp)
   119f8:	dec00304 	addi	sp,sp,12
   119fc:	f800283a 	ret

00011a00 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11a00:	000170fa 	wrctl	ienable,zero
}
   11a04:	f800283a 	ret

00011a08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11a08:	defff904 	addi	sp,sp,-28
   11a0c:	dfc00615 	stw	ra,24(sp)
   11a10:	dd400515 	stw	r21,20(sp)
   11a14:	dd000415 	stw	r20,16(sp)
   11a18:	dcc00315 	stw	r19,12(sp)
   11a1c:	dc800215 	stw	r18,8(sp)
   11a20:	dc400115 	stw	r17,4(sp)
   11a24:	dc000015 	stw	r16,0(sp)
   11a28:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11a2c:	00800074 	movhi	r2,1
   11a30:	10917a04 	addi	r2,r2,17896
   11a34:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11a38:	102b883a 	mov	r21,r2
   11a3c:	88801626 	beq	r17,r2,11a98 <alt_find_file+0x90>
   11a40:	053fffc4 	movi	r20,-1
   11a44:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   11a48:	8c000217 	ldw	r16,8(r17)
   11a4c:	8009883a 	mov	r4,r16
   11a50:	0009e0c0 	call	9e0c <strlen>
   11a54:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   11a58:	8085883a 	add	r2,r16,r2
   11a5c:	1505883a 	add	r2,r2,r20
   11a60:	10800007 	ldb	r2,0(r2)
   11a64:	14c0011e 	bne	r2,r19,11a6c <alt_find_file+0x64>
    {
      len -= 1;
   11a68:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11a6c:	1c85883a 	add	r2,r3,r18
   11a70:	10800007 	ldb	r2,0(r2)
   11a74:	14c00126 	beq	r2,r19,11a7c <alt_find_file+0x74>
   11a78:	1000051e 	bne	r2,zero,11a90 <alt_find_file+0x88>
   11a7c:	8009883a 	mov	r4,r16
   11a80:	900b883a 	mov	r5,r18
   11a84:	180d883a 	mov	r6,r3
   11a88:	0011ba40 	call	11ba4 <memcmp>
   11a8c:	10000326 	beq	r2,zero,11a9c <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11a90:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11a94:	8d7fec1e 	bne	r17,r21,11a48 <alt_find_file+0x40>
   11a98:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   11a9c:	8805883a 	mov	r2,r17
   11aa0:	dfc00617 	ldw	ra,24(sp)
   11aa4:	dd400517 	ldw	r21,20(sp)
   11aa8:	dd000417 	ldw	r20,16(sp)
   11aac:	dcc00317 	ldw	r19,12(sp)
   11ab0:	dc800217 	ldw	r18,8(sp)
   11ab4:	dc400117 	ldw	r17,4(sp)
   11ab8:	dc000017 	ldw	r16,0(sp)
   11abc:	dec00704 	addi	sp,sp,28
   11ac0:	f800283a 	ret

00011ac4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11ac4:	000b883a 	mov	r5,zero
   11ac8:	00c00074 	movhi	r3,1
   11acc:	18cc9104 	addi	r3,r3,12868
   11ad0:	02000304 	movi	r8,12
   11ad4:	02400074 	movhi	r9,1
   11ad8:	4a517e04 	addi	r9,r9,17912
   11adc:	01c00044 	movi	r7,1
   11ae0:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   11ae4:	18800017 	ldw	r2,0(r3)
   11ae8:	10000c1e 	bne	r2,zero,11b1c <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   11aec:	2a05383a 	mul	r2,r5,r8
   11af0:	00c00074 	movhi	r3,1
   11af4:	18cc9104 	addi	r3,r3,12868
   11af8:	10c5883a 	add	r2,r2,r3
   11afc:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   11b00:	48800017 	ldw	r2,0(r9)
   11b04:	11400216 	blt	r2,r5,11b10 <alt_get_fd+0x4c>
   11b08:	2805883a 	mov	r2,r5
   11b0c:	f800283a 	ret
      {
        alt_max_fd = i;
   11b10:	49400015 	stw	r5,0(r9)
   11b14:	2805883a 	mov	r2,r5
   11b18:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11b1c:	29cb883a 	add	r5,r5,r7
   11b20:	1a07883a 	add	r3,r3,r8
   11b24:	29bfef1e 	bne	r5,r6,11ae4 <alt_get_fd+0x20>
   11b28:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   11b2c:	f800283a 	ret

00011b30 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   11b30:	2007883a 	mov	r3,r4
   11b34:	00840004 	movi	r2,4096
   11b38:	1140012e 	bgeu	r2,r5,11b40 <alt_icache_flush+0x10>
   11b3c:	100b883a 	mov	r5,r2
   11b40:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11b44:	1940042e 	bgeu	r3,r5,11b58 <alt_icache_flush+0x28>
   11b48:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11b4c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11b50:	1887883a 	add	r3,r3,r2
   11b54:	197ffd36 	bltu	r3,r5,11b4c <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11b58:	208007cc 	andi	r2,r4,31
   11b5c:	10000126 	beq	r2,zero,11b64 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11b60:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11b64:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11b68:	f800283a 	ret

00011b6c <exit>:
   11b6c:	defffe04 	addi	sp,sp,-8
   11b70:	000b883a 	mov	r5,zero
   11b74:	dc000015 	stw	r16,0(sp)
   11b78:	dfc00115 	stw	ra,4(sp)
   11b7c:	2021883a 	mov	r16,r4
   11b80:	0011f540 	call	11f54 <__call_exitprocs>
   11b84:	00800074 	movhi	r2,1
   11b88:	10917504 	addi	r2,r2,17876
   11b8c:	11000017 	ldw	r4,0(r2)
   11b90:	20800f17 	ldw	r2,60(r4)
   11b94:	10000126 	beq	r2,zero,11b9c <exit+0x30>
   11b98:	103ee83a 	callr	r2
   11b9c:	8009883a 	mov	r4,r16
   11ba0:	00121040 	call	12104 <_exit>

00011ba4 <memcmp>:
   11ba4:	00c000c4 	movi	r3,3
   11ba8:	1980032e 	bgeu	r3,r6,11bb8 <memcmp+0x14>
   11bac:	2144b03a 	or	r2,r4,r5
   11bb0:	10c4703a 	and	r2,r2,r3
   11bb4:	10000f26 	beq	r2,zero,11bf4 <memcmp+0x50>
   11bb8:	31ffffc4 	addi	r7,r6,-1
   11bbc:	3000061e 	bne	r6,zero,11bd8 <memcmp+0x34>
   11bc0:	00000a06 	br	11bec <memcmp+0x48>
   11bc4:	39ffffc4 	addi	r7,r7,-1
   11bc8:	00bfffc4 	movi	r2,-1
   11bcc:	21000044 	addi	r4,r4,1
   11bd0:	29400044 	addi	r5,r5,1
   11bd4:	38800526 	beq	r7,r2,11bec <memcmp+0x48>
   11bd8:	20c00003 	ldbu	r3,0(r4)
   11bdc:	28800003 	ldbu	r2,0(r5)
   11be0:	18bff826 	beq	r3,r2,11bc4 <memcmp+0x20>
   11be4:	1885c83a 	sub	r2,r3,r2
   11be8:	f800283a 	ret
   11bec:	0005883a 	mov	r2,zero
   11bf0:	f800283a 	ret
   11bf4:	180f883a 	mov	r7,r3
   11bf8:	20c00017 	ldw	r3,0(r4)
   11bfc:	28800017 	ldw	r2,0(r5)
   11c00:	18bfed1e 	bne	r3,r2,11bb8 <memcmp+0x14>
   11c04:	31bfff04 	addi	r6,r6,-4
   11c08:	21000104 	addi	r4,r4,4
   11c0c:	29400104 	addi	r5,r5,4
   11c10:	39bff936 	bltu	r7,r6,11bf8 <memcmp+0x54>
   11c14:	003fe806 	br	11bb8 <memcmp+0x14>

00011c18 <putc>:
   11c18:	defffc04 	addi	sp,sp,-16
   11c1c:	dc800215 	stw	r18,8(sp)
   11c20:	04800074 	movhi	r18,1
   11c24:	94917404 	addi	r18,r18,17872
   11c28:	90c00017 	ldw	r3,0(r18)
   11c2c:	dc400115 	stw	r17,4(sp)
   11c30:	dc000015 	stw	r16,0(sp)
   11c34:	dfc00315 	stw	ra,12(sp)
   11c38:	2023883a 	mov	r17,r4
   11c3c:	2821883a 	mov	r16,r5
   11c40:	18000226 	beq	r3,zero,11c4c <putc+0x34>
   11c44:	18800e17 	ldw	r2,56(r3)
   11c48:	10001126 	beq	r2,zero,11c90 <putc+0x78>
   11c4c:	80800217 	ldw	r2,8(r16)
   11c50:	10ffffc4 	addi	r3,r2,-1
   11c54:	80c00215 	stw	r3,8(r16)
   11c58:	18001316 	blt	r3,zero,11ca8 <putc+0x90>
   11c5c:	80800017 	ldw	r2,0(r16)
   11c60:	14400005 	stb	r17,0(r2)
   11c64:	80c00017 	ldw	r3,0(r16)
   11c68:	18800044 	addi	r2,r3,1
   11c6c:	18c00003 	ldbu	r3,0(r3)
   11c70:	80800015 	stw	r2,0(r16)
   11c74:	1805883a 	mov	r2,r3
   11c78:	dfc00317 	ldw	ra,12(sp)
   11c7c:	dc800217 	ldw	r18,8(sp)
   11c80:	dc400117 	ldw	r17,4(sp)
   11c84:	dc000017 	ldw	r16,0(sp)
   11c88:	dec00404 	addi	sp,sp,16
   11c8c:	f800283a 	ret
   11c90:	1809883a 	mov	r4,r3
   11c94:	00065100 	call	6510 <__sinit>
   11c98:	80800217 	ldw	r2,8(r16)
   11c9c:	10ffffc4 	addi	r3,r2,-1
   11ca0:	80c00215 	stw	r3,8(r16)
   11ca4:	183fed0e 	bge	r3,zero,11c5c <putc+0x44>
   11ca8:	80800617 	ldw	r2,24(r16)
   11cac:	18800f16 	blt	r3,r2,11cec <putc+0xd4>
   11cb0:	80800017 	ldw	r2,0(r16)
   11cb4:	14400005 	stb	r17,0(r2)
   11cb8:	81000017 	ldw	r4,0(r16)
   11cbc:	00800284 	movi	r2,10
   11cc0:	20c00003 	ldbu	r3,0(r4)
   11cc4:	18801226 	beq	r3,r2,11d10 <putc+0xf8>
   11cc8:	20800044 	addi	r2,r4,1
   11ccc:	80800015 	stw	r2,0(r16)
   11cd0:	1805883a 	mov	r2,r3
   11cd4:	dfc00317 	ldw	ra,12(sp)
   11cd8:	dc800217 	ldw	r18,8(sp)
   11cdc:	dc400117 	ldw	r17,4(sp)
   11ce0:	dc000017 	ldw	r16,0(sp)
   11ce4:	dec00404 	addi	sp,sp,16
   11ce8:	f800283a 	ret
   11cec:	91000017 	ldw	r4,0(r18)
   11cf0:	880b883a 	mov	r5,r17
   11cf4:	800d883a 	mov	r6,r16
   11cf8:	dfc00317 	ldw	ra,12(sp)
   11cfc:	dc800217 	ldw	r18,8(sp)
   11d00:	dc400117 	ldw	r17,4(sp)
   11d04:	dc000017 	ldw	r16,0(sp)
   11d08:	dec00404 	addi	sp,sp,16
   11d0c:	0011e041 	jmpi	11e04 <__swbuf_r>
   11d10:	91000017 	ldw	r4,0(r18)
   11d14:	180b883a 	mov	r5,r3
   11d18:	003ff606 	br	11cf4 <putc+0xdc>

00011d1c <_putc_r>:
   11d1c:	defffc04 	addi	sp,sp,-16
   11d20:	dc400215 	stw	r17,8(sp)
   11d24:	dc000115 	stw	r16,4(sp)
   11d28:	dfc00315 	stw	ra,12(sp)
   11d2c:	2021883a 	mov	r16,r4
   11d30:	2823883a 	mov	r17,r5
   11d34:	20000226 	beq	r4,zero,11d40 <_putc_r+0x24>
   11d38:	20800e17 	ldw	r2,56(r4)
   11d3c:	10001026 	beq	r2,zero,11d80 <_putc_r+0x64>
   11d40:	30800217 	ldw	r2,8(r6)
   11d44:	10ffffc4 	addi	r3,r2,-1
   11d48:	30c00215 	stw	r3,8(r6)
   11d4c:	18001316 	blt	r3,zero,11d9c <_putc_r+0x80>
   11d50:	30800017 	ldw	r2,0(r6)
   11d54:	14400005 	stb	r17,0(r2)
   11d58:	30c00017 	ldw	r3,0(r6)
   11d5c:	18800044 	addi	r2,r3,1
   11d60:	18c00003 	ldbu	r3,0(r3)
   11d64:	30800015 	stw	r2,0(r6)
   11d68:	1805883a 	mov	r2,r3
   11d6c:	dfc00317 	ldw	ra,12(sp)
   11d70:	dc400217 	ldw	r17,8(sp)
   11d74:	dc000117 	ldw	r16,4(sp)
   11d78:	dec00404 	addi	sp,sp,16
   11d7c:	f800283a 	ret
   11d80:	d9800015 	stw	r6,0(sp)
   11d84:	00065100 	call	6510 <__sinit>
   11d88:	d9800017 	ldw	r6,0(sp)
   11d8c:	30800217 	ldw	r2,8(r6)
   11d90:	10ffffc4 	addi	r3,r2,-1
   11d94:	30c00215 	stw	r3,8(r6)
   11d98:	183fed0e 	bge	r3,zero,11d50 <_putc_r+0x34>
   11d9c:	30800617 	ldw	r2,24(r6)
   11da0:	18800e16 	blt	r3,r2,11ddc <_putc_r+0xc0>
   11da4:	30800017 	ldw	r2,0(r6)
   11da8:	14400005 	stb	r17,0(r2)
   11dac:	31000017 	ldw	r4,0(r6)
   11db0:	00800284 	movi	r2,10
   11db4:	20c00003 	ldbu	r3,0(r4)
   11db8:	18800f26 	beq	r3,r2,11df8 <_putc_r+0xdc>
   11dbc:	20800044 	addi	r2,r4,1
   11dc0:	30800015 	stw	r2,0(r6)
   11dc4:	1805883a 	mov	r2,r3
   11dc8:	dfc00317 	ldw	ra,12(sp)
   11dcc:	dc400217 	ldw	r17,8(sp)
   11dd0:	dc000117 	ldw	r16,4(sp)
   11dd4:	dec00404 	addi	sp,sp,16
   11dd8:	f800283a 	ret
   11ddc:	8009883a 	mov	r4,r16
   11de0:	880b883a 	mov	r5,r17
   11de4:	dfc00317 	ldw	ra,12(sp)
   11de8:	dc400217 	ldw	r17,8(sp)
   11dec:	dc000117 	ldw	r16,4(sp)
   11df0:	dec00404 	addi	sp,sp,16
   11df4:	0011e041 	jmpi	11e04 <__swbuf_r>
   11df8:	8009883a 	mov	r4,r16
   11dfc:	180b883a 	mov	r5,r3
   11e00:	003ff806 	br	11de4 <_putc_r+0xc8>

00011e04 <__swbuf_r>:
   11e04:	defffc04 	addi	sp,sp,-16
   11e08:	dc400215 	stw	r17,8(sp)
   11e0c:	dc000115 	stw	r16,4(sp)
   11e10:	dfc00315 	stw	ra,12(sp)
   11e14:	2023883a 	mov	r17,r4
   11e18:	2821883a 	mov	r16,r5
   11e1c:	20000226 	beq	r4,zero,11e28 <__swbuf_r+0x24>
   11e20:	20800e17 	ldw	r2,56(r4)
   11e24:	10002f26 	beq	r2,zero,11ee4 <__swbuf_r+0xe0>
   11e28:	3080030b 	ldhu	r2,12(r6)
   11e2c:	30c00617 	ldw	r3,24(r6)
   11e30:	1080020c 	andi	r2,r2,8
   11e34:	30c00215 	stw	r3,8(r6)
   11e38:	10002226 	beq	r2,zero,11ec4 <__swbuf_r+0xc0>
   11e3c:	30c00417 	ldw	r3,16(r6)
   11e40:	18002026 	beq	r3,zero,11ec4 <__swbuf_r+0xc0>
   11e44:	31000017 	ldw	r4,0(r6)
   11e48:	30800517 	ldw	r2,20(r6)
   11e4c:	20c7c83a 	sub	r3,r4,r3
   11e50:	18802f0e 	bge	r3,r2,11f10 <__swbuf_r+0x10c>
   11e54:	19400044 	addi	r5,r3,1
   11e58:	30800217 	ldw	r2,8(r6)
   11e5c:	84003fcc 	andi	r16,r16,255
   11e60:	20c00044 	addi	r3,r4,1
   11e64:	10bfffc4 	addi	r2,r2,-1
   11e68:	30800215 	stw	r2,8(r6)
   11e6c:	24000005 	stb	r16,0(r4)
   11e70:	30800517 	ldw	r2,20(r6)
   11e74:	30c00015 	stw	r3,0(r6)
   11e78:	11400c26 	beq	r2,r5,11eac <__swbuf_r+0xa8>
   11e7c:	3080030b 	ldhu	r2,12(r6)
   11e80:	1080004c 	andi	r2,r2,1
   11e84:	1005003a 	cmpeq	r2,r2,zero
   11e88:	10000626 	beq	r2,zero,11ea4 <__swbuf_r+0xa0>
   11e8c:	8005883a 	mov	r2,r16
   11e90:	dfc00317 	ldw	ra,12(sp)
   11e94:	dc400217 	ldw	r17,8(sp)
   11e98:	dc000117 	ldw	r16,4(sp)
   11e9c:	dec00404 	addi	sp,sp,16
   11ea0:	f800283a 	ret
   11ea4:	00800284 	movi	r2,10
   11ea8:	80bff81e 	bne	r16,r2,11e8c <__swbuf_r+0x88>
   11eac:	8809883a 	mov	r4,r17
   11eb0:	300b883a 	mov	r5,r6
   11eb4:	00062780 	call	6278 <_fflush_r>
   11eb8:	103ff426 	beq	r2,zero,11e8c <__swbuf_r+0x88>
   11ebc:	043fffc4 	movi	r16,-1
   11ec0:	003ff206 	br	11e8c <__swbuf_r+0x88>
   11ec4:	300b883a 	mov	r5,r6
   11ec8:	8809883a 	mov	r4,r17
   11ecc:	d9800015 	stw	r6,0(sp)
   11ed0:	00049700 	call	4970 <__swsetup_r>
   11ed4:	d9800017 	ldw	r6,0(sp)
   11ed8:	1000061e 	bne	r2,zero,11ef4 <__swbuf_r+0xf0>
   11edc:	30c00417 	ldw	r3,16(r6)
   11ee0:	003fd806 	br	11e44 <__swbuf_r+0x40>
   11ee4:	d9800015 	stw	r6,0(sp)
   11ee8:	00065100 	call	6510 <__sinit>
   11eec:	d9800017 	ldw	r6,0(sp)
   11ef0:	003fcd06 	br	11e28 <__swbuf_r+0x24>
   11ef4:	3080030b 	ldhu	r2,12(r6)
   11ef8:	00c00244 	movi	r3,9
   11efc:	043fffc4 	movi	r16,-1
   11f00:	10801014 	ori	r2,r2,64
   11f04:	3080030d 	sth	r2,12(r6)
   11f08:	88c00015 	stw	r3,0(r17)
   11f0c:	003fdf06 	br	11e8c <__swbuf_r+0x88>
   11f10:	300b883a 	mov	r5,r6
   11f14:	8809883a 	mov	r4,r17
   11f18:	d9800015 	stw	r6,0(sp)
   11f1c:	00062780 	call	6278 <_fflush_r>
   11f20:	d9800017 	ldw	r6,0(sp)
   11f24:	103fe51e 	bne	r2,zero,11ebc <__swbuf_r+0xb8>
   11f28:	31000017 	ldw	r4,0(r6)
   11f2c:	01400044 	movi	r5,1
   11f30:	003fc906 	br	11e58 <__swbuf_r+0x54>

00011f34 <__swbuf>:
   11f34:	01800074 	movhi	r6,1
   11f38:	31917404 	addi	r6,r6,17872
   11f3c:	2007883a 	mov	r3,r4
   11f40:	31000017 	ldw	r4,0(r6)
   11f44:	280d883a 	mov	r6,r5
   11f48:	180b883a 	mov	r5,r3
   11f4c:	0011e041 	jmpi	11e04 <__swbuf_r>

00011f50 <register_fini>:
   11f50:	f800283a 	ret

00011f54 <__call_exitprocs>:
   11f54:	00800074 	movhi	r2,1
   11f58:	10917504 	addi	r2,r2,17876
   11f5c:	10800017 	ldw	r2,0(r2)
   11f60:	defff304 	addi	sp,sp,-52
   11f64:	df000b15 	stw	fp,44(sp)
   11f68:	d8800115 	stw	r2,4(sp)
   11f6c:	00800034 	movhi	r2,0
   11f70:	10800004 	addi	r2,r2,0
   11f74:	1005003a 	cmpeq	r2,r2,zero
   11f78:	d8800215 	stw	r2,8(sp)
   11f7c:	d8800117 	ldw	r2,4(sp)
   11f80:	dd400815 	stw	r21,32(sp)
   11f84:	dd000715 	stw	r20,28(sp)
   11f88:	10805204 	addi	r2,r2,328
   11f8c:	dfc00c15 	stw	ra,48(sp)
   11f90:	ddc00a15 	stw	r23,40(sp)
   11f94:	dd800915 	stw	r22,36(sp)
   11f98:	dcc00615 	stw	r19,24(sp)
   11f9c:	dc800515 	stw	r18,20(sp)
   11fa0:	dc400415 	stw	r17,16(sp)
   11fa4:	dc000315 	stw	r16,12(sp)
   11fa8:	282b883a 	mov	r21,r5
   11fac:	2039883a 	mov	fp,r4
   11fb0:	d8800015 	stw	r2,0(sp)
   11fb4:	2829003a 	cmpeq	r20,r5,zero
   11fb8:	d8800117 	ldw	r2,4(sp)
   11fbc:	14405217 	ldw	r17,328(r2)
   11fc0:	88001026 	beq	r17,zero,12004 <__call_exitprocs+0xb0>
   11fc4:	ddc00017 	ldw	r23,0(sp)
   11fc8:	88800117 	ldw	r2,4(r17)
   11fcc:	8c802204 	addi	r18,r17,136
   11fd0:	143fffc4 	addi	r16,r2,-1
   11fd4:	80000916 	blt	r16,zero,11ffc <__call_exitprocs+0xa8>
   11fd8:	05bfffc4 	movi	r22,-1
   11fdc:	a000151e 	bne	r20,zero,12034 <__call_exitprocs+0xe0>
   11fe0:	8409883a 	add	r4,r16,r16
   11fe4:	2105883a 	add	r2,r4,r4
   11fe8:	1485883a 	add	r2,r2,r18
   11fec:	10c02017 	ldw	r3,128(r2)
   11ff0:	a8c01126 	beq	r21,r3,12038 <__call_exitprocs+0xe4>
   11ff4:	843fffc4 	addi	r16,r16,-1
   11ff8:	85bff81e 	bne	r16,r22,11fdc <__call_exitprocs+0x88>
   11ffc:	d8800217 	ldw	r2,8(sp)
   12000:	10003126 	beq	r2,zero,120c8 <__call_exitprocs+0x174>
   12004:	dfc00c17 	ldw	ra,48(sp)
   12008:	df000b17 	ldw	fp,44(sp)
   1200c:	ddc00a17 	ldw	r23,40(sp)
   12010:	dd800917 	ldw	r22,36(sp)
   12014:	dd400817 	ldw	r21,32(sp)
   12018:	dd000717 	ldw	r20,28(sp)
   1201c:	dcc00617 	ldw	r19,24(sp)
   12020:	dc800517 	ldw	r18,20(sp)
   12024:	dc400417 	ldw	r17,16(sp)
   12028:	dc000317 	ldw	r16,12(sp)
   1202c:	dec00d04 	addi	sp,sp,52
   12030:	f800283a 	ret
   12034:	8409883a 	add	r4,r16,r16
   12038:	88c00117 	ldw	r3,4(r17)
   1203c:	2105883a 	add	r2,r4,r4
   12040:	1445883a 	add	r2,r2,r17
   12044:	18ffffc4 	addi	r3,r3,-1
   12048:	11800217 	ldw	r6,8(r2)
   1204c:	1c001526 	beq	r3,r16,120a4 <__call_exitprocs+0x150>
   12050:	10000215 	stw	zero,8(r2)
   12054:	303fe726 	beq	r6,zero,11ff4 <__call_exitprocs+0xa0>
   12058:	00c00044 	movi	r3,1
   1205c:	1c06983a 	sll	r3,r3,r16
   12060:	90804017 	ldw	r2,256(r18)
   12064:	8cc00117 	ldw	r19,4(r17)
   12068:	1884703a 	and	r2,r3,r2
   1206c:	10001426 	beq	r2,zero,120c0 <__call_exitprocs+0x16c>
   12070:	90804117 	ldw	r2,260(r18)
   12074:	1884703a 	and	r2,r3,r2
   12078:	10000c1e 	bne	r2,zero,120ac <__call_exitprocs+0x158>
   1207c:	2105883a 	add	r2,r4,r4
   12080:	1485883a 	add	r2,r2,r18
   12084:	11400017 	ldw	r5,0(r2)
   12088:	e009883a 	mov	r4,fp
   1208c:	303ee83a 	callr	r6
   12090:	88800117 	ldw	r2,4(r17)
   12094:	98bfc81e 	bne	r19,r2,11fb8 <__call_exitprocs+0x64>
   12098:	b8800017 	ldw	r2,0(r23)
   1209c:	147fd526 	beq	r2,r17,11ff4 <__call_exitprocs+0xa0>
   120a0:	003fc506 	br	11fb8 <__call_exitprocs+0x64>
   120a4:	8c000115 	stw	r16,4(r17)
   120a8:	003fea06 	br	12054 <__call_exitprocs+0x100>
   120ac:	2105883a 	add	r2,r4,r4
   120b0:	1485883a 	add	r2,r2,r18
   120b4:	11000017 	ldw	r4,0(r2)
   120b8:	303ee83a 	callr	r6
   120bc:	003ff406 	br	12090 <__call_exitprocs+0x13c>
   120c0:	303ee83a 	callr	r6
   120c4:	003ff206 	br	12090 <__call_exitprocs+0x13c>
   120c8:	88800117 	ldw	r2,4(r17)
   120cc:	1000081e 	bne	r2,zero,120f0 <__call_exitprocs+0x19c>
   120d0:	89000017 	ldw	r4,0(r17)
   120d4:	20000726 	beq	r4,zero,120f4 <__call_exitprocs+0x1a0>
   120d8:	b9000015 	stw	r4,0(r23)
   120dc:	8809883a 	mov	r4,r17
   120e0:	00000000 	call	0 <__reset>
   120e4:	bc400017 	ldw	r17,0(r23)
   120e8:	883fb71e 	bne	r17,zero,11fc8 <__call_exitprocs+0x74>
   120ec:	003fc506 	br	12004 <__call_exitprocs+0xb0>
   120f0:	89000017 	ldw	r4,0(r17)
   120f4:	882f883a 	mov	r23,r17
   120f8:	2023883a 	mov	r17,r4
   120fc:	883fb21e 	bne	r17,zero,11fc8 <__call_exitprocs+0x74>
   12100:	003fc006 	br	12004 <__call_exitprocs+0xb0>

00012104 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12104:	20000226 	beq	r4,zero,12110 <_exit+0xc>
    ALT_SIM_FAIL();
   12108:	002af070 	cmpltui	zero,zero,43969
   1210c:	00000106 	br	12114 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   12110:	002af0b0 	cmpltui	zero,zero,43970
   12114:	003fff06 	br	12114 <_exit+0x10>
   12118:	00000010 	cmplti	zero,zero,0
   1211c:	00000000 	call	0 <__reset>
   12120:	00527a01 	jmpi	527a0 <_gp+0x361d4>
   12124:	011f7c01 	jmpi	11f7c0 <_gp+0x1031f4>
   12128:	001b0c0b 	ldhu	zero,27696(zero)
   1212c:	00000028 	cmpgeui	zero,zero,0
   12130:	00000018 	cmpnei	zero,zero,0
   12134:	0000d39c 	xori	zero,zero,846
   12138:	000005dc 	xori	zero,zero,23
   1213c:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
   12140:	92099170 	cmpltui	r8,r18,9797
   12144:	95079308 	cmpgei	r20,r18,7756
   12148:	97049605 	stb	fp,4696(r18)
   1214c:	90019f03 	ldbu	zero,1660(r18)
   12150:	9c06940a 	0x9c06940a
   12154:	00000002 	0x2
   12158:	00000028 	cmpgeui	zero,zero,0
   1215c:	00000044 	movi	zero,1
   12160:	0000d978 	rdprs	zero,zero,869
   12164:	000005b0 	cmpltui	zero,zero,22
   12168:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
   1216c:	92099168 	cmpgeui	r8,r18,9797
   12170:	95079308 	cmpgei	r20,r18,7756
   12174:	9c039705 	stb	r16,3676(r19)
   12178:	90019f02 	0x90019f02
   1217c:	9606940a 	0x9606940a
   12180:	00000004 	movi	zero,0
   12184:	00011f50 	cmplti	zero,zero,1149
