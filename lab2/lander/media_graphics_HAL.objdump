
C:/ece5760/lab2/lander/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab2/lander/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000a58c memsz 0x0000a58c flags r-x
    LOAD off    0x0000b5ac vaddr 0x0000a5ac paddr 0x0001490c align 2**12
         filesz 0x0000a360 memsz 0x0000a360 flags rw-
    LOAD off    0x00015c6c vaddr 0x0001ec6c paddr 0x0001ec6c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009f0c  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000538  0000a074  0000a074  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000a360  0000a5ac  0001490c  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0001ec6c  0001ec6c  00015c6c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001590c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00015930  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a73  00000000  00000000  00016708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001e692  00000000  00000000  0001817b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000885b  00000000  00000000  0003680d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000125e8  00000000  00000000  0003f068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001970  00000000  00000000  00051650  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000033b5  00000000  00000000  00052fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008635  00000000  00000000  00056375  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005e9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000580  00000000  00000000  0005e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062728  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006272b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006272e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006272f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00062733  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00062737  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0006273b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00062744  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006274d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00062756  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f17  00000000  00000000  00062761  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000a074 l    d  .rodata	00000000 .rodata
0000a5ac l    d  .rwdata	00000000 .rwdata
0001ec6c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0000a1f8 l     O .rodata	00000108 two_over_pi
0000a178 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0000a300 l     O .rodata	00000010 init_jk
0000a310 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
000039f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000046d0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012bbc l     O .rwdata	00001060 JTAG_UART
00013c1c l     O .rwdata	00000030 AV_Config
00013c4c l     O .rwdata	00000030 Audio
00013c7c l     O .rwdata	0000002c Char_LCD_16x2
00013ca8 l     O .rwdata	0000002c Expansion_JP1
00013cd4 l     O .rwdata	0000002c Expansion_JP2
00013d00 l     O .rwdata	0000002c Green_LEDs
00013d2c l     O .rwdata	0000002c HEX3_HEX0
00013d58 l     O .rwdata	0000002c HEX7_HEX4
00013d84 l     O .rwdata	0000002c Pushbuttons
00013db0 l     O .rwdata	0000002c Red_LEDs
00013ddc l     O .rwdata	0000002c Slider_Switches
00013e08 l     O .rwdata	00000038 PS2_Port
00013e40 l     O .rwdata	0000002c Serial_Port
00013e6c l     O .rwdata	00000048 VGA_Char_Buffer
00013eb4 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000057f8 l     F .text	00000054 altera_avalon_jtag_uart_timeout
000058c4 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005d94 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00007374 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000747c l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000140b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00008110 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000084f4 l     F .text	00000058 std
00008600 l     F .text	00000008 __fp_lock
00008608 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014908 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00009b1c g     F .text	00000070 _isatty_r
00005208 g     F .text	00000050 alt_main
000069f8 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
0001ecc0 g     O .bss	00000100 alt_irq
00006430 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00002fa8 g     F .text	00000018 fabs
00009b8c g     F .text	00000078 _lseek_r
0001490c g       *ABS*	00000000 __flash_rwdata_start
00005e94 g     F .text	00000010 alt_up_character_lcd_send_cmd
000042bc g     F .text	00000088 __eqdf2
0001edc0 g       *ABS*	00000000 __alt_heap_start
000003ac g     F .text	000000b0 draw_landscape
00009758 g     F .text	00000068 __sseek
0000855c g     F .text	000000a4 __sinit
00007e88 g     F .text	00000130 __swbuf_r
00006638 g     F .text	00000088 alt_up_char_buffer_string
000060f0 g     F .text	0000000c read_CE_bit
0000865c g     F .text	00000068 __sfmoreglue
00009e30 g     F .text	00000004 __malloc_unlock
000061c0 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
000064dc g     F .text	00000080 alt_up_rs232_read_fd
000033e8 g     F .text	00000174 __divsf3
000066c0 g     F .text	00000058 alt_up_char_buffer_draw
0000864c g     F .text	00000010 _cleanup
0000384c g     F .text	00000094 __fixsfsi
000070ec g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00004344 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00005dd0 g     F .text	0000001c get_DDRAM_addr
000071e0 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009aa8 g     F .text	00000074 _fstat_r
0001ec88 g     O .bss	00000004 errno
00004624 g     F .text	00000038 __make_dp
00002fc0 g     F .text	00000224 floor
00004c04 g     F .text	0000002c __make_fp
0001ec74 g     O .bss	00000004 alt_argv
0001c8b8 g       *ABS*	00000000 _gp
000071b8 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00013f30 g     O .rwdata	00000180 alt_fd_list
000010c0 g     F .text	00000828 __ieee754_rem_pio2
000073ec g     F .text	00000070 alt_find_dev
00007acc g     F .text	000000a0 memcpy
00005e64 g     F .text	00000020 alt_up_character_lcd_write_fd
00006718 g     F .text	00000028 alt_up_char_buffer_clear
00008640 g     F .text	0000000c _cleanup_r
00004454 g     F .text	000000f8 __floatsidf
000074e0 g     F .text	00000098 alt_io_redirect
00006490 g     F .text	0000004c alt_up_rs232_read_data
000078b4 g     F .text	00000008 altera_nios2_irq_init
000071a8 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00005a6c g     F .text	00000168 altera_avalon_jtag_uart_read
0000480c g     F .text	00000008 __udivsi3
00009d10 g     F .text	00000084 isatty
00006b8c g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
000018e8 g     F .text	0000052c __kernel_cos
0000373c g     F .text	00000078 __lesf2
000079e4 g     F .text	0000003c alt_icache_flush
0001ec8c g     O .bss	00000004 __malloc_top_pad
000148cc g     O .rwdata	00000004 y_land_2
000096e0 g     F .text	00000070 _sbrk_r
000067b0 g     F .text	0000005c helper_plot_pixel
00009c04 g     F .text	00000078 _read_r
000148e4 g     O .rwdata	00000004 alt_max_fd
00006464 g     F .text	0000000c alt_up_rs232_check_parity
00004f44 g     F .text	00000138 __unpack_d
00009984 g     F .text	00000110 _fclose_r
000060fc g     F .text	00000008 read_num_bytes_available
000084c0 g     F .text	00000034 fflush
0001ec90 g     O .bss	00000004 __malloc_max_sbrked_mem
00007578 g     F .text	000000bc alt_irq_register
000060dc g     F .text	0000000c read_RI_bit
00002c90 g     F .text	00000318 __kernel_sin
000038e0 g     F .text	00000054 __extendsfdf2
00003e84 g     F .text	00000074 __adddf3
000127c0 g     O .rwdata	00000384 explode
00007014 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00009d94 g     F .text	00000098 lseek
000001a4 g     F .text	00000008 groundCollision
000148fc g     O .rwdata	00000004 _global_impure_ptr
0001edc0 g       *ABS*	00000000 __bss_end
00006dd0 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00007808 g     F .text	000000ac alt_tick
0000028c g     F .text	00000120 draw_sprite
00006110 g     F .text	00000008 read_data_byte
00008628 g     F .text	00000018 __fp_lock_all
000077d4 g     F .text	00000034 alt_alarm_stop
000060e8 g     F .text	00000008 read_RE_bit
0001ec7c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00013f08 g     O .rwdata	00000028 alt_dev_null
00001e14 g     F .text	00000e7c __kernel_rem_pio2
00004a94 g     F .text	000000c8 __unpack_f
00005ea4 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
000062c4 g     F .text	00000040 alt_up_ps2_write_data_byte
00007370 g     F .text	00000004 alt_dcache_flush_all
00006d00 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000454c g     F .text	000000d8 __fixdfsi
0001490c g       *ABS*	00000000 __ram_rwdata_end
000148dc g     O .rwdata	00000008 alt_dev_list
00009f7c g     F .text	000000f4 write
00007c70 g     F .text	000000e8 _putc_r
0000680c g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
000035d4 g     F .text	00000078 __gtsf2
0000a5ac g       *ABS*	00000000 __ram_rodata_end
00009c90 g     F .text	00000080 fstat
00006584 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000001ac g     F .text	000000e0 draw_fuel_guage
00004814 g     F .text	00000008 __umodsi3
00012b44 g     O .rwdata	00000028 you_died
000148b8 g     O .rwdata	00000004 x_land_1
0001edc0 g       *ABS*	00000000 end
00006304 g     F .text	00000070 alt_up_ps2_write_fd
00004934 g     F .text	00000160 __pack_f
00006760 g     F .text	00000050 alt_up_char_buffer_init
0000584c g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
00005d50 g     F .text	00000044 alt_avalon_timer_sc_init
000048b4 g     F .text	00000080 __clzsi2
00005bd4 g     F .text	0000017c altera_avalon_jtag_uart_write
00000dec g     F .text	00000168 cos
0000854c g     F .text	00000004 __sfp_lock_acquire
00005e38 g     F .text	0000002c alt_up_character_lcd_write
000088e0 g     F .text	00000314 _free_r
00005258 g     F .text	000001dc alt_printf
00008114 g     F .text	000001b0 __call_exitprocs
00014904 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
0001ec80 g     O .bss	00000004 _alt_tick_rate
00000f54 g     F .text	0000016c sin
0000a5ac g     O .rwdata	00008214 landers
0001ec84 g     O .bss	00000004 _alt_nticks
00009e34 g     F .text	000000f8 read
0000547c g     F .text	000002ac alt_sys_init
00005f48 g     F .text	00000090 alt_up_character_lcd_shift_display
000037b4 g     F .text	00000098 __floatsisf
00006138 g     F .text	00000030 alt_up_ps2_clear_fifo
0000655c g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00005edc g     F .text	0000006c alt_up_character_lcd_erase_pos
000057c0 g     F .text	00000038 altera_avalon_jtag_uart_close
0000a5ac g       *ABS*	00000000 __ram_rwdata_start
0000a074 g       *ABS*	00000000 __ram_rodata_start
0001ec98 g     O .bss	00000028 __malloc_current_mallinfo
0000355c g     F .text	00000078 __eqsf2
00005798 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00007978 g     F .text	0000006c alt_get_fd
0000507c g     F .text	000000c8 __fpcmp_parts_d
00009914 g     F .text	00000070 _close_r
00007a58 g     F .text	00000074 memcmp
00005748 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0001ec6c g     O .bss	00000004 x_land_0
0001edc0 g       *ABS*	00000000 __alt_stack_base
00005728 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00007fd4 g     F .text	0000013c __swsetup_r
000086c4 g     F .text	000000f0 __sfp
00012b94 g     O .rwdata	00000028 no_fuel
000144b0 g     O .rwdata	00000408 __malloc_av_
00008558 g     F .text	00000004 __sinit_lock_release
00003ef8 g     F .text	000003c4 __muldf3
0000983c g     F .text	00000060 __sread
0000a350 g     O .rodata	00000010 __thenan_sf
000065f4 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000078bc g     F .text	000000bc alt_find_file
0000737c g     F .text	00000070 alt_dev_llist_insert
00009e2c g     F .text	00000004 __malloc_lock
00009f2c g     F .text	00000050 sbrk
000082c4 g     F .text	000001fc _fflush_r
0001ec6c g       *ABS*	00000000 __bss_start
00009648 g     F .text	00000098 memset
0000045c g     F .text	00000990 main
0001ec78 g     O .bss	00000004 alt_envp
0001ec94 g     O .bss	00000004 __malloc_max_total_mem
000070c8 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00006740 g     F .text	00000020 alt_up_char_buffer_open_dev
00005770 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00007fb8 g     F .text	0000001c __swbuf
000036c4 g     F .text	00000078 __ltsf2
00005fd8 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00009750 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009a94 g     F .text	00000014 fclose
00006168 g     F .text	00000058 alt_up_ps2_read_data_byte
0000465c g     F .text	00000074 __truncdfsf2
00008f08 g     F .text	00000740 _malloc_r
000148e8 g     O .rwdata	00000004 alt_errno
00008cbc g     F .text	000000b8 _fwalk
00006118 g     F .text	00000020 alt_up_ps2_open_dev
00007b6c g     F .text	00000104 putc
0000474c g     F .text	00000060 __divsi3
0000a360 g     O .rodata	00000014 __thenan_df
000060bc g     F .text	00000020 alt_up_character_lcd_open_dev
000087b4 g     F .text	0000012c _malloc_trim_r
0000644c g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00005e84 g     F .text	00000010 alt_up_character_lcd_init
000148d0 g     O .rwdata	00000004 y_land_f
00007d58 g     F .text	000000bc strcmp
0000a074 g       *ABS*	00000000 __flash_rodata_start
00006470 g     F .text	00000020 alt_up_rs232_open_dev
000033c4 g     F .text	00000024 copysign
0000545c g     F .text	00000020 alt_irq_init
000077b0 g     F .text	00000024 alt_release_fd
00006104 g     F .text	0000000c read_data_valid
00005ec0 g     F .text	0000001c alt_up_character_lcd_cursor_off
0000a374 g     O .rodata	00000100 __clz_tab
00006374 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
0000364c g     F .text	00000078 __gesf2
0000989c g     F .text	00000078 _write_r
000148f8 g     O .rwdata	00000004 _impure_ptr
0001ec70 g     O .bss	00000004 alt_argc
000031e4 g     F .text	000001e0 scalbn
00012b6c g     O .rwdata	00000028 you_won
00000020 g       .exceptions	00000000 alt_irq_entry
00008610 g     F .text	00000018 __fp_unlock_all
000148d4 g     O .rwdata	00000008 alt_fs_list
00006610 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000656c g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000148bc g     O .rwdata	00000004 x_land_2
0001490c g       *ABS*	00000000 _edata
0001edc0 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000059f8 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000097c0 g     F .text	0000007c __swrite
00014900 g     O .rwdata	00000004 __malloc_trim_threshold
00007a20 g     F .text	00000038 exit
00008bf4 g     F .text	000000c8 _fwalk_reent
00003934 g     F .text	000000c0 __floatunsisf
000063a8 g     F .text	00000088 alt_up_ps2_init
000148c0 g     O .rwdata	00000004 x_land_3
000047ac g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008550 g     F .text	00000004 __sfp_lock_release
00005dec g     F .text	0000004c alt_up_character_lcd_string
00004b5c g     F .text	000000a8 __fpcmp_parts_f
00009c7c g     F .text	00000014 _exit
00007200 g     F .text	00000094 alt_alarm_start
0000481c g     F .text	00000098 __muldi3
00008d74 g     F .text	00000194 __smakebuf_r
00006268 g     F .text	0000005c alt_up_ps2_wait_for_ack
00007e14 g     F .text	00000074 strlen
00007634 g     F .text	0000017c open
000148c4 g     O .rwdata	00000004 x_land_f
000043cc g     F .text	00000088 __gedf2
00005434 g     F .text	00000028 alt_putchar
000148c8 g     O .rwdata	00000004 y_land_1
0000745c g     F .text	00000020 alt_icache_flush_all
00006068 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
000148ec g     O .rwdata	00000004 alt_priority_mask
00006240 g     F .text	00000028 alt_up_ps2_read_fd
00003e04 g     F .text	00000080 __subdf3
000148f0 g     O .rwdata	00000008 alt_alarm_list
00006628 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00007294 g     F .text	000000dc close
00005144 g     F .text	000000c4 alt_load
00004c30 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00008554 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	040000b4 	movhi	r16,2
 100:	843b3004 	addi	r16,r16,-4928
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6b22e14 	ori	gp,gp,51384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	10bb1b14 	ori	r2,r2,60524

    movhi r3, %hi(__bss_end)
     180:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     184:	18fb7014 	ori	r3,r3,60864

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00051440 	call	5144 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00052080 	call	5208 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <groundCollision>:

int groundCollision(unsigned int x, unsigned int y) {
	if (1) {
		return 0;
	}
}
     1a4:	0005883a 	mov	r2,zero
     1a8:	f800283a 	ret

000001ac <draw_fuel_guage>:
			}
		}
	}
}

void draw_fuel_guage(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, float fuel) {
     1ac:	defff904 	addi	sp,sp,-28
     1b0:	dfc00615 	stw	ra,24(sp)
     1b4:	dc800515 	stw	r18,20(sp)
     1b8:	dc400415 	stw	r17,16(sp)
     1bc:	dc000315 	stw	r16,12(sp)
     1c0:	2025883a 	mov	r18,r4
     1c4:	2821883a 	mov	r16,r5
	//Draw the surrounding rectangle
	alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, 20, 20, 124, 34, 0xFFFF, 0);
     1c8:	01800504 	movi	r6,20
     1cc:	00800884 	movi	r2,34
     1d0:	d8800015 	stw	r2,0(sp)
     1d4:	00bfffd4 	movui	r2,65535
     1d8:	d8800115 	stw	r2,4(sp)
     1dc:	d8000215 	stw	zero,8(sp)
     1e0:	300b883a 	mov	r5,r6
     1e4:	01c01f04 	movi	r7,124
     1e8:	0006d000 	call	6d00 <alt_up_pixel_buffer_dma_draw_rectangle>
	//Draw the empty fuel guage
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 22+(int)(fuel), 22, 122, 32, 0x0000, 0);
     1ec:	8009883a 	mov	r4,r16
     1f0:	000384c0 	call	384c <__fixsfsi>
     1f4:	01800584 	movi	r6,22
     1f8:	11a3883a 	add	r17,r2,r6
     1fc:	00800804 	movi	r2,32
     200:	d8800015 	stw	r2,0(sp)
     204:	d8000115 	stw	zero,4(sp)
     208:	d8000215 	stw	zero,8(sp)
     20c:	9009883a 	mov	r4,r18
     210:	880b883a 	mov	r5,r17
     214:	01c01e84 	movi	r7,122
     218:	0006dd00 	call	6dd0 <alt_up_pixel_buffer_dma_draw_box>
	
	int color = 0x0000;
	if (fuel > 66.0)
     21c:	8009883a 	mov	r4,r16
     220:	0150a134 	movhi	r5,17028
     224:	00035d40 	call	35d4 <__gtsf2>
     228:	0080020e 	bge	zero,r2,234 <draw_fuel_guage+0x88>
     22c:	00c70704 	movi	r3,7196
     230:	00000706 	br	250 <draw_fuel_guage+0xa4>
		color = 0x1c1c; 
	else if (fuel > 33.0)
     234:	8009883a 	mov	r4,r16
     238:	01508134 	movhi	r5,16900
     23c:	00035d40 	call	35d4 <__gtsf2>
     240:	0080020e 	bge	zero,r2,24c <draw_fuel_guage+0xa0>
     244:	00ff3f14 	movui	r3,64764
     248:	00000106 	br	250 <draw_fuel_guage+0xa4>
     24c:	00f83814 	movui	r3,57568
		color = 0xfcfc;
	else
		color = 0xe0e0;
		
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 22, 22, 22+(int)fuel, 32, color, 0);
     250:	01800584 	movi	r6,22
     254:	00800804 	movi	r2,32
     258:	d8800015 	stw	r2,0(sp)
     25c:	d8c00115 	stw	r3,4(sp)
     260:	d8000215 	stw	zero,8(sp)
     264:	9009883a 	mov	r4,r18
     268:	300b883a 	mov	r5,r6
     26c:	880f883a 	mov	r7,r17
     270:	0006dd00 	call	6dd0 <alt_up_pixel_buffer_dma_draw_box>

}
     274:	dfc00617 	ldw	ra,24(sp)
     278:	dc800517 	ldw	r18,20(sp)
     27c:	dc400417 	ldw	r17,16(sp)
     280:	dc000317 	ldw	r16,12(sp)
     284:	dec00704 	addi	sp,sp,28
     288:	f800283a 	ret

0000028c <draw_sprite>:
		return 0;
	}
}


void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting, int stillAlive) {
     28c:	defff504 	addi	sp,sp,-44
     290:	dfc00a15 	stw	ra,40(sp)
     294:	df000915 	stw	fp,36(sp)
     298:	ddc00815 	stw	r23,32(sp)
     29c:	dd800715 	stw	r22,28(sp)
     2a0:	dd400615 	stw	r21,24(sp)
     2a4:	dd000515 	stw	r20,20(sp)
     2a8:	dcc00415 	stw	r19,16(sp)
     2ac:	dc800315 	stw	r18,12(sp)
     2b0:	dc400215 	stw	r17,8(sp)
     2b4:	dc000115 	stw	r16,4(sp)
     2b8:	202f883a 	mov	r23,r4
     2bc:	282d883a 	mov	r22,r5
     2c0:	302b883a 	mov	r21,r6
     2c4:	d9c00015 	stw	r7,0(sp)
     2c8:	df000b17 	ldw	fp,44(sp)
     2cc:	dd000c17 	ldw	r20,48(sp)
     2d0:	0027883a 	mov	r19,zero
     2d4:	00001d06 	br	34c <draw_sprite+0xc0>
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
		for(j = 0; j < 30; j++) {
			char color = landers[theta][i][j];
     2d8:	89400003 	ldbu	r5,0(r17)
			if(!stillAlive){
     2dc:	a000011e 	bne	r20,zero,2e4 <draw_sprite+0x58>
				color = explode[i][j];
     2e0:	91400003 	ldbu	r5,0(r18)
			}
			//char color = landers[theta][i][j];
			if (color) {
     2e4:	28c03fcc 	andi	r3,r5,255
     2e8:	18c0201c 	xori	r3,r3,128
     2ec:	18ffe004 	addi	r3,r3,-128
     2f0:	18000e26 	beq	r3,zero,32c <draw_sprite+0xa0>
				if ((!thrusting) && (color > (char)0) && (color < (char)5))
     2f4:	e000041e 	bne	fp,zero,308 <draw_sprite+0x7c>
     2f8:	00c0030e 	bge	zero,r3,308 <draw_sprite+0x7c>
     2fc:	00800104 	movi	r2,4
     300:	10c00116 	blt	r2,r3,308 <draw_sprite+0x7c>
     304:	000b883a 	mov	r5,zero
				{
					color = 0;
				}
				alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, (int)((color << 8) + color), x+j, y+i );
     308:	29403fcc 	andi	r5,r5,255
     30c:	2940201c 	xori	r5,r5,128
     310:	297fe004 	addi	r5,r5,-128
     314:	2804923a 	slli	r2,r5,8
     318:	b809883a 	mov	r4,r23
     31c:	288b883a 	add	r5,r5,r2
     320:	b40d883a 	add	r6,r22,r16
     324:	accf883a 	add	r7,r21,r19
     328:	00070ec0 	call	70ec <alt_up_pixel_buffer_dma_draw>

void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting, int stillAlive) {
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
		for(j = 0; j < 30; j++) {
     32c:	00c00044 	movi	r3,1
     330:	80e1883a 	add	r16,r16,r3
     334:	88e3883a 	add	r17,r17,r3
     338:	90e5883a 	add	r18,r18,r3
     33c:	00800784 	movi	r2,30
     340:	80bfe51e 	bne	r16,r2,2d8 <draw_sprite+0x4c>


void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting, int stillAlive) {
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
     344:	98e7883a 	add	r19,r19,r3
     348:	9c000c26 	beq	r19,r16,37c <draw_sprite+0xf0>
				}
				alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, (int)((color << 8) + color), x+j, y+i );
			}
		}
	}
}
     34c:	990007a4 	muli	r4,r19,30
     350:	d8c00017 	ldw	r3,0(sp)
     354:	1880e124 	muli	r2,r3,900
     358:	2085883a 	add	r2,r4,r2
     35c:	00c00074 	movhi	r3,1
     360:	18e96b04 	addi	r3,r3,-23124
     364:	10e3883a 	add	r17,r2,r3
     368:	00800074 	movhi	r2,1
     36c:	1089f004 	addi	r2,r2,10176
     370:	20a5883a 	add	r18,r4,r2
     374:	0021883a 	mov	r16,zero
     378:	003fd706 	br	2d8 <draw_sprite+0x4c>
     37c:	dfc00a17 	ldw	ra,40(sp)
     380:	df000917 	ldw	fp,36(sp)
     384:	ddc00817 	ldw	r23,32(sp)
     388:	dd800717 	ldw	r22,28(sp)
     38c:	dd400617 	ldw	r21,24(sp)
     390:	dd000517 	ldw	r20,20(sp)
     394:	dcc00417 	ldw	r19,16(sp)
     398:	dc800317 	ldw	r18,12(sp)
     39c:	dc400217 	ldw	r17,8(sp)
     3a0:	dc000117 	ldw	r16,4(sp)
     3a4:	dec00b04 	addi	sp,sp,44
     3a8:	f800283a 	ret

000003ac <draw_landscape>:
		}
	}
}

/* draws a landscape */
void draw_landscape(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev ){
     3ac:	defffa04 	addi	sp,sp,-24
     3b0:	dfc00515 	stw	ra,20(sp)
     3b4:	dc400415 	stw	r17,16(sp)
     3b8:	dc000315 	stw	r16,12(sp)
     3bc:	2023883a 	mov	r17,r4
	//Line segment 1: (x_land_0, y_land_2) <-> (x_land_1, y_land_2)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x_land_0, y_land_2, x_land_1, y_land_2, 0xffff, 0);
     3c0:	d1a00517 	ldw	r6,-32748(gp)
     3c4:	d148ed17 	ldw	r5,9140(gp)
     3c8:	d1e00017 	ldw	r7,-32768(gp)
     3cc:	d9800015 	stw	r6,0(sp)
     3d0:	043fffd4 	movui	r16,65535
     3d4:	dc000115 	stw	r16,4(sp)
     3d8:	d8000215 	stw	zero,8(sp)
     3dc:	000680c0 	call	680c <alt_up_pixel_buffer_dma_draw_line>
	
	//Line segment 2: (x_land_1, y_land_2) <-> (x_land_2, y_land_1)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x_land_1, y_land_2, x_land_2, y_land_1, 0xffff, 0);
     3e0:	d1600017 	ldw	r5,-32768(gp)
     3e4:	d1a00517 	ldw	r6,-32748(gp)
     3e8:	d1e00117 	ldw	r7,-32764(gp)
     3ec:	d0a00417 	ldw	r2,-32752(gp)
     3f0:	d8800015 	stw	r2,0(sp)
     3f4:	dc000115 	stw	r16,4(sp)
     3f8:	d8000215 	stw	zero,8(sp)
     3fc:	8809883a 	mov	r4,r17
     400:	000680c0 	call	680c <alt_up_pixel_buffer_dma_draw_line>
	
	//Line segment 3: (x_land_2, y_land_1) <-> (x_land_3, y_land_1)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x_land_2, y_land_1, x_land_3, y_land_1, 0xffff, 0);
     404:	d1a00417 	ldw	r6,-32752(gp)
     408:	d1600117 	ldw	r5,-32764(gp)
     40c:	d1e00217 	ldw	r7,-32760(gp)
     410:	d9800015 	stw	r6,0(sp)
     414:	dc000115 	stw	r16,4(sp)
     418:	d8000215 	stw	zero,8(sp)
     41c:	8809883a 	mov	r4,r17
     420:	000680c0 	call	680c <alt_up_pixel_buffer_dma_draw_line>
	
	//Line Segment 4: (x_land_3, y_land_1) <-> (x_land_f, y_land_f)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x_land_3, y_land_1, x_land_f, y_land_f, 0xffff, 0);
     424:	d1600217 	ldw	r5,-32760(gp)
     428:	d1a00417 	ldw	r6,-32752(gp)
     42c:	d1e00317 	ldw	r7,-32756(gp)
     430:	d0a00617 	ldw	r2,-32744(gp)
     434:	d8800015 	stw	r2,0(sp)
     438:	dc000115 	stw	r16,4(sp)
     43c:	d8000215 	stw	zero,8(sp)
     440:	8809883a 	mov	r4,r17
     444:	000680c0 	call	680c <alt_up_pixel_buffer_dma_draw_line>

}
     448:	dfc00517 	ldw	ra,20(sp)
     44c:	dc400417 	ldw	r17,16(sp)
     450:	dc000317 	ldw	r16,12(sp)
     454:	dec00604 	addi	sp,sp,24
     458:	f800283a 	ret

0000045c <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     45c:	deffd804 	addi	sp,sp,-160
     460:	dfc02715 	stw	ra,156(sp)
     464:	df002615 	stw	fp,152(sp)
     468:	ddc02515 	stw	r23,148(sp)
     46c:	dd802415 	stw	r22,144(sp)
     470:	dd402315 	stw	r21,140(sp)
     474:	dd002215 	stw	r20,136(sp)
     478:	dcc02115 	stw	r19,132(sp)
     47c:	dc802015 	stw	r18,128(sp)
     480:	dc401f15 	stw	r17,124(sp)
     484:	dc001e15 	stw	r16,120(sp)
	int flat_area_2 = 0;
	
	char hasFuel = 1;

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     488:	01000074 	movhi	r4,1
     48c:	21281d04 	addi	r4,r4,-24460
     490:	00071e00 	call	71e0 <alt_up_pixel_buffer_dma_open_dev>
     494:	102d883a 	mov	r22,r2
	if ( pixel_buffer_dev == NULL)
     498:	1000041e 	bne	r2,zero,4ac <main+0x50>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     49c:	01000074 	movhi	r4,1
     4a0:	21282304 	addi	r4,r4,-24436
     4a4:	00052580 	call	5258 <alt_printf>
     4a8:	00000306 	br	4b8 <main+0x5c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     4ac:	01000074 	movhi	r4,1
     4b0:	21282f04 	addi	r4,r4,-24388
     4b4:	00052580 	call	5258 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     4b8:	b009883a 	mov	r4,r22
     4bc:	000b883a 	mov	r5,zero
     4c0:	00070140 	call	7014 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     4c4:	01000074 	movhi	r4,1
     4c8:	21283a04 	addi	r4,r4,-24344
     4cc:	00067400 	call	6740 <alt_up_char_buffer_open_dev>
     4d0:	d8801c15 	stw	r2,112(sp)
	if (char_buffer_dev == NULL)
     4d4:	10023526 	beq	r2,zero,dac <main+0x950>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     4d8:	01000074 	movhi	r4,1
     4dc:	21284c04 	addi	r4,r4,-24272
     4e0:	00052580 	call	5258 <alt_printf>

	/* now draw a background box for the text */
	

	/* now draw the landscape */
	draw_landscape (pixel_buffer_dev);
     4e4:	b009883a 	mov	r4,r22
     4e8:	00003ac0 	call	3ac <draw_landscape>
	
	/*Draw the full fuel guage */
	draw_fuel_guage(pixel_buffer_dev, fuel);
     4ec:	0490b234 	movhi	r18,17096
     4f0:	b009883a 	mov	r4,r22
     4f4:	900b883a 	mov	r5,r18
     4f8:	00001ac0 	call	1ac <draw_fuel_guage>

	x1 = initx;
	y1 = inity;
	x2 = initx + 30;
	y2 = inity + 30;
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0xff, 0);
     4fc:	00800a04 	movi	r2,40
     500:	d8800015 	stw	r2,0(sp)
     504:	00803fc4 	movi	r2,255
     508:	d8800115 	stw	r2,4(sp)
     50c:	d8000215 	stw	zero,8(sp)
     510:	b009883a 	mov	r4,r22
     514:	01409604 	movi	r5,600
     518:	01800284 	movi	r6,10
     51c:	01c09d84 	movi	r7,630
     520:	0006dd00 	call	6dd0 <alt_up_pixel_buffer_dma_draw_box>
	/* set the direction in which the box will move */
	deltax = initial_x_velocity;
	deltay = 0;
	
	float slope_b = ((float)y_land_2-(float)y_land_1)/((float)x_land_1-(float)x_land_2);
	float slope_d = ((float)y_land_f-(float)y_land_1)/((float)x_land_f-(float)x_land_3);
     524:	d1200617 	ldw	r4,-32744(gp)
     528:	00037b40 	call	37b4 <__floatsisf>
     52c:	1021883a 	mov	r16,r2
     530:	d1200417 	ldw	r4,-32752(gp)
     534:	00037b40 	call	37b4 <__floatsisf>
     538:	80a1ffb2 	custom	254,r16,r16,r2
     53c:	d1200317 	ldw	r4,-32756(gp)
     540:	00037b40 	call	37b4 <__floatsisf>
     544:	1023883a 	mov	r17,r2
     548:	d1200217 	ldw	r4,-32760(gp)
     54c:	00037b40 	call	37b4 <__floatsisf>
     550:	8009883a 	mov	r4,r16
     554:	888bffb2 	custom	254,r5,r17,r2
     558:	00033e80 	call	33e8 <__divsf3>
     55c:	d8800f15 	stw	r2,60(sp)
     560:	05d105b4 	movhi	r23,17430
     564:	07104834 	movhi	fp,16672
     568:	009107b4 	movhi	r2,17438
     56c:	10a00004 	addi	r2,r2,-32768
     570:	d8801b15 	stw	r2,108(sp)
     574:	00d08834 	movhi	r3,16928
     578:	d8c01a15 	stw	r3,104(sp)
     57c:	00b00034 	movhi	r2,49152
     580:	d8801915 	stw	r2,100(sp)
     584:	0007883a 	mov	r3,zero
     588:	d8c01815 	stw	r3,96(sp)
     58c:	d8c01715 	stw	r3,92(sp)
     590:	dc801615 	stw	r18,88(sp)
     594:	00906434 	movhi	r2,16784
     598:	d8801515 	stw	r2,84(sp)
     59c:	d8001415 	stw	zero,80(sp)
     5a0:	00c00044 	movi	r3,1
     5a4:	d8c01315 	stw	r3,76(sp)
     5a8:	d8c01005 	stb	r3,64(sp)
	while(1)
	{
	
		int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
		int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
		*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
     5ac:	00840034 	movhi	r2,4096
     5b0:	10801404 	addi	r2,r2,80
     5b4:	10800017 	ldw	r2,0(r2)
     5b8:	00c40034 	movhi	r3,4096
     5bc:	18c00404 	addi	r3,r3,16
     5c0:	18800015 	stw	r2,0(r3)

		//RESEST PARAMETERS
		if ((*pushbuttons) & 0x01){
     5c4:	1080004c 	andi	r2,r2,1
     5c8:	1005003a 	cmpeq	r2,r2,zero
     5cc:	1000421e 	bne	r2,zero,6d8 <main+0x27c>
			alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     5d0:	b009883a 	mov	r4,r22
     5d4:	000b883a 	mov	r5,zero
     5d8:	00070140 	call	7014 <alt_up_pixel_buffer_dma_clear_screen>
			stillAlive = 1;
			char you_alive[40] = "                \0";
     5dc:	00c00074 	movhi	r3,1
     5e0:	18e85404 	addi	r3,r3,-24240
     5e4:	18800017 	ldw	r2,0(r3)
     5e8:	d8800315 	stw	r2,12(sp)
     5ec:	18800117 	ldw	r2,4(r3)
     5f0:	d8800415 	stw	r2,16(sp)
     5f4:	18800217 	ldw	r2,8(r3)
     5f8:	d8800515 	stw	r2,20(sp)
     5fc:	18800317 	ldw	r2,12(r3)
     600:	d8800615 	stw	r2,24(sp)
     604:	1880040b 	ldhu	r2,16(r3)
     608:	d880070d 	sth	r2,28(sp)
     60c:	d800078d 	sth	zero,30(sp)
     610:	d800080d 	sth	zero,32(sp)
     614:	d800088d 	sth	zero,34(sp)
     618:	d800090d 	sth	zero,36(sp)
     61c:	d800098d 	sth	zero,38(sp)
     620:	d8000a0d 	sth	zero,40(sp)
     624:	d8000a8d 	sth	zero,42(sp)
     628:	d8000b0d 	sth	zero,44(sp)
     62c:	d8000b8d 	sth	zero,46(sp)
     630:	d8000c0d 	sth	zero,48(sp)
     634:	d8000c8d 	sth	zero,50(sp)
			alt_up_char_buffer_string (char_buffer_dev, you_alive, 5, 0);
     638:	d9001c17 	ldw	r4,112(sp)
     63c:	d9400304 	addi	r5,sp,12
     640:	01800144 	movi	r6,5
     644:	000f883a 	mov	r7,zero
     648:	00066380 	call	6638 <alt_up_char_buffer_string>
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int)x1, (int)y1, (int)x2, (int)y2, 0, 0);
     64c:	b809883a 	mov	r4,r23
     650:	000384c0 	call	384c <__fixsfsi>
     654:	1025883a 	mov	r18,r2
     658:	e009883a 	mov	r4,fp
     65c:	000384c0 	call	384c <__fixsfsi>
     660:	1023883a 	mov	r17,r2
     664:	d9001b17 	ldw	r4,108(sp)
     668:	000384c0 	call	384c <__fixsfsi>
     66c:	1021883a 	mov	r16,r2
     670:	d9001a17 	ldw	r4,104(sp)
     674:	000384c0 	call	384c <__fixsfsi>
     678:	d8800015 	stw	r2,0(sp)
     67c:	d8000115 	stw	zero,4(sp)
     680:	d8000215 	stw	zero,8(sp)
     684:	b009883a 	mov	r4,r22
     688:	900b883a 	mov	r5,r18
     68c:	880d883a 	mov	r6,r17
     690:	800f883a 	mov	r7,r16
     694:	0006dd00 	call	6dd0 <alt_up_pixel_buffer_dma_draw_box>
			fuel = 100.0;
			deltay = 0.0;
			theta = 18.0;
			turning = 0.3;
			hasFuel = 1;
			draw_fuel_guage(pixel_buffer_dev, fuel);
     698:	0410b234 	movhi	r16,17096
     69c:	b009883a 	mov	r4,r22
     6a0:	800b883a 	mov	r5,r16
     6a4:	00001ac0 	call	1ac <draw_fuel_guage>
     6a8:	05d105b4 	movhi	r23,17430
     6ac:	07104834 	movhi	fp,16672
     6b0:	00b00034 	movhi	r2,49152
     6b4:	d8801915 	stw	r2,100(sp)
     6b8:	0007883a 	mov	r3,zero
     6bc:	d8c01815 	stw	r3,96(sp)
     6c0:	dc001615 	stw	r16,88(sp)
     6c4:	00906434 	movhi	r2,16784
     6c8:	d8801515 	stw	r2,84(sp)
     6cc:	00c00044 	movi	r3,1
     6d0:	d8c01315 	stw	r3,76(sp)
     6d4:	d8c01005 	stb	r3,64(sp)
		}
	
	
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     6d8:	b009883a 	mov	r4,r22
     6dc:	00071a80 	call	71a8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     6e0:	103fb21e 	bne	r2,zero,5ac <main+0x150>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     6e4:	008fe034 	movhi	r2,16256
     6e8:	d8c01717 	ldw	r3,92(sp)
     6ec:	10c7ffb2 	custom	254,r3,r2,r3
     6f0:	d8c01715 	stw	r3,92(sp)

			if (delay == 0)
     6f4:	1809883a 	mov	r4,r3
     6f8:	000b883a 	mov	r5,zero
     6fc:	000355c0 	call	355c <__eqsf2>
     700:	10018e1e 	bne	r2,zero,d3c <main+0x8e0>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int)x1-3, (int)y1-3, (int)x2+3, (int)y2+3, 0, 0);
     704:	b809883a 	mov	r4,r23
     708:	000384c0 	call	384c <__fixsfsi>
     70c:	102b883a 	mov	r21,r2
     710:	e009883a 	mov	r4,fp
     714:	000384c0 	call	384c <__fixsfsi>
     718:	1029883a 	mov	r20,r2
     71c:	047fff44 	movi	r17,-3
     720:	ac67883a 	add	r19,r21,r17
     724:	1463883a 	add	r17,r2,r17
     728:	d9001b17 	ldw	r4,108(sp)
     72c:	000384c0 	call	384c <__fixsfsi>
     730:	040000c4 	movi	r16,3
     734:	1425883a 	add	r18,r2,r16
     738:	d9001a17 	ldw	r4,104(sp)
     73c:	000384c0 	call	384c <__fixsfsi>
     740:	1405883a 	add	r2,r2,r16
     744:	d8800015 	stw	r2,0(sp)
     748:	d8000115 	stw	zero,4(sp)
     74c:	d8000215 	stw	zero,8(sp)
     750:	b009883a 	mov	r4,r22
     754:	980b883a 	mov	r5,r19
     758:	880d883a 	mov	r6,r17
     75c:	900f883a 	mov	r7,r18
     760:	0006dd00 	call	6dd0 <alt_up_pixel_buffer_dma_draw_box>
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);
				draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting, stillAlive);
     764:	d9001517 	ldw	r4,84(sp)
     768:	000384c0 	call	384c <__fixsfsi>
     76c:	d8c01417 	ldw	r3,80(sp)
     770:	d8c00015 	stw	r3,0(sp)
     774:	d8c01317 	ldw	r3,76(sp)
     778:	d8c00115 	stw	r3,4(sp)
     77c:	b009883a 	mov	r4,r22
     780:	a80b883a 	mov	r5,r21
     784:	a00d883a 	mov	r6,r20
     788:	100f883a 	mov	r7,r2
     78c:	000028c0 	call	28c <draw_sprite>
				draw_fuel_guage(pixel_buffer_dev, fuel);
     790:	b009883a 	mov	r4,r22
     794:	d9401617 	ldw	r5,88(sp)
     798:	00001ac0 	call	1ac <draw_fuel_guage>
				//Right Thruster
				if (stillAlive) {
     79c:	d8801317 	ldw	r2,76(sp)
     7a0:	10016926 	beq	r2,zero,d48 <main+0x8ec>
					//Main Thruster
					if ((*pushbuttons) & 0x04)
     7a4:	00840034 	movhi	r2,4096
     7a8:	10801404 	addi	r2,r2,80
     7ac:	10800017 	ldw	r2,0(r2)
     7b0:	1080010c 	andi	r2,r2,4
     7b4:	1000021e 	bne	r2,zero,7c0 <main+0x364>
     7b8:	d8001415 	stw	zero,80(sp)
     7bc:	00004c06 	br	8f0 <main+0x494>
					{
						if(hasFuel){
     7c0:	d8c01003 	ldbu	r3,64(sp)
     7c4:	18803fcc 	andi	r2,r3,255
     7c8:	1080201c 	xori	r2,r2,128
     7cc:	10bfe004 	addi	r2,r2,-128
     7d0:	1005003a 	cmpeq	r2,r2,zero
     7d4:	1000461e 	bne	r2,zero,8f0 <main+0x494>
							fuel = fuel - 0.65;
     7d8:	008fc9b4 	movhi	r2,16166
     7dc:	10999984 	addi	r2,r2,26214
     7e0:	d8c01617 	ldw	r3,88(sp)
     7e4:	1887ffb2 	custom	254,r3,r3,r2
     7e8:	d8c01615 	stw	r3,88(sp)
							//draw_fuel_guage(pixel_buffer_dev, fuel);
						
							//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
							deltay = (deltay - thrust*cos(((theta*5.0)-90.0)*PI/180));
     7ec:	05102834 	movhi	r20,16544
     7f0:	d8801517 	ldw	r2,84(sp)
     7f4:	1529ff32 	custom	252,r20,r2,r20
     7f8:	0090ad34 	movhi	r2,17076
     7fc:	a0a9ffb2 	custom	254,r20,r20,r2
     800:	00901274 	movhi	r2,16457
     804:	1083f6c4 	addi	r2,r2,4059
     808:	a0a9ff32 	custom	252,r20,r20,r2
     80c:	d9001817 	ldw	r4,96(sp)
     810:	00038e00 	call	38e0 <__extendsfdf2>
     814:	1025883a 	mov	r18,r2
     818:	1827883a 	mov	r19,r3
     81c:	a009883a 	mov	r4,r20
     820:	0150cd34 	movhi	r5,17204
     824:	00033e80 	call	33e8 <__divsf3>
     828:	1009883a 	mov	r4,r2
     82c:	00038e00 	call	38e0 <__extendsfdf2>
     830:	1009883a 	mov	r4,r2
     834:	180b883a 	mov	r5,r3
     838:	0000dec0 	call	dec <cos>
     83c:	04100034 	movhi	r16,16384
     840:	044fed34 	movhi	r17,16308
     844:	8c5eb844 	addi	r17,r17,31457
     848:	1009883a 	mov	r4,r2
     84c:	180b883a 	mov	r5,r3
     850:	800d883a 	mov	r6,r16
     854:	880f883a 	mov	r7,r17
     858:	0003ef80 	call	3ef8 <__muldf3>
     85c:	9009883a 	mov	r4,r18
     860:	980b883a 	mov	r5,r19
     864:	100d883a 	mov	r6,r2
     868:	180f883a 	mov	r7,r3
     86c:	0003e040 	call	3e04 <__subdf3>
     870:	1009883a 	mov	r4,r2
     874:	180b883a 	mov	r5,r3
     878:	000465c0 	call	465c <__truncdfsf2>
     87c:	d8801815 	stw	r2,96(sp)
							deltax = (deltax - thrust*sin(((theta*5.0)-90.0)*PI/180));
     880:	d9001917 	ldw	r4,100(sp)
     884:	00038e00 	call	38e0 <__extendsfdf2>
     888:	1025883a 	mov	r18,r2
     88c:	1827883a 	mov	r19,r3
     890:	a009883a 	mov	r4,r20
     894:	0170cd34 	movhi	r5,49972
     898:	00033e80 	call	33e8 <__divsf3>
     89c:	1009883a 	mov	r4,r2
     8a0:	00038e00 	call	38e0 <__extendsfdf2>
     8a4:	1009883a 	mov	r4,r2
     8a8:	180b883a 	mov	r5,r3
     8ac:	0000f540 	call	f54 <sin>
     8b0:	800d883a 	mov	r6,r16
     8b4:	880f883a 	mov	r7,r17
     8b8:	1009883a 	mov	r4,r2
     8bc:	180b883a 	mov	r5,r3
     8c0:	0003ef80 	call	3ef8 <__muldf3>
     8c4:	9009883a 	mov	r4,r18
     8c8:	980b883a 	mov	r5,r19
     8cc:	100d883a 	mov	r6,r2
     8d0:	180f883a 	mov	r7,r3
     8d4:	0003e840 	call	3e84 <__adddf3>
     8d8:	1009883a 	mov	r4,r2
     8dc:	180b883a 	mov	r5,r3
     8e0:	000465c0 	call	465c <__truncdfsf2>
     8e4:	d8801915 	stw	r2,100(sp)
     8e8:	00c00044 	movi	r3,1
     8ec:	d8c01415 	stw	r3,80(sp)
						}
					} else {
						thrusting = 0;
					}
					
					if ((*pushbuttons) & 0x02)
     8f0:	00840034 	movhi	r2,4096
     8f4:	10801404 	addi	r2,r2,80
     8f8:	10800017 	ldw	r2,0(r2)
     8fc:	1080008c 	andi	r2,r2,2
     900:	10000a26 	beq	r2,zero,92c <main+0x4d0>
					{
						//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
						//deltax = deltax + 1.0;
						if (theta < (37.0 - turning)) {
     904:	d9001517 	ldw	r4,84(sp)
     908:	015084f4 	movhi	r5,16915
     90c:	29733344 	addi	r5,r5,-13107
     910:	00036c40 	call	36c4 <__ltsf2>
     914:	1000050e 	bge	r2,zero,92c <main+0x4d0>
							theta = theta + turning;
     918:	008fa6b4 	movhi	r2,16026
     91c:	10a66684 	addi	r2,r2,-26214
     920:	d8c01517 	ldw	r3,84(sp)
     924:	1887ff72 	custom	253,r3,r3,r2
     928:	d8c01515 	stw	r3,84(sp)
						}
					}
					//Left Thruster
					if ((*pushbuttons) & 0x08)
     92c:	00840034 	movhi	r2,4096
     930:	10801404 	addi	r2,r2,80
     934:	10800017 	ldw	r2,0(r2)
     938:	1080020c 	andi	r2,r2,8
     93c:	10000926 	beq	r2,zero,964 <main+0x508>
					{
						//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
						//deltax = deltax - 1.0;
						if (theta > (0.0 + turning)) {
     940:	040fa6b4 	movhi	r16,16026
     944:	84266684 	addi	r16,r16,-26214
     948:	d9001517 	ldw	r4,84(sp)
     94c:	800b883a 	mov	r5,r16
     950:	00035d40 	call	35d4 <__gtsf2>
     954:	0080030e 	bge	zero,r2,964 <main+0x508>
							theta = theta - turning;
     958:	d8801517 	ldw	r2,84(sp)
     95c:	1405ffb2 	custom	254,r2,r2,r16
     960:	d8801515 	stw	r2,84(sp)
					deltax = 0.0;
					deltay = 0.0;
				}
				
				// move the rectangle
				x1 = x1 + deltax;
     964:	d8c01917 	ldw	r3,100(sp)
     968:	b8efff72 	custom	253,r23,r23,r3
				//x2 = x2 + deltax;
				y1 = y1 + deltay;
     96c:	d8801817 	ldw	r2,96(sp)
     970:	e0b9ff72 	custom	253,fp,fp,r2
				//y2 = y2 + deltay;
				
				//Dead if you go off right side of the screen
				if ((deltax > 0.0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31.0))
     974:	1809883a 	mov	r4,r3
     978:	000b883a 	mov	r5,zero
     97c:	00035d40 	call	35d4 <__gtsf2>
     980:	00800d0e 	bge	zero,r2,9b8 <main+0x55c>
     984:	b1000f17 	ldw	r4,60(r22)
     988:	00039340 	call	3934 <__floatunsisf>
     98c:	00d07e34 	movhi	r3,16888
     990:	10e1ffb2 	custom	254,r16,r2,r3
     994:	b809883a 	mov	r4,r23
     998:	800b883a 	mov	r5,r16
     99c:	000364c0 	call	364c <__gesf2>
     9a0:	10000516 	blt	r2,zero,9b8 <main+0x55c>
     9a4:	802f883a 	mov	r23,r16
     9a8:	0007883a 	mov	r3,zero
     9ac:	d8c01915 	stw	r3,100(sp)
     9b0:	d8001315 	stw	zero,76(sp)
     9b4:	00000c06 	br	9e8 <main+0x58c>
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31.0;
					deltax = 0.0;
					stillAlive = 0;
				}
				//Dead if you go off the left side of the screen
				else if ((deltax < 0.0) && (x1 <= 0.0))
     9b8:	d9001917 	ldw	r4,100(sp)
     9bc:	000b883a 	mov	r5,zero
     9c0:	00036c40 	call	36c4 <__ltsf2>
     9c4:	1000080e 	bge	r2,zero,9e8 <main+0x58c>
     9c8:	b809883a 	mov	r4,r23
     9cc:	000b883a 	mov	r5,zero
     9d0:	000373c0 	call	373c <__lesf2>
     9d4:	00800416 	blt	zero,r2,9e8 <main+0x58c>
     9d8:	002f883a 	mov	r23,zero
     9dc:	0005883a 	mov	r2,zero
     9e0:	d8801915 	stw	r2,100(sp)
     9e4:	d8001315 	stw	zero,76(sp)
				}

				//Calculate slopes to sprite box to determine collision state
				/* float slope_bottom_left_b  = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 5.0 ) - (float)x_land_2);
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
     9e8:	d0e00617 	ldw	r3,-32744(gp)
     9ec:	d8c00d15 	stw	r3,52(sp)
     9f0:	d0a00317 	ldw	r2,-32756(gp)
     9f4:	d8800e15 	stw	r2,56(sp)
     9f8:	00902834 	movhi	r2,16544
     9fc:	b8a5ff72 	custom	253,r18,r23,r2
				float slope_bottom_right_d = ((float)y_land_f-((float)y1 + 25.0))/( (float)x_land_f - ((float)x1 + 25.0));
     a00:	00907234 	movhi	r2,16840
     a04:	b8a9ff72 	custom	253,r20,r23,r2
				
				
				float m = ((float)y_land_1 - (float)y_land_2)/((float)x_land_2 - (float)x_land_1);
     a08:	d5600417 	ldw	r21,-32752(gp)
     a0c:	d4200517 	ldw	r16,-32748(gp)
     a10:	d1200117 	ldw	r4,-32764(gp)
     a14:	00037b40 	call	37b4 <__floatsisf>
     a18:	1027883a 	mov	r19,r2
     a1c:	d1200017 	ldw	r4,-32768(gp)
     a20:	00037b40 	call	37b4 <__floatsisf>
     a24:	1023883a 	mov	r17,r2
				float b = ((float)y_land_2) - ((float)x_land_1)*m;
				
				flat_area_1 = 0;
				flat_area_2 = 0;
				
				if (((x1+5.0) > x_land_0) && ((x1 + 25.0) < x_land_1))
     a28:	d108ed17 	ldw	r4,9140(gp)
     a2c:	00037b40 	call	37b4 <__floatsisf>
     a30:	9009883a 	mov	r4,r18
     a34:	100b883a 	mov	r5,r2
     a38:	00035d40 	call	35d4 <__gtsf2>
     a3c:	0080080e 	bge	zero,r2,a60 <main+0x604>
     a40:	a009883a 	mov	r4,r20
     a44:	880b883a 	mov	r5,r17
     a48:	00036c40 	call	36c4 <__ltsf2>
     a4c:	1000040e 	bge	r2,zero,a60 <main+0x604>
     a50:	00c00044 	movi	r3,1
     a54:	d8c01215 	stw	r3,72(sp)
     a58:	d8001115 	stw	zero,68(sp)
     a5c:	00001006 	br	aa0 <main+0x644>
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
     a60:	9009883a 	mov	r4,r18
     a64:	980b883a 	mov	r5,r19
     a68:	00035d40 	call	35d4 <__gtsf2>
     a6c:	00800a0e 	bge	zero,r2,a98 <main+0x63c>
     a70:	d1200217 	ldw	r4,-32760(gp)
     a74:	00037b40 	call	37b4 <__floatsisf>
     a78:	a009883a 	mov	r4,r20
     a7c:	100b883a 	mov	r5,r2
     a80:	00036c40 	call	36c4 <__ltsf2>
     a84:	1000040e 	bge	r2,zero,a98 <main+0x63c>
     a88:	d8001215 	stw	zero,72(sp)
     a8c:	00800044 	movi	r2,1
     a90:	d8801115 	stw	r2,68(sp)
     a94:	00000206 	br	aa0 <main+0x644>
     a98:	d8001215 	stw	zero,72(sp)
     a9c:	d8001115 	stw	zero,68(sp)
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     aa0:	d9001817 	ldw	r4,96(sp)
     aa4:	000b883a 	mov	r5,zero
     aa8:	00035d40 	call	35d4 <__gtsf2>
     aac:	0080690e 	bge	zero,r2,c54 <main+0x7f8>
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
				float slope_bottom_right_d = ((float)y_land_f-((float)y1 + 25.0))/( (float)x_land_f - ((float)x1 + 25.0));
				
				
				float m = ((float)y_land_1 - (float)y_land_2)/((float)x_land_2 - (float)x_land_1);
     ab0:	8009883a 	mov	r4,r16
     ab4:	00037b40 	call	37b4 <__floatsisf>
     ab8:	1021883a 	mov	r16,r2
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     abc:	01507234 	movhi	r5,16840
     ac0:	e009883a 	mov	r4,fp
     ac4:	114bffb2 	custom	254,r5,r2,r5
     ac8:	000364c0 	call	364c <__gesf2>
     acc:	10000316 	blt	r2,zero,adc <main+0x680>
     ad0:	d8c01217 	ldw	r3,72(sp)
     ad4:	1804c03a 	cmpne	r2,r3,zero
     ad8:	1000511e 	bne	r2,zero,c20 <main+0x7c4>
				}

				//Calculate slopes to sprite box to determine collision state
				/* float slope_bottom_left_b  = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 5.0 ) - (float)x_land_2);
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
     adc:	00907234 	movhi	r2,16840
     ae0:	e085ff72 	custom	253,r2,fp,r2
     ae4:	d8801d15 	stw	r2,116(sp)
				float slope_bottom_right_d = ((float)y_land_f-((float)y1 + 25.0))/( (float)x_land_f - ((float)x1 + 25.0));
				
				
				float m = ((float)y_land_1 - (float)y_land_2)/((float)x_land_2 - (float)x_land_1);
     ae8:	a809883a 	mov	r4,r21
     aec:	00037b40 	call	37b4 <__floatsisf>
     af0:	102b883a 	mov	r21,r2
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     af4:	9009883a 	mov	r4,r18
     af8:	880b883a 	mov	r5,r17
     afc:	00035d40 	call	35d4 <__gtsf2>
     b00:	00800e0e 	bge	zero,r2,b3c <main+0x6e0>
     b04:	a009883a 	mov	r4,r20
     b08:	980b883a 	mov	r5,r19
     b0c:	00036c40 	call	36c4 <__ltsf2>
     b10:	10000a0e 	bge	r2,zero,b3c <main+0x6e0>
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
				float slope_bottom_right_d = ((float)y_land_f-((float)y1 + 25.0))/( (float)x_land_f - ((float)x1 + 25.0));
				
				
				float m = ((float)y_land_1 - (float)y_land_2)/((float)x_land_2 - (float)x_land_1);
     b14:	ac09ffb2 	custom	254,r4,r21,r16
     b18:	9c4bffb2 	custom	254,r5,r19,r17
     b1c:	00033e80 	call	33e8 <__divsf3>
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     b20:	888bff32 	custom	252,r5,r17,r2
     b24:	814bffb2 	custom	254,r5,r16,r5
     b28:	a085ff32 	custom	252,r2,r20,r2
     b2c:	d9001d17 	ldw	r4,116(sp)
     b30:	288bff72 	custom	253,r5,r5,r2
     b34:	00035d40 	call	35d4 <__gtsf2>
     b38:	00803316 	blt	zero,r2,c08 <main+0x7ac>
     b3c:	9009883a 	mov	r4,r18
     b40:	980b883a 	mov	r5,r19
     b44:	00036c40 	call	36c4 <__ltsf2>
     b48:	1000080e 	bge	r2,zero,b6c <main+0x710>
     b4c:	d9001d17 	ldw	r4,116(sp)
     b50:	a80b883a 	mov	r5,r21
     b54:	00035d40 	call	35d4 <__gtsf2>
     b58:	0080040e 	bge	zero,r2,b6c <main+0x710>
     b5c:	a009883a 	mov	r4,r20
     b60:	980b883a 	mov	r5,r19
     b64:	00035d40 	call	35d4 <__gtsf2>
     b68:	00802716 	blt	zero,r2,c08 <main+0x7ac>
     b6c:	01507234 	movhi	r5,16840
     b70:	e009883a 	mov	r4,fp
     b74:	a94bffb2 	custom	254,r5,r21,r5
     b78:	000364c0 	call	364c <__gesf2>
     b7c:	10000316 	blt	r2,zero,b8c <main+0x730>
     b80:	d8c01117 	ldw	r3,68(sp)
     b84:	1804c03a 	cmpne	r2,r3,zero
     b88:	10001f1e 	bne	r2,zero,c08 <main+0x7ac>
     b8c:	d1200217 	ldw	r4,-32760(gp)
     b90:	00037b40 	call	37b4 <__floatsisf>
     b94:	9009883a 	mov	r4,r18
     b98:	100b883a 	mov	r5,r2
     b9c:	00035d40 	call	35d4 <__gtsf2>
     ba0:	00802c0e 	bge	zero,r2,c54 <main+0x7f8>
				}

				//Calculate slopes to sprite box to determine collision state
				/* float slope_bottom_left_b  = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 5.0 ) - (float)x_land_2);
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
     ba4:	d9000e17 	ldw	r4,56(sp)
     ba8:	00037b40 	call	37b4 <__floatsisf>
     bac:	1021883a 	mov	r16,r2
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     bb0:	1009883a 	mov	r4,r2
     bb4:	a00b883a 	mov	r5,r20
     bb8:	00035d40 	call	35d4 <__gtsf2>
     bbc:	0080250e 	bge	zero,r2,c54 <main+0x7f8>
				}

				//Calculate slopes to sprite box to determine collision state
				/* float slope_bottom_left_b  = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 5.0 ) - (float)x_land_2);
				float slope_bottom_right_b = (((float)y1 + 25.0)-(float)y_land_2)/(((float)x1 + 25.0) - (float)x_land_2); */
				float slope_bottom_left_d  = ((float)y_land_f-((float)y1 + 25.0))/((float)x_land_f - ((float)x1 + 5.0));
     bc0:	d9000d17 	ldw	r4,52(sp)
     bc4:	00037b40 	call	37b4 <__floatsisf>
     bc8:	d8c01d17 	ldw	r3,116(sp)
     bcc:	10e3ffb2 	custom	254,r17,r2,r3
					flat_area_1 = 1;
				else if (((x1 + 5.0) > x_land_2) && ((x1 + 25.0) < x_land_3))
					flat_area_2 = 1;
				
				//Did you hit the landscape?
				if (
     bd0:	8809883a 	mov	r4,r17
     bd4:	848bffb2 	custom	254,r5,r16,r18
     bd8:	00033e80 	call	33e8 <__divsf3>
     bdc:	d9000f17 	ldw	r4,60(sp)
     be0:	100b883a 	mov	r5,r2
     be4:	00035d40 	call	35d4 <__gtsf2>
     be8:	00800716 	blt	zero,r2,c08 <main+0x7ac>
     bec:	8809883a 	mov	r4,r17
     bf0:	850bffb2 	custom	254,r5,r16,r20
     bf4:	00033e80 	call	33e8 <__divsf3>
     bf8:	d9000f17 	ldw	r4,60(sp)
     bfc:	100b883a 	mov	r5,r2
     c00:	00035d40 	call	35d4 <__gtsf2>
     c04:	0080130e 	bge	zero,r2,c54 <main+0x7f8>
				   )
				{
					
					
					//Are we in a flat landing area?
					if ((flat_area_1 || flat_area_2) && deltay < 2.0 && deltax < 3.0 && theta == 18)
     c08:	d8c01217 	ldw	r3,72(sp)
     c0c:	1804c03a 	cmpne	r2,r3,zero
     c10:	1000031e 	bne	r2,zero,c20 <main+0x7c4>
     c14:	d8c01117 	ldw	r3,68(sp)
     c18:	1805003a 	cmpeq	r2,r3,zero
     c1c:	10005b1e 	bne	r2,zero,d8c <main+0x930>
     c20:	d9001817 	ldw	r4,96(sp)
     c24:	01500034 	movhi	r5,16384
     c28:	00036c40 	call	36c4 <__ltsf2>
     c2c:	1000570e 	bge	r2,zero,d8c <main+0x930>
     c30:	d9001917 	ldw	r4,100(sp)
     c34:	01501034 	movhi	r5,16448
     c38:	00036c40 	call	36c4 <__ltsf2>
     c3c:	1000530e 	bge	r2,zero,d8c <main+0x930>
     c40:	d9001517 	ldw	r4,84(sp)
     c44:	01506434 	movhi	r5,16784
     c48:	000355c0 	call	355c <__eqsf2>
     c4c:	10004f1e 	bne	r2,zero,d8c <main+0x930>
     c50:	00004306 	br	d60 <main+0x904>
						stillAlive = 0;
					}
					
				}
				//Dead if you go off the top of the screen
				else if ((deltay < 0.0) && (y1 <= 0.0))
     c54:	d9001817 	ldw	r4,96(sp)
     c58:	000b883a 	mov	r5,zero
     c5c:	00036c40 	call	36c4 <__ltsf2>
     c60:	1000040e 	bge	r2,zero,c74 <main+0x818>
     c64:	e009883a 	mov	r4,fp
     c68:	000b883a 	mov	r5,zero
     c6c:	000373c0 	call	373c <__lesf2>
     c70:	0080450e 	bge	zero,r2,d88 <main+0x92c>
					deltay = -deltay;
					stillAlive = 0;
				}
				
				//Dead if you run out of fuel
				else if (fuel <= 0.0)
     c74:	d9001617 	ldw	r4,88(sp)
     c78:	000b883a 	mov	r5,zero
     c7c:	000373c0 	call	373c <__lesf2>
     c80:	00800816 	blt	zero,r2,ca4 <main+0x848>
				{
					hasFuel = 0;
					//fuel = 100.0;
					alt_up_char_buffer_string (char_buffer_dev, no_fuel, 5, 0);
     c84:	d9001c17 	ldw	r4,112(sp)
     c88:	01400074 	movhi	r5,1
     c8c:	294ae504 	addi	r5,r5,11156
     c90:	01800144 	movi	r6,5
     c94:	000f883a 	mov	r7,zero
     c98:	00066380 	call	6638 <alt_up_char_buffer_string>
     c9c:	d8001415 	stw	zero,80(sp)
     ca0:	d8001005 	stb	zero,64(sp)
					thrusting = 0;
				}
				
				x2 = x1 + 30.0;
     ca4:	00907c34 	movhi	r2,16880
     ca8:	b887ff72 	custom	253,r3,r23,r2
     cac:	d8c01b15 	stw	r3,108(sp)
				y2 = y1 + 30.0;
     cb0:	e085ff72 	custom	253,r2,fp,r2
     cb4:	d8801a15 	stw	r2,104(sp)
				
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				
				//draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
				draw_landscape (pixel_buffer_dev);
     cb8:	b009883a 	mov	r4,r22
     cbc:	00003ac0 	call	3ac <draw_landscape>
				
				deltay = deltay + g;
				
				//you exploded!
				if ((stillAlive == 0)||(stillAlive == 2)) { 
     cc0:	d8801317 	ldw	r2,76(sp)
     cc4:	10000926 	beq	r2,zero,cec <main+0x890>
     cc8:	00800084 	movi	r2,2
     ccc:	d8c01317 	ldw	r3,76(sp)
     cd0:	18801126 	beq	r3,r2,d18 <main+0x8bc>
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				
				//draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
				draw_landscape (pixel_buffer_dev);
				
				deltay = deltay + g;
     cd4:	008f2934 	movhi	r2,15524
     cd8:	10b5c284 	addi	r2,r2,-10486
     cdc:	d8c01817 	ldw	r3,96(sp)
     ce0:	1887ff72 	custom	253,r3,r3,r2
     ce4:	d8c01815 	stw	r3,96(sp)
     ce8:	00001406 	br	d3c <main+0x8e0>
				
				//you exploded!
				if ((stillAlive == 0)||(stillAlive == 2)) { 
					if(stillAlive ==0){
						alt_up_char_buffer_string (char_buffer_dev, you_died, 5, 0);
     cec:	d9001c17 	ldw	r4,112(sp)
     cf0:	01400074 	movhi	r5,1
     cf4:	294ad104 	addi	r5,r5,11076
     cf8:	01800144 	movi	r6,5
     cfc:	000f883a 	mov	r7,zero
     d00:	00066380 	call	6638 <alt_up_char_buffer_string>
     d04:	0005883a 	mov	r2,zero
     d08:	d8801915 	stw	r2,100(sp)
     d0c:	d8801815 	stw	r2,96(sp)
     d10:	d8001315 	stw	zero,76(sp)
     d14:	00000906 	br	d3c <main+0x8e0>
					}else{
						alt_up_char_buffer_string (char_buffer_dev, you_won, 5, 0);
     d18:	d9001c17 	ldw	r4,112(sp)
     d1c:	01400074 	movhi	r5,1
     d20:	294adb04 	addi	r5,r5,11116
     d24:	01800144 	movi	r6,5
     d28:	000f883a 	mov	r7,zero
     d2c:	00066380 	call	6638 <alt_up_char_buffer_string>
     d30:	0007883a 	mov	r3,zero
     d34:	d8c01915 	stw	r3,100(sp)
     d38:	d8c01815 	stw	r3,96(sp)
				
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     d3c:	b009883a 	mov	r4,r22
     d40:	00070c80 	call	70c8 <alt_up_pixel_buffer_dma_swap_buffers>
     d44:	003e1906 	br	5ac <main+0x150>
					deltax = 0.0;
					deltay = 0.0;
				}
				
				// move the rectangle
				x1 = x1 + deltax;
     d48:	0005883a 	mov	r2,zero
     d4c:	b8afff72 	custom	253,r23,r23,r2
				//x2 = x2 + deltax;
				y1 = y1 + deltay;
     d50:	e0b9ff72 	custom	253,fp,fp,r2
     d54:	d8801915 	stw	r2,100(sp)
     d58:	d8801815 	stw	r2,96(sp)
     d5c:	003f2206 	br	9e8 <main+0x58c>
					//fuel = 100.0;
					alt_up_char_buffer_string (char_buffer_dev, no_fuel, 5, 0);
					thrusting = 0;
				}
				
				x2 = x1 + 30.0;
     d60:	00907c34 	movhi	r2,16880
     d64:	b887ff72 	custom	253,r3,r23,r2
     d68:	d8c01b15 	stw	r3,108(sp)
				y2 = y1 + 30.0;
     d6c:	e085ff72 	custom	253,r2,fp,r2
     d70:	d8801a15 	stw	r2,104(sp)
				
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				
				//draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
				draw_landscape (pixel_buffer_dev);
     d74:	b009883a 	mov	r4,r22
     d78:	00003ac0 	call	3ac <draw_landscape>
     d7c:	00800084 	movi	r2,2
     d80:	d8801315 	stw	r2,76(sp)
     d84:	003fe406 	br	d18 <main+0x8bc>
     d88:	0039883a 	mov	fp,zero
					//fuel = 100.0;
					alt_up_char_buffer_string (char_buffer_dev, no_fuel, 5, 0);
					thrusting = 0;
				}
				
				x2 = x1 + 30.0;
     d8c:	00907c34 	movhi	r2,16880
     d90:	b887ff72 	custom	253,r3,r23,r2
     d94:	d8c01b15 	stw	r3,108(sp)
				y2 = y1 + 30.0;
     d98:	e085ff72 	custom	253,r2,fp,r2
     d9c:	d8801a15 	stw	r2,104(sp)
				
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				
				//draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
				draw_landscape (pixel_buffer_dev);
     da0:	b009883a 	mov	r4,r22
     da4:	00003ac0 	call	3ac <draw_landscape>
     da8:	003fd006 	br	cec <main+0x890>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     dac:	01000074 	movhi	r4,1
     db0:	21284004 	addi	r4,r4,-24320
     db4:	00052580 	call	5258 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     db8:	00bfffc4 	movi	r2,-1
     dbc:	dfc02717 	ldw	ra,156(sp)
     dc0:	df002617 	ldw	fp,152(sp)
     dc4:	ddc02517 	ldw	r23,148(sp)
     dc8:	dd802417 	ldw	r22,144(sp)
     dcc:	dd402317 	ldw	r21,140(sp)
     dd0:	dd002217 	ldw	r20,136(sp)
     dd4:	dcc02117 	ldw	r19,132(sp)
     dd8:	dc802017 	ldw	r18,128(sp)
     ddc:	dc401f17 	ldw	r17,124(sp)
     de0:	dc001e17 	ldw	r16,120(sp)
     de4:	dec02804 	addi	sp,sp,160
     de8:	f800283a 	ret

00000dec <cos>:
     dec:	00a00034 	movhi	r2,32768
     df0:	10bfffc4 	addi	r2,r2,-1
     df4:	defffa04 	addi	sp,sp,-24
     df8:	114c703a 	and	r6,r2,r5
     dfc:	008ffa74 	movhi	r2,16361
     e00:	10887ec4 	addi	r2,r2,8699
     e04:	dfc00515 	stw	ra,20(sp)
     e08:	2011883a 	mov	r8,r4
     e0c:	1180210e 	bge	r2,r6,e94 <cos+0xa8>
     e10:	009ffc34 	movhi	r2,32752
     e14:	10bfffc4 	addi	r2,r2,-1
     e18:	11800a0e 	bge	r2,r6,e44 <cos+0x58>
     e1c:	280f883a 	mov	r7,r5
     e20:	400d883a 	mov	r6,r8
     e24:	0003e040 	call	3e04 <__subdf3>
     e28:	100d883a 	mov	r6,r2
     e2c:	180f883a 	mov	r7,r3
     e30:	3005883a 	mov	r2,r6
     e34:	3807883a 	mov	r3,r7
     e38:	dfc00517 	ldw	ra,20(sp)
     e3c:	dec00604 	addi	sp,sp,24
     e40:	f800283a 	ret
     e44:	d9800104 	addi	r6,sp,4
     e48:	00010c00 	call	10c0 <__ieee754_rem_pio2>
     e4c:	10c000cc 	andi	r3,r2,3
     e50:	01000044 	movi	r4,1
     e54:	19001926 	beq	r3,r4,ebc <cos+0xd0>
     e58:	00800084 	movi	r2,2
     e5c:	18803126 	beq	r3,r2,f24 <cos+0x138>
     e60:	1800231e 	bne	r3,zero,ef0 <cos+0x104>
     e64:	d8800117 	ldw	r2,4(sp)
     e68:	da000317 	ldw	r8,12(sp)
     e6c:	d8c00217 	ldw	r3,8(sp)
     e70:	da400417 	ldw	r9,16(sp)
     e74:	400d883a 	mov	r6,r8
     e78:	180b883a 	mov	r5,r3
     e7c:	480f883a 	mov	r7,r9
     e80:	1009883a 	mov	r4,r2
     e84:	00018e80 	call	18e8 <__kernel_cos>
     e88:	100d883a 	mov	r6,r2
     e8c:	180f883a 	mov	r7,r3
     e90:	003fe706 	br	e30 <cos+0x44>
     e94:	000d883a 	mov	r6,zero
     e98:	000f883a 	mov	r7,zero
     e9c:	00018e80 	call	18e8 <__kernel_cos>
     ea0:	100d883a 	mov	r6,r2
     ea4:	180f883a 	mov	r7,r3
     ea8:	3005883a 	mov	r2,r6
     eac:	3807883a 	mov	r3,r7
     eb0:	dfc00517 	ldw	ra,20(sp)
     eb4:	dec00604 	addi	sp,sp,24
     eb8:	f800283a 	ret
     ebc:	d8800117 	ldw	r2,4(sp)
     ec0:	da000317 	ldw	r8,12(sp)
     ec4:	d8c00217 	ldw	r3,8(sp)
     ec8:	da400417 	ldw	r9,16(sp)
     ecc:	d9000015 	stw	r4,0(sp)
     ed0:	400d883a 	mov	r6,r8
     ed4:	480f883a 	mov	r7,r9
     ed8:	180b883a 	mov	r5,r3
     edc:	1009883a 	mov	r4,r2
     ee0:	0002c900 	call	2c90 <__kernel_sin>
     ee4:	100d883a 	mov	r6,r2
     ee8:	19e0003c 	xorhi	r7,r3,32768
     eec:	003fd006 	br	e30 <cos+0x44>
     ef0:	d8800117 	ldw	r2,4(sp)
     ef4:	da000317 	ldw	r8,12(sp)
     ef8:	d8c00217 	ldw	r3,8(sp)
     efc:	da400417 	ldw	r9,16(sp)
     f00:	d9000015 	stw	r4,0(sp)
     f04:	400d883a 	mov	r6,r8
     f08:	480f883a 	mov	r7,r9
     f0c:	180b883a 	mov	r5,r3
     f10:	1009883a 	mov	r4,r2
     f14:	0002c900 	call	2c90 <__kernel_sin>
     f18:	100d883a 	mov	r6,r2
     f1c:	180f883a 	mov	r7,r3
     f20:	003fc306 	br	e30 <cos+0x44>
     f24:	d8800117 	ldw	r2,4(sp)
     f28:	da000317 	ldw	r8,12(sp)
     f2c:	d8c00217 	ldw	r3,8(sp)
     f30:	da400417 	ldw	r9,16(sp)
     f34:	400d883a 	mov	r6,r8
     f38:	180b883a 	mov	r5,r3
     f3c:	480f883a 	mov	r7,r9
     f40:	1009883a 	mov	r4,r2
     f44:	00018e80 	call	18e8 <__kernel_cos>
     f48:	100d883a 	mov	r6,r2
     f4c:	19e0003c 	xorhi	r7,r3,32768
     f50:	003fb706 	br	e30 <cos+0x44>

00000f54 <sin>:
     f54:	00a00034 	movhi	r2,32768
     f58:	10bfffc4 	addi	r2,r2,-1
     f5c:	defffa04 	addi	sp,sp,-24
     f60:	114c703a 	and	r6,r2,r5
     f64:	008ffa74 	movhi	r2,16361
     f68:	10887ec4 	addi	r2,r2,8699
     f6c:	dfc00515 	stw	ra,20(sp)
     f70:	2011883a 	mov	r8,r4
     f74:	1180220e 	bge	r2,r6,1000 <sin+0xac>
     f78:	009ffc34 	movhi	r2,32752
     f7c:	10bfffc4 	addi	r2,r2,-1
     f80:	11800a0e 	bge	r2,r6,fac <sin+0x58>
     f84:	280f883a 	mov	r7,r5
     f88:	400d883a 	mov	r6,r8
     f8c:	0003e040 	call	3e04 <__subdf3>
     f90:	100d883a 	mov	r6,r2
     f94:	180f883a 	mov	r7,r3
     f98:	3005883a 	mov	r2,r6
     f9c:	3807883a 	mov	r3,r7
     fa0:	dfc00517 	ldw	ra,20(sp)
     fa4:	dec00604 	addi	sp,sp,24
     fa8:	f800283a 	ret
     fac:	d9800104 	addi	r6,sp,4
     fb0:	00010c00 	call	10c0 <__ieee754_rem_pio2>
     fb4:	10c000cc 	andi	r3,r2,3
     fb8:	01000044 	movi	r4,1
     fbc:	19001b26 	beq	r3,r4,102c <sin+0xd8>
     fc0:	00800084 	movi	r2,2
     fc4:	18803126 	beq	r3,r2,108c <sin+0x138>
     fc8:	1800241e 	bne	r3,zero,105c <sin+0x108>
     fcc:	d8800117 	ldw	r2,4(sp)
     fd0:	da000317 	ldw	r8,12(sp)
     fd4:	d8c00217 	ldw	r3,8(sp)
     fd8:	da400417 	ldw	r9,16(sp)
     fdc:	d9000015 	stw	r4,0(sp)
     fe0:	400d883a 	mov	r6,r8
     fe4:	480f883a 	mov	r7,r9
     fe8:	180b883a 	mov	r5,r3
     fec:	1009883a 	mov	r4,r2
     ff0:	0002c900 	call	2c90 <__kernel_sin>
     ff4:	100d883a 	mov	r6,r2
     ff8:	180f883a 	mov	r7,r3
     ffc:	003fe606 	br	f98 <sin+0x44>
    1000:	000d883a 	mov	r6,zero
    1004:	000f883a 	mov	r7,zero
    1008:	d8000015 	stw	zero,0(sp)
    100c:	0002c900 	call	2c90 <__kernel_sin>
    1010:	100d883a 	mov	r6,r2
    1014:	180f883a 	mov	r7,r3
    1018:	3005883a 	mov	r2,r6
    101c:	3807883a 	mov	r3,r7
    1020:	dfc00517 	ldw	ra,20(sp)
    1024:	dec00604 	addi	sp,sp,24
    1028:	f800283a 	ret
    102c:	d8800117 	ldw	r2,4(sp)
    1030:	da000317 	ldw	r8,12(sp)
    1034:	d8c00217 	ldw	r3,8(sp)
    1038:	da400417 	ldw	r9,16(sp)
    103c:	400d883a 	mov	r6,r8
    1040:	180b883a 	mov	r5,r3
    1044:	480f883a 	mov	r7,r9
    1048:	1009883a 	mov	r4,r2
    104c:	00018e80 	call	18e8 <__kernel_cos>
    1050:	100d883a 	mov	r6,r2
    1054:	180f883a 	mov	r7,r3
    1058:	003fcf06 	br	f98 <sin+0x44>
    105c:	d8800117 	ldw	r2,4(sp)
    1060:	da000317 	ldw	r8,12(sp)
    1064:	d8c00217 	ldw	r3,8(sp)
    1068:	da400417 	ldw	r9,16(sp)
    106c:	400d883a 	mov	r6,r8
    1070:	180b883a 	mov	r5,r3
    1074:	480f883a 	mov	r7,r9
    1078:	1009883a 	mov	r4,r2
    107c:	00018e80 	call	18e8 <__kernel_cos>
    1080:	100d883a 	mov	r6,r2
    1084:	19e0003c 	xorhi	r7,r3,32768
    1088:	003fc306 	br	f98 <sin+0x44>
    108c:	d8800117 	ldw	r2,4(sp)
    1090:	da000317 	ldw	r8,12(sp)
    1094:	d8c00217 	ldw	r3,8(sp)
    1098:	da400417 	ldw	r9,16(sp)
    109c:	d9000015 	stw	r4,0(sp)
    10a0:	400d883a 	mov	r6,r8
    10a4:	480f883a 	mov	r7,r9
    10a8:	180b883a 	mov	r5,r3
    10ac:	1009883a 	mov	r4,r2
    10b0:	0002c900 	call	2c90 <__kernel_sin>
    10b4:	100d883a 	mov	r6,r2
    10b8:	19e0003c 	xorhi	r7,r3,32768
    10bc:	003fb606 	br	f98 <sin+0x44>

000010c0 <__ieee754_rem_pio2>:
    10c0:	deffe304 	addi	sp,sp,-116
    10c4:	00a00034 	movhi	r2,32768
    10c8:	10bfffc4 	addi	r2,r2,-1
    10cc:	dd801915 	stw	r22,100(sp)
    10d0:	28ac703a 	and	r22,r5,r2
    10d4:	008ffa74 	movhi	r2,16361
    10d8:	10887ec4 	addi	r2,r2,8699
    10dc:	df001b15 	stw	fp,108(sp)
    10e0:	dfc01c15 	stw	ra,112(sp)
    10e4:	ddc01a15 	stw	r23,104(sp)
    10e8:	dd401815 	stw	r21,96(sp)
    10ec:	dd001715 	stw	r20,92(sp)
    10f0:	dcc01615 	stw	r19,88(sp)
    10f4:	dc801515 	stw	r18,84(sp)
    10f8:	dc401415 	stw	r17,80(sp)
    10fc:	dc001315 	stw	r16,76(sp)
    1100:	2013883a 	mov	r9,r4
    1104:	d9400a15 	stw	r5,40(sp)
    1108:	3039883a 	mov	fp,r6
    110c:	15801216 	blt	r2,r22,1158 <__ieee754_rem_pio2+0x98>
    1110:	e1400115 	stw	r5,4(fp)
    1114:	30000315 	stw	zero,12(r6)
    1118:	e1000015 	stw	r4,0(fp)
    111c:	d8000b15 	stw	zero,44(sp)
    1120:	30000215 	stw	zero,8(r6)
    1124:	d8800b17 	ldw	r2,44(sp)
    1128:	dfc01c17 	ldw	ra,112(sp)
    112c:	df001b17 	ldw	fp,108(sp)
    1130:	ddc01a17 	ldw	r23,104(sp)
    1134:	dd801917 	ldw	r22,100(sp)
    1138:	dd401817 	ldw	r21,96(sp)
    113c:	dd001717 	ldw	r20,92(sp)
    1140:	dcc01617 	ldw	r19,88(sp)
    1144:	dc801517 	ldw	r18,84(sp)
    1148:	dc401417 	ldw	r17,80(sp)
    114c:	dc001317 	ldw	r16,76(sp)
    1150:	dec01d04 	addi	sp,sp,116
    1154:	f800283a 	ret
    1158:	009000f4 	movhi	r2,16387
    115c:	10b65ec4 	addi	r2,r2,-9861
    1160:	15800f0e 	bge	r2,r22,11a0 <__ieee754_rem_pio2+0xe0>
    1164:	00904e74 	movhi	r2,16697
    1168:	10887ec4 	addi	r2,r2,8699
    116c:	1580330e 	bge	r2,r22,123c <__ieee754_rem_pio2+0x17c>
    1170:	009ffc34 	movhi	r2,32752
    1174:	10bfffc4 	addi	r2,r2,-1
    1178:	1580fe0e 	bge	r2,r22,1574 <__ieee754_rem_pio2+0x4b4>
    117c:	280f883a 	mov	r7,r5
    1180:	480d883a 	mov	r6,r9
    1184:	0003e040 	call	3e04 <__subdf3>
    1188:	e0c00115 	stw	r3,4(fp)
    118c:	d8000b15 	stw	zero,44(sp)
    1190:	e0800015 	stw	r2,0(fp)
    1194:	e0800215 	stw	r2,8(fp)
    1198:	e0c00315 	stw	r3,12(fp)
    119c:	003fe106 	br	1124 <__ieee754_rem_pio2+0x64>
    11a0:	d9000a17 	ldw	r4,40(sp)
    11a4:	0100ce0e 	bge	zero,r4,14e0 <__ieee754_rem_pio2+0x420>
    11a8:	04151034 	movhi	r16,21568
    11ac:	044ffe74 	movhi	r17,16377
    11b0:	8c487ec4 	addi	r17,r17,8699
    11b4:	4809883a 	mov	r4,r9
    11b8:	800d883a 	mov	r6,r16
    11bc:	880f883a 	mov	r7,r17
    11c0:	0003e040 	call	3e04 <__subdf3>
    11c4:	1025883a 	mov	r18,r2
    11c8:	1827883a 	mov	r19,r3
    11cc:	b4413c26 	beq	r22,r17,16c0 <__ieee754_rem_pio2+0x600>
    11d0:	040698b4 	movhi	r16,6754
    11d4:	8418cc44 	addi	r16,r16,25393
    11d8:	044f7474 	movhi	r17,15825
    11dc:	8c6d1844 	addi	r17,r17,-19359
    11e0:	1009883a 	mov	r4,r2
    11e4:	180b883a 	mov	r5,r3
    11e8:	800d883a 	mov	r6,r16
    11ec:	880f883a 	mov	r7,r17
    11f0:	0003e040 	call	3e04 <__subdf3>
    11f4:	100d883a 	mov	r6,r2
    11f8:	9009883a 	mov	r4,r18
    11fc:	980b883a 	mov	r5,r19
    1200:	180f883a 	mov	r7,r3
    1204:	e0800015 	stw	r2,0(fp)
    1208:	e0c00115 	stw	r3,4(fp)
    120c:	0003e040 	call	3e04 <__subdf3>
    1210:	1009883a 	mov	r4,r2
    1214:	800d883a 	mov	r6,r16
    1218:	880f883a 	mov	r7,r17
    121c:	180b883a 	mov	r5,r3
    1220:	0003e040 	call	3e04 <__subdf3>
    1224:	1009883a 	mov	r4,r2
    1228:	00800044 	movi	r2,1
    122c:	d8800b15 	stw	r2,44(sp)
    1230:	e0c00315 	stw	r3,12(fp)
    1234:	e1000215 	stw	r4,8(fp)
    1238:	003fba06 	br	1124 <__ieee754_rem_pio2+0x64>
    123c:	0002fa80 	call	2fa8 <fabs>
    1240:	021b72b4 	movhi	r8,28106
    1244:	423220c4 	addi	r8,r8,-14205
    1248:	024ff934 	movhi	r9,16356
    124c:	4a57cc04 	addi	r9,r9,24368
    1250:	480f883a 	mov	r7,r9
    1254:	400d883a 	mov	r6,r8
    1258:	1009883a 	mov	r4,r2
    125c:	180b883a 	mov	r5,r3
    1260:	1025883a 	mov	r18,r2
    1264:	1827883a 	mov	r19,r3
    1268:	0003ef80 	call	3ef8 <__muldf3>
    126c:	0011883a 	mov	r8,zero
    1270:	024ff834 	movhi	r9,16352
    1274:	480f883a 	mov	r7,r9
    1278:	400d883a 	mov	r6,r8
    127c:	180b883a 	mov	r5,r3
    1280:	1009883a 	mov	r4,r2
    1284:	0003e840 	call	3e84 <__adddf3>
    1288:	180b883a 	mov	r5,r3
    128c:	1009883a 	mov	r4,r2
    1290:	000454c0 	call	454c <__fixdfsi>
    1294:	1009883a 	mov	r4,r2
    1298:	d8800b15 	stw	r2,44(sp)
    129c:	00044540 	call	4454 <__floatsidf>
    12a0:	1823883a 	mov	r17,r3
    12a4:	1009883a 	mov	r4,r2
    12a8:	d8800c15 	stw	r2,48(sp)
    12ac:	00effe74 	movhi	r3,49145
    12b0:	18c87ec4 	addi	r3,r3,8699
    12b4:	00951034 	movhi	r2,21568
    12b8:	880b883a 	mov	r5,r17
    12bc:	180f883a 	mov	r7,r3
    12c0:	100d883a 	mov	r6,r2
    12c4:	dc400d15 	stw	r17,52(sp)
    12c8:	0003ef80 	call	3ef8 <__muldf3>
    12cc:	180f883a 	mov	r7,r3
    12d0:	980b883a 	mov	r5,r19
    12d4:	9009883a 	mov	r4,r18
    12d8:	100d883a 	mov	r6,r2
    12dc:	0003e840 	call	3e84 <__adddf3>
    12e0:	d9000c17 	ldw	r4,48(sp)
    12e4:	020698b4 	movhi	r8,6754
    12e8:	4218cc44 	addi	r8,r8,25393
    12ec:	024f7474 	movhi	r9,15825
    12f0:	4a6d1844 	addi	r9,r9,-19359
    12f4:	880b883a 	mov	r5,r17
    12f8:	480f883a 	mov	r7,r9
    12fc:	400d883a 	mov	r6,r8
    1300:	1025883a 	mov	r18,r2
    1304:	1827883a 	mov	r19,r3
    1308:	0003ef80 	call	3ef8 <__muldf3>
    130c:	d9000b17 	ldw	r4,44(sp)
    1310:	100f883a 	mov	r7,r2
    1314:	1811883a 	mov	r8,r3
    1318:	008007c4 	movi	r2,31
    131c:	dc800e15 	stw	r18,56(sp)
    1320:	3821883a 	mov	r16,r7
    1324:	dcc00f15 	stw	r19,60(sp)
    1328:	4023883a 	mov	r17,r8
    132c:	11010a0e 	bge	r2,r4,1758 <__ieee754_rem_pio2+0x698>
    1330:	d9000e17 	ldw	r4,56(sp)
    1334:	d9400f17 	ldw	r5,60(sp)
    1338:	800d883a 	mov	r6,r16
    133c:	880f883a 	mov	r7,r17
    1340:	0003e040 	call	3e04 <__subdf3>
    1344:	1810d53a 	srli	r8,r3,20
    1348:	b02dd53a 	srai	r22,r22,20
    134c:	1009883a 	mov	r4,r2
    1350:	4201ffcc 	andi	r8,r8,2047
    1354:	180b883a 	mov	r5,r3
    1358:	b211c83a 	sub	r8,r22,r8
    135c:	00800404 	movi	r2,16
    1360:	dd801015 	stw	r22,64(sp)
    1364:	e1000015 	stw	r4,0(fp)
    1368:	e1400115 	stw	r5,4(fp)
    136c:	1200430e 	bge	r2,r8,147c <__ieee754_rem_pio2+0x3bc>
    1370:	d9000c17 	ldw	r4,48(sp)
    1374:	d9400d17 	ldw	r5,52(sp)
    1378:	00869834 	movhi	r2,6752
    137c:	00cf7474 	movhi	r3,15825
    1380:	18ed1844 	addi	r3,r3,-19359
    1384:	180f883a 	mov	r7,r3
    1388:	100d883a 	mov	r6,r2
    138c:	0003ef80 	call	3ef8 <__muldf3>
    1390:	d9000e17 	ldw	r4,56(sp)
    1394:	d9400f17 	ldw	r5,60(sp)
    1398:	100d883a 	mov	r6,r2
    139c:	180f883a 	mov	r7,r3
    13a0:	1025883a 	mov	r18,r2
    13a4:	1827883a 	mov	r19,r3
    13a8:	0003e040 	call	3e04 <__subdf3>
    13ac:	d9000c17 	ldw	r4,48(sp)
    13b0:	d9400d17 	ldw	r5,52(sp)
    13b4:	058b80f4 	movhi	r22,11779
    13b8:	b59c1cc4 	addi	r22,r22,28787
    13bc:	05cee8f4 	movhi	r23,15267
    13c0:	bdc66284 	addi	r23,r23,6538
    13c4:	b00d883a 	mov	r6,r22
    13c8:	b80f883a 	mov	r7,r23
    13cc:	d8801115 	stw	r2,68(sp)
    13d0:	d8c01215 	stw	r3,72(sp)
    13d4:	d8800815 	stw	r2,32(sp)
    13d8:	0003ef80 	call	3ef8 <__muldf3>
    13dc:	d9001217 	ldw	r4,72(sp)
    13e0:	d9400f17 	ldw	r5,60(sp)
    13e4:	d9800817 	ldw	r6,32(sp)
    13e8:	d9000915 	stw	r4,36(sp)
    13ec:	d9c01217 	ldw	r7,72(sp)
    13f0:	d9000e17 	ldw	r4,56(sp)
    13f4:	1021883a 	mov	r16,r2
    13f8:	1823883a 	mov	r17,r3
    13fc:	0003e040 	call	3e04 <__subdf3>
    1400:	180b883a 	mov	r5,r3
    1404:	900d883a 	mov	r6,r18
    1408:	980f883a 	mov	r7,r19
    140c:	1009883a 	mov	r4,r2
    1410:	0003e040 	call	3e04 <__subdf3>
    1414:	180f883a 	mov	r7,r3
    1418:	880b883a 	mov	r5,r17
    141c:	8009883a 	mov	r4,r16
    1420:	100d883a 	mov	r6,r2
    1424:	0003e040 	call	3e04 <__subdf3>
    1428:	d9000817 	ldw	r4,32(sp)
    142c:	d9401217 	ldw	r5,72(sp)
    1430:	180f883a 	mov	r7,r3
    1434:	100d883a 	mov	r6,r2
    1438:	1021883a 	mov	r16,r2
    143c:	1823883a 	mov	r17,r3
    1440:	0003e040 	call	3e04 <__subdf3>
    1444:	1810d53a 	srli	r8,r3,20
    1448:	1009883a 	mov	r4,r2
    144c:	d8801017 	ldw	r2,64(sp)
    1450:	4201ffcc 	andi	r8,r8,2047
    1454:	180b883a 	mov	r5,r3
    1458:	1211c83a 	sub	r8,r2,r8
    145c:	00800c44 	movi	r2,49
    1460:	e1000015 	stw	r4,0(fp)
    1464:	e1400115 	stw	r5,4(fp)
    1468:	1200f016 	blt	r2,r8,182c <__ieee754_rem_pio2+0x76c>
    146c:	d8c00817 	ldw	r3,32(sp)
    1470:	d9001217 	ldw	r4,72(sp)
    1474:	d8c00e15 	stw	r3,56(sp)
    1478:	d9000f15 	stw	r4,60(sp)
    147c:	e1800017 	ldw	r6,0(fp)
    1480:	e1c00117 	ldw	r7,4(fp)
    1484:	d9400f17 	ldw	r5,60(sp)
    1488:	d9000e17 	ldw	r4,56(sp)
    148c:	0003e040 	call	3e04 <__subdf3>
    1490:	180b883a 	mov	r5,r3
    1494:	800d883a 	mov	r6,r16
    1498:	880f883a 	mov	r7,r17
    149c:	1009883a 	mov	r4,r2
    14a0:	0003e040 	call	3e04 <__subdf3>
    14a4:	d9400a17 	ldw	r5,40(sp)
    14a8:	e0800215 	stw	r2,8(fp)
    14ac:	e1800204 	addi	r6,fp,8
    14b0:	30c00115 	stw	r3,4(r6)
    14b4:	283f1b0e 	bge	r5,zero,1124 <__ieee754_rem_pio2+0x64>
    14b8:	e0c00117 	ldw	r3,4(fp)
    14bc:	d8800b17 	ldw	r2,44(sp)
    14c0:	18e0003c 	xorhi	r3,r3,32768
    14c4:	0085c83a 	sub	r2,zero,r2
    14c8:	e0c00115 	stw	r3,4(fp)
    14cc:	d8800b15 	stw	r2,44(sp)
    14d0:	30800117 	ldw	r2,4(r6)
    14d4:	10a0003c 	xorhi	r2,r2,32768
    14d8:	30800115 	stw	r2,4(r6)
    14dc:	003f1106 	br	1124 <__ieee754_rem_pio2+0x64>
    14e0:	04151034 	movhi	r16,21568
    14e4:	044ffe74 	movhi	r17,16377
    14e8:	8c487ec4 	addi	r17,r17,8699
    14ec:	4809883a 	mov	r4,r9
    14f0:	800d883a 	mov	r6,r16
    14f4:	880f883a 	mov	r7,r17
    14f8:	0003e840 	call	3e84 <__adddf3>
    14fc:	1025883a 	mov	r18,r2
    1500:	1827883a 	mov	r19,r3
    1504:	b440a326 	beq	r22,r17,1794 <__ieee754_rem_pio2+0x6d4>
    1508:	040698b4 	movhi	r16,6754
    150c:	8418cc44 	addi	r16,r16,25393
    1510:	044f7474 	movhi	r17,15825
    1514:	8c6d1844 	addi	r17,r17,-19359
    1518:	1009883a 	mov	r4,r2
    151c:	180b883a 	mov	r5,r3
    1520:	800d883a 	mov	r6,r16
    1524:	880f883a 	mov	r7,r17
    1528:	0003e840 	call	3e84 <__adddf3>
    152c:	100d883a 	mov	r6,r2
    1530:	9009883a 	mov	r4,r18
    1534:	980b883a 	mov	r5,r19
    1538:	180f883a 	mov	r7,r3
    153c:	e0800015 	stw	r2,0(fp)
    1540:	e0c00115 	stw	r3,4(fp)
    1544:	0003e040 	call	3e04 <__subdf3>
    1548:	1009883a 	mov	r4,r2
    154c:	800d883a 	mov	r6,r16
    1550:	880f883a 	mov	r7,r17
    1554:	180b883a 	mov	r5,r3
    1558:	0003e840 	call	3e84 <__adddf3>
    155c:	1009883a 	mov	r4,r2
    1560:	00bfffc4 	movi	r2,-1
    1564:	d8800b15 	stw	r2,44(sp)
    1568:	e0c00315 	stw	r3,12(fp)
    156c:	e1000215 	stw	r4,8(fp)
    1570:	003eec06 	br	1124 <__ieee754_rem_pio2+0x64>
    1574:	b005d53a 	srai	r2,r22,20
    1578:	4821883a 	mov	r16,r9
    157c:	05505c34 	movhi	r21,16752
    1580:	15fefa84 	addi	r23,r2,-1046
    1584:	b826953a 	slli	r19,r23,20
    1588:	0029883a 	mov	r20,zero
    158c:	048000c4 	movi	r18,3
    1590:	b4e7c83a 	sub	r19,r22,r19
    1594:	980b883a 	mov	r5,r19
    1598:	000454c0 	call	454c <__fixdfsi>
    159c:	1009883a 	mov	r4,r2
    15a0:	00044540 	call	4454 <__floatsidf>
    15a4:	980b883a 	mov	r5,r19
    15a8:	8009883a 	mov	r4,r16
    15ac:	180f883a 	mov	r7,r3
    15b0:	100d883a 	mov	r6,r2
    15b4:	d8800215 	stw	r2,8(sp)
    15b8:	d8c00315 	stw	r3,12(sp)
    15bc:	0003e040 	call	3e04 <__subdf3>
    15c0:	180b883a 	mov	r5,r3
    15c4:	a00d883a 	mov	r6,r20
    15c8:	a80f883a 	mov	r7,r21
    15cc:	1009883a 	mov	r4,r2
    15d0:	0003ef80 	call	3ef8 <__muldf3>
    15d4:	180b883a 	mov	r5,r3
    15d8:	1009883a 	mov	r4,r2
    15dc:	1823883a 	mov	r17,r3
    15e0:	1021883a 	mov	r16,r2
    15e4:	000454c0 	call	454c <__fixdfsi>
    15e8:	1009883a 	mov	r4,r2
    15ec:	00044540 	call	4454 <__floatsidf>
    15f0:	880b883a 	mov	r5,r17
    15f4:	8009883a 	mov	r4,r16
    15f8:	180f883a 	mov	r7,r3
    15fc:	100d883a 	mov	r6,r2
    1600:	d8800415 	stw	r2,16(sp)
    1604:	d8c00515 	stw	r3,20(sp)
    1608:	0003e040 	call	3e04 <__subdf3>
    160c:	180b883a 	mov	r5,r3
    1610:	000d883a 	mov	r6,zero
    1614:	a80f883a 	mov	r7,r21
    1618:	1009883a 	mov	r4,r2
    161c:	0003ef80 	call	3ef8 <__muldf3>
    1620:	d8c00715 	stw	r3,28(sp)
    1624:	d8800615 	stw	r2,24(sp)
    1628:	00000106 	br	1630 <__ieee754_rem_pio2+0x570>
    162c:	8025883a 	mov	r18,r16
    1630:	943fffc4 	addi	r16,r18,-1
    1634:	800890fa 	slli	r4,r16,3
    1638:	d9400204 	addi	r5,sp,8
    163c:	000d883a 	mov	r6,zero
    1640:	2149883a 	add	r4,r4,r5
    1644:	20c00117 	ldw	r3,4(r4)
    1648:	20800017 	ldw	r2,0(r4)
    164c:	000f883a 	mov	r7,zero
    1650:	180b883a 	mov	r5,r3
    1654:	1009883a 	mov	r4,r2
    1658:	00042bc0 	call	42bc <__eqdf2>
    165c:	103ff326 	beq	r2,zero,162c <__ieee754_rem_pio2+0x56c>
    1660:	00800084 	movi	r2,2
    1664:	00c00074 	movhi	r3,1
    1668:	18e87e04 	addi	r3,r3,-24072
    166c:	b80d883a 	mov	r6,r23
    1670:	900f883a 	mov	r7,r18
    1674:	d9000204 	addi	r4,sp,8
    1678:	e00b883a 	mov	r5,fp
    167c:	d8800015 	stw	r2,0(sp)
    1680:	d8c00115 	stw	r3,4(sp)
    1684:	0001e140 	call	1e14 <__kernel_rem_pio2>
    1688:	d8800b15 	stw	r2,44(sp)
    168c:	d8800a17 	ldw	r2,40(sp)
    1690:	103ea40e 	bge	r2,zero,1124 <__ieee754_rem_pio2+0x64>
    1694:	e0800117 	ldw	r2,4(fp)
    1698:	d8c00b17 	ldw	r3,44(sp)
    169c:	e1000204 	addi	r4,fp,8
    16a0:	10a0003c 	xorhi	r2,r2,32768
    16a4:	00c7c83a 	sub	r3,zero,r3
    16a8:	e0800115 	stw	r2,4(fp)
    16ac:	d8c00b15 	stw	r3,44(sp)
    16b0:	20c00117 	ldw	r3,4(r4)
    16b4:	18e0003c 	xorhi	r3,r3,32768
    16b8:	20c00115 	stw	r3,4(r4)
    16bc:	003e9906 	br	1124 <__ieee754_rem_pio2+0x64>
    16c0:	00869834 	movhi	r2,6752
    16c4:	00cf7474 	movhi	r3,15825
    16c8:	18ed1844 	addi	r3,r3,-19359
    16cc:	9009883a 	mov	r4,r18
    16d0:	980b883a 	mov	r5,r19
    16d4:	180f883a 	mov	r7,r3
    16d8:	100d883a 	mov	r6,r2
    16dc:	0003e040 	call	3e04 <__subdf3>
    16e0:	048b80f4 	movhi	r18,11779
    16e4:	949c1cc4 	addi	r18,r18,28787
    16e8:	04cee8f4 	movhi	r19,15267
    16ec:	9cc66284 	addi	r19,r19,6538
    16f0:	1009883a 	mov	r4,r2
    16f4:	180b883a 	mov	r5,r3
    16f8:	900d883a 	mov	r6,r18
    16fc:	980f883a 	mov	r7,r19
    1700:	1021883a 	mov	r16,r2
    1704:	1823883a 	mov	r17,r3
    1708:	0003e040 	call	3e04 <__subdf3>
    170c:	100d883a 	mov	r6,r2
    1710:	8009883a 	mov	r4,r16
    1714:	880b883a 	mov	r5,r17
    1718:	180f883a 	mov	r7,r3
    171c:	e0800015 	stw	r2,0(fp)
    1720:	e0c00115 	stw	r3,4(fp)
    1724:	0003e040 	call	3e04 <__subdf3>
    1728:	180b883a 	mov	r5,r3
    172c:	1009883a 	mov	r4,r2
    1730:	900d883a 	mov	r6,r18
    1734:	980f883a 	mov	r7,r19
    1738:	0003e040 	call	3e04 <__subdf3>
    173c:	180b883a 	mov	r5,r3
    1740:	1009883a 	mov	r4,r2
    1744:	00c00044 	movi	r3,1
    1748:	d8c00b15 	stw	r3,44(sp)
    174c:	e1400315 	stw	r5,12(fp)
    1750:	e1000215 	stw	r4,8(fp)
    1754:	003e7306 	br	1124 <__ieee754_rem_pio2+0x64>
    1758:	2105883a 	add	r2,r4,r4
    175c:	1085883a 	add	r2,r2,r2
    1760:	00c00074 	movhi	r3,1
    1764:	18e85e04 	addi	r3,r3,-24200
    1768:	10c5883a 	add	r2,r2,r3
    176c:	113fff17 	ldw	r4,-4(r2)
    1770:	b13eef26 	beq	r22,r4,1330 <__ieee754_rem_pio2+0x270>
    1774:	980b883a 	mov	r5,r19
    1778:	400f883a 	mov	r7,r8
    177c:	9009883a 	mov	r4,r18
    1780:	800d883a 	mov	r6,r16
    1784:	0003e040 	call	3e04 <__subdf3>
    1788:	e0c00115 	stw	r3,4(fp)
    178c:	e0800015 	stw	r2,0(fp)
    1790:	003f3a06 	br	147c <__ieee754_rem_pio2+0x3bc>
    1794:	00869834 	movhi	r2,6752
    1798:	00cf7474 	movhi	r3,15825
    179c:	18ed1844 	addi	r3,r3,-19359
    17a0:	9009883a 	mov	r4,r18
    17a4:	980b883a 	mov	r5,r19
    17a8:	180f883a 	mov	r7,r3
    17ac:	100d883a 	mov	r6,r2
    17b0:	0003e840 	call	3e84 <__adddf3>
    17b4:	048b80f4 	movhi	r18,11779
    17b8:	949c1cc4 	addi	r18,r18,28787
    17bc:	04cee8f4 	movhi	r19,15267
    17c0:	9cc66284 	addi	r19,r19,6538
    17c4:	1009883a 	mov	r4,r2
    17c8:	180b883a 	mov	r5,r3
    17cc:	900d883a 	mov	r6,r18
    17d0:	980f883a 	mov	r7,r19
    17d4:	1021883a 	mov	r16,r2
    17d8:	1823883a 	mov	r17,r3
    17dc:	0003e840 	call	3e84 <__adddf3>
    17e0:	100d883a 	mov	r6,r2
    17e4:	8009883a 	mov	r4,r16
    17e8:	880b883a 	mov	r5,r17
    17ec:	180f883a 	mov	r7,r3
    17f0:	e0800015 	stw	r2,0(fp)
    17f4:	e0c00115 	stw	r3,4(fp)
    17f8:	0003e040 	call	3e04 <__subdf3>
    17fc:	180b883a 	mov	r5,r3
    1800:	1009883a 	mov	r4,r2
    1804:	900d883a 	mov	r6,r18
    1808:	980f883a 	mov	r7,r19
    180c:	0003e840 	call	3e84 <__adddf3>
    1810:	180b883a 	mov	r5,r3
    1814:	1009883a 	mov	r4,r2
    1818:	00ffffc4 	movi	r3,-1
    181c:	d8c00b15 	stw	r3,44(sp)
    1820:	e1400315 	stw	r5,12(fp)
    1824:	e1000215 	stw	r4,8(fp)
    1828:	003e3e06 	br	1124 <__ieee754_rem_pio2+0x64>
    182c:	d9000c17 	ldw	r4,48(sp)
    1830:	d9400d17 	ldw	r5,52(sp)
    1834:	018b8034 	movhi	r6,11776
    1838:	b80f883a 	mov	r7,r23
    183c:	0003ef80 	call	3ef8 <__muldf3>
    1840:	d9000817 	ldw	r4,32(sp)
    1844:	d9401217 	ldw	r5,72(sp)
    1848:	100d883a 	mov	r6,r2
    184c:	180f883a 	mov	r7,r3
    1850:	1025883a 	mov	r18,r2
    1854:	1827883a 	mov	r19,r3
    1858:	0003e040 	call	3e04 <__subdf3>
    185c:	d9400d17 	ldw	r5,52(sp)
    1860:	d9000c17 	ldw	r4,48(sp)
    1864:	02094834 	movhi	r8,9504
    1868:	42127044 	addi	r8,r8,18881
    186c:	024e5f34 	movhi	r9,14716
    1870:	4a60e684 	addi	r9,r9,-31846
    1874:	480f883a 	mov	r7,r9
    1878:	400d883a 	mov	r6,r8
    187c:	182b883a 	mov	r21,r3
    1880:	d8800e15 	stw	r2,56(sp)
    1884:	0003ef80 	call	3ef8 <__muldf3>
    1888:	d9000817 	ldw	r4,32(sp)
    188c:	d9401217 	ldw	r5,72(sp)
    1890:	d9800e17 	ldw	r6,56(sp)
    1894:	a80f883a 	mov	r7,r21
    1898:	1021883a 	mov	r16,r2
    189c:	1823883a 	mov	r17,r3
    18a0:	dd400f15 	stw	r21,60(sp)
    18a4:	0003e040 	call	3e04 <__subdf3>
    18a8:	180b883a 	mov	r5,r3
    18ac:	900d883a 	mov	r6,r18
    18b0:	980f883a 	mov	r7,r19
    18b4:	1009883a 	mov	r4,r2
    18b8:	0003e040 	call	3e04 <__subdf3>
    18bc:	180f883a 	mov	r7,r3
    18c0:	880b883a 	mov	r5,r17
    18c4:	8009883a 	mov	r4,r16
    18c8:	100d883a 	mov	r6,r2
    18cc:	0003e040 	call	3e04 <__subdf3>
    18d0:	d9000e17 	ldw	r4,56(sp)
    18d4:	1021883a 	mov	r16,r2
    18d8:	1823883a 	mov	r17,r3
    18dc:	a80b883a 	mov	r5,r21
    18e0:	180f883a 	mov	r7,r3
    18e4:	003fa606 	br	1780 <__ieee754_rem_pio2+0x6c0>

000018e8 <__kernel_cos>:
    18e8:	defff104 	addi	sp,sp,-60
    18ec:	00a00034 	movhi	r2,32768
    18f0:	10bfffc4 	addi	r2,r2,-1
    18f4:	dd800c15 	stw	r22,48(sp)
    18f8:	116c703a 	and	r22,r2,r5
    18fc:	0005883a 	mov	r2,zero
    1900:	dd000a15 	stw	r20,40(sp)
    1904:	d8800215 	stw	r2,8(sp)
    1908:	2029883a 	mov	r20,r4
    190c:	008f9034 	movhi	r2,15936
    1910:	10bfffc4 	addi	r2,r2,-1
    1914:	0009883a 	mov	r4,zero
    1918:	dd400b15 	stw	r21,44(sp)
    191c:	dfc00e15 	stw	ra,56(sp)
    1920:	ddc00d15 	stw	r23,52(sp)
    1924:	dcc00915 	stw	r19,36(sp)
    1928:	dc800815 	stw	r18,32(sp)
    192c:	dc400715 	stw	r17,28(sp)
    1930:	dc000615 	stw	r16,24(sp)
    1934:	282b883a 	mov	r21,r5
    1938:	d9800415 	stw	r6,16(sp)
    193c:	d9c00515 	stw	r7,20(sp)
    1940:	d9000315 	stw	r4,12(sp)
    1944:	15809216 	blt	r2,r22,1b90 <__kernel_cos+0x2a8>
    1948:	a009883a 	mov	r4,r20
    194c:	000454c0 	call	454c <__fixdfsi>
    1950:	10011c26 	beq	r2,zero,1dc4 <__kernel_cos+0x4dc>
    1954:	a009883a 	mov	r4,r20
    1958:	a80b883a 	mov	r5,r21
    195c:	a00d883a 	mov	r6,r20
    1960:	a80f883a 	mov	r7,r21
    1964:	0003ef80 	call	3ef8 <__muldf3>
    1968:	1021883a 	mov	r16,r2
    196c:	1823883a 	mov	r17,r3
    1970:	1025883a 	mov	r18,r2
    1974:	1827883a 	mov	r19,r3
    1978:	00afa234 	movhi	r2,48776
    197c:	108e3504 	addi	r2,r2,14548
    1980:	00ef6a74 	movhi	r3,48553
    1984:	18feba44 	addi	r3,r3,-1303
    1988:	8009883a 	mov	r4,r16
    198c:	880b883a 	mov	r5,r17
    1990:	180f883a 	mov	r7,r3
    1994:	100d883a 	mov	r6,r2
    1998:	0003ef80 	call	3ef8 <__muldf3>
    199c:	022f6d74 	movhi	r8,48565
    19a0:	422c7104 	addi	r8,r8,-20028
    19a4:	024f88b4 	movhi	r9,15906
    19a8:	4a7ba784 	addi	r9,r9,-4450
    19ac:	480f883a 	mov	r7,r9
    19b0:	400d883a 	mov	r6,r8
    19b4:	180b883a 	mov	r5,r3
    19b8:	1009883a 	mov	r4,r2
    19bc:	0003e840 	call	3e84 <__adddf3>
    19c0:	180f883a 	mov	r7,r3
    19c4:	8009883a 	mov	r4,r16
    19c8:	880b883a 	mov	r5,r17
    19cc:	100d883a 	mov	r6,r2
    19d0:	0003ef80 	call	3ef8 <__muldf3>
    19d4:	02202734 	movhi	r8,32924
    19d8:	4214ab44 	addi	r8,r8,21165
    19dc:	024fa4b4 	movhi	r9,16018
    19e0:	4a5f93c4 	addi	r9,r9,32335
    19e4:	480f883a 	mov	r7,r9
    19e8:	400d883a 	mov	r6,r8
    19ec:	180b883a 	mov	r5,r3
    19f0:	1009883a 	mov	r4,r2
    19f4:	0003e040 	call	3e04 <__subdf3>
    19f8:	180f883a 	mov	r7,r3
    19fc:	8009883a 	mov	r4,r16
    1a00:	880b883a 	mov	r5,r17
    1a04:	100d883a 	mov	r6,r2
    1a08:	0003ef80 	call	3ef8 <__muldf3>
    1a0c:	020672f4 	movhi	r8,6603
    1a10:	42056404 	addi	r8,r8,5520
    1a14:	024fbeb4 	movhi	r9,16122
    1a18:	4a406804 	addi	r9,r9,416
    1a1c:	480f883a 	mov	r7,r9
    1a20:	400d883a 	mov	r6,r8
    1a24:	180b883a 	mov	r5,r3
    1a28:	1009883a 	mov	r4,r2
    1a2c:	0003e840 	call	3e84 <__adddf3>
    1a30:	180f883a 	mov	r7,r3
    1a34:	8009883a 	mov	r4,r16
    1a38:	880b883a 	mov	r5,r17
    1a3c:	100d883a 	mov	r6,r2
    1a40:	0003ef80 	call	3ef8 <__muldf3>
    1a44:	0205b074 	movhi	r8,5825
    1a48:	42145dc4 	addi	r8,r8,20855
    1a4c:	024fd5f4 	movhi	r9,16215
    1a50:	4a705b04 	addi	r9,r9,-16020
    1a54:	480f883a 	mov	r7,r9
    1a58:	400d883a 	mov	r6,r8
    1a5c:	180b883a 	mov	r5,r3
    1a60:	1009883a 	mov	r4,r2
    1a64:	0003e040 	call	3e04 <__subdf3>
    1a68:	180f883a 	mov	r7,r3
    1a6c:	8009883a 	mov	r4,r16
    1a70:	880b883a 	mov	r5,r17
    1a74:	100d883a 	mov	r6,r2
    1a78:	0003ef80 	call	3ef8 <__muldf3>
    1a7c:	02155574 	movhi	r8,21845
    1a80:	42155304 	addi	r8,r8,21836
    1a84:	024fe974 	movhi	r9,16293
    1a88:	4a555544 	addi	r9,r9,21845
    1a8c:	480f883a 	mov	r7,r9
    1a90:	400d883a 	mov	r6,r8
    1a94:	180b883a 	mov	r5,r3
    1a98:	1009883a 	mov	r4,r2
    1a9c:	0003e840 	call	3e84 <__adddf3>
    1aa0:	180f883a 	mov	r7,r3
    1aa4:	880b883a 	mov	r5,r17
    1aa8:	8009883a 	mov	r4,r16
    1aac:	100d883a 	mov	r6,r2
    1ab0:	0003ef80 	call	3ef8 <__muldf3>
    1ab4:	1021883a 	mov	r16,r2
    1ab8:	1823883a 	mov	r17,r3
    1abc:	0005883a 	mov	r2,zero
    1ac0:	00cff834 	movhi	r3,16352
    1ac4:	9009883a 	mov	r4,r18
    1ac8:	980b883a 	mov	r5,r19
    1acc:	180f883a 	mov	r7,r3
    1ad0:	100d883a 	mov	r6,r2
    1ad4:	0003ef80 	call	3ef8 <__muldf3>
    1ad8:	980b883a 	mov	r5,r19
    1adc:	880f883a 	mov	r7,r17
    1ae0:	9009883a 	mov	r4,r18
    1ae4:	800d883a 	mov	r6,r16
    1ae8:	1025883a 	mov	r18,r2
    1aec:	1827883a 	mov	r19,r3
    1af0:	0003ef80 	call	3ef8 <__muldf3>
    1af4:	d9c00517 	ldw	r7,20(sp)
    1af8:	d9800417 	ldw	r6,16(sp)
    1afc:	a80b883a 	mov	r5,r21
    1b00:	a009883a 	mov	r4,r20
    1b04:	1021883a 	mov	r16,r2
    1b08:	1823883a 	mov	r17,r3
    1b0c:	0003ef80 	call	3ef8 <__muldf3>
    1b10:	180f883a 	mov	r7,r3
    1b14:	880b883a 	mov	r5,r17
    1b18:	8009883a 	mov	r4,r16
    1b1c:	100d883a 	mov	r6,r2
    1b20:	0003e040 	call	3e04 <__subdf3>
    1b24:	180f883a 	mov	r7,r3
    1b28:	980b883a 	mov	r5,r19
    1b2c:	9009883a 	mov	r4,r18
    1b30:	100d883a 	mov	r6,r2
    1b34:	0003e040 	call	3e04 <__subdf3>
    1b38:	0011883a 	mov	r8,zero
    1b3c:	024ffc34 	movhi	r9,16368
    1b40:	480b883a 	mov	r5,r9
    1b44:	180f883a 	mov	r7,r3
    1b48:	4009883a 	mov	r4,r8
    1b4c:	100d883a 	mov	r6,r2
    1b50:	0003e040 	call	3e04 <__subdf3>
    1b54:	100d883a 	mov	r6,r2
    1b58:	180f883a 	mov	r7,r3
    1b5c:	3005883a 	mov	r2,r6
    1b60:	3807883a 	mov	r3,r7
    1b64:	dfc00e17 	ldw	ra,56(sp)
    1b68:	ddc00d17 	ldw	r23,52(sp)
    1b6c:	dd800c17 	ldw	r22,48(sp)
    1b70:	dd400b17 	ldw	r21,44(sp)
    1b74:	dd000a17 	ldw	r20,40(sp)
    1b78:	dcc00917 	ldw	r19,36(sp)
    1b7c:	dc800817 	ldw	r18,32(sp)
    1b80:	dc400717 	ldw	r17,28(sp)
    1b84:	dc000617 	ldw	r16,24(sp)
    1b88:	dec00f04 	addi	sp,sp,60
    1b8c:	f800283a 	ret
    1b90:	280f883a 	mov	r7,r5
    1b94:	a009883a 	mov	r4,r20
    1b98:	a00d883a 	mov	r6,r20
    1b9c:	0003ef80 	call	3ef8 <__muldf3>
    1ba0:	1021883a 	mov	r16,r2
    1ba4:	1823883a 	mov	r17,r3
    1ba8:	1025883a 	mov	r18,r2
    1bac:	1827883a 	mov	r19,r3
    1bb0:	00afa234 	movhi	r2,48776
    1bb4:	108e3504 	addi	r2,r2,14548
    1bb8:	00ef6a74 	movhi	r3,48553
    1bbc:	18feba44 	addi	r3,r3,-1303
    1bc0:	8009883a 	mov	r4,r16
    1bc4:	880b883a 	mov	r5,r17
    1bc8:	180f883a 	mov	r7,r3
    1bcc:	100d883a 	mov	r6,r2
    1bd0:	0003ef80 	call	3ef8 <__muldf3>
    1bd4:	022f6d74 	movhi	r8,48565
    1bd8:	422c7104 	addi	r8,r8,-20028
    1bdc:	024f88b4 	movhi	r9,15906
    1be0:	4a7ba784 	addi	r9,r9,-4450
    1be4:	480f883a 	mov	r7,r9
    1be8:	400d883a 	mov	r6,r8
    1bec:	180b883a 	mov	r5,r3
    1bf0:	1009883a 	mov	r4,r2
    1bf4:	0003e840 	call	3e84 <__adddf3>
    1bf8:	180f883a 	mov	r7,r3
    1bfc:	8009883a 	mov	r4,r16
    1c00:	880b883a 	mov	r5,r17
    1c04:	100d883a 	mov	r6,r2
    1c08:	0003ef80 	call	3ef8 <__muldf3>
    1c0c:	02202734 	movhi	r8,32924
    1c10:	4214ab44 	addi	r8,r8,21165
    1c14:	024fa4b4 	movhi	r9,16018
    1c18:	4a5f93c4 	addi	r9,r9,32335
    1c1c:	480f883a 	mov	r7,r9
    1c20:	400d883a 	mov	r6,r8
    1c24:	180b883a 	mov	r5,r3
    1c28:	1009883a 	mov	r4,r2
    1c2c:	0003e040 	call	3e04 <__subdf3>
    1c30:	180f883a 	mov	r7,r3
    1c34:	8009883a 	mov	r4,r16
    1c38:	880b883a 	mov	r5,r17
    1c3c:	100d883a 	mov	r6,r2
    1c40:	0003ef80 	call	3ef8 <__muldf3>
    1c44:	020672f4 	movhi	r8,6603
    1c48:	42056404 	addi	r8,r8,5520
    1c4c:	024fbeb4 	movhi	r9,16122
    1c50:	4a406804 	addi	r9,r9,416
    1c54:	480f883a 	mov	r7,r9
    1c58:	400d883a 	mov	r6,r8
    1c5c:	180b883a 	mov	r5,r3
    1c60:	1009883a 	mov	r4,r2
    1c64:	0003e840 	call	3e84 <__adddf3>
    1c68:	180f883a 	mov	r7,r3
    1c6c:	8009883a 	mov	r4,r16
    1c70:	880b883a 	mov	r5,r17
    1c74:	100d883a 	mov	r6,r2
    1c78:	0003ef80 	call	3ef8 <__muldf3>
    1c7c:	0205b074 	movhi	r8,5825
    1c80:	42145dc4 	addi	r8,r8,20855
    1c84:	024fd5f4 	movhi	r9,16215
    1c88:	4a705b04 	addi	r9,r9,-16020
    1c8c:	480f883a 	mov	r7,r9
    1c90:	400d883a 	mov	r6,r8
    1c94:	180b883a 	mov	r5,r3
    1c98:	1009883a 	mov	r4,r2
    1c9c:	0003e040 	call	3e04 <__subdf3>
    1ca0:	180f883a 	mov	r7,r3
    1ca4:	8009883a 	mov	r4,r16
    1ca8:	880b883a 	mov	r5,r17
    1cac:	100d883a 	mov	r6,r2
    1cb0:	0003ef80 	call	3ef8 <__muldf3>
    1cb4:	02155574 	movhi	r8,21845
    1cb8:	42155304 	addi	r8,r8,21836
    1cbc:	024fe974 	movhi	r9,16293
    1cc0:	4a555544 	addi	r9,r9,21845
    1cc4:	480f883a 	mov	r7,r9
    1cc8:	400d883a 	mov	r6,r8
    1ccc:	180b883a 	mov	r5,r3
    1cd0:	1009883a 	mov	r4,r2
    1cd4:	0003e840 	call	3e84 <__adddf3>
    1cd8:	180f883a 	mov	r7,r3
    1cdc:	880b883a 	mov	r5,r17
    1ce0:	8009883a 	mov	r4,r16
    1ce4:	100d883a 	mov	r6,r2
    1ce8:	0003ef80 	call	3ef8 <__muldf3>
    1cec:	1021883a 	mov	r16,r2
    1cf0:	008ff4f4 	movhi	r2,16339
    1cf4:	108ccc84 	addi	r2,r2,13106
    1cf8:	1823883a 	mov	r17,r3
    1cfc:	15bf6f0e 	bge	r2,r22,1abc <__kernel_cos+0x1d4>
    1d00:	008ffa74 	movhi	r2,16361
    1d04:	1580320e 	bge	r2,r22,1dd0 <__kernel_cos+0x4e8>
    1d08:	0005883a 	mov	r2,zero
    1d0c:	010ff9f4 	movhi	r4,16359
    1d10:	002d883a 	mov	r22,zero
    1d14:	d8800015 	stw	r2,0(sp)
    1d18:	05cff4b4 	movhi	r23,16338
    1d1c:	d9000115 	stw	r4,4(sp)
    1d20:	0005883a 	mov	r2,zero
    1d24:	00cff834 	movhi	r3,16352
    1d28:	9009883a 	mov	r4,r18
    1d2c:	980b883a 	mov	r5,r19
    1d30:	180f883a 	mov	r7,r3
    1d34:	100d883a 	mov	r6,r2
    1d38:	0003ef80 	call	3ef8 <__muldf3>
    1d3c:	180b883a 	mov	r5,r3
    1d40:	b80f883a 	mov	r7,r23
    1d44:	1009883a 	mov	r4,r2
    1d48:	b00d883a 	mov	r6,r22
    1d4c:	0003e040 	call	3e04 <__subdf3>
    1d50:	980b883a 	mov	r5,r19
    1d54:	880f883a 	mov	r7,r17
    1d58:	9009883a 	mov	r4,r18
    1d5c:	800d883a 	mov	r6,r16
    1d60:	1025883a 	mov	r18,r2
    1d64:	1827883a 	mov	r19,r3
    1d68:	0003ef80 	call	3ef8 <__muldf3>
    1d6c:	d9c00517 	ldw	r7,20(sp)
    1d70:	d9800417 	ldw	r6,16(sp)
    1d74:	a80b883a 	mov	r5,r21
    1d78:	a009883a 	mov	r4,r20
    1d7c:	1021883a 	mov	r16,r2
    1d80:	1823883a 	mov	r17,r3
    1d84:	0003ef80 	call	3ef8 <__muldf3>
    1d88:	180f883a 	mov	r7,r3
    1d8c:	880b883a 	mov	r5,r17
    1d90:	8009883a 	mov	r4,r16
    1d94:	100d883a 	mov	r6,r2
    1d98:	0003e040 	call	3e04 <__subdf3>
    1d9c:	180f883a 	mov	r7,r3
    1da0:	980b883a 	mov	r5,r19
    1da4:	9009883a 	mov	r4,r18
    1da8:	100d883a 	mov	r6,r2
    1dac:	0003e040 	call	3e04 <__subdf3>
    1db0:	d9400117 	ldw	r5,4(sp)
    1db4:	d9000017 	ldw	r4,0(sp)
    1db8:	180f883a 	mov	r7,r3
    1dbc:	100d883a 	mov	r6,r2
    1dc0:	003f6306 	br	1b50 <__kernel_cos+0x268>
    1dc4:	000d883a 	mov	r6,zero
    1dc8:	01cffc34 	movhi	r7,16368
    1dcc:	003f6306 	br	1b5c <__kernel_cos+0x274>
    1dd0:	00bff834 	movhi	r2,65504
    1dd4:	b0ad883a 	add	r22,r22,r2
    1dd8:	dd800315 	stw	r22,12(sp)
    1ddc:	d9000317 	ldw	r4,12(sp)
    1de0:	0005883a 	mov	r2,zero
    1de4:	00cffc34 	movhi	r3,16368
    1de8:	002d883a 	mov	r22,zero
    1dec:	200f883a 	mov	r7,r4
    1df0:	202f883a 	mov	r23,r4
    1df4:	180b883a 	mov	r5,r3
    1df8:	1009883a 	mov	r4,r2
    1dfc:	b00d883a 	mov	r6,r22
    1e00:	d8800215 	stw	r2,8(sp)
    1e04:	0003e040 	call	3e04 <__subdf3>
    1e08:	d8800015 	stw	r2,0(sp)
    1e0c:	d8c00115 	stw	r3,4(sp)
    1e10:	003fc306 	br	1d20 <__kernel_cos+0x438>

00001e14 <__kernel_rem_pio2>:
    1e14:	deff5304 	addi	sp,sp,-692
    1e18:	d880ad17 	ldw	r2,692(sp)
    1e1c:	d9009615 	stw	r4,600(sp)
    1e20:	d9409715 	stw	r5,604(sp)
    1e24:	1087883a 	add	r3,r2,r2
    1e28:	18c7883a 	add	r3,r3,r3
    1e2c:	00800074 	movhi	r2,1
    1e30:	10a8c004 	addi	r2,r2,-23808
    1e34:	1887883a 	add	r3,r3,r2
    1e38:	18c00017 	ldw	r3,0(r3)
    1e3c:	313fff44 	addi	r4,r6,-3
    1e40:	01400604 	movi	r5,24
    1e44:	df00ab15 	stw	fp,684(sp)
    1e48:	dc00a315 	stw	r16,652(sp)
    1e4c:	d8c09515 	stw	r3,596(sp)
    1e50:	dfc0ac15 	stw	ra,688(sp)
    1e54:	ddc0aa15 	stw	r23,680(sp)
    1e58:	dd80a915 	stw	r22,676(sp)
    1e5c:	dd40a815 	stw	r21,672(sp)
    1e60:	dd00a715 	stw	r20,668(sp)
    1e64:	dcc0a615 	stw	r19,664(sp)
    1e68:	dc80a515 	stw	r18,660(sp)
    1e6c:	dc40a415 	stw	r17,656(sp)
    1e70:	3021883a 	mov	r16,r6
    1e74:	d9c09815 	stw	r7,608(sp)
    1e78:	000474c0 	call	474c <__divsi3>
    1e7c:	d8c09817 	ldw	r3,608(sp)
    1e80:	d8808c15 	stw	r2,560(sp)
    1e84:	1f3fffc4 	addi	fp,r3,-1
    1e88:	10031816 	blt	r2,zero,2aec <__kernel_rem_pio2+0xcd8>
    1e8c:	d9008c17 	ldw	r4,560(sp)
    1e90:	d9409517 	ldw	r5,596(sp)
    1e94:	20bffa24 	muli	r2,r4,-24
    1e98:	2f07883a 	add	r3,r5,fp
    1e9c:	8085883a 	add	r2,r16,r2
    1ea0:	10bffa04 	addi	r2,r2,-24
    1ea4:	d8809315 	stw	r2,588(sp)
    1ea8:	18001516 	blt	r3,zero,1f00 <__kernel_rem_pio2+0xec>
    1eac:	2721c83a 	sub	r16,r4,fp
    1eb0:	d980ae17 	ldw	r6,696(sp)
    1eb4:	8405883a 	add	r2,r16,r16
    1eb8:	1085883a 	add	r2,r2,r2
    1ebc:	30a3883a 	add	r17,r6,r2
    1ec0:	80e7883a 	add	r19,r16,r3
    1ec4:	dc801404 	addi	r18,sp,80
    1ec8:	00000106 	br	1ed0 <__kernel_rem_pio2+0xbc>
    1ecc:	84000044 	addi	r16,r16,1
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	000b883a 	mov	r5,zero
    1ed8:	80000416 	blt	r16,zero,1eec <__kernel_rem_pio2+0xd8>
    1edc:	89000017 	ldw	r4,0(r17)
    1ee0:	00044540 	call	4454 <__floatsidf>
    1ee4:	1009883a 	mov	r4,r2
    1ee8:	180b883a 	mov	r5,r3
    1eec:	91400115 	stw	r5,4(r18)
    1ef0:	91000015 	stw	r4,0(r18)
    1ef4:	8c400104 	addi	r17,r17,4
    1ef8:	94800204 	addi	r18,r18,8
    1efc:	84fff31e 	bne	r16,r19,1ecc <__kernel_rem_pio2+0xb8>
    1f00:	d9c09517 	ldw	r7,596(sp)
    1f04:	38002416 	blt	r7,zero,1f98 <__kernel_rem_pio2+0x184>
    1f08:	da809817 	ldw	r10,608(sp)
    1f0c:	e029883a 	mov	r20,fp
    1f10:	dd406404 	addi	r21,sp,400
    1f14:	3aaf883a 	add	r23,r7,r10
    1f18:	e02c403a 	cmpge	r22,fp,zero
    1f1c:	b0023e26 	beq	r22,zero,2818 <__kernel_rem_pio2+0xa04>
    1f20:	dcc09617 	ldw	r19,600(sp)
    1f24:	0021883a 	mov	r16,zero
    1f28:	0025883a 	mov	r18,zero
    1f2c:	0023883a 	mov	r17,zero
    1f30:	a489c83a 	sub	r4,r20,r18
    1f34:	200890fa 	slli	r4,r4,3
    1f38:	99800017 	ldw	r6,0(r19)
    1f3c:	99c00117 	ldw	r7,4(r19)
    1f40:	26c9883a 	add	r4,r4,sp
    1f44:	20c01517 	ldw	r3,84(r4)
    1f48:	20801417 	ldw	r2,80(r4)
    1f4c:	94800044 	addi	r18,r18,1
    1f50:	180b883a 	mov	r5,r3
    1f54:	1009883a 	mov	r4,r2
    1f58:	0003ef80 	call	3ef8 <__muldf3>
    1f5c:	180f883a 	mov	r7,r3
    1f60:	880b883a 	mov	r5,r17
    1f64:	8009883a 	mov	r4,r16
    1f68:	100d883a 	mov	r6,r2
    1f6c:	0003e840 	call	3e84 <__adddf3>
    1f70:	1021883a 	mov	r16,r2
    1f74:	d8809817 	ldw	r2,608(sp)
    1f78:	9cc00204 	addi	r19,r19,8
    1f7c:	1823883a 	mov	r17,r3
    1f80:	14bfeb1e 	bne	r2,r18,1f30 <__kernel_rem_pio2+0x11c>
    1f84:	a5000044 	addi	r20,r20,1
    1f88:	ac400115 	stw	r17,4(r21)
    1f8c:	ac000015 	stw	r16,0(r21)
    1f90:	ad400204 	addi	r21,r21,8
    1f94:	a5ffe11e 	bne	r20,r23,1f1c <__kernel_rem_pio2+0x108>
    1f98:	d8c09517 	ldw	r3,596(sp)
    1f9c:	d9409317 	ldw	r5,588(sp)
    1fa0:	e038403a 	cmpge	fp,fp,zero
    1fa4:	d8c08d15 	stw	r3,564(sp)
    1fa8:	d9008d17 	ldw	r4,564(sp)
    1fac:	18c5883a 	add	r2,r3,r3
    1fb0:	10c7883a 	add	r3,r2,r3
    1fb4:	1907883a 	add	r3,r3,r4
    1fb8:	1085883a 	add	r2,r2,r2
    1fbc:	16c5883a 	add	r2,r2,sp
    1fc0:	1ec7883a 	add	r3,r3,sp
    1fc4:	29400050 	cmplti	r5,r5,1
    1fc8:	df00a215 	stw	fp,648(sp)
    1fcc:	d8809915 	stw	r2,612(sp)
    1fd0:	d8c0a115 	stw	r3,644(sp)
    1fd4:	d940a015 	stw	r5,640(sp)
    1fd8:	d9808d17 	ldw	r6,564(sp)
    1fdc:	300490fa 	slli	r2,r6,3
    1fe0:	16c5883a 	add	r2,r2,sp
    1fe4:	15006417 	ldw	r20,400(r2)
    1fe8:	15406517 	ldw	r21,404(r2)
    1fec:	01802e0e 	bge	zero,r6,20a8 <__kernel_rem_pio2+0x294>
    1ff0:	102d883a 	mov	r22,r2
    1ff4:	302f883a 	mov	r23,r6
    1ff8:	d839883a 	mov	fp,sp
    1ffc:	0005883a 	mov	r2,zero
    2000:	00cf9c34 	movhi	r3,15984
    2004:	180f883a 	mov	r7,r3
    2008:	100d883a 	mov	r6,r2
    200c:	a009883a 	mov	r4,r20
    2010:	a80b883a 	mov	r5,r21
    2014:	0003ef80 	call	3ef8 <__muldf3>
    2018:	180b883a 	mov	r5,r3
    201c:	1009883a 	mov	r4,r2
    2020:	000454c0 	call	454c <__fixdfsi>
    2024:	1009883a 	mov	r4,r2
    2028:	00044540 	call	4454 <__floatsidf>
    202c:	1021883a 	mov	r16,r2
    2030:	1823883a 	mov	r17,r3
    2034:	0005883a 	mov	r2,zero
    2038:	00f05c34 	movhi	r3,49520
    203c:	180f883a 	mov	r7,r3
    2040:	8009883a 	mov	r4,r16
    2044:	880b883a 	mov	r5,r17
    2048:	100d883a 	mov	r6,r2
    204c:	0003ef80 	call	3ef8 <__muldf3>
    2050:	180b883a 	mov	r5,r3
    2054:	a80f883a 	mov	r7,r21
    2058:	a00d883a 	mov	r6,r20
    205c:	1009883a 	mov	r4,r2
    2060:	0003e840 	call	3e84 <__adddf3>
    2064:	180b883a 	mov	r5,r3
    2068:	1009883a 	mov	r4,r2
    206c:	000454c0 	call	454c <__fixdfsi>
    2070:	e0800015 	stw	r2,0(fp)
    2074:	b5bffe04 	addi	r22,r22,-8
    2078:	b0806417 	ldw	r2,400(r22)
    207c:	b0c06517 	ldw	r3,404(r22)
    2080:	8009883a 	mov	r4,r16
    2084:	880b883a 	mov	r5,r17
    2088:	180f883a 	mov	r7,r3
    208c:	100d883a 	mov	r6,r2
    2090:	0003e840 	call	3e84 <__adddf3>
    2094:	bdffffc4 	addi	r23,r23,-1
    2098:	e7000104 	addi	fp,fp,4
    209c:	1029883a 	mov	r20,r2
    20a0:	182b883a 	mov	r21,r3
    20a4:	b83fd51e 	bne	r23,zero,1ffc <__kernel_rem_pio2+0x1e8>
    20a8:	d9809317 	ldw	r6,588(sp)
    20ac:	a80b883a 	mov	r5,r21
    20b0:	a009883a 	mov	r4,r20
    20b4:	00031e40 	call	31e4 <scalbn>
    20b8:	0009883a 	mov	r4,zero
    20bc:	014ff034 	movhi	r5,16320
    20c0:	280f883a 	mov	r7,r5
    20c4:	200d883a 	mov	r6,r4
    20c8:	180b883a 	mov	r5,r3
    20cc:	1009883a 	mov	r4,r2
    20d0:	1021883a 	mov	r16,r2
    20d4:	1823883a 	mov	r17,r3
    20d8:	0003ef80 	call	3ef8 <__muldf3>
    20dc:	180b883a 	mov	r5,r3
    20e0:	1009883a 	mov	r4,r2
    20e4:	0002fc00 	call	2fc0 <floor>
    20e8:	0011883a 	mov	r8,zero
    20ec:	02700834 	movhi	r9,49184
    20f0:	480f883a 	mov	r7,r9
    20f4:	400d883a 	mov	r6,r8
    20f8:	180b883a 	mov	r5,r3
    20fc:	1009883a 	mov	r4,r2
    2100:	0003ef80 	call	3ef8 <__muldf3>
    2104:	180f883a 	mov	r7,r3
    2108:	100d883a 	mov	r6,r2
    210c:	880b883a 	mov	r5,r17
    2110:	8009883a 	mov	r4,r16
    2114:	0003e840 	call	3e84 <__adddf3>
    2118:	180b883a 	mov	r5,r3
    211c:	1009883a 	mov	r4,r2
    2120:	1823883a 	mov	r17,r3
    2124:	1021883a 	mov	r16,r2
    2128:	000454c0 	call	454c <__fixdfsi>
    212c:	1009883a 	mov	r4,r2
    2130:	d8809415 	stw	r2,592(sp)
    2134:	00044540 	call	4454 <__floatsidf>
    2138:	880b883a 	mov	r5,r17
    213c:	8009883a 	mov	r4,r16
    2140:	180f883a 	mov	r7,r3
    2144:	100d883a 	mov	r6,r2
    2148:	0003e040 	call	3e04 <__subdf3>
    214c:	d9c0a017 	ldw	r7,640(sp)
    2150:	180d883a 	mov	r6,r3
    2154:	1021883a 	mov	r16,r2
    2158:	1823883a 	mov	r17,r3
    215c:	38017d1e 	bne	r7,zero,2754 <__kernel_rem_pio2+0x940>
    2160:	da808d17 	ldw	r10,564(sp)
    2164:	d9009317 	ldw	r4,588(sp)
    2168:	00c00604 	movi	r3,24
    216c:	50bfffc4 	addi	r2,r10,-1
    2170:	1085883a 	add	r2,r2,r2
    2174:	1085883a 	add	r2,r2,r2
    2178:	16c5883a 	add	r2,r2,sp
    217c:	11400017 	ldw	r5,0(r2)
    2180:	1907c83a 	sub	r3,r3,r4
    2184:	d9c09317 	ldw	r7,588(sp)
    2188:	28cdd83a 	sra	r6,r5,r3
    218c:	010005c4 	movi	r4,23
    2190:	da809417 	ldw	r10,592(sp)
    2194:	30c6983a 	sll	r3,r6,r3
    2198:	21c9c83a 	sub	r4,r4,r7
    219c:	5195883a 	add	r10,r10,r6
    21a0:	28cbc83a 	sub	r5,r5,r3
    21a4:	2909d83a 	sra	r4,r5,r4
    21a8:	da809415 	stw	r10,592(sp)
    21ac:	11400015 	stw	r5,0(r2)
    21b0:	d9009215 	stw	r4,584(sp)
    21b4:	d9409217 	ldw	r5,584(sp)
    21b8:	0140270e 	bge	zero,r5,2258 <__kernel_rem_pio2+0x444>
    21bc:	d9809417 	ldw	r6,592(sp)
    21c0:	d9c08d17 	ldw	r7,564(sp)
    21c4:	31800044 	addi	r6,r6,1
    21c8:	d9809415 	stw	r6,592(sp)
    21cc:	01c1a50e 	bge	zero,r7,2864 <__kernel_rem_pio2+0xa50>
    21d0:	002d883a 	mov	r22,zero
    21d4:	000b883a 	mov	r5,zero
    21d8:	d809883a 	mov	r4,sp
    21dc:	01c04034 	movhi	r7,256
    21e0:	01804034 	movhi	r6,256
    21e4:	31bfffc4 	addi	r6,r6,-1
    21e8:	00000806 	br	220c <__kernel_rem_pio2+0x3f8>
    21ec:	38c5c83a 	sub	r2,r7,r3
    21f0:	18000226 	beq	r3,zero,21fc <__kernel_rem_pio2+0x3e8>
    21f4:	05800044 	movi	r22,1
    21f8:	20800015 	stw	r2,0(r4)
    21fc:	da808d17 	ldw	r10,564(sp)
    2200:	29400044 	addi	r5,r5,1
    2204:	21000104 	addi	r4,r4,4
    2208:	51400926 	beq	r10,r5,2230 <__kernel_rem_pio2+0x41c>
    220c:	b004c03a 	cmpne	r2,r22,zero
    2210:	20c00017 	ldw	r3,0(r4)
    2214:	103ff526 	beq	r2,zero,21ec <__kernel_rem_pio2+0x3d8>
    2218:	da808d17 	ldw	r10,564(sp)
    221c:	30c5c83a 	sub	r2,r6,r3
    2220:	29400044 	addi	r5,r5,1
    2224:	20800015 	stw	r2,0(r4)
    2228:	21000104 	addi	r4,r4,4
    222c:	517ff71e 	bne	r10,r5,220c <__kernel_rem_pio2+0x3f8>
    2230:	d880a017 	ldw	r2,640(sp)
    2234:	1000051e 	bne	r2,zero,224c <__kernel_rem_pio2+0x438>
    2238:	d8c09317 	ldw	r3,588(sp)
    223c:	00800044 	movi	r2,1
    2240:	18814e26 	beq	r3,r2,277c <__kernel_rem_pio2+0x968>
    2244:	00800084 	movi	r2,2
    2248:	18815826 	beq	r3,r2,27ac <__kernel_rem_pio2+0x998>
    224c:	d9c09217 	ldw	r7,584(sp)
    2250:	00800084 	movi	r2,2
    2254:	38806926 	beq	r7,r2,23fc <__kernel_rem_pio2+0x5e8>
    2258:	000d883a 	mov	r6,zero
    225c:	000f883a 	mov	r7,zero
    2260:	8009883a 	mov	r4,r16
    2264:	880b883a 	mov	r5,r17
    2268:	00042bc0 	call	42bc <__eqdf2>
    226c:	1000811e 	bne	r2,zero,2474 <__kernel_rem_pio2+0x660>
    2270:	da808d17 	ldw	r10,564(sp)
    2274:	d8809517 	ldw	r2,596(sp)
    2278:	51bfffc4 	addi	r6,r10,-1
    227c:	30800c16 	blt	r6,r2,22b0 <__kernel_rem_pio2+0x49c>
    2280:	3185883a 	add	r2,r6,r6
    2284:	1085883a 	add	r2,r2,r2
    2288:	16c9883a 	add	r4,r2,sp
    228c:	3007883a 	mov	r3,r6
    2290:	000b883a 	mov	r5,zero
    2294:	20800017 	ldw	r2,0(r4)
    2298:	d9c09517 	ldw	r7,596(sp)
    229c:	18ffffc4 	addi	r3,r3,-1
    22a0:	213fff04 	addi	r4,r4,-4
    22a4:	288ab03a 	or	r5,r5,r2
    22a8:	19fffa0e 	bge	r3,r7,2294 <__kernel_rem_pio2+0x480>
    22ac:	2800791e 	bne	r5,zero,2494 <__kernel_rem_pio2+0x680>
    22b0:	da809917 	ldw	r10,612(sp)
    22b4:	50bfff17 	ldw	r2,-4(r10)
    22b8:	1001511e 	bne	r2,zero,2800 <__kernel_rem_pio2+0x9ec>
    22bc:	d880a117 	ldw	r2,644(sp)
    22c0:	01000044 	movi	r4,1
    22c4:	10ffff04 	addi	r3,r2,-4
    22c8:	18ffff04 	addi	r3,r3,-4
    22cc:	18800017 	ldw	r2,0(r3)
    22d0:	21000044 	addi	r4,r4,1
    22d4:	103ffc26 	beq	r2,zero,22c8 <__kernel_rem_pio2+0x4b4>
    22d8:	d8c08d17 	ldw	r3,564(sp)
    22dc:	192f883a 	add	r23,r3,r4
    22e0:	1f000044 	addi	fp,r3,1
    22e4:	bf00020e 	bge	r23,fp,22f0 <__kernel_rem_pio2+0x4dc>
    22e8:	ddc08d15 	stw	r23,564(sp)
    22ec:	003f3a06 	br	1fd8 <__kernel_rem_pio2+0x1c4>
    22f0:	d9408c17 	ldw	r5,560(sp)
    22f4:	d9009817 	ldw	r4,608(sp)
    22f8:	da80ae17 	ldw	r10,696(sp)
    22fc:	1945883a 	add	r2,r3,r5
    2300:	190f883a 	add	r7,r3,r4
    2304:	1085883a 	add	r2,r2,r2
    2308:	380a90fa 	slli	r5,r7,3
    230c:	e00c90fa 	slli	r6,fp,3
    2310:	1085883a 	add	r2,r2,r2
    2314:	5085883a 	add	r2,r10,r2
    2318:	d8c01404 	addi	r3,sp,80
    231c:	d9006404 	addi	r4,sp,400
    2320:	10800104 	addi	r2,r2,4
    2324:	196b883a 	add	r21,r3,r5
    2328:	21a1883a 	add	r16,r4,r6
    232c:	d8809115 	stw	r2,580(sp)
    2330:	d9c09015 	stw	r7,576(sp)
    2334:	d8809117 	ldw	r2,580(sp)
    2338:	11000017 	ldw	r4,0(r2)
    233c:	00044540 	call	4454 <__floatsidf>
    2340:	a8c00115 	stw	r3,4(r21)
    2344:	d8c0a217 	ldw	r3,648(sp)
    2348:	a8800015 	stw	r2,0(r21)
    234c:	18002826 	beq	r3,zero,23f0 <__kernel_rem_pio2+0x5dc>
    2350:	d9009017 	ldw	r4,576(sp)
    2354:	dd009617 	ldw	r20,600(sp)
    2358:	0023883a 	mov	r17,zero
    235c:	200490fa 	slli	r2,r4,3
    2360:	002d883a 	mov	r22,zero
    2364:	0025883a 	mov	r18,zero
    2368:	16e7883a 	add	r19,r2,sp
    236c:	98801417 	ldw	r2,80(r19)
    2370:	98c01517 	ldw	r3,84(r19)
    2374:	a1800017 	ldw	r6,0(r20)
    2378:	a1c00117 	ldw	r7,4(r20)
    237c:	180b883a 	mov	r5,r3
    2380:	1009883a 	mov	r4,r2
    2384:	0003ef80 	call	3ef8 <__muldf3>
    2388:	180f883a 	mov	r7,r3
    238c:	900b883a 	mov	r5,r18
    2390:	8809883a 	mov	r4,r17
    2394:	100d883a 	mov	r6,r2
    2398:	0003e840 	call	3e84 <__adddf3>
    239c:	d9409817 	ldw	r5,608(sp)
    23a0:	b5800044 	addi	r22,r22,1
    23a4:	9cfffe04 	addi	r19,r19,-8
    23a8:	1023883a 	mov	r17,r2
    23ac:	1825883a 	mov	r18,r3
    23b0:	a5000204 	addi	r20,r20,8
    23b4:	2dbfed1e 	bne	r5,r22,236c <__kernel_rem_pio2+0x558>
    23b8:	d9809117 	ldw	r6,580(sp)
    23bc:	d9c09017 	ldw	r7,576(sp)
    23c0:	e7000044 	addi	fp,fp,1
    23c4:	31800104 	addi	r6,r6,4
    23c8:	39c00044 	addi	r7,r7,1
    23cc:	84800115 	stw	r18,4(r16)
    23d0:	84400015 	stw	r17,0(r16)
    23d4:	d9809115 	stw	r6,580(sp)
    23d8:	ad400204 	addi	r21,r21,8
    23dc:	84000204 	addi	r16,r16,8
    23e0:	d9c09015 	stw	r7,576(sp)
    23e4:	bf3fd30e 	bge	r23,fp,2334 <__kernel_rem_pio2+0x520>
    23e8:	ddc08d15 	stw	r23,564(sp)
    23ec:	003efa06 	br	1fd8 <__kernel_rem_pio2+0x1c4>
    23f0:	0023883a 	mov	r17,zero
    23f4:	0025883a 	mov	r18,zero
    23f8:	003fef06 	br	23b8 <__kernel_rem_pio2+0x5a4>
    23fc:	0029883a 	mov	r20,zero
    2400:	054ffc34 	movhi	r21,16368
    2404:	880f883a 	mov	r7,r17
    2408:	800d883a 	mov	r6,r16
    240c:	a009883a 	mov	r4,r20
    2410:	a80b883a 	mov	r5,r21
    2414:	0003e040 	call	3e04 <__subdf3>
    2418:	1025883a 	mov	r18,r2
    241c:	b005003a 	cmpeq	r2,r22,zero
    2420:	1827883a 	mov	r19,r3
    2424:	9021883a 	mov	r16,r18
    2428:	1823883a 	mov	r17,r3
    242c:	103f8a1e 	bne	r2,zero,2258 <__kernel_rem_pio2+0x444>
    2430:	d9809317 	ldw	r6,588(sp)
    2434:	0009883a 	mov	r4,zero
    2438:	a80b883a 	mov	r5,r21
    243c:	00031e40 	call	31e4 <scalbn>
    2440:	180f883a 	mov	r7,r3
    2444:	9009883a 	mov	r4,r18
    2448:	980b883a 	mov	r5,r19
    244c:	100d883a 	mov	r6,r2
    2450:	0003e040 	call	3e04 <__subdf3>
    2454:	1021883a 	mov	r16,r2
    2458:	1823883a 	mov	r17,r3
    245c:	000d883a 	mov	r6,zero
    2460:	000f883a 	mov	r7,zero
    2464:	8009883a 	mov	r4,r16
    2468:	880b883a 	mov	r5,r17
    246c:	00042bc0 	call	42bc <__eqdf2>
    2470:	103f7f26 	beq	r2,zero,2270 <__kernel_rem_pio2+0x45c>
    2474:	000d883a 	mov	r6,zero
    2478:	000f883a 	mov	r7,zero
    247c:	8009883a 	mov	r4,r16
    2480:	880b883a 	mov	r5,r17
    2484:	00042bc0 	call	42bc <__eqdf2>
    2488:	10019a1e 	bne	r2,zero,2af4 <__kernel_rem_pio2+0xce0>
    248c:	da808d17 	ldw	r10,564(sp)
    2490:	51bfffc4 	addi	r6,r10,-1
    2494:	3185883a 	add	r2,r6,r6
    2498:	1085883a 	add	r2,r2,r2
    249c:	d9009317 	ldw	r4,588(sp)
    24a0:	16c5883a 	add	r2,r2,sp
    24a4:	10c00017 	ldw	r3,0(r2)
    24a8:	213ffa04 	addi	r4,r4,-24
    24ac:	d9009315 	stw	r4,588(sp)
    24b0:	1801d41e 	bne	r3,zero,2c04 <__kernel_rem_pio2+0xdf0>
    24b4:	d9808d15 	stw	r6,564(sp)
    24b8:	1007883a 	mov	r3,r2
    24bc:	d9408d17 	ldw	r5,564(sp)
    24c0:	d9809317 	ldw	r6,588(sp)
    24c4:	18ffff04 	addi	r3,r3,-4
    24c8:	18800017 	ldw	r2,0(r3)
    24cc:	297fffc4 	addi	r5,r5,-1
    24d0:	31bffa04 	addi	r6,r6,-24
    24d4:	d9408d15 	stw	r5,564(sp)
    24d8:	d9809315 	stw	r6,588(sp)
    24dc:	103ff726 	beq	r2,zero,24bc <__kernel_rem_pio2+0x6a8>
    24e0:	d9809317 	ldw	r6,588(sp)
    24e4:	0005883a 	mov	r2,zero
    24e8:	00cffc34 	movhi	r3,16368
    24ec:	180b883a 	mov	r5,r3
    24f0:	1009883a 	mov	r4,r2
    24f4:	00031e40 	call	31e4 <scalbn>
    24f8:	d9808d17 	ldw	r6,564(sp)
    24fc:	1021883a 	mov	r16,r2
    2500:	1823883a 	mov	r17,r3
    2504:	30004616 	blt	r6,zero,2620 <__kernel_rem_pio2+0x80c>
    2508:	300690fa 	slli	r3,r6,3
    250c:	3185883a 	add	r2,r6,r6
    2510:	1085883a 	add	r2,r2,r2
    2514:	16e9883a 	add	r20,r2,sp
    2518:	1ee5883a 	add	r18,r3,sp
    251c:	3027883a 	mov	r19,r6
    2520:	057fffc4 	movi	r21,-1
    2524:	a1000017 	ldw	r4,0(r20)
    2528:	9cffffc4 	addi	r19,r19,-1
    252c:	a53fff04 	addi	r20,r20,-4
    2530:	00044540 	call	4454 <__floatsidf>
    2534:	800d883a 	mov	r6,r16
    2538:	880f883a 	mov	r7,r17
    253c:	180b883a 	mov	r5,r3
    2540:	1009883a 	mov	r4,r2
    2544:	0003ef80 	call	3ef8 <__muldf3>
    2548:	0015883a 	mov	r10,zero
    254c:	02cf9c34 	movhi	r11,15984
    2550:	880b883a 	mov	r5,r17
    2554:	8009883a 	mov	r4,r16
    2558:	90c06515 	stw	r3,404(r18)
    255c:	90806415 	stw	r2,400(r18)
    2560:	580f883a 	mov	r7,r11
    2564:	500d883a 	mov	r6,r10
    2568:	0003ef80 	call	3ef8 <__muldf3>
    256c:	1021883a 	mov	r16,r2
    2570:	1823883a 	mov	r17,r3
    2574:	94bffe04 	addi	r18,r18,-8
    2578:	9d7fea1e 	bne	r19,r21,2524 <__kernel_rem_pio2+0x710>
    257c:	d9c09517 	ldw	r7,596(sp)
    2580:	dd808d17 	ldw	r22,564(sp)
    2584:	002b883a 	mov	r21,zero
    2588:	382e403a 	cmpge	r23,r7,zero
    258c:	b800aa26 	beq	r23,zero,2838 <__kernel_rem_pio2+0xa24>
    2590:	a800a916 	blt	r21,zero,2838 <__kernel_rem_pio2+0xa24>
    2594:	b00690fa 	slli	r3,r22,3
    2598:	d8806404 	addi	r2,sp,400
    259c:	0021883a 	mov	r16,zero
    25a0:	10e9883a 	add	r20,r2,r3
    25a4:	0027883a 	mov	r19,zero
    25a8:	0023883a 	mov	r17,zero
    25ac:	04800074 	movhi	r18,1
    25b0:	94a8c404 	addi	r18,r18,-23792
    25b4:	00000106 	br	25bc <__kernel_rem_pio2+0x7a8>
    25b8:	acc01116 	blt	r21,r19,2600 <__kernel_rem_pio2+0x7ec>
    25bc:	91000017 	ldw	r4,0(r18)
    25c0:	91400117 	ldw	r5,4(r18)
    25c4:	a1800017 	ldw	r6,0(r20)
    25c8:	a1c00117 	ldw	r7,4(r20)
    25cc:	9cc00044 	addi	r19,r19,1
    25d0:	94800204 	addi	r18,r18,8
    25d4:	0003ef80 	call	3ef8 <__muldf3>
    25d8:	180f883a 	mov	r7,r3
    25dc:	880b883a 	mov	r5,r17
    25e0:	8009883a 	mov	r4,r16
    25e4:	100d883a 	mov	r6,r2
    25e8:	0003e840 	call	3e84 <__adddf3>
    25ec:	da809517 	ldw	r10,596(sp)
    25f0:	a5000204 	addi	r20,r20,8
    25f4:	1021883a 	mov	r16,r2
    25f8:	1823883a 	mov	r17,r3
    25fc:	54ffee0e 	bge	r10,r19,25b8 <__kernel_rem_pio2+0x7a4>
    2600:	a80490fa 	slli	r2,r21,3
    2604:	b5bfffc4 	addi	r22,r22,-1
    2608:	ad400044 	addi	r21,r21,1
    260c:	16c5883a 	add	r2,r2,sp
    2610:	14403d15 	stw	r17,244(r2)
    2614:	14003c15 	stw	r16,240(r2)
    2618:	00bfffc4 	movi	r2,-1
    261c:	b0bfdb1e 	bne	r22,r2,258c <__kernel_rem_pio2+0x778>
    2620:	d8c0ad17 	ldw	r3,692(sp)
    2624:	00800084 	movi	r2,2
    2628:	10c09316 	blt	r2,r3,2878 <__kernel_rem_pio2+0xa64>
    262c:	00c1120e 	bge	zero,r3,2a78 <__kernel_rem_pio2+0xc64>
    2630:	d9808d17 	ldw	r6,564(sp)
    2634:	30018d16 	blt	r6,zero,2c6c <__kernel_rem_pio2+0xe58>
    2638:	d8c08d17 	ldw	r3,564(sp)
    263c:	0011883a 	mov	r8,zero
    2640:	0013883a 	mov	r9,zero
    2644:	180490fa 	slli	r2,r3,3
    2648:	1823883a 	mov	r17,r3
    264c:	04bfffc4 	movi	r18,-1
    2650:	16e1883a 	add	r16,r2,sp
    2654:	80803c17 	ldw	r2,240(r16)
    2658:	80c03d17 	ldw	r3,244(r16)
    265c:	480b883a 	mov	r5,r9
    2660:	4009883a 	mov	r4,r8
    2664:	180f883a 	mov	r7,r3
    2668:	100d883a 	mov	r6,r2
    266c:	0003e840 	call	3e84 <__adddf3>
    2670:	8c7fffc4 	addi	r17,r17,-1
    2674:	843ffe04 	addi	r16,r16,-8
    2678:	1011883a 	mov	r8,r2
    267c:	1813883a 	mov	r9,r3
    2680:	8cbff41e 	bne	r17,r18,2654 <__kernel_rem_pio2+0x840>
    2684:	d9009217 	ldw	r4,584(sp)
    2688:	20015b1e 	bne	r4,zero,2bf8 <__kernel_rem_pio2+0xde4>
    268c:	4009883a 	mov	r4,r8
    2690:	480b883a 	mov	r5,r9
    2694:	d9809717 	ldw	r6,604(sp)
    2698:	d8803c17 	ldw	r2,240(sp)
    269c:	480f883a 	mov	r7,r9
    26a0:	31400115 	stw	r5,4(r6)
    26a4:	31000015 	stw	r4,0(r6)
    26a8:	d8c03d17 	ldw	r3,244(sp)
    26ac:	400d883a 	mov	r6,r8
    26b0:	1009883a 	mov	r4,r2
    26b4:	180b883a 	mov	r5,r3
    26b8:	0003e040 	call	3e04 <__subdf3>
    26bc:	d9c08d17 	ldw	r7,564(sp)
    26c0:	1011883a 	mov	r8,r2
    26c4:	1813883a 	mov	r9,r3
    26c8:	01c00d0e 	bge	zero,r7,2700 <__kernel_rem_pio2+0x8ec>
    26cc:	0023883a 	mov	r17,zero
    26d0:	dc003e04 	addi	r16,sp,248
    26d4:	81800017 	ldw	r6,0(r16)
    26d8:	81c00117 	ldw	r7,4(r16)
    26dc:	480b883a 	mov	r5,r9
    26e0:	4009883a 	mov	r4,r8
    26e4:	0003e840 	call	3e84 <__adddf3>
    26e8:	da808d17 	ldw	r10,564(sp)
    26ec:	8c400044 	addi	r17,r17,1
    26f0:	1011883a 	mov	r8,r2
    26f4:	1813883a 	mov	r9,r3
    26f8:	84000204 	addi	r16,r16,8
    26fc:	8abff51e 	bne	r17,r10,26d4 <__kernel_rem_pio2+0x8c0>
    2700:	d8809217 	ldw	r2,584(sp)
    2704:	10000226 	beq	r2,zero,2710 <__kernel_rem_pio2+0x8fc>
    2708:	48e0003c 	xorhi	r3,r9,32768
    270c:	1813883a 	mov	r9,r3
    2710:	d8c09717 	ldw	r3,604(sp)
    2714:	1a400315 	stw	r9,12(r3)
    2718:	1a000215 	stw	r8,8(r3)
    271c:	d8c09417 	ldw	r3,592(sp)
    2720:	188001cc 	andi	r2,r3,7
    2724:	dfc0ac17 	ldw	ra,688(sp)
    2728:	df00ab17 	ldw	fp,684(sp)
    272c:	ddc0aa17 	ldw	r23,680(sp)
    2730:	dd80a917 	ldw	r22,676(sp)
    2734:	dd40a817 	ldw	r21,672(sp)
    2738:	dd00a717 	ldw	r20,668(sp)
    273c:	dcc0a617 	ldw	r19,664(sp)
    2740:	dc80a517 	ldw	r18,660(sp)
    2744:	dc40a417 	ldw	r17,656(sp)
    2748:	dc00a317 	ldw	r16,652(sp)
    274c:	dec0ad04 	addi	sp,sp,692
    2750:	f800283a 	ret
    2754:	d8809317 	ldw	r2,588(sp)
    2758:	10001f1e 	bne	r2,zero,27d8 <__kernel_rem_pio2+0x9c4>
    275c:	d8c08d17 	ldw	r3,564(sp)
    2760:	18c5883a 	add	r2,r3,r3
    2764:	1085883a 	add	r2,r2,r2
    2768:	16c5883a 	add	r2,r2,sp
    276c:	10ffff17 	ldw	r3,-4(r2)
    2770:	1807d5fa 	srai	r3,r3,23
    2774:	d8c09215 	stw	r3,584(sp)
    2778:	003e8e06 	br	21b4 <__kernel_rem_pio2+0x3a0>
    277c:	d9008d17 	ldw	r4,564(sp)
    2780:	d9409317 	ldw	r5,588(sp)
    2784:	2145c83a 	sub	r2,r4,r5
    2788:	1085883a 	add	r2,r2,r2
    278c:	1085883a 	add	r2,r2,r2
    2790:	16c5883a 	add	r2,r2,sp
    2794:	10c00017 	ldw	r3,0(r2)
    2798:	01002034 	movhi	r4,128
    279c:	213fffc4 	addi	r4,r4,-1
    27a0:	1906703a 	and	r3,r3,r4
    27a4:	10c00015 	stw	r3,0(r2)
    27a8:	003ea806 	br	224c <__kernel_rem_pio2+0x438>
    27ac:	d9808d17 	ldw	r6,564(sp)
    27b0:	01001034 	movhi	r4,64
    27b4:	213fffc4 	addi	r4,r4,-1
    27b8:	30bfffc4 	addi	r2,r6,-1
    27bc:	1085883a 	add	r2,r2,r2
    27c0:	1085883a 	add	r2,r2,r2
    27c4:	16c5883a 	add	r2,r2,sp
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	1906703a 	and	r3,r3,r4
    27d0:	10c00015 	stw	r3,0(r2)
    27d4:	003e9d06 	br	224c <__kernel_rem_pio2+0x438>
    27d8:	0005883a 	mov	r2,zero
    27dc:	00cff834 	movhi	r3,16352
    27e0:	300b883a 	mov	r5,r6
    27e4:	180f883a 	mov	r7,r3
    27e8:	8009883a 	mov	r4,r16
    27ec:	100d883a 	mov	r6,r2
    27f0:	00043cc0 	call	43cc <__gedf2>
    27f4:	10001d0e 	bge	r2,zero,286c <__kernel_rem_pio2+0xa58>
    27f8:	d8009215 	stw	zero,584(sp)
    27fc:	003e9606 	br	2258 <__kernel_rem_pio2+0x444>
    2800:	d8c08d17 	ldw	r3,564(sp)
    2804:	01000044 	movi	r4,1
    2808:	192f883a 	add	r23,r3,r4
    280c:	1f000044 	addi	fp,r3,1
    2810:	bf3eb516 	blt	r23,fp,22e8 <__kernel_rem_pio2+0x4d4>
    2814:	003eb606 	br	22f0 <__kernel_rem_pio2+0x4dc>
    2818:	0021883a 	mov	r16,zero
    281c:	0023883a 	mov	r17,zero
    2820:	a5000044 	addi	r20,r20,1
    2824:	ac400115 	stw	r17,4(r21)
    2828:	ac000015 	stw	r16,0(r21)
    282c:	ad400204 	addi	r21,r21,8
    2830:	a5fdba1e 	bne	r20,r23,1f1c <__kernel_rem_pio2+0x108>
    2834:	003dd806 	br	1f98 <__kernel_rem_pio2+0x184>
    2838:	a80490fa 	slli	r2,r21,3
    283c:	0021883a 	mov	r16,zero
    2840:	0023883a 	mov	r17,zero
    2844:	16c5883a 	add	r2,r2,sp
    2848:	14403d15 	stw	r17,244(r2)
    284c:	14003c15 	stw	r16,240(r2)
    2850:	b5bfffc4 	addi	r22,r22,-1
    2854:	00bfffc4 	movi	r2,-1
    2858:	ad400044 	addi	r21,r21,1
    285c:	b0bf4b1e 	bne	r22,r2,258c <__kernel_rem_pio2+0x778>
    2860:	003f6f06 	br	2620 <__kernel_rem_pio2+0x80c>
    2864:	002d883a 	mov	r22,zero
    2868:	003e7106 	br	2230 <__kernel_rem_pio2+0x41c>
    286c:	01000084 	movi	r4,2
    2870:	d9009215 	stw	r4,584(sp)
    2874:	003e5106 	br	21bc <__kernel_rem_pio2+0x3a8>
    2878:	d900ad17 	ldw	r4,692(sp)
    287c:	008000c4 	movi	r2,3
    2880:	20bfa61e 	bne	r4,r2,271c <__kernel_rem_pio2+0x908>
    2884:	d9c08d17 	ldw	r7,564(sp)
    2888:	01c02c0e 	bge	zero,r7,293c <__kernel_rem_pio2+0xb28>
    288c:	3805883a 	mov	r2,r7
    2890:	00000106 	br	2898 <__kernel_rem_pio2+0xa84>
    2894:	d8808e17 	ldw	r2,568(sp)
    2898:	113fffc4 	addi	r4,r2,-1
    289c:	100690fa 	slli	r3,r2,3
    28a0:	200490fa 	slli	r2,r4,3
    28a4:	d9008e15 	stw	r4,568(sp)
    28a8:	1ef9883a 	add	fp,r3,sp
    28ac:	16c5883a 	add	r2,r2,sp
    28b0:	d8809a15 	stw	r2,616(sp)
    28b4:	11403c04 	addi	r5,r2,240
    28b8:	e1803c04 	addi	r6,fp,240
    28bc:	14003c17 	ldw	r16,240(r2)
    28c0:	e5003c17 	ldw	r20,240(fp)
    28c4:	d9409b15 	stw	r5,620(sp)
    28c8:	d9809c15 	stw	r6,624(sp)
    28cc:	35400117 	ldw	r21,4(r6)
    28d0:	2c400117 	ldw	r17,4(r5)
    28d4:	8009883a 	mov	r4,r16
    28d8:	a00d883a 	mov	r6,r20
    28dc:	880b883a 	mov	r5,r17
    28e0:	a80f883a 	mov	r7,r21
    28e4:	0003e840 	call	3e84 <__adddf3>
    28e8:	100d883a 	mov	r6,r2
    28ec:	880b883a 	mov	r5,r17
    28f0:	8009883a 	mov	r4,r16
    28f4:	180f883a 	mov	r7,r3
    28f8:	1025883a 	mov	r18,r2
    28fc:	1827883a 	mov	r19,r3
    2900:	0003e040 	call	3e04 <__subdf3>
    2904:	180f883a 	mov	r7,r3
    2908:	a80b883a 	mov	r5,r21
    290c:	a009883a 	mov	r4,r20
    2910:	100d883a 	mov	r6,r2
    2914:	0003e840 	call	3e84 <__adddf3>
    2918:	e0803c15 	stw	r2,240(fp)
    291c:	d9c09c17 	ldw	r7,624(sp)
    2920:	38c00115 	stw	r3,4(r7)
    2924:	da809a17 	ldw	r10,616(sp)
    2928:	54803c15 	stw	r18,240(r10)
    292c:	d8809b17 	ldw	r2,620(sp)
    2930:	14c00115 	stw	r19,4(r2)
    2934:	d8c08e17 	ldw	r3,568(sp)
    2938:	183fd61e 	bne	r3,zero,2894 <__kernel_rem_pio2+0xa80>
    293c:	d9008d17 	ldw	r4,564(sp)
    2940:	00800044 	movi	r2,1
    2944:	1100cc0e 	bge	r2,r4,2c78 <__kernel_rem_pio2+0xe64>
    2948:	d8808d17 	ldw	r2,564(sp)
    294c:	117fffc4 	addi	r5,r2,-1
    2950:	100690fa 	slli	r3,r2,3
    2954:	280490fa 	slli	r2,r5,3
    2958:	d9408f15 	stw	r5,572(sp)
    295c:	1ef9883a 	add	fp,r3,sp
    2960:	16c5883a 	add	r2,r2,sp
    2964:	d8809d15 	stw	r2,628(sp)
    2968:	11803c04 	addi	r6,r2,240
    296c:	e1c03c04 	addi	r7,fp,240
    2970:	14003c17 	ldw	r16,240(r2)
    2974:	e5003c17 	ldw	r20,240(fp)
    2978:	d9809e15 	stw	r6,632(sp)
    297c:	d9c09f15 	stw	r7,636(sp)
    2980:	34400117 	ldw	r17,4(r6)
    2984:	3d400117 	ldw	r21,4(r7)
    2988:	8009883a 	mov	r4,r16
    298c:	880b883a 	mov	r5,r17
    2990:	a00d883a 	mov	r6,r20
    2994:	a80f883a 	mov	r7,r21
    2998:	0003e840 	call	3e84 <__adddf3>
    299c:	100d883a 	mov	r6,r2
    29a0:	880b883a 	mov	r5,r17
    29a4:	8009883a 	mov	r4,r16
    29a8:	180f883a 	mov	r7,r3
    29ac:	1025883a 	mov	r18,r2
    29b0:	1827883a 	mov	r19,r3
    29b4:	0003e040 	call	3e04 <__subdf3>
    29b8:	180f883a 	mov	r7,r3
    29bc:	a80b883a 	mov	r5,r21
    29c0:	a009883a 	mov	r4,r20
    29c4:	100d883a 	mov	r6,r2
    29c8:	0003e840 	call	3e84 <__adddf3>
    29cc:	e0803c15 	stw	r2,240(fp)
    29d0:	da809f17 	ldw	r10,636(sp)
    29d4:	50c00115 	stw	r3,4(r10)
    29d8:	d8c09d17 	ldw	r3,628(sp)
    29dc:	d8808f17 	ldw	r2,572(sp)
    29e0:	1c803c15 	stw	r18,240(r3)
    29e4:	d9009e17 	ldw	r4,632(sp)
    29e8:	00c00044 	movi	r3,1
    29ec:	24c00115 	stw	r19,4(r4)
    29f0:	d9408f17 	ldw	r5,572(sp)
    29f4:	28ffd51e 	bne	r5,r3,294c <__kernel_rem_pio2+0xb38>
    29f8:	dc008d17 	ldw	r16,564(sp)
    29fc:	0011883a 	mov	r8,zero
    2a00:	1825883a 	mov	r18,r3
    2a04:	800490fa 	slli	r2,r16,3
    2a08:	0013883a 	mov	r9,zero
    2a0c:	16e3883a 	add	r17,r2,sp
    2a10:	88803c17 	ldw	r2,240(r17)
    2a14:	88c03d17 	ldw	r3,244(r17)
    2a18:	480b883a 	mov	r5,r9
    2a1c:	4009883a 	mov	r4,r8
    2a20:	180f883a 	mov	r7,r3
    2a24:	100d883a 	mov	r6,r2
    2a28:	0003e840 	call	3e84 <__adddf3>
    2a2c:	843fffc4 	addi	r16,r16,-1
    2a30:	8c7ffe04 	addi	r17,r17,-8
    2a34:	1011883a 	mov	r8,r2
    2a38:	1813883a 	mov	r9,r3
    2a3c:	84bff41e 	bne	r16,r18,2a10 <__kernel_rem_pio2+0xbfc>
    2a40:	d9809217 	ldw	r6,584(sp)
    2a44:	30007a1e 	bne	r6,zero,2c30 <__kernel_rem_pio2+0xe1c>
    2a48:	d9c09717 	ldw	r7,604(sp)
    2a4c:	d8803c17 	ldw	r2,240(sp)
    2a50:	d9003e17 	ldw	r4,248(sp)
    2a54:	3a400515 	stw	r9,20(r7)
    2a58:	d8c03d17 	ldw	r3,244(sp)
    2a5c:	d9403f17 	ldw	r5,252(sp)
    2a60:	3a000415 	stw	r8,16(r7)
    2a64:	38c00115 	stw	r3,4(r7)
    2a68:	39400315 	stw	r5,12(r7)
    2a6c:	38800015 	stw	r2,0(r7)
    2a70:	39000215 	stw	r4,8(r7)
    2a74:	003f2906 	br	271c <__kernel_rem_pio2+0x908>
    2a78:	183f281e 	bne	r3,zero,271c <__kernel_rem_pio2+0x908>
    2a7c:	d9408d17 	ldw	r5,564(sp)
    2a80:	28008016 	blt	r5,zero,2c84 <__kernel_rem_pio2+0xe70>
    2a84:	dc008d17 	ldw	r16,564(sp)
    2a88:	000d883a 	mov	r6,zero
    2a8c:	000f883a 	mov	r7,zero
    2a90:	800490fa 	slli	r2,r16,3
    2a94:	04bfffc4 	movi	r18,-1
    2a98:	16e3883a 	add	r17,r2,sp
    2a9c:	88803c17 	ldw	r2,240(r17)
    2aa0:	88c03d17 	ldw	r3,244(r17)
    2aa4:	380b883a 	mov	r5,r7
    2aa8:	3009883a 	mov	r4,r6
    2aac:	180f883a 	mov	r7,r3
    2ab0:	100d883a 	mov	r6,r2
    2ab4:	0003e840 	call	3e84 <__adddf3>
    2ab8:	843fffc4 	addi	r16,r16,-1
    2abc:	8c7ffe04 	addi	r17,r17,-8
    2ac0:	100d883a 	mov	r6,r2
    2ac4:	180f883a 	mov	r7,r3
    2ac8:	84bff41e 	bne	r16,r18,2a9c <__kernel_rem_pio2+0xc88>
    2acc:	da809217 	ldw	r10,584(sp)
    2ad0:	50000226 	beq	r10,zero,2adc <__kernel_rem_pio2+0xcc8>
    2ad4:	38e0003c 	xorhi	r3,r7,32768
    2ad8:	180f883a 	mov	r7,r3
    2adc:	d8809717 	ldw	r2,604(sp)
    2ae0:	11c00115 	stw	r7,4(r2)
    2ae4:	11800015 	stw	r6,0(r2)
    2ae8:	003f0c06 	br	271c <__kernel_rem_pio2+0x908>
    2aec:	d8008c15 	stw	zero,560(sp)
    2af0:	003ce606 	br	1e8c <__kernel_rem_pio2+0x78>
    2af4:	d9c09317 	ldw	r7,588(sp)
    2af8:	880b883a 	mov	r5,r17
    2afc:	8009883a 	mov	r4,r16
    2b00:	01cdc83a 	sub	r6,zero,r7
    2b04:	00031e40 	call	31e4 <scalbn>
    2b08:	0011883a 	mov	r8,zero
    2b0c:	02505c34 	movhi	r9,16752
    2b10:	480f883a 	mov	r7,r9
    2b14:	1009883a 	mov	r4,r2
    2b18:	180b883a 	mov	r5,r3
    2b1c:	400d883a 	mov	r6,r8
    2b20:	102d883a 	mov	r22,r2
    2b24:	182f883a 	mov	r23,r3
    2b28:	00043cc0 	call	43cc <__gedf2>
    2b2c:	10003716 	blt	r2,zero,2c0c <__kernel_rem_pio2+0xdf8>
    2b30:	0005883a 	mov	r2,zero
    2b34:	00cf9c34 	movhi	r3,15984
    2b38:	180f883a 	mov	r7,r3
    2b3c:	100d883a 	mov	r6,r2
    2b40:	b009883a 	mov	r4,r22
    2b44:	b80b883a 	mov	r5,r23
    2b48:	0003ef80 	call	3ef8 <__muldf3>
    2b4c:	180b883a 	mov	r5,r3
    2b50:	1009883a 	mov	r4,r2
    2b54:	000454c0 	call	454c <__fixdfsi>
    2b58:	1009883a 	mov	r4,r2
    2b5c:	00044540 	call	4454 <__floatsidf>
    2b60:	da808d17 	ldw	r10,564(sp)
    2b64:	1023883a 	mov	r17,r2
    2b68:	1825883a 	mov	r18,r3
    2b6c:	0005883a 	mov	r2,zero
    2b70:	00f05c34 	movhi	r3,49520
    2b74:	180f883a 	mov	r7,r3
    2b78:	8809883a 	mov	r4,r17
    2b7c:	900b883a 	mov	r5,r18
    2b80:	100d883a 	mov	r6,r2
    2b84:	52ab883a 	add	r21,r10,r10
    2b88:	0003ef80 	call	3ef8 <__muldf3>
    2b8c:	180f883a 	mov	r7,r3
    2b90:	b80b883a 	mov	r5,r23
    2b94:	100d883a 	mov	r6,r2
    2b98:	b009883a 	mov	r4,r22
    2b9c:	0003e840 	call	3e84 <__adddf3>
    2ba0:	100d883a 	mov	r6,r2
    2ba4:	d8808d17 	ldw	r2,564(sp)
    2ba8:	180b883a 	mov	r5,r3
    2bac:	3009883a 	mov	r4,r6
    2bb0:	10800044 	addi	r2,r2,1
    2bb4:	ad6b883a 	add	r21,r21,r21
    2bb8:	d8808d15 	stw	r2,564(sp)
    2bbc:	000454c0 	call	454c <__fixdfsi>
    2bc0:	d8c08d17 	ldw	r3,564(sp)
    2bc4:	aeeb883a 	add	r21,r21,sp
    2bc8:	8809883a 	mov	r4,r17
    2bcc:	900b883a 	mov	r5,r18
    2bd0:	a8800015 	stw	r2,0(r21)
    2bd4:	18e1883a 	add	r16,r3,r3
    2bd8:	000454c0 	call	454c <__fixdfsi>
    2bdc:	d9009317 	ldw	r4,588(sp)
    2be0:	8421883a 	add	r16,r16,r16
    2be4:	86e1883a 	add	r16,r16,sp
    2be8:	21000604 	addi	r4,r4,24
    2bec:	d9009315 	stw	r4,588(sp)
    2bf0:	80800015 	stw	r2,0(r16)
    2bf4:	003e3a06 	br	24e0 <__kernel_rem_pio2+0x6cc>
    2bf8:	4009883a 	mov	r4,r8
    2bfc:	4960003c 	xorhi	r5,r9,32768
    2c00:	003ea406 	br	2694 <__kernel_rem_pio2+0x880>
    2c04:	d9808d15 	stw	r6,564(sp)
    2c08:	003e3506 	br	24e0 <__kernel_rem_pio2+0x6cc>
    2c0c:	d9408d17 	ldw	r5,564(sp)
    2c10:	b009883a 	mov	r4,r22
    2c14:	2961883a 	add	r16,r5,r5
    2c18:	8421883a 	add	r16,r16,r16
    2c1c:	b80b883a 	mov	r5,r23
    2c20:	86e1883a 	add	r16,r16,sp
    2c24:	000454c0 	call	454c <__fixdfsi>
    2c28:	80800015 	stw	r2,0(r16)
    2c2c:	003e2c06 	br	24e0 <__kernel_rem_pio2+0x6cc>
    2c30:	d8c03d17 	ldw	r3,244(sp)
    2c34:	d9403f17 	ldw	r5,252(sp)
    2c38:	da809717 	ldw	r10,604(sp)
    2c3c:	d8803c17 	ldw	r2,240(sp)
    2c40:	d9003e17 	ldw	r4,248(sp)
    2c44:	49e0003c 	xorhi	r7,r9,32768
    2c48:	51c00515 	stw	r7,20(r10)
    2c4c:	19a0003c 	xorhi	r6,r3,32768
    2c50:	29e0003c 	xorhi	r7,r5,32768
    2c54:	51800115 	stw	r6,4(r10)
    2c58:	51c00315 	stw	r7,12(r10)
    2c5c:	50800015 	stw	r2,0(r10)
    2c60:	51000215 	stw	r4,8(r10)
    2c64:	52000415 	stw	r8,16(r10)
    2c68:	003eac06 	br	271c <__kernel_rem_pio2+0x908>
    2c6c:	0011883a 	mov	r8,zero
    2c70:	0013883a 	mov	r9,zero
    2c74:	003e8306 	br	2684 <__kernel_rem_pio2+0x870>
    2c78:	0011883a 	mov	r8,zero
    2c7c:	0013883a 	mov	r9,zero
    2c80:	003f6f06 	br	2a40 <__kernel_rem_pio2+0xc2c>
    2c84:	000d883a 	mov	r6,zero
    2c88:	000f883a 	mov	r7,zero
    2c8c:	003f8f06 	br	2acc <__kernel_rem_pio2+0xcb8>

00002c90 <__kernel_sin>:
    2c90:	00a00034 	movhi	r2,32768
    2c94:	10bfffc4 	addi	r2,r2,-1
    2c98:	deffef04 	addi	sp,sp,-68
    2c9c:	1144703a 	and	r2,r2,r5
    2ca0:	00cf9034 	movhi	r3,15936
    2ca4:	18ffffc4 	addi	r3,r3,-1
    2ca8:	dd400d15 	stw	r21,52(sp)
    2cac:	dd000c15 	stw	r20,48(sp)
    2cb0:	dfc01015 	stw	ra,64(sp)
    2cb4:	ddc00f15 	stw	r23,60(sp)
    2cb8:	dd800e15 	stw	r22,56(sp)
    2cbc:	dcc00b15 	stw	r19,44(sp)
    2cc0:	dc800a15 	stw	r18,40(sp)
    2cc4:	dc400915 	stw	r17,36(sp)
    2cc8:	dc000815 	stw	r16,32(sp)
    2ccc:	2029883a 	mov	r20,r4
    2cd0:	282b883a 	mov	r21,r5
    2cd4:	d9800415 	stw	r6,16(sp)
    2cd8:	d9c00515 	stw	r7,20(sp)
    2cdc:	18800216 	blt	r3,r2,2ce8 <__kernel_sin+0x58>
    2ce0:	000454c0 	call	454c <__fixdfsi>
    2ce4:	10008826 	beq	r2,zero,2f08 <__kernel_sin+0x278>
    2ce8:	a009883a 	mov	r4,r20
    2cec:	a80b883a 	mov	r5,r21
    2cf0:	a00d883a 	mov	r6,r20
    2cf4:	a80f883a 	mov	r7,r21
    2cf8:	0003ef80 	call	3ef8 <__muldf3>
    2cfc:	102d883a 	mov	r22,r2
    2d00:	a009883a 	mov	r4,r20
    2d04:	a80b883a 	mov	r5,r21
    2d08:	b00d883a 	mov	r6,r22
    2d0c:	180f883a 	mov	r7,r3
    2d10:	182f883a 	mov	r23,r3
    2d14:	d8800215 	stw	r2,8(sp)
    2d18:	d8c00315 	stw	r3,12(sp)
    2d1c:	0003ef80 	call	3ef8 <__muldf3>
    2d20:	d9000217 	ldw	r4,8(sp)
    2d24:	0216b434 	movhi	r8,23248
    2d28:	42355f04 	addi	r8,r8,-10884
    2d2c:	024f79b4 	movhi	r9,15846
    2d30:	4a764e84 	addi	r9,r9,-9926
    2d34:	480f883a 	mov	r7,r9
    2d38:	400d883a 	mov	r6,r8
    2d3c:	b80b883a 	mov	r5,r23
    2d40:	d8800615 	stw	r2,24(sp)
    2d44:	d8c00715 	stw	r3,28(sp)
    2d48:	0003ef80 	call	3ef8 <__muldf3>
    2d4c:	02228b34 	movhi	r8,35372
    2d50:	42273ac4 	addi	r8,r8,-25365
    2d54:	024f96f4 	movhi	r9,15963
    2d58:	4a797984 	addi	r9,r9,-6682
    2d5c:	480f883a 	mov	r7,r9
    2d60:	400d883a 	mov	r6,r8
    2d64:	180b883a 	mov	r5,r3
    2d68:	1009883a 	mov	r4,r2
    2d6c:	0003e040 	call	3e04 <__subdf3>
    2d70:	d9000217 	ldw	r4,8(sp)
    2d74:	180f883a 	mov	r7,r3
    2d78:	b80b883a 	mov	r5,r23
    2d7c:	100d883a 	mov	r6,r2
    2d80:	0003ef80 	call	3ef8 <__muldf3>
    2d84:	0215ecb4 	movhi	r8,22450
    2d88:	423f9f44 	addi	r8,r8,-387
    2d8c:	024fb1f4 	movhi	r9,16071
    2d90:	4a4778c4 	addi	r9,r9,7651
    2d94:	480f883a 	mov	r7,r9
    2d98:	400d883a 	mov	r6,r8
    2d9c:	180b883a 	mov	r5,r3
    2da0:	1009883a 	mov	r4,r2
    2da4:	0003e840 	call	3e84 <__adddf3>
    2da8:	d9000217 	ldw	r4,8(sp)
    2dac:	180f883a 	mov	r7,r3
    2db0:	b80b883a 	mov	r5,r23
    2db4:	100d883a 	mov	r6,r2
    2db8:	0003ef80 	call	3ef8 <__muldf3>
    2dbc:	02067074 	movhi	r8,6593
    2dc0:	42187544 	addi	r8,r8,25045
    2dc4:	024fcab4 	movhi	r9,16170
    2dc8:	4a406804 	addi	r9,r9,416
    2dcc:	480f883a 	mov	r7,r9
    2dd0:	400d883a 	mov	r6,r8
    2dd4:	180b883a 	mov	r5,r3
    2dd8:	1009883a 	mov	r4,r2
    2ddc:	0003e040 	call	3e04 <__subdf3>
    2de0:	d9000217 	ldw	r4,8(sp)
    2de4:	180f883a 	mov	r7,r3
    2de8:	b80b883a 	mov	r5,r23
    2dec:	100d883a 	mov	r6,r2
    2df0:	0003ef80 	call	3ef8 <__muldf3>
    2df4:	02044474 	movhi	r8,4369
    2df8:	423e2984 	addi	r8,r8,-1882
    2dfc:	024fe074 	movhi	r9,16257
    2e00:	4a444444 	addi	r9,r9,4369
    2e04:	180b883a 	mov	r5,r3
    2e08:	480f883a 	mov	r7,r9
    2e0c:	1009883a 	mov	r4,r2
    2e10:	400d883a 	mov	r6,r8
    2e14:	0003e840 	call	3e84 <__adddf3>
    2e18:	1021883a 	mov	r16,r2
    2e1c:	d8800617 	ldw	r2,24(sp)
    2e20:	1823883a 	mov	r17,r3
    2e24:	d8800015 	stw	r2,0(sp)
    2e28:	d8800717 	ldw	r2,28(sp)
    2e2c:	d8800115 	stw	r2,4(sp)
    2e30:	d8801117 	ldw	r2,68(sp)
    2e34:	10004126 	beq	r2,zero,2f3c <__kernel_sin+0x2ac>
    2e38:	d9000417 	ldw	r4,16(sp)
    2e3c:	d9400517 	ldw	r5,20(sp)
    2e40:	0005883a 	mov	r2,zero
    2e44:	00cff834 	movhi	r3,16352
    2e48:	180f883a 	mov	r7,r3
    2e4c:	100d883a 	mov	r6,r2
    2e50:	0003ef80 	call	3ef8 <__muldf3>
    2e54:	d9000017 	ldw	r4,0(sp)
    2e58:	d9400717 	ldw	r5,28(sp)
    2e5c:	800d883a 	mov	r6,r16
    2e60:	880f883a 	mov	r7,r17
    2e64:	1021883a 	mov	r16,r2
    2e68:	1823883a 	mov	r17,r3
    2e6c:	0003ef80 	call	3ef8 <__muldf3>
    2e70:	180f883a 	mov	r7,r3
    2e74:	880b883a 	mov	r5,r17
    2e78:	8009883a 	mov	r4,r16
    2e7c:	100d883a 	mov	r6,r2
    2e80:	0003e040 	call	3e04 <__subdf3>
    2e84:	d9000217 	ldw	r4,8(sp)
    2e88:	b80b883a 	mov	r5,r23
    2e8c:	180f883a 	mov	r7,r3
    2e90:	100d883a 	mov	r6,r2
    2e94:	0003ef80 	call	3ef8 <__muldf3>
    2e98:	d9c00517 	ldw	r7,20(sp)
    2e9c:	d9800417 	ldw	r6,16(sp)
    2ea0:	180b883a 	mov	r5,r3
    2ea4:	1009883a 	mov	r4,r2
    2ea8:	0003e040 	call	3e04 <__subdf3>
    2eac:	d9000017 	ldw	r4,0(sp)
    2eb0:	d9400717 	ldw	r5,28(sp)
    2eb4:	02155574 	movhi	r8,21845
    2eb8:	42155244 	addi	r8,r8,21833
    2ebc:	024ff174 	movhi	r9,16325
    2ec0:	4a555544 	addi	r9,r9,21845
    2ec4:	480f883a 	mov	r7,r9
    2ec8:	400d883a 	mov	r6,r8
    2ecc:	1021883a 	mov	r16,r2
    2ed0:	1823883a 	mov	r17,r3
    2ed4:	0003ef80 	call	3ef8 <__muldf3>
    2ed8:	180f883a 	mov	r7,r3
    2edc:	880b883a 	mov	r5,r17
    2ee0:	8009883a 	mov	r4,r16
    2ee4:	100d883a 	mov	r6,r2
    2ee8:	0003e840 	call	3e84 <__adddf3>
    2eec:	180f883a 	mov	r7,r3
    2ef0:	a80b883a 	mov	r5,r21
    2ef4:	a009883a 	mov	r4,r20
    2ef8:	100d883a 	mov	r6,r2
    2efc:	0003e040 	call	3e04 <__subdf3>
    2f00:	1029883a 	mov	r20,r2
    2f04:	182b883a 	mov	r21,r3
    2f08:	a005883a 	mov	r2,r20
    2f0c:	a807883a 	mov	r3,r21
    2f10:	dfc01017 	ldw	ra,64(sp)
    2f14:	ddc00f17 	ldw	r23,60(sp)
    2f18:	dd800e17 	ldw	r22,56(sp)
    2f1c:	dd400d17 	ldw	r21,52(sp)
    2f20:	dd000c17 	ldw	r20,48(sp)
    2f24:	dcc00b17 	ldw	r19,44(sp)
    2f28:	dc800a17 	ldw	r18,40(sp)
    2f2c:	dc400917 	ldw	r17,36(sp)
    2f30:	dc000817 	ldw	r16,32(sp)
    2f34:	dec01104 	addi	sp,sp,68
    2f38:	f800283a 	ret
    2f3c:	d9000217 	ldw	r4,8(sp)
    2f40:	b80b883a 	mov	r5,r23
    2f44:	800d883a 	mov	r6,r16
    2f48:	180f883a 	mov	r7,r3
    2f4c:	0003ef80 	call	3ef8 <__muldf3>
    2f50:	02155574 	movhi	r8,21845
    2f54:	42155244 	addi	r8,r8,21833
    2f58:	024ff174 	movhi	r9,16325
    2f5c:	4a555544 	addi	r9,r9,21845
    2f60:	480f883a 	mov	r7,r9
    2f64:	400d883a 	mov	r6,r8
    2f68:	180b883a 	mov	r5,r3
    2f6c:	1009883a 	mov	r4,r2
    2f70:	0003e040 	call	3e04 <__subdf3>
    2f74:	d9000017 	ldw	r4,0(sp)
    2f78:	d9400717 	ldw	r5,28(sp)
    2f7c:	180f883a 	mov	r7,r3
    2f80:	100d883a 	mov	r6,r2
    2f84:	0003ef80 	call	3ef8 <__muldf3>
    2f88:	180f883a 	mov	r7,r3
    2f8c:	a80b883a 	mov	r5,r21
    2f90:	a009883a 	mov	r4,r20
    2f94:	100d883a 	mov	r6,r2
    2f98:	0003e840 	call	3e84 <__adddf3>
    2f9c:	1029883a 	mov	r20,r2
    2fa0:	182b883a 	mov	r21,r3
    2fa4:	003fd806 	br	2f08 <__kernel_sin+0x278>

00002fa8 <fabs>:
    2fa8:	01e00034 	movhi	r7,32768
    2fac:	39ffffc4 	addi	r7,r7,-1
    2fb0:	394e703a 	and	r7,r7,r5
    2fb4:	2005883a 	mov	r2,r4
    2fb8:	3807883a 	mov	r3,r7
    2fbc:	f800283a 	ret

00002fc0 <floor>:
    2fc0:	2805d53a 	srai	r2,r5,20
    2fc4:	defff604 	addi	sp,sp,-40
    2fc8:	dd800615 	stw	r22,24(sp)
    2fcc:	10c1ffcc 	andi	r3,r2,2047
    2fd0:	1dbf0044 	addi	r22,r3,-1023
    2fd4:	008004c4 	movi	r2,19
    2fd8:	ddc00715 	stw	r23,28(sp)
    2fdc:	dc800215 	stw	r18,8(sp)
    2fe0:	dc400115 	stw	r17,4(sp)
    2fe4:	dc000015 	stw	r16,0(sp)
    2fe8:	dfc00915 	stw	ra,36(sp)
    2fec:	df000815 	stw	fp,32(sp)
    2ff0:	dd400515 	stw	r21,20(sp)
    2ff4:	dd000415 	stw	r20,16(sp)
    2ff8:	dcc00315 	stw	r19,12(sp)
    2ffc:	2021883a 	mov	r16,r4
    3000:	2823883a 	mov	r17,r5
    3004:	282f883a 	mov	r23,r5
    3008:	2025883a 	mov	r18,r4
    300c:	15802916 	blt	r2,r22,30b4 <floor+0xf4>
    3010:	b0004816 	blt	r22,zero,3134 <floor+0x174>
    3014:	00800434 	movhi	r2,16
    3018:	10bfffc4 	addi	r2,r2,-1
    301c:	15b9d83a 	sra	fp,r2,r22
    3020:	282f883a 	mov	r23,r5
    3024:	e144703a 	and	r2,fp,r5
    3028:	1104b03a 	or	r2,r2,r4
    302c:	10001326 	beq	r2,zero,307c <floor+0xbc>
    3030:	00a20034 	movhi	r2,34816
    3034:	109d6704 	addi	r2,r2,30108
    3038:	00df8e34 	movhi	r3,32312
    303c:	18f90f04 	addi	r3,r3,-7108
    3040:	180f883a 	mov	r7,r3
    3044:	100d883a 	mov	r6,r2
    3048:	0003e840 	call	3e84 <__adddf3>
    304c:	180b883a 	mov	r5,r3
    3050:	000d883a 	mov	r6,zero
    3054:	000f883a 	mov	r7,zero
    3058:	1009883a 	mov	r4,r2
    305c:	00043440 	call	4344 <__gtdf2>
    3060:	0080040e 	bge	zero,r2,3074 <floor+0xb4>
    3064:	88004416 	blt	r17,zero,3178 <floor+0x1b8>
    3068:	0704303a 	nor	r2,zero,fp
    306c:	b8ae703a 	and	r23,r23,r2
    3070:	0025883a 	mov	r18,zero
    3074:	9021883a 	mov	r16,r18
    3078:	b823883a 	mov	r17,r23
    307c:	8005883a 	mov	r2,r16
    3080:	8807883a 	mov	r3,r17
    3084:	dfc00917 	ldw	ra,36(sp)
    3088:	df000817 	ldw	fp,32(sp)
    308c:	ddc00717 	ldw	r23,28(sp)
    3090:	dd800617 	ldw	r22,24(sp)
    3094:	dd400517 	ldw	r21,20(sp)
    3098:	dd000417 	ldw	r20,16(sp)
    309c:	dcc00317 	ldw	r19,12(sp)
    30a0:	dc800217 	ldw	r18,8(sp)
    30a4:	dc400117 	ldw	r17,4(sp)
    30a8:	dc000017 	ldw	r16,0(sp)
    30ac:	dec00a04 	addi	sp,sp,40
    30b0:	f800283a 	ret
    30b4:	00800cc4 	movi	r2,51
    30b8:	15801616 	blt	r2,r22,3114 <floor+0x154>
    30bc:	18befb44 	addi	r2,r3,-1043
    30c0:	00ffffc4 	movi	r3,-1
    30c4:	18b8d83a 	srl	fp,r3,r2
    30c8:	e104703a 	and	r2,fp,r4
    30cc:	103feb26 	beq	r2,zero,307c <floor+0xbc>
    30d0:	00a20034 	movhi	r2,34816
    30d4:	109d6704 	addi	r2,r2,30108
    30d8:	00df8e34 	movhi	r3,32312
    30dc:	18f90f04 	addi	r3,r3,-7108
    30e0:	180f883a 	mov	r7,r3
    30e4:	100d883a 	mov	r6,r2
    30e8:	0003e840 	call	3e84 <__adddf3>
    30ec:	180b883a 	mov	r5,r3
    30f0:	000d883a 	mov	r6,zero
    30f4:	000f883a 	mov	r7,zero
    30f8:	1009883a 	mov	r4,r2
    30fc:	00043440 	call	4344 <__gtdf2>
    3100:	0080210e 	bge	zero,r2,3188 <floor+0x1c8>
    3104:	88002216 	blt	r17,zero,3190 <floor+0x1d0>
    3108:	0704303a 	nor	r2,zero,fp
    310c:	90a4703a 	and	r18,r18,r2
    3110:	003fd806 	br	3074 <floor+0xb4>
    3114:	00810004 	movi	r2,1024
    3118:	b0bfd81e 	bne	r22,r2,307c <floor+0xbc>
    311c:	800d883a 	mov	r6,r16
    3120:	280f883a 	mov	r7,r5
    3124:	0003e840 	call	3e84 <__adddf3>
    3128:	1021883a 	mov	r16,r2
    312c:	1823883a 	mov	r17,r3
    3130:	003fd206 	br	307c <floor+0xbc>
    3134:	00a20034 	movhi	r2,34816
    3138:	109d6704 	addi	r2,r2,30108
    313c:	00df8e34 	movhi	r3,32312
    3140:	18f90f04 	addi	r3,r3,-7108
    3144:	180f883a 	mov	r7,r3
    3148:	100d883a 	mov	r6,r2
    314c:	0003e840 	call	3e84 <__adddf3>
    3150:	180b883a 	mov	r5,r3
    3154:	000d883a 	mov	r6,zero
    3158:	000f883a 	mov	r7,zero
    315c:	1009883a 	mov	r4,r2
    3160:	00043440 	call	4344 <__gtdf2>
    3164:	00bfc30e 	bge	zero,r2,3074 <floor+0xb4>
    3168:	88001416 	blt	r17,zero,31bc <floor+0x1fc>
    316c:	002f883a 	mov	r23,zero
    3170:	0025883a 	mov	r18,zero
    3174:	003fbf06 	br	3074 <floor+0xb4>
    3178:	00800434 	movhi	r2,16
    317c:	1585d83a 	sra	r2,r2,r22
    3180:	88af883a 	add	r23,r17,r2
    3184:	003fb806 	br	3068 <floor+0xa8>
    3188:	882f883a 	mov	r23,r17
    318c:	003fb906 	br	3074 <floor+0xb4>
    3190:	00800504 	movi	r2,20
    3194:	b0801126 	beq	r22,r2,31dc <floor+0x21c>
    3198:	00c00d04 	movi	r3,52
    319c:	1d87c83a 	sub	r3,r3,r22
    31a0:	00800044 	movi	r2,1
    31a4:	10c4983a 	sll	r2,r2,r3
    31a8:	8085883a 	add	r2,r16,r2
    31ac:	1400012e 	bgeu	r2,r16,31b4 <floor+0x1f4>
    31b0:	8dc00044 	addi	r23,r17,1
    31b4:	1025883a 	mov	r18,r2
    31b8:	003fd306 	br	3108 <floor+0x148>
    31bc:	00a00034 	movhi	r2,32768
    31c0:	10bfffc4 	addi	r2,r2,-1
    31c4:	8884703a 	and	r2,r17,r2
    31c8:	8084b03a 	or	r2,r16,r2
    31cc:	103fee26 	beq	r2,zero,3188 <floor+0x1c8>
    31d0:	05effc34 	movhi	r23,49136
    31d4:	0025883a 	mov	r18,zero
    31d8:	003fa606 	br	3074 <floor+0xb4>
    31dc:	8dc00044 	addi	r23,r17,1
    31e0:	003fc906 	br	3108 <floor+0x148>

000031e4 <scalbn>:
    31e4:	2011883a 	mov	r8,r4
    31e8:	291ffc2c 	andhi	r4,r5,32752
    31ec:	2009d53a 	srai	r4,r4,20
    31f0:	defffd04 	addi	sp,sp,-12
    31f4:	dc000015 	stw	r16,0(sp)
    31f8:	dfc00215 	stw	ra,8(sp)
    31fc:	dc400115 	stw	r17,4(sp)
    3200:	2813883a 	mov	r9,r5
    3204:	2815883a 	mov	r10,r5
    3208:	3021883a 	mov	r16,r6
    320c:	2000281e 	bne	r4,zero,32b0 <scalbn+0xcc>
    3210:	00a00034 	movhi	r2,32768
    3214:	10bfffc4 	addi	r2,r2,-1
    3218:	2884703a 	and	r2,r5,r2
    321c:	4084b03a 	or	r2,r8,r2
    3220:	10001826 	beq	r2,zero,3284 <scalbn+0xa0>
    3224:	0005883a 	mov	r2,zero
    3228:	00d0d434 	movhi	r3,17232
    322c:	4009883a 	mov	r4,r8
    3230:	100d883a 	mov	r6,r2
    3234:	180f883a 	mov	r7,r3
    3238:	0003ef80 	call	3ef8 <__muldf3>
    323c:	100b883a 	mov	r5,r2
    3240:	1011883a 	mov	r8,r2
    3244:	00bffff4 	movhi	r2,65535
    3248:	108f2c04 	addi	r2,r2,15536
    324c:	180d883a 	mov	r6,r3
    3250:	1813883a 	mov	r9,r3
    3254:	8080120e 	bge	r16,r2,32a0 <scalbn+0xbc>
    3258:	00b0be74 	movhi	r2,49913
    325c:	10bcd644 	addi	r2,r2,-3239
    3260:	00c06974 	movhi	r3,421
    3264:	18db87c4 	addi	r3,r3,28191
    3268:	2809883a 	mov	r4,r5
    326c:	180f883a 	mov	r7,r3
    3270:	300b883a 	mov	r5,r6
    3274:	100d883a 	mov	r6,r2
    3278:	0003ef80 	call	3ef8 <__muldf3>
    327c:	1011883a 	mov	r8,r2
    3280:	1813883a 	mov	r9,r3
    3284:	4005883a 	mov	r2,r8
    3288:	4807883a 	mov	r3,r9
    328c:	dfc00217 	ldw	ra,8(sp)
    3290:	dc400117 	ldw	r17,4(sp)
    3294:	dc000017 	ldw	r16,0(sp)
    3298:	dec00304 	addi	sp,sp,12
    329c:	f800283a 	ret
    32a0:	189ffc2c 	andhi	r2,r3,32752
    32a4:	1005d53a 	srai	r2,r2,20
    32a8:	1815883a 	mov	r10,r3
    32ac:	113ff284 	addi	r4,r2,-54
    32b0:	0081ffc4 	movi	r2,2047
    32b4:	20801126 	beq	r4,r2,32fc <scalbn+0x118>
    32b8:	2409883a 	add	r4,r4,r16
    32bc:	0081ff84 	movi	r2,2046
    32c0:	11001c16 	blt	r2,r4,3334 <scalbn+0x150>
    32c4:	0100290e 	bge	zero,r4,336c <scalbn+0x188>
    32c8:	200a953a 	slli	r5,r4,20
    32cc:	01200434 	movhi	r4,32784
    32d0:	213fffc4 	addi	r4,r4,-1
    32d4:	5108703a 	and	r4,r10,r4
    32d8:	2148b03a 	or	r4,r4,r5
    32dc:	2013883a 	mov	r9,r4
    32e0:	4005883a 	mov	r2,r8
    32e4:	4807883a 	mov	r3,r9
    32e8:	dfc00217 	ldw	ra,8(sp)
    32ec:	dc400117 	ldw	r17,4(sp)
    32f0:	dc000017 	ldw	r16,0(sp)
    32f4:	dec00304 	addi	sp,sp,12
    32f8:	f800283a 	ret
    32fc:	480f883a 	mov	r7,r9
    3300:	4009883a 	mov	r4,r8
    3304:	480b883a 	mov	r5,r9
    3308:	400d883a 	mov	r6,r8
    330c:	0003e840 	call	3e84 <__adddf3>
    3310:	1011883a 	mov	r8,r2
    3314:	1813883a 	mov	r9,r3
    3318:	4005883a 	mov	r2,r8
    331c:	4807883a 	mov	r3,r9
    3320:	dfc00217 	ldw	ra,8(sp)
    3324:	dc400117 	ldw	r17,4(sp)
    3328:	dc000017 	ldw	r16,0(sp)
    332c:	dec00304 	addi	sp,sp,12
    3330:	f800283a 	ret
    3334:	04220034 	movhi	r16,34816
    3338:	841d6704 	addi	r16,r16,30108
    333c:	045f8e34 	movhi	r17,32312
    3340:	8c790f04 	addi	r17,r17,-7108
    3344:	480f883a 	mov	r7,r9
    3348:	400d883a 	mov	r6,r8
    334c:	8009883a 	mov	r4,r16
    3350:	880b883a 	mov	r5,r17
    3354:	00033c40 	call	33c4 <copysign>
    3358:	180b883a 	mov	r5,r3
    335c:	800d883a 	mov	r6,r16
    3360:	880f883a 	mov	r7,r17
    3364:	1009883a 	mov	r4,r2
    3368:	003fc306 	br	3278 <scalbn+0x94>
    336c:	00bff284 	movi	r2,-54
    3370:	11000716 	blt	r2,r4,3390 <scalbn+0x1ac>
    3374:	00b0d414 	movui	r2,50000
    3378:	143fee16 	blt	r2,r16,3334 <scalbn+0x150>
    337c:	0430be74 	movhi	r16,49913
    3380:	843cd644 	addi	r16,r16,-3239
    3384:	04406974 	movhi	r17,421
    3388:	8c5b87c4 	addi	r17,r17,28191
    338c:	003fed06 	br	3344 <scalbn+0x160>
    3390:	21000d84 	addi	r4,r4,54
    3394:	2008953a 	slli	r4,r4,20
    3398:	01e00434 	movhi	r7,32784
    339c:	39ffffc4 	addi	r7,r7,-1
    33a0:	51ce703a 	and	r7,r10,r7
    33a4:	390eb03a 	or	r7,r7,r4
    33a8:	024f2434 	movhi	r9,15504
    33ac:	4009883a 	mov	r4,r8
    33b0:	0011883a 	mov	r8,zero
    33b4:	380b883a 	mov	r5,r7
    33b8:	400d883a 	mov	r6,r8
    33bc:	480f883a 	mov	r7,r9
    33c0:	003fad06 	br	3278 <scalbn+0x94>

000033c4 <copysign>:
    33c4:	3813883a 	mov	r9,r7
    33c8:	01e00034 	movhi	r7,32768
    33cc:	39ffffc4 	addi	r7,r7,-1
    33d0:	394e703a 	and	r7,r7,r5
    33d4:	4aa0002c 	andhi	r10,r9,32768
    33d8:	3a8eb03a 	or	r7,r7,r10
    33dc:	2005883a 	mov	r2,r4
    33e0:	3807883a 	mov	r3,r7
    33e4:	f800283a 	ret

000033e8 <__divsf3>:
    33e8:	defff304 	addi	sp,sp,-52
    33ec:	dc400b15 	stw	r17,44(sp)
    33f0:	dc400204 	addi	r17,sp,8
    33f4:	dc000a15 	stw	r16,40(sp)
    33f8:	d9000015 	stw	r4,0(sp)
    33fc:	d9400115 	stw	r5,4(sp)
    3400:	d809883a 	mov	r4,sp
    3404:	880b883a 	mov	r5,r17
    3408:	dc000604 	addi	r16,sp,24
    340c:	dfc00c15 	stw	ra,48(sp)
    3410:	0004a940 	call	4a94 <__unpack_f>
    3414:	d9000104 	addi	r4,sp,4
    3418:	800b883a 	mov	r5,r16
    341c:	0004a940 	call	4a94 <__unpack_f>
    3420:	d9000217 	ldw	r4,8(sp)
    3424:	00800044 	movi	r2,1
    3428:	01800104 	movi	r6,4
    342c:	11000a2e 	bgeu	r2,r4,3458 <__divsf3+0x70>
    3430:	d9400617 	ldw	r5,24(sp)
    3434:	1140432e 	bgeu	r2,r5,3544 <__divsf3+0x15c>
    3438:	d8800317 	ldw	r2,12(sp)
    343c:	d8c00717 	ldw	r3,28(sp)
    3440:	10c4f03a 	xor	r2,r2,r3
    3444:	d8800315 	stw	r2,12(sp)
    3448:	21800226 	beq	r4,r6,3454 <__divsf3+0x6c>
    344c:	00800084 	movi	r2,2
    3450:	2080101e 	bne	r4,r2,3494 <__divsf3+0xac>
    3454:	29000726 	beq	r5,r4,3474 <__divsf3+0x8c>
    3458:	8809883a 	mov	r4,r17
    345c:	00049340 	call	4934 <__pack_f>
    3460:	dfc00c17 	ldw	ra,48(sp)
    3464:	dc400b17 	ldw	r17,44(sp)
    3468:	dc000a17 	ldw	r16,40(sp)
    346c:	dec00d04 	addi	sp,sp,52
    3470:	f800283a 	ret
    3474:	01000074 	movhi	r4,1
    3478:	2128d404 	addi	r4,r4,-23728
    347c:	00049340 	call	4934 <__pack_f>
    3480:	dfc00c17 	ldw	ra,48(sp)
    3484:	dc400b17 	ldw	r17,44(sp)
    3488:	dc000a17 	ldw	r16,40(sp)
    348c:	dec00d04 	addi	sp,sp,52
    3490:	f800283a 	ret
    3494:	29802d26 	beq	r5,r6,354c <__divsf3+0x164>
    3498:	28801a26 	beq	r5,r2,3504 <__divsf3+0x11c>
    349c:	d8c00417 	ldw	r3,16(sp)
    34a0:	d8800817 	ldw	r2,32(sp)
    34a4:	d9000517 	ldw	r4,20(sp)
    34a8:	d9800917 	ldw	r6,36(sp)
    34ac:	1885c83a 	sub	r2,r3,r2
    34b0:	d8800415 	stw	r2,16(sp)
    34b4:	2180032e 	bgeu	r4,r6,34c4 <__divsf3+0xdc>
    34b8:	10bfffc4 	addi	r2,r2,-1
    34bc:	d8800415 	stw	r2,16(sp)
    34c0:	2109883a 	add	r4,r4,r4
    34c4:	01500034 	movhi	r5,16384
    34c8:	0007883a 	mov	r3,zero
    34cc:	0005883a 	mov	r2,zero
    34d0:	01c007c4 	movi	r7,31
    34d4:	10800044 	addi	r2,r2,1
    34d8:	21800236 	bltu	r4,r6,34e4 <__divsf3+0xfc>
    34dc:	1946b03a 	or	r3,r3,r5
    34e0:	2189c83a 	sub	r4,r4,r6
    34e4:	280ad07a 	srli	r5,r5,1
    34e8:	2109883a 	add	r4,r4,r4
    34ec:	11fff91e 	bne	r2,r7,34d4 <__divsf3+0xec>
    34f0:	19401fcc 	andi	r5,r3,127
    34f4:	00801004 	movi	r2,64
    34f8:	28800a26 	beq	r5,r2,3524 <__divsf3+0x13c>
    34fc:	d8c00515 	stw	r3,20(sp)
    3500:	003fd506 	br	3458 <__divsf3+0x70>
    3504:	8809883a 	mov	r4,r17
    3508:	d9800215 	stw	r6,8(sp)
    350c:	00049340 	call	4934 <__pack_f>
    3510:	dfc00c17 	ldw	ra,48(sp)
    3514:	dc400b17 	ldw	r17,44(sp)
    3518:	dc000a17 	ldw	r16,40(sp)
    351c:	dec00d04 	addi	sp,sp,52
    3520:	f800283a 	ret
    3524:	1880200c 	andi	r2,r3,128
    3528:	103ff41e 	bne	r2,zero,34fc <__divsf3+0x114>
    352c:	203ff326 	beq	r4,zero,34fc <__divsf3+0x114>
    3530:	1947883a 	add	r3,r3,r5
    3534:	00bfe004 	movi	r2,-128
    3538:	1886703a 	and	r3,r3,r2
    353c:	d8c00515 	stw	r3,20(sp)
    3540:	003fc506 	br	3458 <__divsf3+0x70>
    3544:	8009883a 	mov	r4,r16
    3548:	003fc406 	br	345c <__divsf3+0x74>
    354c:	8809883a 	mov	r4,r17
    3550:	d8000515 	stw	zero,20(sp)
    3554:	d8000415 	stw	zero,16(sp)
    3558:	003fc006 	br	345c <__divsf3+0x74>

0000355c <__eqsf2>:
    355c:	defff304 	addi	sp,sp,-52
    3560:	dc400b15 	stw	r17,44(sp)
    3564:	dc400204 	addi	r17,sp,8
    3568:	dc000a15 	stw	r16,40(sp)
    356c:	d9000015 	stw	r4,0(sp)
    3570:	d9400115 	stw	r5,4(sp)
    3574:	d809883a 	mov	r4,sp
    3578:	880b883a 	mov	r5,r17
    357c:	dc000604 	addi	r16,sp,24
    3580:	dfc00c15 	stw	ra,48(sp)
    3584:	0004a940 	call	4a94 <__unpack_f>
    3588:	d9000104 	addi	r4,sp,4
    358c:	800b883a 	mov	r5,r16
    3590:	0004a940 	call	4a94 <__unpack_f>
    3594:	d8800217 	ldw	r2,8(sp)
    3598:	00c00044 	movi	r3,1
    359c:	180d883a 	mov	r6,r3
    35a0:	1880062e 	bgeu	r3,r2,35bc <__eqsf2+0x60>
    35a4:	d8800617 	ldw	r2,24(sp)
    35a8:	8809883a 	mov	r4,r17
    35ac:	800b883a 	mov	r5,r16
    35b0:	1880022e 	bgeu	r3,r2,35bc <__eqsf2+0x60>
    35b4:	0004b5c0 	call	4b5c <__fpcmp_parts_f>
    35b8:	100d883a 	mov	r6,r2
    35bc:	3005883a 	mov	r2,r6
    35c0:	dfc00c17 	ldw	ra,48(sp)
    35c4:	dc400b17 	ldw	r17,44(sp)
    35c8:	dc000a17 	ldw	r16,40(sp)
    35cc:	dec00d04 	addi	sp,sp,52
    35d0:	f800283a 	ret

000035d4 <__gtsf2>:
    35d4:	defff304 	addi	sp,sp,-52
    35d8:	dc400b15 	stw	r17,44(sp)
    35dc:	dc400204 	addi	r17,sp,8
    35e0:	dc000a15 	stw	r16,40(sp)
    35e4:	d9000015 	stw	r4,0(sp)
    35e8:	d9400115 	stw	r5,4(sp)
    35ec:	d809883a 	mov	r4,sp
    35f0:	880b883a 	mov	r5,r17
    35f4:	dc000604 	addi	r16,sp,24
    35f8:	dfc00c15 	stw	ra,48(sp)
    35fc:	0004a940 	call	4a94 <__unpack_f>
    3600:	d9000104 	addi	r4,sp,4
    3604:	800b883a 	mov	r5,r16
    3608:	0004a940 	call	4a94 <__unpack_f>
    360c:	d8800217 	ldw	r2,8(sp)
    3610:	00c00044 	movi	r3,1
    3614:	01bfffc4 	movi	r6,-1
    3618:	1880062e 	bgeu	r3,r2,3634 <__gtsf2+0x60>
    361c:	d8800617 	ldw	r2,24(sp)
    3620:	8809883a 	mov	r4,r17
    3624:	800b883a 	mov	r5,r16
    3628:	1880022e 	bgeu	r3,r2,3634 <__gtsf2+0x60>
    362c:	0004b5c0 	call	4b5c <__fpcmp_parts_f>
    3630:	100d883a 	mov	r6,r2
    3634:	3005883a 	mov	r2,r6
    3638:	dfc00c17 	ldw	ra,48(sp)
    363c:	dc400b17 	ldw	r17,44(sp)
    3640:	dc000a17 	ldw	r16,40(sp)
    3644:	dec00d04 	addi	sp,sp,52
    3648:	f800283a 	ret

0000364c <__gesf2>:
    364c:	defff304 	addi	sp,sp,-52
    3650:	dc400b15 	stw	r17,44(sp)
    3654:	dc400204 	addi	r17,sp,8
    3658:	dc000a15 	stw	r16,40(sp)
    365c:	d9000015 	stw	r4,0(sp)
    3660:	d9400115 	stw	r5,4(sp)
    3664:	d809883a 	mov	r4,sp
    3668:	880b883a 	mov	r5,r17
    366c:	dc000604 	addi	r16,sp,24
    3670:	dfc00c15 	stw	ra,48(sp)
    3674:	0004a940 	call	4a94 <__unpack_f>
    3678:	d9000104 	addi	r4,sp,4
    367c:	800b883a 	mov	r5,r16
    3680:	0004a940 	call	4a94 <__unpack_f>
    3684:	d8800217 	ldw	r2,8(sp)
    3688:	00c00044 	movi	r3,1
    368c:	01bfffc4 	movi	r6,-1
    3690:	1880062e 	bgeu	r3,r2,36ac <__gesf2+0x60>
    3694:	d8800617 	ldw	r2,24(sp)
    3698:	8809883a 	mov	r4,r17
    369c:	800b883a 	mov	r5,r16
    36a0:	1880022e 	bgeu	r3,r2,36ac <__gesf2+0x60>
    36a4:	0004b5c0 	call	4b5c <__fpcmp_parts_f>
    36a8:	100d883a 	mov	r6,r2
    36ac:	3005883a 	mov	r2,r6
    36b0:	dfc00c17 	ldw	ra,48(sp)
    36b4:	dc400b17 	ldw	r17,44(sp)
    36b8:	dc000a17 	ldw	r16,40(sp)
    36bc:	dec00d04 	addi	sp,sp,52
    36c0:	f800283a 	ret

000036c4 <__ltsf2>:
    36c4:	defff304 	addi	sp,sp,-52
    36c8:	dc400b15 	stw	r17,44(sp)
    36cc:	dc400204 	addi	r17,sp,8
    36d0:	dc000a15 	stw	r16,40(sp)
    36d4:	d9000015 	stw	r4,0(sp)
    36d8:	d9400115 	stw	r5,4(sp)
    36dc:	d809883a 	mov	r4,sp
    36e0:	880b883a 	mov	r5,r17
    36e4:	dc000604 	addi	r16,sp,24
    36e8:	dfc00c15 	stw	ra,48(sp)
    36ec:	0004a940 	call	4a94 <__unpack_f>
    36f0:	d9000104 	addi	r4,sp,4
    36f4:	800b883a 	mov	r5,r16
    36f8:	0004a940 	call	4a94 <__unpack_f>
    36fc:	d8800217 	ldw	r2,8(sp)
    3700:	00c00044 	movi	r3,1
    3704:	180d883a 	mov	r6,r3
    3708:	1880062e 	bgeu	r3,r2,3724 <__ltsf2+0x60>
    370c:	d8800617 	ldw	r2,24(sp)
    3710:	8809883a 	mov	r4,r17
    3714:	800b883a 	mov	r5,r16
    3718:	1880022e 	bgeu	r3,r2,3724 <__ltsf2+0x60>
    371c:	0004b5c0 	call	4b5c <__fpcmp_parts_f>
    3720:	100d883a 	mov	r6,r2
    3724:	3005883a 	mov	r2,r6
    3728:	dfc00c17 	ldw	ra,48(sp)
    372c:	dc400b17 	ldw	r17,44(sp)
    3730:	dc000a17 	ldw	r16,40(sp)
    3734:	dec00d04 	addi	sp,sp,52
    3738:	f800283a 	ret

0000373c <__lesf2>:
    373c:	defff304 	addi	sp,sp,-52
    3740:	dc400b15 	stw	r17,44(sp)
    3744:	dc400204 	addi	r17,sp,8
    3748:	dc000a15 	stw	r16,40(sp)
    374c:	d9000015 	stw	r4,0(sp)
    3750:	d9400115 	stw	r5,4(sp)
    3754:	d809883a 	mov	r4,sp
    3758:	880b883a 	mov	r5,r17
    375c:	dc000604 	addi	r16,sp,24
    3760:	dfc00c15 	stw	ra,48(sp)
    3764:	0004a940 	call	4a94 <__unpack_f>
    3768:	d9000104 	addi	r4,sp,4
    376c:	800b883a 	mov	r5,r16
    3770:	0004a940 	call	4a94 <__unpack_f>
    3774:	d8800217 	ldw	r2,8(sp)
    3778:	00c00044 	movi	r3,1
    377c:	180d883a 	mov	r6,r3
    3780:	1880062e 	bgeu	r3,r2,379c <__lesf2+0x60>
    3784:	d8800617 	ldw	r2,24(sp)
    3788:	8809883a 	mov	r4,r17
    378c:	800b883a 	mov	r5,r16
    3790:	1880022e 	bgeu	r3,r2,379c <__lesf2+0x60>
    3794:	0004b5c0 	call	4b5c <__fpcmp_parts_f>
    3798:	100d883a 	mov	r6,r2
    379c:	3005883a 	mov	r2,r6
    37a0:	dfc00c17 	ldw	ra,48(sp)
    37a4:	dc400b17 	ldw	r17,44(sp)
    37a8:	dc000a17 	ldw	r16,40(sp)
    37ac:	dec00d04 	addi	sp,sp,52
    37b0:	f800283a 	ret

000037b4 <__floatsisf>:
    37b4:	2006d7fa 	srli	r3,r4,31
    37b8:	defffa04 	addi	sp,sp,-24
    37bc:	008000c4 	movi	r2,3
    37c0:	dfc00515 	stw	ra,20(sp)
    37c4:	dc000415 	stw	r16,16(sp)
    37c8:	d8800015 	stw	r2,0(sp)
    37cc:	d8c00115 	stw	r3,4(sp)
    37d0:	2000081e 	bne	r4,zero,37f4 <__floatsisf+0x40>
    37d4:	00800084 	movi	r2,2
    37d8:	d8800015 	stw	r2,0(sp)
    37dc:	d809883a 	mov	r4,sp
    37e0:	00049340 	call	4934 <__pack_f>
    37e4:	dfc00517 	ldw	ra,20(sp)
    37e8:	dc000417 	ldw	r16,16(sp)
    37ec:	dec00604 	addi	sp,sp,24
    37f0:	f800283a 	ret
    37f4:	00800784 	movi	r2,30
    37f8:	1807003a 	cmpeq	r3,r3,zero
    37fc:	d8800215 	stw	r2,8(sp)
    3800:	18000e1e 	bne	r3,zero,383c <__floatsisf+0x88>
    3804:	00a00034 	movhi	r2,32768
    3808:	20800e26 	beq	r4,r2,3844 <__floatsisf+0x90>
    380c:	0121c83a 	sub	r16,zero,r4
    3810:	8009883a 	mov	r4,r16
    3814:	dc000315 	stw	r16,12(sp)
    3818:	00048b40 	call	48b4 <__clzsi2>
    381c:	117fffc4 	addi	r5,r2,-1
    3820:	017fee0e 	bge	zero,r5,37dc <__floatsisf+0x28>
    3824:	d8800217 	ldw	r2,8(sp)
    3828:	8146983a 	sll	r3,r16,r5
    382c:	1145c83a 	sub	r2,r2,r5
    3830:	d8c00315 	stw	r3,12(sp)
    3834:	d8800215 	stw	r2,8(sp)
    3838:	003fe806 	br	37dc <__floatsisf+0x28>
    383c:	2021883a 	mov	r16,r4
    3840:	003ff306 	br	3810 <__floatsisf+0x5c>
    3844:	00b3c034 	movhi	r2,52992
    3848:	003fe606 	br	37e4 <__floatsisf+0x30>

0000384c <__fixsfsi>:
    384c:	defffa04 	addi	sp,sp,-24
    3850:	d9000015 	stw	r4,0(sp)
    3854:	d9400104 	addi	r5,sp,4
    3858:	d809883a 	mov	r4,sp
    385c:	dfc00515 	stw	ra,20(sp)
    3860:	0004a940 	call	4a94 <__unpack_f>
    3864:	d8c00117 	ldw	r3,4(sp)
    3868:	00800084 	movi	r2,2
    386c:	1880041e 	bne	r3,r2,3880 <__fixsfsi+0x34>
    3870:	0005883a 	mov	r2,zero
    3874:	dfc00517 	ldw	ra,20(sp)
    3878:	dec00604 	addi	sp,sp,24
    387c:	f800283a 	ret
    3880:	00800044 	movi	r2,1
    3884:	10fffa2e 	bgeu	r2,r3,3870 <__fixsfsi+0x24>
    3888:	00800104 	movi	r2,4
    388c:	18800426 	beq	r3,r2,38a0 <__fixsfsi+0x54>
    3890:	d8800317 	ldw	r2,12(sp)
    3894:	103ff616 	blt	r2,zero,3870 <__fixsfsi+0x24>
    3898:	00c00784 	movi	r3,30
    389c:	1880070e 	bge	r3,r2,38bc <__fixsfsi+0x70>
    38a0:	d8800217 	ldw	r2,8(sp)
    38a4:	10000c1e 	bne	r2,zero,38d8 <__fixsfsi+0x8c>
    38a8:	00a00034 	movhi	r2,32768
    38ac:	10bfffc4 	addi	r2,r2,-1
    38b0:	dfc00517 	ldw	ra,20(sp)
    38b4:	dec00604 	addi	sp,sp,24
    38b8:	f800283a 	ret
    38bc:	1885c83a 	sub	r2,r3,r2
    38c0:	d9000217 	ldw	r4,8(sp)
    38c4:	d8c00417 	ldw	r3,16(sp)
    38c8:	1884d83a 	srl	r2,r3,r2
    38cc:	203fe926 	beq	r4,zero,3874 <__fixsfsi+0x28>
    38d0:	0085c83a 	sub	r2,zero,r2
    38d4:	003fe706 	br	3874 <__fixsfsi+0x28>
    38d8:	00a00034 	movhi	r2,32768
    38dc:	003fe506 	br	3874 <__fixsfsi+0x28>

000038e0 <__extendsfdf2>:
    38e0:	defff904 	addi	sp,sp,-28
    38e4:	d9000115 	stw	r4,4(sp)
    38e8:	d9400204 	addi	r5,sp,8
    38ec:	d9000104 	addi	r4,sp,4
    38f0:	dfc00615 	stw	ra,24(sp)
    38f4:	0004a940 	call	4a94 <__unpack_f>
    38f8:	d9c00517 	ldw	r7,20(sp)
    38fc:	0011883a 	mov	r8,zero
    3900:	400697ba 	slli	r3,r8,30
    3904:	3812d0ba 	srli	r9,r7,2
    3908:	380497ba 	slli	r2,r7,30
    390c:	d9000217 	ldw	r4,8(sp)
    3910:	d9400317 	ldw	r5,12(sp)
    3914:	d9800417 	ldw	r6,16(sp)
    3918:	48c6b03a 	or	r3,r9,r3
    391c:	100f883a 	mov	r7,r2
    3920:	d8c00015 	stw	r3,0(sp)
    3924:	00046240 	call	4624 <__make_dp>
    3928:	dfc00617 	ldw	ra,24(sp)
    392c:	dec00704 	addi	sp,sp,28
    3930:	f800283a 	ret

00003934 <__floatunsisf>:
    3934:	defff904 	addi	sp,sp,-28
    3938:	dc400515 	stw	r17,20(sp)
    393c:	dc000415 	stw	r16,16(sp)
    3940:	dfc00615 	stw	ra,24(sp)
    3944:	04400784 	movi	r17,30
    3948:	2021883a 	mov	r16,r4
    394c:	d8000115 	stw	zero,4(sp)
    3950:	2000091e 	bne	r4,zero,3978 <__floatunsisf+0x44>
    3954:	00800084 	movi	r2,2
    3958:	d8800015 	stw	r2,0(sp)
    395c:	d809883a 	mov	r4,sp
    3960:	00049340 	call	4934 <__pack_f>
    3964:	dfc00617 	ldw	ra,24(sp)
    3968:	dc400517 	ldw	r17,20(sp)
    396c:	dc000417 	ldw	r16,16(sp)
    3970:	dec00704 	addi	sp,sp,28
    3974:	f800283a 	ret
    3978:	008000c4 	movi	r2,3
    397c:	d9000315 	stw	r4,12(sp)
    3980:	d8800015 	stw	r2,0(sp)
    3984:	dc400215 	stw	r17,8(sp)
    3988:	00048b40 	call	48b4 <__clzsi2>
    398c:	117fffc4 	addi	r5,r2,-1
    3990:	0147c83a 	sub	r3,zero,r5
    3994:	00800044 	movi	r2,1
    3998:	10c4983a 	sll	r2,r2,r3
    399c:	80c6d83a 	srl	r3,r16,r3
    39a0:	8949c83a 	sub	r4,r17,r5
    39a4:	10bfffc4 	addi	r2,r2,-1
    39a8:	8084703a 	and	r2,r16,r2
    39ac:	1004c03a 	cmpne	r2,r2,zero
    39b0:	1886b03a 	or	r3,r3,r2
    39b4:	28000c16 	blt	r5,zero,39e8 <__floatunsisf+0xb4>
    39b8:	8144983a 	sll	r2,r16,r5
    39bc:	8947c83a 	sub	r3,r17,r5
    39c0:	283fe626 	beq	r5,zero,395c <__floatunsisf+0x28>
    39c4:	d809883a 	mov	r4,sp
    39c8:	d8800315 	stw	r2,12(sp)
    39cc:	d8c00215 	stw	r3,8(sp)
    39d0:	00049340 	call	4934 <__pack_f>
    39d4:	dfc00617 	ldw	ra,24(sp)
    39d8:	dc400517 	ldw	r17,20(sp)
    39dc:	dc000417 	ldw	r16,16(sp)
    39e0:	dec00704 	addi	sp,sp,28
    39e4:	f800283a 	ret
    39e8:	d8c00315 	stw	r3,12(sp)
    39ec:	d9000215 	stw	r4,8(sp)
    39f0:	003fda06 	br	395c <__floatunsisf+0x28>

000039f4 <_fpadd_parts>:
    39f4:	defff804 	addi	sp,sp,-32
    39f8:	dcc00315 	stw	r19,12(sp)
    39fc:	2027883a 	mov	r19,r4
    3a00:	21000017 	ldw	r4,0(r4)
    3a04:	00c00044 	movi	r3,1
    3a08:	dd400515 	stw	r21,20(sp)
    3a0c:	dd000415 	stw	r20,16(sp)
    3a10:	ddc00715 	stw	r23,28(sp)
    3a14:	dd800615 	stw	r22,24(sp)
    3a18:	dc800215 	stw	r18,8(sp)
    3a1c:	dc400115 	stw	r17,4(sp)
    3a20:	dc000015 	stw	r16,0(sp)
    3a24:	282b883a 	mov	r21,r5
    3a28:	3029883a 	mov	r20,r6
    3a2c:	1900632e 	bgeu	r3,r4,3bbc <_fpadd_parts+0x1c8>
    3a30:	28800017 	ldw	r2,0(r5)
    3a34:	1880812e 	bgeu	r3,r2,3c3c <_fpadd_parts+0x248>
    3a38:	00c00104 	movi	r3,4
    3a3c:	20c0dc26 	beq	r4,r3,3db0 <_fpadd_parts+0x3bc>
    3a40:	10c07e26 	beq	r2,r3,3c3c <_fpadd_parts+0x248>
    3a44:	00c00084 	movi	r3,2
    3a48:	10c06726 	beq	r2,r3,3be8 <_fpadd_parts+0x1f4>
    3a4c:	20c07b26 	beq	r4,r3,3c3c <_fpadd_parts+0x248>
    3a50:	9dc00217 	ldw	r23,8(r19)
    3a54:	28c00217 	ldw	r3,8(r5)
    3a58:	9c400317 	ldw	r17,12(r19)
    3a5c:	2bc00317 	ldw	r15,12(r5)
    3a60:	b8cdc83a 	sub	r6,r23,r3
    3a64:	9c800417 	ldw	r18,16(r19)
    3a68:	2c000417 	ldw	r16,16(r5)
    3a6c:	3009883a 	mov	r4,r6
    3a70:	30009716 	blt	r6,zero,3cd0 <_fpadd_parts+0x2dc>
    3a74:	00800fc4 	movi	r2,63
    3a78:	11806b16 	blt	r2,r6,3c28 <_fpadd_parts+0x234>
    3a7c:	0100a40e 	bge	zero,r4,3d10 <_fpadd_parts+0x31c>
    3a80:	35bff804 	addi	r22,r6,-32
    3a84:	b000bc16 	blt	r22,zero,3d78 <_fpadd_parts+0x384>
    3a88:	8596d83a 	srl	r11,r16,r22
    3a8c:	0019883a 	mov	r12,zero
    3a90:	0013883a 	mov	r9,zero
    3a94:	01000044 	movi	r4,1
    3a98:	0015883a 	mov	r10,zero
    3a9c:	b000be16 	blt	r22,zero,3d98 <_fpadd_parts+0x3a4>
    3aa0:	2590983a 	sll	r8,r4,r22
    3aa4:	000f883a 	mov	r7,zero
    3aa8:	00bfffc4 	movi	r2,-1
    3aac:	3889883a 	add	r4,r7,r2
    3ab0:	408b883a 	add	r5,r8,r2
    3ab4:	21cd803a 	cmpltu	r6,r4,r7
    3ab8:	314b883a 	add	r5,r6,r5
    3abc:	7904703a 	and	r2,r15,r4
    3ac0:	8146703a 	and	r3,r16,r5
    3ac4:	10c4b03a 	or	r2,r2,r3
    3ac8:	10000226 	beq	r2,zero,3ad4 <_fpadd_parts+0xe0>
    3acc:	02400044 	movi	r9,1
    3ad0:	0015883a 	mov	r10,zero
    3ad4:	5a5eb03a 	or	r15,r11,r9
    3ad8:	62a0b03a 	or	r16,r12,r10
    3adc:	99400117 	ldw	r5,4(r19)
    3ae0:	a8800117 	ldw	r2,4(r21)
    3ae4:	28806e26 	beq	r5,r2,3ca0 <_fpadd_parts+0x2ac>
    3ae8:	28006626 	beq	r5,zero,3c84 <_fpadd_parts+0x290>
    3aec:	7c45c83a 	sub	r2,r15,r17
    3af0:	7889803a 	cmpltu	r4,r15,r2
    3af4:	8487c83a 	sub	r3,r16,r18
    3af8:	1909c83a 	sub	r4,r3,r4
    3afc:	100d883a 	mov	r6,r2
    3b00:	200f883a 	mov	r7,r4
    3b04:	38007716 	blt	r7,zero,3ce4 <_fpadd_parts+0x2f0>
    3b08:	a5c00215 	stw	r23,8(r20)
    3b0c:	a1c00415 	stw	r7,16(r20)
    3b10:	a0000115 	stw	zero,4(r20)
    3b14:	a1800315 	stw	r6,12(r20)
    3b18:	a2000317 	ldw	r8,12(r20)
    3b1c:	a2400417 	ldw	r9,16(r20)
    3b20:	00bfffc4 	movi	r2,-1
    3b24:	408b883a 	add	r5,r8,r2
    3b28:	2a09803a 	cmpltu	r4,r5,r8
    3b2c:	488d883a 	add	r6,r9,r2
    3b30:	01c40034 	movhi	r7,4096
    3b34:	39ffffc4 	addi	r7,r7,-1
    3b38:	218d883a 	add	r6,r4,r6
    3b3c:	39801736 	bltu	r7,r6,3b9c <_fpadd_parts+0x1a8>
    3b40:	31c06526 	beq	r6,r7,3cd8 <_fpadd_parts+0x2e4>
    3b44:	a3000217 	ldw	r12,8(r20)
    3b48:	4209883a 	add	r4,r8,r8
    3b4c:	00bfffc4 	movi	r2,-1
    3b50:	220f803a 	cmpltu	r7,r4,r8
    3b54:	4a4b883a 	add	r5,r9,r9
    3b58:	394f883a 	add	r7,r7,r5
    3b5c:	2095883a 	add	r10,r4,r2
    3b60:	3897883a 	add	r11,r7,r2
    3b64:	510d803a 	cmpltu	r6,r10,r4
    3b68:	6099883a 	add	r12,r12,r2
    3b6c:	32d7883a 	add	r11,r6,r11
    3b70:	00840034 	movhi	r2,4096
    3b74:	10bfffc4 	addi	r2,r2,-1
    3b78:	2011883a 	mov	r8,r4
    3b7c:	3813883a 	mov	r9,r7
    3b80:	a1000315 	stw	r4,12(r20)
    3b84:	a1c00415 	stw	r7,16(r20)
    3b88:	a3000215 	stw	r12,8(r20)
    3b8c:	12c00336 	bltu	r2,r11,3b9c <_fpadd_parts+0x1a8>
    3b90:	58bfed1e 	bne	r11,r2,3b48 <_fpadd_parts+0x154>
    3b94:	00bfff84 	movi	r2,-2
    3b98:	12bfeb2e 	bgeu	r2,r10,3b48 <_fpadd_parts+0x154>
    3b9c:	a2800417 	ldw	r10,16(r20)
    3ba0:	008000c4 	movi	r2,3
    3ba4:	00c80034 	movhi	r3,8192
    3ba8:	18ffffc4 	addi	r3,r3,-1
    3bac:	a2400317 	ldw	r9,12(r20)
    3bb0:	a0800015 	stw	r2,0(r20)
    3bb4:	1a802336 	bltu	r3,r10,3c44 <_fpadd_parts+0x250>
    3bb8:	a027883a 	mov	r19,r20
    3bbc:	9805883a 	mov	r2,r19
    3bc0:	ddc00717 	ldw	r23,28(sp)
    3bc4:	dd800617 	ldw	r22,24(sp)
    3bc8:	dd400517 	ldw	r21,20(sp)
    3bcc:	dd000417 	ldw	r20,16(sp)
    3bd0:	dcc00317 	ldw	r19,12(sp)
    3bd4:	dc800217 	ldw	r18,8(sp)
    3bd8:	dc400117 	ldw	r17,4(sp)
    3bdc:	dc000017 	ldw	r16,0(sp)
    3be0:	dec00804 	addi	sp,sp,32
    3be4:	f800283a 	ret
    3be8:	20fff41e 	bne	r4,r3,3bbc <_fpadd_parts+0x1c8>
    3bec:	31000015 	stw	r4,0(r6)
    3bf0:	98800117 	ldw	r2,4(r19)
    3bf4:	30800115 	stw	r2,4(r6)
    3bf8:	98c00217 	ldw	r3,8(r19)
    3bfc:	30c00215 	stw	r3,8(r6)
    3c00:	98800317 	ldw	r2,12(r19)
    3c04:	30800315 	stw	r2,12(r6)
    3c08:	98c00417 	ldw	r3,16(r19)
    3c0c:	30c00415 	stw	r3,16(r6)
    3c10:	98800117 	ldw	r2,4(r19)
    3c14:	28c00117 	ldw	r3,4(r5)
    3c18:	3027883a 	mov	r19,r6
    3c1c:	10c4703a 	and	r2,r2,r3
    3c20:	30800115 	stw	r2,4(r6)
    3c24:	003fe506 	br	3bbc <_fpadd_parts+0x1c8>
    3c28:	1dc02616 	blt	r3,r23,3cc4 <_fpadd_parts+0x2d0>
    3c2c:	0023883a 	mov	r17,zero
    3c30:	182f883a 	mov	r23,r3
    3c34:	0025883a 	mov	r18,zero
    3c38:	003fa806 	br	3adc <_fpadd_parts+0xe8>
    3c3c:	a827883a 	mov	r19,r21
    3c40:	003fde06 	br	3bbc <_fpadd_parts+0x1c8>
    3c44:	01800044 	movi	r6,1
    3c48:	500497fa 	slli	r2,r10,31
    3c4c:	4808d07a 	srli	r4,r9,1
    3c50:	518ad83a 	srl	r5,r10,r6
    3c54:	a2000217 	ldw	r8,8(r20)
    3c58:	1108b03a 	or	r4,r2,r4
    3c5c:	0007883a 	mov	r3,zero
    3c60:	4984703a 	and	r2,r9,r6
    3c64:	208cb03a 	or	r6,r4,r2
    3c68:	28ceb03a 	or	r7,r5,r3
    3c6c:	42000044 	addi	r8,r8,1
    3c70:	a027883a 	mov	r19,r20
    3c74:	a1c00415 	stw	r7,16(r20)
    3c78:	a2000215 	stw	r8,8(r20)
    3c7c:	a1800315 	stw	r6,12(r20)
    3c80:	003fce06 	br	3bbc <_fpadd_parts+0x1c8>
    3c84:	8bc5c83a 	sub	r2,r17,r15
    3c88:	8889803a 	cmpltu	r4,r17,r2
    3c8c:	9407c83a 	sub	r3,r18,r16
    3c90:	1909c83a 	sub	r4,r3,r4
    3c94:	100d883a 	mov	r6,r2
    3c98:	200f883a 	mov	r7,r4
    3c9c:	003f9906 	br	3b04 <_fpadd_parts+0x110>
    3ca0:	8bc5883a 	add	r2,r17,r15
    3ca4:	1449803a 	cmpltu	r4,r2,r17
    3ca8:	9407883a 	add	r3,r18,r16
    3cac:	20c9883a 	add	r4,r4,r3
    3cb0:	a1400115 	stw	r5,4(r20)
    3cb4:	a5c00215 	stw	r23,8(r20)
    3cb8:	a0800315 	stw	r2,12(r20)
    3cbc:	a1000415 	stw	r4,16(r20)
    3cc0:	003fb606 	br	3b9c <_fpadd_parts+0x1a8>
    3cc4:	001f883a 	mov	r15,zero
    3cc8:	0021883a 	mov	r16,zero
    3ccc:	003f8306 	br	3adc <_fpadd_parts+0xe8>
    3cd0:	018dc83a 	sub	r6,zero,r6
    3cd4:	003f6706 	br	3a74 <_fpadd_parts+0x80>
    3cd8:	00bfff84 	movi	r2,-2
    3cdc:	117faf36 	bltu	r2,r5,3b9c <_fpadd_parts+0x1a8>
    3ce0:	003f9806 	br	3b44 <_fpadd_parts+0x150>
    3ce4:	0005883a 	mov	r2,zero
    3ce8:	1189c83a 	sub	r4,r2,r6
    3cec:	1105803a 	cmpltu	r2,r2,r4
    3cf0:	01cbc83a 	sub	r5,zero,r7
    3cf4:	2885c83a 	sub	r2,r5,r2
    3cf8:	01800044 	movi	r6,1
    3cfc:	a1800115 	stw	r6,4(r20)
    3d00:	a5c00215 	stw	r23,8(r20)
    3d04:	a1000315 	stw	r4,12(r20)
    3d08:	a0800415 	stw	r2,16(r20)
    3d0c:	003f8206 	br	3b18 <_fpadd_parts+0x124>
    3d10:	203f7226 	beq	r4,zero,3adc <_fpadd_parts+0xe8>
    3d14:	35bff804 	addi	r22,r6,-32
    3d18:	b9af883a 	add	r23,r23,r6
    3d1c:	b0003116 	blt	r22,zero,3de4 <_fpadd_parts+0x3f0>
    3d20:	959ad83a 	srl	r13,r18,r22
    3d24:	001d883a 	mov	r14,zero
    3d28:	000f883a 	mov	r7,zero
    3d2c:	01000044 	movi	r4,1
    3d30:	0011883a 	mov	r8,zero
    3d34:	b0002516 	blt	r22,zero,3dcc <_fpadd_parts+0x3d8>
    3d38:	2594983a 	sll	r10,r4,r22
    3d3c:	0013883a 	mov	r9,zero
    3d40:	00bfffc4 	movi	r2,-1
    3d44:	4889883a 	add	r4,r9,r2
    3d48:	508b883a 	add	r5,r10,r2
    3d4c:	224d803a 	cmpltu	r6,r4,r9
    3d50:	314b883a 	add	r5,r6,r5
    3d54:	8904703a 	and	r2,r17,r4
    3d58:	9146703a 	and	r3,r18,r5
    3d5c:	10c4b03a 	or	r2,r2,r3
    3d60:	10000226 	beq	r2,zero,3d6c <_fpadd_parts+0x378>
    3d64:	01c00044 	movi	r7,1
    3d68:	0011883a 	mov	r8,zero
    3d6c:	69e2b03a 	or	r17,r13,r7
    3d70:	7224b03a 	or	r18,r14,r8
    3d74:	003f5906 	br	3adc <_fpadd_parts+0xe8>
    3d78:	8407883a 	add	r3,r16,r16
    3d7c:	008007c4 	movi	r2,31
    3d80:	1185c83a 	sub	r2,r2,r6
    3d84:	1886983a 	sll	r3,r3,r2
    3d88:	7996d83a 	srl	r11,r15,r6
    3d8c:	8198d83a 	srl	r12,r16,r6
    3d90:	1ad6b03a 	or	r11,r3,r11
    3d94:	003f3e06 	br	3a90 <_fpadd_parts+0x9c>
    3d98:	2006d07a 	srli	r3,r4,1
    3d9c:	008007c4 	movi	r2,31
    3da0:	1185c83a 	sub	r2,r2,r6
    3da4:	1890d83a 	srl	r8,r3,r2
    3da8:	218e983a 	sll	r7,r4,r6
    3dac:	003f3e06 	br	3aa8 <_fpadd_parts+0xb4>
    3db0:	113f821e 	bne	r2,r4,3bbc <_fpadd_parts+0x1c8>
    3db4:	28c00117 	ldw	r3,4(r5)
    3db8:	98800117 	ldw	r2,4(r19)
    3dbc:	10ff7f26 	beq	r2,r3,3bbc <_fpadd_parts+0x1c8>
    3dc0:	04c00074 	movhi	r19,1
    3dc4:	9ce8d804 	addi	r19,r19,-23712
    3dc8:	003f7c06 	br	3bbc <_fpadd_parts+0x1c8>
    3dcc:	2006d07a 	srli	r3,r4,1
    3dd0:	008007c4 	movi	r2,31
    3dd4:	1185c83a 	sub	r2,r2,r6
    3dd8:	1894d83a 	srl	r10,r3,r2
    3ddc:	2192983a 	sll	r9,r4,r6
    3de0:	003fd706 	br	3d40 <_fpadd_parts+0x34c>
    3de4:	9487883a 	add	r3,r18,r18
    3de8:	008007c4 	movi	r2,31
    3dec:	1185c83a 	sub	r2,r2,r6
    3df0:	1886983a 	sll	r3,r3,r2
    3df4:	899ad83a 	srl	r13,r17,r6
    3df8:	919cd83a 	srl	r14,r18,r6
    3dfc:	1b5ab03a 	or	r13,r3,r13
    3e00:	003fc906 	br	3d28 <_fpadd_parts+0x334>

00003e04 <__subdf3>:
    3e04:	deffea04 	addi	sp,sp,-88
    3e08:	dcc01415 	stw	r19,80(sp)
    3e0c:	dcc00404 	addi	r19,sp,16
    3e10:	2011883a 	mov	r8,r4
    3e14:	2813883a 	mov	r9,r5
    3e18:	dc401315 	stw	r17,76(sp)
    3e1c:	d809883a 	mov	r4,sp
    3e20:	980b883a 	mov	r5,r19
    3e24:	dc400904 	addi	r17,sp,36
    3e28:	dfc01515 	stw	ra,84(sp)
    3e2c:	da400115 	stw	r9,4(sp)
    3e30:	d9c00315 	stw	r7,12(sp)
    3e34:	da000015 	stw	r8,0(sp)
    3e38:	d9800215 	stw	r6,8(sp)
    3e3c:	0004f440 	call	4f44 <__unpack_d>
    3e40:	d9000204 	addi	r4,sp,8
    3e44:	880b883a 	mov	r5,r17
    3e48:	0004f440 	call	4f44 <__unpack_d>
    3e4c:	d8800a17 	ldw	r2,40(sp)
    3e50:	880b883a 	mov	r5,r17
    3e54:	9809883a 	mov	r4,r19
    3e58:	d9800e04 	addi	r6,sp,56
    3e5c:	1080005c 	xori	r2,r2,1
    3e60:	d8800a15 	stw	r2,40(sp)
    3e64:	00039f40 	call	39f4 <_fpadd_parts>
    3e68:	1009883a 	mov	r4,r2
    3e6c:	0004c300 	call	4c30 <__pack_d>
    3e70:	dfc01517 	ldw	ra,84(sp)
    3e74:	dcc01417 	ldw	r19,80(sp)
    3e78:	dc401317 	ldw	r17,76(sp)
    3e7c:	dec01604 	addi	sp,sp,88
    3e80:	f800283a 	ret

00003e84 <__adddf3>:
    3e84:	deffea04 	addi	sp,sp,-88
    3e88:	dcc01415 	stw	r19,80(sp)
    3e8c:	dcc00404 	addi	r19,sp,16
    3e90:	2011883a 	mov	r8,r4
    3e94:	2813883a 	mov	r9,r5
    3e98:	dc401315 	stw	r17,76(sp)
    3e9c:	d809883a 	mov	r4,sp
    3ea0:	980b883a 	mov	r5,r19
    3ea4:	dc400904 	addi	r17,sp,36
    3ea8:	dfc01515 	stw	ra,84(sp)
    3eac:	da400115 	stw	r9,4(sp)
    3eb0:	d9c00315 	stw	r7,12(sp)
    3eb4:	da000015 	stw	r8,0(sp)
    3eb8:	d9800215 	stw	r6,8(sp)
    3ebc:	0004f440 	call	4f44 <__unpack_d>
    3ec0:	d9000204 	addi	r4,sp,8
    3ec4:	880b883a 	mov	r5,r17
    3ec8:	0004f440 	call	4f44 <__unpack_d>
    3ecc:	d9800e04 	addi	r6,sp,56
    3ed0:	9809883a 	mov	r4,r19
    3ed4:	880b883a 	mov	r5,r17
    3ed8:	00039f40 	call	39f4 <_fpadd_parts>
    3edc:	1009883a 	mov	r4,r2
    3ee0:	0004c300 	call	4c30 <__pack_d>
    3ee4:	dfc01517 	ldw	ra,84(sp)
    3ee8:	dcc01417 	ldw	r19,80(sp)
    3eec:	dc401317 	ldw	r17,76(sp)
    3ef0:	dec01604 	addi	sp,sp,88
    3ef4:	f800283a 	ret

00003ef8 <__muldf3>:
    3ef8:	deffe004 	addi	sp,sp,-128
    3efc:	dc401815 	stw	r17,96(sp)
    3f00:	dc400404 	addi	r17,sp,16
    3f04:	2011883a 	mov	r8,r4
    3f08:	2813883a 	mov	r9,r5
    3f0c:	dc001715 	stw	r16,92(sp)
    3f10:	d809883a 	mov	r4,sp
    3f14:	880b883a 	mov	r5,r17
    3f18:	dc000904 	addi	r16,sp,36
    3f1c:	dfc01f15 	stw	ra,124(sp)
    3f20:	da400115 	stw	r9,4(sp)
    3f24:	d9c00315 	stw	r7,12(sp)
    3f28:	da000015 	stw	r8,0(sp)
    3f2c:	d9800215 	stw	r6,8(sp)
    3f30:	ddc01e15 	stw	r23,120(sp)
    3f34:	dd801d15 	stw	r22,116(sp)
    3f38:	dd401c15 	stw	r21,112(sp)
    3f3c:	dd001b15 	stw	r20,108(sp)
    3f40:	dcc01a15 	stw	r19,104(sp)
    3f44:	dc801915 	stw	r18,100(sp)
    3f48:	0004f440 	call	4f44 <__unpack_d>
    3f4c:	d9000204 	addi	r4,sp,8
    3f50:	800b883a 	mov	r5,r16
    3f54:	0004f440 	call	4f44 <__unpack_d>
    3f58:	d9000417 	ldw	r4,16(sp)
    3f5c:	00800044 	movi	r2,1
    3f60:	1100102e 	bgeu	r2,r4,3fa4 <__muldf3+0xac>
    3f64:	d8c00917 	ldw	r3,36(sp)
    3f68:	10c0062e 	bgeu	r2,r3,3f84 <__muldf3+0x8c>
    3f6c:	00800104 	movi	r2,4
    3f70:	20800a26 	beq	r4,r2,3f9c <__muldf3+0xa4>
    3f74:	1880cc26 	beq	r3,r2,42a8 <__muldf3+0x3b0>
    3f78:	00800084 	movi	r2,2
    3f7c:	20800926 	beq	r4,r2,3fa4 <__muldf3+0xac>
    3f80:	1880191e 	bne	r3,r2,3fe8 <__muldf3+0xf0>
    3f84:	d8c00a17 	ldw	r3,40(sp)
    3f88:	d8800517 	ldw	r2,20(sp)
    3f8c:	8009883a 	mov	r4,r16
    3f90:	10c4c03a 	cmpne	r2,r2,r3
    3f94:	d8800a15 	stw	r2,40(sp)
    3f98:	00000706 	br	3fb8 <__muldf3+0xc0>
    3f9c:	00800084 	movi	r2,2
    3fa0:	1880c326 	beq	r3,r2,42b0 <__muldf3+0x3b8>
    3fa4:	d8800517 	ldw	r2,20(sp)
    3fa8:	d8c00a17 	ldw	r3,40(sp)
    3fac:	8809883a 	mov	r4,r17
    3fb0:	10c4c03a 	cmpne	r2,r2,r3
    3fb4:	d8800515 	stw	r2,20(sp)
    3fb8:	0004c300 	call	4c30 <__pack_d>
    3fbc:	dfc01f17 	ldw	ra,124(sp)
    3fc0:	ddc01e17 	ldw	r23,120(sp)
    3fc4:	dd801d17 	ldw	r22,116(sp)
    3fc8:	dd401c17 	ldw	r21,112(sp)
    3fcc:	dd001b17 	ldw	r20,108(sp)
    3fd0:	dcc01a17 	ldw	r19,104(sp)
    3fd4:	dc801917 	ldw	r18,100(sp)
    3fd8:	dc401817 	ldw	r17,96(sp)
    3fdc:	dc001717 	ldw	r16,92(sp)
    3fe0:	dec02004 	addi	sp,sp,128
    3fe4:	f800283a 	ret
    3fe8:	dd800717 	ldw	r22,28(sp)
    3fec:	dc800c17 	ldw	r18,48(sp)
    3ff0:	002b883a 	mov	r21,zero
    3ff4:	0023883a 	mov	r17,zero
    3ff8:	a80b883a 	mov	r5,r21
    3ffc:	b00d883a 	mov	r6,r22
    4000:	880f883a 	mov	r7,r17
    4004:	ddc00817 	ldw	r23,32(sp)
    4008:	dcc00d17 	ldw	r19,52(sp)
    400c:	9009883a 	mov	r4,r18
    4010:	000481c0 	call	481c <__muldi3>
    4014:	001b883a 	mov	r13,zero
    4018:	680f883a 	mov	r7,r13
    401c:	b009883a 	mov	r4,r22
    4020:	000b883a 	mov	r5,zero
    4024:	980d883a 	mov	r6,r19
    4028:	b82d883a 	mov	r22,r23
    402c:	002f883a 	mov	r23,zero
    4030:	db401615 	stw	r13,88(sp)
    4034:	d8801315 	stw	r2,76(sp)
    4038:	d8c01415 	stw	r3,80(sp)
    403c:	dcc01515 	stw	r19,84(sp)
    4040:	000481c0 	call	481c <__muldi3>
    4044:	b00d883a 	mov	r6,r22
    4048:	000b883a 	mov	r5,zero
    404c:	9009883a 	mov	r4,r18
    4050:	b80f883a 	mov	r7,r23
    4054:	1021883a 	mov	r16,r2
    4058:	1823883a 	mov	r17,r3
    405c:	000481c0 	call	481c <__muldi3>
    4060:	8085883a 	add	r2,r16,r2
    4064:	140d803a 	cmpltu	r6,r2,r16
    4068:	88c7883a 	add	r3,r17,r3
    406c:	30cd883a 	add	r6,r6,r3
    4070:	1029883a 	mov	r20,r2
    4074:	302b883a 	mov	r21,r6
    4078:	da801317 	ldw	r10,76(sp)
    407c:	dac01417 	ldw	r11,80(sp)
    4080:	db001517 	ldw	r12,84(sp)
    4084:	db401617 	ldw	r13,88(sp)
    4088:	3440612e 	bgeu	r6,r17,4210 <__muldf3+0x318>
    408c:	0009883a 	mov	r4,zero
    4090:	5105883a 	add	r2,r10,r4
    4094:	128d803a 	cmpltu	r6,r2,r10
    4098:	5d07883a 	add	r3,r11,r20
    409c:	30cd883a 	add	r6,r6,r3
    40a0:	0021883a 	mov	r16,zero
    40a4:	04400044 	movi	r17,1
    40a8:	1025883a 	mov	r18,r2
    40ac:	3027883a 	mov	r19,r6
    40b0:	32c06236 	bltu	r6,r11,423c <__muldf3+0x344>
    40b4:	59807a26 	beq	r11,r6,42a0 <__muldf3+0x3a8>
    40b8:	680b883a 	mov	r5,r13
    40bc:	b80f883a 	mov	r7,r23
    40c0:	6009883a 	mov	r4,r12
    40c4:	b00d883a 	mov	r6,r22
    40c8:	000481c0 	call	481c <__muldi3>
    40cc:	1009883a 	mov	r4,r2
    40d0:	000f883a 	mov	r7,zero
    40d4:	1545883a 	add	r2,r2,r21
    40d8:	1111803a 	cmpltu	r8,r2,r4
    40dc:	19c7883a 	add	r3,r3,r7
    40e0:	40c7883a 	add	r3,r8,r3
    40e4:	88cb883a 	add	r5,r17,r3
    40e8:	d8c00617 	ldw	r3,24(sp)
    40ec:	8089883a 	add	r4,r16,r2
    40f0:	d8800b17 	ldw	r2,44(sp)
    40f4:	18c00104 	addi	r3,r3,4
    40f8:	240d803a 	cmpltu	r6,r4,r16
    40fc:	10c7883a 	add	r3,r2,r3
    4100:	2013883a 	mov	r9,r4
    4104:	d8800a17 	ldw	r2,40(sp)
    4108:	d9000517 	ldw	r4,20(sp)
    410c:	314d883a 	add	r6,r6,r5
    4110:	3015883a 	mov	r10,r6
    4114:	2088c03a 	cmpne	r4,r4,r2
    4118:	00880034 	movhi	r2,8192
    411c:	10bfffc4 	addi	r2,r2,-1
    4120:	d9000f15 	stw	r4,60(sp)
    4124:	d8c01015 	stw	r3,64(sp)
    4128:	1180162e 	bgeu	r2,r6,4184 <__muldf3+0x28c>
    412c:	1811883a 	mov	r8,r3
    4130:	101f883a 	mov	r15,r2
    4134:	980497fa 	slli	r2,r19,31
    4138:	9016d07a 	srli	r11,r18,1
    413c:	500697fa 	slli	r3,r10,31
    4140:	480cd07a 	srli	r6,r9,1
    4144:	500ed07a 	srli	r7,r10,1
    4148:	12d6b03a 	or	r11,r2,r11
    414c:	00800044 	movi	r2,1
    4150:	198cb03a 	or	r6,r3,r6
    4154:	4888703a 	and	r4,r9,r2
    4158:	9818d07a 	srli	r12,r19,1
    415c:	001b883a 	mov	r13,zero
    4160:	03a00034 	movhi	r14,32768
    4164:	3013883a 	mov	r9,r6
    4168:	3815883a 	mov	r10,r7
    416c:	4091883a 	add	r8,r8,r2
    4170:	20000226 	beq	r4,zero,417c <__muldf3+0x284>
    4174:	5b64b03a 	or	r18,r11,r13
    4178:	63a6b03a 	or	r19,r12,r14
    417c:	7abfed36 	bltu	r15,r10,4134 <__muldf3+0x23c>
    4180:	da001015 	stw	r8,64(sp)
    4184:	00840034 	movhi	r2,4096
    4188:	10bfffc4 	addi	r2,r2,-1
    418c:	12801436 	bltu	r2,r10,41e0 <__muldf3+0x2e8>
    4190:	da001017 	ldw	r8,64(sp)
    4194:	101f883a 	mov	r15,r2
    4198:	4a45883a 	add	r2,r9,r9
    419c:	124d803a 	cmpltu	r6,r2,r9
    41a0:	5287883a 	add	r3,r10,r10
    41a4:	9497883a 	add	r11,r18,r18
    41a8:	5c8f803a 	cmpltu	r7,r11,r18
    41ac:	9cd9883a 	add	r12,r19,r19
    41b0:	01000044 	movi	r4,1
    41b4:	30cd883a 	add	r6,r6,r3
    41b8:	3b0f883a 	add	r7,r7,r12
    41bc:	423fffc4 	addi	r8,r8,-1
    41c0:	1013883a 	mov	r9,r2
    41c4:	3015883a 	mov	r10,r6
    41c8:	111ab03a 	or	r13,r2,r4
    41cc:	98003016 	blt	r19,zero,4290 <__muldf3+0x398>
    41d0:	5825883a 	mov	r18,r11
    41d4:	3827883a 	mov	r19,r7
    41d8:	7abfef2e 	bgeu	r15,r10,4198 <__muldf3+0x2a0>
    41dc:	da001015 	stw	r8,64(sp)
    41e0:	00803fc4 	movi	r2,255
    41e4:	488e703a 	and	r7,r9,r2
    41e8:	00802004 	movi	r2,128
    41ec:	0007883a 	mov	r3,zero
    41f0:	0011883a 	mov	r8,zero
    41f4:	38801826 	beq	r7,r2,4258 <__muldf3+0x360>
    41f8:	008000c4 	movi	r2,3
    41fc:	d9000e04 	addi	r4,sp,56
    4200:	da801215 	stw	r10,72(sp)
    4204:	d8800e15 	stw	r2,56(sp)
    4208:	da401115 	stw	r9,68(sp)
    420c:	003f6a06 	br	3fb8 <__muldf3+0xc0>
    4210:	89802126 	beq	r17,r6,4298 <__muldf3+0x3a0>
    4214:	0009883a 	mov	r4,zero
    4218:	5105883a 	add	r2,r10,r4
    421c:	128d803a 	cmpltu	r6,r2,r10
    4220:	5d07883a 	add	r3,r11,r20
    4224:	30cd883a 	add	r6,r6,r3
    4228:	0021883a 	mov	r16,zero
    422c:	0023883a 	mov	r17,zero
    4230:	1025883a 	mov	r18,r2
    4234:	3027883a 	mov	r19,r6
    4238:	32ff9e2e 	bgeu	r6,r11,40b4 <__muldf3+0x1bc>
    423c:	00800044 	movi	r2,1
    4240:	8089883a 	add	r4,r16,r2
    4244:	240d803a 	cmpltu	r6,r4,r16
    4248:	344d883a 	add	r6,r6,r17
    424c:	2021883a 	mov	r16,r4
    4250:	3023883a 	mov	r17,r6
    4254:	003f9806 	br	40b8 <__muldf3+0x1c0>
    4258:	403fe71e 	bne	r8,zero,41f8 <__muldf3+0x300>
    425c:	01004004 	movi	r4,256
    4260:	4904703a 	and	r2,r9,r4
    4264:	10c4b03a 	or	r2,r2,r3
    4268:	103fe31e 	bne	r2,zero,41f8 <__muldf3+0x300>
    426c:	94c4b03a 	or	r2,r18,r19
    4270:	103fe126 	beq	r2,zero,41f8 <__muldf3+0x300>
    4274:	49c5883a 	add	r2,r9,r7
    4278:	1251803a 	cmpltu	r8,r2,r9
    427c:	4291883a 	add	r8,r8,r10
    4280:	013fc004 	movi	r4,-256
    4284:	1112703a 	and	r9,r2,r4
    4288:	4015883a 	mov	r10,r8
    428c:	003fda06 	br	41f8 <__muldf3+0x300>
    4290:	6813883a 	mov	r9,r13
    4294:	003fce06 	br	41d0 <__muldf3+0x2d8>
    4298:	143f7c36 	bltu	r2,r16,408c <__muldf3+0x194>
    429c:	003fdd06 	br	4214 <__muldf3+0x31c>
    42a0:	12bf852e 	bgeu	r2,r10,40b8 <__muldf3+0x1c0>
    42a4:	003fe506 	br	423c <__muldf3+0x344>
    42a8:	00800084 	movi	r2,2
    42ac:	20bf351e 	bne	r4,r2,3f84 <__muldf3+0x8c>
    42b0:	01000074 	movhi	r4,1
    42b4:	2128d804 	addi	r4,r4,-23712
    42b8:	003f3f06 	br	3fb8 <__muldf3+0xc0>

000042bc <__eqdf2>:
    42bc:	deffef04 	addi	sp,sp,-68
    42c0:	dc400f15 	stw	r17,60(sp)
    42c4:	dc400404 	addi	r17,sp,16
    42c8:	2005883a 	mov	r2,r4
    42cc:	2807883a 	mov	r3,r5
    42d0:	dc000e15 	stw	r16,56(sp)
    42d4:	d809883a 	mov	r4,sp
    42d8:	880b883a 	mov	r5,r17
    42dc:	dc000904 	addi	r16,sp,36
    42e0:	d8c00115 	stw	r3,4(sp)
    42e4:	d8800015 	stw	r2,0(sp)
    42e8:	d9800215 	stw	r6,8(sp)
    42ec:	dfc01015 	stw	ra,64(sp)
    42f0:	d9c00315 	stw	r7,12(sp)
    42f4:	0004f440 	call	4f44 <__unpack_d>
    42f8:	d9000204 	addi	r4,sp,8
    42fc:	800b883a 	mov	r5,r16
    4300:	0004f440 	call	4f44 <__unpack_d>
    4304:	d8800417 	ldw	r2,16(sp)
    4308:	00c00044 	movi	r3,1
    430c:	180d883a 	mov	r6,r3
    4310:	1880062e 	bgeu	r3,r2,432c <__eqdf2+0x70>
    4314:	d8800917 	ldw	r2,36(sp)
    4318:	8809883a 	mov	r4,r17
    431c:	800b883a 	mov	r5,r16
    4320:	1880022e 	bgeu	r3,r2,432c <__eqdf2+0x70>
    4324:	000507c0 	call	507c <__fpcmp_parts_d>
    4328:	100d883a 	mov	r6,r2
    432c:	3005883a 	mov	r2,r6
    4330:	dfc01017 	ldw	ra,64(sp)
    4334:	dc400f17 	ldw	r17,60(sp)
    4338:	dc000e17 	ldw	r16,56(sp)
    433c:	dec01104 	addi	sp,sp,68
    4340:	f800283a 	ret

00004344 <__gtdf2>:
    4344:	deffef04 	addi	sp,sp,-68
    4348:	dc400f15 	stw	r17,60(sp)
    434c:	dc400404 	addi	r17,sp,16
    4350:	2005883a 	mov	r2,r4
    4354:	2807883a 	mov	r3,r5
    4358:	dc000e15 	stw	r16,56(sp)
    435c:	d809883a 	mov	r4,sp
    4360:	880b883a 	mov	r5,r17
    4364:	dc000904 	addi	r16,sp,36
    4368:	d8c00115 	stw	r3,4(sp)
    436c:	d8800015 	stw	r2,0(sp)
    4370:	d9800215 	stw	r6,8(sp)
    4374:	dfc01015 	stw	ra,64(sp)
    4378:	d9c00315 	stw	r7,12(sp)
    437c:	0004f440 	call	4f44 <__unpack_d>
    4380:	d9000204 	addi	r4,sp,8
    4384:	800b883a 	mov	r5,r16
    4388:	0004f440 	call	4f44 <__unpack_d>
    438c:	d8800417 	ldw	r2,16(sp)
    4390:	00c00044 	movi	r3,1
    4394:	01bfffc4 	movi	r6,-1
    4398:	1880062e 	bgeu	r3,r2,43b4 <__gtdf2+0x70>
    439c:	d8800917 	ldw	r2,36(sp)
    43a0:	8809883a 	mov	r4,r17
    43a4:	800b883a 	mov	r5,r16
    43a8:	1880022e 	bgeu	r3,r2,43b4 <__gtdf2+0x70>
    43ac:	000507c0 	call	507c <__fpcmp_parts_d>
    43b0:	100d883a 	mov	r6,r2
    43b4:	3005883a 	mov	r2,r6
    43b8:	dfc01017 	ldw	ra,64(sp)
    43bc:	dc400f17 	ldw	r17,60(sp)
    43c0:	dc000e17 	ldw	r16,56(sp)
    43c4:	dec01104 	addi	sp,sp,68
    43c8:	f800283a 	ret

000043cc <__gedf2>:
    43cc:	deffef04 	addi	sp,sp,-68
    43d0:	dc400f15 	stw	r17,60(sp)
    43d4:	dc400404 	addi	r17,sp,16
    43d8:	2005883a 	mov	r2,r4
    43dc:	2807883a 	mov	r3,r5
    43e0:	dc000e15 	stw	r16,56(sp)
    43e4:	d809883a 	mov	r4,sp
    43e8:	880b883a 	mov	r5,r17
    43ec:	dc000904 	addi	r16,sp,36
    43f0:	d8c00115 	stw	r3,4(sp)
    43f4:	d8800015 	stw	r2,0(sp)
    43f8:	d9800215 	stw	r6,8(sp)
    43fc:	dfc01015 	stw	ra,64(sp)
    4400:	d9c00315 	stw	r7,12(sp)
    4404:	0004f440 	call	4f44 <__unpack_d>
    4408:	d9000204 	addi	r4,sp,8
    440c:	800b883a 	mov	r5,r16
    4410:	0004f440 	call	4f44 <__unpack_d>
    4414:	d8800417 	ldw	r2,16(sp)
    4418:	00c00044 	movi	r3,1
    441c:	01bfffc4 	movi	r6,-1
    4420:	1880062e 	bgeu	r3,r2,443c <__gedf2+0x70>
    4424:	d8800917 	ldw	r2,36(sp)
    4428:	8809883a 	mov	r4,r17
    442c:	800b883a 	mov	r5,r16
    4430:	1880022e 	bgeu	r3,r2,443c <__gedf2+0x70>
    4434:	000507c0 	call	507c <__fpcmp_parts_d>
    4438:	100d883a 	mov	r6,r2
    443c:	3005883a 	mov	r2,r6
    4440:	dfc01017 	ldw	ra,64(sp)
    4444:	dc400f17 	ldw	r17,60(sp)
    4448:	dc000e17 	ldw	r16,56(sp)
    444c:	dec01104 	addi	sp,sp,68
    4450:	f800283a 	ret

00004454 <__floatsidf>:
    4454:	2006d7fa 	srli	r3,r4,31
    4458:	defff604 	addi	sp,sp,-40
    445c:	008000c4 	movi	r2,3
    4460:	dfc00915 	stw	ra,36(sp)
    4464:	dcc00815 	stw	r19,32(sp)
    4468:	dc800715 	stw	r18,28(sp)
    446c:	dc400615 	stw	r17,24(sp)
    4470:	dc000515 	stw	r16,20(sp)
    4474:	d8800015 	stw	r2,0(sp)
    4478:	d8c00115 	stw	r3,4(sp)
    447c:	20000f1e 	bne	r4,zero,44bc <__floatsidf+0x68>
    4480:	00800084 	movi	r2,2
    4484:	d8800015 	stw	r2,0(sp)
    4488:	d809883a 	mov	r4,sp
    448c:	0004c300 	call	4c30 <__pack_d>
    4490:	1009883a 	mov	r4,r2
    4494:	180b883a 	mov	r5,r3
    4498:	2005883a 	mov	r2,r4
    449c:	2807883a 	mov	r3,r5
    44a0:	dfc00917 	ldw	ra,36(sp)
    44a4:	dcc00817 	ldw	r19,32(sp)
    44a8:	dc800717 	ldw	r18,28(sp)
    44ac:	dc400617 	ldw	r17,24(sp)
    44b0:	dc000517 	ldw	r16,20(sp)
    44b4:	dec00a04 	addi	sp,sp,40
    44b8:	f800283a 	ret
    44bc:	00800f04 	movi	r2,60
    44c0:	1807003a 	cmpeq	r3,r3,zero
    44c4:	d8800215 	stw	r2,8(sp)
    44c8:	18001126 	beq	r3,zero,4510 <__floatsidf+0xbc>
    44cc:	0027883a 	mov	r19,zero
    44d0:	2025883a 	mov	r18,r4
    44d4:	d9000315 	stw	r4,12(sp)
    44d8:	dcc00415 	stw	r19,16(sp)
    44dc:	00048b40 	call	48b4 <__clzsi2>
    44e0:	11000744 	addi	r4,r2,29
    44e4:	013fe80e 	bge	zero,r4,4488 <__floatsidf+0x34>
    44e8:	10bfff44 	addi	r2,r2,-3
    44ec:	10000c16 	blt	r2,zero,4520 <__floatsidf+0xcc>
    44f0:	90a2983a 	sll	r17,r18,r2
    44f4:	0021883a 	mov	r16,zero
    44f8:	d8800217 	ldw	r2,8(sp)
    44fc:	dc400415 	stw	r17,16(sp)
    4500:	dc000315 	stw	r16,12(sp)
    4504:	1105c83a 	sub	r2,r2,r4
    4508:	d8800215 	stw	r2,8(sp)
    450c:	003fde06 	br	4488 <__floatsidf+0x34>
    4510:	00a00034 	movhi	r2,32768
    4514:	20800a26 	beq	r4,r2,4540 <__floatsidf+0xec>
    4518:	0109c83a 	sub	r4,zero,r4
    451c:	003feb06 	br	44cc <__floatsidf+0x78>
    4520:	9006d07a 	srli	r3,r18,1
    4524:	008007c4 	movi	r2,31
    4528:	1105c83a 	sub	r2,r2,r4
    452c:	1886d83a 	srl	r3,r3,r2
    4530:	9922983a 	sll	r17,r19,r4
    4534:	9120983a 	sll	r16,r18,r4
    4538:	1c62b03a 	or	r17,r3,r17
    453c:	003fee06 	br	44f8 <__floatsidf+0xa4>
    4540:	0009883a 	mov	r4,zero
    4544:	01707834 	movhi	r5,49632
    4548:	003fd306 	br	4498 <__floatsidf+0x44>

0000454c <__fixdfsi>:
    454c:	defff804 	addi	sp,sp,-32
    4550:	2005883a 	mov	r2,r4
    4554:	2807883a 	mov	r3,r5
    4558:	d809883a 	mov	r4,sp
    455c:	d9400204 	addi	r5,sp,8
    4560:	d8c00115 	stw	r3,4(sp)
    4564:	d8800015 	stw	r2,0(sp)
    4568:	dfc00715 	stw	ra,28(sp)
    456c:	0004f440 	call	4f44 <__unpack_d>
    4570:	d8c00217 	ldw	r3,8(sp)
    4574:	00800084 	movi	r2,2
    4578:	1880051e 	bne	r3,r2,4590 <__fixdfsi+0x44>
    457c:	0007883a 	mov	r3,zero
    4580:	1805883a 	mov	r2,r3
    4584:	dfc00717 	ldw	ra,28(sp)
    4588:	dec00804 	addi	sp,sp,32
    458c:	f800283a 	ret
    4590:	00800044 	movi	r2,1
    4594:	10fff92e 	bgeu	r2,r3,457c <__fixdfsi+0x30>
    4598:	00800104 	movi	r2,4
    459c:	18800426 	beq	r3,r2,45b0 <__fixdfsi+0x64>
    45a0:	d8c00417 	ldw	r3,16(sp)
    45a4:	183ff516 	blt	r3,zero,457c <__fixdfsi+0x30>
    45a8:	00800784 	movi	r2,30
    45ac:	10c0080e 	bge	r2,r3,45d0 <__fixdfsi+0x84>
    45b0:	d8800317 	ldw	r2,12(sp)
    45b4:	1000121e 	bne	r2,zero,4600 <__fixdfsi+0xb4>
    45b8:	00e00034 	movhi	r3,32768
    45bc:	18ffffc4 	addi	r3,r3,-1
    45c0:	1805883a 	mov	r2,r3
    45c4:	dfc00717 	ldw	ra,28(sp)
    45c8:	dec00804 	addi	sp,sp,32
    45cc:	f800283a 	ret
    45d0:	00800f04 	movi	r2,60
    45d4:	10d1c83a 	sub	r8,r2,r3
    45d8:	40bff804 	addi	r2,r8,-32
    45dc:	d9800517 	ldw	r6,20(sp)
    45e0:	d9c00617 	ldw	r7,24(sp)
    45e4:	10000816 	blt	r2,zero,4608 <__fixdfsi+0xbc>
    45e8:	3888d83a 	srl	r4,r7,r2
    45ec:	d8800317 	ldw	r2,12(sp)
    45f0:	2007883a 	mov	r3,r4
    45f4:	103fe226 	beq	r2,zero,4580 <__fixdfsi+0x34>
    45f8:	0107c83a 	sub	r3,zero,r4
    45fc:	003fe006 	br	4580 <__fixdfsi+0x34>
    4600:	00e00034 	movhi	r3,32768
    4604:	003fde06 	br	4580 <__fixdfsi+0x34>
    4608:	39c7883a 	add	r3,r7,r7
    460c:	008007c4 	movi	r2,31
    4610:	1205c83a 	sub	r2,r2,r8
    4614:	1886983a 	sll	r3,r3,r2
    4618:	3208d83a 	srl	r4,r6,r8
    461c:	1908b03a 	or	r4,r3,r4
    4620:	003ff206 	br	45ec <__fixdfsi+0xa0>

00004624 <__make_dp>:
    4624:	defff904 	addi	sp,sp,-28
    4628:	d8c00717 	ldw	r3,28(sp)
    462c:	d9000015 	stw	r4,0(sp)
    4630:	d809883a 	mov	r4,sp
    4634:	dfc00515 	stw	ra,20(sp)
    4638:	d9c00615 	stw	r7,24(sp)
    463c:	d9400115 	stw	r5,4(sp)
    4640:	d9800215 	stw	r6,8(sp)
    4644:	d8c00415 	stw	r3,16(sp)
    4648:	d9c00315 	stw	r7,12(sp)
    464c:	0004c300 	call	4c30 <__pack_d>
    4650:	dfc00517 	ldw	ra,20(sp)
    4654:	dec00704 	addi	sp,sp,28
    4658:	f800283a 	ret

0000465c <__truncdfsf2>:
    465c:	defff804 	addi	sp,sp,-32
    4660:	2005883a 	mov	r2,r4
    4664:	2807883a 	mov	r3,r5
    4668:	d809883a 	mov	r4,sp
    466c:	d9400204 	addi	r5,sp,8
    4670:	d8c00115 	stw	r3,4(sp)
    4674:	d8800015 	stw	r2,0(sp)
    4678:	dfc00715 	stw	ra,28(sp)
    467c:	0004f440 	call	4f44 <__unpack_d>
    4680:	d9c00517 	ldw	r7,20(sp)
    4684:	da000617 	ldw	r8,24(sp)
    4688:	02d00034 	movhi	r11,16384
    468c:	5affffc4 	addi	r11,r11,-1
    4690:	3812d7ba 	srli	r9,r7,30
    4694:	401a90ba 	slli	r13,r8,2
    4698:	3ac4703a 	and	r2,r7,r11
    469c:	0007883a 	mov	r3,zero
    46a0:	6a52b03a 	or	r9,r13,r9
    46a4:	10c4b03a 	or	r2,r2,r3
    46a8:	d9000217 	ldw	r4,8(sp)
    46ac:	d9400317 	ldw	r5,12(sp)
    46b0:	d9800417 	ldw	r6,16(sp)
    46b4:	480f883a 	mov	r7,r9
    46b8:	10000126 	beq	r2,zero,46c0 <__truncdfsf2+0x64>
    46bc:	49c00054 	ori	r7,r9,1
    46c0:	0004c040 	call	4c04 <__make_fp>
    46c4:	dfc00717 	ldw	ra,28(sp)
    46c8:	dec00804 	addi	sp,sp,32
    46cc:	f800283a 	ret

000046d0 <udivmodsi4>:
    46d0:	29001b2e 	bgeu	r5,r4,4740 <udivmodsi4+0x70>
    46d4:	28001a16 	blt	r5,zero,4740 <udivmodsi4+0x70>
    46d8:	00800044 	movi	r2,1
    46dc:	0007883a 	mov	r3,zero
    46e0:	01c007c4 	movi	r7,31
    46e4:	00000306 	br	46f4 <udivmodsi4+0x24>
    46e8:	19c01326 	beq	r3,r7,4738 <udivmodsi4+0x68>
    46ec:	18c00044 	addi	r3,r3,1
    46f0:	28000416 	blt	r5,zero,4704 <udivmodsi4+0x34>
    46f4:	294b883a 	add	r5,r5,r5
    46f8:	1085883a 	add	r2,r2,r2
    46fc:	293ffa36 	bltu	r5,r4,46e8 <udivmodsi4+0x18>
    4700:	10000d26 	beq	r2,zero,4738 <udivmodsi4+0x68>
    4704:	0007883a 	mov	r3,zero
    4708:	21400236 	bltu	r4,r5,4714 <udivmodsi4+0x44>
    470c:	2149c83a 	sub	r4,r4,r5
    4710:	1886b03a 	or	r3,r3,r2
    4714:	1004d07a 	srli	r2,r2,1
    4718:	280ad07a 	srli	r5,r5,1
    471c:	103ffa1e 	bne	r2,zero,4708 <udivmodsi4+0x38>
    4720:	30000226 	beq	r6,zero,472c <udivmodsi4+0x5c>
    4724:	2005883a 	mov	r2,r4
    4728:	f800283a 	ret
    472c:	1809883a 	mov	r4,r3
    4730:	2005883a 	mov	r2,r4
    4734:	f800283a 	ret
    4738:	0007883a 	mov	r3,zero
    473c:	003ff806 	br	4720 <udivmodsi4+0x50>
    4740:	00800044 	movi	r2,1
    4744:	0007883a 	mov	r3,zero
    4748:	003fef06 	br	4708 <udivmodsi4+0x38>

0000474c <__divsi3>:
    474c:	defffe04 	addi	sp,sp,-8
    4750:	dc000015 	stw	r16,0(sp)
    4754:	dfc00115 	stw	ra,4(sp)
    4758:	0021883a 	mov	r16,zero
    475c:	20000c16 	blt	r4,zero,4790 <__divsi3+0x44>
    4760:	000d883a 	mov	r6,zero
    4764:	28000e16 	blt	r5,zero,47a0 <__divsi3+0x54>
    4768:	00046d00 	call	46d0 <udivmodsi4>
    476c:	1007883a 	mov	r3,r2
    4770:	8005003a 	cmpeq	r2,r16,zero
    4774:	1000011e 	bne	r2,zero,477c <__divsi3+0x30>
    4778:	00c7c83a 	sub	r3,zero,r3
    477c:	1805883a 	mov	r2,r3
    4780:	dfc00117 	ldw	ra,4(sp)
    4784:	dc000017 	ldw	r16,0(sp)
    4788:	dec00204 	addi	sp,sp,8
    478c:	f800283a 	ret
    4790:	0109c83a 	sub	r4,zero,r4
    4794:	04000044 	movi	r16,1
    4798:	000d883a 	mov	r6,zero
    479c:	283ff20e 	bge	r5,zero,4768 <__divsi3+0x1c>
    47a0:	014bc83a 	sub	r5,zero,r5
    47a4:	8021003a 	cmpeq	r16,r16,zero
    47a8:	003fef06 	br	4768 <__divsi3+0x1c>

000047ac <__modsi3>:
    47ac:	deffff04 	addi	sp,sp,-4
    47b0:	dfc00015 	stw	ra,0(sp)
    47b4:	01800044 	movi	r6,1
    47b8:	2807883a 	mov	r3,r5
    47bc:	20000416 	blt	r4,zero,47d0 <__modsi3+0x24>
    47c0:	28000c16 	blt	r5,zero,47f4 <__modsi3+0x48>
    47c4:	dfc00017 	ldw	ra,0(sp)
    47c8:	dec00104 	addi	sp,sp,4
    47cc:	00046d01 	jmpi	46d0 <udivmodsi4>
    47d0:	0109c83a 	sub	r4,zero,r4
    47d4:	28000b16 	blt	r5,zero,4804 <__modsi3+0x58>
    47d8:	180b883a 	mov	r5,r3
    47dc:	01800044 	movi	r6,1
    47e0:	00046d00 	call	46d0 <udivmodsi4>
    47e4:	0085c83a 	sub	r2,zero,r2
    47e8:	dfc00017 	ldw	ra,0(sp)
    47ec:	dec00104 	addi	sp,sp,4
    47f0:	f800283a 	ret
    47f4:	014bc83a 	sub	r5,zero,r5
    47f8:	dfc00017 	ldw	ra,0(sp)
    47fc:	dec00104 	addi	sp,sp,4
    4800:	00046d01 	jmpi	46d0 <udivmodsi4>
    4804:	0147c83a 	sub	r3,zero,r5
    4808:	003ff306 	br	47d8 <__modsi3+0x2c>

0000480c <__udivsi3>:
    480c:	000d883a 	mov	r6,zero
    4810:	00046d01 	jmpi	46d0 <udivmodsi4>

00004814 <__umodsi3>:
    4814:	01800044 	movi	r6,1
    4818:	00046d01 	jmpi	46d0 <udivmodsi4>

0000481c <__muldi3>:
    481c:	2011883a 	mov	r8,r4
    4820:	427fffcc 	andi	r9,r8,65535
    4824:	4018d43a 	srli	r12,r8,16
    4828:	32bfffcc 	andi	r10,r6,65535
    482c:	3016d43a 	srli	r11,r6,16
    4830:	4a85383a 	mul	r2,r9,r10
    4834:	6295383a 	mul	r10,r12,r10
    4838:	4ad3383a 	mul	r9,r9,r11
    483c:	113fffcc 	andi	r4,r2,65535
    4840:	1004d43a 	srli	r2,r2,16
    4844:	4a93883a 	add	r9,r9,r10
    4848:	3807883a 	mov	r3,r7
    484c:	1245883a 	add	r2,r2,r9
    4850:	280f883a 	mov	r7,r5
    4854:	180b883a 	mov	r5,r3
    4858:	1006943a 	slli	r3,r2,16
    485c:	defffd04 	addi	sp,sp,-12
    4860:	dc800215 	stw	r18,8(sp)
    4864:	1907883a 	add	r3,r3,r4
    4868:	dc400115 	stw	r17,4(sp)
    486c:	dc000015 	stw	r16,0(sp)
    4870:	4165383a 	mul	r18,r8,r5
    4874:	31e3383a 	mul	r17,r6,r7
    4878:	1012d43a 	srli	r9,r2,16
    487c:	62d9383a 	mul	r12,r12,r11
    4880:	181f883a 	mov	r15,r3
    4884:	1280022e 	bgeu	r2,r10,4890 <__muldi3+0x74>
    4888:	00800074 	movhi	r2,1
    488c:	6099883a 	add	r12,r12,r2
    4890:	624d883a 	add	r6,r12,r9
    4894:	9187883a 	add	r3,r18,r6
    4898:	88c7883a 	add	r3,r17,r3
    489c:	7805883a 	mov	r2,r15
    48a0:	dc800217 	ldw	r18,8(sp)
    48a4:	dc400117 	ldw	r17,4(sp)
    48a8:	dc000017 	ldw	r16,0(sp)
    48ac:	dec00304 	addi	sp,sp,12
    48b0:	f800283a 	ret

000048b4 <__clzsi2>:
    48b4:	00bfffd4 	movui	r2,65535
    48b8:	11000e36 	bltu	r2,r4,48f4 <__clzsi2+0x40>
    48bc:	00803fc4 	movi	r2,255
    48c0:	01400204 	movi	r5,8
    48c4:	0007883a 	mov	r3,zero
    48c8:	11001036 	bltu	r2,r4,490c <__clzsi2+0x58>
    48cc:	000b883a 	mov	r5,zero
    48d0:	20c6d83a 	srl	r3,r4,r3
    48d4:	00800074 	movhi	r2,1
    48d8:	10a8dd04 	addi	r2,r2,-23692
    48dc:	1887883a 	add	r3,r3,r2
    48e0:	18800003 	ldbu	r2,0(r3)
    48e4:	00c00804 	movi	r3,32
    48e8:	2885883a 	add	r2,r5,r2
    48ec:	1885c83a 	sub	r2,r3,r2
    48f0:	f800283a 	ret
    48f4:	01400404 	movi	r5,16
    48f8:	00804034 	movhi	r2,256
    48fc:	10bfffc4 	addi	r2,r2,-1
    4900:	2807883a 	mov	r3,r5
    4904:	113ff22e 	bgeu	r2,r4,48d0 <__clzsi2+0x1c>
    4908:	01400604 	movi	r5,24
    490c:	2807883a 	mov	r3,r5
    4910:	20c6d83a 	srl	r3,r4,r3
    4914:	00800074 	movhi	r2,1
    4918:	10a8dd04 	addi	r2,r2,-23692
    491c:	1887883a 	add	r3,r3,r2
    4920:	18800003 	ldbu	r2,0(r3)
    4924:	00c00804 	movi	r3,32
    4928:	2885883a 	add	r2,r5,r2
    492c:	1885c83a 	sub	r2,r3,r2
    4930:	f800283a 	ret

00004934 <__pack_f>:
    4934:	20c00017 	ldw	r3,0(r4)
    4938:	01c00044 	movi	r7,1
    493c:	21800317 	ldw	r6,12(r4)
    4940:	21400117 	ldw	r5,4(r4)
    4944:	38c02d2e 	bgeu	r7,r3,49fc <__pack_f+0xc8>
    4948:	00800104 	movi	r2,4
    494c:	18802826 	beq	r3,r2,49f0 <__pack_f+0xbc>
    4950:	00800084 	movi	r2,2
    4954:	18800126 	beq	r3,r2,495c <__pack_f+0x28>
    4958:	3000101e 	bne	r6,zero,499c <__pack_f+0x68>
    495c:	000d883a 	mov	r6,zero
    4960:	0007883a 	mov	r3,zero
    4964:	19003fcc 	andi	r4,r3,255
    4968:	200895fa 	slli	r4,r4,23
    496c:	00c02034 	movhi	r3,128
    4970:	18ffffc4 	addi	r3,r3,-1
    4974:	30c6703a 	and	r3,r6,r3
    4978:	10a0002c 	andhi	r2,r2,32768
    497c:	10c4b03a 	or	r2,r2,r3
    4980:	280a97fa 	slli	r5,r5,31
    4984:	1104b03a 	or	r2,r2,r4
    4988:	00e00034 	movhi	r3,32768
    498c:	18ffffc4 	addi	r3,r3,-1
    4990:	10c4703a 	and	r2,r2,r3
    4994:	1144b03a 	or	r2,r2,r5
    4998:	f800283a 	ret
    499c:	21000217 	ldw	r4,8(r4)
    49a0:	00bfe084 	movi	r2,-126
    49a4:	20801b16 	blt	r4,r2,4a14 <__pack_f+0xe0>
    49a8:	00801fc4 	movi	r2,127
    49ac:	11001016 	blt	r2,r4,49f0 <__pack_f+0xbc>
    49b0:	308e703a 	and	r7,r6,r2
    49b4:	2087883a 	add	r3,r4,r2
    49b8:	00801004 	movi	r2,64
    49bc:	38800526 	beq	r7,r2,49d4 <__pack_f+0xa0>
    49c0:	31800fc4 	addi	r6,r6,63
    49c4:	30000716 	blt	r6,zero,49e4 <__pack_f+0xb0>
    49c8:	300490ba 	slli	r2,r6,2
    49cc:	100cd27a 	srli	r6,r2,9
    49d0:	003fe406 	br	4964 <__pack_f+0x30>
    49d4:	3080200c 	andi	r2,r6,128
    49d8:	103ffa26 	beq	r2,zero,49c4 <__pack_f+0x90>
    49dc:	31cd883a 	add	r6,r6,r7
    49e0:	003ff806 	br	49c4 <__pack_f+0x90>
    49e4:	300cd07a 	srli	r6,r6,1
    49e8:	18c00044 	addi	r3,r3,1
    49ec:	003ff606 	br	49c8 <__pack_f+0x94>
    49f0:	000d883a 	mov	r6,zero
    49f4:	00ffffc4 	movi	r3,-1
    49f8:	003fda06 	br	4964 <__pack_f+0x30>
    49fc:	31800434 	orhi	r6,r6,16
    4a00:	00802034 	movhi	r2,128
    4a04:	10bfffc4 	addi	r2,r2,-1
    4a08:	308c703a 	and	r6,r6,r2
    4a0c:	00ffffc4 	movi	r3,-1
    4a10:	003fd406 	br	4964 <__pack_f+0x30>
    4a14:	1109c83a 	sub	r4,r2,r4
    4a18:	00800644 	movi	r2,25
    4a1c:	11001216 	blt	r2,r4,4a68 <__pack_f+0x134>
    4a20:	3904983a 	sll	r2,r7,r4
    4a24:	3106d83a 	srl	r3,r6,r4
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	3084703a 	and	r2,r6,r2
    4a30:	1004c03a 	cmpne	r2,r2,zero
    4a34:	1886b03a 	or	r3,r3,r2
    4a38:	19001fcc 	andi	r4,r3,127
    4a3c:	00801004 	movi	r2,64
    4a40:	20800c26 	beq	r4,r2,4a74 <__pack_f+0x140>
    4a44:	18c00fc4 	addi	r3,r3,63
    4a48:	00900034 	movhi	r2,16384
    4a4c:	10bfffc4 	addi	r2,r2,-1
    4a50:	180cd1fa 	srli	r6,r3,7
    4a54:	10c7803a 	cmpltu	r3,r2,r3
    4a58:	00802034 	movhi	r2,128
    4a5c:	10bfffc4 	addi	r2,r2,-1
    4a60:	308c703a 	and	r6,r6,r2
    4a64:	003fbf06 	br	4964 <__pack_f+0x30>
    4a68:	0007883a 	mov	r3,zero
    4a6c:	000d883a 	mov	r6,zero
    4a70:	003ff906 	br	4a58 <__pack_f+0x124>
    4a74:	1880200c 	andi	r2,r3,128
    4a78:	10000126 	beq	r2,zero,4a80 <__pack_f+0x14c>
    4a7c:	1907883a 	add	r3,r3,r4
    4a80:	180cd1fa 	srli	r6,r3,7
    4a84:	00900034 	movhi	r2,16384
    4a88:	10bfffc4 	addi	r2,r2,-1
    4a8c:	10c7803a 	cmpltu	r3,r2,r3
    4a90:	003ff106 	br	4a58 <__pack_f+0x124>

00004a94 <__unpack_f>:
    4a94:	21800017 	ldw	r6,0(r4)
    4a98:	00c02034 	movhi	r3,128
    4a9c:	18ffffc4 	addi	r3,r3,-1
    4aa0:	3004d5fa 	srli	r2,r6,23
    4aa4:	3008d7fa 	srli	r4,r6,31
    4aa8:	30ce703a 	and	r7,r6,r3
    4aac:	10c03fcc 	andi	r3,r2,255
    4ab0:	29000115 	stw	r4,4(r5)
    4ab4:	1800131e 	bne	r3,zero,4b04 <__unpack_f+0x70>
    4ab8:	38000f26 	beq	r7,zero,4af8 <__unpack_f+0x64>
    4abc:	380691fa 	slli	r3,r7,7
    4ac0:	01bfe084 	movi	r6,-126
    4ac4:	008000c4 	movi	r2,3
    4ac8:	01100034 	movhi	r4,16384
    4acc:	213fffc4 	addi	r4,r4,-1
    4ad0:	28800015 	stw	r2,0(r5)
    4ad4:	29800215 	stw	r6,8(r5)
    4ad8:	20c00536 	bltu	r4,r3,4af0 <__unpack_f+0x5c>
    4adc:	3005883a 	mov	r2,r6
    4ae0:	18c7883a 	add	r3,r3,r3
    4ae4:	10bfffc4 	addi	r2,r2,-1
    4ae8:	20fffd2e 	bgeu	r4,r3,4ae0 <__unpack_f+0x4c>
    4aec:	28800215 	stw	r2,8(r5)
    4af0:	28c00315 	stw	r3,12(r5)
    4af4:	f800283a 	ret
    4af8:	00800084 	movi	r2,2
    4afc:	28800015 	stw	r2,0(r5)
    4b00:	f800283a 	ret
    4b04:	00803fc4 	movi	r2,255
    4b08:	18800826 	beq	r3,r2,4b2c <__unpack_f+0x98>
    4b0c:	380491fa 	slli	r2,r7,7
    4b10:	18ffe044 	addi	r3,r3,-127
    4b14:	28c00215 	stw	r3,8(r5)
    4b18:	10900034 	orhi	r2,r2,16384
    4b1c:	28800315 	stw	r2,12(r5)
    4b20:	008000c4 	movi	r2,3
    4b24:	28800015 	stw	r2,0(r5)
    4b28:	f800283a 	ret
    4b2c:	3800031e 	bne	r7,zero,4b3c <__unpack_f+0xa8>
    4b30:	00800104 	movi	r2,4
    4b34:	28800015 	stw	r2,0(r5)
    4b38:	f800283a 	ret
    4b3c:	3080042c 	andhi	r2,r6,16
    4b40:	10000426 	beq	r2,zero,4b54 <__unpack_f+0xc0>
    4b44:	00800044 	movi	r2,1
    4b48:	28800015 	stw	r2,0(r5)
    4b4c:	29c00315 	stw	r7,12(r5)
    4b50:	f800283a 	ret
    4b54:	28000015 	stw	zero,0(r5)
    4b58:	003ffc06 	br	4b4c <__unpack_f+0xb8>

00004b5c <__fpcmp_parts_f>:
    4b5c:	21800017 	ldw	r6,0(r4)
    4b60:	00c00044 	movi	r3,1
    4b64:	19800a2e 	bgeu	r3,r6,4b90 <__fpcmp_parts_f+0x34>
    4b68:	28800017 	ldw	r2,0(r5)
    4b6c:	1880082e 	bgeu	r3,r2,4b90 <__fpcmp_parts_f+0x34>
    4b70:	00c00104 	movi	r3,4
    4b74:	30c01e26 	beq	r6,r3,4bf0 <__fpcmp_parts_f+0x94>
    4b78:	10c01a26 	beq	r2,r3,4be4 <__fpcmp_parts_f+0x88>
    4b7c:	00c00084 	movi	r3,2
    4b80:	30c00526 	beq	r6,r3,4b98 <__fpcmp_parts_f+0x3c>
    4b84:	10c0071e 	bne	r2,r3,4ba4 <__fpcmp_parts_f+0x48>
    4b88:	20800117 	ldw	r2,4(r4)
    4b8c:	1000091e 	bne	r2,zero,4bb4 <__fpcmp_parts_f+0x58>
    4b90:	00800044 	movi	r2,1
    4b94:	f800283a 	ret
    4b98:	10c0121e 	bne	r2,r3,4be4 <__fpcmp_parts_f+0x88>
    4b9c:	0005883a 	mov	r2,zero
    4ba0:	f800283a 	ret
    4ba4:	20c00117 	ldw	r3,4(r4)
    4ba8:	28800117 	ldw	r2,4(r5)
    4bac:	18800326 	beq	r3,r2,4bbc <__fpcmp_parts_f+0x60>
    4bb0:	183ff726 	beq	r3,zero,4b90 <__fpcmp_parts_f+0x34>
    4bb4:	00bfffc4 	movi	r2,-1
    4bb8:	f800283a 	ret
    4bbc:	21800217 	ldw	r6,8(r4)
    4bc0:	28800217 	ldw	r2,8(r5)
    4bc4:	11bffa16 	blt	r2,r6,4bb0 <__fpcmp_parts_f+0x54>
    4bc8:	30800416 	blt	r6,r2,4bdc <__fpcmp_parts_f+0x80>
    4bcc:	21000317 	ldw	r4,12(r4)
    4bd0:	29400317 	ldw	r5,12(r5)
    4bd4:	293ff636 	bltu	r5,r4,4bb0 <__fpcmp_parts_f+0x54>
    4bd8:	217ff02e 	bgeu	r4,r5,4b9c <__fpcmp_parts_f+0x40>
    4bdc:	183fec1e 	bne	r3,zero,4b90 <__fpcmp_parts_f+0x34>
    4be0:	003ff406 	br	4bb4 <__fpcmp_parts_f+0x58>
    4be4:	28800117 	ldw	r2,4(r5)
    4be8:	103fe91e 	bne	r2,zero,4b90 <__fpcmp_parts_f+0x34>
    4bec:	003ff106 	br	4bb4 <__fpcmp_parts_f+0x58>
    4bf0:	11bfe51e 	bne	r2,r6,4b88 <__fpcmp_parts_f+0x2c>
    4bf4:	28c00117 	ldw	r3,4(r5)
    4bf8:	20800117 	ldw	r2,4(r4)
    4bfc:	1885c83a 	sub	r2,r3,r2
    4c00:	f800283a 	ret

00004c04 <__make_fp>:
    4c04:	defffb04 	addi	sp,sp,-20
    4c08:	d9000015 	stw	r4,0(sp)
    4c0c:	d809883a 	mov	r4,sp
    4c10:	dfc00415 	stw	ra,16(sp)
    4c14:	d9400115 	stw	r5,4(sp)
    4c18:	d9800215 	stw	r6,8(sp)
    4c1c:	d9c00315 	stw	r7,12(sp)
    4c20:	00049340 	call	4934 <__pack_f>
    4c24:	dfc00417 	ldw	ra,16(sp)
    4c28:	dec00504 	addi	sp,sp,20
    4c2c:	f800283a 	ret

00004c30 <__pack_d>:
    4c30:	20c00017 	ldw	r3,0(r4)
    4c34:	defffd04 	addi	sp,sp,-12
    4c38:	dc000015 	stw	r16,0(sp)
    4c3c:	dc800215 	stw	r18,8(sp)
    4c40:	dc400115 	stw	r17,4(sp)
    4c44:	00800044 	movi	r2,1
    4c48:	22000317 	ldw	r8,12(r4)
    4c4c:	001f883a 	mov	r15,zero
    4c50:	22400417 	ldw	r9,16(r4)
    4c54:	24000117 	ldw	r16,4(r4)
    4c58:	10c0552e 	bgeu	r2,r3,4db0 <__pack_d+0x180>
    4c5c:	00800104 	movi	r2,4
    4c60:	18804f26 	beq	r3,r2,4da0 <__pack_d+0x170>
    4c64:	00800084 	movi	r2,2
    4c68:	18800226 	beq	r3,r2,4c74 <__pack_d+0x44>
    4c6c:	4244b03a 	or	r2,r8,r9
    4c70:	10001a1e 	bne	r2,zero,4cdc <__pack_d+0xac>
    4c74:	000d883a 	mov	r6,zero
    4c78:	000f883a 	mov	r7,zero
    4c7c:	0011883a 	mov	r8,zero
    4c80:	00800434 	movhi	r2,16
    4c84:	10bfffc4 	addi	r2,r2,-1
    4c88:	301d883a 	mov	r14,r6
    4c8c:	3884703a 	and	r2,r7,r2
    4c90:	400a953a 	slli	r5,r8,20
    4c94:	79bffc2c 	andhi	r6,r15,65520
    4c98:	308cb03a 	or	r6,r6,r2
    4c9c:	00e00434 	movhi	r3,32784
    4ca0:	18ffffc4 	addi	r3,r3,-1
    4ca4:	800497fa 	slli	r2,r16,31
    4ca8:	30c6703a 	and	r3,r6,r3
    4cac:	1946b03a 	or	r3,r3,r5
    4cb0:	01600034 	movhi	r5,32768
    4cb4:	297fffc4 	addi	r5,r5,-1
    4cb8:	194a703a 	and	r5,r3,r5
    4cbc:	288ab03a 	or	r5,r5,r2
    4cc0:	2807883a 	mov	r3,r5
    4cc4:	7005883a 	mov	r2,r14
    4cc8:	dc800217 	ldw	r18,8(sp)
    4ccc:	dc400117 	ldw	r17,4(sp)
    4cd0:	dc000017 	ldw	r16,0(sp)
    4cd4:	dec00304 	addi	sp,sp,12
    4cd8:	f800283a 	ret
    4cdc:	21000217 	ldw	r4,8(r4)
    4ce0:	00bf0084 	movi	r2,-1022
    4ce4:	20803f16 	blt	r4,r2,4de4 <__pack_d+0x1b4>
    4ce8:	0080ffc4 	movi	r2,1023
    4cec:	11002c16 	blt	r2,r4,4da0 <__pack_d+0x170>
    4cf0:	00803fc4 	movi	r2,255
    4cf4:	408c703a 	and	r6,r8,r2
    4cf8:	00802004 	movi	r2,128
    4cfc:	0007883a 	mov	r3,zero
    4d00:	000f883a 	mov	r7,zero
    4d04:	2280ffc4 	addi	r10,r4,1023
    4d08:	30801e26 	beq	r6,r2,4d84 <__pack_d+0x154>
    4d0c:	00801fc4 	movi	r2,127
    4d10:	4089883a 	add	r4,r8,r2
    4d14:	220d803a 	cmpltu	r6,r4,r8
    4d18:	324d883a 	add	r6,r6,r9
    4d1c:	2011883a 	mov	r8,r4
    4d20:	3013883a 	mov	r9,r6
    4d24:	00880034 	movhi	r2,8192
    4d28:	10bfffc4 	addi	r2,r2,-1
    4d2c:	12400d36 	bltu	r2,r9,4d64 <__pack_d+0x134>
    4d30:	4804963a 	slli	r2,r9,24
    4d34:	400cd23a 	srli	r6,r8,8
    4d38:	480ed23a 	srli	r7,r9,8
    4d3c:	013fffc4 	movi	r4,-1
    4d40:	118cb03a 	or	r6,r2,r6
    4d44:	01400434 	movhi	r5,16
    4d48:	297fffc4 	addi	r5,r5,-1
    4d4c:	3104703a 	and	r2,r6,r4
    4d50:	3946703a 	and	r3,r7,r5
    4d54:	5201ffcc 	andi	r8,r10,2047
    4d58:	100d883a 	mov	r6,r2
    4d5c:	180f883a 	mov	r7,r3
    4d60:	003fc706 	br	4c80 <__pack_d+0x50>
    4d64:	480897fa 	slli	r4,r9,31
    4d68:	4004d07a 	srli	r2,r8,1
    4d6c:	4806d07a 	srli	r3,r9,1
    4d70:	52800044 	addi	r10,r10,1
    4d74:	2084b03a 	or	r2,r4,r2
    4d78:	1011883a 	mov	r8,r2
    4d7c:	1813883a 	mov	r9,r3
    4d80:	003feb06 	br	4d30 <__pack_d+0x100>
    4d84:	383fe11e 	bne	r7,zero,4d0c <__pack_d+0xdc>
    4d88:	01004004 	movi	r4,256
    4d8c:	4104703a 	and	r2,r8,r4
    4d90:	10c4b03a 	or	r2,r2,r3
    4d94:	103fe326 	beq	r2,zero,4d24 <__pack_d+0xf4>
    4d98:	3005883a 	mov	r2,r6
    4d9c:	003fdc06 	br	4d10 <__pack_d+0xe0>
    4da0:	000d883a 	mov	r6,zero
    4da4:	000f883a 	mov	r7,zero
    4da8:	0201ffc4 	movi	r8,2047
    4dac:	003fb406 	br	4c80 <__pack_d+0x50>
    4db0:	0005883a 	mov	r2,zero
    4db4:	00c00234 	movhi	r3,8
    4db8:	408cb03a 	or	r6,r8,r2
    4dbc:	48ceb03a 	or	r7,r9,r3
    4dc0:	013fffc4 	movi	r4,-1
    4dc4:	01400434 	movhi	r5,16
    4dc8:	297fffc4 	addi	r5,r5,-1
    4dcc:	3104703a 	and	r2,r6,r4
    4dd0:	3946703a 	and	r3,r7,r5
    4dd4:	100d883a 	mov	r6,r2
    4dd8:	180f883a 	mov	r7,r3
    4ddc:	0201ffc4 	movi	r8,2047
    4de0:	003fa706 	br	4c80 <__pack_d+0x50>
    4de4:	1109c83a 	sub	r4,r2,r4
    4de8:	00800e04 	movi	r2,56
    4dec:	11004316 	blt	r2,r4,4efc <__pack_d+0x2cc>
    4df0:	21fff804 	addi	r7,r4,-32
    4df4:	38004516 	blt	r7,zero,4f0c <__pack_d+0x2dc>
    4df8:	49d8d83a 	srl	r12,r9,r7
    4dfc:	001b883a 	mov	r13,zero
    4e00:	0023883a 	mov	r17,zero
    4e04:	01400044 	movi	r5,1
    4e08:	0025883a 	mov	r18,zero
    4e0c:	38004716 	blt	r7,zero,4f2c <__pack_d+0x2fc>
    4e10:	29d6983a 	sll	r11,r5,r7
    4e14:	0015883a 	mov	r10,zero
    4e18:	00bfffc4 	movi	r2,-1
    4e1c:	5089883a 	add	r4,r10,r2
    4e20:	588b883a 	add	r5,r11,r2
    4e24:	228d803a 	cmpltu	r6,r4,r10
    4e28:	314b883a 	add	r5,r6,r5
    4e2c:	4104703a 	and	r2,r8,r4
    4e30:	4946703a 	and	r3,r9,r5
    4e34:	10c4b03a 	or	r2,r2,r3
    4e38:	10000226 	beq	r2,zero,4e44 <__pack_d+0x214>
    4e3c:	04400044 	movi	r17,1
    4e40:	0025883a 	mov	r18,zero
    4e44:	00803fc4 	movi	r2,255
    4e48:	644eb03a 	or	r7,r12,r17
    4e4c:	3892703a 	and	r9,r7,r2
    4e50:	00802004 	movi	r2,128
    4e54:	6c90b03a 	or	r8,r13,r18
    4e58:	0015883a 	mov	r10,zero
    4e5c:	48801626 	beq	r9,r2,4eb8 <__pack_d+0x288>
    4e60:	01001fc4 	movi	r4,127
    4e64:	3905883a 	add	r2,r7,r4
    4e68:	11cd803a 	cmpltu	r6,r2,r7
    4e6c:	320d883a 	add	r6,r6,r8
    4e70:	100f883a 	mov	r7,r2
    4e74:	00840034 	movhi	r2,4096
    4e78:	10bfffc4 	addi	r2,r2,-1
    4e7c:	3011883a 	mov	r8,r6
    4e80:	0007883a 	mov	r3,zero
    4e84:	11801b36 	bltu	r2,r6,4ef4 <__pack_d+0x2c4>
    4e88:	4004963a 	slli	r2,r8,24
    4e8c:	3808d23a 	srli	r4,r7,8
    4e90:	400ad23a 	srli	r5,r8,8
    4e94:	1813883a 	mov	r9,r3
    4e98:	1108b03a 	or	r4,r2,r4
    4e9c:	00bfffc4 	movi	r2,-1
    4ea0:	00c00434 	movhi	r3,16
    4ea4:	18ffffc4 	addi	r3,r3,-1
    4ea8:	208c703a 	and	r6,r4,r2
    4eac:	28ce703a 	and	r7,r5,r3
    4eb0:	4a01ffcc 	andi	r8,r9,2047
    4eb4:	003f7206 	br	4c80 <__pack_d+0x50>
    4eb8:	503fe91e 	bne	r10,zero,4e60 <__pack_d+0x230>
    4ebc:	01004004 	movi	r4,256
    4ec0:	3904703a 	and	r2,r7,r4
    4ec4:	0007883a 	mov	r3,zero
    4ec8:	10c4b03a 	or	r2,r2,r3
    4ecc:	10000626 	beq	r2,zero,4ee8 <__pack_d+0x2b8>
    4ed0:	3a45883a 	add	r2,r7,r9
    4ed4:	11cd803a 	cmpltu	r6,r2,r7
    4ed8:	320d883a 	add	r6,r6,r8
    4edc:	100f883a 	mov	r7,r2
    4ee0:	3011883a 	mov	r8,r6
    4ee4:	0007883a 	mov	r3,zero
    4ee8:	00840034 	movhi	r2,4096
    4eec:	10bfffc4 	addi	r2,r2,-1
    4ef0:	123fe52e 	bgeu	r2,r8,4e88 <__pack_d+0x258>
    4ef4:	00c00044 	movi	r3,1
    4ef8:	003fe306 	br	4e88 <__pack_d+0x258>
    4efc:	0009883a 	mov	r4,zero
    4f00:	0013883a 	mov	r9,zero
    4f04:	000b883a 	mov	r5,zero
    4f08:	003fe406 	br	4e9c <__pack_d+0x26c>
    4f0c:	4a47883a 	add	r3,r9,r9
    4f10:	008007c4 	movi	r2,31
    4f14:	1105c83a 	sub	r2,r2,r4
    4f18:	1886983a 	sll	r3,r3,r2
    4f1c:	4118d83a 	srl	r12,r8,r4
    4f20:	491ad83a 	srl	r13,r9,r4
    4f24:	1b18b03a 	or	r12,r3,r12
    4f28:	003fb506 	br	4e00 <__pack_d+0x1d0>
    4f2c:	2806d07a 	srli	r3,r5,1
    4f30:	008007c4 	movi	r2,31
    4f34:	1105c83a 	sub	r2,r2,r4
    4f38:	1896d83a 	srl	r11,r3,r2
    4f3c:	2914983a 	sll	r10,r5,r4
    4f40:	003fb506 	br	4e18 <__pack_d+0x1e8>

00004f44 <__unpack_d>:
    4f44:	20c00117 	ldw	r3,4(r4)
    4f48:	22400017 	ldw	r9,0(r4)
    4f4c:	00800434 	movhi	r2,16
    4f50:	10bfffc4 	addi	r2,r2,-1
    4f54:	1808d53a 	srli	r4,r3,20
    4f58:	180cd7fa 	srli	r6,r3,31
    4f5c:	1894703a 	and	r10,r3,r2
    4f60:	2201ffcc 	andi	r8,r4,2047
    4f64:	281b883a 	mov	r13,r5
    4f68:	4817883a 	mov	r11,r9
    4f6c:	29800115 	stw	r6,4(r5)
    4f70:	5019883a 	mov	r12,r10
    4f74:	40001e1e 	bne	r8,zero,4ff0 <__unpack_d+0xac>
    4f78:	4a84b03a 	or	r2,r9,r10
    4f7c:	10001926 	beq	r2,zero,4fe4 <__unpack_d+0xa0>
    4f80:	4804d63a 	srli	r2,r9,24
    4f84:	500c923a 	slli	r6,r10,8
    4f88:	013f0084 	movi	r4,-1022
    4f8c:	00c40034 	movhi	r3,4096
    4f90:	18ffffc4 	addi	r3,r3,-1
    4f94:	118cb03a 	or	r6,r2,r6
    4f98:	008000c4 	movi	r2,3
    4f9c:	480a923a 	slli	r5,r9,8
    4fa0:	68800015 	stw	r2,0(r13)
    4fa4:	69000215 	stw	r4,8(r13)
    4fa8:	19800b36 	bltu	r3,r6,4fd8 <__unpack_d+0x94>
    4fac:	200f883a 	mov	r7,r4
    4fb0:	1811883a 	mov	r8,r3
    4fb4:	2945883a 	add	r2,r5,r5
    4fb8:	1149803a 	cmpltu	r4,r2,r5
    4fbc:	3187883a 	add	r3,r6,r6
    4fc0:	20c9883a 	add	r4,r4,r3
    4fc4:	100b883a 	mov	r5,r2
    4fc8:	200d883a 	mov	r6,r4
    4fcc:	39ffffc4 	addi	r7,r7,-1
    4fd0:	413ff82e 	bgeu	r8,r4,4fb4 <__unpack_d+0x70>
    4fd4:	69c00215 	stw	r7,8(r13)
    4fd8:	69800415 	stw	r6,16(r13)
    4fdc:	69400315 	stw	r5,12(r13)
    4fe0:	f800283a 	ret
    4fe4:	00800084 	movi	r2,2
    4fe8:	28800015 	stw	r2,0(r5)
    4fec:	f800283a 	ret
    4ff0:	0081ffc4 	movi	r2,2047
    4ff4:	40800f26 	beq	r8,r2,5034 <__unpack_d+0xf0>
    4ff8:	480cd63a 	srli	r6,r9,24
    4ffc:	5006923a 	slli	r3,r10,8
    5000:	4804923a 	slli	r2,r9,8
    5004:	0009883a 	mov	r4,zero
    5008:	30c6b03a 	or	r3,r6,r3
    500c:	01440034 	movhi	r5,4096
    5010:	110cb03a 	or	r6,r2,r4
    5014:	423f0044 	addi	r8,r8,-1023
    5018:	194eb03a 	or	r7,r3,r5
    501c:	008000c4 	movi	r2,3
    5020:	69c00415 	stw	r7,16(r13)
    5024:	6a000215 	stw	r8,8(r13)
    5028:	68800015 	stw	r2,0(r13)
    502c:	69800315 	stw	r6,12(r13)
    5030:	f800283a 	ret
    5034:	4a84b03a 	or	r2,r9,r10
    5038:	1000031e 	bne	r2,zero,5048 <__unpack_d+0x104>
    503c:	00800104 	movi	r2,4
    5040:	28800015 	stw	r2,0(r5)
    5044:	f800283a 	ret
    5048:	0009883a 	mov	r4,zero
    504c:	01400234 	movhi	r5,8
    5050:	4904703a 	and	r2,r9,r4
    5054:	5146703a 	and	r3,r10,r5
    5058:	10c4b03a 	or	r2,r2,r3
    505c:	10000526 	beq	r2,zero,5074 <__unpack_d+0x130>
    5060:	00800044 	movi	r2,1
    5064:	68800015 	stw	r2,0(r13)
    5068:	6b000415 	stw	r12,16(r13)
    506c:	6ac00315 	stw	r11,12(r13)
    5070:	f800283a 	ret
    5074:	68000015 	stw	zero,0(r13)
    5078:	003ffb06 	br	5068 <__unpack_d+0x124>

0000507c <__fpcmp_parts_d>:
    507c:	21800017 	ldw	r6,0(r4)
    5080:	00c00044 	movi	r3,1
    5084:	19800a2e 	bgeu	r3,r6,50b0 <__fpcmp_parts_d+0x34>
    5088:	28800017 	ldw	r2,0(r5)
    508c:	1880082e 	bgeu	r3,r2,50b0 <__fpcmp_parts_d+0x34>
    5090:	00c00104 	movi	r3,4
    5094:	30c02626 	beq	r6,r3,5130 <__fpcmp_parts_d+0xb4>
    5098:	10c02226 	beq	r2,r3,5124 <__fpcmp_parts_d+0xa8>
    509c:	00c00084 	movi	r3,2
    50a0:	30c00526 	beq	r6,r3,50b8 <__fpcmp_parts_d+0x3c>
    50a4:	10c0071e 	bne	r2,r3,50c4 <__fpcmp_parts_d+0x48>
    50a8:	20800117 	ldw	r2,4(r4)
    50ac:	1000091e 	bne	r2,zero,50d4 <__fpcmp_parts_d+0x58>
    50b0:	00800044 	movi	r2,1
    50b4:	f800283a 	ret
    50b8:	10c01a1e 	bne	r2,r3,5124 <__fpcmp_parts_d+0xa8>
    50bc:	0005883a 	mov	r2,zero
    50c0:	f800283a 	ret
    50c4:	22000117 	ldw	r8,4(r4)
    50c8:	28800117 	ldw	r2,4(r5)
    50cc:	40800326 	beq	r8,r2,50dc <__fpcmp_parts_d+0x60>
    50d0:	403ff726 	beq	r8,zero,50b0 <__fpcmp_parts_d+0x34>
    50d4:	00bfffc4 	movi	r2,-1
    50d8:	f800283a 	ret
    50dc:	20c00217 	ldw	r3,8(r4)
    50e0:	28800217 	ldw	r2,8(r5)
    50e4:	10fffa16 	blt	r2,r3,50d0 <__fpcmp_parts_d+0x54>
    50e8:	18800916 	blt	r3,r2,5110 <__fpcmp_parts_d+0x94>
    50ec:	21c00417 	ldw	r7,16(r4)
    50f0:	28c00417 	ldw	r3,16(r5)
    50f4:	21800317 	ldw	r6,12(r4)
    50f8:	28800317 	ldw	r2,12(r5)
    50fc:	19fff436 	bltu	r3,r7,50d0 <__fpcmp_parts_d+0x54>
    5100:	38c00526 	beq	r7,r3,5118 <__fpcmp_parts_d+0x9c>
    5104:	38c00236 	bltu	r7,r3,5110 <__fpcmp_parts_d+0x94>
    5108:	19ffec1e 	bne	r3,r7,50bc <__fpcmp_parts_d+0x40>
    510c:	30bfeb2e 	bgeu	r6,r2,50bc <__fpcmp_parts_d+0x40>
    5110:	403fe71e 	bne	r8,zero,50b0 <__fpcmp_parts_d+0x34>
    5114:	003fef06 	br	50d4 <__fpcmp_parts_d+0x58>
    5118:	11bffa2e 	bgeu	r2,r6,5104 <__fpcmp_parts_d+0x88>
    511c:	403fe426 	beq	r8,zero,50b0 <__fpcmp_parts_d+0x34>
    5120:	003fec06 	br	50d4 <__fpcmp_parts_d+0x58>
    5124:	28800117 	ldw	r2,4(r5)
    5128:	103fe11e 	bne	r2,zero,50b0 <__fpcmp_parts_d+0x34>
    512c:	003fe906 	br	50d4 <__fpcmp_parts_d+0x58>
    5130:	11bfdd1e 	bne	r2,r6,50a8 <__fpcmp_parts_d+0x2c>
    5134:	28c00117 	ldw	r3,4(r5)
    5138:	20800117 	ldw	r2,4(r4)
    513c:	1885c83a 	sub	r2,r3,r2
    5140:	f800283a 	ret

00005144 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5144:	deffff04 	addi	sp,sp,-4
    5148:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    514c:	01000074 	movhi	r4,1
    5150:	21124304 	addi	r4,r4,18700
    5154:	00c00074 	movhi	r3,1
    5158:	18e96b04 	addi	r3,r3,-23124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    515c:	20c00926 	beq	r4,r3,5184 <alt_load+0x40>
    5160:	01800074 	movhi	r6,1
    5164:	31924304 	addi	r6,r6,18700
  {
    while( to != end )
    5168:	19800626 	beq	r3,r6,5184 <alt_load+0x40>
    516c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    5170:	20800017 	ldw	r2,0(r4)
    5174:	18800015 	stw	r2,0(r3)
    5178:	1947883a 	add	r3,r3,r5
    517c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5180:	30fffb1e 	bne	r6,r3,5170 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5184:	01000034 	movhi	r4,0
    5188:	21000804 	addi	r4,r4,32
    518c:	00c00034 	movhi	r3,0
    5190:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5194:	20c00926 	beq	r4,r3,51bc <alt_load+0x78>
    5198:	01800034 	movhi	r6,0
    519c:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    51a0:	19800626 	beq	r3,r6,51bc <alt_load+0x78>
    51a4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    51a8:	20800017 	ldw	r2,0(r4)
    51ac:	18800015 	stw	r2,0(r3)
    51b0:	1947883a 	add	r3,r3,r5
    51b4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    51b8:	30fffb1e 	bne	r6,r3,51a8 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    51bc:	01000074 	movhi	r4,1
    51c0:	21281d04 	addi	r4,r4,-24460
    51c4:	00c00074 	movhi	r3,1
    51c8:	18e81d04 	addi	r3,r3,-24460

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    51cc:	20c00926 	beq	r4,r3,51f4 <alt_load+0xb0>
    51d0:	01800074 	movhi	r6,1
    51d4:	31a96b04 	addi	r6,r6,-23124
  {
    while( to != end )
    51d8:	19800626 	beq	r3,r6,51f4 <alt_load+0xb0>
    51dc:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    51e0:	20800017 	ldw	r2,0(r4)
    51e4:	18800015 	stw	r2,0(r3)
    51e8:	1947883a 	add	r3,r3,r5
    51ec:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    51f0:	30fffb1e 	bne	r6,r3,51e0 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    51f4:	00073700 	call	7370 <alt_dcache_flush_all>
  alt_icache_flush_all();
    51f8:	000745c0 	call	745c <alt_icache_flush_all>
}
    51fc:	dfc00017 	ldw	ra,0(sp)
    5200:	dec00104 	addi	sp,sp,4
    5204:	f800283a 	ret

00005208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5208:	defffe04 	addi	sp,sp,-8
    520c:	dfc00115 	stw	ra,4(sp)
    5210:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5214:	0009883a 	mov	r4,zero
    5218:	000545c0 	call	545c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    521c:	000547c0 	call	547c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5220:	01800074 	movhi	r6,1
    5224:	31a91d04 	addi	r6,r6,-23436
    5228:	3009883a 	mov	r4,r6
    522c:	300b883a 	mov	r5,r6
    5230:	00074e00 	call	74e0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5234:	d108ee17 	ldw	r4,9144(gp)
    5238:	d148ef17 	ldw	r5,9148(gp)
    523c:	d188f017 	ldw	r6,9152(gp)
    5240:	000045c0 	call	45c <main>
    5244:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    5248:	01000044 	movi	r4,1
    524c:	00072940 	call	7294 <close>
  exit (result);
    5250:	8009883a 	mov	r4,r16
    5254:	0007a200 	call	7a20 <exit>

00005258 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    5258:	defff804 	addi	sp,sp,-32
    525c:	dfc00415 	stw	ra,16(sp)
    5260:	dc800315 	stw	r18,12(sp)
    5264:	dc400215 	stw	r17,8(sp)
    5268:	dc000115 	stw	r16,4(sp)
    526c:	d9400515 	stw	r5,20(sp)
    5270:	d9800615 	stw	r6,24(sp)
    5274:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    5278:	d8800504 	addi	r2,sp,20
    527c:	d8800015 	stw	r2,0(sp)
    5280:	2023883a 	mov	r17,r4
    5284:	00005d06 	br	53fc <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    5288:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    528c:	21003fcc 	andi	r4,r4,255
    5290:	2100201c 	xori	r4,r4,128
    5294:	213fe004 	addi	r4,r4,-128
    5298:	00800944 	movi	r2,37
    529c:	20800226 	beq	r4,r2,52a8 <alt_printf+0x50>
        {
            alt_putchar(c);
    52a0:	00054340 	call	5434 <alt_putchar>
    52a4:	00005506 	br	53fc <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    52a8:	89400003 	ldbu	r5,0(r17)
    52ac:	8c400044 	addi	r17,r17,1
    52b0:	29003fcc 	andi	r4,r5,255
    52b4:	2100201c 	xori	r4,r4,128
    52b8:	213fe004 	addi	r4,r4,-128
    52bc:	20005726 	beq	r4,zero,541c <alt_printf+0x1c4>
            {
                if (c == '%')
    52c0:	00800944 	movi	r2,37
    52c4:	2080021e 	bne	r4,r2,52d0 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    52c8:	00054340 	call	5434 <alt_putchar>
    52cc:	00004b06 	br	53fc <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    52d0:	28c03fcc 	andi	r3,r5,255
    52d4:	18c0201c 	xori	r3,r3,128
    52d8:	18ffe004 	addi	r3,r3,-128
    52dc:	008018c4 	movi	r2,99
    52e0:	1880061e 	bne	r3,r2,52fc <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    52e4:	d8c00017 	ldw	r3,0(sp)
    52e8:	18800104 	addi	r2,r3,4
    52ec:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    52f0:	19000017 	ldw	r4,0(r3)
    52f4:	00054340 	call	5434 <alt_putchar>
    52f8:	00004006 	br	53fc <alt_printf+0x1a4>
                }
                else if (c == 'x')
    52fc:	28c03fcc 	andi	r3,r5,255
    5300:	18c0201c 	xori	r3,r3,128
    5304:	18ffe004 	addi	r3,r3,-128
    5308:	00801e04 	movi	r2,120
    530c:	1880231e 	bne	r3,r2,539c <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    5310:	d8c00017 	ldw	r3,0(sp)
    5314:	18800104 	addi	r2,r3,4
    5318:	d8800015 	stw	r2,0(sp)
    531c:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    5320:	90000326 	beq	r18,zero,5330 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    5324:	90bc002c 	andhi	r2,r18,61440
    5328:	10000426 	beq	r2,zero,533c <alt_printf+0xe4>
    532c:	00003906 	br	5414 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    5330:	01000c04 	movi	r4,48
    5334:	00054340 	call	5434 <alt_putchar>
    5338:	00003006 	br	53fc <alt_printf+0x1a4>
                        continue;
    533c:	04000704 	movi	r16,28
    5340:	013fff04 	movi	r4,-4
    5344:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    5348:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    534c:	1c04983a 	sll	r2,r3,r16
    5350:	9084703a 	and	r2,r18,r2
    5354:	103ffc26 	beq	r2,zero,5348 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    5358:	80002816 	blt	r16,zero,53fc <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    535c:	008003c4 	movi	r2,15
    5360:	1404983a 	sll	r2,r2,r16
    5364:	9084703a 	and	r2,r18,r2
    5368:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    536c:	00800244 	movi	r2,9
    5370:	10c00236 	bltu	r2,r3,537c <alt_printf+0x124>
                            c = '0' + digit;
    5374:	19000c04 	addi	r4,r3,48
    5378:	00000106 	br	5380 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    537c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    5380:	21003fcc 	andi	r4,r4,255
    5384:	2100201c 	xori	r4,r4,128
    5388:	213fe004 	addi	r4,r4,-128
    538c:	00054340 	call	5434 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    5390:	843fff04 	addi	r16,r16,-4
    5394:	80001916 	blt	r16,zero,53fc <alt_printf+0x1a4>
    5398:	003ff006 	br	535c <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    539c:	28c03fcc 	andi	r3,r5,255
    53a0:	18c0201c 	xori	r3,r3,128
    53a4:	18ffe004 	addi	r3,r3,-128
    53a8:	00801cc4 	movi	r2,115
    53ac:	1880131e 	bne	r3,r2,53fc <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    53b0:	d8800017 	ldw	r2,0(sp)
    53b4:	10c00104 	addi	r3,r2,4
    53b8:	d8c00015 	stw	r3,0(sp)
    53bc:	14000017 	ldw	r16,0(r2)

                    while(*s)
    53c0:	81000003 	ldbu	r4,0(r16)
    53c4:	20803fcc 	andi	r2,r4,255
    53c8:	1080201c 	xori	r2,r2,128
    53cc:	10bfe004 	addi	r2,r2,-128
    53d0:	10000a26 	beq	r2,zero,53fc <alt_printf+0x1a4>
                      alt_putchar(*s++);
    53d4:	84000044 	addi	r16,r16,1
    53d8:	21003fcc 	andi	r4,r4,255
    53dc:	2100201c 	xori	r4,r4,128
    53e0:	213fe004 	addi	r4,r4,-128
    53e4:	00054340 	call	5434 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    53e8:	81000003 	ldbu	r4,0(r16)
    53ec:	20803fcc 	andi	r2,r4,255
    53f0:	1080201c 	xori	r2,r2,128
    53f4:	10bfe004 	addi	r2,r2,-128
    53f8:	103ff61e 	bne	r2,zero,53d4 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    53fc:	89000003 	ldbu	r4,0(r17)
    5400:	20803fcc 	andi	r2,r4,255
    5404:	1080201c 	xori	r2,r2,128
    5408:	10bfe004 	addi	r2,r2,-128
    540c:	103f9e1e 	bne	r2,zero,5288 <alt_printf+0x30>
    5410:	00000206 	br	541c <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    5414:	04000704 	movi	r16,28
    5418:	003fd006 	br	535c <alt_printf+0x104>
    541c:	dfc00417 	ldw	ra,16(sp)
    5420:	dc800317 	ldw	r18,12(sp)
    5424:	dc400217 	ldw	r17,8(sp)
    5428:	dc000117 	ldw	r16,4(sp)
    542c:	dec00804 	addi	sp,sp,32
    5430:	f800283a 	ret

00005434 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    5434:	deffff04 	addi	sp,sp,-4
    5438:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    543c:	00800074 	movhi	r2,1
    5440:	10923e04 	addi	r2,r2,18680
    5444:	10800017 	ldw	r2,0(r2)
    5448:	11400217 	ldw	r5,8(r2)
    544c:	0007b6c0 	call	7b6c <putc>
#endif
}
    5450:	dfc00017 	ldw	ra,0(sp)
    5454:	dec00104 	addi	sp,sp,4
    5458:	f800283a 	ret

0000545c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    545c:	deffff04 	addi	sp,sp,-4
    5460:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    5464:	00078b40 	call	78b4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5468:	00800044 	movi	r2,1
    546c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5470:	dfc00017 	ldw	ra,0(sp)
    5474:	dec00104 	addi	sp,sp,4
    5478:	f800283a 	ret

0000547c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    547c:	defffd04 	addi	sp,sp,-12
    5480:	dfc00215 	stw	ra,8(sp)
    5484:	dc400115 	stw	r17,4(sp)
    5488:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    548c:	04400204 	movi	r17,8
    5490:	01040034 	movhi	r4,4096
    5494:	21080004 	addi	r4,r4,8192
    5498:	000b883a 	mov	r5,zero
    549c:	000d883a 	mov	r6,zero
    54a0:	880f883a 	mov	r7,r17
    54a4:	0005d500 	call	5d50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    54a8:	04000074 	movhi	r16,1
    54ac:	840af904 	addi	r16,r16,11236
    54b0:	8009883a 	mov	r4,r16
    54b4:	000b883a 	mov	r5,zero
    54b8:	880d883a 	mov	r6,r17
    54bc:	000584c0 	call	584c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    54c0:	04400074 	movhi	r17,1
    54c4:	8c523704 	addi	r17,r17,18652
    54c8:	813ff604 	addi	r4,r16,-40
    54cc:	880b883a 	mov	r5,r17
    54d0:	000737c0 	call	737c <alt_dev_llist_insert>
    54d4:	01000074 	movhi	r4,1
    54d8:	210f0704 	addi	r4,r4,15388
    54dc:	880b883a 	mov	r5,r17
    54e0:	000737c0 	call	737c <alt_dev_llist_insert>
    54e4:	01000074 	movhi	r4,1
    54e8:	210f1304 	addi	r4,r4,15436
    54ec:	880b883a 	mov	r5,r17
    54f0:	000737c0 	call	737c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    54f4:	04000074 	movhi	r16,1
    54f8:	840f1f04 	addi	r16,r16,15484
    54fc:	8009883a 	mov	r4,r16
    5500:	0005e840 	call	5e84 <alt_up_character_lcd_init>
    5504:	8009883a 	mov	r4,r16
    5508:	880b883a 	mov	r5,r17
    550c:	000737c0 	call	737c <alt_dev_llist_insert>
    5510:	01000074 	movhi	r4,1
    5514:	210f2a04 	addi	r4,r4,15528
    5518:	880b883a 	mov	r5,r17
    551c:	000737c0 	call	737c <alt_dev_llist_insert>
    5520:	01000074 	movhi	r4,1
    5524:	210f3504 	addi	r4,r4,15572
    5528:	880b883a 	mov	r5,r17
    552c:	000737c0 	call	737c <alt_dev_llist_insert>
    5530:	01000074 	movhi	r4,1
    5534:	210f4004 	addi	r4,r4,15616
    5538:	880b883a 	mov	r5,r17
    553c:	000737c0 	call	737c <alt_dev_llist_insert>
    5540:	01000074 	movhi	r4,1
    5544:	210f4b04 	addi	r4,r4,15660
    5548:	880b883a 	mov	r5,r17
    554c:	000737c0 	call	737c <alt_dev_llist_insert>
    5550:	01000074 	movhi	r4,1
    5554:	210f5604 	addi	r4,r4,15704
    5558:	880b883a 	mov	r5,r17
    555c:	000737c0 	call	737c <alt_dev_llist_insert>
    5560:	01000074 	movhi	r4,1
    5564:	210f6104 	addi	r4,r4,15748
    5568:	880b883a 	mov	r5,r17
    556c:	000737c0 	call	737c <alt_dev_llist_insert>
    5570:	01000074 	movhi	r4,1
    5574:	210f6c04 	addi	r4,r4,15792
    5578:	880b883a 	mov	r5,r17
    557c:	000737c0 	call	737c <alt_dev_llist_insert>
    5580:	01000074 	movhi	r4,1
    5584:	210f7704 	addi	r4,r4,15836
    5588:	880b883a 	mov	r5,r17
    558c:	000737c0 	call	737c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    5590:	04000074 	movhi	r16,1
    5594:	840f8204 	addi	r16,r16,15880
    5598:	8009883a 	mov	r4,r16
    559c:	00063a80 	call	63a8 <alt_up_ps2_init>
    55a0:	8009883a 	mov	r4,r16
    55a4:	880b883a 	mov	r5,r17
    55a8:	000737c0 	call	737c <alt_dev_llist_insert>
    55ac:	01000074 	movhi	r4,1
    55b0:	210f9004 	addi	r4,r4,15936
    55b4:	880b883a 	mov	r5,r17
    55b8:	000737c0 	call	737c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    55bc:	01000074 	movhi	r4,1
    55c0:	210f9b04 	addi	r4,r4,15980
    55c4:	20800a17 	ldw	r2,40(r4)
    55c8:	10800104 	addi	r2,r2,4
    55cc:	10c0000b 	ldhu	r3,0(r2)
    55d0:	20c00c15 	stw	r3,48(r4)
    55d4:	10800017 	ldw	r2,0(r2)
    55d8:	100ad43a 	srli	r5,r2,16
    55dc:	21400d15 	stw	r5,52(r4)
    55e0:	00801004 	movi	r2,64
    55e4:	10c00436 	bltu	r2,r3,55f8 <alt_sys_init+0x17c>
    55e8:	00800fc4 	movi	r2,63
    55ec:	20800f15 	stw	r2,60(r4)
    55f0:	00800184 	movi	r2,6
    55f4:	20801015 	stw	r2,64(r4)
    55f8:	00800804 	movi	r2,32
    55fc:	11400436 	bltu	r2,r5,5610 <alt_sys_init+0x194>
    5600:	00c007c4 	movi	r3,31
    5604:	00800074 	movhi	r2,1
    5608:	108f9b04 	addi	r2,r2,15980
    560c:	10c01115 	stw	r3,68(r2)
    5610:	04000074 	movhi	r16,1
    5614:	840f9b04 	addi	r16,r16,15980
    5618:	8009883a 	mov	r4,r16
    561c:	00067600 	call	6760 <alt_up_char_buffer_init>
    5620:	8009883a 	mov	r4,r16
    5624:	01400074 	movhi	r5,1
    5628:	29523704 	addi	r5,r5,18652
    562c:	000737c0 	call	737c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    5630:	01800074 	movhi	r6,1
    5634:	318fad04 	addi	r6,r6,16052
    5638:	30c00a17 	ldw	r3,40(r6)
    563c:	18800017 	ldw	r2,0(r3)
    5640:	30800b15 	stw	r2,44(r6)
    5644:	18800117 	ldw	r2,4(r3)
    5648:	30800c15 	stw	r2,48(r6)
    564c:	19000204 	addi	r4,r3,8
    5650:	2080000b 	ldhu	r2,0(r4)
    5654:	30800f15 	stw	r2,60(r6)
    5658:	20800017 	ldw	r2,0(r4)
    565c:	1004d43a 	srli	r2,r2,16
    5660:	30801015 	stw	r2,64(r6)
    5664:	18c00304 	addi	r3,r3,12
    5668:	18800017 	ldw	r2,0(r3)
    566c:	1005d07a 	srai	r2,r2,1
    5670:	01000044 	movi	r4,1
    5674:	1104703a 	and	r2,r2,r4
    5678:	30800d15 	stw	r2,52(r6)
    567c:	18800017 	ldw	r2,0(r3)
    5680:	1005d13a 	srai	r2,r2,4
    5684:	114003cc 	andi	r5,r2,15
    5688:	31400e15 	stw	r5,56(r6)
    568c:	1a000017 	ldw	r8,0(r3)
    5690:	400ed43a 	srli	r7,r8,16
    5694:	2900021e 	bne	r5,r4,56a0 <alt_sys_init+0x224>
    5698:	30001115 	stw	zero,68(r6)
    569c:	00000b06 	br	56cc <alt_sys_init+0x250>
    56a0:	00800084 	movi	r2,2
    56a4:	2880051e 	bne	r5,r2,56bc <alt_sys_init+0x240>
    56a8:	00c00044 	movi	r3,1
    56ac:	00800074 	movhi	r2,1
    56b0:	108fad04 	addi	r2,r2,16052
    56b4:	10c01115 	stw	r3,68(r2)
    56b8:	00000406 	br	56cc <alt_sys_init+0x250>
    56bc:	00c00084 	movi	r3,2
    56c0:	00800074 	movhi	r2,1
    56c4:	108fad04 	addi	r2,r2,16052
    56c8:	10c01115 	stw	r3,68(r2)
    56cc:	01000074 	movhi	r4,1
    56d0:	210fad04 	addi	r4,r4,16052
    56d4:	38c03fcc 	andi	r3,r7,255
    56d8:	01800804 	movi	r6,32
    56dc:	30c5c83a 	sub	r2,r6,r3
    56e0:	017fffc4 	movi	r5,-1
    56e4:	2884d83a 	srl	r2,r5,r2
    56e8:	20801215 	stw	r2,72(r4)
    56ec:	20801117 	ldw	r2,68(r4)
    56f0:	1887883a 	add	r3,r3,r2
    56f4:	20c01315 	stw	r3,76(r4)
    56f8:	4004d63a 	srli	r2,r8,24
    56fc:	308dc83a 	sub	r6,r6,r2
    5700:	298ad83a 	srl	r5,r5,r6
    5704:	21401415 	stw	r5,80(r4)
    5708:	01400074 	movhi	r5,1
    570c:	29523704 	addi	r5,r5,18652
    5710:	000737c0 	call	737c <alt_dev_llist_insert>
}
    5714:	dfc00217 	ldw	ra,8(sp)
    5718:	dc400117 	ldw	r17,4(sp)
    571c:	dc000017 	ldw	r16,0(sp)
    5720:	dec00304 	addi	sp,sp,12
    5724:	f800283a 	ret

00005728 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    5728:	deffff04 	addi	sp,sp,-4
    572c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    5730:	21000017 	ldw	r4,0(r4)
    5734:	21000a04 	addi	r4,r4,40
    5738:	00059f80 	call	59f8 <altera_avalon_jtag_uart_ioctl>
}
    573c:	dfc00017 	ldw	ra,0(sp)
    5740:	dec00104 	addi	sp,sp,4
    5744:	f800283a 	ret

00005748 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    5748:	deffff04 	addi	sp,sp,-4
    574c:	dfc00015 	stw	ra,0(sp)
    5750:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    5754:	21000017 	ldw	r4,0(r4)
    5758:	21000a04 	addi	r4,r4,40
    575c:	11400217 	ldw	r5,8(r2)
    5760:	00057c00 	call	57c0 <altera_avalon_jtag_uart_close>
}
    5764:	dfc00017 	ldw	ra,0(sp)
    5768:	dec00104 	addi	sp,sp,4
    576c:	f800283a 	ret

00005770 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5770:	deffff04 	addi	sp,sp,-4
    5774:	dfc00015 	stw	ra,0(sp)
    5778:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    577c:	21000017 	ldw	r4,0(r4)
    5780:	21000a04 	addi	r4,r4,40
    5784:	11c00217 	ldw	r7,8(r2)
    5788:	0005bd40 	call	5bd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    578c:	dfc00017 	ldw	ra,0(sp)
    5790:	dec00104 	addi	sp,sp,4
    5794:	f800283a 	ret

00005798 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5798:	deffff04 	addi	sp,sp,-4
    579c:	dfc00015 	stw	ra,0(sp)
    57a0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    57a4:	21000017 	ldw	r4,0(r4)
    57a8:	21000a04 	addi	r4,r4,40
    57ac:	11c00217 	ldw	r7,8(r2)
    57b0:	0005a6c0 	call	5a6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    57b4:	dfc00017 	ldw	ra,0(sp)
    57b8:	dec00104 	addi	sp,sp,4
    57bc:	f800283a 	ret

000057c0 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    57c0:	21800c17 	ldw	r6,48(r4)
    57c4:	2950000c 	andi	r5,r5,16384
    57c8:	280b003a 	cmpeq	r5,r5,zero
    57cc:	00000306 	br	57dc <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    57d0:	2800021e 	bne	r5,zero,57dc <altera_avalon_jtag_uart_close+0x1c>
    57d4:	00bffd44 	movi	r2,-11
    57d8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    57dc:	20800d17 	ldw	r2,52(r4)
    57e0:	11800326 	beq	r2,r6,57f0 <altera_avalon_jtag_uart_close+0x30>
    57e4:	20c00917 	ldw	r3,36(r4)
    57e8:	20800117 	ldw	r2,4(r4)
    57ec:	18bff836 	bltu	r3,r2,57d0 <altera_avalon_jtag_uart_close+0x10>
    57f0:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    57f4:	f800283a 	ret

000057f8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    57f8:	20800017 	ldw	r2,0(r4)
    57fc:	10c00104 	addi	r3,r2,4
    5800:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    5804:	01410004 	movi	r5,1024
    5808:	1144703a 	and	r2,r2,r5
    580c:	10000526 	beq	r2,zero,5824 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    5810:	20800817 	ldw	r2,32(r4)
    5814:	1144b03a 	or	r2,r2,r5
    5818:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    581c:	20000915 	stw	zero,36(r4)
    5820:	00000606 	br	583c <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    5824:	20c00917 	ldw	r3,36(r4)
    5828:	00a00034 	movhi	r2,32768
    582c:	10bfff04 	addi	r2,r2,-4
    5830:	10c00236 	bltu	r2,r3,583c <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    5834:	18800044 	addi	r2,r3,1
    5838:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    583c:	008000b4 	movhi	r2,2
    5840:	10bb2004 	addi	r2,r2,-4992
    5844:	10800017 	ldw	r2,0(r2)
    5848:	f800283a 	ret

0000584c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    584c:	defffe04 	addi	sp,sp,-8
    5850:	dfc00115 	stw	ra,4(sp)
    5854:	dc000015 	stw	r16,0(sp)
    5858:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    585c:	00c00044 	movi	r3,1
    5860:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    5864:	20800017 	ldw	r2,0(r4)
    5868:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    586c:	3009883a 	mov	r4,r6
    5870:	800b883a 	mov	r5,r16
    5874:	01800034 	movhi	r6,0
    5878:	31963104 	addi	r6,r6,22724
    587c:	00075780 	call	7578 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    5880:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    5884:	81000204 	addi	r4,r16,8
    5888:	008000b4 	movhi	r2,2
    588c:	10bb2004 	addi	r2,r2,-4992
    5890:	11400017 	ldw	r5,0(r2)
    5894:	01800034 	movhi	r6,0
    5898:	3195fe04 	addi	r6,r6,22520
    589c:	800f883a 	mov	r7,r16
    58a0:	00072000 	call	7200 <alt_alarm_start>
    58a4:	1000030e 	bge	r2,zero,58b4 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    58a8:	00a00034 	movhi	r2,32768
    58ac:	10bfffc4 	addi	r2,r2,-1
    58b0:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    58b4:	dfc00117 	ldw	ra,4(sp)
    58b8:	dc000017 	ldw	r16,0(sp)
    58bc:	dec00204 	addi	sp,sp,8
    58c0:	f800283a 	ret

000058c4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    58c4:	22000017 	ldw	r8,0(r4)
    58c8:	03800104 	movi	r14,4
    58cc:	4399883a 	add	r12,r8,r14
    58d0:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    58d4:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    58d8:	5880c00c 	andi	r2,r11,768
    58dc:	10004526 	beq	r2,zero,59f4 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    58e0:	5880400c 	andi	r2,r11,256
    58e4:	10002126 	beq	r2,zero,596c <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    58e8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    58ec:	10800044 	addi	r2,r2,1
    58f0:	1081ffcc 	andi	r2,r2,2047
    58f4:	20c00b17 	ldw	r3,44(r4)
    58f8:	10c01626 	beq	r2,r3,5954 <altera_avalon_jtag_uart_irq+0x90>
    58fc:	02a00014 	movui	r10,32768
    5900:	02400e04 	movi	r9,56
    5904:	01c00044 	movi	r7,1
    5908:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    590c:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    5910:	2a84703a 	and	r2,r5,r10
    5914:	10000d26 	beq	r2,zero,594c <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5918:	20800a17 	ldw	r2,40(r4)
    591c:	1105883a 	add	r2,r2,r4
    5920:	1245883a 	add	r2,r2,r9
    5924:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5928:	20800a17 	ldw	r2,40(r4)
    592c:	11c5883a 	add	r2,r2,r7
    5930:	1184703a 	and	r2,r2,r6
    5934:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5938:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    593c:	11c5883a 	add	r2,r2,r7
    5940:	1184703a 	and	r2,r2,r6
    5944:	20c00b17 	ldw	r3,44(r4)
    5948:	10fff01e 	bne	r2,r3,590c <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    594c:	2b44703a 	and	r2,r5,r13
    5950:	10000626 	beq	r2,zero,596c <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    5954:	20800817 	ldw	r2,32(r4)
    5958:	00ffff84 	movi	r3,-2
    595c:	10c4703a 	and	r2,r2,r3
    5960:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    5964:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5968:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    596c:	5880800c 	andi	r2,r11,512
    5970:	103fd826 	beq	r2,zero,58d4 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    5974:	5b44703a 	and	r2,r11,r13
    5978:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    597c:	283fd526 	beq	r5,zero,58d4 <altera_avalon_jtag_uart_irq+0x10>
    5980:	20c00d17 	ldw	r3,52(r4)
    5984:	20800c17 	ldw	r2,48(r4)
    5988:	18801126 	beq	r3,r2,59d0 <altera_avalon_jtag_uart_irq+0x10c>
    598c:	02420e04 	movi	r9,2104
    5990:	01800044 	movi	r6,1
    5994:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    5998:	20800d17 	ldw	r2,52(r4)
    599c:	1105883a 	add	r2,r2,r4
    59a0:	1245883a 	add	r2,r2,r9
    59a4:	10800007 	ldb	r2,0(r2)
    59a8:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    59ac:	20800d17 	ldw	r2,52(r4)
    59b0:	1185883a 	add	r2,r2,r6
    59b4:	11c4703a 	and	r2,r2,r7
    59b8:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    59bc:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    59c0:	283fc426 	beq	r5,zero,58d4 <altera_avalon_jtag_uart_irq+0x10>
    59c4:	20c00d17 	ldw	r3,52(r4)
    59c8:	20800c17 	ldw	r2,48(r4)
    59cc:	18bff21e 	bne	r3,r2,5998 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    59d0:	20c00817 	ldw	r3,32(r4)
    59d4:	00bfff44 	movi	r2,-3
    59d8:	1886703a 	and	r3,r3,r2
    59dc:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    59e0:	20800017 	ldw	r2,0(r4)
    59e4:	1385883a 	add	r2,r2,r14
    59e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    59ec:	60800037 	ldwio	r2,0(r12)
    59f0:	003fb806 	br	58d4 <altera_avalon_jtag_uart_irq+0x10>
    59f4:	f800283a 	ret

000059f8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    59f8:	009a8044 	movi	r2,27137
    59fc:	28800326 	beq	r5,r2,5a0c <altera_avalon_jtag_uart_ioctl+0x14>
    5a00:	009a8084 	movi	r2,27138
    5a04:	2880171e 	bne	r5,r2,5a64 <altera_avalon_jtag_uart_ioctl+0x6c>
    5a08:	00000d06 	br	5a40 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    5a0c:	20c00117 	ldw	r3,4(r4)
    5a10:	00a00034 	movhi	r2,32768
    5a14:	10bfffc4 	addi	r2,r2,-1
    5a18:	18801226 	beq	r3,r2,5a64 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    5a1c:	31800017 	ldw	r6,0(r6)
    5a20:	30ffff84 	addi	r3,r6,-2
    5a24:	10bfff44 	addi	r2,r2,-3
    5a28:	10c0022e 	bgeu	r2,r3,5a34 <altera_avalon_jtag_uart_ioctl+0x3c>
    5a2c:	01a00034 	movhi	r6,32768
    5a30:	31bfff84 	addi	r6,r6,-2
    5a34:	21800115 	stw	r6,4(r4)
    5a38:	0005883a 	mov	r2,zero
    5a3c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    5a40:	20c00117 	ldw	r3,4(r4)
    5a44:	00a00034 	movhi	r2,32768
    5a48:	10bfffc4 	addi	r2,r2,-1
    5a4c:	18800526 	beq	r3,r2,5a64 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    5a50:	20800917 	ldw	r2,36(r4)
    5a54:	10c5803a 	cmpltu	r2,r2,r3
    5a58:	30800015 	stw	r2,0(r6)
    5a5c:	0005883a 	mov	r2,zero
    5a60:	f800283a 	ret
    5a64:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    5a68:	f800283a 	ret

00005a6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    5a6c:	defff604 	addi	sp,sp,-40
    5a70:	dfc00915 	stw	ra,36(sp)
    5a74:	df000815 	stw	fp,32(sp)
    5a78:	ddc00715 	stw	r23,28(sp)
    5a7c:	dd800615 	stw	r22,24(sp)
    5a80:	dd400515 	stw	r21,20(sp)
    5a84:	dd000415 	stw	r20,16(sp)
    5a88:	dcc00315 	stw	r19,12(sp)
    5a8c:	dc800215 	stw	r18,8(sp)
    5a90:	dc400115 	stw	r17,4(sp)
    5a94:	dc000015 	stw	r16,0(sp)
    5a98:	2025883a 	mov	r18,r4
    5a9c:	282f883a 	mov	r23,r5
    5aa0:	3027883a 	mov	r19,r6
    5aa4:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5aa8:	0180220e 	bge	zero,r6,5b34 <altera_avalon_jtag_uart_read+0xc8>
    5aac:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    5ab0:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    5ab4:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    5ab8:	b4400236 	bltu	r22,r17,5ac4 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    5abc:	b461c83a 	sub	r16,r22,r17
    5ac0:	00000206 	br	5acc <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    5ac4:	00820004 	movi	r2,2048
    5ac8:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    5acc:	80000d26 	beq	r16,zero,5b04 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    5ad0:	9829883a 	mov	r20,r19
    5ad4:	9c001d36 	bltu	r19,r16,5b4c <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    5ad8:	91400e04 	addi	r5,r18,56
    5adc:	a809883a 	mov	r4,r21
    5ae0:	2c4b883a 	add	r5,r5,r17
    5ae4:	800d883a 	mov	r6,r16
    5ae8:	0007acc0 	call	7acc <memcpy>
      ptr   += n;
    5aec:	ac2b883a 	add	r21,r21,r16
      space -= n;
    5af0:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5af4:	8445883a 	add	r2,r16,r17
    5af8:	1081ffcc 	andi	r2,r2,2047
    5afc:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    5b00:	04ffeb16 	blt	zero,r19,5ab0 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    5b04:	adc01c1e 	bne	r21,r23,5b78 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    5b08:	e090000c 	andi	r2,fp,16384
    5b0c:	10000d1e 	bne	r2,zero,5b44 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    5b10:	90800a17 	ldw	r2,40(r18)
    5b14:	b080031e 	bne	r22,r2,5b24 <altera_avalon_jtag_uart_read+0xb8>
    5b18:	90c00917 	ldw	r3,36(r18)
    5b1c:	90800117 	ldw	r2,4(r18)
    5b20:	18bffb36 	bltu	r3,r2,5b10 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    5b24:	90800a17 	ldw	r2,40(r18)
    5b28:	b0800426 	beq	r22,r2,5b3c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5b2c:	04c0030e 	bge	zero,r19,5b3c <altera_avalon_jtag_uart_read+0xd0>
    5b30:	003fde06 	br	5aac <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    5b34:	3890000c 	andi	r2,r7,16384
    5b38:	1000021e 	bne	r2,zero,5b44 <altera_avalon_jtag_uart_read+0xd8>
    5b3c:	00bffec4 	movi	r2,-5
    5b40:	00001806 	br	5ba4 <altera_avalon_jtag_uart_read+0x138>
    5b44:	00bffd44 	movi	r2,-11
    5b48:	00001606 	br	5ba4 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    5b4c:	91400e04 	addi	r5,r18,56
    5b50:	a809883a 	mov	r4,r21
    5b54:	894b883a 	add	r5,r17,r5
    5b58:	980d883a 	mov	r6,r19
    5b5c:	0007acc0 	call	7acc <memcpy>
      ptr   += n;
    5b60:	aceb883a 	add	r21,r21,r19
      space -= n;
    5b64:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5b68:	a445883a 	add	r2,r20,r17
    5b6c:	1081ffcc 	andi	r2,r2,2047
    5b70:	90800b15 	stw	r2,44(r18)
    5b74:	003fe306 	br	5b04 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b78:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b7c:	00bfff84 	movi	r2,-2
    5b80:	2084703a 	and	r2,r4,r2
    5b84:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    5b88:	90800817 	ldw	r2,32(r18)
    5b8c:	10800054 	ori	r2,r2,1
    5b90:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5b94:	90c00017 	ldw	r3,0(r18)
    5b98:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b9c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    5ba0:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    5ba4:	dfc00917 	ldw	ra,36(sp)
    5ba8:	df000817 	ldw	fp,32(sp)
    5bac:	ddc00717 	ldw	r23,28(sp)
    5bb0:	dd800617 	ldw	r22,24(sp)
    5bb4:	dd400517 	ldw	r21,20(sp)
    5bb8:	dd000417 	ldw	r20,16(sp)
    5bbc:	dcc00317 	ldw	r19,12(sp)
    5bc0:	dc800217 	ldw	r18,8(sp)
    5bc4:	dc400117 	ldw	r17,4(sp)
    5bc8:	dc000017 	ldw	r16,0(sp)
    5bcc:	dec00a04 	addi	sp,sp,40
    5bd0:	f800283a 	ret

00005bd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5bd4:	defff804 	addi	sp,sp,-32
    5bd8:	dfc00715 	stw	ra,28(sp)
    5bdc:	dd800615 	stw	r22,24(sp)
    5be0:	dd400515 	stw	r21,20(sp)
    5be4:	dd000415 	stw	r20,16(sp)
    5be8:	dcc00315 	stw	r19,12(sp)
    5bec:	dc800215 	stw	r18,8(sp)
    5bf0:	dc400115 	stw	r17,4(sp)
    5bf4:	dc000015 	stw	r16,0(sp)
    5bf8:	2021883a 	mov	r16,r4
    5bfc:	282d883a 	mov	r22,r5
    5c00:	3011883a 	mov	r8,r6
    5c04:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5c08:	01800616 	blt	zero,r6,5c24 <altera_avalon_jtag_uart_write+0x50>
    5c0c:	2829883a 	mov	r20,r5
    5c10:	00002106 	br	5c98 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    5c14:	a585c83a 	sub	r2,r20,r22
    5c18:	00004306 	br	5d28 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    5c1c:	00bffd44 	movi	r2,-11
    5c20:	00004106 	br	5d28 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5c24:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    5c28:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    5c2c:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    5c30:	9140032e 	bgeu	r18,r5,5c40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    5c34:	2c85c83a 	sub	r2,r5,r18
    5c38:	11bfffc4 	addi	r6,r2,-1
    5c3c:	00000606 	br	5c58 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    5c40:	28000326 	beq	r5,zero,5c50 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    5c44:	00820004 	movi	r2,2048
    5c48:	148dc83a 	sub	r6,r2,r18
    5c4c:	00000206 	br	5c58 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    5c50:	0081ffc4 	movi	r2,2047
    5c54:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    5c58:	30002626 	beq	r6,zero,5cf4 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    5c5c:	4027883a 	mov	r19,r8
    5c60:	3023883a 	mov	r17,r6
    5c64:	4180012e 	bgeu	r8,r6,5c6c <altera_avalon_jtag_uart_write+0x98>
    5c68:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    5c6c:	81020e04 	addi	r4,r16,2104
    5c70:	2489883a 	add	r4,r4,r18
    5c74:	a00b883a 	mov	r5,r20
    5c78:	880d883a 	mov	r6,r17
    5c7c:	0007acc0 	call	7acc <memcpy>
      ptr   += n;
    5c80:	a469883a 	add	r20,r20,r17
      count -= n;
    5c84:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5c88:	9445883a 	add	r2,r18,r17
    5c8c:	1081ffcc 	andi	r2,r2,2047
    5c90:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5c94:	023fe416 	blt	zero,r8,5c28 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c98:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c9c:	00bfff84 	movi	r2,-2
    5ca0:	2084703a 	and	r2,r4,r2
    5ca4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5ca8:	80800817 	ldw	r2,32(r16)
    5cac:	10800094 	ori	r2,r2,2
    5cb0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5cb4:	80c00017 	ldw	r3,0(r16)
    5cb8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cbc:	2001703a 	wrctl	status,r4
    5cc0:	00000706 	br	5ce0 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    5cc4:	80800d17 	ldw	r2,52(r16)
    5cc8:	1140031e 	bne	r2,r5,5cd8 <altera_avalon_jtag_uart_write+0x104>
    5ccc:	80c00917 	ldw	r3,36(r16)
    5cd0:	80800117 	ldw	r2,4(r16)
    5cd4:	18bffb36 	bltu	r3,r2,5cc4 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    5cd8:	80800d17 	ldw	r2,52(r16)
    5cdc:	117fed1e 	bne	r2,r5,5c94 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5ce0:	b53fcc1e 	bne	r22,r20,5c14 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    5ce4:	a890000c 	andi	r2,r21,16384
    5ce8:	103fcc1e 	bne	r2,zero,5c1c <altera_avalon_jtag_uart_write+0x48>
    5cec:	00bffec4 	movi	r2,-5
    5cf0:	00000d06 	br	5d28 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cf4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cf8:	00bfff84 	movi	r2,-2
    5cfc:	2084703a 	and	r2,r4,r2
    5d00:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5d04:	80800817 	ldw	r2,32(r16)
    5d08:	10800094 	ori	r2,r2,2
    5d0c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5d10:	80c00017 	ldw	r3,0(r16)
    5d14:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d18:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    5d1c:	a890000c 	andi	r2,r21,16384
    5d20:	103fe826 	beq	r2,zero,5cc4 <altera_avalon_jtag_uart_write+0xf0>
    5d24:	003fee06 	br	5ce0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    5d28:	dfc00717 	ldw	ra,28(sp)
    5d2c:	dd800617 	ldw	r22,24(sp)
    5d30:	dd400517 	ldw	r21,20(sp)
    5d34:	dd000417 	ldw	r20,16(sp)
    5d38:	dcc00317 	ldw	r19,12(sp)
    5d3c:	dc800217 	ldw	r18,8(sp)
    5d40:	dc400117 	ldw	r17,4(sp)
    5d44:	dc000017 	ldw	r16,0(sp)
    5d48:	dec00804 	addi	sp,sp,32
    5d4c:	f800283a 	ret

00005d50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    5d50:	deffff04 	addi	sp,sp,-4
    5d54:	dfc00015 	stw	ra,0(sp)
    5d58:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    5d5c:	00c000b4 	movhi	r3,2
    5d60:	18fb2004 	addi	r3,r3,-4992
    5d64:	18800017 	ldw	r2,0(r3)
    5d68:	1000011e 	bne	r2,zero,5d70 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    5d6c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5d70:	008001c4 	movi	r2,7
    5d74:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    5d78:	3009883a 	mov	r4,r6
    5d7c:	01800034 	movhi	r6,0
    5d80:	31976504 	addi	r6,r6,23956
    5d84:	00075780 	call	7578 <alt_irq_register>
#endif  
}
    5d88:	dfc00017 	ldw	ra,0(sp)
    5d8c:	dec00104 	addi	sp,sp,4
    5d90:	f800283a 	ret

00005d94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5d94:	defffe04 	addi	sp,sp,-8
    5d98:	dfc00115 	stw	ra,4(sp)
    5d9c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5da0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5da4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5da8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5dac:	00bfff84 	movi	r2,-2
    5db0:	8084703a 	and	r2,r16,r2
    5db4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    5db8:	00078080 	call	7808 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5dbc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    5dc0:	dfc00117 	ldw	ra,4(sp)
    5dc4:	dc000017 	ldw	r16,0(sp)
    5dc8:	dec00204 	addi	sp,sp,8
    5dcc:	f800283a 	ret

00005dd0 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    5dd0:	2800021e 	bne	r5,zero,5ddc <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    5dd4:	2005883a 	mov	r2,r4
    5dd8:	00000106 	br	5de0 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    5ddc:	20801014 	ori	r2,r4,64
    5de0:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    5de4:	10802014 	ori	r2,r2,128
    5de8:	f800283a 	ret

00005dec <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5dec:	28c00003 	ldbu	r3,0(r5)
    5df0:	18803fcc 	andi	r2,r3,255
    5df4:	1080201c 	xori	r2,r2,128
    5df8:	10bfe004 	addi	r2,r2,-128
    5dfc:	10000d26 	beq	r2,zero,5e34 <alt_up_character_lcd_string+0x48>
    5e00:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    5e04:	20800a17 	ldw	r2,40(r4)
    5e08:	1185883a 	add	r2,r2,r6
    5e0c:	18c03fcc 	andi	r3,r3,255
    5e10:	18c0201c 	xori	r3,r3,128
    5e14:	18ffe004 	addi	r3,r3,-128
    5e18:	10c00025 	stbio	r3,0(r2)
		++ptr;
    5e1c:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5e20:	28c00003 	ldbu	r3,0(r5)
    5e24:	18803fcc 	andi	r2,r3,255
    5e28:	1080201c 	xori	r2,r2,128
    5e2c:	10bfe004 	addi	r2,r2,-128
    5e30:	103ff41e 	bne	r2,zero,5e04 <alt_up_character_lcd_string+0x18>
    5e34:	f800283a 	ret

00005e38 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    5e38:	30000926 	beq	r6,zero,5e60 <alt_up_character_lcd_write+0x28>
    5e3c:	000f883a 	mov	r7,zero
    5e40:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    5e44:	20800a17 	ldw	r2,40(r4)
    5e48:	1205883a 	add	r2,r2,r8
    5e4c:	3947883a 	add	r3,r7,r5
    5e50:	18c00007 	ldb	r3,0(r3)
    5e54:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    5e58:	3a0f883a 	add	r7,r7,r8
    5e5c:	31fff91e 	bne	r6,r7,5e44 <alt_up_character_lcd_write+0xc>
    5e60:	f800283a 	ret

00005e64 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    5e64:	deffff04 	addi	sp,sp,-4
    5e68:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    5e6c:	21000017 	ldw	r4,0(r4)
    5e70:	0005e380 	call	5e38 <alt_up_character_lcd_write>
	return 0;
}
    5e74:	0005883a 	mov	r2,zero
    5e78:	dfc00017 	ldw	ra,0(sp)
    5e7c:	dec00104 	addi	sp,sp,4
    5e80:	f800283a 	ret

00005e84 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    5e84:	20c00a17 	ldw	r3,40(r4)
    5e88:	00800044 	movi	r2,1
    5e8c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    5e90:	f800283a 	ret

00005e94 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    5e94:	20800a17 	ldw	r2,40(r4)
    5e98:	29403fcc 	andi	r5,r5,255
    5e9c:	11400025 	stbio	r5,0(r2)
}
    5ea0:	f800283a 	ret

00005ea4 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    5ea4:	deffff04 	addi	sp,sp,-4
    5ea8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    5eac:	014003c4 	movi	r5,15
    5eb0:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
}
    5eb4:	dfc00017 	ldw	ra,0(sp)
    5eb8:	dec00104 	addi	sp,sp,4
    5ebc:	f800283a 	ret

00005ec0 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    5ec0:	deffff04 	addi	sp,sp,-4
    5ec4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    5ec8:	01400304 	movi	r5,12
    5ecc:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
}
    5ed0:	dfc00017 	ldw	ra,0(sp)
    5ed4:	dec00104 	addi	sp,sp,4
    5ed8:	f800283a 	ret

00005edc <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    5edc:	defffd04 	addi	sp,sp,-12
    5ee0:	dfc00215 	stw	ra,8(sp)
    5ee4:	dc400115 	stw	r17,4(sp)
    5ee8:	dc000015 	stw	r16,0(sp)
    5eec:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    5ef0:	008009c4 	movi	r2,39
    5ef4:	11400e36 	bltu	r2,r5,5f30 <alt_up_character_lcd_erase_pos+0x54>
    5ef8:	04400044 	movi	r17,1
    5efc:	89800c36 	bltu	r17,r6,5f30 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5f00:	2809883a 	mov	r4,r5
    5f04:	300b883a 	mov	r5,r6
    5f08:	0005dd00 	call	5dd0 <get_DDRAM_addr>
    5f0c:	8009883a 	mov	r4,r16
    5f10:	11403fcc 	andi	r5,r2,255
    5f14:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    5f18:	80800a17 	ldw	r2,40(r16)
    5f1c:	1445883a 	add	r2,r2,r17
    5f20:	00c00084 	movi	r3,2
    5f24:	10c00025 	stbio	r3,0(r2)
    5f28:	0005883a 	mov	r2,zero
    5f2c:	00000106 	br	5f34 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    5f30:	00bfffc4 	movi	r2,-1
}
    5f34:	dfc00217 	ldw	ra,8(sp)
    5f38:	dc400117 	ldw	r17,4(sp)
    5f3c:	dc000017 	ldw	r16,0(sp)
    5f40:	dec00304 	addi	sp,sp,12
    5f44:	f800283a 	ret

00005f48 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5f48:	defffa04 	addi	sp,sp,-24
    5f4c:	dfc00515 	stw	ra,20(sp)
    5f50:	dd000415 	stw	r20,16(sp)
    5f54:	dcc00315 	stw	r19,12(sp)
    5f58:	dc800215 	stw	r18,8(sp)
    5f5c:	dc400115 	stw	r17,4(sp)
    5f60:	dc000015 	stw	r16,0(sp)
    5f64:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    5f68:	28001326 	beq	r5,zero,5fb8 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    5f6c:	0140020e 	bge	zero,r5,5f78 <alt_up_character_lcd_shift_display+0x30>
    5f70:	05000704 	movi	r20,28
    5f74:	00000106 	br	5f7c <alt_up_character_lcd_shift_display+0x34>
    5f78:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    5f7c:	2800010e 	bge	r5,zero,5f84 <alt_up_character_lcd_shift_display+0x3c>
    5f80:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    5f84:	00bfffc4 	movi	r2,-1
    5f88:	28a1883a 	add	r16,r5,r2
    5f8c:	80c03fcc 	andi	r3,r16,255
    5f90:	10803fcc 	andi	r2,r2,255
    5f94:	18800826 	beq	r3,r2,5fb8 <alt_up_character_lcd_shift_display+0x70>
    5f98:	04bfffc4 	movi	r18,-1
    5f9c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5fa0:	9809883a 	mov	r4,r19
    5fa4:	a1403fcc 	andi	r5,r20,255
    5fa8:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5fac:	84a1883a 	add	r16,r16,r18
    5fb0:	80803fcc 	andi	r2,r16,255
    5fb4:	147ffa1e 	bne	r2,r17,5fa0 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    5fb8:	dfc00517 	ldw	ra,20(sp)
    5fbc:	dd000417 	ldw	r20,16(sp)
    5fc0:	dcc00317 	ldw	r19,12(sp)
    5fc4:	dc800217 	ldw	r18,8(sp)
    5fc8:	dc400117 	ldw	r17,4(sp)
    5fcc:	dc000017 	ldw	r16,0(sp)
    5fd0:	dec00604 	addi	sp,sp,24
    5fd4:	f800283a 	ret

00005fd8 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5fd8:	defffa04 	addi	sp,sp,-24
    5fdc:	dfc00515 	stw	ra,20(sp)
    5fe0:	dd000415 	stw	r20,16(sp)
    5fe4:	dcc00315 	stw	r19,12(sp)
    5fe8:	dc800215 	stw	r18,8(sp)
    5fec:	dc400115 	stw	r17,4(sp)
    5ff0:	dc000015 	stw	r16,0(sp)
    5ff4:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    5ff8:	28001326 	beq	r5,zero,6048 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    5ffc:	0140020e 	bge	zero,r5,6008 <alt_up_character_lcd_shift_cursor+0x30>
    6000:	05000504 	movi	r20,20
    6004:	00000106 	br	600c <alt_up_character_lcd_shift_cursor+0x34>
    6008:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    600c:	2800010e 	bge	r5,zero,6014 <alt_up_character_lcd_shift_cursor+0x3c>
    6010:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    6014:	00bfffc4 	movi	r2,-1
    6018:	28a1883a 	add	r16,r5,r2
    601c:	80c03fcc 	andi	r3,r16,255
    6020:	10803fcc 	andi	r2,r2,255
    6024:	18800826 	beq	r3,r2,6048 <alt_up_character_lcd_shift_cursor+0x70>
    6028:	04bfffc4 	movi	r18,-1
    602c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    6030:	9809883a 	mov	r4,r19
    6034:	a1403fcc 	andi	r5,r20,255
    6038:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    603c:	84a1883a 	add	r16,r16,r18
    6040:	80803fcc 	andi	r2,r16,255
    6044:	147ffa1e 	bne	r2,r17,6030 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    6048:	dfc00517 	ldw	ra,20(sp)
    604c:	dd000417 	ldw	r20,16(sp)
    6050:	dcc00317 	ldw	r19,12(sp)
    6054:	dc800217 	ldw	r18,8(sp)
    6058:	dc400117 	ldw	r17,4(sp)
    605c:	dc000017 	ldw	r16,0(sp)
    6060:	dec00604 	addi	sp,sp,24
    6064:	f800283a 	ret

00006068 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    6068:	defffe04 	addi	sp,sp,-8
    606c:	dfc00115 	stw	ra,4(sp)
    6070:	dc000015 	stw	r16,0(sp)
    6074:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    6078:	008009c4 	movi	r2,39
    607c:	11400a36 	bltu	r2,r5,60a8 <alt_up_character_lcd_set_cursor_pos+0x40>
    6080:	00800044 	movi	r2,1
    6084:	11800836 	bltu	r2,r6,60a8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    6088:	2809883a 	mov	r4,r5
    608c:	300b883a 	mov	r5,r6
    6090:	0005dd00 	call	5dd0 <get_DDRAM_addr>
    6094:	8009883a 	mov	r4,r16
    6098:	11403fcc 	andi	r5,r2,255
    609c:	0005e940 	call	5e94 <alt_up_character_lcd_send_cmd>
    60a0:	0005883a 	mov	r2,zero
    60a4:	00000106 	br	60ac <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    60a8:	00bfffc4 	movi	r2,-1
}
    60ac:	dfc00117 	ldw	ra,4(sp)
    60b0:	dc000017 	ldw	r16,0(sp)
    60b4:	dec00204 	addi	sp,sp,8
    60b8:	f800283a 	ret

000060bc <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    60bc:	deffff04 	addi	sp,sp,-4
    60c0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    60c4:	01400074 	movhi	r5,1
    60c8:	29523704 	addi	r5,r5,18652
    60cc:	00073ec0 	call	73ec <alt_find_dev>

  return dev;
}
    60d0:	dfc00017 	ldw	ra,0(sp)
    60d4:	dec00104 	addi	sp,sp,4
    60d8:	f800283a 	ret

000060dc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    60dc:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    60e0:	1004c03a 	cmpne	r2,r2,zero
    60e4:	f800283a 	ret

000060e8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    60e8:	2080004c 	andi	r2,r4,1
    60ec:	f800283a 	ret

000060f0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    60f0:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    60f4:	1004c03a 	cmpne	r2,r2,zero
    60f8:	f800283a 	ret

000060fc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    60fc:	2004d43a 	srli	r2,r4,16
    6100:	f800283a 	ret

00006104 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    6104:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    6108:	1004c03a 	cmpne	r2,r2,zero
    610c:	f800283a 	ret

00006110 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    6110:	20803fcc 	andi	r2,r4,255
    6114:	f800283a 	ret

00006118 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    6118:	deffff04 	addi	sp,sp,-4
    611c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    6120:	01400074 	movhi	r5,1
    6124:	29523704 	addi	r5,r5,18652
    6128:	00073ec0 	call	73ec <alt_find_dev>

  return dev;
}
    612c:	dfc00017 	ldw	ra,0(sp)
    6130:	dec00104 	addi	sp,sp,4
    6134:	f800283a 	ret

00006138 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    6138:	defffe04 	addi	sp,sp,-8
    613c:	dfc00115 	stw	ra,4(sp)
    6140:	dc000015 	stw	r16,0(sp)
    6144:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    6148:	81000037 	ldwio	r4,0(r16)
    614c:	00060fc0 	call	60fc <read_num_bytes_available>
    6150:	10bfffcc 	andi	r2,r2,65535
    6154:	103ffc1e 	bne	r2,zero,6148 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    6158:	dfc00117 	ldw	ra,4(sp)
    615c:	dc000017 	ldw	r16,0(sp)
    6160:	dec00204 	addi	sp,sp,8
    6164:	f800283a 	ret

00006168 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    6168:	defffd04 	addi	sp,sp,-12
    616c:	dfc00215 	stw	ra,8(sp)
    6170:	dc400115 	stw	r17,4(sp)
    6174:	dc000015 	stw	r16,0(sp)
    6178:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    617c:	20800a17 	ldw	r2,40(r4)
    6180:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    6184:	8009883a 	mov	r4,r16
    6188:	00061040 	call	6104 <read_data_valid>
    618c:	10803fcc 	andi	r2,r2,255
    6190:	1000021e 	bne	r2,zero,619c <alt_up_ps2_read_data_byte+0x34>
    6194:	00bfffc4 	movi	r2,-1
    6198:	00000406 	br	61ac <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    619c:	8009883a 	mov	r4,r16
    61a0:	00061100 	call	6110 <read_data_byte>
    61a4:	88800005 	stb	r2,0(r17)
    61a8:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    61ac:	dfc00217 	ldw	ra,8(sp)
    61b0:	dc400117 	ldw	r17,4(sp)
    61b4:	dc000017 	ldw	r16,0(sp)
    61b8:	dec00304 	addi	sp,sp,12
    61bc:	f800283a 	ret

000061c0 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    61c0:	defffb04 	addi	sp,sp,-20
    61c4:	dfc00415 	stw	ra,16(sp)
    61c8:	dcc00315 	stw	r19,12(sp)
    61cc:	dc800215 	stw	r18,8(sp)
    61d0:	dc400115 	stw	r17,4(sp)
    61d4:	dc000015 	stw	r16,0(sp)
    61d8:	2025883a 	mov	r18,r4
    61dc:	2827883a 	mov	r19,r5
    61e0:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    61e4:	90800a17 	ldw	r2,40(r18)
    61e8:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    61ec:	8009883a 	mov	r4,r16
    61f0:	00061040 	call	6104 <read_data_valid>
    61f4:	10803fcc 	andi	r2,r2,255
    61f8:	10000526 	beq	r2,zero,6210 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    61fc:	8009883a 	mov	r4,r16
    6200:	00061100 	call	6110 <read_data_byte>
    6204:	98800005 	stb	r2,0(r19)
    6208:	0005883a 	mov	r2,zero
    620c:	00000506 	br	6224 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    6210:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    6214:	90800c17 	ldw	r2,48(r18)
    6218:	103ff226 	beq	r2,zero,61e4 <alt_up_ps2_read_data_byte_timeout+0x24>
    621c:	147ff12e 	bgeu	r2,r17,61e4 <alt_up_ps2_read_data_byte_timeout+0x24>
    6220:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    6224:	dfc00417 	ldw	ra,16(sp)
    6228:	dcc00317 	ldw	r19,12(sp)
    622c:	dc800217 	ldw	r18,8(sp)
    6230:	dc400117 	ldw	r17,4(sp)
    6234:	dc000017 	ldw	r16,0(sp)
    6238:	dec00504 	addi	sp,sp,20
    623c:	f800283a 	ret

00006240 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    6240:	deffff04 	addi	sp,sp,-4
    6244:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    6248:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    624c:	0180010e 	bge	zero,r6,6254 <alt_up_ps2_read_fd+0x14>
    6250:	003fff06 	br	6250 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    6254:	00061c00 	call	61c0 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    6258:	1005003a 	cmpeq	r2,r2,zero
    625c:	dfc00017 	ldw	ra,0(sp)
    6260:	dec00104 	addi	sp,sp,4
    6264:	f800283a 	ret

00006268 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    6268:	defffc04 	addi	sp,sp,-16
    626c:	dfc00315 	stw	ra,12(sp)
    6270:	dc400215 	stw	r17,8(sp)
    6274:	dc000115 	stw	r16,4(sp)
    6278:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    627c:	d8000005 	stb	zero,0(sp)
    6280:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    6284:	8009883a 	mov	r4,r16
    6288:	d80b883a 	mov	r5,sp
    628c:	00061c00 	call	61c0 <alt_up_ps2_read_data_byte_timeout>
    6290:	1007883a 	mov	r3,r2
		if ( status == 0)
    6294:	10803fcc 	andi	r2,r2,255
    6298:	1000041e 	bne	r2,zero,62ac <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    629c:	d8800003 	ldbu	r2,0(sp)
    62a0:	147ff81e 	bne	r2,r17,6284 <alt_up_ps2_wait_for_ack+0x1c>
    62a4:	0005883a 	mov	r2,zero
    62a8:	00000106 	br	62b0 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    62ac:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    62b0:	dfc00317 	ldw	ra,12(sp)
    62b4:	dc400217 	ldw	r17,8(sp)
    62b8:	dc000117 	ldw	r16,4(sp)
    62bc:	dec00404 	addi	sp,sp,16
    62c0:	f800283a 	ret

000062c4 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    62c4:	deffff04 	addi	sp,sp,-4
    62c8:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    62cc:	20800a17 	ldw	r2,40(r4)
    62d0:	29403fcc 	andi	r5,r5,255
    62d4:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    62d8:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    62dc:	11000137 	ldwio	r4,4(r2)
    62e0:	00060f00 	call	60f0 <read_CE_bit>
    62e4:	10803fcc 	andi	r2,r2,255
    62e8:	10000226 	beq	r2,zero,62f4 <alt_up_ps2_write_data_byte+0x30>
    62ec:	00bffec4 	movi	r2,-5
    62f0:	00000106 	br	62f8 <alt_up_ps2_write_data_byte+0x34>
    62f4:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    62f8:	dfc00017 	ldw	ra,0(sp)
    62fc:	dec00104 	addi	sp,sp,4
    6300:	f800283a 	ret

00006304 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    6304:	defffb04 	addi	sp,sp,-20
    6308:	dfc00415 	stw	ra,16(sp)
    630c:	dcc00315 	stw	r19,12(sp)
    6310:	dc800215 	stw	r18,8(sp)
    6314:	dc400115 	stw	r17,4(sp)
    6318:	dc000015 	stw	r16,0(sp)
    631c:	2827883a 	mov	r19,r5
    6320:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    6324:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    6328:	01800216 	blt	zero,r6,6334 <alt_up_ps2_write_fd+0x30>
    632c:	0021883a 	mov	r16,zero
    6330:	00000806 	br	6354 <alt_up_ps2_write_fd+0x50>
    6334:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    6338:	9c05883a 	add	r2,r19,r16
    633c:	8809883a 	mov	r4,r17
    6340:	11400003 	ldbu	r5,0(r2)
    6344:	00062c40 	call	62c4 <alt_up_ps2_write_data_byte>
		if (status!=0)
    6348:	1000021e 	bne	r2,zero,6354 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    634c:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    6350:	943ff91e 	bne	r18,r16,6338 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    6354:	8005883a 	mov	r2,r16
    6358:	dfc00417 	ldw	ra,16(sp)
    635c:	dcc00317 	ldw	r19,12(sp)
    6360:	dc800217 	ldw	r18,8(sp)
    6364:	dc400117 	ldw	r17,4(sp)
    6368:	dc000017 	ldw	r16,0(sp)
    636c:	dec00504 	addi	sp,sp,20
    6370:	f800283a 	ret

00006374 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    6374:	defffe04 	addi	sp,sp,-8
    6378:	dfc00115 	stw	ra,4(sp)
    637c:	dc000015 	stw	r16,0(sp)
    6380:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    6384:	29403fcc 	andi	r5,r5,255
    6388:	00062c40 	call	62c4 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    638c:	1000021e 	bne	r2,zero,6398 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    6390:	8009883a 	mov	r4,r16
    6394:	00062680 	call	6268 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    6398:	dfc00117 	ldw	ra,4(sp)
    639c:	dc000017 	ldw	r16,0(sp)
    63a0:	dec00204 	addi	sp,sp,8
    63a4:	f800283a 	ret

000063a8 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    63a8:	defffd04 	addi	sp,sp,-12
    63ac:	dfc00215 	stw	ra,8(sp)
    63b0:	dc000115 	stw	r16,4(sp)
    63b4:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    63b8:	01403fc4 	movi	r5,255
    63bc:	00063740 	call	6374 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    63c0:	1000171e 	bne	r2,zero,6420 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    63c4:	8009883a 	mov	r4,r16
    63c8:	d80b883a 	mov	r5,sp
    63cc:	00061c00 	call	61c0 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    63d0:	1000131e 	bne	r2,zero,6420 <alt_up_ps2_init+0x78>
    63d4:	d8c00003 	ldbu	r3,0(sp)
    63d8:	00802a84 	movi	r2,170
    63dc:	1880101e 	bne	r3,r2,6420 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    63e0:	8009883a 	mov	r4,r16
    63e4:	d80b883a 	mov	r5,sp
    63e8:	00061c00 	call	61c0 <alt_up_ps2_read_data_byte_timeout>
    63ec:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    63f0:	00bfe304 	movi	r2,-116
    63f4:	1880031e 	bne	r3,r2,6404 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    63f8:	00800044 	movi	r2,1
    63fc:	80800d15 	stw	r2,52(r16)
    6400:	00000706 	br	6420 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    6404:	1800061e 	bne	r3,zero,6420 <alt_up_ps2_init+0x78>
    6408:	d8800003 	ldbu	r2,0(sp)
    640c:	1000041e 	bne	r2,zero,6420 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    6410:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    6414:	8009883a 	mov	r4,r16
    6418:	01403d04 	movi	r5,244
    641c:	00062c40 	call	62c4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    6420:	dfc00217 	ldw	ra,8(sp)
    6424:	dc000117 	ldw	r16,4(sp)
    6428:	dec00304 	addi	sp,sp,12
    642c:	f800283a 	ret

00006430 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    6430:	20800a17 	ldw	r2,40(r4)
    6434:	10800104 	addi	r2,r2,4
    6438:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    643c:	013fff84 	movi	r4,-2
    6440:	1906703a 	and	r3,r3,r4
    6444:	10c00035 	stwio	r3,0(r2)
}
    6448:	f800283a 	ret

0000644c <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    644c:	20c00a17 	ldw	r3,40(r4)
    6450:	18c00104 	addi	r3,r3,4
    6454:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    6458:	10800054 	ori	r2,r2,1
    645c:	18800035 	stwio	r2,0(r3)
}
    6460:	f800283a 	ret

00006464 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    6464:	200495ba 	slli	r2,r4,22
}
    6468:	1005d7fa 	srai	r2,r2,31
    646c:	f800283a 	ret

00006470 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    6470:	deffff04 	addi	sp,sp,-4
    6474:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    6478:	01400074 	movhi	r5,1
    647c:	29523704 	addi	r5,r5,18652
    6480:	00073ec0 	call	73ec <alt_find_dev>

  return dev;
}
    6484:	dfc00017 	ldw	ra,0(sp)
    6488:	dec00104 	addi	sp,sp,4
    648c:	f800283a 	ret

00006490 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    6490:	defffd04 	addi	sp,sp,-12
    6494:	dfc00215 	stw	ra,8(sp)
    6498:	dc400115 	stw	r17,4(sp)
    649c:	dc000015 	stw	r16,0(sp)
    64a0:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    64a4:	20800a17 	ldw	r2,40(r4)
    64a8:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    64ac:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    64b0:	8009883a 	mov	r4,r16
    64b4:	00064640 	call	6464 <alt_up_rs232_check_parity>
    64b8:	88800005 	stb	r2,0(r17)
    64bc:	8420000c 	andi	r16,r16,32768
    64c0:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    64c4:	80bfffc4 	addi	r2,r16,-1
    64c8:	dfc00217 	ldw	ra,8(sp)
    64cc:	dc400117 	ldw	r17,4(sp)
    64d0:	dc000017 	ldw	r16,0(sp)
    64d4:	dec00304 	addi	sp,sp,12
    64d8:	f800283a 	ret

000064dc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    64dc:	defff904 	addi	sp,sp,-28
    64e0:	dfc00615 	stw	ra,24(sp)
    64e4:	dd000515 	stw	r20,20(sp)
    64e8:	dcc00415 	stw	r19,16(sp)
    64ec:	dc800315 	stw	r18,12(sp)
    64f0:	dc400215 	stw	r17,8(sp)
    64f4:	dc000115 	stw	r16,4(sp)
    64f8:	2821883a 	mov	r16,r5
    64fc:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    6500:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    6504:	3000021e 	bne	r6,zero,6510 <alt_up_rs232_read_fd+0x34>
    6508:	0025883a 	mov	r18,zero
    650c:	00000a06 	br	6538 <alt_up_rs232_read_fd+0x5c>
    6510:	0025883a 	mov	r18,zero
    6514:	04400044 	movi	r17,1
    6518:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    651c:	8461883a 	add	r16,r16,r17
    6520:	9809883a 	mov	r4,r19
    6524:	d80d883a 	mov	r6,sp
    6528:	00064900 	call	6490 <alt_up_rs232_read_data>
    652c:	1000021e 	bne	r2,zero,6538 <alt_up_rs232_read_fd+0x5c>
			count++;
    6530:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    6534:	a4bff81e 	bne	r20,r18,6518 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    6538:	9005883a 	mov	r2,r18
    653c:	dfc00617 	ldw	ra,24(sp)
    6540:	dd000517 	ldw	r20,20(sp)
    6544:	dcc00417 	ldw	r19,16(sp)
    6548:	dc800317 	ldw	r18,12(sp)
    654c:	dc400217 	ldw	r17,8(sp)
    6550:	dc000117 	ldw	r16,4(sp)
    6554:	dec00704 	addi	sp,sp,28
    6558:	f800283a 	ret

0000655c <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    655c:	20800a17 	ldw	r2,40(r4)
    6560:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    6564:	1004d43a 	srli	r2,r2,16
    6568:	f800283a 	ret

0000656c <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    656c:	20800a17 	ldw	r2,40(r4)
    6570:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    6574:	29403fcc 	andi	r5,r5,255
    6578:	11400035 	stwio	r5,0(r2)
	return 0;
}
    657c:	0005883a 	mov	r2,zero
    6580:	f800283a 	ret

00006584 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    6584:	defffb04 	addi	sp,sp,-20
    6588:	dfc00415 	stw	ra,16(sp)
    658c:	dcc00315 	stw	r19,12(sp)
    6590:	dc800215 	stw	r18,8(sp)
    6594:	dc400115 	stw	r17,4(sp)
    6598:	dc000015 	stw	r16,0(sp)
    659c:	2827883a 	mov	r19,r5
    65a0:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    65a4:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    65a8:	3000021e 	bne	r6,zero,65b4 <alt_up_rs232_write_fd+0x30>
    65ac:	0021883a 	mov	r16,zero
    65b0:	00000806 	br	65d4 <alt_up_rs232_write_fd+0x50>
    65b4:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    65b8:	84c5883a 	add	r2,r16,r19
    65bc:	8809883a 	mov	r4,r17
    65c0:	11400003 	ldbu	r5,0(r2)
    65c4:	000656c0 	call	656c <alt_up_rs232_write_data>
    65c8:	1000021e 	bne	r2,zero,65d4 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    65cc:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    65d0:	943ff91e 	bne	r18,r16,65b8 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    65d4:	8005883a 	mov	r2,r16
    65d8:	dfc00417 	ldw	ra,16(sp)
    65dc:	dcc00317 	ldw	r19,12(sp)
    65e0:	dc800217 	ldw	r18,8(sp)
    65e4:	dc400117 	ldw	r17,4(sp)
    65e8:	dc000017 	ldw	r16,0(sp)
    65ec:	dec00504 	addi	sp,sp,20
    65f0:	f800283a 	ret

000065f4 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    65f4:	20800a17 	ldw	r2,40(r4)
    65f8:	10800104 	addi	r2,r2,4
    65fc:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    6600:	013fff84 	movi	r4,-2
    6604:	1906703a 	and	r3,r3,r4
    6608:	10c00035 	stwio	r3,0(r2)
}
    660c:	f800283a 	ret

00006610 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    6610:	20c00a17 	ldw	r3,40(r4)
    6614:	18c00104 	addi	r3,r3,4
    6618:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    661c:	10800054 	ori	r2,r2,1
    6620:	18800035 	stwio	r2,0(r3)
}
    6624:	f800283a 	ret

00006628 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    6628:	20800a17 	ldw	r2,40(r4)
    662c:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    6630:	10bfffcc 	andi	r2,r2,65535
    6634:	f800283a 	ret

00006638 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    6638:	20800c17 	ldw	r2,48(r4)
    663c:	30801c2e 	bgeu	r6,r2,66b0 <alt_up_char_buffer_string+0x78>
    6640:	20800d17 	ldw	r2,52(r4)
    6644:	38801a2e 	bgeu	r7,r2,66b0 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    6648:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    664c:	28c00003 	ldbu	r3,0(r5)
    6650:	18803fcc 	andi	r2,r3,255
    6654:	1080201c 	xori	r2,r2,128
    6658:	10bfe004 	addi	r2,r2,-128
    665c:	10001626 	beq	r2,zero,66b8 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    6660:	3a04983a 	sll	r2,r7,r8
    6664:	308f883a 	add	r7,r6,r2
    6668:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    666c:	20800b17 	ldw	r2,44(r4)
    6670:	3885883a 	add	r2,r7,r2
    6674:	18c03fcc 	andi	r3,r3,255
    6678:	18c0201c 	xori	r3,r3,128
    667c:	18ffe004 	addi	r3,r3,-128
    6680:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    6684:	320d883a 	add	r6,r6,r8
    6688:	20800c17 	ldw	r2,48(r4)
    668c:	3080082e 	bgeu	r6,r2,66b0 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    6690:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    6694:	28c00003 	ldbu	r3,0(r5)
    6698:	18803fcc 	andi	r2,r3,255
    669c:	1080201c 	xori	r2,r2,128
    66a0:	10bfe004 	addi	r2,r2,-128
    66a4:	10000426 	beq	r2,zero,66b8 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    66a8:	3a0f883a 	add	r7,r7,r8
    66ac:	003fef06 	br	666c <alt_up_char_buffer_string+0x34>
    66b0:	00bfffc4 	movi	r2,-1
    66b4:	f800283a 	ret
    66b8:	0005883a 	mov	r2,zero
	}
	return 0;
}
    66bc:	f800283a 	ret

000066c0 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    66c0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    66c4:	20800c17 	ldw	r2,48(r4)
    66c8:	3080112e 	bgeu	r6,r2,6710 <alt_up_char_buffer_draw+0x50>
    66cc:	20800d17 	ldw	r2,52(r4)
    66d0:	38800f2e 	bgeu	r7,r2,6710 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    66d4:	20c00f17 	ldw	r3,60(r4)
    66d8:	30c6703a 	and	r3,r6,r3
    66dc:	20800e17 	ldw	r2,56(r4)
    66e0:	1886983a 	sll	r3,r3,r2
    66e4:	20801117 	ldw	r2,68(r4)
    66e8:	3884703a 	and	r2,r7,r2
    66ec:	21001017 	ldw	r4,64(r4)
    66f0:	1104983a 	sll	r2,r2,r4
    66f4:	1886b03a 	or	r3,r3,r2
    66f8:	40800b17 	ldw	r2,44(r8)
    66fc:	1887883a 	add	r3,r3,r2
    6700:	28803fcc 	andi	r2,r5,255
    6704:	18800025 	stbio	r2,0(r3)
    6708:	0005883a 	mov	r2,zero
    670c:	f800283a 	ret

	return 0;
    6710:	00bfffc4 	movi	r2,-1
}
    6714:	f800283a 	ret

00006718 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    6718:	20c00a17 	ldw	r3,40(r4)
    671c:	00800044 	movi	r2,1
    6720:	188000a5 	stbio	r2,2(r3)
    6724:	20800a17 	ldw	r2,40(r4)
    6728:	10c00084 	addi	r3,r2,2
    672c:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    6730:	18800023 	ldbuio	r2,0(r3)
    6734:	1104703a 	and	r2,r2,r4
    6738:	103ffd1e 	bne	r2,zero,6730 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    673c:	f800283a 	ret

00006740 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    6740:	deffff04 	addi	sp,sp,-4
    6744:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    6748:	01400074 	movhi	r5,1
    674c:	29523704 	addi	r5,r5,18652
    6750:	00073ec0 	call	73ec <alt_find_dev>

  return dev;
}
    6754:	dfc00017 	ldw	ra,0(sp)
    6758:	dec00104 	addi	sp,sp,4
    675c:	f800283a 	ret

00006760 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    6760:	defffe04 	addi	sp,sp,-8
    6764:	dfc00115 	stw	ra,4(sp)
    6768:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    676c:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    6770:	80800007 	ldb	r2,0(r16)
    6774:	10000a26 	beq	r2,zero,67a0 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    6778:	8009883a 	mov	r4,r16
    677c:	01400074 	movhi	r5,1
    6780:	29696004 	addi	r5,r5,-23168
    6784:	0007d580 	call	7d58 <strcmp>
    6788:	1000021e 	bne	r2,zero,6794 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    678c:	80000005 	stb	zero,0(r16)
    6790:	00000306 	br	67a0 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    6794:	84000044 	addi	r16,r16,1
    6798:	80800007 	ldb	r2,0(r16)
    679c:	103ff61e 	bne	r2,zero,6778 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    67a0:	dfc00117 	ldw	ra,4(sp)
    67a4:	dc000017 	ldw	r16,0(sp)
    67a8:	dec00204 	addi	sp,sp,8
    67ac:	f800283a 	ret

000067b0 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    67b0:	da000017 	ldw	r8,0(sp)
    67b4:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    67b8:	1800051e 	bne	r3,zero,67d0 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    67bc:	29c5383a 	mul	r2,r5,r7
    67c0:	3085883a 	add	r2,r6,r2
    67c4:	1105883a 	add	r2,r2,r4
    67c8:	12000025 	stbio	r8,0(r2)
    67cc:	f800283a 	ret
	else if (mode == 1)
    67d0:	00800044 	movi	r2,1
    67d4:	1880061e 	bne	r3,r2,67f0 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    67d8:	29c5383a 	mul	r2,r5,r7
    67dc:	3085883a 	add	r2,r6,r2
    67e0:	1085883a 	add	r2,r2,r2
    67e4:	1105883a 	add	r2,r2,r4
    67e8:	1200002d 	sthio	r8,0(r2)
    67ec:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    67f0:	29c5383a 	mul	r2,r5,r7
    67f4:	1185883a 	add	r2,r2,r6
    67f8:	1085883a 	add	r2,r2,r2
    67fc:	1085883a 	add	r2,r2,r2
    6800:	1105883a 	add	r2,r2,r4
    6804:	12000035 	stwio	r8,0(r2)
    6808:	f800283a 	ret

0000680c <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    680c:	defff304 	addi	sp,sp,-52
    6810:	dfc00c15 	stw	ra,48(sp)
    6814:	df000b15 	stw	fp,44(sp)
    6818:	ddc00a15 	stw	r23,40(sp)
    681c:	dd800915 	stw	r22,36(sp)
    6820:	dd400815 	stw	r21,32(sp)
    6824:	dd000715 	stw	r20,28(sp)
    6828:	dcc00615 	stw	r19,24(sp)
    682c:	dc800515 	stw	r18,20(sp)
    6830:	dc400415 	stw	r17,16(sp)
    6834:	dc000315 	stw	r16,12(sp)
    6838:	3011883a 	mov	r8,r6
    683c:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    6840:	4987c83a 	sub	r3,r9,r6
    6844:	1800010e 	bge	r3,zero,684c <alt_up_pixel_buffer_dma_draw_line+0x40>
    6848:	00c7c83a 	sub	r3,zero,r3
    684c:	3945c83a 	sub	r2,r7,r5
    6850:	1000010e 	bge	r2,zero,6858 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    6854:	0085c83a 	sub	r2,zero,r2
    6858:	10c4803a 	cmplt	r2,r2,r3
    685c:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    6860:	20c00e17 	ldw	r3,56(r4)
    6864:	00800044 	movi	r2,1
    6868:	1880021e 	bne	r3,r2,6874 <alt_up_pixel_buffer_dma_draw_line+0x68>
    686c:	d8000215 	stw	zero,8(sp)
    6870:	00000306 	br	6880 <alt_up_pixel_buffer_dma_draw_line+0x74>
    6874:	18c00098 	cmpnei	r3,r3,2
    6878:	18c00044 	addi	r3,r3,1
    687c:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    6880:	20800d17 	ldw	r2,52(r4)
    6884:	1000061e 	bne	r2,zero,68a0 <alt_up_pixel_buffer_dma_draw_line+0x94>
    6888:	20801317 	ldw	r2,76(r4)
    688c:	d8c00217 	ldw	r3,8(sp)
    6890:	10c5c83a 	sub	r2,r2,r3
    6894:	00c00044 	movi	r3,1
    6898:	18ae983a 	sll	r23,r3,r2
    689c:	00000106 	br	68a4 <alt_up_pixel_buffer_dma_draw_line+0x98>
    68a0:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    68a4:	d8c00f17 	ldw	r3,60(sp)
    68a8:	00800044 	movi	r2,1
    68ac:	1880021e 	bne	r3,r2,68b8 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    68b0:	25800c17 	ldw	r22,48(r4)
    68b4:	00000106 	br	68bc <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    68b8:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    68bc:	50000326 	beq	r10,zero,68cc <alt_up_pixel_buffer_dma_draw_line+0xc0>
    68c0:	400d883a 	mov	r6,r8
    68c4:	4827883a 	mov	r19,r9
    68c8:	00000406 	br	68dc <alt_up_pixel_buffer_dma_draw_line+0xd0>
    68cc:	280d883a 	mov	r6,r5
    68d0:	400b883a 	mov	r5,r8
    68d4:	3827883a 	mov	r19,r7
    68d8:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    68dc:	9980060e 	bge	r19,r6,68f8 <alt_up_pixel_buffer_dma_draw_line+0xec>
    68e0:	9805883a 	mov	r2,r19
    68e4:	3027883a 	mov	r19,r6
    68e8:	100d883a 	mov	r6,r2
    68ec:	3805883a 	mov	r2,r7
    68f0:	280f883a 	mov	r7,r5
    68f4:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    68f8:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    68fc:	3969c83a 	sub	r20,r7,r5
    6900:	a000010e 	bge	r20,zero,6908 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    6904:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    6908:	a804d7fa 	srli	r2,r21,31
    690c:	1545883a 	add	r2,r2,r21
    6910:	1005d07a 	srai	r2,r2,1
    6914:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    6918:	29c0020e 	bge	r5,r7,6924 <alt_up_pixel_buffer_dma_draw_line+0x118>
    691c:	07000044 	movi	fp,1
    6920:	00000106 	br	6928 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    6924:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    6928:	50000226 	beq	r10,zero,6934 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    692c:	9980030e 	bge	r19,r6,693c <alt_up_pixel_buffer_dma_draw_line+0x130>
    6930:	00002506 	br	69c8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    6934:	9980130e 	bge	r19,r6,6984 <alt_up_pixel_buffer_dma_draw_line+0x178>
    6938:	00002306 	br	69c8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    693c:	3021883a 	mov	r16,r6
    6940:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    6944:	d8800e17 	ldw	r2,56(sp)
    6948:	d8800015 	stw	r2,0(sp)
    694c:	d8c00217 	ldw	r3,8(sp)
    6950:	d8c00115 	stw	r3,4(sp)
    6954:	b009883a 	mov	r4,r22
    6958:	b80b883a 	mov	r5,r23
    695c:	900d883a 	mov	r6,r18
    6960:	800f883a 	mov	r7,r16
    6964:	00067b00 	call	67b0 <helper_plot_pixel>
			error = error + deltay;
    6968:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    696c:	0440020e 	bge	zero,r17,6978 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    6970:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    6974:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    6978:	84000044 	addi	r16,r16,1
    697c:	9c001216 	blt	r19,r16,69c8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    6980:	003ff006 	br	6944 <alt_up_pixel_buffer_dma_draw_line+0x138>
    6984:	3021883a 	mov	r16,r6
    6988:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    698c:	d8800e17 	ldw	r2,56(sp)
    6990:	d8800015 	stw	r2,0(sp)
    6994:	d8c00217 	ldw	r3,8(sp)
    6998:	d8c00115 	stw	r3,4(sp)
    699c:	b009883a 	mov	r4,r22
    69a0:	b80b883a 	mov	r5,r23
    69a4:	800d883a 	mov	r6,r16
    69a8:	900f883a 	mov	r7,r18
    69ac:	00067b00 	call	67b0 <helper_plot_pixel>
			error = error + deltay;
    69b0:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    69b4:	0440020e 	bge	zero,r17,69c0 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    69b8:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    69bc:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    69c0:	84000044 	addi	r16,r16,1
    69c4:	9c3ff10e 	bge	r19,r16,698c <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    69c8:	dfc00c17 	ldw	ra,48(sp)
    69cc:	df000b17 	ldw	fp,44(sp)
    69d0:	ddc00a17 	ldw	r23,40(sp)
    69d4:	dd800917 	ldw	r22,36(sp)
    69d8:	dd400817 	ldw	r21,32(sp)
    69dc:	dd000717 	ldw	r20,28(sp)
    69e0:	dcc00617 	ldw	r19,24(sp)
    69e4:	dc800517 	ldw	r18,20(sp)
    69e8:	dc400417 	ldw	r17,16(sp)
    69ec:	dc000317 	ldw	r16,12(sp)
    69f0:	dec00d04 	addi	sp,sp,52
    69f4:	f800283a 	ret

000069f8 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    69f8:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    69fc:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    6a00:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    6a04:	3980022e 	bgeu	r7,r6,6a10 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    6a08:	3011883a 	mov	r8,r6
    6a0c:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    6a10:	2a405d2e 	bgeu	r5,r9,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6a14:	30805c2e 	bgeu	r6,r2,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    6a18:	40800136 	bltu	r8,r2,6a20 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    6a1c:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6a20:	d8c00117 	ldw	r3,4(sp)
    6a24:	00800044 	movi	r2,1
    6a28:	1880021e 	bne	r3,r2,6a34 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    6a2c:	20c00c17 	ldw	r3,48(r4)
    6a30:	00000106 	br	6a38 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    6a34:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    6a38:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6a3c:	20800d17 	ldw	r2,52(r4)
    6a40:	1000281e 	bne	r2,zero,6ae4 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    6a44:	22801317 	ldw	r10,76(r4)
    6a48:	3284983a 	sll	r2,r6,r10
    6a4c:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6a50:	21000e17 	ldw	r4,56(r4)
    6a54:	00800044 	movi	r2,1
    6a58:	2080091e 	bne	r4,r2,6a80 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    6a5c:	41804a36 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6a60:	1013883a 	mov	r9,r2
    6a64:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    6a68:	1945883a 	add	r2,r3,r5
    6a6c:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    6a70:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    6a74:	324d883a 	add	r6,r6,r9
    6a78:	41804336 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6a7c:	003ffa06 	br	6a68 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6a80:	00800084 	movi	r2,2
    6a84:	2080021e 	bne	r4,r2,6a90 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    6a88:	4180032e 	bgeu	r8,r6,6a98 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    6a8c:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    6a90:	41800a2e 	bgeu	r8,r6,6abc <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    6a94:	f800283a 	ret
    6a98:	294b883a 	add	r5,r5,r5
    6a9c:	02400044 	movi	r9,1
    6aa0:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    6aa4:	28c5883a 	add	r2,r5,r3
    6aa8:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    6aac:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    6ab0:	324d883a 	add	r6,r6,r9
    6ab4:	41803436 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6ab8:	003ffa06 	br	6aa4 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    6abc:	2945883a 	add	r2,r5,r5
    6ac0:	108b883a 	add	r5,r2,r2
    6ac4:	02400044 	movi	r9,1
    6ac8:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    6acc:	28c5883a 	add	r2,r5,r3
    6ad0:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    6ad4:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    6ad8:	324d883a 	add	r6,r6,r9
    6adc:	41802a36 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6ae0:	003ffa06 	br	6acc <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6ae4:	21000e17 	ldw	r4,56(r4)
    6ae8:	00800044 	movi	r2,1
    6aec:	20800b1e 	bne	r4,r2,6b1c <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6af0:	41802536 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6af4:	4809883a 	mov	r4,r9
    6af8:	3245383a 	mul	r2,r6,r9
    6afc:	1885883a 	add	r2,r3,r2
    6b00:	1145883a 	add	r2,r2,r5
    6b04:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    6b08:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6b0c:	30cd883a 	add	r6,r6,r3
    6b10:	1105883a 	add	r2,r2,r4
    6b14:	41801c36 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6b18:	003ffb06 	br	6b08 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6b1c:	00800084 	movi	r2,2
    6b20:	20800c1e 	bne	r4,r2,6b54 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6b24:	41801836 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    6b28:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    6b2c:	3105383a 	mul	r2,r6,r4
    6b30:	1887883a 	add	r3,r3,r2
    6b34:	294b883a 	add	r5,r5,r5
    6b38:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    6b3c:	28c5883a 	add	r2,r5,r3
    6b40:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    6b44:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6b48:	324d883a 	add	r6,r6,r9
    6b4c:	41800e36 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6b50:	003ffa06 	br	6b3c <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6b54:	41800c36 	bltu	r8,r6,6b88 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    6b58:	4a45883a 	add	r2,r9,r9
    6b5c:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    6b60:	3105383a 	mul	r2,r6,r4
    6b64:	1887883a 	add	r3,r3,r2
    6b68:	2945883a 	add	r2,r5,r5
    6b6c:	108b883a 	add	r5,r2,r2
    6b70:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    6b74:	28c5883a 	add	r2,r5,r3
    6b78:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    6b7c:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6b80:	324d883a 	add	r6,r6,r9
    6b84:	41bffb2e 	bgeu	r8,r6,6b74 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    6b88:	f800283a 	ret

00006b8c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    6b8c:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    6b90:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    6b94:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    6b98:	3140022e 	bgeu	r6,r5,6ba4 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    6b9c:	2813883a 	mov	r9,r5
    6ba0:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    6ba4:	2a00552e 	bgeu	r5,r8,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6ba8:	3880542e 	bgeu	r7,r2,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    6bac:	4a000136 	bltu	r9,r8,6bb4 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    6bb0:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6bb4:	d8c00117 	ldw	r3,4(sp)
    6bb8:	00800044 	movi	r2,1
    6bbc:	1880021e 	bne	r3,r2,6bc8 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    6bc0:	21800c17 	ldw	r6,48(r4)
    6bc4:	00000106 	br	6bcc <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    6bc8:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    6bcc:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6bd0:	20800d17 	ldw	r2,52(r4)
    6bd4:	1000231e 	bne	r2,zero,6c64 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    6bd8:	20801317 	ldw	r2,76(r4)
    6bdc:	3884983a 	sll	r2,r7,r2
    6be0:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6be4:	21000e17 	ldw	r4,56(r4)
    6be8:	00800044 	movi	r2,1
    6bec:	2080081e 	bne	r4,r2,6c10 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    6bf0:	49404236 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6bf4:	3945883a 	add	r2,r7,r5
    6bf8:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    6bfc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    6c00:	290b883a 	add	r5,r5,r4
    6c04:	1105883a 	add	r2,r2,r4
    6c08:	49403c36 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6c0c:	003ffb06 	br	6bfc <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6c10:	00800084 	movi	r2,2
    6c14:	2080021e 	bne	r4,r2,6c20 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    6c18:	4940032e 	bgeu	r9,r5,6c28 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    6c1c:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    6c20:	4940082e 	bgeu	r9,r5,6c44 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    6c24:	f800283a 	ret
    6c28:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    6c2c:	2945883a 	add	r2,r5,r5
    6c30:	11c5883a 	add	r2,r2,r7
    6c34:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    6c38:	290b883a 	add	r5,r5,r4
    6c3c:	49402f36 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6c40:	003ffa06 	br	6c2c <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    6c44:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    6c48:	2945883a 	add	r2,r5,r5
    6c4c:	1085883a 	add	r2,r2,r2
    6c50:	11c5883a 	add	r2,r2,r7
    6c54:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    6c58:	290b883a 	add	r5,r5,r4
    6c5c:	49402736 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6c60:	003ff906 	br	6c48 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6c64:	21000e17 	ldw	r4,56(r4)
    6c68:	00800044 	movi	r2,1
    6c6c:	20800a1e 	bne	r4,r2,6c98 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    6c70:	41c5383a 	mul	r2,r8,r7
    6c74:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    6c78:	49402036 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6c7c:	1145883a 	add	r2,r2,r5
    6c80:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    6c84:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    6c88:	290b883a 	add	r5,r5,r4
    6c8c:	1105883a 	add	r2,r2,r4
    6c90:	49401a36 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6c94:	003ffb06 	br	6c84 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6c98:	00800084 	movi	r2,2
    6c9c:	20800b1e 	bne	r4,r2,6ccc <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    6ca0:	4205883a 	add	r2,r8,r8
    6ca4:	3885383a 	mul	r2,r7,r2
    6ca8:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    6cac:	49401336 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6cb0:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    6cb4:	2945883a 	add	r2,r5,r5
    6cb8:	11c5883a 	add	r2,r2,r7
    6cbc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    6cc0:	290b883a 	add	r5,r5,r4
    6cc4:	49400d36 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6cc8:	003ffa06 	br	6cb4 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    6ccc:	4205883a 	add	r2,r8,r8
    6cd0:	1085883a 	add	r2,r2,r2
    6cd4:	3885383a 	mul	r2,r7,r2
    6cd8:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    6cdc:	49400736 	bltu	r9,r5,6cfc <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6ce0:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    6ce4:	2945883a 	add	r2,r5,r5
    6ce8:	1085883a 	add	r2,r2,r2
    6cec:	11c5883a 	add	r2,r2,r7
    6cf0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    6cf4:	290b883a 	add	r5,r5,r4
    6cf8:	497ffa2e 	bgeu	r9,r5,6ce4 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    6cfc:	f800283a 	ret

00006d00 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    6d00:	defff604 	addi	sp,sp,-40
    6d04:	dfc00915 	stw	ra,36(sp)
    6d08:	dd800815 	stw	r22,32(sp)
    6d0c:	dd400715 	stw	r21,28(sp)
    6d10:	dd000615 	stw	r20,24(sp)
    6d14:	dcc00515 	stw	r19,20(sp)
    6d18:	dc800415 	stw	r18,16(sp)
    6d1c:	dc400315 	stw	r17,12(sp)
    6d20:	dc000215 	stw	r16,8(sp)
    6d24:	2029883a 	mov	r20,r4
    6d28:	282d883a 	mov	r22,r5
    6d2c:	302b883a 	mov	r21,r6
    6d30:	3825883a 	mov	r18,r7
    6d34:	dcc00a17 	ldw	r19,40(sp)
    6d38:	dc000b17 	ldw	r16,44(sp)
    6d3c:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    6d40:	dc000015 	stw	r16,0(sp)
    6d44:	dc400115 	stw	r17,4(sp)
    6d48:	380d883a 	mov	r6,r7
    6d4c:	a80f883a 	mov	r7,r21
    6d50:	0006b8c0 	call	6b8c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    6d54:	dc000015 	stw	r16,0(sp)
    6d58:	dc400115 	stw	r17,4(sp)
    6d5c:	a009883a 	mov	r4,r20
    6d60:	b00b883a 	mov	r5,r22
    6d64:	900d883a 	mov	r6,r18
    6d68:	980f883a 	mov	r7,r19
    6d6c:	0006b8c0 	call	6b8c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    6d70:	dc000015 	stw	r16,0(sp)
    6d74:	dc400115 	stw	r17,4(sp)
    6d78:	a009883a 	mov	r4,r20
    6d7c:	b00b883a 	mov	r5,r22
    6d80:	a80d883a 	mov	r6,r21
    6d84:	980f883a 	mov	r7,r19
    6d88:	00069f80 	call	69f8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    6d8c:	dc000015 	stw	r16,0(sp)
    6d90:	dc400115 	stw	r17,4(sp)
    6d94:	a009883a 	mov	r4,r20
    6d98:	900b883a 	mov	r5,r18
    6d9c:	a80d883a 	mov	r6,r21
    6da0:	980f883a 	mov	r7,r19
    6da4:	00069f80 	call	69f8 <alt_up_pixel_buffer_dma_draw_vline>
}
    6da8:	dfc00917 	ldw	ra,36(sp)
    6dac:	dd800817 	ldw	r22,32(sp)
    6db0:	dd400717 	ldw	r21,28(sp)
    6db4:	dd000617 	ldw	r20,24(sp)
    6db8:	dcc00517 	ldw	r19,20(sp)
    6dbc:	dc800417 	ldw	r18,16(sp)
    6dc0:	dc400317 	ldw	r17,12(sp)
    6dc4:	dc000217 	ldw	r16,8(sp)
    6dc8:	dec00a04 	addi	sp,sp,40
    6dcc:	f800283a 	ret

00006dd0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    6dd0:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    6dd4:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    6dd8:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    6ddc:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    6de0:	3940022e 	bgeu	r7,r5,6dec <alt_up_pixel_buffer_dma_draw_box+0x1c>
    6de4:	2811883a 	mov	r8,r5
    6de8:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    6dec:	5980032e 	bgeu	r11,r6,6dfc <alt_up_pixel_buffer_dma_draw_box+0x2c>
    6df0:	5805883a 	mov	r2,r11
    6df4:	3017883a 	mov	r11,r6
    6df8:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    6dfc:	2a80842e 	bgeu	r5,r10,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
    6e00:	30c0832e 	bgeu	r6,r3,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    6e04:	42800136 	bltu	r8,r10,6e0c <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    6e08:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    6e0c:	58c00136 	bltu	r11,r3,6e14 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    6e10:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6e14:	d8c00217 	ldw	r3,8(sp)
    6e18:	00800044 	movi	r2,1
    6e1c:	1880021e 	bne	r3,r2,6e28 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    6e20:	20c00c17 	ldw	r3,48(r4)
    6e24:	00000106 	br	6e2c <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    6e28:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    6e2c:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6e30:	20800d17 	ldw	r2,52(r4)
    6e34:	1000391e 	bne	r2,zero,6f1c <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    6e38:	22801317 	ldw	r10,76(r4)
    6e3c:	3284983a 	sll	r2,r6,r10
    6e40:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6e44:	21000e17 	ldw	r4,56(r4)
    6e48:	00800044 	movi	r2,1
    6e4c:	2080101e 	bne	r4,r2,6e90 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    6e50:	59806f36 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
    6e54:	00000a06 	br	6e80 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    6e58:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6e5c:	00800044 	movi	r2,1
    6e60:	1887883a 	add	r3,r3,r2
    6e64:	2089883a 	add	r4,r4,r2
    6e68:	40fffb2e 	bgeu	r8,r3,6e58 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    6e6c:	00800044 	movi	r2,1
    6e70:	308d883a 	add	r6,r6,r2
    6e74:	59806636 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    6e78:	1284983a 	sll	r2,r2,r10
    6e7c:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6e80:	417ffa36 	bltu	r8,r5,6e6c <alt_up_pixel_buffer_dma_draw_box+0x9c>
    6e84:	29c9883a 	add	r4,r5,r7
    6e88:	2807883a 	mov	r3,r5
    6e8c:	003ff206 	br	6e58 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6e90:	00800084 	movi	r2,2
    6e94:	2080021e 	bne	r4,r2,6ea0 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    6e98:	59805d36 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
    6e9c:	00000e06 	br	6ed8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    6ea0:	59805b36 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
    6ea4:	00001b06 	br	6f14 <alt_up_pixel_buffer_dma_draw_box+0x144>
    6ea8:	2807883a 	mov	r3,r5
    6eac:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    6eb0:	18c5883a 	add	r2,r3,r3
    6eb4:	11c5883a 	add	r2,r2,r7
    6eb8:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6ebc:	1907883a 	add	r3,r3,r4
    6ec0:	40fffb2e 	bgeu	r8,r3,6eb0 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    6ec4:	00800044 	movi	r2,1
    6ec8:	308d883a 	add	r6,r6,r2
    6ecc:	59805036 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    6ed0:	1284983a 	sll	r2,r2,r10
    6ed4:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6ed8:	417ff32e 	bgeu	r8,r5,6ea8 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    6edc:	003ff906 	br	6ec4 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    6ee0:	2807883a 	mov	r3,r5
    6ee4:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    6ee8:	18c5883a 	add	r2,r3,r3
    6eec:	1085883a 	add	r2,r2,r2
    6ef0:	11c5883a 	add	r2,r2,r7
    6ef4:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6ef8:	1907883a 	add	r3,r3,r4
    6efc:	40fffa2e 	bgeu	r8,r3,6ee8 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    6f00:	00800044 	movi	r2,1
    6f04:	308d883a 	add	r6,r6,r2
    6f08:	59804136 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    6f0c:	1284983a 	sll	r2,r2,r10
    6f10:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6f14:	417ff22e 	bgeu	r8,r5,6ee0 <alt_up_pixel_buffer_dma_draw_box+0x110>
    6f18:	003ff906 	br	6f00 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6f1c:	21000e17 	ldw	r4,56(r4)
    6f20:	00800044 	movi	r2,1
    6f24:	2080121e 	bne	r4,r2,6f70 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6f28:	59803936 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
    6f2c:	5019883a 	mov	r12,r10
    6f30:	3285383a 	mul	r2,r6,r10
    6f34:	1885883a 	add	r2,r3,r2
    6f38:	114f883a 	add	r7,r2,r5
    6f3c:	00000806 	br	6f60 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    6f40:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6f44:	00800044 	movi	r2,1
    6f48:	1887883a 	add	r3,r3,r2
    6f4c:	2089883a 	add	r4,r4,r2
    6f50:	40fffb2e 	bgeu	r8,r3,6f40 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6f54:	31800044 	addi	r6,r6,1
    6f58:	3b0f883a 	add	r7,r7,r12
    6f5c:	59802c36 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    6f60:	417ffc36 	bltu	r8,r5,6f54 <alt_up_pixel_buffer_dma_draw_box+0x184>
    6f64:	3809883a 	mov	r4,r7
    6f68:	2807883a 	mov	r3,r5
    6f6c:	003ff406 	br	6f40 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6f70:	00800084 	movi	r2,2
    6f74:	2080121e 	bne	r4,r2,6fc0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6f78:	59802536 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    6f7c:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    6f80:	3285383a 	mul	r2,r6,r10
    6f84:	1889883a 	add	r4,r3,r2
    6f88:	03000044 	movi	r12,1
    6f8c:	00000a06 	br	6fb8 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    6f90:	2807883a 	mov	r3,r5
    6f94:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    6f98:	18c5883a 	add	r2,r3,r3
    6f9c:	1105883a 	add	r2,r2,r4
    6fa0:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6fa4:	19c7883a 	add	r3,r3,r7
    6fa8:	40fffb2e 	bgeu	r8,r3,6f98 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6fac:	330d883a 	add	r6,r6,r12
    6fb0:	59801736 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    6fb4:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6fb8:	417ff52e 	bgeu	r8,r5,6f90 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    6fbc:	003ffb06 	br	6fac <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6fc0:	59801336 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    6fc4:	5285883a 	add	r2,r10,r10
    6fc8:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    6fcc:	3285383a 	mul	r2,r6,r10
    6fd0:	1889883a 	add	r4,r3,r2
    6fd4:	03000044 	movi	r12,1
    6fd8:	00000b06 	br	7008 <alt_up_pixel_buffer_dma_draw_box+0x238>
    6fdc:	2807883a 	mov	r3,r5
    6fe0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    6fe4:	18c5883a 	add	r2,r3,r3
    6fe8:	1085883a 	add	r2,r2,r2
    6fec:	1105883a 	add	r2,r2,r4
    6ff0:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6ff4:	19c7883a 	add	r3,r3,r7
    6ff8:	40fffa2e 	bgeu	r8,r3,6fe4 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6ffc:	330d883a 	add	r6,r6,r12
    7000:	59800336 	bltu	r11,r6,7010 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    7004:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7008:	417ff42e 	bgeu	r8,r5,6fdc <alt_up_pixel_buffer_dma_draw_box+0x20c>
    700c:	003ffb06 	br	6ffc <alt_up_pixel_buffer_dma_draw_box+0x22c>
    7010:	f800283a 	ret

00007014 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    7014:	00800044 	movi	r2,1
    7018:	2880021e 	bne	r5,r2,7024 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    701c:	21c00c17 	ldw	r7,48(r4)
    7020:	00000106 	br	7028 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    7024:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    7028:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    702c:	20c00e17 	ldw	r3,56(r4)
    7030:	00800084 	movi	r2,2
    7034:	1880021e 	bne	r3,r2,7040 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    7038:	294d883a 	add	r6,r5,r5
    703c:	00000206 	br	7048 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    7040:	2945883a 	add	r2,r5,r5
    7044:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    7048:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    704c:	20800d17 	ldw	r2,52(r4)
    7050:	1000121e 	bne	r2,zero,709c <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    7054:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    7058:	48001a26 	beq	r9,zero,70c4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    705c:	0011883a 	mov	r8,zero
    7060:	3014c03a 	cmpne	r10,r6,zero
    7064:	00000b06 	br	7094 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    7068:	0007883a 	mov	r3,zero
    706c:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    7070:	19c5883a 	add	r2,r3,r7
    7074:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    7078:	1947883a 	add	r3,r3,r5
    707c:	19bffc36 	bltu	r3,r6,7070 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    7080:	00800044 	movi	r2,1
    7084:	4091883a 	add	r8,r8,r2
    7088:	4a000e26 	beq	r9,r8,70c4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    708c:	1104983a 	sll	r2,r2,r4
    7090:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    7094:	503ff41e 	bne	r10,zero,7068 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    7098:	003ff906 	br	7080 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    709c:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    70a0:	20000826 	beq	r4,zero,70c4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    70a4:	0007883a 	mov	r3,zero
    70a8:	0005883a 	mov	r2,zero
    70ac:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    70b0:	3885883a 	add	r2,r7,r2
    70b4:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    70b8:	1945883a 	add	r2,r3,r5
    70bc:	1007883a 	mov	r3,r2
    70c0:	113ffb36 	bltu	r2,r4,70b0 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    70c4:	f800283a 	ret

000070c8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    70c8:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    70cc:	20c00a17 	ldw	r3,40(r4)
    70d0:	00800044 	movi	r2,1
    70d4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    70d8:	20800b17 	ldw	r2,44(r4)
    70dc:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    70e0:	21400b15 	stw	r5,44(r4)
	return 0;
}
    70e4:	0005883a 	mov	r2,zero
    70e8:	f800283a 	ret

000070ec <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    70ec:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    70f0:	22400f17 	ldw	r9,60(r4)
    70f4:	32402a2e 	bgeu	r6,r9,71a0 <alt_up_pixel_buffer_dma_draw+0xb4>
    70f8:	20801017 	ldw	r2,64(r4)
    70fc:	3880282e 	bgeu	r7,r2,71a0 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    7100:	20800d17 	ldw	r2,52(r4)
    7104:	10000a1e 	bne	r2,zero,7130 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    7108:	21001217 	ldw	r4,72(r4)
    710c:	3108703a 	and	r4,r6,r4
    7110:	40801117 	ldw	r2,68(r8)
    7114:	2088983a 	sll	r4,r4,r2
    7118:	40801417 	ldw	r2,80(r8)
    711c:	3884703a 	and	r2,r7,r2
    7120:	40c01317 	ldw	r3,76(r8)
    7124:	10c4983a 	sll	r2,r2,r3
    7128:	2086b03a 	or	r3,r4,r2
    712c:	00000806 	br	7150 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    7130:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    7134:	40c01217 	ldw	r3,72(r8)
    7138:	30c6703a 	and	r3,r6,r3
    713c:	40801417 	ldw	r2,80(r8)
    7140:	3884703a 	and	r2,r7,r2
    7144:	4885383a 	mul	r2,r9,r2
    7148:	10c5883a 	add	r2,r2,r3
    714c:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7150:	42400e17 	ldw	r9,56(r8)
    7154:	00800044 	movi	r2,1
    7158:	4880051e 	bne	r9,r2,7170 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    715c:	40800c17 	ldw	r2,48(r8)
    7160:	1885883a 	add	r2,r3,r2
    7164:	11400025 	stbio	r5,0(r2)
    7168:	0005883a 	mov	r2,zero
    716c:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7170:	00800084 	movi	r2,2
    7174:	4880051e 	bne	r9,r2,718c <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    7178:	40800c17 	ldw	r2,48(r8)
    717c:	1885883a 	add	r2,r3,r2
    7180:	1140002d 	sthio	r5,0(r2)
    7184:	0005883a 	mov	r2,zero
    7188:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    718c:	40800c17 	ldw	r2,48(r8)
    7190:	1885883a 	add	r2,r3,r2
    7194:	11400035 	stwio	r5,0(r2)
    7198:	0005883a 	mov	r2,zero
    719c:	f800283a 	ret
    71a0:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    71a4:	f800283a 	ret

000071a8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    71a8:	20800a17 	ldw	r2,40(r4)
    71ac:	10800337 	ldwio	r2,12(r2)
}
    71b0:	1080004c 	andi	r2,r2,1
    71b4:	f800283a 	ret

000071b8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    71b8:	00c00104 	movi	r3,4
    71bc:	20800a17 	ldw	r2,40(r4)
    71c0:	10c5883a 	add	r2,r2,r3
    71c4:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    71c8:	20800a17 	ldw	r2,40(r4)
    71cc:	10c5883a 	add	r2,r2,r3
    71d0:	10800037 	ldwio	r2,0(r2)
    71d4:	20800c15 	stw	r2,48(r4)
	return 0;
}
    71d8:	0005883a 	mov	r2,zero
    71dc:	f800283a 	ret

000071e0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    71e0:	deffff04 	addi	sp,sp,-4
    71e4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    71e8:	01400074 	movhi	r5,1
    71ec:	29523704 	addi	r5,r5,18652
    71f0:	00073ec0 	call	73ec <alt_find_dev>

  return dev;
}
    71f4:	dfc00017 	ldw	ra,0(sp)
    71f8:	dec00104 	addi	sp,sp,4
    71fc:	f800283a 	ret

00007200 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    7200:	008000b4 	movhi	r2,2
    7204:	10bb2004 	addi	r2,r2,-4992
    7208:	10800017 	ldw	r2,0(r2)
    720c:	1000021e 	bne	r2,zero,7218 <alt_alarm_start+0x18>
    7210:	00bfde84 	movi	r2,-134
    7214:	f800283a 	ret
  {
    if (alarm)
    7218:	2000021e 	bne	r4,zero,7224 <alt_alarm_start+0x24>
    721c:	00bffa84 	movi	r2,-22
    7220:	f800283a 	ret
    {
      alarm->callback = callback;
    7224:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    7228:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    722c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7230:	00bfff84 	movi	r2,-2
    7234:	3884703a 	and	r2,r7,r2
    7238:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    723c:	008000b4 	movhi	r2,2
    7240:	10bb2104 	addi	r2,r2,-4988
    7244:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    7248:	01800044 	movi	r6,1
    724c:	1985883a 	add	r2,r3,r6
    7250:	2885883a 	add	r2,r5,r2
    7254:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    7258:	10c0022e 	bgeu	r2,r3,7264 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    725c:	21800405 	stb	r6,16(r4)
    7260:	00000106 	br	7268 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    7264:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    7268:	00800074 	movhi	r2,1
    726c:	10923c04 	addi	r2,r2,18672
    7270:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    7274:	10c00017 	ldw	r3,0(r2)
    7278:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    727c:	10c00017 	ldw	r3,0(r2)
    7280:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    7284:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7288:	3801703a 	wrctl	status,r7
    728c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    7290:	f800283a 	ret

00007294 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    7294:	defffd04 	addi	sp,sp,-12
    7298:	dfc00215 	stw	ra,8(sp)
    729c:	dc400115 	stw	r17,4(sp)
    72a0:	dc000015 	stw	r16,0(sp)
    72a4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    72a8:	20001c16 	blt	r4,zero,731c <close+0x88>
    72ac:	20c00324 	muli	r3,r4,12
    72b0:	00800074 	movhi	r2,1
    72b4:	108fcc04 	addi	r2,r2,16176
    72b8:	1889883a 	add	r4,r3,r2

  if (fd)
    72bc:	20001726 	beq	r4,zero,731c <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    72c0:	20800017 	ldw	r2,0(r4)
    72c4:	10800417 	ldw	r2,16(r2)
    72c8:	10002126 	beq	r2,zero,7350 <close+0xbc>
    72cc:	103ee83a 	callr	r2
    72d0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    72d4:	8009883a 	mov	r4,r16
    72d8:	00077b00 	call	77b0 <alt_release_fd>
    if (rval < 0)
    72dc:	88000216 	blt	r17,zero,72e8 <close+0x54>
    72e0:	0005883a 	mov	r2,zero
    72e4:	00001d06 	br	735c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    72e8:	00800074 	movhi	r2,1
    72ec:	10923a04 	addi	r2,r2,18664
    72f0:	10800017 	ldw	r2,0(r2)
    72f4:	1000031e 	bne	r2,zero,7304 <close+0x70>
    72f8:	00c000b4 	movhi	r3,2
    72fc:	18fb2204 	addi	r3,r3,-4984
    7300:	00000206 	br	730c <close+0x78>
    7304:	103ee83a 	callr	r2
    7308:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    730c:	0445c83a 	sub	r2,zero,r17
    7310:	18800015 	stw	r2,0(r3)
    7314:	00bfffc4 	movi	r2,-1
    7318:	00001006 	br	735c <close+0xc8>
    731c:	00800074 	movhi	r2,1
    7320:	10923a04 	addi	r2,r2,18664
    7324:	10800017 	ldw	r2,0(r2)
    7328:	1000031e 	bne	r2,zero,7338 <close+0xa4>
    732c:	00c000b4 	movhi	r3,2
    7330:	18fb2204 	addi	r3,r3,-4984
    7334:	00000206 	br	7340 <close+0xac>
    7338:	103ee83a 	callr	r2
    733c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    7340:	00801444 	movi	r2,81
    7344:	18800015 	stw	r2,0(r3)
    7348:	00bfffc4 	movi	r2,-1
    734c:	00000306 	br	735c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    7350:	8009883a 	mov	r4,r16
    7354:	00077b00 	call	77b0 <alt_release_fd>
    7358:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    735c:	dfc00217 	ldw	ra,8(sp)
    7360:	dc400117 	ldw	r17,4(sp)
    7364:	dc000017 	ldw	r16,0(sp)
    7368:	dec00304 	addi	sp,sp,12
    736c:	f800283a 	ret

00007370 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    7370:	f800283a 	ret

00007374 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    7374:	3005883a 	mov	r2,r6
    7378:	f800283a 	ret

0000737c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    737c:	deffff04 	addi	sp,sp,-4
    7380:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    7384:	20000226 	beq	r4,zero,7390 <alt_dev_llist_insert+0x14>
    7388:	20800217 	ldw	r2,8(r4)
    738c:	10000d1e 	bne	r2,zero,73c4 <alt_dev_llist_insert+0x48>
    7390:	00800074 	movhi	r2,1
    7394:	10923a04 	addi	r2,r2,18664
    7398:	10800017 	ldw	r2,0(r2)
    739c:	1000031e 	bne	r2,zero,73ac <alt_dev_llist_insert+0x30>
    73a0:	00c000b4 	movhi	r3,2
    73a4:	18fb2204 	addi	r3,r3,-4984
    73a8:	00000206 	br	73b4 <alt_dev_llist_insert+0x38>
    73ac:	103ee83a 	callr	r2
    73b0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    73b4:	00800584 	movi	r2,22
    73b8:	18800015 	stw	r2,0(r3)
    73bc:	00bffa84 	movi	r2,-22
    73c0:	00000706 	br	73e0 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    73c4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    73c8:	28800017 	ldw	r2,0(r5)
    73cc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    73d0:	28800017 	ldw	r2,0(r5)
    73d4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    73d8:	29000015 	stw	r4,0(r5)
    73dc:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    73e0:	dfc00017 	ldw	ra,0(sp)
    73e4:	dec00104 	addi	sp,sp,4
    73e8:	f800283a 	ret

000073ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    73ec:	defffb04 	addi	sp,sp,-20
    73f0:	dfc00415 	stw	ra,16(sp)
    73f4:	dcc00315 	stw	r19,12(sp)
    73f8:	dc800215 	stw	r18,8(sp)
    73fc:	dc400115 	stw	r17,4(sp)
    7400:	dc000015 	stw	r16,0(sp)
    7404:	2027883a 	mov	r19,r4
    7408:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    740c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    7410:	0007e140 	call	7e14 <strlen>
    7414:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    7418:	8c000726 	beq	r17,r16,7438 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    741c:	89000217 	ldw	r4,8(r17)
    7420:	980b883a 	mov	r5,r19
    7424:	900d883a 	mov	r6,r18
    7428:	0007a580 	call	7a58 <memcmp>
    742c:	10000326 	beq	r2,zero,743c <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    7430:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    7434:	847ff91e 	bne	r16,r17,741c <alt_find_dev+0x30>
    7438:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    743c:	8805883a 	mov	r2,r17
    7440:	dfc00417 	ldw	ra,16(sp)
    7444:	dcc00317 	ldw	r19,12(sp)
    7448:	dc800217 	ldw	r18,8(sp)
    744c:	dc400117 	ldw	r17,4(sp)
    7450:	dc000017 	ldw	r16,0(sp)
    7454:	dec00504 	addi	sp,sp,20
    7458:	f800283a 	ret

0000745c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    745c:	deffff04 	addi	sp,sp,-4
    7460:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    7464:	0009883a 	mov	r4,zero
    7468:	01440004 	movi	r5,4096
    746c:	00079e40 	call	79e4 <alt_icache_flush>
#endif
}
    7470:	dfc00017 	ldw	ra,0(sp)
    7474:	dec00104 	addi	sp,sp,4
    7478:	f800283a 	ret

0000747c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    747c:	defffe04 	addi	sp,sp,-8
    7480:	dfc00115 	stw	ra,4(sp)
    7484:	dc000015 	stw	r16,0(sp)
    7488:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    748c:	2809883a 	mov	r4,r5
    7490:	300b883a 	mov	r5,r6
    7494:	380d883a 	mov	r6,r7
    7498:	00076340 	call	7634 <open>
    749c:	1009883a 	mov	r4,r2

  if (old >= 0)
    74a0:	10000b16 	blt	r2,zero,74d0 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    74a4:	10c00324 	muli	r3,r2,12
    74a8:	00800074 	movhi	r2,1
    74ac:	108fcc04 	addi	r2,r2,16176
    74b0:	1887883a 	add	r3,r3,r2
    74b4:	18800017 	ldw	r2,0(r3)
    74b8:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    74bc:	18800117 	ldw	r2,4(r3)
    74c0:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    74c4:	18800217 	ldw	r2,8(r3)
    74c8:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    74cc:	00077b00 	call	77b0 <alt_release_fd>
  }
} 
    74d0:	dfc00117 	ldw	ra,4(sp)
    74d4:	dc000017 	ldw	r16,0(sp)
    74d8:	dec00204 	addi	sp,sp,8
    74dc:	f800283a 	ret

000074e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    74e0:	defffa04 	addi	sp,sp,-24
    74e4:	dfc00515 	stw	ra,20(sp)
    74e8:	dd000415 	stw	r20,16(sp)
    74ec:	dcc00315 	stw	r19,12(sp)
    74f0:	dc800215 	stw	r18,8(sp)
    74f4:	dc400115 	stw	r17,4(sp)
    74f8:	dc000015 	stw	r16,0(sp)
    74fc:	2005883a 	mov	r2,r4
    7500:	2827883a 	mov	r19,r5
    7504:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    7508:	04000074 	movhi	r16,1
    750c:	840fcf04 	addi	r16,r16,16188
    7510:	04800044 	movi	r18,1
    7514:	04407fc4 	movi	r17,511
    7518:	8009883a 	mov	r4,r16
    751c:	100b883a 	mov	r5,r2
    7520:	900d883a 	mov	r6,r18
    7524:	880f883a 	mov	r7,r17
    7528:	000747c0 	call	747c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    752c:	843ffd04 	addi	r16,r16,-12
    7530:	8009883a 	mov	r4,r16
    7534:	980b883a 	mov	r5,r19
    7538:	000d883a 	mov	r6,zero
    753c:	880f883a 	mov	r7,r17
    7540:	000747c0 	call	747c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    7544:	81000604 	addi	r4,r16,24
    7548:	a00b883a 	mov	r5,r20
    754c:	900d883a 	mov	r6,r18
    7550:	880f883a 	mov	r7,r17
    7554:	000747c0 	call	747c <alt_open_fd>
}  
    7558:	dfc00517 	ldw	ra,20(sp)
    755c:	dd000417 	ldw	r20,16(sp)
    7560:	dcc00317 	ldw	r19,12(sp)
    7564:	dc800217 	ldw	r18,8(sp)
    7568:	dc400117 	ldw	r17,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00604 	addi	sp,sp,24
    7574:	f800283a 	ret

00007578 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    7578:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    757c:	008007c4 	movi	r2,31
    7580:	1100022e 	bgeu	r2,r4,758c <alt_irq_register+0x14>
    7584:	00bffa84 	movi	r2,-22
    7588:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    758c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7590:	013fff84 	movi	r4,-2
    7594:	4104703a 	and	r2,r8,r4
    7598:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    759c:	380490fa 	slli	r2,r7,3
    75a0:	00c000b4 	movhi	r3,2
    75a4:	18fb3004 	addi	r3,r3,-4928
    75a8:	10c5883a 	add	r2,r2,r3
    75ac:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    75b0:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    75b4:	30000e26 	beq	r6,zero,75f0 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    75b8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75bc:	2904703a 	and	r2,r5,r4
    75c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    75c4:	00c000b4 	movhi	r3,2
    75c8:	18fb1f04 	addi	r3,r3,-4996
    75cc:	19000017 	ldw	r4,0(r3)
    75d0:	00800044 	movi	r2,1
    75d4:	11c4983a 	sll	r2,r2,r7
    75d8:	1104b03a 	or	r2,r2,r4
    75dc:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    75e0:	18800017 	ldw	r2,0(r3)
    75e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    75e8:	2801703a 	wrctl	status,r5
    75ec:	00000e06 	br	7628 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    75f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75f4:	00bfff84 	movi	r2,-2
    75f8:	2884703a 	and	r2,r5,r2
    75fc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    7600:	00c000b4 	movhi	r3,2
    7604:	18fb1f04 	addi	r3,r3,-4996
    7608:	19000017 	ldw	r4,0(r3)
    760c:	00bfff84 	movi	r2,-2
    7610:	11c4183a 	rol	r2,r2,r7
    7614:	1104703a 	and	r2,r2,r4
    7618:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    761c:	18800017 	ldw	r2,0(r3)
    7620:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7624:	2801703a 	wrctl	status,r5
    7628:	4001703a 	wrctl	status,r8
    762c:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    7630:	f800283a 	ret

00007634 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    7634:	defff904 	addi	sp,sp,-28
    7638:	dfc00615 	stw	ra,24(sp)
    763c:	dd400515 	stw	r21,20(sp)
    7640:	dd000415 	stw	r20,16(sp)
    7644:	dcc00315 	stw	r19,12(sp)
    7648:	dc800215 	stw	r18,8(sp)
    764c:	dc400115 	stw	r17,4(sp)
    7650:	dc000015 	stw	r16,0(sp)
    7654:	2029883a 	mov	r20,r4
    7658:	2827883a 	mov	r19,r5
    765c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    7660:	01400074 	movhi	r5,1
    7664:	29523704 	addi	r5,r5,18652
    7668:	00073ec0 	call	73ec <alt_find_dev>
    766c:	1021883a 	mov	r16,r2
    7670:	10000226 	beq	r2,zero,767c <open+0x48>
    7674:	0025883a 	mov	r18,zero
    7678:	00000a06 	br	76a4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    767c:	a009883a 	mov	r4,r20
    7680:	00078bc0 	call	78bc <alt_find_file>
    7684:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7688:	1000051e 	bne	r2,zero,76a0 <open+0x6c>
    768c:	047fffc4 	movi	r17,-1
    7690:	043ffb44 	movi	r16,-19
    7694:	00002b06 	br	7744 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    7698:	043ffcc4 	movi	r16,-13
    769c:	00002906 	br	7744 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    76a0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    76a4:	8009883a 	mov	r4,r16
    76a8:	00079780 	call	7978 <alt_get_fd>
    76ac:	1023883a 	mov	r17,r2
    76b0:	10003316 	blt	r2,zero,7780 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    76b4:	10800324 	muli	r2,r2,12
    76b8:	02000074 	movhi	r8,1
    76bc:	420fcc04 	addi	r8,r8,16176
    76c0:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    76c4:	00900034 	movhi	r2,16384
    76c8:	10bfffc4 	addi	r2,r2,-1
    76cc:	9886703a 	and	r3,r19,r2
    76d0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    76d4:	9004c03a 	cmpne	r2,r18,zero
    76d8:	1000121e 	bne	r2,zero,7724 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    76dc:	18900034 	orhi	r2,r3,16384
    76e0:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    76e4:	00800074 	movhi	r2,1
    76e8:	10923904 	addi	r2,r2,18660
    76ec:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    76f0:	21800017 	ldw	r6,0(r4)
    76f4:	000b883a 	mov	r5,zero
    76f8:	4007883a 	mov	r3,r8
    76fc:	02400044 	movi	r9,1
    7700:	02000304 	movi	r8,12
    7704:	18800017 	ldw	r2,0(r3)
    7708:	1180031e 	bne	r2,r6,7718 <open+0xe4>
    770c:	18800217 	ldw	r2,8(r3)
    7710:	1000010e 	bge	r2,zero,7718 <open+0xe4>
    7714:	193fe01e 	bne	r3,r4,7698 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7718:	2a4b883a 	add	r5,r5,r9
    771c:	1a07883a 	add	r3,r3,r8
    7720:	397ff82e 	bgeu	r7,r5,7704 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    7724:	80800317 	ldw	r2,12(r16)
    7728:	10001726 	beq	r2,zero,7788 <open+0x154>
    772c:	a00b883a 	mov	r5,r20
    7730:	980d883a 	mov	r6,r19
    7734:	a80f883a 	mov	r7,r21
    7738:	103ee83a 	callr	r2
    773c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    7740:	1000110e 	bge	r2,zero,7788 <open+0x154>
  {
    alt_release_fd (index);  
    7744:	8809883a 	mov	r4,r17
    7748:	00077b00 	call	77b0 <alt_release_fd>
    774c:	00800074 	movhi	r2,1
    7750:	10923a04 	addi	r2,r2,18664
    7754:	10800017 	ldw	r2,0(r2)
    7758:	1000031e 	bne	r2,zero,7768 <open+0x134>
    775c:	00c000b4 	movhi	r3,2
    7760:	18fb2204 	addi	r3,r3,-4984
    7764:	00000206 	br	7770 <open+0x13c>
    7768:	103ee83a 	callr	r2
    776c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    7770:	0405c83a 	sub	r2,zero,r16
    7774:	18800015 	stw	r2,0(r3)
    7778:	047fffc4 	movi	r17,-1
    777c:	00000206 	br	7788 <open+0x154>
    7780:	1021883a 	mov	r16,r2
    7784:	003fef06 	br	7744 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    7788:	8805883a 	mov	r2,r17
    778c:	dfc00617 	ldw	ra,24(sp)
    7790:	dd400517 	ldw	r21,20(sp)
    7794:	dd000417 	ldw	r20,16(sp)
    7798:	dcc00317 	ldw	r19,12(sp)
    779c:	dc800217 	ldw	r18,8(sp)
    77a0:	dc400117 	ldw	r17,4(sp)
    77a4:	dc000017 	ldw	r16,0(sp)
    77a8:	dec00704 	addi	sp,sp,28
    77ac:	f800283a 	ret

000077b0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    77b0:	00800084 	movi	r2,2
    77b4:	1100060e 	bge	r2,r4,77d0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    77b8:	20800324 	muli	r2,r4,12
    77bc:	00c00074 	movhi	r3,1
    77c0:	18cfcc04 	addi	r3,r3,16176
    77c4:	10c5883a 	add	r2,r2,r3
    77c8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    77cc:	10000015 	stw	zero,0(r2)
    77d0:	f800283a 	ret

000077d4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    77d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    77d8:	00bfff84 	movi	r2,-2
    77dc:	2884703a 	and	r2,r5,r2
    77e0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    77e4:	20c00017 	ldw	r3,0(r4)
    77e8:	20800117 	ldw	r2,4(r4)
    77ec:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    77f0:	20800117 	ldw	r2,4(r4)
    77f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    77f8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    77fc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7800:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    7804:	f800283a 	ret

00007808 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    7808:	defffd04 	addi	sp,sp,-12
    780c:	dfc00215 	stw	ra,8(sp)
    7810:	dc400115 	stw	r17,4(sp)
    7814:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    7818:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    781c:	d088f317 	ldw	r2,9164(gp)
    7820:	10800044 	addi	r2,r2,1
    7824:	d088f315 	stw	r2,9164(gp)
    7828:	00001b06 	br	7898 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    782c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    7830:	80800403 	ldbu	r2,16(r16)
    7834:	10000326 	beq	r2,zero,7844 <alt_tick+0x3c>
    7838:	d088f317 	ldw	r2,9164(gp)
    783c:	1000011e 	bne	r2,zero,7844 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    7840:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    7844:	d0c8f317 	ldw	r3,9164(gp)
    7848:	80800217 	ldw	r2,8(r16)
    784c:	18801136 	bltu	r3,r2,7894 <alt_tick+0x8c>
    7850:	80800403 	ldbu	r2,16(r16)
    7854:	10000f1e 	bne	r2,zero,7894 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    7858:	80800317 	ldw	r2,12(r16)
    785c:	81000517 	ldw	r4,20(r16)
    7860:	103ee83a 	callr	r2
    7864:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    7868:	1000031e 	bne	r2,zero,7878 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    786c:	8009883a 	mov	r4,r16
    7870:	00077d40 	call	77d4 <alt_alarm_stop>
    7874:	00000706 	br	7894 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    7878:	80800217 	ldw	r2,8(r16)
    787c:	1885883a 	add	r2,r3,r2
    7880:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    7884:	d0c8f317 	ldw	r3,9164(gp)
    7888:	10c0022e 	bgeu	r2,r3,7894 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    788c:	00800044 	movi	r2,1
    7890:	80800405 	stb	r2,16(r16)
    7894:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    7898:	d0a00e04 	addi	r2,gp,-32712
    789c:	80bfe31e 	bne	r16,r2,782c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    78a0:	dfc00217 	ldw	ra,8(sp)
    78a4:	dc400117 	ldw	r17,4(sp)
    78a8:	dc000017 	ldw	r16,0(sp)
    78ac:	dec00304 	addi	sp,sp,12
    78b0:	f800283a 	ret

000078b4 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    78b4:	000170fa 	wrctl	ienable,zero
}
    78b8:	f800283a 	ret

000078bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    78bc:	defff904 	addi	sp,sp,-28
    78c0:	dfc00615 	stw	ra,24(sp)
    78c4:	dd400515 	stw	r21,20(sp)
    78c8:	dd000415 	stw	r20,16(sp)
    78cc:	dcc00315 	stw	r19,12(sp)
    78d0:	dc800215 	stw	r18,8(sp)
    78d4:	dc400115 	stw	r17,4(sp)
    78d8:	dc000015 	stw	r16,0(sp)
    78dc:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    78e0:	00800074 	movhi	r2,1
    78e4:	10923504 	addi	r2,r2,18644
    78e8:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    78ec:	102b883a 	mov	r21,r2
    78f0:	88801626 	beq	r17,r2,794c <alt_find_file+0x90>
    78f4:	053fffc4 	movi	r20,-1
    78f8:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    78fc:	8c000217 	ldw	r16,8(r17)
    7900:	8009883a 	mov	r4,r16
    7904:	0007e140 	call	7e14 <strlen>
    7908:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    790c:	8085883a 	add	r2,r16,r2
    7910:	1505883a 	add	r2,r2,r20
    7914:	10800007 	ldb	r2,0(r2)
    7918:	14c0011e 	bne	r2,r19,7920 <alt_find_file+0x64>
    {
      len -= 1;
    791c:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    7920:	1c85883a 	add	r2,r3,r18
    7924:	10800007 	ldb	r2,0(r2)
    7928:	14c00126 	beq	r2,r19,7930 <alt_find_file+0x74>
    792c:	1000051e 	bne	r2,zero,7944 <alt_find_file+0x88>
    7930:	8009883a 	mov	r4,r16
    7934:	900b883a 	mov	r5,r18
    7938:	180d883a 	mov	r6,r3
    793c:	0007a580 	call	7a58 <memcmp>
    7940:	10000326 	beq	r2,zero,7950 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    7944:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    7948:	8d7fec1e 	bne	r17,r21,78fc <alt_find_file+0x40>
    794c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    7950:	8805883a 	mov	r2,r17
    7954:	dfc00617 	ldw	ra,24(sp)
    7958:	dd400517 	ldw	r21,20(sp)
    795c:	dd000417 	ldw	r20,16(sp)
    7960:	dcc00317 	ldw	r19,12(sp)
    7964:	dc800217 	ldw	r18,8(sp)
    7968:	dc400117 	ldw	r17,4(sp)
    796c:	dc000017 	ldw	r16,0(sp)
    7970:	dec00704 	addi	sp,sp,28
    7974:	f800283a 	ret

00007978 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    7978:	000b883a 	mov	r5,zero
    797c:	00c00074 	movhi	r3,1
    7980:	18cfcc04 	addi	r3,r3,16176
    7984:	02000304 	movi	r8,12
    7988:	02400074 	movhi	r9,1
    798c:	4a523904 	addi	r9,r9,18660
    7990:	01c00044 	movi	r7,1
    7994:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    7998:	18800017 	ldw	r2,0(r3)
    799c:	10000c1e 	bne	r2,zero,79d0 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    79a0:	2a05383a 	mul	r2,r5,r8
    79a4:	00c00074 	movhi	r3,1
    79a8:	18cfcc04 	addi	r3,r3,16176
    79ac:	10c5883a 	add	r2,r2,r3
    79b0:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    79b4:	48800017 	ldw	r2,0(r9)
    79b8:	11400216 	blt	r2,r5,79c4 <alt_get_fd+0x4c>
    79bc:	2805883a 	mov	r2,r5
    79c0:	f800283a 	ret
      {
        alt_max_fd = i;
    79c4:	49400015 	stw	r5,0(r9)
    79c8:	2805883a 	mov	r2,r5
    79cc:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    79d0:	29cb883a 	add	r5,r5,r7
    79d4:	1a07883a 	add	r3,r3,r8
    79d8:	29bfef1e 	bne	r5,r6,7998 <alt_get_fd+0x20>
    79dc:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    79e0:	f800283a 	ret

000079e4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    79e4:	2007883a 	mov	r3,r4
    79e8:	00840004 	movi	r2,4096
    79ec:	1140012e 	bgeu	r2,r5,79f4 <alt_icache_flush+0x10>
    79f0:	100b883a 	mov	r5,r2
    79f4:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    79f8:	1940042e 	bgeu	r3,r5,7a0c <alt_icache_flush+0x28>
    79fc:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    7a00:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    7a04:	1887883a 	add	r3,r3,r2
    7a08:	197ffd36 	bltu	r3,r5,7a00 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    7a0c:	208007cc 	andi	r2,r4,31
    7a10:	10000126 	beq	r2,zero,7a18 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    7a14:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    7a18:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    7a1c:	f800283a 	ret

00007a20 <exit>:
    7a20:	defffe04 	addi	sp,sp,-8
    7a24:	000b883a 	mov	r5,zero
    7a28:	dc000015 	stw	r16,0(sp)
    7a2c:	dfc00115 	stw	ra,4(sp)
    7a30:	2021883a 	mov	r16,r4
    7a34:	00081140 	call	8114 <__call_exitprocs>
    7a38:	00800074 	movhi	r2,1
    7a3c:	10923f04 	addi	r2,r2,18684
    7a40:	11000017 	ldw	r4,0(r2)
    7a44:	20800f17 	ldw	r2,60(r4)
    7a48:	10000126 	beq	r2,zero,7a50 <exit+0x30>
    7a4c:	103ee83a 	callr	r2
    7a50:	8009883a 	mov	r4,r16
    7a54:	0009c7c0 	call	9c7c <_exit>

00007a58 <memcmp>:
    7a58:	00c000c4 	movi	r3,3
    7a5c:	1980032e 	bgeu	r3,r6,7a6c <memcmp+0x14>
    7a60:	2144b03a 	or	r2,r4,r5
    7a64:	10c4703a 	and	r2,r2,r3
    7a68:	10000f26 	beq	r2,zero,7aa8 <memcmp+0x50>
    7a6c:	31ffffc4 	addi	r7,r6,-1
    7a70:	3000061e 	bne	r6,zero,7a8c <memcmp+0x34>
    7a74:	00000a06 	br	7aa0 <memcmp+0x48>
    7a78:	39ffffc4 	addi	r7,r7,-1
    7a7c:	00bfffc4 	movi	r2,-1
    7a80:	21000044 	addi	r4,r4,1
    7a84:	29400044 	addi	r5,r5,1
    7a88:	38800526 	beq	r7,r2,7aa0 <memcmp+0x48>
    7a8c:	20c00003 	ldbu	r3,0(r4)
    7a90:	28800003 	ldbu	r2,0(r5)
    7a94:	18bff826 	beq	r3,r2,7a78 <memcmp+0x20>
    7a98:	1885c83a 	sub	r2,r3,r2
    7a9c:	f800283a 	ret
    7aa0:	0005883a 	mov	r2,zero
    7aa4:	f800283a 	ret
    7aa8:	180f883a 	mov	r7,r3
    7aac:	20c00017 	ldw	r3,0(r4)
    7ab0:	28800017 	ldw	r2,0(r5)
    7ab4:	18bfed1e 	bne	r3,r2,7a6c <memcmp+0x14>
    7ab8:	31bfff04 	addi	r6,r6,-4
    7abc:	21000104 	addi	r4,r4,4
    7ac0:	29400104 	addi	r5,r5,4
    7ac4:	39bff936 	bltu	r7,r6,7aac <memcmp+0x54>
    7ac8:	003fe806 	br	7a6c <memcmp+0x14>

00007acc <memcpy>:
    7acc:	01c003c4 	movi	r7,15
    7ad0:	2007883a 	mov	r3,r4
    7ad4:	3980032e 	bgeu	r7,r6,7ae4 <memcpy+0x18>
    7ad8:	2904b03a 	or	r2,r5,r4
    7adc:	108000cc 	andi	r2,r2,3
    7ae0:	10000926 	beq	r2,zero,7b08 <memcpy+0x3c>
    7ae4:	30000626 	beq	r6,zero,7b00 <memcpy+0x34>
    7ae8:	30cd883a 	add	r6,r6,r3
    7aec:	28800003 	ldbu	r2,0(r5)
    7af0:	29400044 	addi	r5,r5,1
    7af4:	18800005 	stb	r2,0(r3)
    7af8:	18c00044 	addi	r3,r3,1
    7afc:	30fffb1e 	bne	r6,r3,7aec <memcpy+0x20>
    7b00:	2005883a 	mov	r2,r4
    7b04:	f800283a 	ret
    7b08:	3811883a 	mov	r8,r7
    7b0c:	200f883a 	mov	r7,r4
    7b10:	28c00017 	ldw	r3,0(r5)
    7b14:	31bffc04 	addi	r6,r6,-16
    7b18:	38c00015 	stw	r3,0(r7)
    7b1c:	28800117 	ldw	r2,4(r5)
    7b20:	38800115 	stw	r2,4(r7)
    7b24:	28c00217 	ldw	r3,8(r5)
    7b28:	38c00215 	stw	r3,8(r7)
    7b2c:	28800317 	ldw	r2,12(r5)
    7b30:	29400404 	addi	r5,r5,16
    7b34:	38800315 	stw	r2,12(r7)
    7b38:	39c00404 	addi	r7,r7,16
    7b3c:	41bff436 	bltu	r8,r6,7b10 <memcpy+0x44>
    7b40:	008000c4 	movi	r2,3
    7b44:	1180072e 	bgeu	r2,r6,7b64 <memcpy+0x98>
    7b48:	1007883a 	mov	r3,r2
    7b4c:	28800017 	ldw	r2,0(r5)
    7b50:	31bfff04 	addi	r6,r6,-4
    7b54:	29400104 	addi	r5,r5,4
    7b58:	38800015 	stw	r2,0(r7)
    7b5c:	39c00104 	addi	r7,r7,4
    7b60:	19bffa36 	bltu	r3,r6,7b4c <memcpy+0x80>
    7b64:	3807883a 	mov	r3,r7
    7b68:	003fde06 	br	7ae4 <memcpy+0x18>

00007b6c <putc>:
    7b6c:	defffc04 	addi	sp,sp,-16
    7b70:	dc800215 	stw	r18,8(sp)
    7b74:	04800074 	movhi	r18,1
    7b78:	94923e04 	addi	r18,r18,18680
    7b7c:	90c00017 	ldw	r3,0(r18)
    7b80:	dc400115 	stw	r17,4(sp)
    7b84:	dc000015 	stw	r16,0(sp)
    7b88:	dfc00315 	stw	ra,12(sp)
    7b8c:	2023883a 	mov	r17,r4
    7b90:	2821883a 	mov	r16,r5
    7b94:	18000226 	beq	r3,zero,7ba0 <putc+0x34>
    7b98:	18800e17 	ldw	r2,56(r3)
    7b9c:	10001126 	beq	r2,zero,7be4 <putc+0x78>
    7ba0:	80800217 	ldw	r2,8(r16)
    7ba4:	10ffffc4 	addi	r3,r2,-1
    7ba8:	80c00215 	stw	r3,8(r16)
    7bac:	18001316 	blt	r3,zero,7bfc <putc+0x90>
    7bb0:	80800017 	ldw	r2,0(r16)
    7bb4:	14400005 	stb	r17,0(r2)
    7bb8:	80c00017 	ldw	r3,0(r16)
    7bbc:	18800044 	addi	r2,r3,1
    7bc0:	18c00003 	ldbu	r3,0(r3)
    7bc4:	80800015 	stw	r2,0(r16)
    7bc8:	1805883a 	mov	r2,r3
    7bcc:	dfc00317 	ldw	ra,12(sp)
    7bd0:	dc800217 	ldw	r18,8(sp)
    7bd4:	dc400117 	ldw	r17,4(sp)
    7bd8:	dc000017 	ldw	r16,0(sp)
    7bdc:	dec00404 	addi	sp,sp,16
    7be0:	f800283a 	ret
    7be4:	1809883a 	mov	r4,r3
    7be8:	000855c0 	call	855c <__sinit>
    7bec:	80800217 	ldw	r2,8(r16)
    7bf0:	10ffffc4 	addi	r3,r2,-1
    7bf4:	80c00215 	stw	r3,8(r16)
    7bf8:	183fed0e 	bge	r3,zero,7bb0 <putc+0x44>
    7bfc:	80800617 	ldw	r2,24(r16)
    7c00:	18800f16 	blt	r3,r2,7c40 <putc+0xd4>
    7c04:	80800017 	ldw	r2,0(r16)
    7c08:	14400005 	stb	r17,0(r2)
    7c0c:	81000017 	ldw	r4,0(r16)
    7c10:	00800284 	movi	r2,10
    7c14:	20c00003 	ldbu	r3,0(r4)
    7c18:	18801226 	beq	r3,r2,7c64 <putc+0xf8>
    7c1c:	20800044 	addi	r2,r4,1
    7c20:	80800015 	stw	r2,0(r16)
    7c24:	1805883a 	mov	r2,r3
    7c28:	dfc00317 	ldw	ra,12(sp)
    7c2c:	dc800217 	ldw	r18,8(sp)
    7c30:	dc400117 	ldw	r17,4(sp)
    7c34:	dc000017 	ldw	r16,0(sp)
    7c38:	dec00404 	addi	sp,sp,16
    7c3c:	f800283a 	ret
    7c40:	91000017 	ldw	r4,0(r18)
    7c44:	880b883a 	mov	r5,r17
    7c48:	800d883a 	mov	r6,r16
    7c4c:	dfc00317 	ldw	ra,12(sp)
    7c50:	dc800217 	ldw	r18,8(sp)
    7c54:	dc400117 	ldw	r17,4(sp)
    7c58:	dc000017 	ldw	r16,0(sp)
    7c5c:	dec00404 	addi	sp,sp,16
    7c60:	0007e881 	jmpi	7e88 <__swbuf_r>
    7c64:	91000017 	ldw	r4,0(r18)
    7c68:	180b883a 	mov	r5,r3
    7c6c:	003ff606 	br	7c48 <putc+0xdc>

00007c70 <_putc_r>:
    7c70:	defffc04 	addi	sp,sp,-16
    7c74:	dc400215 	stw	r17,8(sp)
    7c78:	dc000115 	stw	r16,4(sp)
    7c7c:	dfc00315 	stw	ra,12(sp)
    7c80:	2021883a 	mov	r16,r4
    7c84:	2823883a 	mov	r17,r5
    7c88:	20000226 	beq	r4,zero,7c94 <_putc_r+0x24>
    7c8c:	20800e17 	ldw	r2,56(r4)
    7c90:	10001026 	beq	r2,zero,7cd4 <_putc_r+0x64>
    7c94:	30800217 	ldw	r2,8(r6)
    7c98:	10ffffc4 	addi	r3,r2,-1
    7c9c:	30c00215 	stw	r3,8(r6)
    7ca0:	18001316 	blt	r3,zero,7cf0 <_putc_r+0x80>
    7ca4:	30800017 	ldw	r2,0(r6)
    7ca8:	14400005 	stb	r17,0(r2)
    7cac:	30c00017 	ldw	r3,0(r6)
    7cb0:	18800044 	addi	r2,r3,1
    7cb4:	18c00003 	ldbu	r3,0(r3)
    7cb8:	30800015 	stw	r2,0(r6)
    7cbc:	1805883a 	mov	r2,r3
    7cc0:	dfc00317 	ldw	ra,12(sp)
    7cc4:	dc400217 	ldw	r17,8(sp)
    7cc8:	dc000117 	ldw	r16,4(sp)
    7ccc:	dec00404 	addi	sp,sp,16
    7cd0:	f800283a 	ret
    7cd4:	d9800015 	stw	r6,0(sp)
    7cd8:	000855c0 	call	855c <__sinit>
    7cdc:	d9800017 	ldw	r6,0(sp)
    7ce0:	30800217 	ldw	r2,8(r6)
    7ce4:	10ffffc4 	addi	r3,r2,-1
    7ce8:	30c00215 	stw	r3,8(r6)
    7cec:	183fed0e 	bge	r3,zero,7ca4 <_putc_r+0x34>
    7cf0:	30800617 	ldw	r2,24(r6)
    7cf4:	18800e16 	blt	r3,r2,7d30 <_putc_r+0xc0>
    7cf8:	30800017 	ldw	r2,0(r6)
    7cfc:	14400005 	stb	r17,0(r2)
    7d00:	31000017 	ldw	r4,0(r6)
    7d04:	00800284 	movi	r2,10
    7d08:	20c00003 	ldbu	r3,0(r4)
    7d0c:	18800f26 	beq	r3,r2,7d4c <_putc_r+0xdc>
    7d10:	20800044 	addi	r2,r4,1
    7d14:	30800015 	stw	r2,0(r6)
    7d18:	1805883a 	mov	r2,r3
    7d1c:	dfc00317 	ldw	ra,12(sp)
    7d20:	dc400217 	ldw	r17,8(sp)
    7d24:	dc000117 	ldw	r16,4(sp)
    7d28:	dec00404 	addi	sp,sp,16
    7d2c:	f800283a 	ret
    7d30:	8009883a 	mov	r4,r16
    7d34:	880b883a 	mov	r5,r17
    7d38:	dfc00317 	ldw	ra,12(sp)
    7d3c:	dc400217 	ldw	r17,8(sp)
    7d40:	dc000117 	ldw	r16,4(sp)
    7d44:	dec00404 	addi	sp,sp,16
    7d48:	0007e881 	jmpi	7e88 <__swbuf_r>
    7d4c:	8009883a 	mov	r4,r16
    7d50:	180b883a 	mov	r5,r3
    7d54:	003ff806 	br	7d38 <_putc_r+0xc8>

00007d58 <strcmp>:
    7d58:	2144b03a 	or	r2,r4,r5
    7d5c:	108000cc 	andi	r2,r2,3
    7d60:	10001d1e 	bne	r2,zero,7dd8 <strcmp+0x80>
    7d64:	200f883a 	mov	r7,r4
    7d68:	28800017 	ldw	r2,0(r5)
    7d6c:	21000017 	ldw	r4,0(r4)
    7d70:	280d883a 	mov	r6,r5
    7d74:	2080161e 	bne	r4,r2,7dd0 <strcmp+0x78>
    7d78:	023fbff4 	movhi	r8,65279
    7d7c:	423fbfc4 	addi	r8,r8,-257
    7d80:	2207883a 	add	r3,r4,r8
    7d84:	01602074 	movhi	r5,32897
    7d88:	29602004 	addi	r5,r5,-32640
    7d8c:	1946703a 	and	r3,r3,r5
    7d90:	0104303a 	nor	r2,zero,r4
    7d94:	10c4703a 	and	r2,r2,r3
    7d98:	10001c1e 	bne	r2,zero,7e0c <strcmp+0xb4>
    7d9c:	4013883a 	mov	r9,r8
    7da0:	2811883a 	mov	r8,r5
    7da4:	00000106 	br	7dac <strcmp+0x54>
    7da8:	1800181e 	bne	r3,zero,7e0c <strcmp+0xb4>
    7dac:	39c00104 	addi	r7,r7,4
    7db0:	39000017 	ldw	r4,0(r7)
    7db4:	31800104 	addi	r6,r6,4
    7db8:	31400017 	ldw	r5,0(r6)
    7dbc:	2245883a 	add	r2,r4,r9
    7dc0:	1204703a 	and	r2,r2,r8
    7dc4:	0106303a 	nor	r3,zero,r4
    7dc8:	1886703a 	and	r3,r3,r2
    7dcc:	217ff626 	beq	r4,r5,7da8 <strcmp+0x50>
    7dd0:	3809883a 	mov	r4,r7
    7dd4:	300b883a 	mov	r5,r6
    7dd8:	20c00007 	ldb	r3,0(r4)
    7ddc:	1800051e 	bne	r3,zero,7df4 <strcmp+0x9c>
    7de0:	00000606 	br	7dfc <strcmp+0xa4>
    7de4:	21000044 	addi	r4,r4,1
    7de8:	20c00007 	ldb	r3,0(r4)
    7dec:	29400044 	addi	r5,r5,1
    7df0:	18000226 	beq	r3,zero,7dfc <strcmp+0xa4>
    7df4:	28800007 	ldb	r2,0(r5)
    7df8:	18bffa26 	beq	r3,r2,7de4 <strcmp+0x8c>
    7dfc:	20c00003 	ldbu	r3,0(r4)
    7e00:	28800003 	ldbu	r2,0(r5)
    7e04:	1885c83a 	sub	r2,r3,r2
    7e08:	f800283a 	ret
    7e0c:	0005883a 	mov	r2,zero
    7e10:	f800283a 	ret

00007e14 <strlen>:
    7e14:	208000cc 	andi	r2,r4,3
    7e18:	2011883a 	mov	r8,r4
    7e1c:	1000161e 	bne	r2,zero,7e78 <strlen+0x64>
    7e20:	20c00017 	ldw	r3,0(r4)
    7e24:	017fbff4 	movhi	r5,65279
    7e28:	297fbfc4 	addi	r5,r5,-257
    7e2c:	01e02074 	movhi	r7,32897
    7e30:	39e02004 	addi	r7,r7,-32640
    7e34:	1945883a 	add	r2,r3,r5
    7e38:	11c4703a 	and	r2,r2,r7
    7e3c:	00c6303a 	nor	r3,zero,r3
    7e40:	1886703a 	and	r3,r3,r2
    7e44:	18000c1e 	bne	r3,zero,7e78 <strlen+0x64>
    7e48:	280d883a 	mov	r6,r5
    7e4c:	380b883a 	mov	r5,r7
    7e50:	21000104 	addi	r4,r4,4
    7e54:	20800017 	ldw	r2,0(r4)
    7e58:	1187883a 	add	r3,r2,r6
    7e5c:	1946703a 	and	r3,r3,r5
    7e60:	0084303a 	nor	r2,zero,r2
    7e64:	10c4703a 	and	r2,r2,r3
    7e68:	103ff926 	beq	r2,zero,7e50 <strlen+0x3c>
    7e6c:	20800007 	ldb	r2,0(r4)
    7e70:	10000326 	beq	r2,zero,7e80 <strlen+0x6c>
    7e74:	21000044 	addi	r4,r4,1
    7e78:	20800007 	ldb	r2,0(r4)
    7e7c:	103ffd1e 	bne	r2,zero,7e74 <strlen+0x60>
    7e80:	2205c83a 	sub	r2,r4,r8
    7e84:	f800283a 	ret

00007e88 <__swbuf_r>:
    7e88:	defffc04 	addi	sp,sp,-16
    7e8c:	dc400215 	stw	r17,8(sp)
    7e90:	dc000115 	stw	r16,4(sp)
    7e94:	dfc00315 	stw	ra,12(sp)
    7e98:	2023883a 	mov	r17,r4
    7e9c:	2821883a 	mov	r16,r5
    7ea0:	20000226 	beq	r4,zero,7eac <__swbuf_r+0x24>
    7ea4:	20800e17 	ldw	r2,56(r4)
    7ea8:	10002f26 	beq	r2,zero,7f68 <__swbuf_r+0xe0>
    7eac:	3080030b 	ldhu	r2,12(r6)
    7eb0:	30c00617 	ldw	r3,24(r6)
    7eb4:	1080020c 	andi	r2,r2,8
    7eb8:	30c00215 	stw	r3,8(r6)
    7ebc:	10002226 	beq	r2,zero,7f48 <__swbuf_r+0xc0>
    7ec0:	30c00417 	ldw	r3,16(r6)
    7ec4:	18002026 	beq	r3,zero,7f48 <__swbuf_r+0xc0>
    7ec8:	31000017 	ldw	r4,0(r6)
    7ecc:	30800517 	ldw	r2,20(r6)
    7ed0:	20c7c83a 	sub	r3,r4,r3
    7ed4:	18802f0e 	bge	r3,r2,7f94 <__swbuf_r+0x10c>
    7ed8:	19400044 	addi	r5,r3,1
    7edc:	30800217 	ldw	r2,8(r6)
    7ee0:	84003fcc 	andi	r16,r16,255
    7ee4:	20c00044 	addi	r3,r4,1
    7ee8:	10bfffc4 	addi	r2,r2,-1
    7eec:	30800215 	stw	r2,8(r6)
    7ef0:	24000005 	stb	r16,0(r4)
    7ef4:	30800517 	ldw	r2,20(r6)
    7ef8:	30c00015 	stw	r3,0(r6)
    7efc:	11400c26 	beq	r2,r5,7f30 <__swbuf_r+0xa8>
    7f00:	3080030b 	ldhu	r2,12(r6)
    7f04:	1080004c 	andi	r2,r2,1
    7f08:	1005003a 	cmpeq	r2,r2,zero
    7f0c:	10000626 	beq	r2,zero,7f28 <__swbuf_r+0xa0>
    7f10:	8005883a 	mov	r2,r16
    7f14:	dfc00317 	ldw	ra,12(sp)
    7f18:	dc400217 	ldw	r17,8(sp)
    7f1c:	dc000117 	ldw	r16,4(sp)
    7f20:	dec00404 	addi	sp,sp,16
    7f24:	f800283a 	ret
    7f28:	00800284 	movi	r2,10
    7f2c:	80bff81e 	bne	r16,r2,7f10 <__swbuf_r+0x88>
    7f30:	8809883a 	mov	r4,r17
    7f34:	300b883a 	mov	r5,r6
    7f38:	00082c40 	call	82c4 <_fflush_r>
    7f3c:	103ff426 	beq	r2,zero,7f10 <__swbuf_r+0x88>
    7f40:	043fffc4 	movi	r16,-1
    7f44:	003ff206 	br	7f10 <__swbuf_r+0x88>
    7f48:	300b883a 	mov	r5,r6
    7f4c:	8809883a 	mov	r4,r17
    7f50:	d9800015 	stw	r6,0(sp)
    7f54:	0007fd40 	call	7fd4 <__swsetup_r>
    7f58:	d9800017 	ldw	r6,0(sp)
    7f5c:	1000061e 	bne	r2,zero,7f78 <__swbuf_r+0xf0>
    7f60:	30c00417 	ldw	r3,16(r6)
    7f64:	003fd806 	br	7ec8 <__swbuf_r+0x40>
    7f68:	d9800015 	stw	r6,0(sp)
    7f6c:	000855c0 	call	855c <__sinit>
    7f70:	d9800017 	ldw	r6,0(sp)
    7f74:	003fcd06 	br	7eac <__swbuf_r+0x24>
    7f78:	3080030b 	ldhu	r2,12(r6)
    7f7c:	00c00244 	movi	r3,9
    7f80:	043fffc4 	movi	r16,-1
    7f84:	10801014 	ori	r2,r2,64
    7f88:	3080030d 	sth	r2,12(r6)
    7f8c:	88c00015 	stw	r3,0(r17)
    7f90:	003fdf06 	br	7f10 <__swbuf_r+0x88>
    7f94:	300b883a 	mov	r5,r6
    7f98:	8809883a 	mov	r4,r17
    7f9c:	d9800015 	stw	r6,0(sp)
    7fa0:	00082c40 	call	82c4 <_fflush_r>
    7fa4:	d9800017 	ldw	r6,0(sp)
    7fa8:	103fe51e 	bne	r2,zero,7f40 <__swbuf_r+0xb8>
    7fac:	31000017 	ldw	r4,0(r6)
    7fb0:	01400044 	movi	r5,1
    7fb4:	003fc906 	br	7edc <__swbuf_r+0x54>

00007fb8 <__swbuf>:
    7fb8:	01800074 	movhi	r6,1
    7fbc:	31923e04 	addi	r6,r6,18680
    7fc0:	2007883a 	mov	r3,r4
    7fc4:	31000017 	ldw	r4,0(r6)
    7fc8:	280d883a 	mov	r6,r5
    7fcc:	180b883a 	mov	r5,r3
    7fd0:	0007e881 	jmpi	7e88 <__swbuf_r>

00007fd4 <__swsetup_r>:
    7fd4:	00800074 	movhi	r2,1
    7fd8:	10923e04 	addi	r2,r2,18680
    7fdc:	10c00017 	ldw	r3,0(r2)
    7fe0:	defffd04 	addi	sp,sp,-12
    7fe4:	dc400115 	stw	r17,4(sp)
    7fe8:	dc000015 	stw	r16,0(sp)
    7fec:	dfc00215 	stw	ra,8(sp)
    7ff0:	2023883a 	mov	r17,r4
    7ff4:	2821883a 	mov	r16,r5
    7ff8:	18000226 	beq	r3,zero,8004 <__swsetup_r+0x30>
    7ffc:	18800e17 	ldw	r2,56(r3)
    8000:	10001f26 	beq	r2,zero,8080 <__swsetup_r+0xac>
    8004:	8100030b 	ldhu	r4,12(r16)
    8008:	2080020c 	andi	r2,r4,8
    800c:	10002826 	beq	r2,zero,80b0 <__swsetup_r+0xdc>
    8010:	81400417 	ldw	r5,16(r16)
    8014:	28001d26 	beq	r5,zero,808c <__swsetup_r+0xb8>
    8018:	2080004c 	andi	r2,r4,1
    801c:	1005003a 	cmpeq	r2,r2,zero
    8020:	10000b26 	beq	r2,zero,8050 <__swsetup_r+0x7c>
    8024:	2080008c 	andi	r2,r4,2
    8028:	10001226 	beq	r2,zero,8074 <__swsetup_r+0xa0>
    802c:	0005883a 	mov	r2,zero
    8030:	80800215 	stw	r2,8(r16)
    8034:	28000b26 	beq	r5,zero,8064 <__swsetup_r+0x90>
    8038:	0005883a 	mov	r2,zero
    803c:	dfc00217 	ldw	ra,8(sp)
    8040:	dc400117 	ldw	r17,4(sp)
    8044:	dc000017 	ldw	r16,0(sp)
    8048:	dec00304 	addi	sp,sp,12
    804c:	f800283a 	ret
    8050:	80800517 	ldw	r2,20(r16)
    8054:	80000215 	stw	zero,8(r16)
    8058:	0085c83a 	sub	r2,zero,r2
    805c:	80800615 	stw	r2,24(r16)
    8060:	283ff51e 	bne	r5,zero,8038 <__swsetup_r+0x64>
    8064:	2080200c 	andi	r2,r4,128
    8068:	103ff326 	beq	r2,zero,8038 <__swsetup_r+0x64>
    806c:	00bfffc4 	movi	r2,-1
    8070:	003ff206 	br	803c <__swsetup_r+0x68>
    8074:	80800517 	ldw	r2,20(r16)
    8078:	80800215 	stw	r2,8(r16)
    807c:	003fed06 	br	8034 <__swsetup_r+0x60>
    8080:	1809883a 	mov	r4,r3
    8084:	000855c0 	call	855c <__sinit>
    8088:	003fde06 	br	8004 <__swsetup_r+0x30>
    808c:	20c0a00c 	andi	r3,r4,640
    8090:	00808004 	movi	r2,512
    8094:	18bfe026 	beq	r3,r2,8018 <__swsetup_r+0x44>
    8098:	8809883a 	mov	r4,r17
    809c:	800b883a 	mov	r5,r16
    80a0:	0008d740 	call	8d74 <__smakebuf_r>
    80a4:	8100030b 	ldhu	r4,12(r16)
    80a8:	81400417 	ldw	r5,16(r16)
    80ac:	003fda06 	br	8018 <__swsetup_r+0x44>
    80b0:	2080040c 	andi	r2,r4,16
    80b4:	103fed26 	beq	r2,zero,806c <__swsetup_r+0x98>
    80b8:	2080010c 	andi	r2,r4,4
    80bc:	10001226 	beq	r2,zero,8108 <__swsetup_r+0x134>
    80c0:	81400c17 	ldw	r5,48(r16)
    80c4:	28000526 	beq	r5,zero,80dc <__swsetup_r+0x108>
    80c8:	80801004 	addi	r2,r16,64
    80cc:	28800226 	beq	r5,r2,80d8 <__swsetup_r+0x104>
    80d0:	8809883a 	mov	r4,r17
    80d4:	00088e00 	call	88e0 <_free_r>
    80d8:	80000c15 	stw	zero,48(r16)
    80dc:	8080030b 	ldhu	r2,12(r16)
    80e0:	81400417 	ldw	r5,16(r16)
    80e4:	80000115 	stw	zero,4(r16)
    80e8:	10bff6cc 	andi	r2,r2,65499
    80ec:	8080030d 	sth	r2,12(r16)
    80f0:	81400015 	stw	r5,0(r16)
    80f4:	8080030b 	ldhu	r2,12(r16)
    80f8:	10800214 	ori	r2,r2,8
    80fc:	113fffcc 	andi	r4,r2,65535
    8100:	8080030d 	sth	r2,12(r16)
    8104:	003fc306 	br	8014 <__swsetup_r+0x40>
    8108:	81400417 	ldw	r5,16(r16)
    810c:	003ff906 	br	80f4 <__swsetup_r+0x120>

00008110 <register_fini>:
    8110:	f800283a 	ret

00008114 <__call_exitprocs>:
    8114:	00800074 	movhi	r2,1
    8118:	10923f04 	addi	r2,r2,18684
    811c:	10800017 	ldw	r2,0(r2)
    8120:	defff304 	addi	sp,sp,-52
    8124:	df000b15 	stw	fp,44(sp)
    8128:	d8800115 	stw	r2,4(sp)
    812c:	00800034 	movhi	r2,0
    8130:	10800004 	addi	r2,r2,0
    8134:	1005003a 	cmpeq	r2,r2,zero
    8138:	d8800215 	stw	r2,8(sp)
    813c:	d8800117 	ldw	r2,4(sp)
    8140:	dd400815 	stw	r21,32(sp)
    8144:	dd000715 	stw	r20,28(sp)
    8148:	10805204 	addi	r2,r2,328
    814c:	dfc00c15 	stw	ra,48(sp)
    8150:	ddc00a15 	stw	r23,40(sp)
    8154:	dd800915 	stw	r22,36(sp)
    8158:	dcc00615 	stw	r19,24(sp)
    815c:	dc800515 	stw	r18,20(sp)
    8160:	dc400415 	stw	r17,16(sp)
    8164:	dc000315 	stw	r16,12(sp)
    8168:	282b883a 	mov	r21,r5
    816c:	2039883a 	mov	fp,r4
    8170:	d8800015 	stw	r2,0(sp)
    8174:	2829003a 	cmpeq	r20,r5,zero
    8178:	d8800117 	ldw	r2,4(sp)
    817c:	14405217 	ldw	r17,328(r2)
    8180:	88001026 	beq	r17,zero,81c4 <__call_exitprocs+0xb0>
    8184:	ddc00017 	ldw	r23,0(sp)
    8188:	88800117 	ldw	r2,4(r17)
    818c:	8c802204 	addi	r18,r17,136
    8190:	143fffc4 	addi	r16,r2,-1
    8194:	80000916 	blt	r16,zero,81bc <__call_exitprocs+0xa8>
    8198:	05bfffc4 	movi	r22,-1
    819c:	a000151e 	bne	r20,zero,81f4 <__call_exitprocs+0xe0>
    81a0:	8409883a 	add	r4,r16,r16
    81a4:	2105883a 	add	r2,r4,r4
    81a8:	1485883a 	add	r2,r2,r18
    81ac:	10c02017 	ldw	r3,128(r2)
    81b0:	a8c01126 	beq	r21,r3,81f8 <__call_exitprocs+0xe4>
    81b4:	843fffc4 	addi	r16,r16,-1
    81b8:	85bff81e 	bne	r16,r22,819c <__call_exitprocs+0x88>
    81bc:	d8800217 	ldw	r2,8(sp)
    81c0:	10003126 	beq	r2,zero,8288 <__call_exitprocs+0x174>
    81c4:	dfc00c17 	ldw	ra,48(sp)
    81c8:	df000b17 	ldw	fp,44(sp)
    81cc:	ddc00a17 	ldw	r23,40(sp)
    81d0:	dd800917 	ldw	r22,36(sp)
    81d4:	dd400817 	ldw	r21,32(sp)
    81d8:	dd000717 	ldw	r20,28(sp)
    81dc:	dcc00617 	ldw	r19,24(sp)
    81e0:	dc800517 	ldw	r18,20(sp)
    81e4:	dc400417 	ldw	r17,16(sp)
    81e8:	dc000317 	ldw	r16,12(sp)
    81ec:	dec00d04 	addi	sp,sp,52
    81f0:	f800283a 	ret
    81f4:	8409883a 	add	r4,r16,r16
    81f8:	88c00117 	ldw	r3,4(r17)
    81fc:	2105883a 	add	r2,r4,r4
    8200:	1445883a 	add	r2,r2,r17
    8204:	18ffffc4 	addi	r3,r3,-1
    8208:	11800217 	ldw	r6,8(r2)
    820c:	1c001526 	beq	r3,r16,8264 <__call_exitprocs+0x150>
    8210:	10000215 	stw	zero,8(r2)
    8214:	303fe726 	beq	r6,zero,81b4 <__call_exitprocs+0xa0>
    8218:	00c00044 	movi	r3,1
    821c:	1c06983a 	sll	r3,r3,r16
    8220:	90804017 	ldw	r2,256(r18)
    8224:	8cc00117 	ldw	r19,4(r17)
    8228:	1884703a 	and	r2,r3,r2
    822c:	10001426 	beq	r2,zero,8280 <__call_exitprocs+0x16c>
    8230:	90804117 	ldw	r2,260(r18)
    8234:	1884703a 	and	r2,r3,r2
    8238:	10000c1e 	bne	r2,zero,826c <__call_exitprocs+0x158>
    823c:	2105883a 	add	r2,r4,r4
    8240:	1485883a 	add	r2,r2,r18
    8244:	11400017 	ldw	r5,0(r2)
    8248:	e009883a 	mov	r4,fp
    824c:	303ee83a 	callr	r6
    8250:	88800117 	ldw	r2,4(r17)
    8254:	98bfc81e 	bne	r19,r2,8178 <__call_exitprocs+0x64>
    8258:	b8800017 	ldw	r2,0(r23)
    825c:	147fd526 	beq	r2,r17,81b4 <__call_exitprocs+0xa0>
    8260:	003fc506 	br	8178 <__call_exitprocs+0x64>
    8264:	8c000115 	stw	r16,4(r17)
    8268:	003fea06 	br	8214 <__call_exitprocs+0x100>
    826c:	2105883a 	add	r2,r4,r4
    8270:	1485883a 	add	r2,r2,r18
    8274:	11000017 	ldw	r4,0(r2)
    8278:	303ee83a 	callr	r6
    827c:	003ff406 	br	8250 <__call_exitprocs+0x13c>
    8280:	303ee83a 	callr	r6
    8284:	003ff206 	br	8250 <__call_exitprocs+0x13c>
    8288:	88800117 	ldw	r2,4(r17)
    828c:	1000081e 	bne	r2,zero,82b0 <__call_exitprocs+0x19c>
    8290:	89000017 	ldw	r4,0(r17)
    8294:	20000726 	beq	r4,zero,82b4 <__call_exitprocs+0x1a0>
    8298:	b9000015 	stw	r4,0(r23)
    829c:	8809883a 	mov	r4,r17
    82a0:	00000000 	call	0 <__alt_mem_SDRAM>
    82a4:	bc400017 	ldw	r17,0(r23)
    82a8:	883fb71e 	bne	r17,zero,8188 <__call_exitprocs+0x74>
    82ac:	003fc506 	br	81c4 <__call_exitprocs+0xb0>
    82b0:	89000017 	ldw	r4,0(r17)
    82b4:	882f883a 	mov	r23,r17
    82b8:	2023883a 	mov	r17,r4
    82bc:	883fb21e 	bne	r17,zero,8188 <__call_exitprocs+0x74>
    82c0:	003fc006 	br	81c4 <__call_exitprocs+0xb0>

000082c4 <_fflush_r>:
    82c4:	defffb04 	addi	sp,sp,-20
    82c8:	dcc00315 	stw	r19,12(sp)
    82cc:	dc800215 	stw	r18,8(sp)
    82d0:	dfc00415 	stw	ra,16(sp)
    82d4:	dc400115 	stw	r17,4(sp)
    82d8:	dc000015 	stw	r16,0(sp)
    82dc:	2027883a 	mov	r19,r4
    82e0:	2825883a 	mov	r18,r5
    82e4:	20000226 	beq	r4,zero,82f0 <_fflush_r+0x2c>
    82e8:	20800e17 	ldw	r2,56(r4)
    82ec:	10005626 	beq	r2,zero,8448 <_fflush_r+0x184>
    82f0:	9100030b 	ldhu	r4,12(r18)
    82f4:	20ffffcc 	andi	r3,r4,65535
    82f8:	18e0001c 	xori	r3,r3,32768
    82fc:	18e00004 	addi	r3,r3,-32768
    8300:	1880020c 	andi	r2,r3,8
    8304:	1000261e 	bne	r2,zero,83a0 <_fflush_r+0xdc>
    8308:	90c00117 	ldw	r3,4(r18)
    830c:	20820014 	ori	r2,r4,2048
    8310:	9080030d 	sth	r2,12(r18)
    8314:	1009883a 	mov	r4,r2
    8318:	00c0400e 	bge	zero,r3,841c <_fflush_r+0x158>
    831c:	92000a17 	ldw	r8,40(r18)
    8320:	40004026 	beq	r8,zero,8424 <_fflush_r+0x160>
    8324:	2084000c 	andi	r2,r4,4096
    8328:	10005326 	beq	r2,zero,8478 <_fflush_r+0x1b4>
    832c:	94001417 	ldw	r16,80(r18)
    8330:	9080030b 	ldhu	r2,12(r18)
    8334:	1080010c 	andi	r2,r2,4
    8338:	1000481e 	bne	r2,zero,845c <_fflush_r+0x198>
    833c:	91400717 	ldw	r5,28(r18)
    8340:	9809883a 	mov	r4,r19
    8344:	800d883a 	mov	r6,r16
    8348:	000f883a 	mov	r7,zero
    834c:	403ee83a 	callr	r8
    8350:	8080261e 	bne	r16,r2,83ec <_fflush_r+0x128>
    8354:	9080030b 	ldhu	r2,12(r18)
    8358:	91000417 	ldw	r4,16(r18)
    835c:	90000115 	stw	zero,4(r18)
    8360:	10bdffcc 	andi	r2,r2,63487
    8364:	10ffffcc 	andi	r3,r2,65535
    8368:	18c4000c 	andi	r3,r3,4096
    836c:	9080030d 	sth	r2,12(r18)
    8370:	91000015 	stw	r4,0(r18)
    8374:	18002b26 	beq	r3,zero,8424 <_fflush_r+0x160>
    8378:	0007883a 	mov	r3,zero
    837c:	1805883a 	mov	r2,r3
    8380:	94001415 	stw	r16,80(r18)
    8384:	dfc00417 	ldw	ra,16(sp)
    8388:	dcc00317 	ldw	r19,12(sp)
    838c:	dc800217 	ldw	r18,8(sp)
    8390:	dc400117 	ldw	r17,4(sp)
    8394:	dc000017 	ldw	r16,0(sp)
    8398:	dec00504 	addi	sp,sp,20
    839c:	f800283a 	ret
    83a0:	94400417 	ldw	r17,16(r18)
    83a4:	88001f26 	beq	r17,zero,8424 <_fflush_r+0x160>
    83a8:	90800017 	ldw	r2,0(r18)
    83ac:	18c000cc 	andi	r3,r3,3
    83b0:	94400015 	stw	r17,0(r18)
    83b4:	1461c83a 	sub	r16,r2,r17
    83b8:	18002526 	beq	r3,zero,8450 <_fflush_r+0x18c>
    83bc:	0005883a 	mov	r2,zero
    83c0:	90800215 	stw	r2,8(r18)
    83c4:	0400170e 	bge	zero,r16,8424 <_fflush_r+0x160>
    83c8:	90c00917 	ldw	r3,36(r18)
    83cc:	91400717 	ldw	r5,28(r18)
    83d0:	880d883a 	mov	r6,r17
    83d4:	800f883a 	mov	r7,r16
    83d8:	9809883a 	mov	r4,r19
    83dc:	183ee83a 	callr	r3
    83e0:	88a3883a 	add	r17,r17,r2
    83e4:	80a1c83a 	sub	r16,r16,r2
    83e8:	00bff616 	blt	zero,r2,83c4 <_fflush_r+0x100>
    83ec:	9080030b 	ldhu	r2,12(r18)
    83f0:	00ffffc4 	movi	r3,-1
    83f4:	10801014 	ori	r2,r2,64
    83f8:	9080030d 	sth	r2,12(r18)
    83fc:	1805883a 	mov	r2,r3
    8400:	dfc00417 	ldw	ra,16(sp)
    8404:	dcc00317 	ldw	r19,12(sp)
    8408:	dc800217 	ldw	r18,8(sp)
    840c:	dc400117 	ldw	r17,4(sp)
    8410:	dc000017 	ldw	r16,0(sp)
    8414:	dec00504 	addi	sp,sp,20
    8418:	f800283a 	ret
    841c:	90800f17 	ldw	r2,60(r18)
    8420:	00bfbe16 	blt	zero,r2,831c <_fflush_r+0x58>
    8424:	0007883a 	mov	r3,zero
    8428:	1805883a 	mov	r2,r3
    842c:	dfc00417 	ldw	ra,16(sp)
    8430:	dcc00317 	ldw	r19,12(sp)
    8434:	dc800217 	ldw	r18,8(sp)
    8438:	dc400117 	ldw	r17,4(sp)
    843c:	dc000017 	ldw	r16,0(sp)
    8440:	dec00504 	addi	sp,sp,20
    8444:	f800283a 	ret
    8448:	000855c0 	call	855c <__sinit>
    844c:	003fa806 	br	82f0 <_fflush_r+0x2c>
    8450:	90800517 	ldw	r2,20(r18)
    8454:	90800215 	stw	r2,8(r18)
    8458:	003fda06 	br	83c4 <_fflush_r+0x100>
    845c:	90800117 	ldw	r2,4(r18)
    8460:	90c00c17 	ldw	r3,48(r18)
    8464:	80a1c83a 	sub	r16,r16,r2
    8468:	183fb426 	beq	r3,zero,833c <_fflush_r+0x78>
    846c:	90800f17 	ldw	r2,60(r18)
    8470:	80a1c83a 	sub	r16,r16,r2
    8474:	003fb106 	br	833c <_fflush_r+0x78>
    8478:	91400717 	ldw	r5,28(r18)
    847c:	9809883a 	mov	r4,r19
    8480:	000d883a 	mov	r6,zero
    8484:	01c00044 	movi	r7,1
    8488:	403ee83a 	callr	r8
    848c:	1021883a 	mov	r16,r2
    8490:	00bfffc4 	movi	r2,-1
    8494:	80800226 	beq	r16,r2,84a0 <_fflush_r+0x1dc>
    8498:	92000a17 	ldw	r8,40(r18)
    849c:	003fa406 	br	8330 <_fflush_r+0x6c>
    84a0:	98c00017 	ldw	r3,0(r19)
    84a4:	00800744 	movi	r2,29
    84a8:	18bfde26 	beq	r3,r2,8424 <_fflush_r+0x160>
    84ac:	9080030b 	ldhu	r2,12(r18)
    84b0:	8007883a 	mov	r3,r16
    84b4:	10801014 	ori	r2,r2,64
    84b8:	9080030d 	sth	r2,12(r18)
    84bc:	003fcf06 	br	83fc <_fflush_r+0x138>

000084c0 <fflush>:
    84c0:	01400074 	movhi	r5,1
    84c4:	2960b104 	addi	r5,r5,-32060
    84c8:	2007883a 	mov	r3,r4
    84cc:	20000526 	beq	r4,zero,84e4 <fflush+0x24>
    84d0:	00800074 	movhi	r2,1
    84d4:	10923e04 	addi	r2,r2,18680
    84d8:	11000017 	ldw	r4,0(r2)
    84dc:	180b883a 	mov	r5,r3
    84e0:	00082c41 	jmpi	82c4 <_fflush_r>
    84e4:	00800074 	movhi	r2,1
    84e8:	10923f04 	addi	r2,r2,18684
    84ec:	11000017 	ldw	r4,0(r2)
    84f0:	0008bf41 	jmpi	8bf4 <_fwalk_reent>

000084f4 <std>:
    84f4:	00800074 	movhi	r2,1
    84f8:	10a5d404 	addi	r2,r2,-26800
    84fc:	20800b15 	stw	r2,44(r4)
    8500:	00800074 	movhi	r2,1
    8504:	10a60f04 	addi	r2,r2,-26564
    8508:	20800815 	stw	r2,32(r4)
    850c:	00c00074 	movhi	r3,1
    8510:	18e5f004 	addi	r3,r3,-26688
    8514:	00800074 	movhi	r2,1
    8518:	10a5d604 	addi	r2,r2,-26792
    851c:	2140030d 	sth	r5,12(r4)
    8520:	2180038d 	sth	r6,14(r4)
    8524:	20c00915 	stw	r3,36(r4)
    8528:	20800a15 	stw	r2,40(r4)
    852c:	20000015 	stw	zero,0(r4)
    8530:	20000115 	stw	zero,4(r4)
    8534:	20000215 	stw	zero,8(r4)
    8538:	20000415 	stw	zero,16(r4)
    853c:	20000515 	stw	zero,20(r4)
    8540:	20000615 	stw	zero,24(r4)
    8544:	21000715 	stw	r4,28(r4)
    8548:	f800283a 	ret

0000854c <__sfp_lock_acquire>:
    854c:	f800283a 	ret

00008550 <__sfp_lock_release>:
    8550:	f800283a 	ret

00008554 <__sinit_lock_acquire>:
    8554:	f800283a 	ret

00008558 <__sinit_lock_release>:
    8558:	f800283a 	ret

0000855c <__sinit>:
    855c:	20800e17 	ldw	r2,56(r4)
    8560:	defffd04 	addi	sp,sp,-12
    8564:	dc400115 	stw	r17,4(sp)
    8568:	dc000015 	stw	r16,0(sp)
    856c:	dfc00215 	stw	ra,8(sp)
    8570:	04400044 	movi	r17,1
    8574:	01400104 	movi	r5,4
    8578:	000d883a 	mov	r6,zero
    857c:	2021883a 	mov	r16,r4
    8580:	2200bb04 	addi	r8,r4,748
    8584:	200f883a 	mov	r7,r4
    8588:	10000526 	beq	r2,zero,85a0 <__sinit+0x44>
    858c:	dfc00217 	ldw	ra,8(sp)
    8590:	dc400117 	ldw	r17,4(sp)
    8594:	dc000017 	ldw	r16,0(sp)
    8598:	dec00304 	addi	sp,sp,12
    859c:	f800283a 	ret
    85a0:	21000117 	ldw	r4,4(r4)
    85a4:	00800074 	movhi	r2,1
    85a8:	10a19004 	addi	r2,r2,-31168
    85ac:	00c000c4 	movi	r3,3
    85b0:	80800f15 	stw	r2,60(r16)
    85b4:	80c0b915 	stw	r3,740(r16)
    85b8:	8200ba15 	stw	r8,744(r16)
    85bc:	84400e15 	stw	r17,56(r16)
    85c0:	8000b815 	stw	zero,736(r16)
    85c4:	00084f40 	call	84f4 <std>
    85c8:	81000217 	ldw	r4,8(r16)
    85cc:	880d883a 	mov	r6,r17
    85d0:	800f883a 	mov	r7,r16
    85d4:	01400284 	movi	r5,10
    85d8:	00084f40 	call	84f4 <std>
    85dc:	81000317 	ldw	r4,12(r16)
    85e0:	800f883a 	mov	r7,r16
    85e4:	01400484 	movi	r5,18
    85e8:	01800084 	movi	r6,2
    85ec:	dfc00217 	ldw	ra,8(sp)
    85f0:	dc400117 	ldw	r17,4(sp)
    85f4:	dc000017 	ldw	r16,0(sp)
    85f8:	dec00304 	addi	sp,sp,12
    85fc:	00084f41 	jmpi	84f4 <std>

00008600 <__fp_lock>:
    8600:	0005883a 	mov	r2,zero
    8604:	f800283a 	ret

00008608 <__fp_unlock>:
    8608:	0005883a 	mov	r2,zero
    860c:	f800283a 	ret

00008610 <__fp_unlock_all>:
    8610:	00800074 	movhi	r2,1
    8614:	10923e04 	addi	r2,r2,18680
    8618:	11000017 	ldw	r4,0(r2)
    861c:	01400074 	movhi	r5,1
    8620:	29618204 	addi	r5,r5,-31224
    8624:	0008cbc1 	jmpi	8cbc <_fwalk>

00008628 <__fp_lock_all>:
    8628:	00800074 	movhi	r2,1
    862c:	10923e04 	addi	r2,r2,18680
    8630:	11000017 	ldw	r4,0(r2)
    8634:	01400074 	movhi	r5,1
    8638:	29618004 	addi	r5,r5,-31232
    863c:	0008cbc1 	jmpi	8cbc <_fwalk>

00008640 <_cleanup_r>:
    8640:	01400074 	movhi	r5,1
    8644:	2966a504 	addi	r5,r5,-25964
    8648:	0008cbc1 	jmpi	8cbc <_fwalk>

0000864c <_cleanup>:
    864c:	00800074 	movhi	r2,1
    8650:	10923f04 	addi	r2,r2,18684
    8654:	11000017 	ldw	r4,0(r2)
    8658:	00086401 	jmpi	8640 <_cleanup_r>

0000865c <__sfmoreglue>:
    865c:	defffc04 	addi	sp,sp,-16
    8660:	dc400115 	stw	r17,4(sp)
    8664:	2c401724 	muli	r17,r5,92
    8668:	dc800215 	stw	r18,8(sp)
    866c:	2825883a 	mov	r18,r5
    8670:	89400304 	addi	r5,r17,12
    8674:	dc000015 	stw	r16,0(sp)
    8678:	dfc00315 	stw	ra,12(sp)
    867c:	0008f080 	call	8f08 <_malloc_r>
    8680:	0021883a 	mov	r16,zero
    8684:	880d883a 	mov	r6,r17
    8688:	000b883a 	mov	r5,zero
    868c:	10000626 	beq	r2,zero,86a8 <__sfmoreglue+0x4c>
    8690:	11000304 	addi	r4,r2,12
    8694:	14800115 	stw	r18,4(r2)
    8698:	10000015 	stw	zero,0(r2)
    869c:	11000215 	stw	r4,8(r2)
    86a0:	1021883a 	mov	r16,r2
    86a4:	00096480 	call	9648 <memset>
    86a8:	8005883a 	mov	r2,r16
    86ac:	dfc00317 	ldw	ra,12(sp)
    86b0:	dc800217 	ldw	r18,8(sp)
    86b4:	dc400117 	ldw	r17,4(sp)
    86b8:	dc000017 	ldw	r16,0(sp)
    86bc:	dec00404 	addi	sp,sp,16
    86c0:	f800283a 	ret

000086c4 <__sfp>:
    86c4:	defffd04 	addi	sp,sp,-12
    86c8:	00800074 	movhi	r2,1
    86cc:	10923f04 	addi	r2,r2,18684
    86d0:	dc000015 	stw	r16,0(sp)
    86d4:	14000017 	ldw	r16,0(r2)
    86d8:	dc400115 	stw	r17,4(sp)
    86dc:	dfc00215 	stw	ra,8(sp)
    86e0:	80800e17 	ldw	r2,56(r16)
    86e4:	2023883a 	mov	r17,r4
    86e8:	10002626 	beq	r2,zero,8784 <__sfp+0xc0>
    86ec:	8400b804 	addi	r16,r16,736
    86f0:	80800117 	ldw	r2,4(r16)
    86f4:	81000217 	ldw	r4,8(r16)
    86f8:	10ffffc4 	addi	r3,r2,-1
    86fc:	18000916 	blt	r3,zero,8724 <__sfp+0x60>
    8700:	2080030f 	ldh	r2,12(r4)
    8704:	10000b26 	beq	r2,zero,8734 <__sfp+0x70>
    8708:	017fffc4 	movi	r5,-1
    870c:	00000206 	br	8718 <__sfp+0x54>
    8710:	2080030f 	ldh	r2,12(r4)
    8714:	10000726 	beq	r2,zero,8734 <__sfp+0x70>
    8718:	18ffffc4 	addi	r3,r3,-1
    871c:	21001704 	addi	r4,r4,92
    8720:	197ffb1e 	bne	r3,r5,8710 <__sfp+0x4c>
    8724:	80800017 	ldw	r2,0(r16)
    8728:	10001926 	beq	r2,zero,8790 <__sfp+0xcc>
    872c:	1021883a 	mov	r16,r2
    8730:	003fef06 	br	86f0 <__sfp+0x2c>
    8734:	00bfffc4 	movi	r2,-1
    8738:	00c00044 	movi	r3,1
    873c:	2080038d 	sth	r2,14(r4)
    8740:	20c0030d 	sth	r3,12(r4)
    8744:	20000015 	stw	zero,0(r4)
    8748:	20000215 	stw	zero,8(r4)
    874c:	20000115 	stw	zero,4(r4)
    8750:	20000415 	stw	zero,16(r4)
    8754:	20000515 	stw	zero,20(r4)
    8758:	20000615 	stw	zero,24(r4)
    875c:	20000c15 	stw	zero,48(r4)
    8760:	20000d15 	stw	zero,52(r4)
    8764:	20001115 	stw	zero,68(r4)
    8768:	20001215 	stw	zero,72(r4)
    876c:	2005883a 	mov	r2,r4
    8770:	dfc00217 	ldw	ra,8(sp)
    8774:	dc400117 	ldw	r17,4(sp)
    8778:	dc000017 	ldw	r16,0(sp)
    877c:	dec00304 	addi	sp,sp,12
    8780:	f800283a 	ret
    8784:	8009883a 	mov	r4,r16
    8788:	000855c0 	call	855c <__sinit>
    878c:	003fd706 	br	86ec <__sfp+0x28>
    8790:	8809883a 	mov	r4,r17
    8794:	01400104 	movi	r5,4
    8798:	000865c0 	call	865c <__sfmoreglue>
    879c:	80800015 	stw	r2,0(r16)
    87a0:	103fe21e 	bne	r2,zero,872c <__sfp+0x68>
    87a4:	00800304 	movi	r2,12
    87a8:	0009883a 	mov	r4,zero
    87ac:	88800015 	stw	r2,0(r17)
    87b0:	003fee06 	br	876c <__sfp+0xa8>

000087b4 <_malloc_trim_r>:
    87b4:	defffb04 	addi	sp,sp,-20
    87b8:	dcc00315 	stw	r19,12(sp)
    87bc:	04c00074 	movhi	r19,1
    87c0:	9cd12c04 	addi	r19,r19,17584
    87c4:	dc800215 	stw	r18,8(sp)
    87c8:	dc400115 	stw	r17,4(sp)
    87cc:	dc000015 	stw	r16,0(sp)
    87d0:	2823883a 	mov	r17,r5
    87d4:	2025883a 	mov	r18,r4
    87d8:	dfc00415 	stw	ra,16(sp)
    87dc:	0009e2c0 	call	9e2c <__malloc_lock>
    87e0:	98800217 	ldw	r2,8(r19)
    87e4:	9009883a 	mov	r4,r18
    87e8:	000b883a 	mov	r5,zero
    87ec:	10c00117 	ldw	r3,4(r2)
    87f0:	00bfff04 	movi	r2,-4
    87f4:	18a0703a 	and	r16,r3,r2
    87f8:	8463c83a 	sub	r17,r16,r17
    87fc:	8c43fbc4 	addi	r17,r17,4079
    8800:	8822d33a 	srli	r17,r17,12
    8804:	0083ffc4 	movi	r2,4095
    8808:	8c7fffc4 	addi	r17,r17,-1
    880c:	8822933a 	slli	r17,r17,12
    8810:	1440060e 	bge	r2,r17,882c <_malloc_trim_r+0x78>
    8814:	00096e00 	call	96e0 <_sbrk_r>
    8818:	98c00217 	ldw	r3,8(r19)
    881c:	9009883a 	mov	r4,r18
    8820:	044bc83a 	sub	r5,zero,r17
    8824:	80c7883a 	add	r3,r16,r3
    8828:	10c00926 	beq	r2,r3,8850 <_malloc_trim_r+0x9c>
    882c:	0009e300 	call	9e30 <__malloc_unlock>
    8830:	0005883a 	mov	r2,zero
    8834:	dfc00417 	ldw	ra,16(sp)
    8838:	dcc00317 	ldw	r19,12(sp)
    883c:	dc800217 	ldw	r18,8(sp)
    8840:	dc400117 	ldw	r17,4(sp)
    8844:	dc000017 	ldw	r16,0(sp)
    8848:	dec00504 	addi	sp,sp,20
    884c:	f800283a 	ret
    8850:	9009883a 	mov	r4,r18
    8854:	00096e00 	call	96e0 <_sbrk_r>
    8858:	844dc83a 	sub	r6,r16,r17
    885c:	00ffffc4 	movi	r3,-1
    8860:	9009883a 	mov	r4,r18
    8864:	000b883a 	mov	r5,zero
    8868:	01c000b4 	movhi	r7,2
    886c:	39fb2604 	addi	r7,r7,-4968
    8870:	31800054 	ori	r6,r6,1
    8874:	10c00926 	beq	r2,r3,889c <_malloc_trim_r+0xe8>
    8878:	38800017 	ldw	r2,0(r7)
    887c:	98c00217 	ldw	r3,8(r19)
    8880:	9009883a 	mov	r4,r18
    8884:	1445c83a 	sub	r2,r2,r17
    8888:	38800015 	stw	r2,0(r7)
    888c:	19800115 	stw	r6,4(r3)
    8890:	0009e300 	call	9e30 <__malloc_unlock>
    8894:	00800044 	movi	r2,1
    8898:	003fe606 	br	8834 <_malloc_trim_r+0x80>
    889c:	00096e00 	call	96e0 <_sbrk_r>
    88a0:	99800217 	ldw	r6,8(r19)
    88a4:	100f883a 	mov	r7,r2
    88a8:	9009883a 	mov	r4,r18
    88ac:	1187c83a 	sub	r3,r2,r6
    88b0:	008003c4 	movi	r2,15
    88b4:	19400054 	ori	r5,r3,1
    88b8:	10ffdc0e 	bge	r2,r3,882c <_malloc_trim_r+0x78>
    88bc:	00800074 	movhi	r2,1
    88c0:	10924104 	addi	r2,r2,18692
    88c4:	10c00017 	ldw	r3,0(r2)
    88c8:	008000b4 	movhi	r2,2
    88cc:	10bb2604 	addi	r2,r2,-4968
    88d0:	31400115 	stw	r5,4(r6)
    88d4:	38c7c83a 	sub	r3,r7,r3
    88d8:	10c00015 	stw	r3,0(r2)
    88dc:	003fd306 	br	882c <_malloc_trim_r+0x78>

000088e0 <_free_r>:
    88e0:	defffd04 	addi	sp,sp,-12
    88e4:	dc400115 	stw	r17,4(sp)
    88e8:	dc000015 	stw	r16,0(sp)
    88ec:	dfc00215 	stw	ra,8(sp)
    88f0:	2821883a 	mov	r16,r5
    88f4:	2023883a 	mov	r17,r4
    88f8:	28005a26 	beq	r5,zero,8a64 <_free_r+0x184>
    88fc:	0009e2c0 	call	9e2c <__malloc_lock>
    8900:	823ffe04 	addi	r8,r16,-8
    8904:	41400117 	ldw	r5,4(r8)
    8908:	00bfff84 	movi	r2,-2
    890c:	02800074 	movhi	r10,1
    8910:	52912c04 	addi	r10,r10,17584
    8914:	288e703a 	and	r7,r5,r2
    8918:	41cd883a 	add	r6,r8,r7
    891c:	30c00117 	ldw	r3,4(r6)
    8920:	51000217 	ldw	r4,8(r10)
    8924:	00bfff04 	movi	r2,-4
    8928:	1892703a 	and	r9,r3,r2
    892c:	5017883a 	mov	r11,r10
    8930:	31006726 	beq	r6,r4,8ad0 <_free_r+0x1f0>
    8934:	2880004c 	andi	r2,r5,1
    8938:	1005003a 	cmpeq	r2,r2,zero
    893c:	32400115 	stw	r9,4(r6)
    8940:	10001a1e 	bne	r2,zero,89ac <_free_r+0xcc>
    8944:	000b883a 	mov	r5,zero
    8948:	3247883a 	add	r3,r6,r9
    894c:	18800117 	ldw	r2,4(r3)
    8950:	1080004c 	andi	r2,r2,1
    8954:	1000231e 	bne	r2,zero,89e4 <_free_r+0x104>
    8958:	280ac03a 	cmpne	r5,r5,zero
    895c:	3a4f883a 	add	r7,r7,r9
    8960:	2800451e 	bne	r5,zero,8a78 <_free_r+0x198>
    8964:	31000217 	ldw	r4,8(r6)
    8968:	00800074 	movhi	r2,1
    896c:	10912e04 	addi	r2,r2,17592
    8970:	20807b26 	beq	r4,r2,8b60 <_free_r+0x280>
    8974:	30800317 	ldw	r2,12(r6)
    8978:	3a07883a 	add	r3,r7,r8
    897c:	19c00015 	stw	r7,0(r3)
    8980:	11000215 	stw	r4,8(r2)
    8984:	20800315 	stw	r2,12(r4)
    8988:	38800054 	ori	r2,r7,1
    898c:	40800115 	stw	r2,4(r8)
    8990:	28001a26 	beq	r5,zero,89fc <_free_r+0x11c>
    8994:	8809883a 	mov	r4,r17
    8998:	dfc00217 	ldw	ra,8(sp)
    899c:	dc400117 	ldw	r17,4(sp)
    89a0:	dc000017 	ldw	r16,0(sp)
    89a4:	dec00304 	addi	sp,sp,12
    89a8:	0009e301 	jmpi	9e30 <__malloc_unlock>
    89ac:	80bffe17 	ldw	r2,-8(r16)
    89b0:	50c00204 	addi	r3,r10,8
    89b4:	4091c83a 	sub	r8,r8,r2
    89b8:	41000217 	ldw	r4,8(r8)
    89bc:	388f883a 	add	r7,r7,r2
    89c0:	20c06126 	beq	r4,r3,8b48 <_free_r+0x268>
    89c4:	40800317 	ldw	r2,12(r8)
    89c8:	3247883a 	add	r3,r6,r9
    89cc:	000b883a 	mov	r5,zero
    89d0:	11000215 	stw	r4,8(r2)
    89d4:	20800315 	stw	r2,12(r4)
    89d8:	18800117 	ldw	r2,4(r3)
    89dc:	1080004c 	andi	r2,r2,1
    89e0:	103fdd26 	beq	r2,zero,8958 <_free_r+0x78>
    89e4:	38800054 	ori	r2,r7,1
    89e8:	3a07883a 	add	r3,r7,r8
    89ec:	280ac03a 	cmpne	r5,r5,zero
    89f0:	40800115 	stw	r2,4(r8)
    89f4:	19c00015 	stw	r7,0(r3)
    89f8:	283fe61e 	bne	r5,zero,8994 <_free_r+0xb4>
    89fc:	00807fc4 	movi	r2,511
    8a00:	11c01f2e 	bgeu	r2,r7,8a80 <_free_r+0x1a0>
    8a04:	3806d27a 	srli	r3,r7,9
    8a08:	1800481e 	bne	r3,zero,8b2c <_free_r+0x24c>
    8a0c:	3804d0fa 	srli	r2,r7,3
    8a10:	100690fa 	slli	r3,r2,3
    8a14:	1acd883a 	add	r6,r3,r11
    8a18:	31400217 	ldw	r5,8(r6)
    8a1c:	31405926 	beq	r6,r5,8b84 <_free_r+0x2a4>
    8a20:	28800117 	ldw	r2,4(r5)
    8a24:	00ffff04 	movi	r3,-4
    8a28:	10c4703a 	and	r2,r2,r3
    8a2c:	3880022e 	bgeu	r7,r2,8a38 <_free_r+0x158>
    8a30:	29400217 	ldw	r5,8(r5)
    8a34:	317ffa1e 	bne	r6,r5,8a20 <_free_r+0x140>
    8a38:	29800317 	ldw	r6,12(r5)
    8a3c:	41800315 	stw	r6,12(r8)
    8a40:	41400215 	stw	r5,8(r8)
    8a44:	8809883a 	mov	r4,r17
    8a48:	2a000315 	stw	r8,12(r5)
    8a4c:	32000215 	stw	r8,8(r6)
    8a50:	dfc00217 	ldw	ra,8(sp)
    8a54:	dc400117 	ldw	r17,4(sp)
    8a58:	dc000017 	ldw	r16,0(sp)
    8a5c:	dec00304 	addi	sp,sp,12
    8a60:	0009e301 	jmpi	9e30 <__malloc_unlock>
    8a64:	dfc00217 	ldw	ra,8(sp)
    8a68:	dc400117 	ldw	r17,4(sp)
    8a6c:	dc000017 	ldw	r16,0(sp)
    8a70:	dec00304 	addi	sp,sp,12
    8a74:	f800283a 	ret
    8a78:	31000217 	ldw	r4,8(r6)
    8a7c:	003fbd06 	br	8974 <_free_r+0x94>
    8a80:	3806d0fa 	srli	r3,r7,3
    8a84:	00800044 	movi	r2,1
    8a88:	51400117 	ldw	r5,4(r10)
    8a8c:	180890fa 	slli	r4,r3,3
    8a90:	1807d0ba 	srai	r3,r3,2
    8a94:	22c9883a 	add	r4,r4,r11
    8a98:	21800217 	ldw	r6,8(r4)
    8a9c:	10c4983a 	sll	r2,r2,r3
    8aa0:	41000315 	stw	r4,12(r8)
    8aa4:	41800215 	stw	r6,8(r8)
    8aa8:	288ab03a 	or	r5,r5,r2
    8aac:	22000215 	stw	r8,8(r4)
    8ab0:	8809883a 	mov	r4,r17
    8ab4:	51400115 	stw	r5,4(r10)
    8ab8:	32000315 	stw	r8,12(r6)
    8abc:	dfc00217 	ldw	ra,8(sp)
    8ac0:	dc400117 	ldw	r17,4(sp)
    8ac4:	dc000017 	ldw	r16,0(sp)
    8ac8:	dec00304 	addi	sp,sp,12
    8acc:	0009e301 	jmpi	9e30 <__malloc_unlock>
    8ad0:	2880004c 	andi	r2,r5,1
    8ad4:	3a4d883a 	add	r6,r7,r9
    8ad8:	1000071e 	bne	r2,zero,8af8 <_free_r+0x218>
    8adc:	80bffe17 	ldw	r2,-8(r16)
    8ae0:	4091c83a 	sub	r8,r8,r2
    8ae4:	41000317 	ldw	r4,12(r8)
    8ae8:	40c00217 	ldw	r3,8(r8)
    8aec:	308d883a 	add	r6,r6,r2
    8af0:	20c00215 	stw	r3,8(r4)
    8af4:	19000315 	stw	r4,12(r3)
    8af8:	00800074 	movhi	r2,1
    8afc:	10924004 	addi	r2,r2,18688
    8b00:	11000017 	ldw	r4,0(r2)
    8b04:	30c00054 	ori	r3,r6,1
    8b08:	52000215 	stw	r8,8(r10)
    8b0c:	40c00115 	stw	r3,4(r8)
    8b10:	313fa036 	bltu	r6,r4,8994 <_free_r+0xb4>
    8b14:	008000b4 	movhi	r2,2
    8b18:	10bb2304 	addi	r2,r2,-4980
    8b1c:	11400017 	ldw	r5,0(r2)
    8b20:	8809883a 	mov	r4,r17
    8b24:	00087b40 	call	87b4 <_malloc_trim_r>
    8b28:	003f9a06 	br	8994 <_free_r+0xb4>
    8b2c:	00800104 	movi	r2,4
    8b30:	10c0072e 	bgeu	r2,r3,8b50 <_free_r+0x270>
    8b34:	00800504 	movi	r2,20
    8b38:	10c01936 	bltu	r2,r3,8ba0 <_free_r+0x2c0>
    8b3c:	188016c4 	addi	r2,r3,91
    8b40:	100690fa 	slli	r3,r2,3
    8b44:	003fb306 	br	8a14 <_free_r+0x134>
    8b48:	01400044 	movi	r5,1
    8b4c:	003f7e06 	br	8948 <_free_r+0x68>
    8b50:	3804d1ba 	srli	r2,r7,6
    8b54:	10800e04 	addi	r2,r2,56
    8b58:	100690fa 	slli	r3,r2,3
    8b5c:	003fad06 	br	8a14 <_free_r+0x134>
    8b60:	22000315 	stw	r8,12(r4)
    8b64:	22000215 	stw	r8,8(r4)
    8b68:	3a05883a 	add	r2,r7,r8
    8b6c:	38c00054 	ori	r3,r7,1
    8b70:	11c00015 	stw	r7,0(r2)
    8b74:	41000215 	stw	r4,8(r8)
    8b78:	40c00115 	stw	r3,4(r8)
    8b7c:	41000315 	stw	r4,12(r8)
    8b80:	003f8406 	br	8994 <_free_r+0xb4>
    8b84:	1005d0ba 	srai	r2,r2,2
    8b88:	00c00044 	movi	r3,1
    8b8c:	51000117 	ldw	r4,4(r10)
    8b90:	1886983a 	sll	r3,r3,r2
    8b94:	20c8b03a 	or	r4,r4,r3
    8b98:	51000115 	stw	r4,4(r10)
    8b9c:	003fa706 	br	8a3c <_free_r+0x15c>
    8ba0:	00801504 	movi	r2,84
    8ba4:	10c00436 	bltu	r2,r3,8bb8 <_free_r+0x2d8>
    8ba8:	3804d33a 	srli	r2,r7,12
    8bac:	10801b84 	addi	r2,r2,110
    8bb0:	100690fa 	slli	r3,r2,3
    8bb4:	003f9706 	br	8a14 <_free_r+0x134>
    8bb8:	00805504 	movi	r2,340
    8bbc:	10c00436 	bltu	r2,r3,8bd0 <_free_r+0x2f0>
    8bc0:	3804d3fa 	srli	r2,r7,15
    8bc4:	10801dc4 	addi	r2,r2,119
    8bc8:	100690fa 	slli	r3,r2,3
    8bcc:	003f9106 	br	8a14 <_free_r+0x134>
    8bd0:	00815504 	movi	r2,1364
    8bd4:	10c0032e 	bgeu	r2,r3,8be4 <_free_r+0x304>
    8bd8:	00801f84 	movi	r2,126
    8bdc:	00c0fc04 	movi	r3,1008
    8be0:	003f8c06 	br	8a14 <_free_r+0x134>
    8be4:	3804d4ba 	srli	r2,r7,18
    8be8:	10801f04 	addi	r2,r2,124
    8bec:	100690fa 	slli	r3,r2,3
    8bf0:	003f8806 	br	8a14 <_free_r+0x134>

00008bf4 <_fwalk_reent>:
    8bf4:	defff704 	addi	sp,sp,-36
    8bf8:	dcc00315 	stw	r19,12(sp)
    8bfc:	24c0b804 	addi	r19,r4,736
    8c00:	dd800615 	stw	r22,24(sp)
    8c04:	dd400515 	stw	r21,20(sp)
    8c08:	dfc00815 	stw	ra,32(sp)
    8c0c:	ddc00715 	stw	r23,28(sp)
    8c10:	dd000415 	stw	r20,16(sp)
    8c14:	dc800215 	stw	r18,8(sp)
    8c18:	dc400115 	stw	r17,4(sp)
    8c1c:	dc000015 	stw	r16,0(sp)
    8c20:	202b883a 	mov	r21,r4
    8c24:	282d883a 	mov	r22,r5
    8c28:	000854c0 	call	854c <__sfp_lock_acquire>
    8c2c:	98002126 	beq	r19,zero,8cb4 <_fwalk_reent+0xc0>
    8c30:	002f883a 	mov	r23,zero
    8c34:	9c800117 	ldw	r18,4(r19)
    8c38:	9c000217 	ldw	r16,8(r19)
    8c3c:	90bfffc4 	addi	r2,r18,-1
    8c40:	10000d16 	blt	r2,zero,8c78 <_fwalk_reent+0x84>
    8c44:	0023883a 	mov	r17,zero
    8c48:	053fffc4 	movi	r20,-1
    8c4c:	8080030f 	ldh	r2,12(r16)
    8c50:	8c400044 	addi	r17,r17,1
    8c54:	10000626 	beq	r2,zero,8c70 <_fwalk_reent+0x7c>
    8c58:	8080038f 	ldh	r2,14(r16)
    8c5c:	800b883a 	mov	r5,r16
    8c60:	a809883a 	mov	r4,r21
    8c64:	15000226 	beq	r2,r20,8c70 <_fwalk_reent+0x7c>
    8c68:	b03ee83a 	callr	r22
    8c6c:	b8aeb03a 	or	r23,r23,r2
    8c70:	84001704 	addi	r16,r16,92
    8c74:	947ff51e 	bne	r18,r17,8c4c <_fwalk_reent+0x58>
    8c78:	9cc00017 	ldw	r19,0(r19)
    8c7c:	983fed1e 	bne	r19,zero,8c34 <_fwalk_reent+0x40>
    8c80:	00085500 	call	8550 <__sfp_lock_release>
    8c84:	b805883a 	mov	r2,r23
    8c88:	dfc00817 	ldw	ra,32(sp)
    8c8c:	ddc00717 	ldw	r23,28(sp)
    8c90:	dd800617 	ldw	r22,24(sp)
    8c94:	dd400517 	ldw	r21,20(sp)
    8c98:	dd000417 	ldw	r20,16(sp)
    8c9c:	dcc00317 	ldw	r19,12(sp)
    8ca0:	dc800217 	ldw	r18,8(sp)
    8ca4:	dc400117 	ldw	r17,4(sp)
    8ca8:	dc000017 	ldw	r16,0(sp)
    8cac:	dec00904 	addi	sp,sp,36
    8cb0:	f800283a 	ret
    8cb4:	002f883a 	mov	r23,zero
    8cb8:	003ff106 	br	8c80 <_fwalk_reent+0x8c>

00008cbc <_fwalk>:
    8cbc:	defff804 	addi	sp,sp,-32
    8cc0:	dcc00315 	stw	r19,12(sp)
    8cc4:	24c0b804 	addi	r19,r4,736
    8cc8:	dd400515 	stw	r21,20(sp)
    8ccc:	dfc00715 	stw	ra,28(sp)
    8cd0:	dd800615 	stw	r22,24(sp)
    8cd4:	dd000415 	stw	r20,16(sp)
    8cd8:	dc800215 	stw	r18,8(sp)
    8cdc:	dc400115 	stw	r17,4(sp)
    8ce0:	dc000015 	stw	r16,0(sp)
    8ce4:	282b883a 	mov	r21,r5
    8ce8:	000854c0 	call	854c <__sfp_lock_acquire>
    8cec:	98001f26 	beq	r19,zero,8d6c <_fwalk+0xb0>
    8cf0:	002d883a 	mov	r22,zero
    8cf4:	9c800117 	ldw	r18,4(r19)
    8cf8:	9c000217 	ldw	r16,8(r19)
    8cfc:	90bfffc4 	addi	r2,r18,-1
    8d00:	10000c16 	blt	r2,zero,8d34 <_fwalk+0x78>
    8d04:	0023883a 	mov	r17,zero
    8d08:	053fffc4 	movi	r20,-1
    8d0c:	8080030f 	ldh	r2,12(r16)
    8d10:	8c400044 	addi	r17,r17,1
    8d14:	10000526 	beq	r2,zero,8d2c <_fwalk+0x70>
    8d18:	8080038f 	ldh	r2,14(r16)
    8d1c:	8009883a 	mov	r4,r16
    8d20:	15000226 	beq	r2,r20,8d2c <_fwalk+0x70>
    8d24:	a83ee83a 	callr	r21
    8d28:	b0acb03a 	or	r22,r22,r2
    8d2c:	84001704 	addi	r16,r16,92
    8d30:	947ff61e 	bne	r18,r17,8d0c <_fwalk+0x50>
    8d34:	9cc00017 	ldw	r19,0(r19)
    8d38:	983fee1e 	bne	r19,zero,8cf4 <_fwalk+0x38>
    8d3c:	00085500 	call	8550 <__sfp_lock_release>
    8d40:	b005883a 	mov	r2,r22
    8d44:	dfc00717 	ldw	ra,28(sp)
    8d48:	dd800617 	ldw	r22,24(sp)
    8d4c:	dd400517 	ldw	r21,20(sp)
    8d50:	dd000417 	ldw	r20,16(sp)
    8d54:	dcc00317 	ldw	r19,12(sp)
    8d58:	dc800217 	ldw	r18,8(sp)
    8d5c:	dc400117 	ldw	r17,4(sp)
    8d60:	dc000017 	ldw	r16,0(sp)
    8d64:	dec00804 	addi	sp,sp,32
    8d68:	f800283a 	ret
    8d6c:	002d883a 	mov	r22,zero
    8d70:	003ff206 	br	8d3c <_fwalk+0x80>

00008d74 <__smakebuf_r>:
    8d74:	2880030b 	ldhu	r2,12(r5)
    8d78:	deffed04 	addi	sp,sp,-76
    8d7c:	dc401015 	stw	r17,64(sp)
    8d80:	1080008c 	andi	r2,r2,2
    8d84:	dc000f15 	stw	r16,60(sp)
    8d88:	dfc01215 	stw	ra,72(sp)
    8d8c:	dc801115 	stw	r18,68(sp)
    8d90:	2821883a 	mov	r16,r5
    8d94:	2023883a 	mov	r17,r4
    8d98:	10000b26 	beq	r2,zero,8dc8 <__smakebuf_r+0x54>
    8d9c:	28c010c4 	addi	r3,r5,67
    8da0:	00800044 	movi	r2,1
    8da4:	28800515 	stw	r2,20(r5)
    8da8:	28c00415 	stw	r3,16(r5)
    8dac:	28c00015 	stw	r3,0(r5)
    8db0:	dfc01217 	ldw	ra,72(sp)
    8db4:	dc801117 	ldw	r18,68(sp)
    8db8:	dc401017 	ldw	r17,64(sp)
    8dbc:	dc000f17 	ldw	r16,60(sp)
    8dc0:	dec01304 	addi	sp,sp,76
    8dc4:	f800283a 	ret
    8dc8:	2940038f 	ldh	r5,14(r5)
    8dcc:	28002116 	blt	r5,zero,8e54 <__smakebuf_r+0xe0>
    8dd0:	d80d883a 	mov	r6,sp
    8dd4:	0009aa80 	call	9aa8 <_fstat_r>
    8dd8:	10001e16 	blt	r2,zero,8e54 <__smakebuf_r+0xe0>
    8ddc:	d8800117 	ldw	r2,4(sp)
    8de0:	00e00014 	movui	r3,32768
    8de4:	113c000c 	andi	r4,r2,61440
    8de8:	20c03126 	beq	r4,r3,8eb0 <__smakebuf_r+0x13c>
    8dec:	8080030b 	ldhu	r2,12(r16)
    8df0:	00c80004 	movi	r3,8192
    8df4:	10820014 	ori	r2,r2,2048
    8df8:	8080030d 	sth	r2,12(r16)
    8dfc:	20c01e26 	beq	r4,r3,8e78 <__smakebuf_r+0x104>
    8e00:	04810004 	movi	r18,1024
    8e04:	8809883a 	mov	r4,r17
    8e08:	900b883a 	mov	r5,r18
    8e0c:	0008f080 	call	8f08 <_malloc_r>
    8e10:	1009883a 	mov	r4,r2
    8e14:	10003126 	beq	r2,zero,8edc <__smakebuf_r+0x168>
    8e18:	80c0030b 	ldhu	r3,12(r16)
    8e1c:	00800074 	movhi	r2,1
    8e20:	10a19004 	addi	r2,r2,-31168
    8e24:	88800f15 	stw	r2,60(r17)
    8e28:	18c02014 	ori	r3,r3,128
    8e2c:	84800515 	stw	r18,20(r16)
    8e30:	80c0030d 	sth	r3,12(r16)
    8e34:	81000415 	stw	r4,16(r16)
    8e38:	81000015 	stw	r4,0(r16)
    8e3c:	dfc01217 	ldw	ra,72(sp)
    8e40:	dc801117 	ldw	r18,68(sp)
    8e44:	dc401017 	ldw	r17,64(sp)
    8e48:	dc000f17 	ldw	r16,60(sp)
    8e4c:	dec01304 	addi	sp,sp,76
    8e50:	f800283a 	ret
    8e54:	80c0030b 	ldhu	r3,12(r16)
    8e58:	1880200c 	andi	r2,r3,128
    8e5c:	10000426 	beq	r2,zero,8e70 <__smakebuf_r+0xfc>
    8e60:	04801004 	movi	r18,64
    8e64:	18820014 	ori	r2,r3,2048
    8e68:	8080030d 	sth	r2,12(r16)
    8e6c:	003fe506 	br	8e04 <__smakebuf_r+0x90>
    8e70:	04810004 	movi	r18,1024
    8e74:	003ffb06 	br	8e64 <__smakebuf_r+0xf0>
    8e78:	8140038f 	ldh	r5,14(r16)
    8e7c:	8809883a 	mov	r4,r17
    8e80:	0009b1c0 	call	9b1c <_isatty_r>
    8e84:	103fde26 	beq	r2,zero,8e00 <__smakebuf_r+0x8c>
    8e88:	8080030b 	ldhu	r2,12(r16)
    8e8c:	80c010c4 	addi	r3,r16,67
    8e90:	04810004 	movi	r18,1024
    8e94:	10800054 	ori	r2,r2,1
    8e98:	8080030d 	sth	r2,12(r16)
    8e9c:	00800044 	movi	r2,1
    8ea0:	80c00415 	stw	r3,16(r16)
    8ea4:	80800515 	stw	r2,20(r16)
    8ea8:	80c00015 	stw	r3,0(r16)
    8eac:	003fd506 	br	8e04 <__smakebuf_r+0x90>
    8eb0:	80c00a17 	ldw	r3,40(r16)
    8eb4:	00800074 	movhi	r2,1
    8eb8:	10a5d604 	addi	r2,r2,-26792
    8ebc:	18bfcb1e 	bne	r3,r2,8dec <__smakebuf_r+0x78>
    8ec0:	8080030b 	ldhu	r2,12(r16)
    8ec4:	00c10004 	movi	r3,1024
    8ec8:	1825883a 	mov	r18,r3
    8ecc:	10c4b03a 	or	r2,r2,r3
    8ed0:	8080030d 	sth	r2,12(r16)
    8ed4:	80c01315 	stw	r3,76(r16)
    8ed8:	003fca06 	br	8e04 <__smakebuf_r+0x90>
    8edc:	8100030b 	ldhu	r4,12(r16)
    8ee0:	2080800c 	andi	r2,r4,512
    8ee4:	103fb21e 	bne	r2,zero,8db0 <__smakebuf_r+0x3c>
    8ee8:	80c010c4 	addi	r3,r16,67
    8eec:	21000094 	ori	r4,r4,2
    8ef0:	00800044 	movi	r2,1
    8ef4:	80800515 	stw	r2,20(r16)
    8ef8:	8100030d 	sth	r4,12(r16)
    8efc:	80c00415 	stw	r3,16(r16)
    8f00:	80c00015 	stw	r3,0(r16)
    8f04:	003faa06 	br	8db0 <__smakebuf_r+0x3c>

00008f08 <_malloc_r>:
    8f08:	defff604 	addi	sp,sp,-40
    8f0c:	28c002c4 	addi	r3,r5,11
    8f10:	00800584 	movi	r2,22
    8f14:	dc800215 	stw	r18,8(sp)
    8f18:	dfc00915 	stw	ra,36(sp)
    8f1c:	df000815 	stw	fp,32(sp)
    8f20:	ddc00715 	stw	r23,28(sp)
    8f24:	dd800615 	stw	r22,24(sp)
    8f28:	dd400515 	stw	r21,20(sp)
    8f2c:	dd000415 	stw	r20,16(sp)
    8f30:	dcc00315 	stw	r19,12(sp)
    8f34:	dc400115 	stw	r17,4(sp)
    8f38:	dc000015 	stw	r16,0(sp)
    8f3c:	2025883a 	mov	r18,r4
    8f40:	10c01236 	bltu	r2,r3,8f8c <_malloc_r+0x84>
    8f44:	04400404 	movi	r17,16
    8f48:	8940142e 	bgeu	r17,r5,8f9c <_malloc_r+0x94>
    8f4c:	00800304 	movi	r2,12
    8f50:	0007883a 	mov	r3,zero
    8f54:	90800015 	stw	r2,0(r18)
    8f58:	1805883a 	mov	r2,r3
    8f5c:	dfc00917 	ldw	ra,36(sp)
    8f60:	df000817 	ldw	fp,32(sp)
    8f64:	ddc00717 	ldw	r23,28(sp)
    8f68:	dd800617 	ldw	r22,24(sp)
    8f6c:	dd400517 	ldw	r21,20(sp)
    8f70:	dd000417 	ldw	r20,16(sp)
    8f74:	dcc00317 	ldw	r19,12(sp)
    8f78:	dc800217 	ldw	r18,8(sp)
    8f7c:	dc400117 	ldw	r17,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00a04 	addi	sp,sp,40
    8f88:	f800283a 	ret
    8f8c:	00bffe04 	movi	r2,-8
    8f90:	18a2703a 	and	r17,r3,r2
    8f94:	883fed16 	blt	r17,zero,8f4c <_malloc_r+0x44>
    8f98:	897fec36 	bltu	r17,r5,8f4c <_malloc_r+0x44>
    8f9c:	9009883a 	mov	r4,r18
    8fa0:	0009e2c0 	call	9e2c <__malloc_lock>
    8fa4:	00807dc4 	movi	r2,503
    8fa8:	14402b2e 	bgeu	r2,r17,9058 <_malloc_r+0x150>
    8fac:	8806d27a 	srli	r3,r17,9
    8fb0:	18003f1e 	bne	r3,zero,90b0 <_malloc_r+0x1a8>
    8fb4:	880cd0fa 	srli	r6,r17,3
    8fb8:	300490fa 	slli	r2,r6,3
    8fbc:	02c00074 	movhi	r11,1
    8fc0:	5ad12c04 	addi	r11,r11,17584
    8fc4:	12cb883a 	add	r5,r2,r11
    8fc8:	2c000317 	ldw	r16,12(r5)
    8fcc:	580f883a 	mov	r7,r11
    8fd0:	2c00041e 	bne	r5,r16,8fe4 <_malloc_r+0xdc>
    8fd4:	00000a06 	br	9000 <_malloc_r+0xf8>
    8fd8:	1800860e 	bge	r3,zero,91f4 <_malloc_r+0x2ec>
    8fdc:	84000317 	ldw	r16,12(r16)
    8fe0:	2c000726 	beq	r5,r16,9000 <_malloc_r+0xf8>
    8fe4:	80800117 	ldw	r2,4(r16)
    8fe8:	00ffff04 	movi	r3,-4
    8fec:	10c8703a 	and	r4,r2,r3
    8ff0:	2447c83a 	sub	r3,r4,r17
    8ff4:	008003c4 	movi	r2,15
    8ff8:	10fff70e 	bge	r2,r3,8fd8 <_malloc_r+0xd0>
    8ffc:	31bfffc4 	addi	r6,r6,-1
    9000:	32400044 	addi	r9,r6,1
    9004:	02800074 	movhi	r10,1
    9008:	52912e04 	addi	r10,r10,17592
    900c:	54000217 	ldw	r16,8(r10)
    9010:	8280a026 	beq	r16,r10,9294 <_malloc_r+0x38c>
    9014:	80800117 	ldw	r2,4(r16)
    9018:	00ffff04 	movi	r3,-4
    901c:	10ca703a 	and	r5,r2,r3
    9020:	2c4dc83a 	sub	r6,r5,r17
    9024:	008003c4 	movi	r2,15
    9028:	11808316 	blt	r2,r6,9238 <_malloc_r+0x330>
    902c:	52800315 	stw	r10,12(r10)
    9030:	52800215 	stw	r10,8(r10)
    9034:	30002916 	blt	r6,zero,90dc <_malloc_r+0x1d4>
    9038:	8147883a 	add	r3,r16,r5
    903c:	18800117 	ldw	r2,4(r3)
    9040:	9009883a 	mov	r4,r18
    9044:	10800054 	ori	r2,r2,1
    9048:	18800115 	stw	r2,4(r3)
    904c:	0009e300 	call	9e30 <__malloc_unlock>
    9050:	80c00204 	addi	r3,r16,8
    9054:	003fc006 	br	8f58 <_malloc_r+0x50>
    9058:	02c00074 	movhi	r11,1
    905c:	5ad12c04 	addi	r11,r11,17584
    9060:	8ac5883a 	add	r2,r17,r11
    9064:	14000317 	ldw	r16,12(r2)
    9068:	580f883a 	mov	r7,r11
    906c:	8806d0fa 	srli	r3,r17,3
    9070:	14006c26 	beq	r2,r16,9224 <_malloc_r+0x31c>
    9074:	80c00117 	ldw	r3,4(r16)
    9078:	00bfff04 	movi	r2,-4
    907c:	81800317 	ldw	r6,12(r16)
    9080:	1886703a 	and	r3,r3,r2
    9084:	80c7883a 	add	r3,r16,r3
    9088:	18800117 	ldw	r2,4(r3)
    908c:	81400217 	ldw	r5,8(r16)
    9090:	9009883a 	mov	r4,r18
    9094:	10800054 	ori	r2,r2,1
    9098:	18800115 	stw	r2,4(r3)
    909c:	31400215 	stw	r5,8(r6)
    90a0:	29800315 	stw	r6,12(r5)
    90a4:	0009e300 	call	9e30 <__malloc_unlock>
    90a8:	80c00204 	addi	r3,r16,8
    90ac:	003faa06 	br	8f58 <_malloc_r+0x50>
    90b0:	00800104 	movi	r2,4
    90b4:	10c0052e 	bgeu	r2,r3,90cc <_malloc_r+0x1c4>
    90b8:	00800504 	movi	r2,20
    90bc:	10c07836 	bltu	r2,r3,92a0 <_malloc_r+0x398>
    90c0:	198016c4 	addi	r6,r3,91
    90c4:	300490fa 	slli	r2,r6,3
    90c8:	003fbc06 	br	8fbc <_malloc_r+0xb4>
    90cc:	8804d1ba 	srli	r2,r17,6
    90d0:	11800e04 	addi	r6,r2,56
    90d4:	300490fa 	slli	r2,r6,3
    90d8:	003fb806 	br	8fbc <_malloc_r+0xb4>
    90dc:	00807fc4 	movi	r2,511
    90e0:	1140bb36 	bltu	r2,r5,93d0 <_malloc_r+0x4c8>
    90e4:	2806d0fa 	srli	r3,r5,3
    90e8:	573ffe04 	addi	fp,r10,-8
    90ec:	00800044 	movi	r2,1
    90f0:	180890fa 	slli	r4,r3,3
    90f4:	1807d0ba 	srai	r3,r3,2
    90f8:	e1c00117 	ldw	r7,4(fp)
    90fc:	5909883a 	add	r4,r11,r4
    9100:	21400217 	ldw	r5,8(r4)
    9104:	10c4983a 	sll	r2,r2,r3
    9108:	81000315 	stw	r4,12(r16)
    910c:	81400215 	stw	r5,8(r16)
    9110:	388eb03a 	or	r7,r7,r2
    9114:	2c000315 	stw	r16,12(r5)
    9118:	24000215 	stw	r16,8(r4)
    911c:	e1c00115 	stw	r7,4(fp)
    9120:	4807883a 	mov	r3,r9
    9124:	4800cd16 	blt	r9,zero,945c <_malloc_r+0x554>
    9128:	1807d0ba 	srai	r3,r3,2
    912c:	00800044 	movi	r2,1
    9130:	10c8983a 	sll	r4,r2,r3
    9134:	39004436 	bltu	r7,r4,9248 <_malloc_r+0x340>
    9138:	21c4703a 	and	r2,r4,r7
    913c:	10000a1e 	bne	r2,zero,9168 <_malloc_r+0x260>
    9140:	2109883a 	add	r4,r4,r4
    9144:	00bfff04 	movi	r2,-4
    9148:	4884703a 	and	r2,r9,r2
    914c:	3906703a 	and	r3,r7,r4
    9150:	12400104 	addi	r9,r2,4
    9154:	1800041e 	bne	r3,zero,9168 <_malloc_r+0x260>
    9158:	2109883a 	add	r4,r4,r4
    915c:	3904703a 	and	r2,r7,r4
    9160:	4a400104 	addi	r9,r9,4
    9164:	103ffc26 	beq	r2,zero,9158 <_malloc_r+0x250>
    9168:	480490fa 	slli	r2,r9,3
    916c:	4819883a 	mov	r12,r9
    9170:	023fff04 	movi	r8,-4
    9174:	589b883a 	add	r13,r11,r2
    9178:	6807883a 	mov	r3,r13
    917c:	014003c4 	movi	r5,15
    9180:	1c000317 	ldw	r16,12(r3)
    9184:	1c00041e 	bne	r3,r16,9198 <_malloc_r+0x290>
    9188:	0000a706 	br	9428 <_malloc_r+0x520>
    918c:	3000ab0e 	bge	r6,zero,943c <_malloc_r+0x534>
    9190:	84000317 	ldw	r16,12(r16)
    9194:	1c00a426 	beq	r3,r16,9428 <_malloc_r+0x520>
    9198:	80800117 	ldw	r2,4(r16)
    919c:	1204703a 	and	r2,r2,r8
    91a0:	144dc83a 	sub	r6,r2,r17
    91a4:	29bff90e 	bge	r5,r6,918c <_malloc_r+0x284>
    91a8:	81000317 	ldw	r4,12(r16)
    91ac:	80c00217 	ldw	r3,8(r16)
    91b0:	89400054 	ori	r5,r17,1
    91b4:	8445883a 	add	r2,r16,r17
    91b8:	20c00215 	stw	r3,8(r4)
    91bc:	19000315 	stw	r4,12(r3)
    91c0:	81400115 	stw	r5,4(r16)
    91c4:	1187883a 	add	r3,r2,r6
    91c8:	31000054 	ori	r4,r6,1
    91cc:	50800315 	stw	r2,12(r10)
    91d0:	50800215 	stw	r2,8(r10)
    91d4:	19800015 	stw	r6,0(r3)
    91d8:	11000115 	stw	r4,4(r2)
    91dc:	12800215 	stw	r10,8(r2)
    91e0:	12800315 	stw	r10,12(r2)
    91e4:	9009883a 	mov	r4,r18
    91e8:	0009e300 	call	9e30 <__malloc_unlock>
    91ec:	80c00204 	addi	r3,r16,8
    91f0:	003f5906 	br	8f58 <_malloc_r+0x50>
    91f4:	8109883a 	add	r4,r16,r4
    91f8:	20800117 	ldw	r2,4(r4)
    91fc:	80c00217 	ldw	r3,8(r16)
    9200:	81400317 	ldw	r5,12(r16)
    9204:	10800054 	ori	r2,r2,1
    9208:	20800115 	stw	r2,4(r4)
    920c:	28c00215 	stw	r3,8(r5)
    9210:	19400315 	stw	r5,12(r3)
    9214:	9009883a 	mov	r4,r18
    9218:	0009e300 	call	9e30 <__malloc_unlock>
    921c:	80c00204 	addi	r3,r16,8
    9220:	003f4d06 	br	8f58 <_malloc_r+0x50>
    9224:	80800204 	addi	r2,r16,8
    9228:	14000317 	ldw	r16,12(r2)
    922c:	143f911e 	bne	r2,r16,9074 <_malloc_r+0x16c>
    9230:	1a400084 	addi	r9,r3,2
    9234:	003f7306 	br	9004 <_malloc_r+0xfc>
    9238:	88c00054 	ori	r3,r17,1
    923c:	8445883a 	add	r2,r16,r17
    9240:	80c00115 	stw	r3,4(r16)
    9244:	003fdf06 	br	91c4 <_malloc_r+0x2bc>
    9248:	e4000217 	ldw	r16,8(fp)
    924c:	00bfff04 	movi	r2,-4
    9250:	80c00117 	ldw	r3,4(r16)
    9254:	802d883a 	mov	r22,r16
    9258:	18aa703a 	and	r21,r3,r2
    925c:	ac401636 	bltu	r21,r17,92b8 <_malloc_r+0x3b0>
    9260:	ac49c83a 	sub	r4,r21,r17
    9264:	008003c4 	movi	r2,15
    9268:	1100130e 	bge	r2,r4,92b8 <_malloc_r+0x3b0>
    926c:	88800054 	ori	r2,r17,1
    9270:	8447883a 	add	r3,r16,r17
    9274:	80800115 	stw	r2,4(r16)
    9278:	20800054 	ori	r2,r4,1
    927c:	18800115 	stw	r2,4(r3)
    9280:	e0c00215 	stw	r3,8(fp)
    9284:	9009883a 	mov	r4,r18
    9288:	0009e300 	call	9e30 <__malloc_unlock>
    928c:	80c00204 	addi	r3,r16,8
    9290:	003f3106 	br	8f58 <_malloc_r+0x50>
    9294:	39c00117 	ldw	r7,4(r7)
    9298:	573ffe04 	addi	fp,r10,-8
    929c:	003fa006 	br	9120 <_malloc_r+0x218>
    92a0:	00801504 	movi	r2,84
    92a4:	10c06736 	bltu	r2,r3,9444 <_malloc_r+0x53c>
    92a8:	8804d33a 	srli	r2,r17,12
    92ac:	11801b84 	addi	r6,r2,110
    92b0:	300490fa 	slli	r2,r6,3
    92b4:	003f4106 	br	8fbc <_malloc_r+0xb4>
    92b8:	d088f517 	ldw	r2,9172(gp)
    92bc:	d0e01317 	ldw	r3,-32692(gp)
    92c0:	053fffc4 	movi	r20,-1
    92c4:	10800404 	addi	r2,r2,16
    92c8:	88a7883a 	add	r19,r17,r2
    92cc:	1d000326 	beq	r3,r20,92dc <_malloc_r+0x3d4>
    92d0:	98c3ffc4 	addi	r3,r19,4095
    92d4:	00bc0004 	movi	r2,-4096
    92d8:	18a6703a 	and	r19,r3,r2
    92dc:	9009883a 	mov	r4,r18
    92e0:	980b883a 	mov	r5,r19
    92e4:	00096e00 	call	96e0 <_sbrk_r>
    92e8:	1009883a 	mov	r4,r2
    92ec:	15000426 	beq	r2,r20,9300 <_malloc_r+0x3f8>
    92f0:	854b883a 	add	r5,r16,r21
    92f4:	1029883a 	mov	r20,r2
    92f8:	11405a2e 	bgeu	r2,r5,9464 <_malloc_r+0x55c>
    92fc:	87000c26 	beq	r16,fp,9330 <_malloc_r+0x428>
    9300:	e4000217 	ldw	r16,8(fp)
    9304:	80c00117 	ldw	r3,4(r16)
    9308:	00bfff04 	movi	r2,-4
    930c:	1884703a 	and	r2,r3,r2
    9310:	14400336 	bltu	r2,r17,9320 <_malloc_r+0x418>
    9314:	1449c83a 	sub	r4,r2,r17
    9318:	008003c4 	movi	r2,15
    931c:	113fd316 	blt	r2,r4,926c <_malloc_r+0x364>
    9320:	9009883a 	mov	r4,r18
    9324:	0009e300 	call	9e30 <__malloc_unlock>
    9328:	0007883a 	mov	r3,zero
    932c:	003f0a06 	br	8f58 <_malloc_r+0x50>
    9330:	05c000b4 	movhi	r23,2
    9334:	bdfb2604 	addi	r23,r23,-4968
    9338:	b8800017 	ldw	r2,0(r23)
    933c:	988d883a 	add	r6,r19,r2
    9340:	b9800015 	stw	r6,0(r23)
    9344:	d0e01317 	ldw	r3,-32692(gp)
    9348:	00bfffc4 	movi	r2,-1
    934c:	18808e26 	beq	r3,r2,9588 <_malloc_r+0x680>
    9350:	2145c83a 	sub	r2,r4,r5
    9354:	3085883a 	add	r2,r6,r2
    9358:	b8800015 	stw	r2,0(r23)
    935c:	20c001cc 	andi	r3,r4,7
    9360:	18005f1e 	bne	r3,zero,94e0 <_malloc_r+0x5d8>
    9364:	000b883a 	mov	r5,zero
    9368:	a4c5883a 	add	r2,r20,r19
    936c:	1083ffcc 	andi	r2,r2,4095
    9370:	00c40004 	movi	r3,4096
    9374:	1887c83a 	sub	r3,r3,r2
    9378:	28e7883a 	add	r19,r5,r3
    937c:	9009883a 	mov	r4,r18
    9380:	980b883a 	mov	r5,r19
    9384:	00096e00 	call	96e0 <_sbrk_r>
    9388:	1007883a 	mov	r3,r2
    938c:	00bfffc4 	movi	r2,-1
    9390:	18807a26 	beq	r3,r2,957c <_malloc_r+0x674>
    9394:	1d05c83a 	sub	r2,r3,r20
    9398:	9885883a 	add	r2,r19,r2
    939c:	10c00054 	ori	r3,r2,1
    93a0:	b8800017 	ldw	r2,0(r23)
    93a4:	a021883a 	mov	r16,r20
    93a8:	a0c00115 	stw	r3,4(r20)
    93ac:	9885883a 	add	r2,r19,r2
    93b0:	b8800015 	stw	r2,0(r23)
    93b4:	e5000215 	stw	r20,8(fp)
    93b8:	b7003626 	beq	r22,fp,9494 <_malloc_r+0x58c>
    93bc:	018003c4 	movi	r6,15
    93c0:	35404b36 	bltu	r6,r21,94f0 <_malloc_r+0x5e8>
    93c4:	00800044 	movi	r2,1
    93c8:	a0800115 	stw	r2,4(r20)
    93cc:	003fcd06 	br	9304 <_malloc_r+0x3fc>
    93d0:	2808d27a 	srli	r4,r5,9
    93d4:	2000371e 	bne	r4,zero,94b4 <_malloc_r+0x5ac>
    93d8:	2808d0fa 	srli	r4,r5,3
    93dc:	200690fa 	slli	r3,r4,3
    93e0:	1ad1883a 	add	r8,r3,r11
    93e4:	41800217 	ldw	r6,8(r8)
    93e8:	41805b26 	beq	r8,r6,9558 <_malloc_r+0x650>
    93ec:	30800117 	ldw	r2,4(r6)
    93f0:	00ffff04 	movi	r3,-4
    93f4:	10c4703a 	and	r2,r2,r3
    93f8:	2880022e 	bgeu	r5,r2,9404 <_malloc_r+0x4fc>
    93fc:	31800217 	ldw	r6,8(r6)
    9400:	41bffa1e 	bne	r8,r6,93ec <_malloc_r+0x4e4>
    9404:	32000317 	ldw	r8,12(r6)
    9408:	39c00117 	ldw	r7,4(r7)
    940c:	82000315 	stw	r8,12(r16)
    9410:	81800215 	stw	r6,8(r16)
    9414:	07000074 	movhi	fp,1
    9418:	e7112c04 	addi	fp,fp,17584
    941c:	34000315 	stw	r16,12(r6)
    9420:	44000215 	stw	r16,8(r8)
    9424:	003f3e06 	br	9120 <_malloc_r+0x218>
    9428:	63000044 	addi	r12,r12,1
    942c:	608000cc 	andi	r2,r12,3
    9430:	10005d26 	beq	r2,zero,95a8 <_malloc_r+0x6a0>
    9434:	18c00204 	addi	r3,r3,8
    9438:	003f5106 	br	9180 <_malloc_r+0x278>
    943c:	8089883a 	add	r4,r16,r2
    9440:	003f6d06 	br	91f8 <_malloc_r+0x2f0>
    9444:	00805504 	movi	r2,340
    9448:	10c02036 	bltu	r2,r3,94cc <_malloc_r+0x5c4>
    944c:	8804d3fa 	srli	r2,r17,15
    9450:	11801dc4 	addi	r6,r2,119
    9454:	300490fa 	slli	r2,r6,3
    9458:	003ed806 	br	8fbc <_malloc_r+0xb4>
    945c:	48c000c4 	addi	r3,r9,3
    9460:	003f3106 	br	9128 <_malloc_r+0x220>
    9464:	05c000b4 	movhi	r23,2
    9468:	bdfb2604 	addi	r23,r23,-4968
    946c:	b8800017 	ldw	r2,0(r23)
    9470:	988d883a 	add	r6,r19,r2
    9474:	b9800015 	stw	r6,0(r23)
    9478:	293fb21e 	bne	r5,r4,9344 <_malloc_r+0x43c>
    947c:	2083ffcc 	andi	r2,r4,4095
    9480:	103fb01e 	bne	r2,zero,9344 <_malloc_r+0x43c>
    9484:	e4000217 	ldw	r16,8(fp)
    9488:	9d45883a 	add	r2,r19,r21
    948c:	10800054 	ori	r2,r2,1
    9490:	80800115 	stw	r2,4(r16)
    9494:	b8c00017 	ldw	r3,0(r23)
    9498:	d088f617 	ldw	r2,9176(gp)
    949c:	10c0012e 	bgeu	r2,r3,94a4 <_malloc_r+0x59c>
    94a0:	d0c8f615 	stw	r3,9176(gp)
    94a4:	d088f717 	ldw	r2,9180(gp)
    94a8:	10ff962e 	bgeu	r2,r3,9304 <_malloc_r+0x3fc>
    94ac:	d0c8f715 	stw	r3,9180(gp)
    94b0:	003f9406 	br	9304 <_malloc_r+0x3fc>
    94b4:	00800104 	movi	r2,4
    94b8:	11001e36 	bltu	r2,r4,9534 <_malloc_r+0x62c>
    94bc:	2804d1ba 	srli	r2,r5,6
    94c0:	11000e04 	addi	r4,r2,56
    94c4:	200690fa 	slli	r3,r4,3
    94c8:	003fc506 	br	93e0 <_malloc_r+0x4d8>
    94cc:	00815504 	movi	r2,1364
    94d0:	10c01d2e 	bgeu	r2,r3,9548 <_malloc_r+0x640>
    94d4:	01801f84 	movi	r6,126
    94d8:	0080fc04 	movi	r2,1008
    94dc:	003eb706 	br	8fbc <_malloc_r+0xb4>
    94e0:	00800204 	movi	r2,8
    94e4:	10cbc83a 	sub	r5,r2,r3
    94e8:	2169883a 	add	r20,r4,r5
    94ec:	003f9e06 	br	9368 <_malloc_r+0x460>
    94f0:	00bffe04 	movi	r2,-8
    94f4:	a93ffd04 	addi	r4,r21,-12
    94f8:	2088703a 	and	r4,r4,r2
    94fc:	b10b883a 	add	r5,r22,r4
    9500:	00c00144 	movi	r3,5
    9504:	28c00215 	stw	r3,8(r5)
    9508:	28c00115 	stw	r3,4(r5)
    950c:	b0800117 	ldw	r2,4(r22)
    9510:	1080004c 	andi	r2,r2,1
    9514:	2084b03a 	or	r2,r4,r2
    9518:	b0800115 	stw	r2,4(r22)
    951c:	313fdd2e 	bgeu	r6,r4,9494 <_malloc_r+0x58c>
    9520:	b1400204 	addi	r5,r22,8
    9524:	9009883a 	mov	r4,r18
    9528:	00088e00 	call	88e0 <_free_r>
    952c:	e4000217 	ldw	r16,8(fp)
    9530:	003fd806 	br	9494 <_malloc_r+0x58c>
    9534:	00800504 	movi	r2,20
    9538:	11001536 	bltu	r2,r4,9590 <_malloc_r+0x688>
    953c:	210016c4 	addi	r4,r4,91
    9540:	200690fa 	slli	r3,r4,3
    9544:	003fa606 	br	93e0 <_malloc_r+0x4d8>
    9548:	8804d4ba 	srli	r2,r17,18
    954c:	11801f04 	addi	r6,r2,124
    9550:	300490fa 	slli	r2,r6,3
    9554:	003e9906 	br	8fbc <_malloc_r+0xb4>
    9558:	2009d0ba 	srai	r4,r4,2
    955c:	01400074 	movhi	r5,1
    9560:	29512c04 	addi	r5,r5,17584
    9564:	00c00044 	movi	r3,1
    9568:	28800117 	ldw	r2,4(r5)
    956c:	1906983a 	sll	r3,r3,r4
    9570:	10c4b03a 	or	r2,r2,r3
    9574:	28800115 	stw	r2,4(r5)
    9578:	003fa306 	br	9408 <_malloc_r+0x500>
    957c:	0027883a 	mov	r19,zero
    9580:	00c00044 	movi	r3,1
    9584:	003f8606 	br	93a0 <_malloc_r+0x498>
    9588:	d1201315 	stw	r4,-32692(gp)
    958c:	003f7306 	br	935c <_malloc_r+0x454>
    9590:	00801504 	movi	r2,84
    9594:	11001936 	bltu	r2,r4,95fc <_malloc_r+0x6f4>
    9598:	2804d33a 	srli	r2,r5,12
    959c:	11001b84 	addi	r4,r2,110
    95a0:	200690fa 	slli	r3,r4,3
    95a4:	003f8e06 	br	93e0 <_malloc_r+0x4d8>
    95a8:	480b883a 	mov	r5,r9
    95ac:	6807883a 	mov	r3,r13
    95b0:	288000cc 	andi	r2,r5,3
    95b4:	18fffe04 	addi	r3,r3,-8
    95b8:	297fffc4 	addi	r5,r5,-1
    95bc:	10001526 	beq	r2,zero,9614 <_malloc_r+0x70c>
    95c0:	18800217 	ldw	r2,8(r3)
    95c4:	10fffa26 	beq	r2,r3,95b0 <_malloc_r+0x6a8>
    95c8:	2109883a 	add	r4,r4,r4
    95cc:	393f1e36 	bltu	r7,r4,9248 <_malloc_r+0x340>
    95d0:	203f1d26 	beq	r4,zero,9248 <_malloc_r+0x340>
    95d4:	21c4703a 	and	r2,r4,r7
    95d8:	10000226 	beq	r2,zero,95e4 <_malloc_r+0x6dc>
    95dc:	6013883a 	mov	r9,r12
    95e0:	003ee106 	br	9168 <_malloc_r+0x260>
    95e4:	2109883a 	add	r4,r4,r4
    95e8:	3904703a 	and	r2,r7,r4
    95ec:	63000104 	addi	r12,r12,4
    95f0:	103ffc26 	beq	r2,zero,95e4 <_malloc_r+0x6dc>
    95f4:	6013883a 	mov	r9,r12
    95f8:	003edb06 	br	9168 <_malloc_r+0x260>
    95fc:	00805504 	movi	r2,340
    9600:	11000836 	bltu	r2,r4,9624 <_malloc_r+0x71c>
    9604:	2804d3fa 	srli	r2,r5,15
    9608:	11001dc4 	addi	r4,r2,119
    960c:	200690fa 	slli	r3,r4,3
    9610:	003f7306 	br	93e0 <_malloc_r+0x4d8>
    9614:	0104303a 	nor	r2,zero,r4
    9618:	388e703a 	and	r7,r7,r2
    961c:	e1c00115 	stw	r7,4(fp)
    9620:	003fe906 	br	95c8 <_malloc_r+0x6c0>
    9624:	00815504 	movi	r2,1364
    9628:	1100032e 	bgeu	r2,r4,9638 <_malloc_r+0x730>
    962c:	01001f84 	movi	r4,126
    9630:	00c0fc04 	movi	r3,1008
    9634:	003f6a06 	br	93e0 <_malloc_r+0x4d8>
    9638:	2804d4ba 	srli	r2,r5,18
    963c:	11001f04 	addi	r4,r2,124
    9640:	200690fa 	slli	r3,r4,3
    9644:	003f6606 	br	93e0 <_malloc_r+0x4d8>

00009648 <memset>:
    9648:	008000c4 	movi	r2,3
    964c:	29403fcc 	andi	r5,r5,255
    9650:	2007883a 	mov	r3,r4
    9654:	1180022e 	bgeu	r2,r6,9660 <memset+0x18>
    9658:	2084703a 	and	r2,r4,r2
    965c:	10000826 	beq	r2,zero,9680 <memset+0x38>
    9660:	30000526 	beq	r6,zero,9678 <memset+0x30>
    9664:	2805883a 	mov	r2,r5
    9668:	30cd883a 	add	r6,r6,r3
    966c:	18800005 	stb	r2,0(r3)
    9670:	18c00044 	addi	r3,r3,1
    9674:	19bffd1e 	bne	r3,r6,966c <memset+0x24>
    9678:	2005883a 	mov	r2,r4
    967c:	f800283a 	ret
    9680:	2804923a 	slli	r2,r5,8
    9684:	020003c4 	movi	r8,15
    9688:	200f883a 	mov	r7,r4
    968c:	2884b03a 	or	r2,r5,r2
    9690:	1006943a 	slli	r3,r2,16
    9694:	10c6b03a 	or	r3,r2,r3
    9698:	41800a2e 	bgeu	r8,r6,96c4 <memset+0x7c>
    969c:	4005883a 	mov	r2,r8
    96a0:	31bffc04 	addi	r6,r6,-16
    96a4:	38c00015 	stw	r3,0(r7)
    96a8:	38c00115 	stw	r3,4(r7)
    96ac:	38c00215 	stw	r3,8(r7)
    96b0:	38c00315 	stw	r3,12(r7)
    96b4:	39c00404 	addi	r7,r7,16
    96b8:	11bff936 	bltu	r2,r6,96a0 <memset+0x58>
    96bc:	008000c4 	movi	r2,3
    96c0:	1180052e 	bgeu	r2,r6,96d8 <memset+0x90>
    96c4:	31bfff04 	addi	r6,r6,-4
    96c8:	008000c4 	movi	r2,3
    96cc:	38c00015 	stw	r3,0(r7)
    96d0:	39c00104 	addi	r7,r7,4
    96d4:	11bffb36 	bltu	r2,r6,96c4 <memset+0x7c>
    96d8:	3807883a 	mov	r3,r7
    96dc:	003fe006 	br	9660 <memset+0x18>

000096e0 <_sbrk_r>:
    96e0:	defffd04 	addi	sp,sp,-12
    96e4:	dc000015 	stw	r16,0(sp)
    96e8:	040000b4 	movhi	r16,2
    96ec:	843b2204 	addi	r16,r16,-4984
    96f0:	dc400115 	stw	r17,4(sp)
    96f4:	80000015 	stw	zero,0(r16)
    96f8:	2023883a 	mov	r17,r4
    96fc:	2809883a 	mov	r4,r5
    9700:	dfc00215 	stw	ra,8(sp)
    9704:	0009f2c0 	call	9f2c <sbrk>
    9708:	1007883a 	mov	r3,r2
    970c:	00bfffc4 	movi	r2,-1
    9710:	18800626 	beq	r3,r2,972c <_sbrk_r+0x4c>
    9714:	1805883a 	mov	r2,r3
    9718:	dfc00217 	ldw	ra,8(sp)
    971c:	dc400117 	ldw	r17,4(sp)
    9720:	dc000017 	ldw	r16,0(sp)
    9724:	dec00304 	addi	sp,sp,12
    9728:	f800283a 	ret
    972c:	80800017 	ldw	r2,0(r16)
    9730:	103ff826 	beq	r2,zero,9714 <_sbrk_r+0x34>
    9734:	88800015 	stw	r2,0(r17)
    9738:	1805883a 	mov	r2,r3
    973c:	dfc00217 	ldw	ra,8(sp)
    9740:	dc400117 	ldw	r17,4(sp)
    9744:	dc000017 	ldw	r16,0(sp)
    9748:	dec00304 	addi	sp,sp,12
    974c:	f800283a 	ret

00009750 <__sclose>:
    9750:	2940038f 	ldh	r5,14(r5)
    9754:	00099141 	jmpi	9914 <_close_r>

00009758 <__sseek>:
    9758:	defffe04 	addi	sp,sp,-8
    975c:	dc000015 	stw	r16,0(sp)
    9760:	2821883a 	mov	r16,r5
    9764:	2940038f 	ldh	r5,14(r5)
    9768:	dfc00115 	stw	ra,4(sp)
    976c:	0009b8c0 	call	9b8c <_lseek_r>
    9770:	1007883a 	mov	r3,r2
    9774:	00bfffc4 	movi	r2,-1
    9778:	18800926 	beq	r3,r2,97a0 <__sseek+0x48>
    977c:	8080030b 	ldhu	r2,12(r16)
    9780:	80c01415 	stw	r3,80(r16)
    9784:	10840014 	ori	r2,r2,4096
    9788:	8080030d 	sth	r2,12(r16)
    978c:	1805883a 	mov	r2,r3
    9790:	dfc00117 	ldw	ra,4(sp)
    9794:	dc000017 	ldw	r16,0(sp)
    9798:	dec00204 	addi	sp,sp,8
    979c:	f800283a 	ret
    97a0:	8080030b 	ldhu	r2,12(r16)
    97a4:	10bbffcc 	andi	r2,r2,61439
    97a8:	8080030d 	sth	r2,12(r16)
    97ac:	1805883a 	mov	r2,r3
    97b0:	dfc00117 	ldw	ra,4(sp)
    97b4:	dc000017 	ldw	r16,0(sp)
    97b8:	dec00204 	addi	sp,sp,8
    97bc:	f800283a 	ret

000097c0 <__swrite>:
    97c0:	2880030b 	ldhu	r2,12(r5)
    97c4:	defffb04 	addi	sp,sp,-20
    97c8:	dcc00315 	stw	r19,12(sp)
    97cc:	1080400c 	andi	r2,r2,256
    97d0:	dc800215 	stw	r18,8(sp)
    97d4:	dc400115 	stw	r17,4(sp)
    97d8:	dc000015 	stw	r16,0(sp)
    97dc:	3027883a 	mov	r19,r6
    97e0:	3825883a 	mov	r18,r7
    97e4:	dfc00415 	stw	ra,16(sp)
    97e8:	2821883a 	mov	r16,r5
    97ec:	000d883a 	mov	r6,zero
    97f0:	01c00084 	movi	r7,2
    97f4:	2023883a 	mov	r17,r4
    97f8:	10000226 	beq	r2,zero,9804 <__swrite+0x44>
    97fc:	2940038f 	ldh	r5,14(r5)
    9800:	0009b8c0 	call	9b8c <_lseek_r>
    9804:	8080030b 	ldhu	r2,12(r16)
    9808:	8140038f 	ldh	r5,14(r16)
    980c:	8809883a 	mov	r4,r17
    9810:	10bbffcc 	andi	r2,r2,61439
    9814:	980d883a 	mov	r6,r19
    9818:	900f883a 	mov	r7,r18
    981c:	8080030d 	sth	r2,12(r16)
    9820:	dfc00417 	ldw	ra,16(sp)
    9824:	dcc00317 	ldw	r19,12(sp)
    9828:	dc800217 	ldw	r18,8(sp)
    982c:	dc400117 	ldw	r17,4(sp)
    9830:	dc000017 	ldw	r16,0(sp)
    9834:	dec00504 	addi	sp,sp,20
    9838:	000989c1 	jmpi	989c <_write_r>

0000983c <__sread>:
    983c:	defffe04 	addi	sp,sp,-8
    9840:	dc000015 	stw	r16,0(sp)
    9844:	2821883a 	mov	r16,r5
    9848:	2940038f 	ldh	r5,14(r5)
    984c:	dfc00115 	stw	ra,4(sp)
    9850:	0009c040 	call	9c04 <_read_r>
    9854:	1007883a 	mov	r3,r2
    9858:	10000816 	blt	r2,zero,987c <__sread+0x40>
    985c:	80801417 	ldw	r2,80(r16)
    9860:	10c5883a 	add	r2,r2,r3
    9864:	80801415 	stw	r2,80(r16)
    9868:	1805883a 	mov	r2,r3
    986c:	dfc00117 	ldw	ra,4(sp)
    9870:	dc000017 	ldw	r16,0(sp)
    9874:	dec00204 	addi	sp,sp,8
    9878:	f800283a 	ret
    987c:	8080030b 	ldhu	r2,12(r16)
    9880:	10bbffcc 	andi	r2,r2,61439
    9884:	8080030d 	sth	r2,12(r16)
    9888:	1805883a 	mov	r2,r3
    988c:	dfc00117 	ldw	ra,4(sp)
    9890:	dc000017 	ldw	r16,0(sp)
    9894:	dec00204 	addi	sp,sp,8
    9898:	f800283a 	ret

0000989c <_write_r>:
    989c:	defffd04 	addi	sp,sp,-12
    98a0:	dc000015 	stw	r16,0(sp)
    98a4:	040000b4 	movhi	r16,2
    98a8:	843b2204 	addi	r16,r16,-4984
    98ac:	dc400115 	stw	r17,4(sp)
    98b0:	80000015 	stw	zero,0(r16)
    98b4:	2023883a 	mov	r17,r4
    98b8:	2809883a 	mov	r4,r5
    98bc:	300b883a 	mov	r5,r6
    98c0:	380d883a 	mov	r6,r7
    98c4:	dfc00215 	stw	ra,8(sp)
    98c8:	0009f7c0 	call	9f7c <write>
    98cc:	1007883a 	mov	r3,r2
    98d0:	00bfffc4 	movi	r2,-1
    98d4:	18800626 	beq	r3,r2,98f0 <_write_r+0x54>
    98d8:	1805883a 	mov	r2,r3
    98dc:	dfc00217 	ldw	ra,8(sp)
    98e0:	dc400117 	ldw	r17,4(sp)
    98e4:	dc000017 	ldw	r16,0(sp)
    98e8:	dec00304 	addi	sp,sp,12
    98ec:	f800283a 	ret
    98f0:	80800017 	ldw	r2,0(r16)
    98f4:	103ff826 	beq	r2,zero,98d8 <_write_r+0x3c>
    98f8:	88800015 	stw	r2,0(r17)
    98fc:	1805883a 	mov	r2,r3
    9900:	dfc00217 	ldw	ra,8(sp)
    9904:	dc400117 	ldw	r17,4(sp)
    9908:	dc000017 	ldw	r16,0(sp)
    990c:	dec00304 	addi	sp,sp,12
    9910:	f800283a 	ret

00009914 <_close_r>:
    9914:	defffd04 	addi	sp,sp,-12
    9918:	dc000015 	stw	r16,0(sp)
    991c:	040000b4 	movhi	r16,2
    9920:	843b2204 	addi	r16,r16,-4984
    9924:	dc400115 	stw	r17,4(sp)
    9928:	80000015 	stw	zero,0(r16)
    992c:	2023883a 	mov	r17,r4
    9930:	2809883a 	mov	r4,r5
    9934:	dfc00215 	stw	ra,8(sp)
    9938:	00072940 	call	7294 <close>
    993c:	1007883a 	mov	r3,r2
    9940:	00bfffc4 	movi	r2,-1
    9944:	18800626 	beq	r3,r2,9960 <_close_r+0x4c>
    9948:	1805883a 	mov	r2,r3
    994c:	dfc00217 	ldw	ra,8(sp)
    9950:	dc400117 	ldw	r17,4(sp)
    9954:	dc000017 	ldw	r16,0(sp)
    9958:	dec00304 	addi	sp,sp,12
    995c:	f800283a 	ret
    9960:	80800017 	ldw	r2,0(r16)
    9964:	103ff826 	beq	r2,zero,9948 <_close_r+0x34>
    9968:	88800015 	stw	r2,0(r17)
    996c:	1805883a 	mov	r2,r3
    9970:	dfc00217 	ldw	ra,8(sp)
    9974:	dc400117 	ldw	r17,4(sp)
    9978:	dc000017 	ldw	r16,0(sp)
    997c:	dec00304 	addi	sp,sp,12
    9980:	f800283a 	ret

00009984 <_fclose_r>:
    9984:	defffc04 	addi	sp,sp,-16
    9988:	dc400115 	stw	r17,4(sp)
    998c:	dc000015 	stw	r16,0(sp)
    9990:	dfc00315 	stw	ra,12(sp)
    9994:	dc800215 	stw	r18,8(sp)
    9998:	2821883a 	mov	r16,r5
    999c:	2023883a 	mov	r17,r4
    99a0:	28002926 	beq	r5,zero,9a48 <_fclose_r+0xc4>
    99a4:	000854c0 	call	854c <__sfp_lock_acquire>
    99a8:	88000226 	beq	r17,zero,99b4 <_fclose_r+0x30>
    99ac:	88800e17 	ldw	r2,56(r17)
    99b0:	10002d26 	beq	r2,zero,9a68 <_fclose_r+0xe4>
    99b4:	8080030f 	ldh	r2,12(r16)
    99b8:	10002226 	beq	r2,zero,9a44 <_fclose_r+0xc0>
    99bc:	8809883a 	mov	r4,r17
    99c0:	800b883a 	mov	r5,r16
    99c4:	00082c40 	call	82c4 <_fflush_r>
    99c8:	1025883a 	mov	r18,r2
    99cc:	80800b17 	ldw	r2,44(r16)
    99d0:	10000426 	beq	r2,zero,99e4 <_fclose_r+0x60>
    99d4:	81400717 	ldw	r5,28(r16)
    99d8:	8809883a 	mov	r4,r17
    99dc:	103ee83a 	callr	r2
    99e0:	10002a16 	blt	r2,zero,9a8c <_fclose_r+0x108>
    99e4:	8080030b 	ldhu	r2,12(r16)
    99e8:	1080200c 	andi	r2,r2,128
    99ec:	1000231e 	bne	r2,zero,9a7c <_fclose_r+0xf8>
    99f0:	81400c17 	ldw	r5,48(r16)
    99f4:	28000526 	beq	r5,zero,9a0c <_fclose_r+0x88>
    99f8:	80801004 	addi	r2,r16,64
    99fc:	28800226 	beq	r5,r2,9a08 <_fclose_r+0x84>
    9a00:	8809883a 	mov	r4,r17
    9a04:	00088e00 	call	88e0 <_free_r>
    9a08:	80000c15 	stw	zero,48(r16)
    9a0c:	81401117 	ldw	r5,68(r16)
    9a10:	28000326 	beq	r5,zero,9a20 <_fclose_r+0x9c>
    9a14:	8809883a 	mov	r4,r17
    9a18:	00088e00 	call	88e0 <_free_r>
    9a1c:	80001115 	stw	zero,68(r16)
    9a20:	8000030d 	sth	zero,12(r16)
    9a24:	00085500 	call	8550 <__sfp_lock_release>
    9a28:	9005883a 	mov	r2,r18
    9a2c:	dfc00317 	ldw	ra,12(sp)
    9a30:	dc800217 	ldw	r18,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00404 	addi	sp,sp,16
    9a40:	f800283a 	ret
    9a44:	00085500 	call	8550 <__sfp_lock_release>
    9a48:	0025883a 	mov	r18,zero
    9a4c:	9005883a 	mov	r2,r18
    9a50:	dfc00317 	ldw	ra,12(sp)
    9a54:	dc800217 	ldw	r18,8(sp)
    9a58:	dc400117 	ldw	r17,4(sp)
    9a5c:	dc000017 	ldw	r16,0(sp)
    9a60:	dec00404 	addi	sp,sp,16
    9a64:	f800283a 	ret
    9a68:	8809883a 	mov	r4,r17
    9a6c:	000855c0 	call	855c <__sinit>
    9a70:	8080030f 	ldh	r2,12(r16)
    9a74:	103fd11e 	bne	r2,zero,99bc <_fclose_r+0x38>
    9a78:	003ff206 	br	9a44 <_fclose_r+0xc0>
    9a7c:	81400417 	ldw	r5,16(r16)
    9a80:	8809883a 	mov	r4,r17
    9a84:	00088e00 	call	88e0 <_free_r>
    9a88:	003fd906 	br	99f0 <_fclose_r+0x6c>
    9a8c:	04bfffc4 	movi	r18,-1
    9a90:	003fd406 	br	99e4 <_fclose_r+0x60>

00009a94 <fclose>:
    9a94:	00800074 	movhi	r2,1
    9a98:	10923e04 	addi	r2,r2,18680
    9a9c:	200b883a 	mov	r5,r4
    9aa0:	11000017 	ldw	r4,0(r2)
    9aa4:	00099841 	jmpi	9984 <_fclose_r>

00009aa8 <_fstat_r>:
    9aa8:	defffd04 	addi	sp,sp,-12
    9aac:	dc000015 	stw	r16,0(sp)
    9ab0:	040000b4 	movhi	r16,2
    9ab4:	843b2204 	addi	r16,r16,-4984
    9ab8:	dc400115 	stw	r17,4(sp)
    9abc:	80000015 	stw	zero,0(r16)
    9ac0:	2023883a 	mov	r17,r4
    9ac4:	2809883a 	mov	r4,r5
    9ac8:	300b883a 	mov	r5,r6
    9acc:	dfc00215 	stw	ra,8(sp)
    9ad0:	0009c900 	call	9c90 <fstat>
    9ad4:	1007883a 	mov	r3,r2
    9ad8:	00bfffc4 	movi	r2,-1
    9adc:	18800626 	beq	r3,r2,9af8 <_fstat_r+0x50>
    9ae0:	1805883a 	mov	r2,r3
    9ae4:	dfc00217 	ldw	ra,8(sp)
    9ae8:	dc400117 	ldw	r17,4(sp)
    9aec:	dc000017 	ldw	r16,0(sp)
    9af0:	dec00304 	addi	sp,sp,12
    9af4:	f800283a 	ret
    9af8:	80800017 	ldw	r2,0(r16)
    9afc:	103ff826 	beq	r2,zero,9ae0 <_fstat_r+0x38>
    9b00:	88800015 	stw	r2,0(r17)
    9b04:	1805883a 	mov	r2,r3
    9b08:	dfc00217 	ldw	ra,8(sp)
    9b0c:	dc400117 	ldw	r17,4(sp)
    9b10:	dc000017 	ldw	r16,0(sp)
    9b14:	dec00304 	addi	sp,sp,12
    9b18:	f800283a 	ret

00009b1c <_isatty_r>:
    9b1c:	defffd04 	addi	sp,sp,-12
    9b20:	dc000015 	stw	r16,0(sp)
    9b24:	040000b4 	movhi	r16,2
    9b28:	843b2204 	addi	r16,r16,-4984
    9b2c:	dc400115 	stw	r17,4(sp)
    9b30:	80000015 	stw	zero,0(r16)
    9b34:	2023883a 	mov	r17,r4
    9b38:	2809883a 	mov	r4,r5
    9b3c:	dfc00215 	stw	ra,8(sp)
    9b40:	0009d100 	call	9d10 <isatty>
    9b44:	1007883a 	mov	r3,r2
    9b48:	00bfffc4 	movi	r2,-1
    9b4c:	18800626 	beq	r3,r2,9b68 <_isatty_r+0x4c>
    9b50:	1805883a 	mov	r2,r3
    9b54:	dfc00217 	ldw	ra,8(sp)
    9b58:	dc400117 	ldw	r17,4(sp)
    9b5c:	dc000017 	ldw	r16,0(sp)
    9b60:	dec00304 	addi	sp,sp,12
    9b64:	f800283a 	ret
    9b68:	80800017 	ldw	r2,0(r16)
    9b6c:	103ff826 	beq	r2,zero,9b50 <_isatty_r+0x34>
    9b70:	88800015 	stw	r2,0(r17)
    9b74:	1805883a 	mov	r2,r3
    9b78:	dfc00217 	ldw	ra,8(sp)
    9b7c:	dc400117 	ldw	r17,4(sp)
    9b80:	dc000017 	ldw	r16,0(sp)
    9b84:	dec00304 	addi	sp,sp,12
    9b88:	f800283a 	ret

00009b8c <_lseek_r>:
    9b8c:	defffd04 	addi	sp,sp,-12
    9b90:	dc000015 	stw	r16,0(sp)
    9b94:	040000b4 	movhi	r16,2
    9b98:	843b2204 	addi	r16,r16,-4984
    9b9c:	dc400115 	stw	r17,4(sp)
    9ba0:	80000015 	stw	zero,0(r16)
    9ba4:	2023883a 	mov	r17,r4
    9ba8:	2809883a 	mov	r4,r5
    9bac:	300b883a 	mov	r5,r6
    9bb0:	380d883a 	mov	r6,r7
    9bb4:	dfc00215 	stw	ra,8(sp)
    9bb8:	0009d940 	call	9d94 <lseek>
    9bbc:	1007883a 	mov	r3,r2
    9bc0:	00bfffc4 	movi	r2,-1
    9bc4:	18800626 	beq	r3,r2,9be0 <_lseek_r+0x54>
    9bc8:	1805883a 	mov	r2,r3
    9bcc:	dfc00217 	ldw	ra,8(sp)
    9bd0:	dc400117 	ldw	r17,4(sp)
    9bd4:	dc000017 	ldw	r16,0(sp)
    9bd8:	dec00304 	addi	sp,sp,12
    9bdc:	f800283a 	ret
    9be0:	80800017 	ldw	r2,0(r16)
    9be4:	103ff826 	beq	r2,zero,9bc8 <_lseek_r+0x3c>
    9be8:	88800015 	stw	r2,0(r17)
    9bec:	1805883a 	mov	r2,r3
    9bf0:	dfc00217 	ldw	ra,8(sp)
    9bf4:	dc400117 	ldw	r17,4(sp)
    9bf8:	dc000017 	ldw	r16,0(sp)
    9bfc:	dec00304 	addi	sp,sp,12
    9c00:	f800283a 	ret

00009c04 <_read_r>:
    9c04:	defffd04 	addi	sp,sp,-12
    9c08:	dc000015 	stw	r16,0(sp)
    9c0c:	040000b4 	movhi	r16,2
    9c10:	843b2204 	addi	r16,r16,-4984
    9c14:	dc400115 	stw	r17,4(sp)
    9c18:	80000015 	stw	zero,0(r16)
    9c1c:	2023883a 	mov	r17,r4
    9c20:	2809883a 	mov	r4,r5
    9c24:	300b883a 	mov	r5,r6
    9c28:	380d883a 	mov	r6,r7
    9c2c:	dfc00215 	stw	ra,8(sp)
    9c30:	0009e340 	call	9e34 <read>
    9c34:	1007883a 	mov	r3,r2
    9c38:	00bfffc4 	movi	r2,-1
    9c3c:	18800626 	beq	r3,r2,9c58 <_read_r+0x54>
    9c40:	1805883a 	mov	r2,r3
    9c44:	dfc00217 	ldw	ra,8(sp)
    9c48:	dc400117 	ldw	r17,4(sp)
    9c4c:	dc000017 	ldw	r16,0(sp)
    9c50:	dec00304 	addi	sp,sp,12
    9c54:	f800283a 	ret
    9c58:	80800017 	ldw	r2,0(r16)
    9c5c:	103ff826 	beq	r2,zero,9c40 <_read_r+0x3c>
    9c60:	88800015 	stw	r2,0(r17)
    9c64:	1805883a 	mov	r2,r3
    9c68:	dfc00217 	ldw	ra,8(sp)
    9c6c:	dc400117 	ldw	r17,4(sp)
    9c70:	dc000017 	ldw	r16,0(sp)
    9c74:	dec00304 	addi	sp,sp,12
    9c78:	f800283a 	ret

00009c7c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9c7c:	20000226 	beq	r4,zero,9c88 <_exit+0xc>
    ALT_SIM_FAIL();
    9c80:	002af070 	cmpltui	zero,zero,43969
    9c84:	00000106 	br	9c8c <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    9c88:	002af0b0 	cmpltui	zero,zero,43970
    9c8c:	003fff06 	br	9c8c <_exit+0x10>

00009c90 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9c90:	deffff04 	addi	sp,sp,-4
    9c94:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9c98:	20000e16 	blt	r4,zero,9cd4 <fstat+0x44>
    9c9c:	20c00324 	muli	r3,r4,12
    9ca0:	00800074 	movhi	r2,1
    9ca4:	108fcc04 	addi	r2,r2,16176
    9ca8:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9cac:	20000926 	beq	r4,zero,9cd4 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9cb0:	20800017 	ldw	r2,0(r4)
    9cb4:	10800817 	ldw	r2,32(r2)
    9cb8:	10000226 	beq	r2,zero,9cc4 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    9cbc:	103ee83a 	callr	r2
    9cc0:	00001006 	br	9d04 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9cc4:	00880004 	movi	r2,8192
    9cc8:	28800115 	stw	r2,4(r5)
    9ccc:	0005883a 	mov	r2,zero
    9cd0:	00000c06 	br	9d04 <fstat+0x74>
    9cd4:	00800074 	movhi	r2,1
    9cd8:	10923a04 	addi	r2,r2,18664
    9cdc:	10800017 	ldw	r2,0(r2)
    9ce0:	1000031e 	bne	r2,zero,9cf0 <fstat+0x60>
    9ce4:	00c000b4 	movhi	r3,2
    9ce8:	18fb2204 	addi	r3,r3,-4984
    9cec:	00000206 	br	9cf8 <fstat+0x68>
    9cf0:	103ee83a 	callr	r2
    9cf4:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9cf8:	00801444 	movi	r2,81
    9cfc:	18800015 	stw	r2,0(r3)
    9d00:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    9d04:	dfc00017 	ldw	ra,0(sp)
    9d08:	dec00104 	addi	sp,sp,4
    9d0c:	f800283a 	ret

00009d10 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9d10:	defff004 	addi	sp,sp,-64
    9d14:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9d18:	20000f16 	blt	r4,zero,9d58 <isatty+0x48>
    9d1c:	20c00324 	muli	r3,r4,12
    9d20:	00800074 	movhi	r2,1
    9d24:	108fcc04 	addi	r2,r2,16176
    9d28:	1885883a 	add	r2,r3,r2
  
  if (fd)
    9d2c:	10000a26 	beq	r2,zero,9d58 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9d30:	10800017 	ldw	r2,0(r2)
    9d34:	10800817 	ldw	r2,32(r2)
    9d38:	1000021e 	bne	r2,zero,9d44 <isatty+0x34>
    9d3c:	00800044 	movi	r2,1
    9d40:	00001106 	br	9d88 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9d44:	d80b883a 	mov	r5,sp
    9d48:	0009c900 	call	9c90 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9d4c:	d8800117 	ldw	r2,4(sp)
    9d50:	10880020 	cmpeqi	r2,r2,8192
    9d54:	00000c06 	br	9d88 <isatty+0x78>
    9d58:	00800074 	movhi	r2,1
    9d5c:	10923a04 	addi	r2,r2,18664
    9d60:	10800017 	ldw	r2,0(r2)
    9d64:	1000031e 	bne	r2,zero,9d74 <isatty+0x64>
    9d68:	00c000b4 	movhi	r3,2
    9d6c:	18fb2204 	addi	r3,r3,-4984
    9d70:	00000206 	br	9d7c <isatty+0x6c>
    9d74:	103ee83a 	callr	r2
    9d78:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d7c:	00801444 	movi	r2,81
    9d80:	18800015 	stw	r2,0(r3)
    9d84:	0005883a 	mov	r2,zero
    return 0;
  }
}
    9d88:	dfc00f17 	ldw	ra,60(sp)
    9d8c:	dec01004 	addi	sp,sp,64
    9d90:	f800283a 	ret

00009d94 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9d94:	defffe04 	addi	sp,sp,-8
    9d98:	dfc00115 	stw	ra,4(sp)
    9d9c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9da0:	2000020e 	bge	r4,zero,9dac <lseek+0x18>
    9da4:	043febc4 	movi	r16,-81
    9da8:	00000d06 	br	9de0 <lseek+0x4c>
    9dac:	20c00324 	muli	r3,r4,12
    9db0:	00800074 	movhi	r2,1
    9db4:	108fcc04 	addi	r2,r2,16176
    9db8:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    9dbc:	20001526 	beq	r4,zero,9e14 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9dc0:	20800017 	ldw	r2,0(r4)
    9dc4:	10800717 	ldw	r2,28(r2)
    9dc8:	1000021e 	bne	r2,zero,9dd4 <lseek+0x40>
    9dcc:	043fde84 	movi	r16,-134
    9dd0:	00000306 	br	9de0 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9dd4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    9dd8:	1000100e 	bge	r2,zero,9e1c <lseek+0x88>
    9ddc:	1021883a 	mov	r16,r2
    9de0:	00800074 	movhi	r2,1
    9de4:	10923a04 	addi	r2,r2,18664
    9de8:	10800017 	ldw	r2,0(r2)
    9dec:	1000031e 	bne	r2,zero,9dfc <lseek+0x68>
    9df0:	00c000b4 	movhi	r3,2
    9df4:	18fb2204 	addi	r3,r3,-4984
    9df8:	00000206 	br	9e04 <lseek+0x70>
    9dfc:	103ee83a 	callr	r2
    9e00:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    9e04:	0405c83a 	sub	r2,zero,r16
    9e08:	18800015 	stw	r2,0(r3)
    9e0c:	00bfffc4 	movi	r2,-1
    9e10:	00000206 	br	9e1c <lseek+0x88>
    9e14:	043febc4 	movi	r16,-81
    9e18:	003ff106 	br	9de0 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    9e1c:	dfc00117 	ldw	ra,4(sp)
    9e20:	dc000017 	ldw	r16,0(sp)
    9e24:	dec00204 	addi	sp,sp,8
    9e28:	f800283a 	ret

00009e2c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    9e2c:	f800283a 	ret

00009e30 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    9e30:	f800283a 	ret

00009e34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    9e34:	defffe04 	addi	sp,sp,-8
    9e38:	dfc00115 	stw	ra,4(sp)
    9e3c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9e40:	20002916 	blt	r4,zero,9ee8 <read+0xb4>
    9e44:	20c00324 	muli	r3,r4,12
    9e48:	00800074 	movhi	r2,1
    9e4c:	108fcc04 	addi	r2,r2,16176
    9e50:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9e54:	20002426 	beq	r4,zero,9ee8 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    9e58:	20800217 	ldw	r2,8(r4)
    9e5c:	108000cc 	andi	r2,r2,3
    9e60:	00c00044 	movi	r3,1
    9e64:	10c01326 	beq	r2,r3,9eb4 <read+0x80>
    9e68:	20800017 	ldw	r2,0(r4)
    9e6c:	10800517 	ldw	r2,20(r2)
    9e70:	10001026 	beq	r2,zero,9eb4 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    9e74:	103ee83a 	callr	r2
    9e78:	1021883a 	mov	r16,r2
    9e7c:	1000260e 	bge	r2,zero,9f18 <read+0xe4>
    9e80:	00800074 	movhi	r2,1
    9e84:	10923a04 	addi	r2,r2,18664
    9e88:	10800017 	ldw	r2,0(r2)
    9e8c:	1000031e 	bne	r2,zero,9e9c <read+0x68>
    9e90:	00c000b4 	movhi	r3,2
    9e94:	18fb2204 	addi	r3,r3,-4984
    9e98:	00000206 	br	9ea4 <read+0x70>
    9e9c:	103ee83a 	callr	r2
    9ea0:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    9ea4:	0405c83a 	sub	r2,zero,r16
    9ea8:	18800015 	stw	r2,0(r3)
    9eac:	043fffc4 	movi	r16,-1
    9eb0:	00001906 	br	9f18 <read+0xe4>
    9eb4:	00800074 	movhi	r2,1
    9eb8:	10923a04 	addi	r2,r2,18664
    9ebc:	10800017 	ldw	r2,0(r2)
    9ec0:	1000031e 	bne	r2,zero,9ed0 <read+0x9c>
    9ec4:	00c000b4 	movhi	r3,2
    9ec8:	18fb2204 	addi	r3,r3,-4984
    9ecc:	00000206 	br	9ed8 <read+0xa4>
    9ed0:	103ee83a 	callr	r2
    9ed4:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    9ed8:	00800344 	movi	r2,13
    9edc:	18800015 	stw	r2,0(r3)
    9ee0:	043fffc4 	movi	r16,-1
    9ee4:	00000c06 	br	9f18 <read+0xe4>
    9ee8:	00800074 	movhi	r2,1
    9eec:	10923a04 	addi	r2,r2,18664
    9ef0:	10800017 	ldw	r2,0(r2)
    9ef4:	1000031e 	bne	r2,zero,9f04 <read+0xd0>
    9ef8:	00c000b4 	movhi	r3,2
    9efc:	18fb2204 	addi	r3,r3,-4984
    9f00:	00000206 	br	9f0c <read+0xd8>
    9f04:	103ee83a 	callr	r2
    9f08:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    9f0c:	00801444 	movi	r2,81
    9f10:	18800015 	stw	r2,0(r3)
    9f14:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    9f18:	8005883a 	mov	r2,r16
    9f1c:	dfc00117 	ldw	ra,4(sp)
    9f20:	dc000017 	ldw	r16,0(sp)
    9f24:	dec00204 	addi	sp,sp,8
    9f28:	f800283a 	ret

00009f2c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f2c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f30:	00bfff84 	movi	r2,-2
    9f34:	2884703a 	and	r2,r5,r2
    9f38:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    9f3c:	d0a01417 	ldw	r2,-32688(gp)
    9f40:	108000c4 	addi	r2,r2,3
    9f44:	00ffff04 	movi	r3,-4
    9f48:	10c6703a 	and	r3,r2,r3
    9f4c:	d0e01415 	stw	r3,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    9f50:	1909883a 	add	r4,r3,r4
    9f54:	00802034 	movhi	r2,128
    9f58:	10800004 	addi	r2,r2,0
    9f5c:	1100032e 	bgeu	r2,r4,9f6c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f60:	2801703a 	wrctl	status,r5
    9f64:	00ffffc4 	movi	r3,-1
    9f68:	00000206 	br	9f74 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    9f6c:	d1201415 	stw	r4,-32688(gp)
    9f70:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    9f74:	1805883a 	mov	r2,r3
    9f78:	f800283a 	ret

00009f7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9f7c:	defffe04 	addi	sp,sp,-8
    9f80:	dfc00115 	stw	ra,4(sp)
    9f84:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f88:	20002816 	blt	r4,zero,a02c <write+0xb0>
    9f8c:	20c00324 	muli	r3,r4,12
    9f90:	00800074 	movhi	r2,1
    9f94:	108fcc04 	addi	r2,r2,16176
    9f98:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9f9c:	20002326 	beq	r4,zero,a02c <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9fa0:	20800217 	ldw	r2,8(r4)
    9fa4:	108000cc 	andi	r2,r2,3
    9fa8:	10001326 	beq	r2,zero,9ff8 <write+0x7c>
    9fac:	20800017 	ldw	r2,0(r4)
    9fb0:	10800617 	ldw	r2,24(r2)
    9fb4:	10001026 	beq	r2,zero,9ff8 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9fb8:	103ee83a 	callr	r2
    9fbc:	1021883a 	mov	r16,r2
    9fc0:	1000260e 	bge	r2,zero,a05c <write+0xe0>
    9fc4:	00800074 	movhi	r2,1
    9fc8:	10923a04 	addi	r2,r2,18664
    9fcc:	10800017 	ldw	r2,0(r2)
    9fd0:	1000031e 	bne	r2,zero,9fe0 <write+0x64>
    9fd4:	00c000b4 	movhi	r3,2
    9fd8:	18fb2204 	addi	r3,r3,-4984
    9fdc:	00000206 	br	9fe8 <write+0x6c>
    9fe0:	103ee83a 	callr	r2
    9fe4:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    9fe8:	0405c83a 	sub	r2,zero,r16
    9fec:	18800015 	stw	r2,0(r3)
    9ff0:	043fffc4 	movi	r16,-1
    9ff4:	00001906 	br	a05c <write+0xe0>
    9ff8:	00800074 	movhi	r2,1
    9ffc:	10923a04 	addi	r2,r2,18664
    a000:	10800017 	ldw	r2,0(r2)
    a004:	1000031e 	bne	r2,zero,a014 <write+0x98>
    a008:	00c000b4 	movhi	r3,2
    a00c:	18fb2204 	addi	r3,r3,-4984
    a010:	00000206 	br	a01c <write+0xa0>
    a014:	103ee83a 	callr	r2
    a018:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    a01c:	00800344 	movi	r2,13
    a020:	18800015 	stw	r2,0(r3)
    a024:	043fffc4 	movi	r16,-1
    a028:	00000c06 	br	a05c <write+0xe0>
    a02c:	00800074 	movhi	r2,1
    a030:	10923a04 	addi	r2,r2,18664
    a034:	10800017 	ldw	r2,0(r2)
    a038:	1000031e 	bne	r2,zero,a048 <write+0xcc>
    a03c:	00c000b4 	movhi	r3,2
    a040:	18fb2204 	addi	r3,r3,-4984
    a044:	00000206 	br	a050 <write+0xd4>
    a048:	103ee83a 	callr	r2
    a04c:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a050:	00801444 	movi	r2,81
    a054:	18800015 	stw	r2,0(r3)
    a058:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    a05c:	8005883a 	mov	r2,r16
    a060:	dfc00117 	ldw	ra,4(sp)
    a064:	dc000017 	ldw	r16,0(sp)
    a068:	dec00204 	addi	sp,sp,8
    a06c:	f800283a 	ret
    a070:	00008110 	cmplti	zero,zero,516
