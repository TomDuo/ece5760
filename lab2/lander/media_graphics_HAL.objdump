
C:/ece5760/lab2/lander/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab2/lander/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00009f68 memsz 0x00009f68 flags r-x
    LOAD off    0x0000af88 vaddr 0x00009f88 paddr 0x00013ed0 align 2**12
         filesz 0x00009f48 memsz 0x00009f48 flags rw-
    LOAD off    0x00015e18 vaddr 0x0001de18 paddr 0x0001de18 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000098d0  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  00009a38  00009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009f48  00009f88  00013ed0  0000af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0001de18  0001de18  00015e18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014ed0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  00014ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001963  00000000  00000000  00015c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001ddb6  00000000  00000000  000175f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000846d  00000000  00000000  000353a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012019  00000000  00000000  0003d816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001904  00000000  00000000  0004f830  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000032a1  00000000  00000000  00051134  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000083a6  00000000  00000000  000543d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005c77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004f0  00000000  00000000  0005c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006029e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000602a1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000602a4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000602a5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000602a9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000602ad  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000602b1  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000602ba  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000602c3  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000602cc  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f17  00000000  00000000  000602d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00009a38 l    d  .rodata	00000000 .rodata
00009f88 l    d  .rwdata	00000000 .rwdata
0001de18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00009be4 l     O .rodata	00000108 two_over_pi
00009b64 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00009cec l     O .rodata	00000010 init_jk
00009cfc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
000033b8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004094 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001219c l     O .rwdata	00001060 JTAG_UART
000131fc l     O .rwdata	00000030 AV_Config
0001322c l     O .rwdata	00000030 Audio
0001325c l     O .rwdata	0000002c Char_LCD_16x2
00013288 l     O .rwdata	0000002c Expansion_JP1
000132b4 l     O .rwdata	0000002c Expansion_JP2
000132e0 l     O .rwdata	0000002c Green_LEDs
0001330c l     O .rwdata	0000002c HEX3_HEX0
00013338 l     O .rwdata	0000002c HEX7_HEX4
00013364 l     O .rwdata	0000002c Pushbuttons
00013390 l     O .rwdata	0000002c Red_LEDs
000133bc l     O .rwdata	0000002c Slider_Switches
000133e8 l     O .rwdata	00000038 PS2_Port
00013420 l     O .rwdata	0000002c Serial_Port
0001344c l     O .rwdata	00000048 VGA_Char_Buffer
00013494 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00005254 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00005320 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000057f0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00006dd0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006ed8 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00013690 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00007b6c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007f50 l     F .text	00000058 std
0000805c l     F .text	00000008 __fp_lock
00008064 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013ecc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000094e0 g     F .text	00000070 _isatty_r
00004c64 g     F .text	00000050 alt_main
00006454 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
0001de68 g     O .bss	00000100 alt_irq
00005e8c g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00002b78 g     F .text	00000018 fabs
00009550 g     F .text	00000078 _lseek_r
00013ed0 g       *ABS*	00000000 __flash_rwdata_start
000058f0 g     F .text	00000010 alt_up_character_lcd_send_cmd
00003c80 g     F .text	00000088 __eqdf2
0001df68 g       *ABS*	00000000 __alt_heap_start
0000026c g     F .text	000000dc draw_landscape
0000911c g     F .text	00000068 __sseek
00007fb8 g     F .text	000000a4 __sinit
000078e4 g     F .text	00000130 __swbuf_r
00006094 g     F .text	00000088 alt_up_char_buffer_string
00005b4c g     F .text	0000000c read_CE_bit
000080b8 g     F .text	00000068 __sfmoreglue
000097f4 g     F .text	00000004 __malloc_unlock
00005c1c g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00005f38 g     F .text	00000080 alt_up_rs232_read_fd
0000611c g     F .text	00000058 alt_up_char_buffer_draw
000080a8 g     F .text	00000010 _cleanup
00003210 g     F .text	00000094 __fixsfsi
00006b48 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00003d08 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000582c g     F .text	0000001c get_DDRAM_addr
00006c3c g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000946c g     F .text	00000074 _fstat_r
0001de30 g     O .bss	00000004 errno
00003fe8 g     F .text	00000038 __make_dp
00002b90 g     F .text	00000224 floor
000045c8 g     F .text	0000002c __make_fp
0001de1c g     O .bss	00000004 alt_argv
0001be98 g       *ABS*	00000000 _gp
00006c14 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00013510 g     O .rwdata	00000180 alt_fd_list
00000c90 g     F .text	00000828 __ieee754_rem_pio2
00006e48 g     F .text	00000070 alt_find_dev
00007528 g     F .text	000000a0 memcpy
000058c0 g     F .text	00000020 alt_up_character_lcd_write_fd
00006174 g     F .text	00000028 alt_up_char_buffer_clear
0000809c g     F .text	0000000c _cleanup_r
00003e18 g     F .text	000000f8 __floatsidf
00006f3c g     F .text	00000098 alt_io_redirect
00005eec g     F .text	0000004c alt_up_rs232_read_data
00007310 g     F .text	00000008 altera_nios2_irq_init
00006c04 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
000054c8 g     F .text	00000168 altera_avalon_jtag_uart_read
000041d0 g     F .text	00000008 __udivsi3
000096d4 g     F .text	00000084 isatty
000065e8 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
000014b8 g     F .text	0000052c __kernel_cos
00003198 g     F .text	00000078 __lesf2
00007440 g     F .text	0000003c alt_icache_flush
0001de34 g     O .bss	00000004 __malloc_top_pad
000090a4 g     F .text	00000070 _sbrk_r
0000620c g     F .text	0000005c helper_plot_pixel
000095c8 g     F .text	00000078 _read_r
00013ea8 g     O .rwdata	00000004 alt_max_fd
00005ec0 g     F .text	0000000c alt_up_rs232_check_parity
00004908 g     F .text	00000138 __unpack_d
00009348 g     F .text	00000110 _fclose_r
00005b58 g     F .text	00000008 read_num_bytes_available
00007f1c g     F .text	00000034 fflush
0001de38 g     O .bss	00000004 __malloc_max_sbrked_mem
00006fd4 g     F .text	000000bc alt_irq_register
00005b38 g     F .text	0000000c read_RI_bit
00002860 g     F .text	00000318 __kernel_sin
000032a4 g     F .text	00000054 __extendsfdf2
00003848 g     F .text	00000074 __adddf3
00006a70 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00009758 g     F .text	00000098 lseek
000001a4 g     F .text	00000008 groundCollision
00013ec0 g     O .rwdata	00000004 _global_impure_ptr
0001df68 g       *ABS*	00000000 __bss_end
0000682c g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00007264 g     F .text	000000ac alt_tick
000001ac g     F .text	000000c0 draw_sprite
00005b6c g     F .text	00000008 read_data_byte
00008084 g     F .text	00000018 __fp_lock_all
00007230 g     F .text	00000034 alt_alarm_stop
00005b44 g     F .text	00000008 read_RE_bit
0001de24 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
000134e8 g     O .rwdata	00000028 alt_dev_null
000019e4 g     F .text	00000e7c __kernel_rem_pio2
00004458 g     F .text	000000c8 __unpack_f
00005900 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00005d20 g     F .text	00000040 alt_up_ps2_write_data_byte
00006dcc g     F .text	00000004 alt_dcache_flush_all
0000675c g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00003f10 g     F .text	000000d8 __fixdfsi
00013ed0 g       *ABS*	00000000 __ram_rwdata_end
00013ea0 g     O .rwdata	00000008 alt_dev_list
00009940 g     F .text	000000f4 write
000076cc g     F .text	000000e8 _putc_r
00003030 g     F .text	00000078 __gtsf2
00006268 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
00009f88 g       *ABS*	00000000 __ram_rodata_end
00009654 g     F .text	00000080 fstat
00005fe0 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000041d8 g     F .text	00000008 __umodsi3
0001df68 g       *ABS*	00000000 end
00005d60 g     F .text	00000070 alt_up_ps2_write_fd
000042f8 g     F .text	00000160 __pack_f
000061bc g     F .text	00000050 alt_up_char_buffer_init
000052a8 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000057ac g     F .text	00000044 alt_avalon_timer_sc_init
00004278 g     F .text	00000080 __clzsi2
00005630 g     F .text	0000017c altera_avalon_jtag_uart_write
000009bc g     F .text	00000168 cos
00007fa8 g     F .text	00000004 __sfp_lock_acquire
00005894 g     F .text	0000002c alt_up_character_lcd_write
0000833c g     F .text	00000314 _free_r
00004cb4 g     F .text	000001dc alt_printf
00007b70 g     F .text	000001b0 __call_exitprocs
00013ec8 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
0001de28 g     O .bss	00000004 _alt_tick_rate
00000b24 g     F .text	0000016c sin
00009f88 g     O .rwdata	00008214 landers
0001de2c g     O .bss	00000004 _alt_nticks
000097f8 g     F .text	000000f8 read
00004ed8 g     F .text	000002ac alt_sys_init
000059a4 g     F .text	00000090 alt_up_character_lcd_shift_display
00005b94 g     F .text	00000030 alt_up_ps2_clear_fifo
00005fb8 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00005938 g     F .text	0000006c alt_up_character_lcd_erase_pos
0000521c g     F .text	00000038 altera_avalon_jtag_uart_close
00009f88 g       *ABS*	00000000 __ram_rwdata_start
00009a38 g       *ABS*	00000000 __ram_rodata_start
0001de40 g     O .bss	00000028 __malloc_current_mallinfo
00002fb8 g     F .text	00000078 __eqsf2
000051f4 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
000073d4 g     F .text	0000006c alt_get_fd
00004a40 g     F .text	000000c8 __fpcmp_parts_d
000092d8 g     F .text	00000070 _close_r
000074b4 g     F .text	00000074 memcmp
000051a4 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0001df68 g       *ABS*	00000000 __alt_stack_base
00005184 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00007a30 g     F .text	0000013c __swsetup_r
00008120 g     F .text	000000f0 __sfp
00013a90 g     O .rwdata	00000408 __malloc_av_
00007fb4 g     F .text	00000004 __sinit_lock_release
000038bc g     F .text	000003c4 __muldf3
00009200 g     F .text	00000060 __sread
00006050 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00007318 g     F .text	000000bc alt_find_file
00006dd8 g     F .text	00000070 alt_dev_llist_insert
000097f0 g     F .text	00000004 __malloc_lock
000098f0 g     F .text	00000050 sbrk
00007d20 g     F .text	000001fc _fflush_r
0001de18 g       *ABS*	00000000 __bss_start
00004b08 g     F .text	00000098 memset
00000348 g     F .text	00000674 main
0001de20 g     O .bss	00000004 alt_envp
0001de3c g     O .bss	00000004 __malloc_max_total_mem
00006b24 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0000619c g     F .text	00000020 alt_up_char_buffer_open_dev
000051cc g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00007a14 g     F .text	0000001c __swbuf
00003120 g     F .text	00000078 __ltsf2
00005a34 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00009114 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009458 g     F .text	00000014 fclose
00005bc4 g     F .text	00000058 alt_up_ps2_read_data_byte
00004020 g     F .text	00000074 __truncdfsf2
00008964 g     F .text	00000740 _malloc_r
00013eac g     O .rwdata	00000004 alt_errno
00008718 g     F .text	000000b8 _fwalk
00005b74 g     F .text	00000020 alt_up_ps2_open_dev
000075c8 g     F .text	00000104 putc
00004110 g     F .text	00000060 __divsi3
00009d3c g     O .rodata	00000014 __thenan_df
00005b18 g     F .text	00000020 alt_up_character_lcd_open_dev
00008210 g     F .text	0000012c _malloc_trim_r
00005ea8 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
000058e0 g     F .text	00000010 alt_up_character_lcd_init
000077b4 g     F .text	000000bc strcmp
00009a38 g       *ABS*	00000000 __flash_rodata_start
00005ecc g     F .text	00000020 alt_up_rs232_open_dev
00002f94 g     F .text	00000024 copysign
00004eb8 g     F .text	00000020 alt_irq_init
0000720c g     F .text	00000024 alt_release_fd
00005b60 g     F .text	0000000c read_data_valid
0000591c g     F .text	0000001c alt_up_character_lcd_cursor_off
00009d50 g     O .rodata	00000100 __clz_tab
00005dd0 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
000030a8 g     F .text	00000078 __gesf2
00009260 g     F .text	00000078 _write_r
00013ebc g     O .rwdata	00000004 _impure_ptr
0001de18 g     O .bss	00000004 alt_argc
00002db4 g     F .text	000001e0 scalbn
00000020 g       .exceptions	00000000 alt_irq_entry
0000806c g     F .text	00000018 __fp_unlock_all
00013e98 g     O .rwdata	00000008 alt_fs_list
0000606c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00005fc8 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013ed0 g       *ABS*	00000000 _edata
0001df68 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00005454 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00009184 g     F .text	0000007c __swrite
00013ec4 g     O .rwdata	00000004 __malloc_trim_threshold
0000747c g     F .text	00000038 exit
00008650 g     F .text	000000c8 _fwalk_reent
000032f8 g     F .text	000000c0 __floatunsisf
00005e04 g     F .text	00000088 alt_up_ps2_init
00004170 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007fac g     F .text	00000004 __sfp_lock_release
00005848 g     F .text	0000004c alt_up_character_lcd_string
00004520 g     F .text	000000a8 __fpcmp_parts_f
00009640 g     F .text	00000014 _exit
00006c5c g     F .text	00000094 alt_alarm_start
000041e0 g     F .text	00000098 __muldi3
000087d0 g     F .text	00000194 __smakebuf_r
00005cc4 g     F .text	0000005c alt_up_ps2_wait_for_ack
00007870 g     F .text	00000074 strlen
00007090 g     F .text	0000017c open
00003d90 g     F .text	00000088 __gedf2
00004e90 g     F .text	00000028 alt_putchar
00006eb8 g     F .text	00000020 alt_icache_flush_all
00005ac4 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00013eb0 g     O .rwdata	00000004 alt_priority_mask
00005c9c g     F .text	00000028 alt_up_ps2_read_fd
000037c8 g     F .text	00000080 __subdf3
00013eb4 g     O .rwdata	00000008 alt_alarm_list
00006084 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00006cf0 g     F .text	000000dc close
00004ba0 g     F .text	000000c4 alt_load
000045f4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00007fb0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	040000b4 	movhi	r16,2
 100:	84379a04 	addi	r16,r16,-8600
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6afa614 	ori	gp,gp,48792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	10b78614 	ori	r2,r2,56856

    movhi r3, %hi(__bss_end)
     180:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     184:	18f7da14 	ori	r3,r3,57192

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	0004ba00 	call	4ba0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	0004c640 	call	4c64 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <groundCollision>:

int groundCollision(unsigned int x, unsigned int y) {
	if (1) {
		return 0;
	}
}
     1a4:	0005883a 	mov	r2,zero
     1a8:	f800283a 	ret

000001ac <draw_sprite>:


void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting) {
     1ac:	defff804 	addi	sp,sp,-32
     1b0:	dfc00715 	stw	ra,28(sp)
     1b4:	dd800615 	stw	r22,24(sp)
     1b8:	dd400515 	stw	r21,20(sp)
     1bc:	dd000415 	stw	r20,16(sp)
     1c0:	dcc00315 	stw	r19,12(sp)
     1c4:	dc800215 	stw	r18,8(sp)
     1c8:	dc400115 	stw	r17,4(sp)
     1cc:	dc000015 	stw	r16,0(sp)
     1d0:	202b883a 	mov	r21,r4
     1d4:	2829883a 	mov	r20,r5
     1d8:	3027883a 	mov	r19,r6
     1dc:	382d883a 	mov	r22,r7
     1e0:	0025883a 	mov	r18,zero
     1e4:	00000f06 	br	224 <draw_sprite+0x78>
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
		for(j = 0; j < 30; j++) {
			if (landers[theta][i][j]) {
     1e8:	88800007 	ldb	r2,0(r17)
     1ec:	10000626 	beq	r2,zero,208 <draw_sprite+0x5c>
			//alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y);
				//alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev, x, x, y, 0xffff, 0);
				alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, (int)((landers[theta][i][j] << 8) + landers[theta][i][j]), x+j, y+i );
     1f0:	100a923a 	slli	r5,r2,8
     1f4:	a809883a 	mov	r4,r21
     1f8:	114b883a 	add	r5,r2,r5
     1fc:	850d883a 	add	r6,r16,r20
     200:	9c8f883a 	add	r7,r19,r18
     204:	0006b480 	call	6b48 <alt_up_pixel_buffer_dma_draw>

void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting) {
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
		for(j = 0; j < 30; j++) {
     208:	00c00044 	movi	r3,1
     20c:	80e1883a 	add	r16,r16,r3
     210:	88e3883a 	add	r17,r17,r3
     214:	00800784 	movi	r2,30
     218:	80bff31e 	bne	r16,r2,1e8 <draw_sprite+0x3c>


void draw_sprite(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev , unsigned int x, unsigned int y, unsigned int theta, int thrusting) {
	int i = 0;
	int j = 0;
	for(i = 0; i < 30; i++) {
     21c:	90e5883a 	add	r18,r18,r3
     220:	94000826 	beq	r18,r16,244 <draw_sprite+0x98>
				//alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev, x, x, y, 0xffff, 0);
				alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, (int)((landers[theta][i][j] << 8) + landers[theta][i][j]), x+j, y+i );
			}
		}
	}
}
     224:	908007a4 	muli	r2,r18,30
     228:	b0c0e124 	muli	r3,r22,900
     22c:	10c5883a 	add	r2,r2,r3
     230:	00c00074 	movhi	r3,1
     234:	18e7e204 	addi	r3,r3,-24696
     238:	10e3883a 	add	r17,r2,r3
     23c:	0021883a 	mov	r16,zero
     240:	003fe906 	br	1e8 <draw_sprite+0x3c>
     244:	dfc00717 	ldw	ra,28(sp)
     248:	dd800617 	ldw	r22,24(sp)
     24c:	dd400517 	ldw	r21,20(sp)
     250:	dd000417 	ldw	r20,16(sp)
     254:	dcc00317 	ldw	r19,12(sp)
     258:	dc800217 	ldw	r18,8(sp)
     25c:	dc400117 	ldw	r17,4(sp)
     260:	dc000017 	ldw	r16,0(sp)
     264:	dec00804 	addi	sp,sp,32
     268:	f800283a 	ret

0000026c <draw_landscape>:
		}
	}
}

/* draws a landscape */
void draw_landscape(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev ){
     26c:	defff604 	addi	sp,sp,-40
     270:	dfc00915 	stw	ra,36(sp)
     274:	dd400815 	stw	r21,32(sp)
     278:	dd000715 	stw	r20,28(sp)
     27c:	dcc00615 	stw	r19,24(sp)
     280:	dc800515 	stw	r18,20(sp)
     284:	dc400415 	stw	r17,16(sp)
     288:	dc000315 	stw	r16,12(sp)
     28c:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 4, 430, 150, 430, 0xffff, 0);
     290:	04006b84 	movi	r16,430
     294:	04c02584 	movi	r19,150
     298:	dc000015 	stw	r16,0(sp)
     29c:	047fffd4 	movui	r17,65535
     2a0:	dc400115 	stw	r17,4(sp)
     2a4:	d8000215 	stw	zero,8(sp)
     2a8:	01400104 	movi	r5,4
     2ac:	800d883a 	mov	r6,r16
     2b0:	980f883a 	mov	r7,r19
     2b4:	00062680 	call	6268 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 150, 430, 300, 400, 0xffff, 0);
     2b8:	05004b04 	movi	r20,300
     2bc:	05406404 	movi	r21,400
     2c0:	dd400015 	stw	r21,0(sp)
     2c4:	dc400115 	stw	r17,4(sp)
     2c8:	d8000215 	stw	zero,8(sp)
     2cc:	9009883a 	mov	r4,r18
     2d0:	980b883a 	mov	r5,r19
     2d4:	800d883a 	mov	r6,r16
     2d8:	a00f883a 	mov	r7,r20
     2dc:	00062680 	call	6268 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 300, 400, 480, 430, 0xffff, 0);
     2e0:	04c07804 	movi	r19,480
     2e4:	dc000015 	stw	r16,0(sp)
     2e8:	dc400115 	stw	r17,4(sp)
     2ec:	d8000215 	stw	zero,8(sp)
     2f0:	9009883a 	mov	r4,r18
     2f4:	a00b883a 	mov	r5,r20
     2f8:	a80d883a 	mov	r6,r21
     2fc:	980f883a 	mov	r7,r19
     300:	00062680 	call	6268 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 480, 430, 636, 430, 0xffff, 0);
     304:	dc000015 	stw	r16,0(sp)
     308:	dc400115 	stw	r17,4(sp)
     30c:	d8000215 	stw	zero,8(sp)
     310:	9009883a 	mov	r4,r18
     314:	980b883a 	mov	r5,r19
     318:	800d883a 	mov	r6,r16
     31c:	01c09f04 	movi	r7,636
     320:	00062680 	call	6268 <alt_up_pixel_buffer_dma_draw_line>

}
     324:	dfc00917 	ldw	ra,36(sp)
     328:	dd400817 	ldw	r21,32(sp)
     32c:	dd000717 	ldw	r20,28(sp)
     330:	dcc00617 	ldw	r19,24(sp)
     334:	dc800517 	ldw	r18,20(sp)
     338:	dc400417 	ldw	r17,16(sp)
     33c:	dc000317 	ldw	r16,12(sp)
     340:	dec00a04 	addi	sp,sp,40
     344:	f800283a 	ret

00000348 <main>:
 * the DE2 Media computer. It:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void){
     348:	deffd804 	addi	sp,sp,-160
     34c:	dfc02715 	stw	ra,156(sp)
     350:	df002615 	stw	fp,152(sp)
     354:	ddc02515 	stw	r23,148(sp)
     358:	dd802415 	stw	r22,144(sp)
     35c:	dd402315 	stw	r21,140(sp)
     360:	dd002215 	stw	r20,136(sp)
     364:	dcc02115 	stw	r19,132(sp)
     368:	dc802015 	stw	r18,128(sp)
     36c:	dc401f15 	stw	r17,124(sp)
     370:	dc001e15 	stw	r16,120(sp)
	/* create a message to be displayed on the VGA display */
	//char text_top_row[40] = "ECE5760\0";
	//char text_bottom_row[40] = "Bruce is cool.\0";

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     374:	01000074 	movhi	r4,1
     378:	21268e04 	addi	r4,r4,-26056
     37c:	0006c3c0 	call	6c3c <alt_up_pixel_buffer_dma_open_dev>
     380:	102d883a 	mov	r22,r2
	if ( pixel_buffer_dev == NULL)
     384:	1000041e 	bne	r2,zero,398 <main+0x50>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     388:	01000074 	movhi	r4,1
     38c:	21269404 	addi	r4,r4,-26032
     390:	0004cb40 	call	4cb4 <alt_printf>
     394:	00000306 	br	3a4 <main+0x5c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     398:	01000074 	movhi	r4,1
     39c:	2126a004 	addi	r4,r4,-25984
     3a0:	0004cb40 	call	4cb4 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     3a4:	b009883a 	mov	r4,r22
     3a8:	000b883a 	mov	r5,zero
     3ac:	0006a700 	call	6a70 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     3b0:	01000074 	movhi	r4,1
     3b4:	2126ab04 	addi	r4,r4,-25940
     3b8:	000619c0 	call	619c <alt_up_char_buffer_open_dev>
     3bc:	d8801d15 	stw	r2,116(sp)
	if (char_buffer_dev == NULL)
     3c0:	10016e26 	beq	r2,zero,97c <main+0x634>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     3c4:	01000074 	movhi	r4,1
     3c8:	2126bd04 	addi	r4,r4,-25868
     3cc:	0004cb40 	call	4cb4 <alt_printf>

	/* now draw a background box for the text */
	

	/* now draw the landscape */
	draw_landscape (pixel_buffer_dev);
     3d0:	b009883a 	mov	r4,r22
     3d4:	000026c0 	call	26c <draw_landscape>
	/* now draw a red rectangle with diagonal green lines */
	x1 = initx;
	y1 = inity;
	x2 = initx + 30;
	y2 = inity + 30;
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0xff, 0);
     3d8:	00800a04 	movi	r2,40
     3dc:	d8800015 	stw	r2,0(sp)
     3e0:	00803fc4 	movi	r2,255
     3e4:	d8800115 	stw	r2,4(sp)
     3e8:	d8000215 	stw	zero,8(sp)
     3ec:	b009883a 	mov	r4,r22
     3f0:	01405004 	movi	r5,320
     3f4:	01800284 	movi	r6,10
     3f8:	01c05784 	movi	r7,350
     3fc:	000682c0 	call	682c <alt_up_pixel_buffer_dma_draw_box>
     400:	0090e834 	movhi	r2,17312
     404:	d8801c15 	stw	r2,112(sp)
     408:	07104834 	movhi	fp,16672
     40c:	04d0ebf4 	movhi	r19,17327
     410:	05108834 	movhi	r20,16928
     414:	0007883a 	mov	r3,zero
     418:	d8c01b15 	stw	r3,108(sp)
     41c:	002f883a 	mov	r23,zero
     420:	0005883a 	mov	r2,zero
     424:	d8801a15 	stw	r2,104(sp)
     428:	00d06434 	movhi	r3,16784
     42c:	d8c01915 	stw	r3,100(sp)
     430:	002b883a 	mov	r21,zero
     434:	00800044 	movi	r2,1
     438:	d8801815 	stw	r2,96(sp)
     43c:	d8001715 	stw	zero,92(sp)
	while(1)
	{
	
	int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
	int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
	*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
     440:	00840034 	movhi	r2,4096
     444:	10801404 	addi	r2,r2,80
     448:	10c00017 	ldw	r3,0(r2)
     44c:	10bff004 	addi	r2,r2,-64
     450:	10c00015 	stw	r3,0(r2)

	
	
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     454:	b009883a 	mov	r4,r22
     458:	0006c040 	call	6c04 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     45c:	103ff81e 	bne	r2,zero,440 <main+0xf8>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     460:	008fe034 	movhi	r2,16256
     464:	d8c01a17 	ldw	r3,104(sp)
     468:	10c7ffb2 	custom	254,r3,r2,r3
     46c:	d8c01a15 	stw	r3,104(sp)

			if (delay == 0)
     470:	1809883a 	mov	r4,r3
     474:	000b883a 	mov	r5,zero
     478:	0002fb80 	call	2fb8 <__eqsf2>
     47c:	10011b1e 	bne	r2,zero,8ec <main+0x5a4>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int)x1, (int)y1, (int)x2, (int)y2, 0, 0);
     480:	d9001c17 	ldw	r4,112(sp)
     484:	00032100 	call	3210 <__fixsfsi>
     488:	1025883a 	mov	r18,r2
     48c:	e009883a 	mov	r4,fp
     490:	00032100 	call	3210 <__fixsfsi>
     494:	1023883a 	mov	r17,r2
     498:	9809883a 	mov	r4,r19
     49c:	00032100 	call	3210 <__fixsfsi>
     4a0:	1021883a 	mov	r16,r2
     4a4:	a009883a 	mov	r4,r20
     4a8:	00032100 	call	3210 <__fixsfsi>
     4ac:	d8800015 	stw	r2,0(sp)
     4b0:	d8000115 	stw	zero,4(sp)
     4b4:	d8000215 	stw	zero,8(sp)
     4b8:	b009883a 	mov	r4,r22
     4bc:	900b883a 	mov	r5,r18
     4c0:	880d883a 	mov	r6,r17
     4c4:	800f883a 	mov	r7,r16
     4c8:	000682c0 	call	682c <alt_up_pixel_buffer_dma_draw_box>
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);

				//Right Thruster
				if (stillAlive) {
     4cc:	d8c01817 	ldw	r3,96(sp)
     4d0:	1805003a 	cmpeq	r2,r3,zero
     4d4:	1001081e 	bne	r2,zero,8f8 <main+0x5b0>
					if ((*pushbuttons) & 0x02)
     4d8:	00c40034 	movhi	r3,4096
     4dc:	18c01404 	addi	r3,r3,80
     4e0:	18800017 	ldw	r2,0(r3)
     4e4:	1080008c 	andi	r2,r2,2
     4e8:	10000a26 	beq	r2,zero,514 <main+0x1cc>
					{
						//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
						//deltax = deltax + 1.0;
						if (theta < (37.0 - turning)) {
     4ec:	d9001917 	ldw	r4,100(sp)
     4f0:	015084f4 	movhi	r5,16915
     4f4:	29733344 	addi	r5,r5,-13107
     4f8:	00031200 	call	3120 <__ltsf2>
     4fc:	1000050e 	bge	r2,zero,514 <main+0x1cc>
							theta = theta + turning;
     500:	008fa6b4 	movhi	r2,16026
     504:	10a66684 	addi	r2,r2,-26214
     508:	d8c01917 	ldw	r3,100(sp)
     50c:	1887ff72 	custom	253,r3,r3,r2
     510:	d8c01915 	stw	r3,100(sp)
						}
					}
					//Left Thruster
					if ((*pushbuttons) & 0x08)
     514:	00c40034 	movhi	r3,4096
     518:	18c01404 	addi	r3,r3,80
     51c:	18800017 	ldw	r2,0(r3)
     520:	1080020c 	andi	r2,r2,8
     524:	10000926 	beq	r2,zero,54c <main+0x204>
					{
						//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
						//deltax = deltax - 1.0;
						if (theta > (0.0 + turning)) {
     528:	040fa6b4 	movhi	r16,16026
     52c:	84266684 	addi	r16,r16,-26214
     530:	d9001917 	ldw	r4,100(sp)
     534:	800b883a 	mov	r5,r16
     538:	00030300 	call	3030 <__gtsf2>
     53c:	0080030e 	bge	zero,r2,54c <main+0x204>
							theta = theta - turning;
     540:	d8801917 	ldw	r2,100(sp)
     544:	1405ffb2 	custom	254,r2,r2,r16
     548:	d8801915 	stw	r2,100(sp)
						}
					}
					
					//Main Thruster
					if ((*pushbuttons) & 0x04)
     54c:	00c40034 	movhi	r3,4096
     550:	18c01404 	addi	r3,r3,80
     554:	18800017 	ldw	r2,0(r3)
     558:	1080010c 	andi	r2,r2,4
     55c:	1000021e 	bne	r2,zero,568 <main+0x220>
     560:	002b883a 	mov	r21,zero
     564:	00003606 	br	640 <main+0x2f8>
					{
						//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
						deltay = (deltay - thrust*cos((theta*5.0)-90.0));
     568:	01102834 	movhi	r4,16544
     56c:	d8801917 	ldw	r2,100(sp)
     570:	1109ff32 	custom	252,r4,r2,r4
     574:	0090ad34 	movhi	r2,17076
     578:	2089ffb2 	custom	254,r4,r4,r2
     57c:	00032a40 	call	32a4 <__extendsfdf2>
     580:	1029883a 	mov	r20,r2
     584:	182b883a 	mov	r21,r3
     588:	b809883a 	mov	r4,r23
     58c:	00032a40 	call	32a4 <__extendsfdf2>
     590:	1025883a 	mov	r18,r2
     594:	1827883a 	mov	r19,r3
     598:	a009883a 	mov	r4,r20
     59c:	a80b883a 	mov	r5,r21
     5a0:	00009bc0 	call	9bc <cos>
     5a4:	04100034 	movhi	r16,16384
     5a8:	044fed34 	movhi	r17,16308
     5ac:	8c5eb844 	addi	r17,r17,31457
     5b0:	1009883a 	mov	r4,r2
     5b4:	180b883a 	mov	r5,r3
     5b8:	800d883a 	mov	r6,r16
     5bc:	880f883a 	mov	r7,r17
     5c0:	00038bc0 	call	38bc <__muldf3>
     5c4:	9009883a 	mov	r4,r18
     5c8:	980b883a 	mov	r5,r19
     5cc:	100d883a 	mov	r6,r2
     5d0:	180f883a 	mov	r7,r3
     5d4:	00037c80 	call	37c8 <__subdf3>
     5d8:	1009883a 	mov	r4,r2
     5dc:	180b883a 	mov	r5,r3
     5e0:	00040200 	call	4020 <__truncdfsf2>
     5e4:	102f883a 	mov	r23,r2
						deltax = (deltax - thrust*sin((theta*5.0)-90.0));
     5e8:	d9001b17 	ldw	r4,108(sp)
     5ec:	00032a40 	call	32a4 <__extendsfdf2>
     5f0:	1025883a 	mov	r18,r2
     5f4:	1827883a 	mov	r19,r3
     5f8:	a009883a 	mov	r4,r20
     5fc:	a80b883a 	mov	r5,r21
     600:	0000b240 	call	b24 <sin>
     604:	800d883a 	mov	r6,r16
     608:	880f883a 	mov	r7,r17
     60c:	1009883a 	mov	r4,r2
     610:	180b883a 	mov	r5,r3
     614:	00038bc0 	call	38bc <__muldf3>
     618:	9009883a 	mov	r4,r18
     61c:	980b883a 	mov	r5,r19
     620:	100d883a 	mov	r6,r2
     624:	180f883a 	mov	r7,r3
     628:	00037c80 	call	37c8 <__subdf3>
     62c:	1009883a 	mov	r4,r2
     630:	180b883a 	mov	r5,r3
     634:	00040200 	call	4020 <__truncdfsf2>
     638:	d8801b15 	stw	r2,108(sp)
     63c:	05400044 	movi	r21,1
					deltax = 0.0;
					deltay = 0.0;
				}
				
				// move the rectangle
				x1 = x1 + deltax;
     640:	d8c01c17 	ldw	r3,112(sp)
     644:	d8801b17 	ldw	r2,108(sp)
     648:	1887ff72 	custom	253,r3,r3,r2
     64c:	d8c01c15 	stw	r3,112(sp)
				//x2 = x2 + deltax;
				y1 = y1 + deltay;
     650:	e5f9ff72 	custom	253,fp,fp,r23
				//y2 = y2 + deltay;
				
				
				if ((deltax > 0.0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31.0))
     654:	1009883a 	mov	r4,r2
     658:	000b883a 	mov	r5,zero
     65c:	00030300 	call	3030 <__gtsf2>
     660:	00800f0e 	bge	zero,r2,6a0 <main+0x358>
     664:	b1000f17 	ldw	r4,60(r22)
     668:	00032f80 	call	32f8 <__floatunsisf>
     66c:	00d07e34 	movhi	r3,16888
     670:	10e1ffb2 	custom	254,r16,r2,r3
     674:	d9001c17 	ldw	r4,112(sp)
     678:	800b883a 	mov	r5,r16
     67c:	00030a80 	call	30a8 <__gesf2>
     680:	10000716 	blt	r2,zero,6a0 <main+0x358>
     684:	dc001c15 	stw	r16,112(sp)
     688:	0007883a 	mov	r3,zero
     68c:	d8c01b15 	stw	r3,108(sp)
     690:	d8001815 	stw	zero,96(sp)
     694:	00800044 	movi	r2,1
     698:	d8801715 	stw	r2,92(sp)
     69c:	00000e06 	br	6d8 <main+0x390>
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31.0;
					deltax = 0.0;
					stillAlive = 0;
					deadWait = 1;
				}
				else if ((deltax < 0.0) && (x1 <= 0.0))
     6a0:	d9001b17 	ldw	r4,108(sp)
     6a4:	000b883a 	mov	r5,zero
     6a8:	00031200 	call	3120 <__ltsf2>
     6ac:	10000a0e 	bge	r2,zero,6d8 <main+0x390>
     6b0:	d9001c17 	ldw	r4,112(sp)
     6b4:	000b883a 	mov	r5,zero
     6b8:	00031980 	call	3198 <__lesf2>
     6bc:	00800616 	blt	zero,r2,6d8 <main+0x390>
     6c0:	0007883a 	mov	r3,zero
     6c4:	d8c01c15 	stw	r3,112(sp)
     6c8:	d8c01b15 	stw	r3,108(sp)
     6cc:	d8001815 	stw	zero,96(sp)
     6d0:	00800044 	movi	r2,1
     6d4:	d8801715 	stw	r2,92(sp)
					deltax = 0.0;
					stillAlive = 0;
					deadWait = 1;
				}

				if ((deltay > 0.0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 31.0))
     6d8:	b809883a 	mov	r4,r23
     6dc:	000b883a 	mov	r5,zero
     6e0:	00030300 	call	3030 <__gtsf2>
     6e4:	00800b0e 	bge	zero,r2,714 <main+0x3cc>
     6e8:	b1001017 	ldw	r4,64(r22)
     6ec:	00032f80 	call	32f8 <__floatunsisf>
     6f0:	00d07e34 	movhi	r3,16888
     6f4:	10e1ffb2 	custom	254,r16,r2,r3
     6f8:	e009883a 	mov	r4,fp
     6fc:	800b883a 	mov	r5,r16
     700:	00030a80 	call	30a8 <__gesf2>
     704:	10000316 	blt	r2,zero,714 <main+0x3cc>
     708:	00c00044 	movi	r3,1
     70c:	d8c01715 	stw	r3,92(sp)
     710:	00008406 	br	924 <main+0x5dc>
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 31.0;
					deltay = 0.0;
					stillAlive = 0;
					deadWait = 1;
				}
				else if ((deltay < 0.0) && (y1 <= 0.0))
     714:	b809883a 	mov	r4,r23
     718:	000b883a 	mov	r5,zero
     71c:	00031200 	call	3120 <__ltsf2>
     720:	1000040e 	bge	r2,zero,734 <main+0x3ec>
     724:	e009883a 	mov	r4,fp
     728:	000b883a 	mov	r5,zero
     72c:	00031980 	call	3198 <__lesf2>
     730:	0080790e 	bge	zero,r2,918 <main+0x5d0>
					deltay = -deltay;
					stillAlive = 0;
					deadWait = 1;
				}
				
				x2 = x1 + 30.0;
     734:	00907c34 	movhi	r2,16880
     738:	d8c01c17 	ldw	r3,112(sp)
     73c:	18a7ff72 	custom	253,r19,r3,r2
				y2 = y1 + 30.0;
     740:	e0a9ff72 	custom	253,r20,fp,r2
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0x60, 0);
				//draw_sprite(pixel_buffer_dev, x1, y1);
				
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
     744:	1809883a 	mov	r4,r3
     748:	00032100 	call	3210 <__fixsfsi>
     74c:	1025883a 	mov	r18,r2
     750:	e009883a 	mov	r4,fp
     754:	00032100 	call	3210 <__fixsfsi>
     758:	1023883a 	mov	r17,r2
     75c:	d9001917 	ldw	r4,100(sp)
     760:	00032100 	call	3210 <__fixsfsi>
     764:	dd400015 	stw	r21,0(sp)
     768:	b009883a 	mov	r4,r22
     76c:	900b883a 	mov	r5,r18
     770:	880d883a 	mov	r6,r17
     774:	100f883a 	mov	r7,r2
     778:	00001ac0 	call	1ac <draw_sprite>
				draw_landscape (pixel_buffer_dev);
     77c:	b009883a 	mov	r4,r22
     780:	000026c0 	call	26c <draw_landscape>
				
				deltay = deltay + g;
				
				if (!stillAlive) {
     784:	d8c01817 	ldw	r3,96(sp)
     788:	1805003a 	cmpeq	r2,r3,zero
     78c:	1000041e 	bne	r2,zero,7a0 <main+0x458>
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
				draw_landscape (pixel_buffer_dev);
				
				deltay = deltay + g;
     790:	008f2934 	movhi	r2,15524
     794:	10b5c284 	addi	r2,r2,-10486
     798:	b8afff72 	custom	253,r23,r23,r2
     79c:	00005306 	br	8ec <main+0x5a4>
				
				if (!stillAlive) {
					char you_died[40] = "You died!\0";
     7a0:	00c00074 	movhi	r3,1
     7a4:	18e6c504 	addi	r3,r3,-25836
     7a8:	18800017 	ldw	r2,0(r3)
     7ac:	d8800d15 	stw	r2,52(sp)
     7b0:	18800117 	ldw	r2,4(r3)
     7b4:	d8800e15 	stw	r2,56(sp)
     7b8:	1880020b 	ldhu	r2,8(r3)
     7bc:	d8800f0d 	sth	r2,60(sp)
     7c0:	18800283 	ldbu	r2,10(r3)
     7c4:	d8800f85 	stb	r2,62(sp)
     7c8:	d9000fc4 	addi	r4,sp,63
     7cc:	000b883a 	mov	r5,zero
     7d0:	01800744 	movi	r6,29
     7d4:	0004b080 	call	4b08 <memset>
					deltax = 0.0;
					deltay = 0.0;
					alt_up_char_buffer_string (char_buffer_dev, you_died, 5, 5);
     7d8:	01c00144 	movi	r7,5
     7dc:	d9001d17 	ldw	r4,116(sp)
     7e0:	d9400d04 	addi	r5,sp,52
     7e4:	380d883a 	mov	r6,r7
     7e8:	00060940 	call	6094 <alt_up_char_buffer_string>
					if (deadWait) {
     7ec:	d8c01717 	ldw	r3,92(sp)
     7f0:	1805003a 	cmpeq	r2,r3,zero
     7f4:	1000091e 	bne	r2,zero,81c <main+0x4d4>
						if ((*pushbuttons) == 0x00) {
     7f8:	00c40034 	movhi	r3,4096
     7fc:	18c01404 	addi	r3,r3,80
     800:	18800017 	ldw	r2,0(r3)
     804:	1000351e 	bne	r2,zero,8dc <main+0x594>
     808:	d8801b15 	stw	r2,108(sp)
     80c:	002f883a 	mov	r23,zero
     810:	d8001815 	stw	zero,96(sp)
     814:	d8001715 	stw	zero,92(sp)
     818:	00003406 	br	8ec <main+0x5a4>
							deadWait = 0;
						}
					} else {
						if ((*pushbuttons) & 0x0e)
     81c:	00c40034 	movhi	r3,4096
     820:	18c01404 	addi	r3,r3,80
     824:	18800017 	ldw	r2,0(r3)
     828:	1080038c 	andi	r2,r2,14
     82c:	10002b26 	beq	r2,zero,8dc <main+0x594>
						{
							stillAlive = 1;
							char you_alive[40] = "         \0";
     830:	00c00074 	movhi	r3,1
     834:	18e6cf04 	addi	r3,r3,-25796
     838:	18800017 	ldw	r2,0(r3)
     83c:	d8800315 	stw	r2,12(sp)
     840:	18800117 	ldw	r2,4(r3)
     844:	d8800415 	stw	r2,16(sp)
     848:	1880020b 	ldhu	r2,8(r3)
     84c:	d880050d 	sth	r2,20(sp)
     850:	18800283 	ldbu	r2,10(r3)
     854:	d8800585 	stb	r2,22(sp)
     858:	d90005c4 	addi	r4,sp,23
     85c:	000b883a 	mov	r5,zero
     860:	01800744 	movi	r6,29
     864:	0004b080 	call	4b08 <memset>
							alt_up_char_buffer_string (char_buffer_dev, you_alive, 5, 5);
     868:	01c00144 	movi	r7,5
     86c:	d9001d17 	ldw	r4,116(sp)
     870:	d9400304 	addi	r5,sp,12
     874:	380d883a 	mov	r6,r7
     878:	00060940 	call	6094 <alt_up_char_buffer_string>
							alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int)x1, (int)y1, (int)x2, (int)y2, 0, 0);
     87c:	9809883a 	mov	r4,r19
     880:	00032100 	call	3210 <__fixsfsi>
     884:	1021883a 	mov	r16,r2
     888:	a009883a 	mov	r4,r20
     88c:	00032100 	call	3210 <__fixsfsi>
     890:	d8800015 	stw	r2,0(sp)
     894:	d8000115 	stw	zero,4(sp)
     898:	d8000215 	stw	zero,8(sp)
     89c:	b009883a 	mov	r4,r22
     8a0:	900b883a 	mov	r5,r18
     8a4:	880d883a 	mov	r6,r17
     8a8:	800f883a 	mov	r7,r16
     8ac:	000682c0 	call	682c <alt_up_pixel_buffer_dma_draw_box>
     8b0:	0090e834 	movhi	r2,17312
     8b4:	d8801c15 	stw	r2,112(sp)
     8b8:	07104834 	movhi	fp,16672
     8bc:	0007883a 	mov	r3,zero
     8c0:	d8c01b15 	stw	r3,108(sp)
     8c4:	002f883a 	mov	r23,zero
     8c8:	00906434 	movhi	r2,16784
     8cc:	d8801915 	stw	r2,100(sp)
     8d0:	00c00044 	movi	r3,1
     8d4:	d8c01815 	stw	r3,96(sp)
     8d8:	00000406 	br	8ec <main+0x5a4>
     8dc:	0005883a 	mov	r2,zero
     8e0:	d8801b15 	stw	r2,108(sp)
     8e4:	002f883a 	mov	r23,zero
     8e8:	d8001815 	stw	zero,96(sp)
				}
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     8ec:	b009883a 	mov	r4,r22
     8f0:	0006b240 	call	6b24 <alt_up_pixel_buffer_dma_swap_buffers>
     8f4:	003ed206 	br	440 <main+0xf8>
					deltax = 0.0;
					deltay = 0.0;
				}
				
				// move the rectangle
				x1 = x1 + deltax;
     8f8:	0005883a 	mov	r2,zero
     8fc:	d8c01c17 	ldw	r3,112(sp)
     900:	1887ff72 	custom	253,r3,r3,r2
     904:	d8c01c15 	stw	r3,112(sp)
				//x2 = x2 + deltax;
				y1 = y1 + deltay;
     908:	e0b9ff72 	custom	253,fp,fp,r2
     90c:	d8801b15 	stw	r2,108(sp)
     910:	002f883a 	mov	r23,zero
     914:	003f7f06 	br	714 <main+0x3cc>
     918:	0021883a 	mov	r16,zero
     91c:	00800044 	movi	r2,1
     920:	d8801715 	stw	r2,92(sp)
					deltay = -deltay;
					stillAlive = 0;
					deadWait = 1;
				}
				
				x2 = x1 + 30.0;
     924:	00907c34 	movhi	r2,16880
     928:	d8c01c17 	ldw	r3,112(sp)
     92c:	18a7ff72 	custom	253,r19,r3,r2
				y2 = y1 + 30.0;
     930:	80a9ff72 	custom	253,r20,r16,r2
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0x60, 0);
				//draw_sprite(pixel_buffer_dev, x1, y1);
				
				// redraw the box in the foreground 
				//%%%%//alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
				draw_sprite(pixel_buffer_dev, (int)x1, (int)y1, (int)theta, thrusting);
     934:	1809883a 	mov	r4,r3
     938:	00032100 	call	3210 <__fixsfsi>
     93c:	1025883a 	mov	r18,r2
     940:	8009883a 	mov	r4,r16
     944:	00032100 	call	3210 <__fixsfsi>
     948:	1023883a 	mov	r17,r2
     94c:	d9001917 	ldw	r4,100(sp)
     950:	00032100 	call	3210 <__fixsfsi>
     954:	dd400015 	stw	r21,0(sp)
     958:	b009883a 	mov	r4,r22
     95c:	900b883a 	mov	r5,r18
     960:	880d883a 	mov	r6,r17
     964:	100f883a 	mov	r7,r2
     968:	00001ac0 	call	1ac <draw_sprite>
				draw_landscape (pixel_buffer_dev);
     96c:	b009883a 	mov	r4,r22
     970:	000026c0 	call	26c <draw_landscape>
     974:	8039883a 	mov	fp,r16
     978:	003f8906 	br	7a0 <main+0x458>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     97c:	01000074 	movhi	r4,1
     980:	2126b104 	addi	r4,r4,-25916
     984:	0004cb40 	call	4cb4 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     988:	00bfffc4 	movi	r2,-1
     98c:	dfc02717 	ldw	ra,156(sp)
     990:	df002617 	ldw	fp,152(sp)
     994:	ddc02517 	ldw	r23,148(sp)
     998:	dd802417 	ldw	r22,144(sp)
     99c:	dd402317 	ldw	r21,140(sp)
     9a0:	dd002217 	ldw	r20,136(sp)
     9a4:	dcc02117 	ldw	r19,132(sp)
     9a8:	dc802017 	ldw	r18,128(sp)
     9ac:	dc401f17 	ldw	r17,124(sp)
     9b0:	dc001e17 	ldw	r16,120(sp)
     9b4:	dec02804 	addi	sp,sp,160
     9b8:	f800283a 	ret

000009bc <cos>:
     9bc:	00a00034 	movhi	r2,32768
     9c0:	10bfffc4 	addi	r2,r2,-1
     9c4:	defffa04 	addi	sp,sp,-24
     9c8:	114c703a 	and	r6,r2,r5
     9cc:	008ffa74 	movhi	r2,16361
     9d0:	10887ec4 	addi	r2,r2,8699
     9d4:	dfc00515 	stw	ra,20(sp)
     9d8:	2011883a 	mov	r8,r4
     9dc:	1180210e 	bge	r2,r6,a64 <cos+0xa8>
     9e0:	009ffc34 	movhi	r2,32752
     9e4:	10bfffc4 	addi	r2,r2,-1
     9e8:	11800a0e 	bge	r2,r6,a14 <cos+0x58>
     9ec:	280f883a 	mov	r7,r5
     9f0:	400d883a 	mov	r6,r8
     9f4:	00037c80 	call	37c8 <__subdf3>
     9f8:	100d883a 	mov	r6,r2
     9fc:	180f883a 	mov	r7,r3
     a00:	3005883a 	mov	r2,r6
     a04:	3807883a 	mov	r3,r7
     a08:	dfc00517 	ldw	ra,20(sp)
     a0c:	dec00604 	addi	sp,sp,24
     a10:	f800283a 	ret
     a14:	d9800104 	addi	r6,sp,4
     a18:	0000c900 	call	c90 <__ieee754_rem_pio2>
     a1c:	10c000cc 	andi	r3,r2,3
     a20:	01000044 	movi	r4,1
     a24:	19001926 	beq	r3,r4,a8c <cos+0xd0>
     a28:	00800084 	movi	r2,2
     a2c:	18803126 	beq	r3,r2,af4 <cos+0x138>
     a30:	1800231e 	bne	r3,zero,ac0 <cos+0x104>
     a34:	d8800117 	ldw	r2,4(sp)
     a38:	da000317 	ldw	r8,12(sp)
     a3c:	d8c00217 	ldw	r3,8(sp)
     a40:	da400417 	ldw	r9,16(sp)
     a44:	400d883a 	mov	r6,r8
     a48:	180b883a 	mov	r5,r3
     a4c:	480f883a 	mov	r7,r9
     a50:	1009883a 	mov	r4,r2
     a54:	00014b80 	call	14b8 <__kernel_cos>
     a58:	100d883a 	mov	r6,r2
     a5c:	180f883a 	mov	r7,r3
     a60:	003fe706 	br	a00 <cos+0x44>
     a64:	000d883a 	mov	r6,zero
     a68:	000f883a 	mov	r7,zero
     a6c:	00014b80 	call	14b8 <__kernel_cos>
     a70:	100d883a 	mov	r6,r2
     a74:	180f883a 	mov	r7,r3
     a78:	3005883a 	mov	r2,r6
     a7c:	3807883a 	mov	r3,r7
     a80:	dfc00517 	ldw	ra,20(sp)
     a84:	dec00604 	addi	sp,sp,24
     a88:	f800283a 	ret
     a8c:	d8800117 	ldw	r2,4(sp)
     a90:	da000317 	ldw	r8,12(sp)
     a94:	d8c00217 	ldw	r3,8(sp)
     a98:	da400417 	ldw	r9,16(sp)
     a9c:	d9000015 	stw	r4,0(sp)
     aa0:	400d883a 	mov	r6,r8
     aa4:	480f883a 	mov	r7,r9
     aa8:	180b883a 	mov	r5,r3
     aac:	1009883a 	mov	r4,r2
     ab0:	00028600 	call	2860 <__kernel_sin>
     ab4:	100d883a 	mov	r6,r2
     ab8:	19e0003c 	xorhi	r7,r3,32768
     abc:	003fd006 	br	a00 <cos+0x44>
     ac0:	d8800117 	ldw	r2,4(sp)
     ac4:	da000317 	ldw	r8,12(sp)
     ac8:	d8c00217 	ldw	r3,8(sp)
     acc:	da400417 	ldw	r9,16(sp)
     ad0:	d9000015 	stw	r4,0(sp)
     ad4:	400d883a 	mov	r6,r8
     ad8:	480f883a 	mov	r7,r9
     adc:	180b883a 	mov	r5,r3
     ae0:	1009883a 	mov	r4,r2
     ae4:	00028600 	call	2860 <__kernel_sin>
     ae8:	100d883a 	mov	r6,r2
     aec:	180f883a 	mov	r7,r3
     af0:	003fc306 	br	a00 <cos+0x44>
     af4:	d8800117 	ldw	r2,4(sp)
     af8:	da000317 	ldw	r8,12(sp)
     afc:	d8c00217 	ldw	r3,8(sp)
     b00:	da400417 	ldw	r9,16(sp)
     b04:	400d883a 	mov	r6,r8
     b08:	180b883a 	mov	r5,r3
     b0c:	480f883a 	mov	r7,r9
     b10:	1009883a 	mov	r4,r2
     b14:	00014b80 	call	14b8 <__kernel_cos>
     b18:	100d883a 	mov	r6,r2
     b1c:	19e0003c 	xorhi	r7,r3,32768
     b20:	003fb706 	br	a00 <cos+0x44>

00000b24 <sin>:
     b24:	00a00034 	movhi	r2,32768
     b28:	10bfffc4 	addi	r2,r2,-1
     b2c:	defffa04 	addi	sp,sp,-24
     b30:	114c703a 	and	r6,r2,r5
     b34:	008ffa74 	movhi	r2,16361
     b38:	10887ec4 	addi	r2,r2,8699
     b3c:	dfc00515 	stw	ra,20(sp)
     b40:	2011883a 	mov	r8,r4
     b44:	1180220e 	bge	r2,r6,bd0 <sin+0xac>
     b48:	009ffc34 	movhi	r2,32752
     b4c:	10bfffc4 	addi	r2,r2,-1
     b50:	11800a0e 	bge	r2,r6,b7c <sin+0x58>
     b54:	280f883a 	mov	r7,r5
     b58:	400d883a 	mov	r6,r8
     b5c:	00037c80 	call	37c8 <__subdf3>
     b60:	100d883a 	mov	r6,r2
     b64:	180f883a 	mov	r7,r3
     b68:	3005883a 	mov	r2,r6
     b6c:	3807883a 	mov	r3,r7
     b70:	dfc00517 	ldw	ra,20(sp)
     b74:	dec00604 	addi	sp,sp,24
     b78:	f800283a 	ret
     b7c:	d9800104 	addi	r6,sp,4
     b80:	0000c900 	call	c90 <__ieee754_rem_pio2>
     b84:	10c000cc 	andi	r3,r2,3
     b88:	01000044 	movi	r4,1
     b8c:	19001b26 	beq	r3,r4,bfc <sin+0xd8>
     b90:	00800084 	movi	r2,2
     b94:	18803126 	beq	r3,r2,c5c <sin+0x138>
     b98:	1800241e 	bne	r3,zero,c2c <sin+0x108>
     b9c:	d8800117 	ldw	r2,4(sp)
     ba0:	da000317 	ldw	r8,12(sp)
     ba4:	d8c00217 	ldw	r3,8(sp)
     ba8:	da400417 	ldw	r9,16(sp)
     bac:	d9000015 	stw	r4,0(sp)
     bb0:	400d883a 	mov	r6,r8
     bb4:	480f883a 	mov	r7,r9
     bb8:	180b883a 	mov	r5,r3
     bbc:	1009883a 	mov	r4,r2
     bc0:	00028600 	call	2860 <__kernel_sin>
     bc4:	100d883a 	mov	r6,r2
     bc8:	180f883a 	mov	r7,r3
     bcc:	003fe606 	br	b68 <sin+0x44>
     bd0:	000d883a 	mov	r6,zero
     bd4:	000f883a 	mov	r7,zero
     bd8:	d8000015 	stw	zero,0(sp)
     bdc:	00028600 	call	2860 <__kernel_sin>
     be0:	100d883a 	mov	r6,r2
     be4:	180f883a 	mov	r7,r3
     be8:	3005883a 	mov	r2,r6
     bec:	3807883a 	mov	r3,r7
     bf0:	dfc00517 	ldw	ra,20(sp)
     bf4:	dec00604 	addi	sp,sp,24
     bf8:	f800283a 	ret
     bfc:	d8800117 	ldw	r2,4(sp)
     c00:	da000317 	ldw	r8,12(sp)
     c04:	d8c00217 	ldw	r3,8(sp)
     c08:	da400417 	ldw	r9,16(sp)
     c0c:	400d883a 	mov	r6,r8
     c10:	180b883a 	mov	r5,r3
     c14:	480f883a 	mov	r7,r9
     c18:	1009883a 	mov	r4,r2
     c1c:	00014b80 	call	14b8 <__kernel_cos>
     c20:	100d883a 	mov	r6,r2
     c24:	180f883a 	mov	r7,r3
     c28:	003fcf06 	br	b68 <sin+0x44>
     c2c:	d8800117 	ldw	r2,4(sp)
     c30:	da000317 	ldw	r8,12(sp)
     c34:	d8c00217 	ldw	r3,8(sp)
     c38:	da400417 	ldw	r9,16(sp)
     c3c:	400d883a 	mov	r6,r8
     c40:	180b883a 	mov	r5,r3
     c44:	480f883a 	mov	r7,r9
     c48:	1009883a 	mov	r4,r2
     c4c:	00014b80 	call	14b8 <__kernel_cos>
     c50:	100d883a 	mov	r6,r2
     c54:	19e0003c 	xorhi	r7,r3,32768
     c58:	003fc306 	br	b68 <sin+0x44>
     c5c:	d8800117 	ldw	r2,4(sp)
     c60:	da000317 	ldw	r8,12(sp)
     c64:	d8c00217 	ldw	r3,8(sp)
     c68:	da400417 	ldw	r9,16(sp)
     c6c:	d9000015 	stw	r4,0(sp)
     c70:	400d883a 	mov	r6,r8
     c74:	480f883a 	mov	r7,r9
     c78:	180b883a 	mov	r5,r3
     c7c:	1009883a 	mov	r4,r2
     c80:	00028600 	call	2860 <__kernel_sin>
     c84:	100d883a 	mov	r6,r2
     c88:	19e0003c 	xorhi	r7,r3,32768
     c8c:	003fb606 	br	b68 <sin+0x44>

00000c90 <__ieee754_rem_pio2>:
     c90:	deffe304 	addi	sp,sp,-116
     c94:	00a00034 	movhi	r2,32768
     c98:	10bfffc4 	addi	r2,r2,-1
     c9c:	dd801915 	stw	r22,100(sp)
     ca0:	28ac703a 	and	r22,r5,r2
     ca4:	008ffa74 	movhi	r2,16361
     ca8:	10887ec4 	addi	r2,r2,8699
     cac:	df001b15 	stw	fp,108(sp)
     cb0:	dfc01c15 	stw	ra,112(sp)
     cb4:	ddc01a15 	stw	r23,104(sp)
     cb8:	dd401815 	stw	r21,96(sp)
     cbc:	dd001715 	stw	r20,92(sp)
     cc0:	dcc01615 	stw	r19,88(sp)
     cc4:	dc801515 	stw	r18,84(sp)
     cc8:	dc401415 	stw	r17,80(sp)
     ccc:	dc001315 	stw	r16,76(sp)
     cd0:	2013883a 	mov	r9,r4
     cd4:	d9400a15 	stw	r5,40(sp)
     cd8:	3039883a 	mov	fp,r6
     cdc:	15801216 	blt	r2,r22,d28 <__ieee754_rem_pio2+0x98>
     ce0:	e1400115 	stw	r5,4(fp)
     ce4:	30000315 	stw	zero,12(r6)
     ce8:	e1000015 	stw	r4,0(fp)
     cec:	d8000b15 	stw	zero,44(sp)
     cf0:	30000215 	stw	zero,8(r6)
     cf4:	d8800b17 	ldw	r2,44(sp)
     cf8:	dfc01c17 	ldw	ra,112(sp)
     cfc:	df001b17 	ldw	fp,108(sp)
     d00:	ddc01a17 	ldw	r23,104(sp)
     d04:	dd801917 	ldw	r22,100(sp)
     d08:	dd401817 	ldw	r21,96(sp)
     d0c:	dd001717 	ldw	r20,92(sp)
     d10:	dcc01617 	ldw	r19,88(sp)
     d14:	dc801517 	ldw	r18,84(sp)
     d18:	dc401417 	ldw	r17,80(sp)
     d1c:	dc001317 	ldw	r16,76(sp)
     d20:	dec01d04 	addi	sp,sp,116
     d24:	f800283a 	ret
     d28:	009000f4 	movhi	r2,16387
     d2c:	10b65ec4 	addi	r2,r2,-9861
     d30:	15800f0e 	bge	r2,r22,d70 <__ieee754_rem_pio2+0xe0>
     d34:	00904e74 	movhi	r2,16697
     d38:	10887ec4 	addi	r2,r2,8699
     d3c:	1580330e 	bge	r2,r22,e0c <__ieee754_rem_pio2+0x17c>
     d40:	009ffc34 	movhi	r2,32752
     d44:	10bfffc4 	addi	r2,r2,-1
     d48:	1580fe0e 	bge	r2,r22,1144 <__ieee754_rem_pio2+0x4b4>
     d4c:	280f883a 	mov	r7,r5
     d50:	480d883a 	mov	r6,r9
     d54:	00037c80 	call	37c8 <__subdf3>
     d58:	e0c00115 	stw	r3,4(fp)
     d5c:	d8000b15 	stw	zero,44(sp)
     d60:	e0800015 	stw	r2,0(fp)
     d64:	e0800215 	stw	r2,8(fp)
     d68:	e0c00315 	stw	r3,12(fp)
     d6c:	003fe106 	br	cf4 <__ieee754_rem_pio2+0x64>
     d70:	d9000a17 	ldw	r4,40(sp)
     d74:	0100ce0e 	bge	zero,r4,10b0 <__ieee754_rem_pio2+0x420>
     d78:	04151034 	movhi	r16,21568
     d7c:	044ffe74 	movhi	r17,16377
     d80:	8c487ec4 	addi	r17,r17,8699
     d84:	4809883a 	mov	r4,r9
     d88:	800d883a 	mov	r6,r16
     d8c:	880f883a 	mov	r7,r17
     d90:	00037c80 	call	37c8 <__subdf3>
     d94:	1025883a 	mov	r18,r2
     d98:	1827883a 	mov	r19,r3
     d9c:	b4413c26 	beq	r22,r17,1290 <__ieee754_rem_pio2+0x600>
     da0:	040698b4 	movhi	r16,6754
     da4:	8418cc44 	addi	r16,r16,25393
     da8:	044f7474 	movhi	r17,15825
     dac:	8c6d1844 	addi	r17,r17,-19359
     db0:	1009883a 	mov	r4,r2
     db4:	180b883a 	mov	r5,r3
     db8:	800d883a 	mov	r6,r16
     dbc:	880f883a 	mov	r7,r17
     dc0:	00037c80 	call	37c8 <__subdf3>
     dc4:	100d883a 	mov	r6,r2
     dc8:	9009883a 	mov	r4,r18
     dcc:	980b883a 	mov	r5,r19
     dd0:	180f883a 	mov	r7,r3
     dd4:	e0800015 	stw	r2,0(fp)
     dd8:	e0c00115 	stw	r3,4(fp)
     ddc:	00037c80 	call	37c8 <__subdf3>
     de0:	1009883a 	mov	r4,r2
     de4:	800d883a 	mov	r6,r16
     de8:	880f883a 	mov	r7,r17
     dec:	180b883a 	mov	r5,r3
     df0:	00037c80 	call	37c8 <__subdf3>
     df4:	1009883a 	mov	r4,r2
     df8:	00800044 	movi	r2,1
     dfc:	d8800b15 	stw	r2,44(sp)
     e00:	e0c00315 	stw	r3,12(fp)
     e04:	e1000215 	stw	r4,8(fp)
     e08:	003fba06 	br	cf4 <__ieee754_rem_pio2+0x64>
     e0c:	0002b780 	call	2b78 <fabs>
     e10:	021b72b4 	movhi	r8,28106
     e14:	423220c4 	addi	r8,r8,-14205
     e18:	024ff934 	movhi	r9,16356
     e1c:	4a57cc04 	addi	r9,r9,24368
     e20:	480f883a 	mov	r7,r9
     e24:	400d883a 	mov	r6,r8
     e28:	1009883a 	mov	r4,r2
     e2c:	180b883a 	mov	r5,r3
     e30:	1025883a 	mov	r18,r2
     e34:	1827883a 	mov	r19,r3
     e38:	00038bc0 	call	38bc <__muldf3>
     e3c:	0011883a 	mov	r8,zero
     e40:	024ff834 	movhi	r9,16352
     e44:	480f883a 	mov	r7,r9
     e48:	400d883a 	mov	r6,r8
     e4c:	180b883a 	mov	r5,r3
     e50:	1009883a 	mov	r4,r2
     e54:	00038480 	call	3848 <__adddf3>
     e58:	180b883a 	mov	r5,r3
     e5c:	1009883a 	mov	r4,r2
     e60:	0003f100 	call	3f10 <__fixdfsi>
     e64:	1009883a 	mov	r4,r2
     e68:	d8800b15 	stw	r2,44(sp)
     e6c:	0003e180 	call	3e18 <__floatsidf>
     e70:	1823883a 	mov	r17,r3
     e74:	1009883a 	mov	r4,r2
     e78:	d8800c15 	stw	r2,48(sp)
     e7c:	00effe74 	movhi	r3,49145
     e80:	18c87ec4 	addi	r3,r3,8699
     e84:	00951034 	movhi	r2,21568
     e88:	880b883a 	mov	r5,r17
     e8c:	180f883a 	mov	r7,r3
     e90:	100d883a 	mov	r6,r2
     e94:	dc400d15 	stw	r17,52(sp)
     e98:	00038bc0 	call	38bc <__muldf3>
     e9c:	180f883a 	mov	r7,r3
     ea0:	980b883a 	mov	r5,r19
     ea4:	9009883a 	mov	r4,r18
     ea8:	100d883a 	mov	r6,r2
     eac:	00038480 	call	3848 <__adddf3>
     eb0:	d9000c17 	ldw	r4,48(sp)
     eb4:	020698b4 	movhi	r8,6754
     eb8:	4218cc44 	addi	r8,r8,25393
     ebc:	024f7474 	movhi	r9,15825
     ec0:	4a6d1844 	addi	r9,r9,-19359
     ec4:	880b883a 	mov	r5,r17
     ec8:	480f883a 	mov	r7,r9
     ecc:	400d883a 	mov	r6,r8
     ed0:	1025883a 	mov	r18,r2
     ed4:	1827883a 	mov	r19,r3
     ed8:	00038bc0 	call	38bc <__muldf3>
     edc:	d9000b17 	ldw	r4,44(sp)
     ee0:	100f883a 	mov	r7,r2
     ee4:	1811883a 	mov	r8,r3
     ee8:	008007c4 	movi	r2,31
     eec:	dc800e15 	stw	r18,56(sp)
     ef0:	3821883a 	mov	r16,r7
     ef4:	dcc00f15 	stw	r19,60(sp)
     ef8:	4023883a 	mov	r17,r8
     efc:	11010a0e 	bge	r2,r4,1328 <__ieee754_rem_pio2+0x698>
     f00:	d9000e17 	ldw	r4,56(sp)
     f04:	d9400f17 	ldw	r5,60(sp)
     f08:	800d883a 	mov	r6,r16
     f0c:	880f883a 	mov	r7,r17
     f10:	00037c80 	call	37c8 <__subdf3>
     f14:	1810d53a 	srli	r8,r3,20
     f18:	b02dd53a 	srai	r22,r22,20
     f1c:	1009883a 	mov	r4,r2
     f20:	4201ffcc 	andi	r8,r8,2047
     f24:	180b883a 	mov	r5,r3
     f28:	b211c83a 	sub	r8,r22,r8
     f2c:	00800404 	movi	r2,16
     f30:	dd801015 	stw	r22,64(sp)
     f34:	e1000015 	stw	r4,0(fp)
     f38:	e1400115 	stw	r5,4(fp)
     f3c:	1200430e 	bge	r2,r8,104c <__ieee754_rem_pio2+0x3bc>
     f40:	d9000c17 	ldw	r4,48(sp)
     f44:	d9400d17 	ldw	r5,52(sp)
     f48:	00869834 	movhi	r2,6752
     f4c:	00cf7474 	movhi	r3,15825
     f50:	18ed1844 	addi	r3,r3,-19359
     f54:	180f883a 	mov	r7,r3
     f58:	100d883a 	mov	r6,r2
     f5c:	00038bc0 	call	38bc <__muldf3>
     f60:	d9000e17 	ldw	r4,56(sp)
     f64:	d9400f17 	ldw	r5,60(sp)
     f68:	100d883a 	mov	r6,r2
     f6c:	180f883a 	mov	r7,r3
     f70:	1025883a 	mov	r18,r2
     f74:	1827883a 	mov	r19,r3
     f78:	00037c80 	call	37c8 <__subdf3>
     f7c:	d9000c17 	ldw	r4,48(sp)
     f80:	d9400d17 	ldw	r5,52(sp)
     f84:	058b80f4 	movhi	r22,11779
     f88:	b59c1cc4 	addi	r22,r22,28787
     f8c:	05cee8f4 	movhi	r23,15267
     f90:	bdc66284 	addi	r23,r23,6538
     f94:	b00d883a 	mov	r6,r22
     f98:	b80f883a 	mov	r7,r23
     f9c:	d8801115 	stw	r2,68(sp)
     fa0:	d8c01215 	stw	r3,72(sp)
     fa4:	d8800815 	stw	r2,32(sp)
     fa8:	00038bc0 	call	38bc <__muldf3>
     fac:	d9001217 	ldw	r4,72(sp)
     fb0:	d9400f17 	ldw	r5,60(sp)
     fb4:	d9800817 	ldw	r6,32(sp)
     fb8:	d9000915 	stw	r4,36(sp)
     fbc:	d9c01217 	ldw	r7,72(sp)
     fc0:	d9000e17 	ldw	r4,56(sp)
     fc4:	1021883a 	mov	r16,r2
     fc8:	1823883a 	mov	r17,r3
     fcc:	00037c80 	call	37c8 <__subdf3>
     fd0:	180b883a 	mov	r5,r3
     fd4:	900d883a 	mov	r6,r18
     fd8:	980f883a 	mov	r7,r19
     fdc:	1009883a 	mov	r4,r2
     fe0:	00037c80 	call	37c8 <__subdf3>
     fe4:	180f883a 	mov	r7,r3
     fe8:	880b883a 	mov	r5,r17
     fec:	8009883a 	mov	r4,r16
     ff0:	100d883a 	mov	r6,r2
     ff4:	00037c80 	call	37c8 <__subdf3>
     ff8:	d9000817 	ldw	r4,32(sp)
     ffc:	d9401217 	ldw	r5,72(sp)
    1000:	180f883a 	mov	r7,r3
    1004:	100d883a 	mov	r6,r2
    1008:	1021883a 	mov	r16,r2
    100c:	1823883a 	mov	r17,r3
    1010:	00037c80 	call	37c8 <__subdf3>
    1014:	1810d53a 	srli	r8,r3,20
    1018:	1009883a 	mov	r4,r2
    101c:	d8801017 	ldw	r2,64(sp)
    1020:	4201ffcc 	andi	r8,r8,2047
    1024:	180b883a 	mov	r5,r3
    1028:	1211c83a 	sub	r8,r2,r8
    102c:	00800c44 	movi	r2,49
    1030:	e1000015 	stw	r4,0(fp)
    1034:	e1400115 	stw	r5,4(fp)
    1038:	1200f016 	blt	r2,r8,13fc <__ieee754_rem_pio2+0x76c>
    103c:	d8c00817 	ldw	r3,32(sp)
    1040:	d9001217 	ldw	r4,72(sp)
    1044:	d8c00e15 	stw	r3,56(sp)
    1048:	d9000f15 	stw	r4,60(sp)
    104c:	e1800017 	ldw	r6,0(fp)
    1050:	e1c00117 	ldw	r7,4(fp)
    1054:	d9400f17 	ldw	r5,60(sp)
    1058:	d9000e17 	ldw	r4,56(sp)
    105c:	00037c80 	call	37c8 <__subdf3>
    1060:	180b883a 	mov	r5,r3
    1064:	800d883a 	mov	r6,r16
    1068:	880f883a 	mov	r7,r17
    106c:	1009883a 	mov	r4,r2
    1070:	00037c80 	call	37c8 <__subdf3>
    1074:	d9400a17 	ldw	r5,40(sp)
    1078:	e0800215 	stw	r2,8(fp)
    107c:	e1800204 	addi	r6,fp,8
    1080:	30c00115 	stw	r3,4(r6)
    1084:	283f1b0e 	bge	r5,zero,cf4 <__ieee754_rem_pio2+0x64>
    1088:	e0c00117 	ldw	r3,4(fp)
    108c:	d8800b17 	ldw	r2,44(sp)
    1090:	18e0003c 	xorhi	r3,r3,32768
    1094:	0085c83a 	sub	r2,zero,r2
    1098:	e0c00115 	stw	r3,4(fp)
    109c:	d8800b15 	stw	r2,44(sp)
    10a0:	30800117 	ldw	r2,4(r6)
    10a4:	10a0003c 	xorhi	r2,r2,32768
    10a8:	30800115 	stw	r2,4(r6)
    10ac:	003f1106 	br	cf4 <__ieee754_rem_pio2+0x64>
    10b0:	04151034 	movhi	r16,21568
    10b4:	044ffe74 	movhi	r17,16377
    10b8:	8c487ec4 	addi	r17,r17,8699
    10bc:	4809883a 	mov	r4,r9
    10c0:	800d883a 	mov	r6,r16
    10c4:	880f883a 	mov	r7,r17
    10c8:	00038480 	call	3848 <__adddf3>
    10cc:	1025883a 	mov	r18,r2
    10d0:	1827883a 	mov	r19,r3
    10d4:	b440a326 	beq	r22,r17,1364 <__ieee754_rem_pio2+0x6d4>
    10d8:	040698b4 	movhi	r16,6754
    10dc:	8418cc44 	addi	r16,r16,25393
    10e0:	044f7474 	movhi	r17,15825
    10e4:	8c6d1844 	addi	r17,r17,-19359
    10e8:	1009883a 	mov	r4,r2
    10ec:	180b883a 	mov	r5,r3
    10f0:	800d883a 	mov	r6,r16
    10f4:	880f883a 	mov	r7,r17
    10f8:	00038480 	call	3848 <__adddf3>
    10fc:	100d883a 	mov	r6,r2
    1100:	9009883a 	mov	r4,r18
    1104:	980b883a 	mov	r5,r19
    1108:	180f883a 	mov	r7,r3
    110c:	e0800015 	stw	r2,0(fp)
    1110:	e0c00115 	stw	r3,4(fp)
    1114:	00037c80 	call	37c8 <__subdf3>
    1118:	1009883a 	mov	r4,r2
    111c:	800d883a 	mov	r6,r16
    1120:	880f883a 	mov	r7,r17
    1124:	180b883a 	mov	r5,r3
    1128:	00038480 	call	3848 <__adddf3>
    112c:	1009883a 	mov	r4,r2
    1130:	00bfffc4 	movi	r2,-1
    1134:	d8800b15 	stw	r2,44(sp)
    1138:	e0c00315 	stw	r3,12(fp)
    113c:	e1000215 	stw	r4,8(fp)
    1140:	003eec06 	br	cf4 <__ieee754_rem_pio2+0x64>
    1144:	b005d53a 	srai	r2,r22,20
    1148:	4821883a 	mov	r16,r9
    114c:	05505c34 	movhi	r21,16752
    1150:	15fefa84 	addi	r23,r2,-1046
    1154:	b826953a 	slli	r19,r23,20
    1158:	0029883a 	mov	r20,zero
    115c:	048000c4 	movi	r18,3
    1160:	b4e7c83a 	sub	r19,r22,r19
    1164:	980b883a 	mov	r5,r19
    1168:	0003f100 	call	3f10 <__fixdfsi>
    116c:	1009883a 	mov	r4,r2
    1170:	0003e180 	call	3e18 <__floatsidf>
    1174:	980b883a 	mov	r5,r19
    1178:	8009883a 	mov	r4,r16
    117c:	180f883a 	mov	r7,r3
    1180:	100d883a 	mov	r6,r2
    1184:	d8800215 	stw	r2,8(sp)
    1188:	d8c00315 	stw	r3,12(sp)
    118c:	00037c80 	call	37c8 <__subdf3>
    1190:	180b883a 	mov	r5,r3
    1194:	a00d883a 	mov	r6,r20
    1198:	a80f883a 	mov	r7,r21
    119c:	1009883a 	mov	r4,r2
    11a0:	00038bc0 	call	38bc <__muldf3>
    11a4:	180b883a 	mov	r5,r3
    11a8:	1009883a 	mov	r4,r2
    11ac:	1823883a 	mov	r17,r3
    11b0:	1021883a 	mov	r16,r2
    11b4:	0003f100 	call	3f10 <__fixdfsi>
    11b8:	1009883a 	mov	r4,r2
    11bc:	0003e180 	call	3e18 <__floatsidf>
    11c0:	880b883a 	mov	r5,r17
    11c4:	8009883a 	mov	r4,r16
    11c8:	180f883a 	mov	r7,r3
    11cc:	100d883a 	mov	r6,r2
    11d0:	d8800415 	stw	r2,16(sp)
    11d4:	d8c00515 	stw	r3,20(sp)
    11d8:	00037c80 	call	37c8 <__subdf3>
    11dc:	180b883a 	mov	r5,r3
    11e0:	000d883a 	mov	r6,zero
    11e4:	a80f883a 	mov	r7,r21
    11e8:	1009883a 	mov	r4,r2
    11ec:	00038bc0 	call	38bc <__muldf3>
    11f0:	d8c00715 	stw	r3,28(sp)
    11f4:	d8800615 	stw	r2,24(sp)
    11f8:	00000106 	br	1200 <__ieee754_rem_pio2+0x570>
    11fc:	8025883a 	mov	r18,r16
    1200:	943fffc4 	addi	r16,r18,-1
    1204:	800890fa 	slli	r4,r16,3
    1208:	d9400204 	addi	r5,sp,8
    120c:	000d883a 	mov	r6,zero
    1210:	2149883a 	add	r4,r4,r5
    1214:	20c00117 	ldw	r3,4(r4)
    1218:	20800017 	ldw	r2,0(r4)
    121c:	000f883a 	mov	r7,zero
    1220:	180b883a 	mov	r5,r3
    1224:	1009883a 	mov	r4,r2
    1228:	0003c800 	call	3c80 <__eqdf2>
    122c:	103ff326 	beq	r2,zero,11fc <__ieee754_rem_pio2+0x56c>
    1230:	00800084 	movi	r2,2
    1234:	00c00074 	movhi	r3,1
    1238:	18e6f904 	addi	r3,r3,-25628
    123c:	b80d883a 	mov	r6,r23
    1240:	900f883a 	mov	r7,r18
    1244:	d9000204 	addi	r4,sp,8
    1248:	e00b883a 	mov	r5,fp
    124c:	d8800015 	stw	r2,0(sp)
    1250:	d8c00115 	stw	r3,4(sp)
    1254:	00019e40 	call	19e4 <__kernel_rem_pio2>
    1258:	d8800b15 	stw	r2,44(sp)
    125c:	d8800a17 	ldw	r2,40(sp)
    1260:	103ea40e 	bge	r2,zero,cf4 <__ieee754_rem_pio2+0x64>
    1264:	e0800117 	ldw	r2,4(fp)
    1268:	d8c00b17 	ldw	r3,44(sp)
    126c:	e1000204 	addi	r4,fp,8
    1270:	10a0003c 	xorhi	r2,r2,32768
    1274:	00c7c83a 	sub	r3,zero,r3
    1278:	e0800115 	stw	r2,4(fp)
    127c:	d8c00b15 	stw	r3,44(sp)
    1280:	20c00117 	ldw	r3,4(r4)
    1284:	18e0003c 	xorhi	r3,r3,32768
    1288:	20c00115 	stw	r3,4(r4)
    128c:	003e9906 	br	cf4 <__ieee754_rem_pio2+0x64>
    1290:	00869834 	movhi	r2,6752
    1294:	00cf7474 	movhi	r3,15825
    1298:	18ed1844 	addi	r3,r3,-19359
    129c:	9009883a 	mov	r4,r18
    12a0:	980b883a 	mov	r5,r19
    12a4:	180f883a 	mov	r7,r3
    12a8:	100d883a 	mov	r6,r2
    12ac:	00037c80 	call	37c8 <__subdf3>
    12b0:	048b80f4 	movhi	r18,11779
    12b4:	949c1cc4 	addi	r18,r18,28787
    12b8:	04cee8f4 	movhi	r19,15267
    12bc:	9cc66284 	addi	r19,r19,6538
    12c0:	1009883a 	mov	r4,r2
    12c4:	180b883a 	mov	r5,r3
    12c8:	900d883a 	mov	r6,r18
    12cc:	980f883a 	mov	r7,r19
    12d0:	1021883a 	mov	r16,r2
    12d4:	1823883a 	mov	r17,r3
    12d8:	00037c80 	call	37c8 <__subdf3>
    12dc:	100d883a 	mov	r6,r2
    12e0:	8009883a 	mov	r4,r16
    12e4:	880b883a 	mov	r5,r17
    12e8:	180f883a 	mov	r7,r3
    12ec:	e0800015 	stw	r2,0(fp)
    12f0:	e0c00115 	stw	r3,4(fp)
    12f4:	00037c80 	call	37c8 <__subdf3>
    12f8:	180b883a 	mov	r5,r3
    12fc:	1009883a 	mov	r4,r2
    1300:	900d883a 	mov	r6,r18
    1304:	980f883a 	mov	r7,r19
    1308:	00037c80 	call	37c8 <__subdf3>
    130c:	180b883a 	mov	r5,r3
    1310:	1009883a 	mov	r4,r2
    1314:	00c00044 	movi	r3,1
    1318:	d8c00b15 	stw	r3,44(sp)
    131c:	e1400315 	stw	r5,12(fp)
    1320:	e1000215 	stw	r4,8(fp)
    1324:	003e7306 	br	cf4 <__ieee754_rem_pio2+0x64>
    1328:	2105883a 	add	r2,r4,r4
    132c:	1085883a 	add	r2,r2,r2
    1330:	00c00074 	movhi	r3,1
    1334:	18e6d904 	addi	r3,r3,-25756
    1338:	10c5883a 	add	r2,r2,r3
    133c:	113fff17 	ldw	r4,-4(r2)
    1340:	b13eef26 	beq	r22,r4,f00 <__ieee754_rem_pio2+0x270>
    1344:	980b883a 	mov	r5,r19
    1348:	400f883a 	mov	r7,r8
    134c:	9009883a 	mov	r4,r18
    1350:	800d883a 	mov	r6,r16
    1354:	00037c80 	call	37c8 <__subdf3>
    1358:	e0c00115 	stw	r3,4(fp)
    135c:	e0800015 	stw	r2,0(fp)
    1360:	003f3a06 	br	104c <__ieee754_rem_pio2+0x3bc>
    1364:	00869834 	movhi	r2,6752
    1368:	00cf7474 	movhi	r3,15825
    136c:	18ed1844 	addi	r3,r3,-19359
    1370:	9009883a 	mov	r4,r18
    1374:	980b883a 	mov	r5,r19
    1378:	180f883a 	mov	r7,r3
    137c:	100d883a 	mov	r6,r2
    1380:	00038480 	call	3848 <__adddf3>
    1384:	048b80f4 	movhi	r18,11779
    1388:	949c1cc4 	addi	r18,r18,28787
    138c:	04cee8f4 	movhi	r19,15267
    1390:	9cc66284 	addi	r19,r19,6538
    1394:	1009883a 	mov	r4,r2
    1398:	180b883a 	mov	r5,r3
    139c:	900d883a 	mov	r6,r18
    13a0:	980f883a 	mov	r7,r19
    13a4:	1021883a 	mov	r16,r2
    13a8:	1823883a 	mov	r17,r3
    13ac:	00038480 	call	3848 <__adddf3>
    13b0:	100d883a 	mov	r6,r2
    13b4:	8009883a 	mov	r4,r16
    13b8:	880b883a 	mov	r5,r17
    13bc:	180f883a 	mov	r7,r3
    13c0:	e0800015 	stw	r2,0(fp)
    13c4:	e0c00115 	stw	r3,4(fp)
    13c8:	00037c80 	call	37c8 <__subdf3>
    13cc:	180b883a 	mov	r5,r3
    13d0:	1009883a 	mov	r4,r2
    13d4:	900d883a 	mov	r6,r18
    13d8:	980f883a 	mov	r7,r19
    13dc:	00038480 	call	3848 <__adddf3>
    13e0:	180b883a 	mov	r5,r3
    13e4:	1009883a 	mov	r4,r2
    13e8:	00ffffc4 	movi	r3,-1
    13ec:	d8c00b15 	stw	r3,44(sp)
    13f0:	e1400315 	stw	r5,12(fp)
    13f4:	e1000215 	stw	r4,8(fp)
    13f8:	003e3e06 	br	cf4 <__ieee754_rem_pio2+0x64>
    13fc:	d9000c17 	ldw	r4,48(sp)
    1400:	d9400d17 	ldw	r5,52(sp)
    1404:	018b8034 	movhi	r6,11776
    1408:	b80f883a 	mov	r7,r23
    140c:	00038bc0 	call	38bc <__muldf3>
    1410:	d9000817 	ldw	r4,32(sp)
    1414:	d9401217 	ldw	r5,72(sp)
    1418:	100d883a 	mov	r6,r2
    141c:	180f883a 	mov	r7,r3
    1420:	1025883a 	mov	r18,r2
    1424:	1827883a 	mov	r19,r3
    1428:	00037c80 	call	37c8 <__subdf3>
    142c:	d9400d17 	ldw	r5,52(sp)
    1430:	d9000c17 	ldw	r4,48(sp)
    1434:	02094834 	movhi	r8,9504
    1438:	42127044 	addi	r8,r8,18881
    143c:	024e5f34 	movhi	r9,14716
    1440:	4a60e684 	addi	r9,r9,-31846
    1444:	480f883a 	mov	r7,r9
    1448:	400d883a 	mov	r6,r8
    144c:	182b883a 	mov	r21,r3
    1450:	d8800e15 	stw	r2,56(sp)
    1454:	00038bc0 	call	38bc <__muldf3>
    1458:	d9000817 	ldw	r4,32(sp)
    145c:	d9401217 	ldw	r5,72(sp)
    1460:	d9800e17 	ldw	r6,56(sp)
    1464:	a80f883a 	mov	r7,r21
    1468:	1021883a 	mov	r16,r2
    146c:	1823883a 	mov	r17,r3
    1470:	dd400f15 	stw	r21,60(sp)
    1474:	00037c80 	call	37c8 <__subdf3>
    1478:	180b883a 	mov	r5,r3
    147c:	900d883a 	mov	r6,r18
    1480:	980f883a 	mov	r7,r19
    1484:	1009883a 	mov	r4,r2
    1488:	00037c80 	call	37c8 <__subdf3>
    148c:	180f883a 	mov	r7,r3
    1490:	880b883a 	mov	r5,r17
    1494:	8009883a 	mov	r4,r16
    1498:	100d883a 	mov	r6,r2
    149c:	00037c80 	call	37c8 <__subdf3>
    14a0:	d9000e17 	ldw	r4,56(sp)
    14a4:	1021883a 	mov	r16,r2
    14a8:	1823883a 	mov	r17,r3
    14ac:	a80b883a 	mov	r5,r21
    14b0:	180f883a 	mov	r7,r3
    14b4:	003fa606 	br	1350 <__ieee754_rem_pio2+0x6c0>

000014b8 <__kernel_cos>:
    14b8:	defff104 	addi	sp,sp,-60
    14bc:	00a00034 	movhi	r2,32768
    14c0:	10bfffc4 	addi	r2,r2,-1
    14c4:	dd800c15 	stw	r22,48(sp)
    14c8:	116c703a 	and	r22,r2,r5
    14cc:	0005883a 	mov	r2,zero
    14d0:	dd000a15 	stw	r20,40(sp)
    14d4:	d8800215 	stw	r2,8(sp)
    14d8:	2029883a 	mov	r20,r4
    14dc:	008f9034 	movhi	r2,15936
    14e0:	10bfffc4 	addi	r2,r2,-1
    14e4:	0009883a 	mov	r4,zero
    14e8:	dd400b15 	stw	r21,44(sp)
    14ec:	dfc00e15 	stw	ra,56(sp)
    14f0:	ddc00d15 	stw	r23,52(sp)
    14f4:	dcc00915 	stw	r19,36(sp)
    14f8:	dc800815 	stw	r18,32(sp)
    14fc:	dc400715 	stw	r17,28(sp)
    1500:	dc000615 	stw	r16,24(sp)
    1504:	282b883a 	mov	r21,r5
    1508:	d9800415 	stw	r6,16(sp)
    150c:	d9c00515 	stw	r7,20(sp)
    1510:	d9000315 	stw	r4,12(sp)
    1514:	15809216 	blt	r2,r22,1760 <__kernel_cos+0x2a8>
    1518:	a009883a 	mov	r4,r20
    151c:	0003f100 	call	3f10 <__fixdfsi>
    1520:	10011c26 	beq	r2,zero,1994 <__kernel_cos+0x4dc>
    1524:	a009883a 	mov	r4,r20
    1528:	a80b883a 	mov	r5,r21
    152c:	a00d883a 	mov	r6,r20
    1530:	a80f883a 	mov	r7,r21
    1534:	00038bc0 	call	38bc <__muldf3>
    1538:	1021883a 	mov	r16,r2
    153c:	1823883a 	mov	r17,r3
    1540:	1025883a 	mov	r18,r2
    1544:	1827883a 	mov	r19,r3
    1548:	00afa234 	movhi	r2,48776
    154c:	108e3504 	addi	r2,r2,14548
    1550:	00ef6a74 	movhi	r3,48553
    1554:	18feba44 	addi	r3,r3,-1303
    1558:	8009883a 	mov	r4,r16
    155c:	880b883a 	mov	r5,r17
    1560:	180f883a 	mov	r7,r3
    1564:	100d883a 	mov	r6,r2
    1568:	00038bc0 	call	38bc <__muldf3>
    156c:	022f6d74 	movhi	r8,48565
    1570:	422c7104 	addi	r8,r8,-20028
    1574:	024f88b4 	movhi	r9,15906
    1578:	4a7ba784 	addi	r9,r9,-4450
    157c:	480f883a 	mov	r7,r9
    1580:	400d883a 	mov	r6,r8
    1584:	180b883a 	mov	r5,r3
    1588:	1009883a 	mov	r4,r2
    158c:	00038480 	call	3848 <__adddf3>
    1590:	180f883a 	mov	r7,r3
    1594:	8009883a 	mov	r4,r16
    1598:	880b883a 	mov	r5,r17
    159c:	100d883a 	mov	r6,r2
    15a0:	00038bc0 	call	38bc <__muldf3>
    15a4:	02202734 	movhi	r8,32924
    15a8:	4214ab44 	addi	r8,r8,21165
    15ac:	024fa4b4 	movhi	r9,16018
    15b0:	4a5f93c4 	addi	r9,r9,32335
    15b4:	480f883a 	mov	r7,r9
    15b8:	400d883a 	mov	r6,r8
    15bc:	180b883a 	mov	r5,r3
    15c0:	1009883a 	mov	r4,r2
    15c4:	00037c80 	call	37c8 <__subdf3>
    15c8:	180f883a 	mov	r7,r3
    15cc:	8009883a 	mov	r4,r16
    15d0:	880b883a 	mov	r5,r17
    15d4:	100d883a 	mov	r6,r2
    15d8:	00038bc0 	call	38bc <__muldf3>
    15dc:	020672f4 	movhi	r8,6603
    15e0:	42056404 	addi	r8,r8,5520
    15e4:	024fbeb4 	movhi	r9,16122
    15e8:	4a406804 	addi	r9,r9,416
    15ec:	480f883a 	mov	r7,r9
    15f0:	400d883a 	mov	r6,r8
    15f4:	180b883a 	mov	r5,r3
    15f8:	1009883a 	mov	r4,r2
    15fc:	00038480 	call	3848 <__adddf3>
    1600:	180f883a 	mov	r7,r3
    1604:	8009883a 	mov	r4,r16
    1608:	880b883a 	mov	r5,r17
    160c:	100d883a 	mov	r6,r2
    1610:	00038bc0 	call	38bc <__muldf3>
    1614:	0205b074 	movhi	r8,5825
    1618:	42145dc4 	addi	r8,r8,20855
    161c:	024fd5f4 	movhi	r9,16215
    1620:	4a705b04 	addi	r9,r9,-16020
    1624:	480f883a 	mov	r7,r9
    1628:	400d883a 	mov	r6,r8
    162c:	180b883a 	mov	r5,r3
    1630:	1009883a 	mov	r4,r2
    1634:	00037c80 	call	37c8 <__subdf3>
    1638:	180f883a 	mov	r7,r3
    163c:	8009883a 	mov	r4,r16
    1640:	880b883a 	mov	r5,r17
    1644:	100d883a 	mov	r6,r2
    1648:	00038bc0 	call	38bc <__muldf3>
    164c:	02155574 	movhi	r8,21845
    1650:	42155304 	addi	r8,r8,21836
    1654:	024fe974 	movhi	r9,16293
    1658:	4a555544 	addi	r9,r9,21845
    165c:	480f883a 	mov	r7,r9
    1660:	400d883a 	mov	r6,r8
    1664:	180b883a 	mov	r5,r3
    1668:	1009883a 	mov	r4,r2
    166c:	00038480 	call	3848 <__adddf3>
    1670:	180f883a 	mov	r7,r3
    1674:	880b883a 	mov	r5,r17
    1678:	8009883a 	mov	r4,r16
    167c:	100d883a 	mov	r6,r2
    1680:	00038bc0 	call	38bc <__muldf3>
    1684:	1021883a 	mov	r16,r2
    1688:	1823883a 	mov	r17,r3
    168c:	0005883a 	mov	r2,zero
    1690:	00cff834 	movhi	r3,16352
    1694:	9009883a 	mov	r4,r18
    1698:	980b883a 	mov	r5,r19
    169c:	180f883a 	mov	r7,r3
    16a0:	100d883a 	mov	r6,r2
    16a4:	00038bc0 	call	38bc <__muldf3>
    16a8:	980b883a 	mov	r5,r19
    16ac:	880f883a 	mov	r7,r17
    16b0:	9009883a 	mov	r4,r18
    16b4:	800d883a 	mov	r6,r16
    16b8:	1025883a 	mov	r18,r2
    16bc:	1827883a 	mov	r19,r3
    16c0:	00038bc0 	call	38bc <__muldf3>
    16c4:	d9c00517 	ldw	r7,20(sp)
    16c8:	d9800417 	ldw	r6,16(sp)
    16cc:	a80b883a 	mov	r5,r21
    16d0:	a009883a 	mov	r4,r20
    16d4:	1021883a 	mov	r16,r2
    16d8:	1823883a 	mov	r17,r3
    16dc:	00038bc0 	call	38bc <__muldf3>
    16e0:	180f883a 	mov	r7,r3
    16e4:	880b883a 	mov	r5,r17
    16e8:	8009883a 	mov	r4,r16
    16ec:	100d883a 	mov	r6,r2
    16f0:	00037c80 	call	37c8 <__subdf3>
    16f4:	180f883a 	mov	r7,r3
    16f8:	980b883a 	mov	r5,r19
    16fc:	9009883a 	mov	r4,r18
    1700:	100d883a 	mov	r6,r2
    1704:	00037c80 	call	37c8 <__subdf3>
    1708:	0011883a 	mov	r8,zero
    170c:	024ffc34 	movhi	r9,16368
    1710:	480b883a 	mov	r5,r9
    1714:	180f883a 	mov	r7,r3
    1718:	4009883a 	mov	r4,r8
    171c:	100d883a 	mov	r6,r2
    1720:	00037c80 	call	37c8 <__subdf3>
    1724:	100d883a 	mov	r6,r2
    1728:	180f883a 	mov	r7,r3
    172c:	3005883a 	mov	r2,r6
    1730:	3807883a 	mov	r3,r7
    1734:	dfc00e17 	ldw	ra,56(sp)
    1738:	ddc00d17 	ldw	r23,52(sp)
    173c:	dd800c17 	ldw	r22,48(sp)
    1740:	dd400b17 	ldw	r21,44(sp)
    1744:	dd000a17 	ldw	r20,40(sp)
    1748:	dcc00917 	ldw	r19,36(sp)
    174c:	dc800817 	ldw	r18,32(sp)
    1750:	dc400717 	ldw	r17,28(sp)
    1754:	dc000617 	ldw	r16,24(sp)
    1758:	dec00f04 	addi	sp,sp,60
    175c:	f800283a 	ret
    1760:	280f883a 	mov	r7,r5
    1764:	a009883a 	mov	r4,r20
    1768:	a00d883a 	mov	r6,r20
    176c:	00038bc0 	call	38bc <__muldf3>
    1770:	1021883a 	mov	r16,r2
    1774:	1823883a 	mov	r17,r3
    1778:	1025883a 	mov	r18,r2
    177c:	1827883a 	mov	r19,r3
    1780:	00afa234 	movhi	r2,48776
    1784:	108e3504 	addi	r2,r2,14548
    1788:	00ef6a74 	movhi	r3,48553
    178c:	18feba44 	addi	r3,r3,-1303
    1790:	8009883a 	mov	r4,r16
    1794:	880b883a 	mov	r5,r17
    1798:	180f883a 	mov	r7,r3
    179c:	100d883a 	mov	r6,r2
    17a0:	00038bc0 	call	38bc <__muldf3>
    17a4:	022f6d74 	movhi	r8,48565
    17a8:	422c7104 	addi	r8,r8,-20028
    17ac:	024f88b4 	movhi	r9,15906
    17b0:	4a7ba784 	addi	r9,r9,-4450
    17b4:	480f883a 	mov	r7,r9
    17b8:	400d883a 	mov	r6,r8
    17bc:	180b883a 	mov	r5,r3
    17c0:	1009883a 	mov	r4,r2
    17c4:	00038480 	call	3848 <__adddf3>
    17c8:	180f883a 	mov	r7,r3
    17cc:	8009883a 	mov	r4,r16
    17d0:	880b883a 	mov	r5,r17
    17d4:	100d883a 	mov	r6,r2
    17d8:	00038bc0 	call	38bc <__muldf3>
    17dc:	02202734 	movhi	r8,32924
    17e0:	4214ab44 	addi	r8,r8,21165
    17e4:	024fa4b4 	movhi	r9,16018
    17e8:	4a5f93c4 	addi	r9,r9,32335
    17ec:	480f883a 	mov	r7,r9
    17f0:	400d883a 	mov	r6,r8
    17f4:	180b883a 	mov	r5,r3
    17f8:	1009883a 	mov	r4,r2
    17fc:	00037c80 	call	37c8 <__subdf3>
    1800:	180f883a 	mov	r7,r3
    1804:	8009883a 	mov	r4,r16
    1808:	880b883a 	mov	r5,r17
    180c:	100d883a 	mov	r6,r2
    1810:	00038bc0 	call	38bc <__muldf3>
    1814:	020672f4 	movhi	r8,6603
    1818:	42056404 	addi	r8,r8,5520
    181c:	024fbeb4 	movhi	r9,16122
    1820:	4a406804 	addi	r9,r9,416
    1824:	480f883a 	mov	r7,r9
    1828:	400d883a 	mov	r6,r8
    182c:	180b883a 	mov	r5,r3
    1830:	1009883a 	mov	r4,r2
    1834:	00038480 	call	3848 <__adddf3>
    1838:	180f883a 	mov	r7,r3
    183c:	8009883a 	mov	r4,r16
    1840:	880b883a 	mov	r5,r17
    1844:	100d883a 	mov	r6,r2
    1848:	00038bc0 	call	38bc <__muldf3>
    184c:	0205b074 	movhi	r8,5825
    1850:	42145dc4 	addi	r8,r8,20855
    1854:	024fd5f4 	movhi	r9,16215
    1858:	4a705b04 	addi	r9,r9,-16020
    185c:	480f883a 	mov	r7,r9
    1860:	400d883a 	mov	r6,r8
    1864:	180b883a 	mov	r5,r3
    1868:	1009883a 	mov	r4,r2
    186c:	00037c80 	call	37c8 <__subdf3>
    1870:	180f883a 	mov	r7,r3
    1874:	8009883a 	mov	r4,r16
    1878:	880b883a 	mov	r5,r17
    187c:	100d883a 	mov	r6,r2
    1880:	00038bc0 	call	38bc <__muldf3>
    1884:	02155574 	movhi	r8,21845
    1888:	42155304 	addi	r8,r8,21836
    188c:	024fe974 	movhi	r9,16293
    1890:	4a555544 	addi	r9,r9,21845
    1894:	480f883a 	mov	r7,r9
    1898:	400d883a 	mov	r6,r8
    189c:	180b883a 	mov	r5,r3
    18a0:	1009883a 	mov	r4,r2
    18a4:	00038480 	call	3848 <__adddf3>
    18a8:	180f883a 	mov	r7,r3
    18ac:	880b883a 	mov	r5,r17
    18b0:	8009883a 	mov	r4,r16
    18b4:	100d883a 	mov	r6,r2
    18b8:	00038bc0 	call	38bc <__muldf3>
    18bc:	1021883a 	mov	r16,r2
    18c0:	008ff4f4 	movhi	r2,16339
    18c4:	108ccc84 	addi	r2,r2,13106
    18c8:	1823883a 	mov	r17,r3
    18cc:	15bf6f0e 	bge	r2,r22,168c <__kernel_cos+0x1d4>
    18d0:	008ffa74 	movhi	r2,16361
    18d4:	1580320e 	bge	r2,r22,19a0 <__kernel_cos+0x4e8>
    18d8:	0005883a 	mov	r2,zero
    18dc:	010ff9f4 	movhi	r4,16359
    18e0:	002d883a 	mov	r22,zero
    18e4:	d8800015 	stw	r2,0(sp)
    18e8:	05cff4b4 	movhi	r23,16338
    18ec:	d9000115 	stw	r4,4(sp)
    18f0:	0005883a 	mov	r2,zero
    18f4:	00cff834 	movhi	r3,16352
    18f8:	9009883a 	mov	r4,r18
    18fc:	980b883a 	mov	r5,r19
    1900:	180f883a 	mov	r7,r3
    1904:	100d883a 	mov	r6,r2
    1908:	00038bc0 	call	38bc <__muldf3>
    190c:	180b883a 	mov	r5,r3
    1910:	b80f883a 	mov	r7,r23
    1914:	1009883a 	mov	r4,r2
    1918:	b00d883a 	mov	r6,r22
    191c:	00037c80 	call	37c8 <__subdf3>
    1920:	980b883a 	mov	r5,r19
    1924:	880f883a 	mov	r7,r17
    1928:	9009883a 	mov	r4,r18
    192c:	800d883a 	mov	r6,r16
    1930:	1025883a 	mov	r18,r2
    1934:	1827883a 	mov	r19,r3
    1938:	00038bc0 	call	38bc <__muldf3>
    193c:	d9c00517 	ldw	r7,20(sp)
    1940:	d9800417 	ldw	r6,16(sp)
    1944:	a80b883a 	mov	r5,r21
    1948:	a009883a 	mov	r4,r20
    194c:	1021883a 	mov	r16,r2
    1950:	1823883a 	mov	r17,r3
    1954:	00038bc0 	call	38bc <__muldf3>
    1958:	180f883a 	mov	r7,r3
    195c:	880b883a 	mov	r5,r17
    1960:	8009883a 	mov	r4,r16
    1964:	100d883a 	mov	r6,r2
    1968:	00037c80 	call	37c8 <__subdf3>
    196c:	180f883a 	mov	r7,r3
    1970:	980b883a 	mov	r5,r19
    1974:	9009883a 	mov	r4,r18
    1978:	100d883a 	mov	r6,r2
    197c:	00037c80 	call	37c8 <__subdf3>
    1980:	d9400117 	ldw	r5,4(sp)
    1984:	d9000017 	ldw	r4,0(sp)
    1988:	180f883a 	mov	r7,r3
    198c:	100d883a 	mov	r6,r2
    1990:	003f6306 	br	1720 <__kernel_cos+0x268>
    1994:	000d883a 	mov	r6,zero
    1998:	01cffc34 	movhi	r7,16368
    199c:	003f6306 	br	172c <__kernel_cos+0x274>
    19a0:	00bff834 	movhi	r2,65504
    19a4:	b0ad883a 	add	r22,r22,r2
    19a8:	dd800315 	stw	r22,12(sp)
    19ac:	d9000317 	ldw	r4,12(sp)
    19b0:	0005883a 	mov	r2,zero
    19b4:	00cffc34 	movhi	r3,16368
    19b8:	002d883a 	mov	r22,zero
    19bc:	200f883a 	mov	r7,r4
    19c0:	202f883a 	mov	r23,r4
    19c4:	180b883a 	mov	r5,r3
    19c8:	1009883a 	mov	r4,r2
    19cc:	b00d883a 	mov	r6,r22
    19d0:	d8800215 	stw	r2,8(sp)
    19d4:	00037c80 	call	37c8 <__subdf3>
    19d8:	d8800015 	stw	r2,0(sp)
    19dc:	d8c00115 	stw	r3,4(sp)
    19e0:	003fc306 	br	18f0 <__kernel_cos+0x438>

000019e4 <__kernel_rem_pio2>:
    19e4:	deff5304 	addi	sp,sp,-692
    19e8:	d880ad17 	ldw	r2,692(sp)
    19ec:	d9009615 	stw	r4,600(sp)
    19f0:	d9409715 	stw	r5,604(sp)
    19f4:	1087883a 	add	r3,r2,r2
    19f8:	18c7883a 	add	r3,r3,r3
    19fc:	00800074 	movhi	r2,1
    1a00:	10a73b04 	addi	r2,r2,-25364
    1a04:	1887883a 	add	r3,r3,r2
    1a08:	18c00017 	ldw	r3,0(r3)
    1a0c:	313fff44 	addi	r4,r6,-3
    1a10:	01400604 	movi	r5,24
    1a14:	df00ab15 	stw	fp,684(sp)
    1a18:	dc00a315 	stw	r16,652(sp)
    1a1c:	d8c09515 	stw	r3,596(sp)
    1a20:	dfc0ac15 	stw	ra,688(sp)
    1a24:	ddc0aa15 	stw	r23,680(sp)
    1a28:	dd80a915 	stw	r22,676(sp)
    1a2c:	dd40a815 	stw	r21,672(sp)
    1a30:	dd00a715 	stw	r20,668(sp)
    1a34:	dcc0a615 	stw	r19,664(sp)
    1a38:	dc80a515 	stw	r18,660(sp)
    1a3c:	dc40a415 	stw	r17,656(sp)
    1a40:	3021883a 	mov	r16,r6
    1a44:	d9c09815 	stw	r7,608(sp)
    1a48:	00041100 	call	4110 <__divsi3>
    1a4c:	d8c09817 	ldw	r3,608(sp)
    1a50:	d8808c15 	stw	r2,560(sp)
    1a54:	1f3fffc4 	addi	fp,r3,-1
    1a58:	10031816 	blt	r2,zero,26bc <__kernel_rem_pio2+0xcd8>
    1a5c:	d9008c17 	ldw	r4,560(sp)
    1a60:	d9409517 	ldw	r5,596(sp)
    1a64:	20bffa24 	muli	r2,r4,-24
    1a68:	2f07883a 	add	r3,r5,fp
    1a6c:	8085883a 	add	r2,r16,r2
    1a70:	10bffa04 	addi	r2,r2,-24
    1a74:	d8809315 	stw	r2,588(sp)
    1a78:	18001516 	blt	r3,zero,1ad0 <__kernel_rem_pio2+0xec>
    1a7c:	2721c83a 	sub	r16,r4,fp
    1a80:	d980ae17 	ldw	r6,696(sp)
    1a84:	8405883a 	add	r2,r16,r16
    1a88:	1085883a 	add	r2,r2,r2
    1a8c:	30a3883a 	add	r17,r6,r2
    1a90:	80e7883a 	add	r19,r16,r3
    1a94:	dc801404 	addi	r18,sp,80
    1a98:	00000106 	br	1aa0 <__kernel_rem_pio2+0xbc>
    1a9c:	84000044 	addi	r16,r16,1
    1aa0:	0009883a 	mov	r4,zero
    1aa4:	000b883a 	mov	r5,zero
    1aa8:	80000416 	blt	r16,zero,1abc <__kernel_rem_pio2+0xd8>
    1aac:	89000017 	ldw	r4,0(r17)
    1ab0:	0003e180 	call	3e18 <__floatsidf>
    1ab4:	1009883a 	mov	r4,r2
    1ab8:	180b883a 	mov	r5,r3
    1abc:	91400115 	stw	r5,4(r18)
    1ac0:	91000015 	stw	r4,0(r18)
    1ac4:	8c400104 	addi	r17,r17,4
    1ac8:	94800204 	addi	r18,r18,8
    1acc:	84fff31e 	bne	r16,r19,1a9c <__kernel_rem_pio2+0xb8>
    1ad0:	d9c09517 	ldw	r7,596(sp)
    1ad4:	38002416 	blt	r7,zero,1b68 <__kernel_rem_pio2+0x184>
    1ad8:	da809817 	ldw	r10,608(sp)
    1adc:	e029883a 	mov	r20,fp
    1ae0:	dd406404 	addi	r21,sp,400
    1ae4:	3aaf883a 	add	r23,r7,r10
    1ae8:	e02c403a 	cmpge	r22,fp,zero
    1aec:	b0023e26 	beq	r22,zero,23e8 <__kernel_rem_pio2+0xa04>
    1af0:	dcc09617 	ldw	r19,600(sp)
    1af4:	0021883a 	mov	r16,zero
    1af8:	0025883a 	mov	r18,zero
    1afc:	0023883a 	mov	r17,zero
    1b00:	a489c83a 	sub	r4,r20,r18
    1b04:	200890fa 	slli	r4,r4,3
    1b08:	99800017 	ldw	r6,0(r19)
    1b0c:	99c00117 	ldw	r7,4(r19)
    1b10:	26c9883a 	add	r4,r4,sp
    1b14:	20c01517 	ldw	r3,84(r4)
    1b18:	20801417 	ldw	r2,80(r4)
    1b1c:	94800044 	addi	r18,r18,1
    1b20:	180b883a 	mov	r5,r3
    1b24:	1009883a 	mov	r4,r2
    1b28:	00038bc0 	call	38bc <__muldf3>
    1b2c:	180f883a 	mov	r7,r3
    1b30:	880b883a 	mov	r5,r17
    1b34:	8009883a 	mov	r4,r16
    1b38:	100d883a 	mov	r6,r2
    1b3c:	00038480 	call	3848 <__adddf3>
    1b40:	1021883a 	mov	r16,r2
    1b44:	d8809817 	ldw	r2,608(sp)
    1b48:	9cc00204 	addi	r19,r19,8
    1b4c:	1823883a 	mov	r17,r3
    1b50:	14bfeb1e 	bne	r2,r18,1b00 <__kernel_rem_pio2+0x11c>
    1b54:	a5000044 	addi	r20,r20,1
    1b58:	ac400115 	stw	r17,4(r21)
    1b5c:	ac000015 	stw	r16,0(r21)
    1b60:	ad400204 	addi	r21,r21,8
    1b64:	a5ffe11e 	bne	r20,r23,1aec <__kernel_rem_pio2+0x108>
    1b68:	d8c09517 	ldw	r3,596(sp)
    1b6c:	d9409317 	ldw	r5,588(sp)
    1b70:	e038403a 	cmpge	fp,fp,zero
    1b74:	d8c08d15 	stw	r3,564(sp)
    1b78:	d9008d17 	ldw	r4,564(sp)
    1b7c:	18c5883a 	add	r2,r3,r3
    1b80:	10c7883a 	add	r3,r2,r3
    1b84:	1907883a 	add	r3,r3,r4
    1b88:	1085883a 	add	r2,r2,r2
    1b8c:	16c5883a 	add	r2,r2,sp
    1b90:	1ec7883a 	add	r3,r3,sp
    1b94:	29400050 	cmplti	r5,r5,1
    1b98:	df00a215 	stw	fp,648(sp)
    1b9c:	d8809915 	stw	r2,612(sp)
    1ba0:	d8c0a115 	stw	r3,644(sp)
    1ba4:	d940a015 	stw	r5,640(sp)
    1ba8:	d9808d17 	ldw	r6,564(sp)
    1bac:	300490fa 	slli	r2,r6,3
    1bb0:	16c5883a 	add	r2,r2,sp
    1bb4:	15006417 	ldw	r20,400(r2)
    1bb8:	15406517 	ldw	r21,404(r2)
    1bbc:	01802e0e 	bge	zero,r6,1c78 <__kernel_rem_pio2+0x294>
    1bc0:	102d883a 	mov	r22,r2
    1bc4:	302f883a 	mov	r23,r6
    1bc8:	d839883a 	mov	fp,sp
    1bcc:	0005883a 	mov	r2,zero
    1bd0:	00cf9c34 	movhi	r3,15984
    1bd4:	180f883a 	mov	r7,r3
    1bd8:	100d883a 	mov	r6,r2
    1bdc:	a009883a 	mov	r4,r20
    1be0:	a80b883a 	mov	r5,r21
    1be4:	00038bc0 	call	38bc <__muldf3>
    1be8:	180b883a 	mov	r5,r3
    1bec:	1009883a 	mov	r4,r2
    1bf0:	0003f100 	call	3f10 <__fixdfsi>
    1bf4:	1009883a 	mov	r4,r2
    1bf8:	0003e180 	call	3e18 <__floatsidf>
    1bfc:	1021883a 	mov	r16,r2
    1c00:	1823883a 	mov	r17,r3
    1c04:	0005883a 	mov	r2,zero
    1c08:	00f05c34 	movhi	r3,49520
    1c0c:	180f883a 	mov	r7,r3
    1c10:	8009883a 	mov	r4,r16
    1c14:	880b883a 	mov	r5,r17
    1c18:	100d883a 	mov	r6,r2
    1c1c:	00038bc0 	call	38bc <__muldf3>
    1c20:	180b883a 	mov	r5,r3
    1c24:	a80f883a 	mov	r7,r21
    1c28:	a00d883a 	mov	r6,r20
    1c2c:	1009883a 	mov	r4,r2
    1c30:	00038480 	call	3848 <__adddf3>
    1c34:	180b883a 	mov	r5,r3
    1c38:	1009883a 	mov	r4,r2
    1c3c:	0003f100 	call	3f10 <__fixdfsi>
    1c40:	e0800015 	stw	r2,0(fp)
    1c44:	b5bffe04 	addi	r22,r22,-8
    1c48:	b0806417 	ldw	r2,400(r22)
    1c4c:	b0c06517 	ldw	r3,404(r22)
    1c50:	8009883a 	mov	r4,r16
    1c54:	880b883a 	mov	r5,r17
    1c58:	180f883a 	mov	r7,r3
    1c5c:	100d883a 	mov	r6,r2
    1c60:	00038480 	call	3848 <__adddf3>
    1c64:	bdffffc4 	addi	r23,r23,-1
    1c68:	e7000104 	addi	fp,fp,4
    1c6c:	1029883a 	mov	r20,r2
    1c70:	182b883a 	mov	r21,r3
    1c74:	b83fd51e 	bne	r23,zero,1bcc <__kernel_rem_pio2+0x1e8>
    1c78:	d9809317 	ldw	r6,588(sp)
    1c7c:	a80b883a 	mov	r5,r21
    1c80:	a009883a 	mov	r4,r20
    1c84:	0002db40 	call	2db4 <scalbn>
    1c88:	0009883a 	mov	r4,zero
    1c8c:	014ff034 	movhi	r5,16320
    1c90:	280f883a 	mov	r7,r5
    1c94:	200d883a 	mov	r6,r4
    1c98:	180b883a 	mov	r5,r3
    1c9c:	1009883a 	mov	r4,r2
    1ca0:	1021883a 	mov	r16,r2
    1ca4:	1823883a 	mov	r17,r3
    1ca8:	00038bc0 	call	38bc <__muldf3>
    1cac:	180b883a 	mov	r5,r3
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	0002b900 	call	2b90 <floor>
    1cb8:	0011883a 	mov	r8,zero
    1cbc:	02700834 	movhi	r9,49184
    1cc0:	480f883a 	mov	r7,r9
    1cc4:	400d883a 	mov	r6,r8
    1cc8:	180b883a 	mov	r5,r3
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	00038bc0 	call	38bc <__muldf3>
    1cd4:	180f883a 	mov	r7,r3
    1cd8:	100d883a 	mov	r6,r2
    1cdc:	880b883a 	mov	r5,r17
    1ce0:	8009883a 	mov	r4,r16
    1ce4:	00038480 	call	3848 <__adddf3>
    1ce8:	180b883a 	mov	r5,r3
    1cec:	1009883a 	mov	r4,r2
    1cf0:	1823883a 	mov	r17,r3
    1cf4:	1021883a 	mov	r16,r2
    1cf8:	0003f100 	call	3f10 <__fixdfsi>
    1cfc:	1009883a 	mov	r4,r2
    1d00:	d8809415 	stw	r2,592(sp)
    1d04:	0003e180 	call	3e18 <__floatsidf>
    1d08:	880b883a 	mov	r5,r17
    1d0c:	8009883a 	mov	r4,r16
    1d10:	180f883a 	mov	r7,r3
    1d14:	100d883a 	mov	r6,r2
    1d18:	00037c80 	call	37c8 <__subdf3>
    1d1c:	d9c0a017 	ldw	r7,640(sp)
    1d20:	180d883a 	mov	r6,r3
    1d24:	1021883a 	mov	r16,r2
    1d28:	1823883a 	mov	r17,r3
    1d2c:	38017d1e 	bne	r7,zero,2324 <__kernel_rem_pio2+0x940>
    1d30:	da808d17 	ldw	r10,564(sp)
    1d34:	d9009317 	ldw	r4,588(sp)
    1d38:	00c00604 	movi	r3,24
    1d3c:	50bfffc4 	addi	r2,r10,-1
    1d40:	1085883a 	add	r2,r2,r2
    1d44:	1085883a 	add	r2,r2,r2
    1d48:	16c5883a 	add	r2,r2,sp
    1d4c:	11400017 	ldw	r5,0(r2)
    1d50:	1907c83a 	sub	r3,r3,r4
    1d54:	d9c09317 	ldw	r7,588(sp)
    1d58:	28cdd83a 	sra	r6,r5,r3
    1d5c:	010005c4 	movi	r4,23
    1d60:	da809417 	ldw	r10,592(sp)
    1d64:	30c6983a 	sll	r3,r6,r3
    1d68:	21c9c83a 	sub	r4,r4,r7
    1d6c:	5195883a 	add	r10,r10,r6
    1d70:	28cbc83a 	sub	r5,r5,r3
    1d74:	2909d83a 	sra	r4,r5,r4
    1d78:	da809415 	stw	r10,592(sp)
    1d7c:	11400015 	stw	r5,0(r2)
    1d80:	d9009215 	stw	r4,584(sp)
    1d84:	d9409217 	ldw	r5,584(sp)
    1d88:	0140270e 	bge	zero,r5,1e28 <__kernel_rem_pio2+0x444>
    1d8c:	d9809417 	ldw	r6,592(sp)
    1d90:	d9c08d17 	ldw	r7,564(sp)
    1d94:	31800044 	addi	r6,r6,1
    1d98:	d9809415 	stw	r6,592(sp)
    1d9c:	01c1a50e 	bge	zero,r7,2434 <__kernel_rem_pio2+0xa50>
    1da0:	002d883a 	mov	r22,zero
    1da4:	000b883a 	mov	r5,zero
    1da8:	d809883a 	mov	r4,sp
    1dac:	01c04034 	movhi	r7,256
    1db0:	01804034 	movhi	r6,256
    1db4:	31bfffc4 	addi	r6,r6,-1
    1db8:	00000806 	br	1ddc <__kernel_rem_pio2+0x3f8>
    1dbc:	38c5c83a 	sub	r2,r7,r3
    1dc0:	18000226 	beq	r3,zero,1dcc <__kernel_rem_pio2+0x3e8>
    1dc4:	05800044 	movi	r22,1
    1dc8:	20800015 	stw	r2,0(r4)
    1dcc:	da808d17 	ldw	r10,564(sp)
    1dd0:	29400044 	addi	r5,r5,1
    1dd4:	21000104 	addi	r4,r4,4
    1dd8:	51400926 	beq	r10,r5,1e00 <__kernel_rem_pio2+0x41c>
    1ddc:	b004c03a 	cmpne	r2,r22,zero
    1de0:	20c00017 	ldw	r3,0(r4)
    1de4:	103ff526 	beq	r2,zero,1dbc <__kernel_rem_pio2+0x3d8>
    1de8:	da808d17 	ldw	r10,564(sp)
    1dec:	30c5c83a 	sub	r2,r6,r3
    1df0:	29400044 	addi	r5,r5,1
    1df4:	20800015 	stw	r2,0(r4)
    1df8:	21000104 	addi	r4,r4,4
    1dfc:	517ff71e 	bne	r10,r5,1ddc <__kernel_rem_pio2+0x3f8>
    1e00:	d880a017 	ldw	r2,640(sp)
    1e04:	1000051e 	bne	r2,zero,1e1c <__kernel_rem_pio2+0x438>
    1e08:	d8c09317 	ldw	r3,588(sp)
    1e0c:	00800044 	movi	r2,1
    1e10:	18814e26 	beq	r3,r2,234c <__kernel_rem_pio2+0x968>
    1e14:	00800084 	movi	r2,2
    1e18:	18815826 	beq	r3,r2,237c <__kernel_rem_pio2+0x998>
    1e1c:	d9c09217 	ldw	r7,584(sp)
    1e20:	00800084 	movi	r2,2
    1e24:	38806926 	beq	r7,r2,1fcc <__kernel_rem_pio2+0x5e8>
    1e28:	000d883a 	mov	r6,zero
    1e2c:	000f883a 	mov	r7,zero
    1e30:	8009883a 	mov	r4,r16
    1e34:	880b883a 	mov	r5,r17
    1e38:	0003c800 	call	3c80 <__eqdf2>
    1e3c:	1000811e 	bne	r2,zero,2044 <__kernel_rem_pio2+0x660>
    1e40:	da808d17 	ldw	r10,564(sp)
    1e44:	d8809517 	ldw	r2,596(sp)
    1e48:	51bfffc4 	addi	r6,r10,-1
    1e4c:	30800c16 	blt	r6,r2,1e80 <__kernel_rem_pio2+0x49c>
    1e50:	3185883a 	add	r2,r6,r6
    1e54:	1085883a 	add	r2,r2,r2
    1e58:	16c9883a 	add	r4,r2,sp
    1e5c:	3007883a 	mov	r3,r6
    1e60:	000b883a 	mov	r5,zero
    1e64:	20800017 	ldw	r2,0(r4)
    1e68:	d9c09517 	ldw	r7,596(sp)
    1e6c:	18ffffc4 	addi	r3,r3,-1
    1e70:	213fff04 	addi	r4,r4,-4
    1e74:	288ab03a 	or	r5,r5,r2
    1e78:	19fffa0e 	bge	r3,r7,1e64 <__kernel_rem_pio2+0x480>
    1e7c:	2800791e 	bne	r5,zero,2064 <__kernel_rem_pio2+0x680>
    1e80:	da809917 	ldw	r10,612(sp)
    1e84:	50bfff17 	ldw	r2,-4(r10)
    1e88:	1001511e 	bne	r2,zero,23d0 <__kernel_rem_pio2+0x9ec>
    1e8c:	d880a117 	ldw	r2,644(sp)
    1e90:	01000044 	movi	r4,1
    1e94:	10ffff04 	addi	r3,r2,-4
    1e98:	18ffff04 	addi	r3,r3,-4
    1e9c:	18800017 	ldw	r2,0(r3)
    1ea0:	21000044 	addi	r4,r4,1
    1ea4:	103ffc26 	beq	r2,zero,1e98 <__kernel_rem_pio2+0x4b4>
    1ea8:	d8c08d17 	ldw	r3,564(sp)
    1eac:	192f883a 	add	r23,r3,r4
    1eb0:	1f000044 	addi	fp,r3,1
    1eb4:	bf00020e 	bge	r23,fp,1ec0 <__kernel_rem_pio2+0x4dc>
    1eb8:	ddc08d15 	stw	r23,564(sp)
    1ebc:	003f3a06 	br	1ba8 <__kernel_rem_pio2+0x1c4>
    1ec0:	d9408c17 	ldw	r5,560(sp)
    1ec4:	d9009817 	ldw	r4,608(sp)
    1ec8:	da80ae17 	ldw	r10,696(sp)
    1ecc:	1945883a 	add	r2,r3,r5
    1ed0:	190f883a 	add	r7,r3,r4
    1ed4:	1085883a 	add	r2,r2,r2
    1ed8:	380a90fa 	slli	r5,r7,3
    1edc:	e00c90fa 	slli	r6,fp,3
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	5085883a 	add	r2,r10,r2
    1ee8:	d8c01404 	addi	r3,sp,80
    1eec:	d9006404 	addi	r4,sp,400
    1ef0:	10800104 	addi	r2,r2,4
    1ef4:	196b883a 	add	r21,r3,r5
    1ef8:	21a1883a 	add	r16,r4,r6
    1efc:	d8809115 	stw	r2,580(sp)
    1f00:	d9c09015 	stw	r7,576(sp)
    1f04:	d8809117 	ldw	r2,580(sp)
    1f08:	11000017 	ldw	r4,0(r2)
    1f0c:	0003e180 	call	3e18 <__floatsidf>
    1f10:	a8c00115 	stw	r3,4(r21)
    1f14:	d8c0a217 	ldw	r3,648(sp)
    1f18:	a8800015 	stw	r2,0(r21)
    1f1c:	18002826 	beq	r3,zero,1fc0 <__kernel_rem_pio2+0x5dc>
    1f20:	d9009017 	ldw	r4,576(sp)
    1f24:	dd009617 	ldw	r20,600(sp)
    1f28:	0023883a 	mov	r17,zero
    1f2c:	200490fa 	slli	r2,r4,3
    1f30:	002d883a 	mov	r22,zero
    1f34:	0025883a 	mov	r18,zero
    1f38:	16e7883a 	add	r19,r2,sp
    1f3c:	98801417 	ldw	r2,80(r19)
    1f40:	98c01517 	ldw	r3,84(r19)
    1f44:	a1800017 	ldw	r6,0(r20)
    1f48:	a1c00117 	ldw	r7,4(r20)
    1f4c:	180b883a 	mov	r5,r3
    1f50:	1009883a 	mov	r4,r2
    1f54:	00038bc0 	call	38bc <__muldf3>
    1f58:	180f883a 	mov	r7,r3
    1f5c:	900b883a 	mov	r5,r18
    1f60:	8809883a 	mov	r4,r17
    1f64:	100d883a 	mov	r6,r2
    1f68:	00038480 	call	3848 <__adddf3>
    1f6c:	d9409817 	ldw	r5,608(sp)
    1f70:	b5800044 	addi	r22,r22,1
    1f74:	9cfffe04 	addi	r19,r19,-8
    1f78:	1023883a 	mov	r17,r2
    1f7c:	1825883a 	mov	r18,r3
    1f80:	a5000204 	addi	r20,r20,8
    1f84:	2dbfed1e 	bne	r5,r22,1f3c <__kernel_rem_pio2+0x558>
    1f88:	d9809117 	ldw	r6,580(sp)
    1f8c:	d9c09017 	ldw	r7,576(sp)
    1f90:	e7000044 	addi	fp,fp,1
    1f94:	31800104 	addi	r6,r6,4
    1f98:	39c00044 	addi	r7,r7,1
    1f9c:	84800115 	stw	r18,4(r16)
    1fa0:	84400015 	stw	r17,0(r16)
    1fa4:	d9809115 	stw	r6,580(sp)
    1fa8:	ad400204 	addi	r21,r21,8
    1fac:	84000204 	addi	r16,r16,8
    1fb0:	d9c09015 	stw	r7,576(sp)
    1fb4:	bf3fd30e 	bge	r23,fp,1f04 <__kernel_rem_pio2+0x520>
    1fb8:	ddc08d15 	stw	r23,564(sp)
    1fbc:	003efa06 	br	1ba8 <__kernel_rem_pio2+0x1c4>
    1fc0:	0023883a 	mov	r17,zero
    1fc4:	0025883a 	mov	r18,zero
    1fc8:	003fef06 	br	1f88 <__kernel_rem_pio2+0x5a4>
    1fcc:	0029883a 	mov	r20,zero
    1fd0:	054ffc34 	movhi	r21,16368
    1fd4:	880f883a 	mov	r7,r17
    1fd8:	800d883a 	mov	r6,r16
    1fdc:	a009883a 	mov	r4,r20
    1fe0:	a80b883a 	mov	r5,r21
    1fe4:	00037c80 	call	37c8 <__subdf3>
    1fe8:	1025883a 	mov	r18,r2
    1fec:	b005003a 	cmpeq	r2,r22,zero
    1ff0:	1827883a 	mov	r19,r3
    1ff4:	9021883a 	mov	r16,r18
    1ff8:	1823883a 	mov	r17,r3
    1ffc:	103f8a1e 	bne	r2,zero,1e28 <__kernel_rem_pio2+0x444>
    2000:	d9809317 	ldw	r6,588(sp)
    2004:	0009883a 	mov	r4,zero
    2008:	a80b883a 	mov	r5,r21
    200c:	0002db40 	call	2db4 <scalbn>
    2010:	180f883a 	mov	r7,r3
    2014:	9009883a 	mov	r4,r18
    2018:	980b883a 	mov	r5,r19
    201c:	100d883a 	mov	r6,r2
    2020:	00037c80 	call	37c8 <__subdf3>
    2024:	1021883a 	mov	r16,r2
    2028:	1823883a 	mov	r17,r3
    202c:	000d883a 	mov	r6,zero
    2030:	000f883a 	mov	r7,zero
    2034:	8009883a 	mov	r4,r16
    2038:	880b883a 	mov	r5,r17
    203c:	0003c800 	call	3c80 <__eqdf2>
    2040:	103f7f26 	beq	r2,zero,1e40 <__kernel_rem_pio2+0x45c>
    2044:	000d883a 	mov	r6,zero
    2048:	000f883a 	mov	r7,zero
    204c:	8009883a 	mov	r4,r16
    2050:	880b883a 	mov	r5,r17
    2054:	0003c800 	call	3c80 <__eqdf2>
    2058:	10019a1e 	bne	r2,zero,26c4 <__kernel_rem_pio2+0xce0>
    205c:	da808d17 	ldw	r10,564(sp)
    2060:	51bfffc4 	addi	r6,r10,-1
    2064:	3185883a 	add	r2,r6,r6
    2068:	1085883a 	add	r2,r2,r2
    206c:	d9009317 	ldw	r4,588(sp)
    2070:	16c5883a 	add	r2,r2,sp
    2074:	10c00017 	ldw	r3,0(r2)
    2078:	213ffa04 	addi	r4,r4,-24
    207c:	d9009315 	stw	r4,588(sp)
    2080:	1801d41e 	bne	r3,zero,27d4 <__kernel_rem_pio2+0xdf0>
    2084:	d9808d15 	stw	r6,564(sp)
    2088:	1007883a 	mov	r3,r2
    208c:	d9408d17 	ldw	r5,564(sp)
    2090:	d9809317 	ldw	r6,588(sp)
    2094:	18ffff04 	addi	r3,r3,-4
    2098:	18800017 	ldw	r2,0(r3)
    209c:	297fffc4 	addi	r5,r5,-1
    20a0:	31bffa04 	addi	r6,r6,-24
    20a4:	d9408d15 	stw	r5,564(sp)
    20a8:	d9809315 	stw	r6,588(sp)
    20ac:	103ff726 	beq	r2,zero,208c <__kernel_rem_pio2+0x6a8>
    20b0:	d9809317 	ldw	r6,588(sp)
    20b4:	0005883a 	mov	r2,zero
    20b8:	00cffc34 	movhi	r3,16368
    20bc:	180b883a 	mov	r5,r3
    20c0:	1009883a 	mov	r4,r2
    20c4:	0002db40 	call	2db4 <scalbn>
    20c8:	d9808d17 	ldw	r6,564(sp)
    20cc:	1021883a 	mov	r16,r2
    20d0:	1823883a 	mov	r17,r3
    20d4:	30004616 	blt	r6,zero,21f0 <__kernel_rem_pio2+0x80c>
    20d8:	300690fa 	slli	r3,r6,3
    20dc:	3185883a 	add	r2,r6,r6
    20e0:	1085883a 	add	r2,r2,r2
    20e4:	16e9883a 	add	r20,r2,sp
    20e8:	1ee5883a 	add	r18,r3,sp
    20ec:	3027883a 	mov	r19,r6
    20f0:	057fffc4 	movi	r21,-1
    20f4:	a1000017 	ldw	r4,0(r20)
    20f8:	9cffffc4 	addi	r19,r19,-1
    20fc:	a53fff04 	addi	r20,r20,-4
    2100:	0003e180 	call	3e18 <__floatsidf>
    2104:	800d883a 	mov	r6,r16
    2108:	880f883a 	mov	r7,r17
    210c:	180b883a 	mov	r5,r3
    2110:	1009883a 	mov	r4,r2
    2114:	00038bc0 	call	38bc <__muldf3>
    2118:	0015883a 	mov	r10,zero
    211c:	02cf9c34 	movhi	r11,15984
    2120:	880b883a 	mov	r5,r17
    2124:	8009883a 	mov	r4,r16
    2128:	90c06515 	stw	r3,404(r18)
    212c:	90806415 	stw	r2,400(r18)
    2130:	580f883a 	mov	r7,r11
    2134:	500d883a 	mov	r6,r10
    2138:	00038bc0 	call	38bc <__muldf3>
    213c:	1021883a 	mov	r16,r2
    2140:	1823883a 	mov	r17,r3
    2144:	94bffe04 	addi	r18,r18,-8
    2148:	9d7fea1e 	bne	r19,r21,20f4 <__kernel_rem_pio2+0x710>
    214c:	d9c09517 	ldw	r7,596(sp)
    2150:	dd808d17 	ldw	r22,564(sp)
    2154:	002b883a 	mov	r21,zero
    2158:	382e403a 	cmpge	r23,r7,zero
    215c:	b800aa26 	beq	r23,zero,2408 <__kernel_rem_pio2+0xa24>
    2160:	a800a916 	blt	r21,zero,2408 <__kernel_rem_pio2+0xa24>
    2164:	b00690fa 	slli	r3,r22,3
    2168:	d8806404 	addi	r2,sp,400
    216c:	0021883a 	mov	r16,zero
    2170:	10e9883a 	add	r20,r2,r3
    2174:	0027883a 	mov	r19,zero
    2178:	0023883a 	mov	r17,zero
    217c:	04800074 	movhi	r18,1
    2180:	94a73f04 	addi	r18,r18,-25348
    2184:	00000106 	br	218c <__kernel_rem_pio2+0x7a8>
    2188:	acc01116 	blt	r21,r19,21d0 <__kernel_rem_pio2+0x7ec>
    218c:	91000017 	ldw	r4,0(r18)
    2190:	91400117 	ldw	r5,4(r18)
    2194:	a1800017 	ldw	r6,0(r20)
    2198:	a1c00117 	ldw	r7,4(r20)
    219c:	9cc00044 	addi	r19,r19,1
    21a0:	94800204 	addi	r18,r18,8
    21a4:	00038bc0 	call	38bc <__muldf3>
    21a8:	180f883a 	mov	r7,r3
    21ac:	880b883a 	mov	r5,r17
    21b0:	8009883a 	mov	r4,r16
    21b4:	100d883a 	mov	r6,r2
    21b8:	00038480 	call	3848 <__adddf3>
    21bc:	da809517 	ldw	r10,596(sp)
    21c0:	a5000204 	addi	r20,r20,8
    21c4:	1021883a 	mov	r16,r2
    21c8:	1823883a 	mov	r17,r3
    21cc:	54ffee0e 	bge	r10,r19,2188 <__kernel_rem_pio2+0x7a4>
    21d0:	a80490fa 	slli	r2,r21,3
    21d4:	b5bfffc4 	addi	r22,r22,-1
    21d8:	ad400044 	addi	r21,r21,1
    21dc:	16c5883a 	add	r2,r2,sp
    21e0:	14403d15 	stw	r17,244(r2)
    21e4:	14003c15 	stw	r16,240(r2)
    21e8:	00bfffc4 	movi	r2,-1
    21ec:	b0bfdb1e 	bne	r22,r2,215c <__kernel_rem_pio2+0x778>
    21f0:	d8c0ad17 	ldw	r3,692(sp)
    21f4:	00800084 	movi	r2,2
    21f8:	10c09316 	blt	r2,r3,2448 <__kernel_rem_pio2+0xa64>
    21fc:	00c1120e 	bge	zero,r3,2648 <__kernel_rem_pio2+0xc64>
    2200:	d9808d17 	ldw	r6,564(sp)
    2204:	30018d16 	blt	r6,zero,283c <__kernel_rem_pio2+0xe58>
    2208:	d8c08d17 	ldw	r3,564(sp)
    220c:	0011883a 	mov	r8,zero
    2210:	0013883a 	mov	r9,zero
    2214:	180490fa 	slli	r2,r3,3
    2218:	1823883a 	mov	r17,r3
    221c:	04bfffc4 	movi	r18,-1
    2220:	16e1883a 	add	r16,r2,sp
    2224:	80803c17 	ldw	r2,240(r16)
    2228:	80c03d17 	ldw	r3,244(r16)
    222c:	480b883a 	mov	r5,r9
    2230:	4009883a 	mov	r4,r8
    2234:	180f883a 	mov	r7,r3
    2238:	100d883a 	mov	r6,r2
    223c:	00038480 	call	3848 <__adddf3>
    2240:	8c7fffc4 	addi	r17,r17,-1
    2244:	843ffe04 	addi	r16,r16,-8
    2248:	1011883a 	mov	r8,r2
    224c:	1813883a 	mov	r9,r3
    2250:	8cbff41e 	bne	r17,r18,2224 <__kernel_rem_pio2+0x840>
    2254:	d9009217 	ldw	r4,584(sp)
    2258:	20015b1e 	bne	r4,zero,27c8 <__kernel_rem_pio2+0xde4>
    225c:	4009883a 	mov	r4,r8
    2260:	480b883a 	mov	r5,r9
    2264:	d9809717 	ldw	r6,604(sp)
    2268:	d8803c17 	ldw	r2,240(sp)
    226c:	480f883a 	mov	r7,r9
    2270:	31400115 	stw	r5,4(r6)
    2274:	31000015 	stw	r4,0(r6)
    2278:	d8c03d17 	ldw	r3,244(sp)
    227c:	400d883a 	mov	r6,r8
    2280:	1009883a 	mov	r4,r2
    2284:	180b883a 	mov	r5,r3
    2288:	00037c80 	call	37c8 <__subdf3>
    228c:	d9c08d17 	ldw	r7,564(sp)
    2290:	1011883a 	mov	r8,r2
    2294:	1813883a 	mov	r9,r3
    2298:	01c00d0e 	bge	zero,r7,22d0 <__kernel_rem_pio2+0x8ec>
    229c:	0023883a 	mov	r17,zero
    22a0:	dc003e04 	addi	r16,sp,248
    22a4:	81800017 	ldw	r6,0(r16)
    22a8:	81c00117 	ldw	r7,4(r16)
    22ac:	480b883a 	mov	r5,r9
    22b0:	4009883a 	mov	r4,r8
    22b4:	00038480 	call	3848 <__adddf3>
    22b8:	da808d17 	ldw	r10,564(sp)
    22bc:	8c400044 	addi	r17,r17,1
    22c0:	1011883a 	mov	r8,r2
    22c4:	1813883a 	mov	r9,r3
    22c8:	84000204 	addi	r16,r16,8
    22cc:	8abff51e 	bne	r17,r10,22a4 <__kernel_rem_pio2+0x8c0>
    22d0:	d8809217 	ldw	r2,584(sp)
    22d4:	10000226 	beq	r2,zero,22e0 <__kernel_rem_pio2+0x8fc>
    22d8:	48e0003c 	xorhi	r3,r9,32768
    22dc:	1813883a 	mov	r9,r3
    22e0:	d8c09717 	ldw	r3,604(sp)
    22e4:	1a400315 	stw	r9,12(r3)
    22e8:	1a000215 	stw	r8,8(r3)
    22ec:	d8c09417 	ldw	r3,592(sp)
    22f0:	188001cc 	andi	r2,r3,7
    22f4:	dfc0ac17 	ldw	ra,688(sp)
    22f8:	df00ab17 	ldw	fp,684(sp)
    22fc:	ddc0aa17 	ldw	r23,680(sp)
    2300:	dd80a917 	ldw	r22,676(sp)
    2304:	dd40a817 	ldw	r21,672(sp)
    2308:	dd00a717 	ldw	r20,668(sp)
    230c:	dcc0a617 	ldw	r19,664(sp)
    2310:	dc80a517 	ldw	r18,660(sp)
    2314:	dc40a417 	ldw	r17,656(sp)
    2318:	dc00a317 	ldw	r16,652(sp)
    231c:	dec0ad04 	addi	sp,sp,692
    2320:	f800283a 	ret
    2324:	d8809317 	ldw	r2,588(sp)
    2328:	10001f1e 	bne	r2,zero,23a8 <__kernel_rem_pio2+0x9c4>
    232c:	d8c08d17 	ldw	r3,564(sp)
    2330:	18c5883a 	add	r2,r3,r3
    2334:	1085883a 	add	r2,r2,r2
    2338:	16c5883a 	add	r2,r2,sp
    233c:	10ffff17 	ldw	r3,-4(r2)
    2340:	1807d5fa 	srai	r3,r3,23
    2344:	d8c09215 	stw	r3,584(sp)
    2348:	003e8e06 	br	1d84 <__kernel_rem_pio2+0x3a0>
    234c:	d9008d17 	ldw	r4,564(sp)
    2350:	d9409317 	ldw	r5,588(sp)
    2354:	2145c83a 	sub	r2,r4,r5
    2358:	1085883a 	add	r2,r2,r2
    235c:	1085883a 	add	r2,r2,r2
    2360:	16c5883a 	add	r2,r2,sp
    2364:	10c00017 	ldw	r3,0(r2)
    2368:	01002034 	movhi	r4,128
    236c:	213fffc4 	addi	r4,r4,-1
    2370:	1906703a 	and	r3,r3,r4
    2374:	10c00015 	stw	r3,0(r2)
    2378:	003ea806 	br	1e1c <__kernel_rem_pio2+0x438>
    237c:	d9808d17 	ldw	r6,564(sp)
    2380:	01001034 	movhi	r4,64
    2384:	213fffc4 	addi	r4,r4,-1
    2388:	30bfffc4 	addi	r2,r6,-1
    238c:	1085883a 	add	r2,r2,r2
    2390:	1085883a 	add	r2,r2,r2
    2394:	16c5883a 	add	r2,r2,sp
    2398:	10c00017 	ldw	r3,0(r2)
    239c:	1906703a 	and	r3,r3,r4
    23a0:	10c00015 	stw	r3,0(r2)
    23a4:	003e9d06 	br	1e1c <__kernel_rem_pio2+0x438>
    23a8:	0005883a 	mov	r2,zero
    23ac:	00cff834 	movhi	r3,16352
    23b0:	300b883a 	mov	r5,r6
    23b4:	180f883a 	mov	r7,r3
    23b8:	8009883a 	mov	r4,r16
    23bc:	100d883a 	mov	r6,r2
    23c0:	0003d900 	call	3d90 <__gedf2>
    23c4:	10001d0e 	bge	r2,zero,243c <__kernel_rem_pio2+0xa58>
    23c8:	d8009215 	stw	zero,584(sp)
    23cc:	003e9606 	br	1e28 <__kernel_rem_pio2+0x444>
    23d0:	d8c08d17 	ldw	r3,564(sp)
    23d4:	01000044 	movi	r4,1
    23d8:	192f883a 	add	r23,r3,r4
    23dc:	1f000044 	addi	fp,r3,1
    23e0:	bf3eb516 	blt	r23,fp,1eb8 <__kernel_rem_pio2+0x4d4>
    23e4:	003eb606 	br	1ec0 <__kernel_rem_pio2+0x4dc>
    23e8:	0021883a 	mov	r16,zero
    23ec:	0023883a 	mov	r17,zero
    23f0:	a5000044 	addi	r20,r20,1
    23f4:	ac400115 	stw	r17,4(r21)
    23f8:	ac000015 	stw	r16,0(r21)
    23fc:	ad400204 	addi	r21,r21,8
    2400:	a5fdba1e 	bne	r20,r23,1aec <__kernel_rem_pio2+0x108>
    2404:	003dd806 	br	1b68 <__kernel_rem_pio2+0x184>
    2408:	a80490fa 	slli	r2,r21,3
    240c:	0021883a 	mov	r16,zero
    2410:	0023883a 	mov	r17,zero
    2414:	16c5883a 	add	r2,r2,sp
    2418:	14403d15 	stw	r17,244(r2)
    241c:	14003c15 	stw	r16,240(r2)
    2420:	b5bfffc4 	addi	r22,r22,-1
    2424:	00bfffc4 	movi	r2,-1
    2428:	ad400044 	addi	r21,r21,1
    242c:	b0bf4b1e 	bne	r22,r2,215c <__kernel_rem_pio2+0x778>
    2430:	003f6f06 	br	21f0 <__kernel_rem_pio2+0x80c>
    2434:	002d883a 	mov	r22,zero
    2438:	003e7106 	br	1e00 <__kernel_rem_pio2+0x41c>
    243c:	01000084 	movi	r4,2
    2440:	d9009215 	stw	r4,584(sp)
    2444:	003e5106 	br	1d8c <__kernel_rem_pio2+0x3a8>
    2448:	d900ad17 	ldw	r4,692(sp)
    244c:	008000c4 	movi	r2,3
    2450:	20bfa61e 	bne	r4,r2,22ec <__kernel_rem_pio2+0x908>
    2454:	d9c08d17 	ldw	r7,564(sp)
    2458:	01c02c0e 	bge	zero,r7,250c <__kernel_rem_pio2+0xb28>
    245c:	3805883a 	mov	r2,r7
    2460:	00000106 	br	2468 <__kernel_rem_pio2+0xa84>
    2464:	d8808e17 	ldw	r2,568(sp)
    2468:	113fffc4 	addi	r4,r2,-1
    246c:	100690fa 	slli	r3,r2,3
    2470:	200490fa 	slli	r2,r4,3
    2474:	d9008e15 	stw	r4,568(sp)
    2478:	1ef9883a 	add	fp,r3,sp
    247c:	16c5883a 	add	r2,r2,sp
    2480:	d8809a15 	stw	r2,616(sp)
    2484:	11403c04 	addi	r5,r2,240
    2488:	e1803c04 	addi	r6,fp,240
    248c:	14003c17 	ldw	r16,240(r2)
    2490:	e5003c17 	ldw	r20,240(fp)
    2494:	d9409b15 	stw	r5,620(sp)
    2498:	d9809c15 	stw	r6,624(sp)
    249c:	35400117 	ldw	r21,4(r6)
    24a0:	2c400117 	ldw	r17,4(r5)
    24a4:	8009883a 	mov	r4,r16
    24a8:	a00d883a 	mov	r6,r20
    24ac:	880b883a 	mov	r5,r17
    24b0:	a80f883a 	mov	r7,r21
    24b4:	00038480 	call	3848 <__adddf3>
    24b8:	100d883a 	mov	r6,r2
    24bc:	880b883a 	mov	r5,r17
    24c0:	8009883a 	mov	r4,r16
    24c4:	180f883a 	mov	r7,r3
    24c8:	1025883a 	mov	r18,r2
    24cc:	1827883a 	mov	r19,r3
    24d0:	00037c80 	call	37c8 <__subdf3>
    24d4:	180f883a 	mov	r7,r3
    24d8:	a80b883a 	mov	r5,r21
    24dc:	a009883a 	mov	r4,r20
    24e0:	100d883a 	mov	r6,r2
    24e4:	00038480 	call	3848 <__adddf3>
    24e8:	e0803c15 	stw	r2,240(fp)
    24ec:	d9c09c17 	ldw	r7,624(sp)
    24f0:	38c00115 	stw	r3,4(r7)
    24f4:	da809a17 	ldw	r10,616(sp)
    24f8:	54803c15 	stw	r18,240(r10)
    24fc:	d8809b17 	ldw	r2,620(sp)
    2500:	14c00115 	stw	r19,4(r2)
    2504:	d8c08e17 	ldw	r3,568(sp)
    2508:	183fd61e 	bne	r3,zero,2464 <__kernel_rem_pio2+0xa80>
    250c:	d9008d17 	ldw	r4,564(sp)
    2510:	00800044 	movi	r2,1
    2514:	1100cc0e 	bge	r2,r4,2848 <__kernel_rem_pio2+0xe64>
    2518:	d8808d17 	ldw	r2,564(sp)
    251c:	117fffc4 	addi	r5,r2,-1
    2520:	100690fa 	slli	r3,r2,3
    2524:	280490fa 	slli	r2,r5,3
    2528:	d9408f15 	stw	r5,572(sp)
    252c:	1ef9883a 	add	fp,r3,sp
    2530:	16c5883a 	add	r2,r2,sp
    2534:	d8809d15 	stw	r2,628(sp)
    2538:	11803c04 	addi	r6,r2,240
    253c:	e1c03c04 	addi	r7,fp,240
    2540:	14003c17 	ldw	r16,240(r2)
    2544:	e5003c17 	ldw	r20,240(fp)
    2548:	d9809e15 	stw	r6,632(sp)
    254c:	d9c09f15 	stw	r7,636(sp)
    2550:	34400117 	ldw	r17,4(r6)
    2554:	3d400117 	ldw	r21,4(r7)
    2558:	8009883a 	mov	r4,r16
    255c:	880b883a 	mov	r5,r17
    2560:	a00d883a 	mov	r6,r20
    2564:	a80f883a 	mov	r7,r21
    2568:	00038480 	call	3848 <__adddf3>
    256c:	100d883a 	mov	r6,r2
    2570:	880b883a 	mov	r5,r17
    2574:	8009883a 	mov	r4,r16
    2578:	180f883a 	mov	r7,r3
    257c:	1025883a 	mov	r18,r2
    2580:	1827883a 	mov	r19,r3
    2584:	00037c80 	call	37c8 <__subdf3>
    2588:	180f883a 	mov	r7,r3
    258c:	a80b883a 	mov	r5,r21
    2590:	a009883a 	mov	r4,r20
    2594:	100d883a 	mov	r6,r2
    2598:	00038480 	call	3848 <__adddf3>
    259c:	e0803c15 	stw	r2,240(fp)
    25a0:	da809f17 	ldw	r10,636(sp)
    25a4:	50c00115 	stw	r3,4(r10)
    25a8:	d8c09d17 	ldw	r3,628(sp)
    25ac:	d8808f17 	ldw	r2,572(sp)
    25b0:	1c803c15 	stw	r18,240(r3)
    25b4:	d9009e17 	ldw	r4,632(sp)
    25b8:	00c00044 	movi	r3,1
    25bc:	24c00115 	stw	r19,4(r4)
    25c0:	d9408f17 	ldw	r5,572(sp)
    25c4:	28ffd51e 	bne	r5,r3,251c <__kernel_rem_pio2+0xb38>
    25c8:	dc008d17 	ldw	r16,564(sp)
    25cc:	0011883a 	mov	r8,zero
    25d0:	1825883a 	mov	r18,r3
    25d4:	800490fa 	slli	r2,r16,3
    25d8:	0013883a 	mov	r9,zero
    25dc:	16e3883a 	add	r17,r2,sp
    25e0:	88803c17 	ldw	r2,240(r17)
    25e4:	88c03d17 	ldw	r3,244(r17)
    25e8:	480b883a 	mov	r5,r9
    25ec:	4009883a 	mov	r4,r8
    25f0:	180f883a 	mov	r7,r3
    25f4:	100d883a 	mov	r6,r2
    25f8:	00038480 	call	3848 <__adddf3>
    25fc:	843fffc4 	addi	r16,r16,-1
    2600:	8c7ffe04 	addi	r17,r17,-8
    2604:	1011883a 	mov	r8,r2
    2608:	1813883a 	mov	r9,r3
    260c:	84bff41e 	bne	r16,r18,25e0 <__kernel_rem_pio2+0xbfc>
    2610:	d9809217 	ldw	r6,584(sp)
    2614:	30007a1e 	bne	r6,zero,2800 <__kernel_rem_pio2+0xe1c>
    2618:	d9c09717 	ldw	r7,604(sp)
    261c:	d8803c17 	ldw	r2,240(sp)
    2620:	d9003e17 	ldw	r4,248(sp)
    2624:	3a400515 	stw	r9,20(r7)
    2628:	d8c03d17 	ldw	r3,244(sp)
    262c:	d9403f17 	ldw	r5,252(sp)
    2630:	3a000415 	stw	r8,16(r7)
    2634:	38c00115 	stw	r3,4(r7)
    2638:	39400315 	stw	r5,12(r7)
    263c:	38800015 	stw	r2,0(r7)
    2640:	39000215 	stw	r4,8(r7)
    2644:	003f2906 	br	22ec <__kernel_rem_pio2+0x908>
    2648:	183f281e 	bne	r3,zero,22ec <__kernel_rem_pio2+0x908>
    264c:	d9408d17 	ldw	r5,564(sp)
    2650:	28008016 	blt	r5,zero,2854 <__kernel_rem_pio2+0xe70>
    2654:	dc008d17 	ldw	r16,564(sp)
    2658:	000d883a 	mov	r6,zero
    265c:	000f883a 	mov	r7,zero
    2660:	800490fa 	slli	r2,r16,3
    2664:	04bfffc4 	movi	r18,-1
    2668:	16e3883a 	add	r17,r2,sp
    266c:	88803c17 	ldw	r2,240(r17)
    2670:	88c03d17 	ldw	r3,244(r17)
    2674:	380b883a 	mov	r5,r7
    2678:	3009883a 	mov	r4,r6
    267c:	180f883a 	mov	r7,r3
    2680:	100d883a 	mov	r6,r2
    2684:	00038480 	call	3848 <__adddf3>
    2688:	843fffc4 	addi	r16,r16,-1
    268c:	8c7ffe04 	addi	r17,r17,-8
    2690:	100d883a 	mov	r6,r2
    2694:	180f883a 	mov	r7,r3
    2698:	84bff41e 	bne	r16,r18,266c <__kernel_rem_pio2+0xc88>
    269c:	da809217 	ldw	r10,584(sp)
    26a0:	50000226 	beq	r10,zero,26ac <__kernel_rem_pio2+0xcc8>
    26a4:	38e0003c 	xorhi	r3,r7,32768
    26a8:	180f883a 	mov	r7,r3
    26ac:	d8809717 	ldw	r2,604(sp)
    26b0:	11c00115 	stw	r7,4(r2)
    26b4:	11800015 	stw	r6,0(r2)
    26b8:	003f0c06 	br	22ec <__kernel_rem_pio2+0x908>
    26bc:	d8008c15 	stw	zero,560(sp)
    26c0:	003ce606 	br	1a5c <__kernel_rem_pio2+0x78>
    26c4:	d9c09317 	ldw	r7,588(sp)
    26c8:	880b883a 	mov	r5,r17
    26cc:	8009883a 	mov	r4,r16
    26d0:	01cdc83a 	sub	r6,zero,r7
    26d4:	0002db40 	call	2db4 <scalbn>
    26d8:	0011883a 	mov	r8,zero
    26dc:	02505c34 	movhi	r9,16752
    26e0:	480f883a 	mov	r7,r9
    26e4:	1009883a 	mov	r4,r2
    26e8:	180b883a 	mov	r5,r3
    26ec:	400d883a 	mov	r6,r8
    26f0:	102d883a 	mov	r22,r2
    26f4:	182f883a 	mov	r23,r3
    26f8:	0003d900 	call	3d90 <__gedf2>
    26fc:	10003716 	blt	r2,zero,27dc <__kernel_rem_pio2+0xdf8>
    2700:	0005883a 	mov	r2,zero
    2704:	00cf9c34 	movhi	r3,15984
    2708:	180f883a 	mov	r7,r3
    270c:	100d883a 	mov	r6,r2
    2710:	b009883a 	mov	r4,r22
    2714:	b80b883a 	mov	r5,r23
    2718:	00038bc0 	call	38bc <__muldf3>
    271c:	180b883a 	mov	r5,r3
    2720:	1009883a 	mov	r4,r2
    2724:	0003f100 	call	3f10 <__fixdfsi>
    2728:	1009883a 	mov	r4,r2
    272c:	0003e180 	call	3e18 <__floatsidf>
    2730:	da808d17 	ldw	r10,564(sp)
    2734:	1023883a 	mov	r17,r2
    2738:	1825883a 	mov	r18,r3
    273c:	0005883a 	mov	r2,zero
    2740:	00f05c34 	movhi	r3,49520
    2744:	180f883a 	mov	r7,r3
    2748:	8809883a 	mov	r4,r17
    274c:	900b883a 	mov	r5,r18
    2750:	100d883a 	mov	r6,r2
    2754:	52ab883a 	add	r21,r10,r10
    2758:	00038bc0 	call	38bc <__muldf3>
    275c:	180f883a 	mov	r7,r3
    2760:	b80b883a 	mov	r5,r23
    2764:	100d883a 	mov	r6,r2
    2768:	b009883a 	mov	r4,r22
    276c:	00038480 	call	3848 <__adddf3>
    2770:	100d883a 	mov	r6,r2
    2774:	d8808d17 	ldw	r2,564(sp)
    2778:	180b883a 	mov	r5,r3
    277c:	3009883a 	mov	r4,r6
    2780:	10800044 	addi	r2,r2,1
    2784:	ad6b883a 	add	r21,r21,r21
    2788:	d8808d15 	stw	r2,564(sp)
    278c:	0003f100 	call	3f10 <__fixdfsi>
    2790:	d8c08d17 	ldw	r3,564(sp)
    2794:	aeeb883a 	add	r21,r21,sp
    2798:	8809883a 	mov	r4,r17
    279c:	900b883a 	mov	r5,r18
    27a0:	a8800015 	stw	r2,0(r21)
    27a4:	18e1883a 	add	r16,r3,r3
    27a8:	0003f100 	call	3f10 <__fixdfsi>
    27ac:	d9009317 	ldw	r4,588(sp)
    27b0:	8421883a 	add	r16,r16,r16
    27b4:	86e1883a 	add	r16,r16,sp
    27b8:	21000604 	addi	r4,r4,24
    27bc:	d9009315 	stw	r4,588(sp)
    27c0:	80800015 	stw	r2,0(r16)
    27c4:	003e3a06 	br	20b0 <__kernel_rem_pio2+0x6cc>
    27c8:	4009883a 	mov	r4,r8
    27cc:	4960003c 	xorhi	r5,r9,32768
    27d0:	003ea406 	br	2264 <__kernel_rem_pio2+0x880>
    27d4:	d9808d15 	stw	r6,564(sp)
    27d8:	003e3506 	br	20b0 <__kernel_rem_pio2+0x6cc>
    27dc:	d9408d17 	ldw	r5,564(sp)
    27e0:	b009883a 	mov	r4,r22
    27e4:	2961883a 	add	r16,r5,r5
    27e8:	8421883a 	add	r16,r16,r16
    27ec:	b80b883a 	mov	r5,r23
    27f0:	86e1883a 	add	r16,r16,sp
    27f4:	0003f100 	call	3f10 <__fixdfsi>
    27f8:	80800015 	stw	r2,0(r16)
    27fc:	003e2c06 	br	20b0 <__kernel_rem_pio2+0x6cc>
    2800:	d8c03d17 	ldw	r3,244(sp)
    2804:	d9403f17 	ldw	r5,252(sp)
    2808:	da809717 	ldw	r10,604(sp)
    280c:	d8803c17 	ldw	r2,240(sp)
    2810:	d9003e17 	ldw	r4,248(sp)
    2814:	49e0003c 	xorhi	r7,r9,32768
    2818:	51c00515 	stw	r7,20(r10)
    281c:	19a0003c 	xorhi	r6,r3,32768
    2820:	29e0003c 	xorhi	r7,r5,32768
    2824:	51800115 	stw	r6,4(r10)
    2828:	51c00315 	stw	r7,12(r10)
    282c:	50800015 	stw	r2,0(r10)
    2830:	51000215 	stw	r4,8(r10)
    2834:	52000415 	stw	r8,16(r10)
    2838:	003eac06 	br	22ec <__kernel_rem_pio2+0x908>
    283c:	0011883a 	mov	r8,zero
    2840:	0013883a 	mov	r9,zero
    2844:	003e8306 	br	2254 <__kernel_rem_pio2+0x870>
    2848:	0011883a 	mov	r8,zero
    284c:	0013883a 	mov	r9,zero
    2850:	003f6f06 	br	2610 <__kernel_rem_pio2+0xc2c>
    2854:	000d883a 	mov	r6,zero
    2858:	000f883a 	mov	r7,zero
    285c:	003f8f06 	br	269c <__kernel_rem_pio2+0xcb8>

00002860 <__kernel_sin>:
    2860:	00a00034 	movhi	r2,32768
    2864:	10bfffc4 	addi	r2,r2,-1
    2868:	deffef04 	addi	sp,sp,-68
    286c:	1144703a 	and	r2,r2,r5
    2870:	00cf9034 	movhi	r3,15936
    2874:	18ffffc4 	addi	r3,r3,-1
    2878:	dd400d15 	stw	r21,52(sp)
    287c:	dd000c15 	stw	r20,48(sp)
    2880:	dfc01015 	stw	ra,64(sp)
    2884:	ddc00f15 	stw	r23,60(sp)
    2888:	dd800e15 	stw	r22,56(sp)
    288c:	dcc00b15 	stw	r19,44(sp)
    2890:	dc800a15 	stw	r18,40(sp)
    2894:	dc400915 	stw	r17,36(sp)
    2898:	dc000815 	stw	r16,32(sp)
    289c:	2029883a 	mov	r20,r4
    28a0:	282b883a 	mov	r21,r5
    28a4:	d9800415 	stw	r6,16(sp)
    28a8:	d9c00515 	stw	r7,20(sp)
    28ac:	18800216 	blt	r3,r2,28b8 <__kernel_sin+0x58>
    28b0:	0003f100 	call	3f10 <__fixdfsi>
    28b4:	10008826 	beq	r2,zero,2ad8 <__kernel_sin+0x278>
    28b8:	a009883a 	mov	r4,r20
    28bc:	a80b883a 	mov	r5,r21
    28c0:	a00d883a 	mov	r6,r20
    28c4:	a80f883a 	mov	r7,r21
    28c8:	00038bc0 	call	38bc <__muldf3>
    28cc:	102d883a 	mov	r22,r2
    28d0:	a009883a 	mov	r4,r20
    28d4:	a80b883a 	mov	r5,r21
    28d8:	b00d883a 	mov	r6,r22
    28dc:	180f883a 	mov	r7,r3
    28e0:	182f883a 	mov	r23,r3
    28e4:	d8800215 	stw	r2,8(sp)
    28e8:	d8c00315 	stw	r3,12(sp)
    28ec:	00038bc0 	call	38bc <__muldf3>
    28f0:	d9000217 	ldw	r4,8(sp)
    28f4:	0216b434 	movhi	r8,23248
    28f8:	42355f04 	addi	r8,r8,-10884
    28fc:	024f79b4 	movhi	r9,15846
    2900:	4a764e84 	addi	r9,r9,-9926
    2904:	480f883a 	mov	r7,r9
    2908:	400d883a 	mov	r6,r8
    290c:	b80b883a 	mov	r5,r23
    2910:	d8800615 	stw	r2,24(sp)
    2914:	d8c00715 	stw	r3,28(sp)
    2918:	00038bc0 	call	38bc <__muldf3>
    291c:	02228b34 	movhi	r8,35372
    2920:	42273ac4 	addi	r8,r8,-25365
    2924:	024f96f4 	movhi	r9,15963
    2928:	4a797984 	addi	r9,r9,-6682
    292c:	480f883a 	mov	r7,r9
    2930:	400d883a 	mov	r6,r8
    2934:	180b883a 	mov	r5,r3
    2938:	1009883a 	mov	r4,r2
    293c:	00037c80 	call	37c8 <__subdf3>
    2940:	d9000217 	ldw	r4,8(sp)
    2944:	180f883a 	mov	r7,r3
    2948:	b80b883a 	mov	r5,r23
    294c:	100d883a 	mov	r6,r2
    2950:	00038bc0 	call	38bc <__muldf3>
    2954:	0215ecb4 	movhi	r8,22450
    2958:	423f9f44 	addi	r8,r8,-387
    295c:	024fb1f4 	movhi	r9,16071
    2960:	4a4778c4 	addi	r9,r9,7651
    2964:	480f883a 	mov	r7,r9
    2968:	400d883a 	mov	r6,r8
    296c:	180b883a 	mov	r5,r3
    2970:	1009883a 	mov	r4,r2
    2974:	00038480 	call	3848 <__adddf3>
    2978:	d9000217 	ldw	r4,8(sp)
    297c:	180f883a 	mov	r7,r3
    2980:	b80b883a 	mov	r5,r23
    2984:	100d883a 	mov	r6,r2
    2988:	00038bc0 	call	38bc <__muldf3>
    298c:	02067074 	movhi	r8,6593
    2990:	42187544 	addi	r8,r8,25045
    2994:	024fcab4 	movhi	r9,16170
    2998:	4a406804 	addi	r9,r9,416
    299c:	480f883a 	mov	r7,r9
    29a0:	400d883a 	mov	r6,r8
    29a4:	180b883a 	mov	r5,r3
    29a8:	1009883a 	mov	r4,r2
    29ac:	00037c80 	call	37c8 <__subdf3>
    29b0:	d9000217 	ldw	r4,8(sp)
    29b4:	180f883a 	mov	r7,r3
    29b8:	b80b883a 	mov	r5,r23
    29bc:	100d883a 	mov	r6,r2
    29c0:	00038bc0 	call	38bc <__muldf3>
    29c4:	02044474 	movhi	r8,4369
    29c8:	423e2984 	addi	r8,r8,-1882
    29cc:	024fe074 	movhi	r9,16257
    29d0:	4a444444 	addi	r9,r9,4369
    29d4:	180b883a 	mov	r5,r3
    29d8:	480f883a 	mov	r7,r9
    29dc:	1009883a 	mov	r4,r2
    29e0:	400d883a 	mov	r6,r8
    29e4:	00038480 	call	3848 <__adddf3>
    29e8:	1021883a 	mov	r16,r2
    29ec:	d8800617 	ldw	r2,24(sp)
    29f0:	1823883a 	mov	r17,r3
    29f4:	d8800015 	stw	r2,0(sp)
    29f8:	d8800717 	ldw	r2,28(sp)
    29fc:	d8800115 	stw	r2,4(sp)
    2a00:	d8801117 	ldw	r2,68(sp)
    2a04:	10004126 	beq	r2,zero,2b0c <__kernel_sin+0x2ac>
    2a08:	d9000417 	ldw	r4,16(sp)
    2a0c:	d9400517 	ldw	r5,20(sp)
    2a10:	0005883a 	mov	r2,zero
    2a14:	00cff834 	movhi	r3,16352
    2a18:	180f883a 	mov	r7,r3
    2a1c:	100d883a 	mov	r6,r2
    2a20:	00038bc0 	call	38bc <__muldf3>
    2a24:	d9000017 	ldw	r4,0(sp)
    2a28:	d9400717 	ldw	r5,28(sp)
    2a2c:	800d883a 	mov	r6,r16
    2a30:	880f883a 	mov	r7,r17
    2a34:	1021883a 	mov	r16,r2
    2a38:	1823883a 	mov	r17,r3
    2a3c:	00038bc0 	call	38bc <__muldf3>
    2a40:	180f883a 	mov	r7,r3
    2a44:	880b883a 	mov	r5,r17
    2a48:	8009883a 	mov	r4,r16
    2a4c:	100d883a 	mov	r6,r2
    2a50:	00037c80 	call	37c8 <__subdf3>
    2a54:	d9000217 	ldw	r4,8(sp)
    2a58:	b80b883a 	mov	r5,r23
    2a5c:	180f883a 	mov	r7,r3
    2a60:	100d883a 	mov	r6,r2
    2a64:	00038bc0 	call	38bc <__muldf3>
    2a68:	d9c00517 	ldw	r7,20(sp)
    2a6c:	d9800417 	ldw	r6,16(sp)
    2a70:	180b883a 	mov	r5,r3
    2a74:	1009883a 	mov	r4,r2
    2a78:	00037c80 	call	37c8 <__subdf3>
    2a7c:	d9000017 	ldw	r4,0(sp)
    2a80:	d9400717 	ldw	r5,28(sp)
    2a84:	02155574 	movhi	r8,21845
    2a88:	42155244 	addi	r8,r8,21833
    2a8c:	024ff174 	movhi	r9,16325
    2a90:	4a555544 	addi	r9,r9,21845
    2a94:	480f883a 	mov	r7,r9
    2a98:	400d883a 	mov	r6,r8
    2a9c:	1021883a 	mov	r16,r2
    2aa0:	1823883a 	mov	r17,r3
    2aa4:	00038bc0 	call	38bc <__muldf3>
    2aa8:	180f883a 	mov	r7,r3
    2aac:	880b883a 	mov	r5,r17
    2ab0:	8009883a 	mov	r4,r16
    2ab4:	100d883a 	mov	r6,r2
    2ab8:	00038480 	call	3848 <__adddf3>
    2abc:	180f883a 	mov	r7,r3
    2ac0:	a80b883a 	mov	r5,r21
    2ac4:	a009883a 	mov	r4,r20
    2ac8:	100d883a 	mov	r6,r2
    2acc:	00037c80 	call	37c8 <__subdf3>
    2ad0:	1029883a 	mov	r20,r2
    2ad4:	182b883a 	mov	r21,r3
    2ad8:	a005883a 	mov	r2,r20
    2adc:	a807883a 	mov	r3,r21
    2ae0:	dfc01017 	ldw	ra,64(sp)
    2ae4:	ddc00f17 	ldw	r23,60(sp)
    2ae8:	dd800e17 	ldw	r22,56(sp)
    2aec:	dd400d17 	ldw	r21,52(sp)
    2af0:	dd000c17 	ldw	r20,48(sp)
    2af4:	dcc00b17 	ldw	r19,44(sp)
    2af8:	dc800a17 	ldw	r18,40(sp)
    2afc:	dc400917 	ldw	r17,36(sp)
    2b00:	dc000817 	ldw	r16,32(sp)
    2b04:	dec01104 	addi	sp,sp,68
    2b08:	f800283a 	ret
    2b0c:	d9000217 	ldw	r4,8(sp)
    2b10:	b80b883a 	mov	r5,r23
    2b14:	800d883a 	mov	r6,r16
    2b18:	180f883a 	mov	r7,r3
    2b1c:	00038bc0 	call	38bc <__muldf3>
    2b20:	02155574 	movhi	r8,21845
    2b24:	42155244 	addi	r8,r8,21833
    2b28:	024ff174 	movhi	r9,16325
    2b2c:	4a555544 	addi	r9,r9,21845
    2b30:	480f883a 	mov	r7,r9
    2b34:	400d883a 	mov	r6,r8
    2b38:	180b883a 	mov	r5,r3
    2b3c:	1009883a 	mov	r4,r2
    2b40:	00037c80 	call	37c8 <__subdf3>
    2b44:	d9000017 	ldw	r4,0(sp)
    2b48:	d9400717 	ldw	r5,28(sp)
    2b4c:	180f883a 	mov	r7,r3
    2b50:	100d883a 	mov	r6,r2
    2b54:	00038bc0 	call	38bc <__muldf3>
    2b58:	180f883a 	mov	r7,r3
    2b5c:	a80b883a 	mov	r5,r21
    2b60:	a009883a 	mov	r4,r20
    2b64:	100d883a 	mov	r6,r2
    2b68:	00038480 	call	3848 <__adddf3>
    2b6c:	1029883a 	mov	r20,r2
    2b70:	182b883a 	mov	r21,r3
    2b74:	003fd806 	br	2ad8 <__kernel_sin+0x278>

00002b78 <fabs>:
    2b78:	01e00034 	movhi	r7,32768
    2b7c:	39ffffc4 	addi	r7,r7,-1
    2b80:	394e703a 	and	r7,r7,r5
    2b84:	2005883a 	mov	r2,r4
    2b88:	3807883a 	mov	r3,r7
    2b8c:	f800283a 	ret

00002b90 <floor>:
    2b90:	2805d53a 	srai	r2,r5,20
    2b94:	defff604 	addi	sp,sp,-40
    2b98:	dd800615 	stw	r22,24(sp)
    2b9c:	10c1ffcc 	andi	r3,r2,2047
    2ba0:	1dbf0044 	addi	r22,r3,-1023
    2ba4:	008004c4 	movi	r2,19
    2ba8:	ddc00715 	stw	r23,28(sp)
    2bac:	dc800215 	stw	r18,8(sp)
    2bb0:	dc400115 	stw	r17,4(sp)
    2bb4:	dc000015 	stw	r16,0(sp)
    2bb8:	dfc00915 	stw	ra,36(sp)
    2bbc:	df000815 	stw	fp,32(sp)
    2bc0:	dd400515 	stw	r21,20(sp)
    2bc4:	dd000415 	stw	r20,16(sp)
    2bc8:	dcc00315 	stw	r19,12(sp)
    2bcc:	2021883a 	mov	r16,r4
    2bd0:	2823883a 	mov	r17,r5
    2bd4:	282f883a 	mov	r23,r5
    2bd8:	2025883a 	mov	r18,r4
    2bdc:	15802916 	blt	r2,r22,2c84 <floor+0xf4>
    2be0:	b0004816 	blt	r22,zero,2d04 <floor+0x174>
    2be4:	00800434 	movhi	r2,16
    2be8:	10bfffc4 	addi	r2,r2,-1
    2bec:	15b9d83a 	sra	fp,r2,r22
    2bf0:	282f883a 	mov	r23,r5
    2bf4:	e144703a 	and	r2,fp,r5
    2bf8:	1104b03a 	or	r2,r2,r4
    2bfc:	10001326 	beq	r2,zero,2c4c <floor+0xbc>
    2c00:	00a20034 	movhi	r2,34816
    2c04:	109d6704 	addi	r2,r2,30108
    2c08:	00df8e34 	movhi	r3,32312
    2c0c:	18f90f04 	addi	r3,r3,-7108
    2c10:	180f883a 	mov	r7,r3
    2c14:	100d883a 	mov	r6,r2
    2c18:	00038480 	call	3848 <__adddf3>
    2c1c:	180b883a 	mov	r5,r3
    2c20:	000d883a 	mov	r6,zero
    2c24:	000f883a 	mov	r7,zero
    2c28:	1009883a 	mov	r4,r2
    2c2c:	0003d080 	call	3d08 <__gtdf2>
    2c30:	0080040e 	bge	zero,r2,2c44 <floor+0xb4>
    2c34:	88004416 	blt	r17,zero,2d48 <floor+0x1b8>
    2c38:	0704303a 	nor	r2,zero,fp
    2c3c:	b8ae703a 	and	r23,r23,r2
    2c40:	0025883a 	mov	r18,zero
    2c44:	9021883a 	mov	r16,r18
    2c48:	b823883a 	mov	r17,r23
    2c4c:	8005883a 	mov	r2,r16
    2c50:	8807883a 	mov	r3,r17
    2c54:	dfc00917 	ldw	ra,36(sp)
    2c58:	df000817 	ldw	fp,32(sp)
    2c5c:	ddc00717 	ldw	r23,28(sp)
    2c60:	dd800617 	ldw	r22,24(sp)
    2c64:	dd400517 	ldw	r21,20(sp)
    2c68:	dd000417 	ldw	r20,16(sp)
    2c6c:	dcc00317 	ldw	r19,12(sp)
    2c70:	dc800217 	ldw	r18,8(sp)
    2c74:	dc400117 	ldw	r17,4(sp)
    2c78:	dc000017 	ldw	r16,0(sp)
    2c7c:	dec00a04 	addi	sp,sp,40
    2c80:	f800283a 	ret
    2c84:	00800cc4 	movi	r2,51
    2c88:	15801616 	blt	r2,r22,2ce4 <floor+0x154>
    2c8c:	18befb44 	addi	r2,r3,-1043
    2c90:	00ffffc4 	movi	r3,-1
    2c94:	18b8d83a 	srl	fp,r3,r2
    2c98:	e104703a 	and	r2,fp,r4
    2c9c:	103feb26 	beq	r2,zero,2c4c <floor+0xbc>
    2ca0:	00a20034 	movhi	r2,34816
    2ca4:	109d6704 	addi	r2,r2,30108
    2ca8:	00df8e34 	movhi	r3,32312
    2cac:	18f90f04 	addi	r3,r3,-7108
    2cb0:	180f883a 	mov	r7,r3
    2cb4:	100d883a 	mov	r6,r2
    2cb8:	00038480 	call	3848 <__adddf3>
    2cbc:	180b883a 	mov	r5,r3
    2cc0:	000d883a 	mov	r6,zero
    2cc4:	000f883a 	mov	r7,zero
    2cc8:	1009883a 	mov	r4,r2
    2ccc:	0003d080 	call	3d08 <__gtdf2>
    2cd0:	0080210e 	bge	zero,r2,2d58 <floor+0x1c8>
    2cd4:	88002216 	blt	r17,zero,2d60 <floor+0x1d0>
    2cd8:	0704303a 	nor	r2,zero,fp
    2cdc:	90a4703a 	and	r18,r18,r2
    2ce0:	003fd806 	br	2c44 <floor+0xb4>
    2ce4:	00810004 	movi	r2,1024
    2ce8:	b0bfd81e 	bne	r22,r2,2c4c <floor+0xbc>
    2cec:	800d883a 	mov	r6,r16
    2cf0:	280f883a 	mov	r7,r5
    2cf4:	00038480 	call	3848 <__adddf3>
    2cf8:	1021883a 	mov	r16,r2
    2cfc:	1823883a 	mov	r17,r3
    2d00:	003fd206 	br	2c4c <floor+0xbc>
    2d04:	00a20034 	movhi	r2,34816
    2d08:	109d6704 	addi	r2,r2,30108
    2d0c:	00df8e34 	movhi	r3,32312
    2d10:	18f90f04 	addi	r3,r3,-7108
    2d14:	180f883a 	mov	r7,r3
    2d18:	100d883a 	mov	r6,r2
    2d1c:	00038480 	call	3848 <__adddf3>
    2d20:	180b883a 	mov	r5,r3
    2d24:	000d883a 	mov	r6,zero
    2d28:	000f883a 	mov	r7,zero
    2d2c:	1009883a 	mov	r4,r2
    2d30:	0003d080 	call	3d08 <__gtdf2>
    2d34:	00bfc30e 	bge	zero,r2,2c44 <floor+0xb4>
    2d38:	88001416 	blt	r17,zero,2d8c <floor+0x1fc>
    2d3c:	002f883a 	mov	r23,zero
    2d40:	0025883a 	mov	r18,zero
    2d44:	003fbf06 	br	2c44 <floor+0xb4>
    2d48:	00800434 	movhi	r2,16
    2d4c:	1585d83a 	sra	r2,r2,r22
    2d50:	88af883a 	add	r23,r17,r2
    2d54:	003fb806 	br	2c38 <floor+0xa8>
    2d58:	882f883a 	mov	r23,r17
    2d5c:	003fb906 	br	2c44 <floor+0xb4>
    2d60:	00800504 	movi	r2,20
    2d64:	b0801126 	beq	r22,r2,2dac <floor+0x21c>
    2d68:	00c00d04 	movi	r3,52
    2d6c:	1d87c83a 	sub	r3,r3,r22
    2d70:	00800044 	movi	r2,1
    2d74:	10c4983a 	sll	r2,r2,r3
    2d78:	8085883a 	add	r2,r16,r2
    2d7c:	1400012e 	bgeu	r2,r16,2d84 <floor+0x1f4>
    2d80:	8dc00044 	addi	r23,r17,1
    2d84:	1025883a 	mov	r18,r2
    2d88:	003fd306 	br	2cd8 <floor+0x148>
    2d8c:	00a00034 	movhi	r2,32768
    2d90:	10bfffc4 	addi	r2,r2,-1
    2d94:	8884703a 	and	r2,r17,r2
    2d98:	8084b03a 	or	r2,r16,r2
    2d9c:	103fee26 	beq	r2,zero,2d58 <floor+0x1c8>
    2da0:	05effc34 	movhi	r23,49136
    2da4:	0025883a 	mov	r18,zero
    2da8:	003fa606 	br	2c44 <floor+0xb4>
    2dac:	8dc00044 	addi	r23,r17,1
    2db0:	003fc906 	br	2cd8 <floor+0x148>

00002db4 <scalbn>:
    2db4:	2011883a 	mov	r8,r4
    2db8:	291ffc2c 	andhi	r4,r5,32752
    2dbc:	2009d53a 	srai	r4,r4,20
    2dc0:	defffd04 	addi	sp,sp,-12
    2dc4:	dc000015 	stw	r16,0(sp)
    2dc8:	dfc00215 	stw	ra,8(sp)
    2dcc:	dc400115 	stw	r17,4(sp)
    2dd0:	2813883a 	mov	r9,r5
    2dd4:	2815883a 	mov	r10,r5
    2dd8:	3021883a 	mov	r16,r6
    2ddc:	2000281e 	bne	r4,zero,2e80 <scalbn+0xcc>
    2de0:	00a00034 	movhi	r2,32768
    2de4:	10bfffc4 	addi	r2,r2,-1
    2de8:	2884703a 	and	r2,r5,r2
    2dec:	4084b03a 	or	r2,r8,r2
    2df0:	10001826 	beq	r2,zero,2e54 <scalbn+0xa0>
    2df4:	0005883a 	mov	r2,zero
    2df8:	00d0d434 	movhi	r3,17232
    2dfc:	4009883a 	mov	r4,r8
    2e00:	100d883a 	mov	r6,r2
    2e04:	180f883a 	mov	r7,r3
    2e08:	00038bc0 	call	38bc <__muldf3>
    2e0c:	100b883a 	mov	r5,r2
    2e10:	1011883a 	mov	r8,r2
    2e14:	00bffff4 	movhi	r2,65535
    2e18:	108f2c04 	addi	r2,r2,15536
    2e1c:	180d883a 	mov	r6,r3
    2e20:	1813883a 	mov	r9,r3
    2e24:	8080120e 	bge	r16,r2,2e70 <scalbn+0xbc>
    2e28:	00b0be74 	movhi	r2,49913
    2e2c:	10bcd644 	addi	r2,r2,-3239
    2e30:	00c06974 	movhi	r3,421
    2e34:	18db87c4 	addi	r3,r3,28191
    2e38:	2809883a 	mov	r4,r5
    2e3c:	180f883a 	mov	r7,r3
    2e40:	300b883a 	mov	r5,r6
    2e44:	100d883a 	mov	r6,r2
    2e48:	00038bc0 	call	38bc <__muldf3>
    2e4c:	1011883a 	mov	r8,r2
    2e50:	1813883a 	mov	r9,r3
    2e54:	4005883a 	mov	r2,r8
    2e58:	4807883a 	mov	r3,r9
    2e5c:	dfc00217 	ldw	ra,8(sp)
    2e60:	dc400117 	ldw	r17,4(sp)
    2e64:	dc000017 	ldw	r16,0(sp)
    2e68:	dec00304 	addi	sp,sp,12
    2e6c:	f800283a 	ret
    2e70:	189ffc2c 	andhi	r2,r3,32752
    2e74:	1005d53a 	srai	r2,r2,20
    2e78:	1815883a 	mov	r10,r3
    2e7c:	113ff284 	addi	r4,r2,-54
    2e80:	0081ffc4 	movi	r2,2047
    2e84:	20801126 	beq	r4,r2,2ecc <scalbn+0x118>
    2e88:	2409883a 	add	r4,r4,r16
    2e8c:	0081ff84 	movi	r2,2046
    2e90:	11001c16 	blt	r2,r4,2f04 <scalbn+0x150>
    2e94:	0100290e 	bge	zero,r4,2f3c <scalbn+0x188>
    2e98:	200a953a 	slli	r5,r4,20
    2e9c:	01200434 	movhi	r4,32784
    2ea0:	213fffc4 	addi	r4,r4,-1
    2ea4:	5108703a 	and	r4,r10,r4
    2ea8:	2148b03a 	or	r4,r4,r5
    2eac:	2013883a 	mov	r9,r4
    2eb0:	4005883a 	mov	r2,r8
    2eb4:	4807883a 	mov	r3,r9
    2eb8:	dfc00217 	ldw	ra,8(sp)
    2ebc:	dc400117 	ldw	r17,4(sp)
    2ec0:	dc000017 	ldw	r16,0(sp)
    2ec4:	dec00304 	addi	sp,sp,12
    2ec8:	f800283a 	ret
    2ecc:	480f883a 	mov	r7,r9
    2ed0:	4009883a 	mov	r4,r8
    2ed4:	480b883a 	mov	r5,r9
    2ed8:	400d883a 	mov	r6,r8
    2edc:	00038480 	call	3848 <__adddf3>
    2ee0:	1011883a 	mov	r8,r2
    2ee4:	1813883a 	mov	r9,r3
    2ee8:	4005883a 	mov	r2,r8
    2eec:	4807883a 	mov	r3,r9
    2ef0:	dfc00217 	ldw	ra,8(sp)
    2ef4:	dc400117 	ldw	r17,4(sp)
    2ef8:	dc000017 	ldw	r16,0(sp)
    2efc:	dec00304 	addi	sp,sp,12
    2f00:	f800283a 	ret
    2f04:	04220034 	movhi	r16,34816
    2f08:	841d6704 	addi	r16,r16,30108
    2f0c:	045f8e34 	movhi	r17,32312
    2f10:	8c790f04 	addi	r17,r17,-7108
    2f14:	480f883a 	mov	r7,r9
    2f18:	400d883a 	mov	r6,r8
    2f1c:	8009883a 	mov	r4,r16
    2f20:	880b883a 	mov	r5,r17
    2f24:	0002f940 	call	2f94 <copysign>
    2f28:	180b883a 	mov	r5,r3
    2f2c:	800d883a 	mov	r6,r16
    2f30:	880f883a 	mov	r7,r17
    2f34:	1009883a 	mov	r4,r2
    2f38:	003fc306 	br	2e48 <scalbn+0x94>
    2f3c:	00bff284 	movi	r2,-54
    2f40:	11000716 	blt	r2,r4,2f60 <scalbn+0x1ac>
    2f44:	00b0d414 	movui	r2,50000
    2f48:	143fee16 	blt	r2,r16,2f04 <scalbn+0x150>
    2f4c:	0430be74 	movhi	r16,49913
    2f50:	843cd644 	addi	r16,r16,-3239
    2f54:	04406974 	movhi	r17,421
    2f58:	8c5b87c4 	addi	r17,r17,28191
    2f5c:	003fed06 	br	2f14 <scalbn+0x160>
    2f60:	21000d84 	addi	r4,r4,54
    2f64:	2008953a 	slli	r4,r4,20
    2f68:	01e00434 	movhi	r7,32784
    2f6c:	39ffffc4 	addi	r7,r7,-1
    2f70:	51ce703a 	and	r7,r10,r7
    2f74:	390eb03a 	or	r7,r7,r4
    2f78:	024f2434 	movhi	r9,15504
    2f7c:	4009883a 	mov	r4,r8
    2f80:	0011883a 	mov	r8,zero
    2f84:	380b883a 	mov	r5,r7
    2f88:	400d883a 	mov	r6,r8
    2f8c:	480f883a 	mov	r7,r9
    2f90:	003fad06 	br	2e48 <scalbn+0x94>

00002f94 <copysign>:
    2f94:	3813883a 	mov	r9,r7
    2f98:	01e00034 	movhi	r7,32768
    2f9c:	39ffffc4 	addi	r7,r7,-1
    2fa0:	394e703a 	and	r7,r7,r5
    2fa4:	4aa0002c 	andhi	r10,r9,32768
    2fa8:	3a8eb03a 	or	r7,r7,r10
    2fac:	2005883a 	mov	r2,r4
    2fb0:	3807883a 	mov	r3,r7
    2fb4:	f800283a 	ret

00002fb8 <__eqsf2>:
    2fb8:	defff304 	addi	sp,sp,-52
    2fbc:	dc400b15 	stw	r17,44(sp)
    2fc0:	dc400204 	addi	r17,sp,8
    2fc4:	dc000a15 	stw	r16,40(sp)
    2fc8:	d9000015 	stw	r4,0(sp)
    2fcc:	d9400115 	stw	r5,4(sp)
    2fd0:	d809883a 	mov	r4,sp
    2fd4:	880b883a 	mov	r5,r17
    2fd8:	dc000604 	addi	r16,sp,24
    2fdc:	dfc00c15 	stw	ra,48(sp)
    2fe0:	00044580 	call	4458 <__unpack_f>
    2fe4:	d9000104 	addi	r4,sp,4
    2fe8:	800b883a 	mov	r5,r16
    2fec:	00044580 	call	4458 <__unpack_f>
    2ff0:	d8800217 	ldw	r2,8(sp)
    2ff4:	00c00044 	movi	r3,1
    2ff8:	180d883a 	mov	r6,r3
    2ffc:	1880062e 	bgeu	r3,r2,3018 <__eqsf2+0x60>
    3000:	d8800617 	ldw	r2,24(sp)
    3004:	8809883a 	mov	r4,r17
    3008:	800b883a 	mov	r5,r16
    300c:	1880022e 	bgeu	r3,r2,3018 <__eqsf2+0x60>
    3010:	00045200 	call	4520 <__fpcmp_parts_f>
    3014:	100d883a 	mov	r6,r2
    3018:	3005883a 	mov	r2,r6
    301c:	dfc00c17 	ldw	ra,48(sp)
    3020:	dc400b17 	ldw	r17,44(sp)
    3024:	dc000a17 	ldw	r16,40(sp)
    3028:	dec00d04 	addi	sp,sp,52
    302c:	f800283a 	ret

00003030 <__gtsf2>:
    3030:	defff304 	addi	sp,sp,-52
    3034:	dc400b15 	stw	r17,44(sp)
    3038:	dc400204 	addi	r17,sp,8
    303c:	dc000a15 	stw	r16,40(sp)
    3040:	d9000015 	stw	r4,0(sp)
    3044:	d9400115 	stw	r5,4(sp)
    3048:	d809883a 	mov	r4,sp
    304c:	880b883a 	mov	r5,r17
    3050:	dc000604 	addi	r16,sp,24
    3054:	dfc00c15 	stw	ra,48(sp)
    3058:	00044580 	call	4458 <__unpack_f>
    305c:	d9000104 	addi	r4,sp,4
    3060:	800b883a 	mov	r5,r16
    3064:	00044580 	call	4458 <__unpack_f>
    3068:	d8800217 	ldw	r2,8(sp)
    306c:	00c00044 	movi	r3,1
    3070:	01bfffc4 	movi	r6,-1
    3074:	1880062e 	bgeu	r3,r2,3090 <__gtsf2+0x60>
    3078:	d8800617 	ldw	r2,24(sp)
    307c:	8809883a 	mov	r4,r17
    3080:	800b883a 	mov	r5,r16
    3084:	1880022e 	bgeu	r3,r2,3090 <__gtsf2+0x60>
    3088:	00045200 	call	4520 <__fpcmp_parts_f>
    308c:	100d883a 	mov	r6,r2
    3090:	3005883a 	mov	r2,r6
    3094:	dfc00c17 	ldw	ra,48(sp)
    3098:	dc400b17 	ldw	r17,44(sp)
    309c:	dc000a17 	ldw	r16,40(sp)
    30a0:	dec00d04 	addi	sp,sp,52
    30a4:	f800283a 	ret

000030a8 <__gesf2>:
    30a8:	defff304 	addi	sp,sp,-52
    30ac:	dc400b15 	stw	r17,44(sp)
    30b0:	dc400204 	addi	r17,sp,8
    30b4:	dc000a15 	stw	r16,40(sp)
    30b8:	d9000015 	stw	r4,0(sp)
    30bc:	d9400115 	stw	r5,4(sp)
    30c0:	d809883a 	mov	r4,sp
    30c4:	880b883a 	mov	r5,r17
    30c8:	dc000604 	addi	r16,sp,24
    30cc:	dfc00c15 	stw	ra,48(sp)
    30d0:	00044580 	call	4458 <__unpack_f>
    30d4:	d9000104 	addi	r4,sp,4
    30d8:	800b883a 	mov	r5,r16
    30dc:	00044580 	call	4458 <__unpack_f>
    30e0:	d8800217 	ldw	r2,8(sp)
    30e4:	00c00044 	movi	r3,1
    30e8:	01bfffc4 	movi	r6,-1
    30ec:	1880062e 	bgeu	r3,r2,3108 <__gesf2+0x60>
    30f0:	d8800617 	ldw	r2,24(sp)
    30f4:	8809883a 	mov	r4,r17
    30f8:	800b883a 	mov	r5,r16
    30fc:	1880022e 	bgeu	r3,r2,3108 <__gesf2+0x60>
    3100:	00045200 	call	4520 <__fpcmp_parts_f>
    3104:	100d883a 	mov	r6,r2
    3108:	3005883a 	mov	r2,r6
    310c:	dfc00c17 	ldw	ra,48(sp)
    3110:	dc400b17 	ldw	r17,44(sp)
    3114:	dc000a17 	ldw	r16,40(sp)
    3118:	dec00d04 	addi	sp,sp,52
    311c:	f800283a 	ret

00003120 <__ltsf2>:
    3120:	defff304 	addi	sp,sp,-52
    3124:	dc400b15 	stw	r17,44(sp)
    3128:	dc400204 	addi	r17,sp,8
    312c:	dc000a15 	stw	r16,40(sp)
    3130:	d9000015 	stw	r4,0(sp)
    3134:	d9400115 	stw	r5,4(sp)
    3138:	d809883a 	mov	r4,sp
    313c:	880b883a 	mov	r5,r17
    3140:	dc000604 	addi	r16,sp,24
    3144:	dfc00c15 	stw	ra,48(sp)
    3148:	00044580 	call	4458 <__unpack_f>
    314c:	d9000104 	addi	r4,sp,4
    3150:	800b883a 	mov	r5,r16
    3154:	00044580 	call	4458 <__unpack_f>
    3158:	d8800217 	ldw	r2,8(sp)
    315c:	00c00044 	movi	r3,1
    3160:	180d883a 	mov	r6,r3
    3164:	1880062e 	bgeu	r3,r2,3180 <__ltsf2+0x60>
    3168:	d8800617 	ldw	r2,24(sp)
    316c:	8809883a 	mov	r4,r17
    3170:	800b883a 	mov	r5,r16
    3174:	1880022e 	bgeu	r3,r2,3180 <__ltsf2+0x60>
    3178:	00045200 	call	4520 <__fpcmp_parts_f>
    317c:	100d883a 	mov	r6,r2
    3180:	3005883a 	mov	r2,r6
    3184:	dfc00c17 	ldw	ra,48(sp)
    3188:	dc400b17 	ldw	r17,44(sp)
    318c:	dc000a17 	ldw	r16,40(sp)
    3190:	dec00d04 	addi	sp,sp,52
    3194:	f800283a 	ret

00003198 <__lesf2>:
    3198:	defff304 	addi	sp,sp,-52
    319c:	dc400b15 	stw	r17,44(sp)
    31a0:	dc400204 	addi	r17,sp,8
    31a4:	dc000a15 	stw	r16,40(sp)
    31a8:	d9000015 	stw	r4,0(sp)
    31ac:	d9400115 	stw	r5,4(sp)
    31b0:	d809883a 	mov	r4,sp
    31b4:	880b883a 	mov	r5,r17
    31b8:	dc000604 	addi	r16,sp,24
    31bc:	dfc00c15 	stw	ra,48(sp)
    31c0:	00044580 	call	4458 <__unpack_f>
    31c4:	d9000104 	addi	r4,sp,4
    31c8:	800b883a 	mov	r5,r16
    31cc:	00044580 	call	4458 <__unpack_f>
    31d0:	d8800217 	ldw	r2,8(sp)
    31d4:	00c00044 	movi	r3,1
    31d8:	180d883a 	mov	r6,r3
    31dc:	1880062e 	bgeu	r3,r2,31f8 <__lesf2+0x60>
    31e0:	d8800617 	ldw	r2,24(sp)
    31e4:	8809883a 	mov	r4,r17
    31e8:	800b883a 	mov	r5,r16
    31ec:	1880022e 	bgeu	r3,r2,31f8 <__lesf2+0x60>
    31f0:	00045200 	call	4520 <__fpcmp_parts_f>
    31f4:	100d883a 	mov	r6,r2
    31f8:	3005883a 	mov	r2,r6
    31fc:	dfc00c17 	ldw	ra,48(sp)
    3200:	dc400b17 	ldw	r17,44(sp)
    3204:	dc000a17 	ldw	r16,40(sp)
    3208:	dec00d04 	addi	sp,sp,52
    320c:	f800283a 	ret

00003210 <__fixsfsi>:
    3210:	defffa04 	addi	sp,sp,-24
    3214:	d9000015 	stw	r4,0(sp)
    3218:	d9400104 	addi	r5,sp,4
    321c:	d809883a 	mov	r4,sp
    3220:	dfc00515 	stw	ra,20(sp)
    3224:	00044580 	call	4458 <__unpack_f>
    3228:	d8c00117 	ldw	r3,4(sp)
    322c:	00800084 	movi	r2,2
    3230:	1880041e 	bne	r3,r2,3244 <__fixsfsi+0x34>
    3234:	0005883a 	mov	r2,zero
    3238:	dfc00517 	ldw	ra,20(sp)
    323c:	dec00604 	addi	sp,sp,24
    3240:	f800283a 	ret
    3244:	00800044 	movi	r2,1
    3248:	10fffa2e 	bgeu	r2,r3,3234 <__fixsfsi+0x24>
    324c:	00800104 	movi	r2,4
    3250:	18800426 	beq	r3,r2,3264 <__fixsfsi+0x54>
    3254:	d8800317 	ldw	r2,12(sp)
    3258:	103ff616 	blt	r2,zero,3234 <__fixsfsi+0x24>
    325c:	00c00784 	movi	r3,30
    3260:	1880070e 	bge	r3,r2,3280 <__fixsfsi+0x70>
    3264:	d8800217 	ldw	r2,8(sp)
    3268:	10000c1e 	bne	r2,zero,329c <__fixsfsi+0x8c>
    326c:	00a00034 	movhi	r2,32768
    3270:	10bfffc4 	addi	r2,r2,-1
    3274:	dfc00517 	ldw	ra,20(sp)
    3278:	dec00604 	addi	sp,sp,24
    327c:	f800283a 	ret
    3280:	1885c83a 	sub	r2,r3,r2
    3284:	d9000217 	ldw	r4,8(sp)
    3288:	d8c00417 	ldw	r3,16(sp)
    328c:	1884d83a 	srl	r2,r3,r2
    3290:	203fe926 	beq	r4,zero,3238 <__fixsfsi+0x28>
    3294:	0085c83a 	sub	r2,zero,r2
    3298:	003fe706 	br	3238 <__fixsfsi+0x28>
    329c:	00a00034 	movhi	r2,32768
    32a0:	003fe506 	br	3238 <__fixsfsi+0x28>

000032a4 <__extendsfdf2>:
    32a4:	defff904 	addi	sp,sp,-28
    32a8:	d9000115 	stw	r4,4(sp)
    32ac:	d9400204 	addi	r5,sp,8
    32b0:	d9000104 	addi	r4,sp,4
    32b4:	dfc00615 	stw	ra,24(sp)
    32b8:	00044580 	call	4458 <__unpack_f>
    32bc:	d9c00517 	ldw	r7,20(sp)
    32c0:	0011883a 	mov	r8,zero
    32c4:	400697ba 	slli	r3,r8,30
    32c8:	3812d0ba 	srli	r9,r7,2
    32cc:	380497ba 	slli	r2,r7,30
    32d0:	d9000217 	ldw	r4,8(sp)
    32d4:	d9400317 	ldw	r5,12(sp)
    32d8:	d9800417 	ldw	r6,16(sp)
    32dc:	48c6b03a 	or	r3,r9,r3
    32e0:	100f883a 	mov	r7,r2
    32e4:	d8c00015 	stw	r3,0(sp)
    32e8:	0003fe80 	call	3fe8 <__make_dp>
    32ec:	dfc00617 	ldw	ra,24(sp)
    32f0:	dec00704 	addi	sp,sp,28
    32f4:	f800283a 	ret

000032f8 <__floatunsisf>:
    32f8:	defff904 	addi	sp,sp,-28
    32fc:	dc400515 	stw	r17,20(sp)
    3300:	dc000415 	stw	r16,16(sp)
    3304:	dfc00615 	stw	ra,24(sp)
    3308:	04400784 	movi	r17,30
    330c:	2021883a 	mov	r16,r4
    3310:	d8000115 	stw	zero,4(sp)
    3314:	2000091e 	bne	r4,zero,333c <__floatunsisf+0x44>
    3318:	00800084 	movi	r2,2
    331c:	d8800015 	stw	r2,0(sp)
    3320:	d809883a 	mov	r4,sp
    3324:	00042f80 	call	42f8 <__pack_f>
    3328:	dfc00617 	ldw	ra,24(sp)
    332c:	dc400517 	ldw	r17,20(sp)
    3330:	dc000417 	ldw	r16,16(sp)
    3334:	dec00704 	addi	sp,sp,28
    3338:	f800283a 	ret
    333c:	008000c4 	movi	r2,3
    3340:	d9000315 	stw	r4,12(sp)
    3344:	d8800015 	stw	r2,0(sp)
    3348:	dc400215 	stw	r17,8(sp)
    334c:	00042780 	call	4278 <__clzsi2>
    3350:	117fffc4 	addi	r5,r2,-1
    3354:	0147c83a 	sub	r3,zero,r5
    3358:	00800044 	movi	r2,1
    335c:	10c4983a 	sll	r2,r2,r3
    3360:	80c6d83a 	srl	r3,r16,r3
    3364:	8949c83a 	sub	r4,r17,r5
    3368:	10bfffc4 	addi	r2,r2,-1
    336c:	8084703a 	and	r2,r16,r2
    3370:	1004c03a 	cmpne	r2,r2,zero
    3374:	1886b03a 	or	r3,r3,r2
    3378:	28000c16 	blt	r5,zero,33ac <__floatunsisf+0xb4>
    337c:	8144983a 	sll	r2,r16,r5
    3380:	8947c83a 	sub	r3,r17,r5
    3384:	283fe626 	beq	r5,zero,3320 <__floatunsisf+0x28>
    3388:	d809883a 	mov	r4,sp
    338c:	d8800315 	stw	r2,12(sp)
    3390:	d8c00215 	stw	r3,8(sp)
    3394:	00042f80 	call	42f8 <__pack_f>
    3398:	dfc00617 	ldw	ra,24(sp)
    339c:	dc400517 	ldw	r17,20(sp)
    33a0:	dc000417 	ldw	r16,16(sp)
    33a4:	dec00704 	addi	sp,sp,28
    33a8:	f800283a 	ret
    33ac:	d8c00315 	stw	r3,12(sp)
    33b0:	d9000215 	stw	r4,8(sp)
    33b4:	003fda06 	br	3320 <__floatunsisf+0x28>

000033b8 <_fpadd_parts>:
    33b8:	defff804 	addi	sp,sp,-32
    33bc:	dcc00315 	stw	r19,12(sp)
    33c0:	2027883a 	mov	r19,r4
    33c4:	21000017 	ldw	r4,0(r4)
    33c8:	00c00044 	movi	r3,1
    33cc:	dd400515 	stw	r21,20(sp)
    33d0:	dd000415 	stw	r20,16(sp)
    33d4:	ddc00715 	stw	r23,28(sp)
    33d8:	dd800615 	stw	r22,24(sp)
    33dc:	dc800215 	stw	r18,8(sp)
    33e0:	dc400115 	stw	r17,4(sp)
    33e4:	dc000015 	stw	r16,0(sp)
    33e8:	282b883a 	mov	r21,r5
    33ec:	3029883a 	mov	r20,r6
    33f0:	1900632e 	bgeu	r3,r4,3580 <_fpadd_parts+0x1c8>
    33f4:	28800017 	ldw	r2,0(r5)
    33f8:	1880812e 	bgeu	r3,r2,3600 <_fpadd_parts+0x248>
    33fc:	00c00104 	movi	r3,4
    3400:	20c0dc26 	beq	r4,r3,3774 <_fpadd_parts+0x3bc>
    3404:	10c07e26 	beq	r2,r3,3600 <_fpadd_parts+0x248>
    3408:	00c00084 	movi	r3,2
    340c:	10c06726 	beq	r2,r3,35ac <_fpadd_parts+0x1f4>
    3410:	20c07b26 	beq	r4,r3,3600 <_fpadd_parts+0x248>
    3414:	9dc00217 	ldw	r23,8(r19)
    3418:	28c00217 	ldw	r3,8(r5)
    341c:	9c400317 	ldw	r17,12(r19)
    3420:	2bc00317 	ldw	r15,12(r5)
    3424:	b8cdc83a 	sub	r6,r23,r3
    3428:	9c800417 	ldw	r18,16(r19)
    342c:	2c000417 	ldw	r16,16(r5)
    3430:	3009883a 	mov	r4,r6
    3434:	30009716 	blt	r6,zero,3694 <_fpadd_parts+0x2dc>
    3438:	00800fc4 	movi	r2,63
    343c:	11806b16 	blt	r2,r6,35ec <_fpadd_parts+0x234>
    3440:	0100a40e 	bge	zero,r4,36d4 <_fpadd_parts+0x31c>
    3444:	35bff804 	addi	r22,r6,-32
    3448:	b000bc16 	blt	r22,zero,373c <_fpadd_parts+0x384>
    344c:	8596d83a 	srl	r11,r16,r22
    3450:	0019883a 	mov	r12,zero
    3454:	0013883a 	mov	r9,zero
    3458:	01000044 	movi	r4,1
    345c:	0015883a 	mov	r10,zero
    3460:	b000be16 	blt	r22,zero,375c <_fpadd_parts+0x3a4>
    3464:	2590983a 	sll	r8,r4,r22
    3468:	000f883a 	mov	r7,zero
    346c:	00bfffc4 	movi	r2,-1
    3470:	3889883a 	add	r4,r7,r2
    3474:	408b883a 	add	r5,r8,r2
    3478:	21cd803a 	cmpltu	r6,r4,r7
    347c:	314b883a 	add	r5,r6,r5
    3480:	7904703a 	and	r2,r15,r4
    3484:	8146703a 	and	r3,r16,r5
    3488:	10c4b03a 	or	r2,r2,r3
    348c:	10000226 	beq	r2,zero,3498 <_fpadd_parts+0xe0>
    3490:	02400044 	movi	r9,1
    3494:	0015883a 	mov	r10,zero
    3498:	5a5eb03a 	or	r15,r11,r9
    349c:	62a0b03a 	or	r16,r12,r10
    34a0:	99400117 	ldw	r5,4(r19)
    34a4:	a8800117 	ldw	r2,4(r21)
    34a8:	28806e26 	beq	r5,r2,3664 <_fpadd_parts+0x2ac>
    34ac:	28006626 	beq	r5,zero,3648 <_fpadd_parts+0x290>
    34b0:	7c45c83a 	sub	r2,r15,r17
    34b4:	7889803a 	cmpltu	r4,r15,r2
    34b8:	8487c83a 	sub	r3,r16,r18
    34bc:	1909c83a 	sub	r4,r3,r4
    34c0:	100d883a 	mov	r6,r2
    34c4:	200f883a 	mov	r7,r4
    34c8:	38007716 	blt	r7,zero,36a8 <_fpadd_parts+0x2f0>
    34cc:	a5c00215 	stw	r23,8(r20)
    34d0:	a1c00415 	stw	r7,16(r20)
    34d4:	a0000115 	stw	zero,4(r20)
    34d8:	a1800315 	stw	r6,12(r20)
    34dc:	a2000317 	ldw	r8,12(r20)
    34e0:	a2400417 	ldw	r9,16(r20)
    34e4:	00bfffc4 	movi	r2,-1
    34e8:	408b883a 	add	r5,r8,r2
    34ec:	2a09803a 	cmpltu	r4,r5,r8
    34f0:	488d883a 	add	r6,r9,r2
    34f4:	01c40034 	movhi	r7,4096
    34f8:	39ffffc4 	addi	r7,r7,-1
    34fc:	218d883a 	add	r6,r4,r6
    3500:	39801736 	bltu	r7,r6,3560 <_fpadd_parts+0x1a8>
    3504:	31c06526 	beq	r6,r7,369c <_fpadd_parts+0x2e4>
    3508:	a3000217 	ldw	r12,8(r20)
    350c:	4209883a 	add	r4,r8,r8
    3510:	00bfffc4 	movi	r2,-1
    3514:	220f803a 	cmpltu	r7,r4,r8
    3518:	4a4b883a 	add	r5,r9,r9
    351c:	394f883a 	add	r7,r7,r5
    3520:	2095883a 	add	r10,r4,r2
    3524:	3897883a 	add	r11,r7,r2
    3528:	510d803a 	cmpltu	r6,r10,r4
    352c:	6099883a 	add	r12,r12,r2
    3530:	32d7883a 	add	r11,r6,r11
    3534:	00840034 	movhi	r2,4096
    3538:	10bfffc4 	addi	r2,r2,-1
    353c:	2011883a 	mov	r8,r4
    3540:	3813883a 	mov	r9,r7
    3544:	a1000315 	stw	r4,12(r20)
    3548:	a1c00415 	stw	r7,16(r20)
    354c:	a3000215 	stw	r12,8(r20)
    3550:	12c00336 	bltu	r2,r11,3560 <_fpadd_parts+0x1a8>
    3554:	58bfed1e 	bne	r11,r2,350c <_fpadd_parts+0x154>
    3558:	00bfff84 	movi	r2,-2
    355c:	12bfeb2e 	bgeu	r2,r10,350c <_fpadd_parts+0x154>
    3560:	a2800417 	ldw	r10,16(r20)
    3564:	008000c4 	movi	r2,3
    3568:	00c80034 	movhi	r3,8192
    356c:	18ffffc4 	addi	r3,r3,-1
    3570:	a2400317 	ldw	r9,12(r20)
    3574:	a0800015 	stw	r2,0(r20)
    3578:	1a802336 	bltu	r3,r10,3608 <_fpadd_parts+0x250>
    357c:	a027883a 	mov	r19,r20
    3580:	9805883a 	mov	r2,r19
    3584:	ddc00717 	ldw	r23,28(sp)
    3588:	dd800617 	ldw	r22,24(sp)
    358c:	dd400517 	ldw	r21,20(sp)
    3590:	dd000417 	ldw	r20,16(sp)
    3594:	dcc00317 	ldw	r19,12(sp)
    3598:	dc800217 	ldw	r18,8(sp)
    359c:	dc400117 	ldw	r17,4(sp)
    35a0:	dc000017 	ldw	r16,0(sp)
    35a4:	dec00804 	addi	sp,sp,32
    35a8:	f800283a 	ret
    35ac:	20fff41e 	bne	r4,r3,3580 <_fpadd_parts+0x1c8>
    35b0:	31000015 	stw	r4,0(r6)
    35b4:	98800117 	ldw	r2,4(r19)
    35b8:	30800115 	stw	r2,4(r6)
    35bc:	98c00217 	ldw	r3,8(r19)
    35c0:	30c00215 	stw	r3,8(r6)
    35c4:	98800317 	ldw	r2,12(r19)
    35c8:	30800315 	stw	r2,12(r6)
    35cc:	98c00417 	ldw	r3,16(r19)
    35d0:	30c00415 	stw	r3,16(r6)
    35d4:	98800117 	ldw	r2,4(r19)
    35d8:	28c00117 	ldw	r3,4(r5)
    35dc:	3027883a 	mov	r19,r6
    35e0:	10c4703a 	and	r2,r2,r3
    35e4:	30800115 	stw	r2,4(r6)
    35e8:	003fe506 	br	3580 <_fpadd_parts+0x1c8>
    35ec:	1dc02616 	blt	r3,r23,3688 <_fpadd_parts+0x2d0>
    35f0:	0023883a 	mov	r17,zero
    35f4:	182f883a 	mov	r23,r3
    35f8:	0025883a 	mov	r18,zero
    35fc:	003fa806 	br	34a0 <_fpadd_parts+0xe8>
    3600:	a827883a 	mov	r19,r21
    3604:	003fde06 	br	3580 <_fpadd_parts+0x1c8>
    3608:	01800044 	movi	r6,1
    360c:	500497fa 	slli	r2,r10,31
    3610:	4808d07a 	srli	r4,r9,1
    3614:	518ad83a 	srl	r5,r10,r6
    3618:	a2000217 	ldw	r8,8(r20)
    361c:	1108b03a 	or	r4,r2,r4
    3620:	0007883a 	mov	r3,zero
    3624:	4984703a 	and	r2,r9,r6
    3628:	208cb03a 	or	r6,r4,r2
    362c:	28ceb03a 	or	r7,r5,r3
    3630:	42000044 	addi	r8,r8,1
    3634:	a027883a 	mov	r19,r20
    3638:	a1c00415 	stw	r7,16(r20)
    363c:	a2000215 	stw	r8,8(r20)
    3640:	a1800315 	stw	r6,12(r20)
    3644:	003fce06 	br	3580 <_fpadd_parts+0x1c8>
    3648:	8bc5c83a 	sub	r2,r17,r15
    364c:	8889803a 	cmpltu	r4,r17,r2
    3650:	9407c83a 	sub	r3,r18,r16
    3654:	1909c83a 	sub	r4,r3,r4
    3658:	100d883a 	mov	r6,r2
    365c:	200f883a 	mov	r7,r4
    3660:	003f9906 	br	34c8 <_fpadd_parts+0x110>
    3664:	8bc5883a 	add	r2,r17,r15
    3668:	1449803a 	cmpltu	r4,r2,r17
    366c:	9407883a 	add	r3,r18,r16
    3670:	20c9883a 	add	r4,r4,r3
    3674:	a1400115 	stw	r5,4(r20)
    3678:	a5c00215 	stw	r23,8(r20)
    367c:	a0800315 	stw	r2,12(r20)
    3680:	a1000415 	stw	r4,16(r20)
    3684:	003fb606 	br	3560 <_fpadd_parts+0x1a8>
    3688:	001f883a 	mov	r15,zero
    368c:	0021883a 	mov	r16,zero
    3690:	003f8306 	br	34a0 <_fpadd_parts+0xe8>
    3694:	018dc83a 	sub	r6,zero,r6
    3698:	003f6706 	br	3438 <_fpadd_parts+0x80>
    369c:	00bfff84 	movi	r2,-2
    36a0:	117faf36 	bltu	r2,r5,3560 <_fpadd_parts+0x1a8>
    36a4:	003f9806 	br	3508 <_fpadd_parts+0x150>
    36a8:	0005883a 	mov	r2,zero
    36ac:	1189c83a 	sub	r4,r2,r6
    36b0:	1105803a 	cmpltu	r2,r2,r4
    36b4:	01cbc83a 	sub	r5,zero,r7
    36b8:	2885c83a 	sub	r2,r5,r2
    36bc:	01800044 	movi	r6,1
    36c0:	a1800115 	stw	r6,4(r20)
    36c4:	a5c00215 	stw	r23,8(r20)
    36c8:	a1000315 	stw	r4,12(r20)
    36cc:	a0800415 	stw	r2,16(r20)
    36d0:	003f8206 	br	34dc <_fpadd_parts+0x124>
    36d4:	203f7226 	beq	r4,zero,34a0 <_fpadd_parts+0xe8>
    36d8:	35bff804 	addi	r22,r6,-32
    36dc:	b9af883a 	add	r23,r23,r6
    36e0:	b0003116 	blt	r22,zero,37a8 <_fpadd_parts+0x3f0>
    36e4:	959ad83a 	srl	r13,r18,r22
    36e8:	001d883a 	mov	r14,zero
    36ec:	000f883a 	mov	r7,zero
    36f0:	01000044 	movi	r4,1
    36f4:	0011883a 	mov	r8,zero
    36f8:	b0002516 	blt	r22,zero,3790 <_fpadd_parts+0x3d8>
    36fc:	2594983a 	sll	r10,r4,r22
    3700:	0013883a 	mov	r9,zero
    3704:	00bfffc4 	movi	r2,-1
    3708:	4889883a 	add	r4,r9,r2
    370c:	508b883a 	add	r5,r10,r2
    3710:	224d803a 	cmpltu	r6,r4,r9
    3714:	314b883a 	add	r5,r6,r5
    3718:	8904703a 	and	r2,r17,r4
    371c:	9146703a 	and	r3,r18,r5
    3720:	10c4b03a 	or	r2,r2,r3
    3724:	10000226 	beq	r2,zero,3730 <_fpadd_parts+0x378>
    3728:	01c00044 	movi	r7,1
    372c:	0011883a 	mov	r8,zero
    3730:	69e2b03a 	or	r17,r13,r7
    3734:	7224b03a 	or	r18,r14,r8
    3738:	003f5906 	br	34a0 <_fpadd_parts+0xe8>
    373c:	8407883a 	add	r3,r16,r16
    3740:	008007c4 	movi	r2,31
    3744:	1185c83a 	sub	r2,r2,r6
    3748:	1886983a 	sll	r3,r3,r2
    374c:	7996d83a 	srl	r11,r15,r6
    3750:	8198d83a 	srl	r12,r16,r6
    3754:	1ad6b03a 	or	r11,r3,r11
    3758:	003f3e06 	br	3454 <_fpadd_parts+0x9c>
    375c:	2006d07a 	srli	r3,r4,1
    3760:	008007c4 	movi	r2,31
    3764:	1185c83a 	sub	r2,r2,r6
    3768:	1890d83a 	srl	r8,r3,r2
    376c:	218e983a 	sll	r7,r4,r6
    3770:	003f3e06 	br	346c <_fpadd_parts+0xb4>
    3774:	113f821e 	bne	r2,r4,3580 <_fpadd_parts+0x1c8>
    3778:	28c00117 	ldw	r3,4(r5)
    377c:	98800117 	ldw	r2,4(r19)
    3780:	10ff7f26 	beq	r2,r3,3580 <_fpadd_parts+0x1c8>
    3784:	04c00074 	movhi	r19,1
    3788:	9ce74f04 	addi	r19,r19,-25284
    378c:	003f7c06 	br	3580 <_fpadd_parts+0x1c8>
    3790:	2006d07a 	srli	r3,r4,1
    3794:	008007c4 	movi	r2,31
    3798:	1185c83a 	sub	r2,r2,r6
    379c:	1894d83a 	srl	r10,r3,r2
    37a0:	2192983a 	sll	r9,r4,r6
    37a4:	003fd706 	br	3704 <_fpadd_parts+0x34c>
    37a8:	9487883a 	add	r3,r18,r18
    37ac:	008007c4 	movi	r2,31
    37b0:	1185c83a 	sub	r2,r2,r6
    37b4:	1886983a 	sll	r3,r3,r2
    37b8:	899ad83a 	srl	r13,r17,r6
    37bc:	919cd83a 	srl	r14,r18,r6
    37c0:	1b5ab03a 	or	r13,r3,r13
    37c4:	003fc906 	br	36ec <_fpadd_parts+0x334>

000037c8 <__subdf3>:
    37c8:	deffea04 	addi	sp,sp,-88
    37cc:	dcc01415 	stw	r19,80(sp)
    37d0:	dcc00404 	addi	r19,sp,16
    37d4:	2011883a 	mov	r8,r4
    37d8:	2813883a 	mov	r9,r5
    37dc:	dc401315 	stw	r17,76(sp)
    37e0:	d809883a 	mov	r4,sp
    37e4:	980b883a 	mov	r5,r19
    37e8:	dc400904 	addi	r17,sp,36
    37ec:	dfc01515 	stw	ra,84(sp)
    37f0:	da400115 	stw	r9,4(sp)
    37f4:	d9c00315 	stw	r7,12(sp)
    37f8:	da000015 	stw	r8,0(sp)
    37fc:	d9800215 	stw	r6,8(sp)
    3800:	00049080 	call	4908 <__unpack_d>
    3804:	d9000204 	addi	r4,sp,8
    3808:	880b883a 	mov	r5,r17
    380c:	00049080 	call	4908 <__unpack_d>
    3810:	d8800a17 	ldw	r2,40(sp)
    3814:	880b883a 	mov	r5,r17
    3818:	9809883a 	mov	r4,r19
    381c:	d9800e04 	addi	r6,sp,56
    3820:	1080005c 	xori	r2,r2,1
    3824:	d8800a15 	stw	r2,40(sp)
    3828:	00033b80 	call	33b8 <_fpadd_parts>
    382c:	1009883a 	mov	r4,r2
    3830:	00045f40 	call	45f4 <__pack_d>
    3834:	dfc01517 	ldw	ra,84(sp)
    3838:	dcc01417 	ldw	r19,80(sp)
    383c:	dc401317 	ldw	r17,76(sp)
    3840:	dec01604 	addi	sp,sp,88
    3844:	f800283a 	ret

00003848 <__adddf3>:
    3848:	deffea04 	addi	sp,sp,-88
    384c:	dcc01415 	stw	r19,80(sp)
    3850:	dcc00404 	addi	r19,sp,16
    3854:	2011883a 	mov	r8,r4
    3858:	2813883a 	mov	r9,r5
    385c:	dc401315 	stw	r17,76(sp)
    3860:	d809883a 	mov	r4,sp
    3864:	980b883a 	mov	r5,r19
    3868:	dc400904 	addi	r17,sp,36
    386c:	dfc01515 	stw	ra,84(sp)
    3870:	da400115 	stw	r9,4(sp)
    3874:	d9c00315 	stw	r7,12(sp)
    3878:	da000015 	stw	r8,0(sp)
    387c:	d9800215 	stw	r6,8(sp)
    3880:	00049080 	call	4908 <__unpack_d>
    3884:	d9000204 	addi	r4,sp,8
    3888:	880b883a 	mov	r5,r17
    388c:	00049080 	call	4908 <__unpack_d>
    3890:	d9800e04 	addi	r6,sp,56
    3894:	9809883a 	mov	r4,r19
    3898:	880b883a 	mov	r5,r17
    389c:	00033b80 	call	33b8 <_fpadd_parts>
    38a0:	1009883a 	mov	r4,r2
    38a4:	00045f40 	call	45f4 <__pack_d>
    38a8:	dfc01517 	ldw	ra,84(sp)
    38ac:	dcc01417 	ldw	r19,80(sp)
    38b0:	dc401317 	ldw	r17,76(sp)
    38b4:	dec01604 	addi	sp,sp,88
    38b8:	f800283a 	ret

000038bc <__muldf3>:
    38bc:	deffe004 	addi	sp,sp,-128
    38c0:	dc401815 	stw	r17,96(sp)
    38c4:	dc400404 	addi	r17,sp,16
    38c8:	2011883a 	mov	r8,r4
    38cc:	2813883a 	mov	r9,r5
    38d0:	dc001715 	stw	r16,92(sp)
    38d4:	d809883a 	mov	r4,sp
    38d8:	880b883a 	mov	r5,r17
    38dc:	dc000904 	addi	r16,sp,36
    38e0:	dfc01f15 	stw	ra,124(sp)
    38e4:	da400115 	stw	r9,4(sp)
    38e8:	d9c00315 	stw	r7,12(sp)
    38ec:	da000015 	stw	r8,0(sp)
    38f0:	d9800215 	stw	r6,8(sp)
    38f4:	ddc01e15 	stw	r23,120(sp)
    38f8:	dd801d15 	stw	r22,116(sp)
    38fc:	dd401c15 	stw	r21,112(sp)
    3900:	dd001b15 	stw	r20,108(sp)
    3904:	dcc01a15 	stw	r19,104(sp)
    3908:	dc801915 	stw	r18,100(sp)
    390c:	00049080 	call	4908 <__unpack_d>
    3910:	d9000204 	addi	r4,sp,8
    3914:	800b883a 	mov	r5,r16
    3918:	00049080 	call	4908 <__unpack_d>
    391c:	d9000417 	ldw	r4,16(sp)
    3920:	00800044 	movi	r2,1
    3924:	1100102e 	bgeu	r2,r4,3968 <__muldf3+0xac>
    3928:	d8c00917 	ldw	r3,36(sp)
    392c:	10c0062e 	bgeu	r2,r3,3948 <__muldf3+0x8c>
    3930:	00800104 	movi	r2,4
    3934:	20800a26 	beq	r4,r2,3960 <__muldf3+0xa4>
    3938:	1880cc26 	beq	r3,r2,3c6c <__muldf3+0x3b0>
    393c:	00800084 	movi	r2,2
    3940:	20800926 	beq	r4,r2,3968 <__muldf3+0xac>
    3944:	1880191e 	bne	r3,r2,39ac <__muldf3+0xf0>
    3948:	d8c00a17 	ldw	r3,40(sp)
    394c:	d8800517 	ldw	r2,20(sp)
    3950:	8009883a 	mov	r4,r16
    3954:	10c4c03a 	cmpne	r2,r2,r3
    3958:	d8800a15 	stw	r2,40(sp)
    395c:	00000706 	br	397c <__muldf3+0xc0>
    3960:	00800084 	movi	r2,2
    3964:	1880c326 	beq	r3,r2,3c74 <__muldf3+0x3b8>
    3968:	d8800517 	ldw	r2,20(sp)
    396c:	d8c00a17 	ldw	r3,40(sp)
    3970:	8809883a 	mov	r4,r17
    3974:	10c4c03a 	cmpne	r2,r2,r3
    3978:	d8800515 	stw	r2,20(sp)
    397c:	00045f40 	call	45f4 <__pack_d>
    3980:	dfc01f17 	ldw	ra,124(sp)
    3984:	ddc01e17 	ldw	r23,120(sp)
    3988:	dd801d17 	ldw	r22,116(sp)
    398c:	dd401c17 	ldw	r21,112(sp)
    3990:	dd001b17 	ldw	r20,108(sp)
    3994:	dcc01a17 	ldw	r19,104(sp)
    3998:	dc801917 	ldw	r18,100(sp)
    399c:	dc401817 	ldw	r17,96(sp)
    39a0:	dc001717 	ldw	r16,92(sp)
    39a4:	dec02004 	addi	sp,sp,128
    39a8:	f800283a 	ret
    39ac:	dd800717 	ldw	r22,28(sp)
    39b0:	dc800c17 	ldw	r18,48(sp)
    39b4:	002b883a 	mov	r21,zero
    39b8:	0023883a 	mov	r17,zero
    39bc:	a80b883a 	mov	r5,r21
    39c0:	b00d883a 	mov	r6,r22
    39c4:	880f883a 	mov	r7,r17
    39c8:	ddc00817 	ldw	r23,32(sp)
    39cc:	dcc00d17 	ldw	r19,52(sp)
    39d0:	9009883a 	mov	r4,r18
    39d4:	00041e00 	call	41e0 <__muldi3>
    39d8:	001b883a 	mov	r13,zero
    39dc:	680f883a 	mov	r7,r13
    39e0:	b009883a 	mov	r4,r22
    39e4:	000b883a 	mov	r5,zero
    39e8:	980d883a 	mov	r6,r19
    39ec:	b82d883a 	mov	r22,r23
    39f0:	002f883a 	mov	r23,zero
    39f4:	db401615 	stw	r13,88(sp)
    39f8:	d8801315 	stw	r2,76(sp)
    39fc:	d8c01415 	stw	r3,80(sp)
    3a00:	dcc01515 	stw	r19,84(sp)
    3a04:	00041e00 	call	41e0 <__muldi3>
    3a08:	b00d883a 	mov	r6,r22
    3a0c:	000b883a 	mov	r5,zero
    3a10:	9009883a 	mov	r4,r18
    3a14:	b80f883a 	mov	r7,r23
    3a18:	1021883a 	mov	r16,r2
    3a1c:	1823883a 	mov	r17,r3
    3a20:	00041e00 	call	41e0 <__muldi3>
    3a24:	8085883a 	add	r2,r16,r2
    3a28:	140d803a 	cmpltu	r6,r2,r16
    3a2c:	88c7883a 	add	r3,r17,r3
    3a30:	30cd883a 	add	r6,r6,r3
    3a34:	1029883a 	mov	r20,r2
    3a38:	302b883a 	mov	r21,r6
    3a3c:	da801317 	ldw	r10,76(sp)
    3a40:	dac01417 	ldw	r11,80(sp)
    3a44:	db001517 	ldw	r12,84(sp)
    3a48:	db401617 	ldw	r13,88(sp)
    3a4c:	3440612e 	bgeu	r6,r17,3bd4 <__muldf3+0x318>
    3a50:	0009883a 	mov	r4,zero
    3a54:	5105883a 	add	r2,r10,r4
    3a58:	128d803a 	cmpltu	r6,r2,r10
    3a5c:	5d07883a 	add	r3,r11,r20
    3a60:	30cd883a 	add	r6,r6,r3
    3a64:	0021883a 	mov	r16,zero
    3a68:	04400044 	movi	r17,1
    3a6c:	1025883a 	mov	r18,r2
    3a70:	3027883a 	mov	r19,r6
    3a74:	32c06236 	bltu	r6,r11,3c00 <__muldf3+0x344>
    3a78:	59807a26 	beq	r11,r6,3c64 <__muldf3+0x3a8>
    3a7c:	680b883a 	mov	r5,r13
    3a80:	b80f883a 	mov	r7,r23
    3a84:	6009883a 	mov	r4,r12
    3a88:	b00d883a 	mov	r6,r22
    3a8c:	00041e00 	call	41e0 <__muldi3>
    3a90:	1009883a 	mov	r4,r2
    3a94:	000f883a 	mov	r7,zero
    3a98:	1545883a 	add	r2,r2,r21
    3a9c:	1111803a 	cmpltu	r8,r2,r4
    3aa0:	19c7883a 	add	r3,r3,r7
    3aa4:	40c7883a 	add	r3,r8,r3
    3aa8:	88cb883a 	add	r5,r17,r3
    3aac:	d8c00617 	ldw	r3,24(sp)
    3ab0:	8089883a 	add	r4,r16,r2
    3ab4:	d8800b17 	ldw	r2,44(sp)
    3ab8:	18c00104 	addi	r3,r3,4
    3abc:	240d803a 	cmpltu	r6,r4,r16
    3ac0:	10c7883a 	add	r3,r2,r3
    3ac4:	2013883a 	mov	r9,r4
    3ac8:	d8800a17 	ldw	r2,40(sp)
    3acc:	d9000517 	ldw	r4,20(sp)
    3ad0:	314d883a 	add	r6,r6,r5
    3ad4:	3015883a 	mov	r10,r6
    3ad8:	2088c03a 	cmpne	r4,r4,r2
    3adc:	00880034 	movhi	r2,8192
    3ae0:	10bfffc4 	addi	r2,r2,-1
    3ae4:	d9000f15 	stw	r4,60(sp)
    3ae8:	d8c01015 	stw	r3,64(sp)
    3aec:	1180162e 	bgeu	r2,r6,3b48 <__muldf3+0x28c>
    3af0:	1811883a 	mov	r8,r3
    3af4:	101f883a 	mov	r15,r2
    3af8:	980497fa 	slli	r2,r19,31
    3afc:	9016d07a 	srli	r11,r18,1
    3b00:	500697fa 	slli	r3,r10,31
    3b04:	480cd07a 	srli	r6,r9,1
    3b08:	500ed07a 	srli	r7,r10,1
    3b0c:	12d6b03a 	or	r11,r2,r11
    3b10:	00800044 	movi	r2,1
    3b14:	198cb03a 	or	r6,r3,r6
    3b18:	4888703a 	and	r4,r9,r2
    3b1c:	9818d07a 	srli	r12,r19,1
    3b20:	001b883a 	mov	r13,zero
    3b24:	03a00034 	movhi	r14,32768
    3b28:	3013883a 	mov	r9,r6
    3b2c:	3815883a 	mov	r10,r7
    3b30:	4091883a 	add	r8,r8,r2
    3b34:	20000226 	beq	r4,zero,3b40 <__muldf3+0x284>
    3b38:	5b64b03a 	or	r18,r11,r13
    3b3c:	63a6b03a 	or	r19,r12,r14
    3b40:	7abfed36 	bltu	r15,r10,3af8 <__muldf3+0x23c>
    3b44:	da001015 	stw	r8,64(sp)
    3b48:	00840034 	movhi	r2,4096
    3b4c:	10bfffc4 	addi	r2,r2,-1
    3b50:	12801436 	bltu	r2,r10,3ba4 <__muldf3+0x2e8>
    3b54:	da001017 	ldw	r8,64(sp)
    3b58:	101f883a 	mov	r15,r2
    3b5c:	4a45883a 	add	r2,r9,r9
    3b60:	124d803a 	cmpltu	r6,r2,r9
    3b64:	5287883a 	add	r3,r10,r10
    3b68:	9497883a 	add	r11,r18,r18
    3b6c:	5c8f803a 	cmpltu	r7,r11,r18
    3b70:	9cd9883a 	add	r12,r19,r19
    3b74:	01000044 	movi	r4,1
    3b78:	30cd883a 	add	r6,r6,r3
    3b7c:	3b0f883a 	add	r7,r7,r12
    3b80:	423fffc4 	addi	r8,r8,-1
    3b84:	1013883a 	mov	r9,r2
    3b88:	3015883a 	mov	r10,r6
    3b8c:	111ab03a 	or	r13,r2,r4
    3b90:	98003016 	blt	r19,zero,3c54 <__muldf3+0x398>
    3b94:	5825883a 	mov	r18,r11
    3b98:	3827883a 	mov	r19,r7
    3b9c:	7abfef2e 	bgeu	r15,r10,3b5c <__muldf3+0x2a0>
    3ba0:	da001015 	stw	r8,64(sp)
    3ba4:	00803fc4 	movi	r2,255
    3ba8:	488e703a 	and	r7,r9,r2
    3bac:	00802004 	movi	r2,128
    3bb0:	0007883a 	mov	r3,zero
    3bb4:	0011883a 	mov	r8,zero
    3bb8:	38801826 	beq	r7,r2,3c1c <__muldf3+0x360>
    3bbc:	008000c4 	movi	r2,3
    3bc0:	d9000e04 	addi	r4,sp,56
    3bc4:	da801215 	stw	r10,72(sp)
    3bc8:	d8800e15 	stw	r2,56(sp)
    3bcc:	da401115 	stw	r9,68(sp)
    3bd0:	003f6a06 	br	397c <__muldf3+0xc0>
    3bd4:	89802126 	beq	r17,r6,3c5c <__muldf3+0x3a0>
    3bd8:	0009883a 	mov	r4,zero
    3bdc:	5105883a 	add	r2,r10,r4
    3be0:	128d803a 	cmpltu	r6,r2,r10
    3be4:	5d07883a 	add	r3,r11,r20
    3be8:	30cd883a 	add	r6,r6,r3
    3bec:	0021883a 	mov	r16,zero
    3bf0:	0023883a 	mov	r17,zero
    3bf4:	1025883a 	mov	r18,r2
    3bf8:	3027883a 	mov	r19,r6
    3bfc:	32ff9e2e 	bgeu	r6,r11,3a78 <__muldf3+0x1bc>
    3c00:	00800044 	movi	r2,1
    3c04:	8089883a 	add	r4,r16,r2
    3c08:	240d803a 	cmpltu	r6,r4,r16
    3c0c:	344d883a 	add	r6,r6,r17
    3c10:	2021883a 	mov	r16,r4
    3c14:	3023883a 	mov	r17,r6
    3c18:	003f9806 	br	3a7c <__muldf3+0x1c0>
    3c1c:	403fe71e 	bne	r8,zero,3bbc <__muldf3+0x300>
    3c20:	01004004 	movi	r4,256
    3c24:	4904703a 	and	r2,r9,r4
    3c28:	10c4b03a 	or	r2,r2,r3
    3c2c:	103fe31e 	bne	r2,zero,3bbc <__muldf3+0x300>
    3c30:	94c4b03a 	or	r2,r18,r19
    3c34:	103fe126 	beq	r2,zero,3bbc <__muldf3+0x300>
    3c38:	49c5883a 	add	r2,r9,r7
    3c3c:	1251803a 	cmpltu	r8,r2,r9
    3c40:	4291883a 	add	r8,r8,r10
    3c44:	013fc004 	movi	r4,-256
    3c48:	1112703a 	and	r9,r2,r4
    3c4c:	4015883a 	mov	r10,r8
    3c50:	003fda06 	br	3bbc <__muldf3+0x300>
    3c54:	6813883a 	mov	r9,r13
    3c58:	003fce06 	br	3b94 <__muldf3+0x2d8>
    3c5c:	143f7c36 	bltu	r2,r16,3a50 <__muldf3+0x194>
    3c60:	003fdd06 	br	3bd8 <__muldf3+0x31c>
    3c64:	12bf852e 	bgeu	r2,r10,3a7c <__muldf3+0x1c0>
    3c68:	003fe506 	br	3c00 <__muldf3+0x344>
    3c6c:	00800084 	movi	r2,2
    3c70:	20bf351e 	bne	r4,r2,3948 <__muldf3+0x8c>
    3c74:	01000074 	movhi	r4,1
    3c78:	21274f04 	addi	r4,r4,-25284
    3c7c:	003f3f06 	br	397c <__muldf3+0xc0>

00003c80 <__eqdf2>:
    3c80:	deffef04 	addi	sp,sp,-68
    3c84:	dc400f15 	stw	r17,60(sp)
    3c88:	dc400404 	addi	r17,sp,16
    3c8c:	2005883a 	mov	r2,r4
    3c90:	2807883a 	mov	r3,r5
    3c94:	dc000e15 	stw	r16,56(sp)
    3c98:	d809883a 	mov	r4,sp
    3c9c:	880b883a 	mov	r5,r17
    3ca0:	dc000904 	addi	r16,sp,36
    3ca4:	d8c00115 	stw	r3,4(sp)
    3ca8:	d8800015 	stw	r2,0(sp)
    3cac:	d9800215 	stw	r6,8(sp)
    3cb0:	dfc01015 	stw	ra,64(sp)
    3cb4:	d9c00315 	stw	r7,12(sp)
    3cb8:	00049080 	call	4908 <__unpack_d>
    3cbc:	d9000204 	addi	r4,sp,8
    3cc0:	800b883a 	mov	r5,r16
    3cc4:	00049080 	call	4908 <__unpack_d>
    3cc8:	d8800417 	ldw	r2,16(sp)
    3ccc:	00c00044 	movi	r3,1
    3cd0:	180d883a 	mov	r6,r3
    3cd4:	1880062e 	bgeu	r3,r2,3cf0 <__eqdf2+0x70>
    3cd8:	d8800917 	ldw	r2,36(sp)
    3cdc:	8809883a 	mov	r4,r17
    3ce0:	800b883a 	mov	r5,r16
    3ce4:	1880022e 	bgeu	r3,r2,3cf0 <__eqdf2+0x70>
    3ce8:	0004a400 	call	4a40 <__fpcmp_parts_d>
    3cec:	100d883a 	mov	r6,r2
    3cf0:	3005883a 	mov	r2,r6
    3cf4:	dfc01017 	ldw	ra,64(sp)
    3cf8:	dc400f17 	ldw	r17,60(sp)
    3cfc:	dc000e17 	ldw	r16,56(sp)
    3d00:	dec01104 	addi	sp,sp,68
    3d04:	f800283a 	ret

00003d08 <__gtdf2>:
    3d08:	deffef04 	addi	sp,sp,-68
    3d0c:	dc400f15 	stw	r17,60(sp)
    3d10:	dc400404 	addi	r17,sp,16
    3d14:	2005883a 	mov	r2,r4
    3d18:	2807883a 	mov	r3,r5
    3d1c:	dc000e15 	stw	r16,56(sp)
    3d20:	d809883a 	mov	r4,sp
    3d24:	880b883a 	mov	r5,r17
    3d28:	dc000904 	addi	r16,sp,36
    3d2c:	d8c00115 	stw	r3,4(sp)
    3d30:	d8800015 	stw	r2,0(sp)
    3d34:	d9800215 	stw	r6,8(sp)
    3d38:	dfc01015 	stw	ra,64(sp)
    3d3c:	d9c00315 	stw	r7,12(sp)
    3d40:	00049080 	call	4908 <__unpack_d>
    3d44:	d9000204 	addi	r4,sp,8
    3d48:	800b883a 	mov	r5,r16
    3d4c:	00049080 	call	4908 <__unpack_d>
    3d50:	d8800417 	ldw	r2,16(sp)
    3d54:	00c00044 	movi	r3,1
    3d58:	01bfffc4 	movi	r6,-1
    3d5c:	1880062e 	bgeu	r3,r2,3d78 <__gtdf2+0x70>
    3d60:	d8800917 	ldw	r2,36(sp)
    3d64:	8809883a 	mov	r4,r17
    3d68:	800b883a 	mov	r5,r16
    3d6c:	1880022e 	bgeu	r3,r2,3d78 <__gtdf2+0x70>
    3d70:	0004a400 	call	4a40 <__fpcmp_parts_d>
    3d74:	100d883a 	mov	r6,r2
    3d78:	3005883a 	mov	r2,r6
    3d7c:	dfc01017 	ldw	ra,64(sp)
    3d80:	dc400f17 	ldw	r17,60(sp)
    3d84:	dc000e17 	ldw	r16,56(sp)
    3d88:	dec01104 	addi	sp,sp,68
    3d8c:	f800283a 	ret

00003d90 <__gedf2>:
    3d90:	deffef04 	addi	sp,sp,-68
    3d94:	dc400f15 	stw	r17,60(sp)
    3d98:	dc400404 	addi	r17,sp,16
    3d9c:	2005883a 	mov	r2,r4
    3da0:	2807883a 	mov	r3,r5
    3da4:	dc000e15 	stw	r16,56(sp)
    3da8:	d809883a 	mov	r4,sp
    3dac:	880b883a 	mov	r5,r17
    3db0:	dc000904 	addi	r16,sp,36
    3db4:	d8c00115 	stw	r3,4(sp)
    3db8:	d8800015 	stw	r2,0(sp)
    3dbc:	d9800215 	stw	r6,8(sp)
    3dc0:	dfc01015 	stw	ra,64(sp)
    3dc4:	d9c00315 	stw	r7,12(sp)
    3dc8:	00049080 	call	4908 <__unpack_d>
    3dcc:	d9000204 	addi	r4,sp,8
    3dd0:	800b883a 	mov	r5,r16
    3dd4:	00049080 	call	4908 <__unpack_d>
    3dd8:	d8800417 	ldw	r2,16(sp)
    3ddc:	00c00044 	movi	r3,1
    3de0:	01bfffc4 	movi	r6,-1
    3de4:	1880062e 	bgeu	r3,r2,3e00 <__gedf2+0x70>
    3de8:	d8800917 	ldw	r2,36(sp)
    3dec:	8809883a 	mov	r4,r17
    3df0:	800b883a 	mov	r5,r16
    3df4:	1880022e 	bgeu	r3,r2,3e00 <__gedf2+0x70>
    3df8:	0004a400 	call	4a40 <__fpcmp_parts_d>
    3dfc:	100d883a 	mov	r6,r2
    3e00:	3005883a 	mov	r2,r6
    3e04:	dfc01017 	ldw	ra,64(sp)
    3e08:	dc400f17 	ldw	r17,60(sp)
    3e0c:	dc000e17 	ldw	r16,56(sp)
    3e10:	dec01104 	addi	sp,sp,68
    3e14:	f800283a 	ret

00003e18 <__floatsidf>:
    3e18:	2006d7fa 	srli	r3,r4,31
    3e1c:	defff604 	addi	sp,sp,-40
    3e20:	008000c4 	movi	r2,3
    3e24:	dfc00915 	stw	ra,36(sp)
    3e28:	dcc00815 	stw	r19,32(sp)
    3e2c:	dc800715 	stw	r18,28(sp)
    3e30:	dc400615 	stw	r17,24(sp)
    3e34:	dc000515 	stw	r16,20(sp)
    3e38:	d8800015 	stw	r2,0(sp)
    3e3c:	d8c00115 	stw	r3,4(sp)
    3e40:	20000f1e 	bne	r4,zero,3e80 <__floatsidf+0x68>
    3e44:	00800084 	movi	r2,2
    3e48:	d8800015 	stw	r2,0(sp)
    3e4c:	d809883a 	mov	r4,sp
    3e50:	00045f40 	call	45f4 <__pack_d>
    3e54:	1009883a 	mov	r4,r2
    3e58:	180b883a 	mov	r5,r3
    3e5c:	2005883a 	mov	r2,r4
    3e60:	2807883a 	mov	r3,r5
    3e64:	dfc00917 	ldw	ra,36(sp)
    3e68:	dcc00817 	ldw	r19,32(sp)
    3e6c:	dc800717 	ldw	r18,28(sp)
    3e70:	dc400617 	ldw	r17,24(sp)
    3e74:	dc000517 	ldw	r16,20(sp)
    3e78:	dec00a04 	addi	sp,sp,40
    3e7c:	f800283a 	ret
    3e80:	00800f04 	movi	r2,60
    3e84:	1807003a 	cmpeq	r3,r3,zero
    3e88:	d8800215 	stw	r2,8(sp)
    3e8c:	18001126 	beq	r3,zero,3ed4 <__floatsidf+0xbc>
    3e90:	0027883a 	mov	r19,zero
    3e94:	2025883a 	mov	r18,r4
    3e98:	d9000315 	stw	r4,12(sp)
    3e9c:	dcc00415 	stw	r19,16(sp)
    3ea0:	00042780 	call	4278 <__clzsi2>
    3ea4:	11000744 	addi	r4,r2,29
    3ea8:	013fe80e 	bge	zero,r4,3e4c <__floatsidf+0x34>
    3eac:	10bfff44 	addi	r2,r2,-3
    3eb0:	10000c16 	blt	r2,zero,3ee4 <__floatsidf+0xcc>
    3eb4:	90a2983a 	sll	r17,r18,r2
    3eb8:	0021883a 	mov	r16,zero
    3ebc:	d8800217 	ldw	r2,8(sp)
    3ec0:	dc400415 	stw	r17,16(sp)
    3ec4:	dc000315 	stw	r16,12(sp)
    3ec8:	1105c83a 	sub	r2,r2,r4
    3ecc:	d8800215 	stw	r2,8(sp)
    3ed0:	003fde06 	br	3e4c <__floatsidf+0x34>
    3ed4:	00a00034 	movhi	r2,32768
    3ed8:	20800a26 	beq	r4,r2,3f04 <__floatsidf+0xec>
    3edc:	0109c83a 	sub	r4,zero,r4
    3ee0:	003feb06 	br	3e90 <__floatsidf+0x78>
    3ee4:	9006d07a 	srli	r3,r18,1
    3ee8:	008007c4 	movi	r2,31
    3eec:	1105c83a 	sub	r2,r2,r4
    3ef0:	1886d83a 	srl	r3,r3,r2
    3ef4:	9922983a 	sll	r17,r19,r4
    3ef8:	9120983a 	sll	r16,r18,r4
    3efc:	1c62b03a 	or	r17,r3,r17
    3f00:	003fee06 	br	3ebc <__floatsidf+0xa4>
    3f04:	0009883a 	mov	r4,zero
    3f08:	01707834 	movhi	r5,49632
    3f0c:	003fd306 	br	3e5c <__floatsidf+0x44>

00003f10 <__fixdfsi>:
    3f10:	defff804 	addi	sp,sp,-32
    3f14:	2005883a 	mov	r2,r4
    3f18:	2807883a 	mov	r3,r5
    3f1c:	d809883a 	mov	r4,sp
    3f20:	d9400204 	addi	r5,sp,8
    3f24:	d8c00115 	stw	r3,4(sp)
    3f28:	d8800015 	stw	r2,0(sp)
    3f2c:	dfc00715 	stw	ra,28(sp)
    3f30:	00049080 	call	4908 <__unpack_d>
    3f34:	d8c00217 	ldw	r3,8(sp)
    3f38:	00800084 	movi	r2,2
    3f3c:	1880051e 	bne	r3,r2,3f54 <__fixdfsi+0x44>
    3f40:	0007883a 	mov	r3,zero
    3f44:	1805883a 	mov	r2,r3
    3f48:	dfc00717 	ldw	ra,28(sp)
    3f4c:	dec00804 	addi	sp,sp,32
    3f50:	f800283a 	ret
    3f54:	00800044 	movi	r2,1
    3f58:	10fff92e 	bgeu	r2,r3,3f40 <__fixdfsi+0x30>
    3f5c:	00800104 	movi	r2,4
    3f60:	18800426 	beq	r3,r2,3f74 <__fixdfsi+0x64>
    3f64:	d8c00417 	ldw	r3,16(sp)
    3f68:	183ff516 	blt	r3,zero,3f40 <__fixdfsi+0x30>
    3f6c:	00800784 	movi	r2,30
    3f70:	10c0080e 	bge	r2,r3,3f94 <__fixdfsi+0x84>
    3f74:	d8800317 	ldw	r2,12(sp)
    3f78:	1000121e 	bne	r2,zero,3fc4 <__fixdfsi+0xb4>
    3f7c:	00e00034 	movhi	r3,32768
    3f80:	18ffffc4 	addi	r3,r3,-1
    3f84:	1805883a 	mov	r2,r3
    3f88:	dfc00717 	ldw	ra,28(sp)
    3f8c:	dec00804 	addi	sp,sp,32
    3f90:	f800283a 	ret
    3f94:	00800f04 	movi	r2,60
    3f98:	10d1c83a 	sub	r8,r2,r3
    3f9c:	40bff804 	addi	r2,r8,-32
    3fa0:	d9800517 	ldw	r6,20(sp)
    3fa4:	d9c00617 	ldw	r7,24(sp)
    3fa8:	10000816 	blt	r2,zero,3fcc <__fixdfsi+0xbc>
    3fac:	3888d83a 	srl	r4,r7,r2
    3fb0:	d8800317 	ldw	r2,12(sp)
    3fb4:	2007883a 	mov	r3,r4
    3fb8:	103fe226 	beq	r2,zero,3f44 <__fixdfsi+0x34>
    3fbc:	0107c83a 	sub	r3,zero,r4
    3fc0:	003fe006 	br	3f44 <__fixdfsi+0x34>
    3fc4:	00e00034 	movhi	r3,32768
    3fc8:	003fde06 	br	3f44 <__fixdfsi+0x34>
    3fcc:	39c7883a 	add	r3,r7,r7
    3fd0:	008007c4 	movi	r2,31
    3fd4:	1205c83a 	sub	r2,r2,r8
    3fd8:	1886983a 	sll	r3,r3,r2
    3fdc:	3208d83a 	srl	r4,r6,r8
    3fe0:	1908b03a 	or	r4,r3,r4
    3fe4:	003ff206 	br	3fb0 <__fixdfsi+0xa0>

00003fe8 <__make_dp>:
    3fe8:	defff904 	addi	sp,sp,-28
    3fec:	d8c00717 	ldw	r3,28(sp)
    3ff0:	d9000015 	stw	r4,0(sp)
    3ff4:	d809883a 	mov	r4,sp
    3ff8:	dfc00515 	stw	ra,20(sp)
    3ffc:	d9c00615 	stw	r7,24(sp)
    4000:	d9400115 	stw	r5,4(sp)
    4004:	d9800215 	stw	r6,8(sp)
    4008:	d8c00415 	stw	r3,16(sp)
    400c:	d9c00315 	stw	r7,12(sp)
    4010:	00045f40 	call	45f4 <__pack_d>
    4014:	dfc00517 	ldw	ra,20(sp)
    4018:	dec00704 	addi	sp,sp,28
    401c:	f800283a 	ret

00004020 <__truncdfsf2>:
    4020:	defff804 	addi	sp,sp,-32
    4024:	2005883a 	mov	r2,r4
    4028:	2807883a 	mov	r3,r5
    402c:	d809883a 	mov	r4,sp
    4030:	d9400204 	addi	r5,sp,8
    4034:	d8c00115 	stw	r3,4(sp)
    4038:	d8800015 	stw	r2,0(sp)
    403c:	dfc00715 	stw	ra,28(sp)
    4040:	00049080 	call	4908 <__unpack_d>
    4044:	d9c00517 	ldw	r7,20(sp)
    4048:	da000617 	ldw	r8,24(sp)
    404c:	02d00034 	movhi	r11,16384
    4050:	5affffc4 	addi	r11,r11,-1
    4054:	3812d7ba 	srli	r9,r7,30
    4058:	401a90ba 	slli	r13,r8,2
    405c:	3ac4703a 	and	r2,r7,r11
    4060:	0007883a 	mov	r3,zero
    4064:	6a52b03a 	or	r9,r13,r9
    4068:	10c4b03a 	or	r2,r2,r3
    406c:	d9000217 	ldw	r4,8(sp)
    4070:	d9400317 	ldw	r5,12(sp)
    4074:	d9800417 	ldw	r6,16(sp)
    4078:	480f883a 	mov	r7,r9
    407c:	10000126 	beq	r2,zero,4084 <__truncdfsf2+0x64>
    4080:	49c00054 	ori	r7,r9,1
    4084:	00045c80 	call	45c8 <__make_fp>
    4088:	dfc00717 	ldw	ra,28(sp)
    408c:	dec00804 	addi	sp,sp,32
    4090:	f800283a 	ret

00004094 <udivmodsi4>:
    4094:	29001b2e 	bgeu	r5,r4,4104 <udivmodsi4+0x70>
    4098:	28001a16 	blt	r5,zero,4104 <udivmodsi4+0x70>
    409c:	00800044 	movi	r2,1
    40a0:	0007883a 	mov	r3,zero
    40a4:	01c007c4 	movi	r7,31
    40a8:	00000306 	br	40b8 <udivmodsi4+0x24>
    40ac:	19c01326 	beq	r3,r7,40fc <udivmodsi4+0x68>
    40b0:	18c00044 	addi	r3,r3,1
    40b4:	28000416 	blt	r5,zero,40c8 <udivmodsi4+0x34>
    40b8:	294b883a 	add	r5,r5,r5
    40bc:	1085883a 	add	r2,r2,r2
    40c0:	293ffa36 	bltu	r5,r4,40ac <udivmodsi4+0x18>
    40c4:	10000d26 	beq	r2,zero,40fc <udivmodsi4+0x68>
    40c8:	0007883a 	mov	r3,zero
    40cc:	21400236 	bltu	r4,r5,40d8 <udivmodsi4+0x44>
    40d0:	2149c83a 	sub	r4,r4,r5
    40d4:	1886b03a 	or	r3,r3,r2
    40d8:	1004d07a 	srli	r2,r2,1
    40dc:	280ad07a 	srli	r5,r5,1
    40e0:	103ffa1e 	bne	r2,zero,40cc <udivmodsi4+0x38>
    40e4:	30000226 	beq	r6,zero,40f0 <udivmodsi4+0x5c>
    40e8:	2005883a 	mov	r2,r4
    40ec:	f800283a 	ret
    40f0:	1809883a 	mov	r4,r3
    40f4:	2005883a 	mov	r2,r4
    40f8:	f800283a 	ret
    40fc:	0007883a 	mov	r3,zero
    4100:	003ff806 	br	40e4 <udivmodsi4+0x50>
    4104:	00800044 	movi	r2,1
    4108:	0007883a 	mov	r3,zero
    410c:	003fef06 	br	40cc <udivmodsi4+0x38>

00004110 <__divsi3>:
    4110:	defffe04 	addi	sp,sp,-8
    4114:	dc000015 	stw	r16,0(sp)
    4118:	dfc00115 	stw	ra,4(sp)
    411c:	0021883a 	mov	r16,zero
    4120:	20000c16 	blt	r4,zero,4154 <__divsi3+0x44>
    4124:	000d883a 	mov	r6,zero
    4128:	28000e16 	blt	r5,zero,4164 <__divsi3+0x54>
    412c:	00040940 	call	4094 <udivmodsi4>
    4130:	1007883a 	mov	r3,r2
    4134:	8005003a 	cmpeq	r2,r16,zero
    4138:	1000011e 	bne	r2,zero,4140 <__divsi3+0x30>
    413c:	00c7c83a 	sub	r3,zero,r3
    4140:	1805883a 	mov	r2,r3
    4144:	dfc00117 	ldw	ra,4(sp)
    4148:	dc000017 	ldw	r16,0(sp)
    414c:	dec00204 	addi	sp,sp,8
    4150:	f800283a 	ret
    4154:	0109c83a 	sub	r4,zero,r4
    4158:	04000044 	movi	r16,1
    415c:	000d883a 	mov	r6,zero
    4160:	283ff20e 	bge	r5,zero,412c <__divsi3+0x1c>
    4164:	014bc83a 	sub	r5,zero,r5
    4168:	8021003a 	cmpeq	r16,r16,zero
    416c:	003fef06 	br	412c <__divsi3+0x1c>

00004170 <__modsi3>:
    4170:	deffff04 	addi	sp,sp,-4
    4174:	dfc00015 	stw	ra,0(sp)
    4178:	01800044 	movi	r6,1
    417c:	2807883a 	mov	r3,r5
    4180:	20000416 	blt	r4,zero,4194 <__modsi3+0x24>
    4184:	28000c16 	blt	r5,zero,41b8 <__modsi3+0x48>
    4188:	dfc00017 	ldw	ra,0(sp)
    418c:	dec00104 	addi	sp,sp,4
    4190:	00040941 	jmpi	4094 <udivmodsi4>
    4194:	0109c83a 	sub	r4,zero,r4
    4198:	28000b16 	blt	r5,zero,41c8 <__modsi3+0x58>
    419c:	180b883a 	mov	r5,r3
    41a0:	01800044 	movi	r6,1
    41a4:	00040940 	call	4094 <udivmodsi4>
    41a8:	0085c83a 	sub	r2,zero,r2
    41ac:	dfc00017 	ldw	ra,0(sp)
    41b0:	dec00104 	addi	sp,sp,4
    41b4:	f800283a 	ret
    41b8:	014bc83a 	sub	r5,zero,r5
    41bc:	dfc00017 	ldw	ra,0(sp)
    41c0:	dec00104 	addi	sp,sp,4
    41c4:	00040941 	jmpi	4094 <udivmodsi4>
    41c8:	0147c83a 	sub	r3,zero,r5
    41cc:	003ff306 	br	419c <__modsi3+0x2c>

000041d0 <__udivsi3>:
    41d0:	000d883a 	mov	r6,zero
    41d4:	00040941 	jmpi	4094 <udivmodsi4>

000041d8 <__umodsi3>:
    41d8:	01800044 	movi	r6,1
    41dc:	00040941 	jmpi	4094 <udivmodsi4>

000041e0 <__muldi3>:
    41e0:	2011883a 	mov	r8,r4
    41e4:	427fffcc 	andi	r9,r8,65535
    41e8:	4018d43a 	srli	r12,r8,16
    41ec:	32bfffcc 	andi	r10,r6,65535
    41f0:	3016d43a 	srli	r11,r6,16
    41f4:	4a85383a 	mul	r2,r9,r10
    41f8:	6295383a 	mul	r10,r12,r10
    41fc:	4ad3383a 	mul	r9,r9,r11
    4200:	113fffcc 	andi	r4,r2,65535
    4204:	1004d43a 	srli	r2,r2,16
    4208:	4a93883a 	add	r9,r9,r10
    420c:	3807883a 	mov	r3,r7
    4210:	1245883a 	add	r2,r2,r9
    4214:	280f883a 	mov	r7,r5
    4218:	180b883a 	mov	r5,r3
    421c:	1006943a 	slli	r3,r2,16
    4220:	defffd04 	addi	sp,sp,-12
    4224:	dc800215 	stw	r18,8(sp)
    4228:	1907883a 	add	r3,r3,r4
    422c:	dc400115 	stw	r17,4(sp)
    4230:	dc000015 	stw	r16,0(sp)
    4234:	4165383a 	mul	r18,r8,r5
    4238:	31e3383a 	mul	r17,r6,r7
    423c:	1012d43a 	srli	r9,r2,16
    4240:	62d9383a 	mul	r12,r12,r11
    4244:	181f883a 	mov	r15,r3
    4248:	1280022e 	bgeu	r2,r10,4254 <__muldi3+0x74>
    424c:	00800074 	movhi	r2,1
    4250:	6099883a 	add	r12,r12,r2
    4254:	624d883a 	add	r6,r12,r9
    4258:	9187883a 	add	r3,r18,r6
    425c:	88c7883a 	add	r3,r17,r3
    4260:	7805883a 	mov	r2,r15
    4264:	dc800217 	ldw	r18,8(sp)
    4268:	dc400117 	ldw	r17,4(sp)
    426c:	dc000017 	ldw	r16,0(sp)
    4270:	dec00304 	addi	sp,sp,12
    4274:	f800283a 	ret

00004278 <__clzsi2>:
    4278:	00bfffd4 	movui	r2,65535
    427c:	11000e36 	bltu	r2,r4,42b8 <__clzsi2+0x40>
    4280:	00803fc4 	movi	r2,255
    4284:	01400204 	movi	r5,8
    4288:	0007883a 	mov	r3,zero
    428c:	11001036 	bltu	r2,r4,42d0 <__clzsi2+0x58>
    4290:	000b883a 	mov	r5,zero
    4294:	20c6d83a 	srl	r3,r4,r3
    4298:	00800074 	movhi	r2,1
    429c:	10a75404 	addi	r2,r2,-25264
    42a0:	1887883a 	add	r3,r3,r2
    42a4:	18800003 	ldbu	r2,0(r3)
    42a8:	00c00804 	movi	r3,32
    42ac:	2885883a 	add	r2,r5,r2
    42b0:	1885c83a 	sub	r2,r3,r2
    42b4:	f800283a 	ret
    42b8:	01400404 	movi	r5,16
    42bc:	00804034 	movhi	r2,256
    42c0:	10bfffc4 	addi	r2,r2,-1
    42c4:	2807883a 	mov	r3,r5
    42c8:	113ff22e 	bgeu	r2,r4,4294 <__clzsi2+0x1c>
    42cc:	01400604 	movi	r5,24
    42d0:	2807883a 	mov	r3,r5
    42d4:	20c6d83a 	srl	r3,r4,r3
    42d8:	00800074 	movhi	r2,1
    42dc:	10a75404 	addi	r2,r2,-25264
    42e0:	1887883a 	add	r3,r3,r2
    42e4:	18800003 	ldbu	r2,0(r3)
    42e8:	00c00804 	movi	r3,32
    42ec:	2885883a 	add	r2,r5,r2
    42f0:	1885c83a 	sub	r2,r3,r2
    42f4:	f800283a 	ret

000042f8 <__pack_f>:
    42f8:	20c00017 	ldw	r3,0(r4)
    42fc:	01c00044 	movi	r7,1
    4300:	21800317 	ldw	r6,12(r4)
    4304:	21400117 	ldw	r5,4(r4)
    4308:	38c02d2e 	bgeu	r7,r3,43c0 <__pack_f+0xc8>
    430c:	00800104 	movi	r2,4
    4310:	18802826 	beq	r3,r2,43b4 <__pack_f+0xbc>
    4314:	00800084 	movi	r2,2
    4318:	18800126 	beq	r3,r2,4320 <__pack_f+0x28>
    431c:	3000101e 	bne	r6,zero,4360 <__pack_f+0x68>
    4320:	000d883a 	mov	r6,zero
    4324:	0007883a 	mov	r3,zero
    4328:	19003fcc 	andi	r4,r3,255
    432c:	200895fa 	slli	r4,r4,23
    4330:	00c02034 	movhi	r3,128
    4334:	18ffffc4 	addi	r3,r3,-1
    4338:	30c6703a 	and	r3,r6,r3
    433c:	10a0002c 	andhi	r2,r2,32768
    4340:	10c4b03a 	or	r2,r2,r3
    4344:	280a97fa 	slli	r5,r5,31
    4348:	1104b03a 	or	r2,r2,r4
    434c:	00e00034 	movhi	r3,32768
    4350:	18ffffc4 	addi	r3,r3,-1
    4354:	10c4703a 	and	r2,r2,r3
    4358:	1144b03a 	or	r2,r2,r5
    435c:	f800283a 	ret
    4360:	21000217 	ldw	r4,8(r4)
    4364:	00bfe084 	movi	r2,-126
    4368:	20801b16 	blt	r4,r2,43d8 <__pack_f+0xe0>
    436c:	00801fc4 	movi	r2,127
    4370:	11001016 	blt	r2,r4,43b4 <__pack_f+0xbc>
    4374:	308e703a 	and	r7,r6,r2
    4378:	2087883a 	add	r3,r4,r2
    437c:	00801004 	movi	r2,64
    4380:	38800526 	beq	r7,r2,4398 <__pack_f+0xa0>
    4384:	31800fc4 	addi	r6,r6,63
    4388:	30000716 	blt	r6,zero,43a8 <__pack_f+0xb0>
    438c:	300490ba 	slli	r2,r6,2
    4390:	100cd27a 	srli	r6,r2,9
    4394:	003fe406 	br	4328 <__pack_f+0x30>
    4398:	3080200c 	andi	r2,r6,128
    439c:	103ffa26 	beq	r2,zero,4388 <__pack_f+0x90>
    43a0:	31cd883a 	add	r6,r6,r7
    43a4:	003ff806 	br	4388 <__pack_f+0x90>
    43a8:	300cd07a 	srli	r6,r6,1
    43ac:	18c00044 	addi	r3,r3,1
    43b0:	003ff606 	br	438c <__pack_f+0x94>
    43b4:	000d883a 	mov	r6,zero
    43b8:	00ffffc4 	movi	r3,-1
    43bc:	003fda06 	br	4328 <__pack_f+0x30>
    43c0:	31800434 	orhi	r6,r6,16
    43c4:	00802034 	movhi	r2,128
    43c8:	10bfffc4 	addi	r2,r2,-1
    43cc:	308c703a 	and	r6,r6,r2
    43d0:	00ffffc4 	movi	r3,-1
    43d4:	003fd406 	br	4328 <__pack_f+0x30>
    43d8:	1109c83a 	sub	r4,r2,r4
    43dc:	00800644 	movi	r2,25
    43e0:	11001216 	blt	r2,r4,442c <__pack_f+0x134>
    43e4:	3904983a 	sll	r2,r7,r4
    43e8:	3106d83a 	srl	r3,r6,r4
    43ec:	10bfffc4 	addi	r2,r2,-1
    43f0:	3084703a 	and	r2,r6,r2
    43f4:	1004c03a 	cmpne	r2,r2,zero
    43f8:	1886b03a 	or	r3,r3,r2
    43fc:	19001fcc 	andi	r4,r3,127
    4400:	00801004 	movi	r2,64
    4404:	20800c26 	beq	r4,r2,4438 <__pack_f+0x140>
    4408:	18c00fc4 	addi	r3,r3,63
    440c:	00900034 	movhi	r2,16384
    4410:	10bfffc4 	addi	r2,r2,-1
    4414:	180cd1fa 	srli	r6,r3,7
    4418:	10c7803a 	cmpltu	r3,r2,r3
    441c:	00802034 	movhi	r2,128
    4420:	10bfffc4 	addi	r2,r2,-1
    4424:	308c703a 	and	r6,r6,r2
    4428:	003fbf06 	br	4328 <__pack_f+0x30>
    442c:	0007883a 	mov	r3,zero
    4430:	000d883a 	mov	r6,zero
    4434:	003ff906 	br	441c <__pack_f+0x124>
    4438:	1880200c 	andi	r2,r3,128
    443c:	10000126 	beq	r2,zero,4444 <__pack_f+0x14c>
    4440:	1907883a 	add	r3,r3,r4
    4444:	180cd1fa 	srli	r6,r3,7
    4448:	00900034 	movhi	r2,16384
    444c:	10bfffc4 	addi	r2,r2,-1
    4450:	10c7803a 	cmpltu	r3,r2,r3
    4454:	003ff106 	br	441c <__pack_f+0x124>

00004458 <__unpack_f>:
    4458:	21800017 	ldw	r6,0(r4)
    445c:	00c02034 	movhi	r3,128
    4460:	18ffffc4 	addi	r3,r3,-1
    4464:	3004d5fa 	srli	r2,r6,23
    4468:	3008d7fa 	srli	r4,r6,31
    446c:	30ce703a 	and	r7,r6,r3
    4470:	10c03fcc 	andi	r3,r2,255
    4474:	29000115 	stw	r4,4(r5)
    4478:	1800131e 	bne	r3,zero,44c8 <__unpack_f+0x70>
    447c:	38000f26 	beq	r7,zero,44bc <__unpack_f+0x64>
    4480:	380691fa 	slli	r3,r7,7
    4484:	01bfe084 	movi	r6,-126
    4488:	008000c4 	movi	r2,3
    448c:	01100034 	movhi	r4,16384
    4490:	213fffc4 	addi	r4,r4,-1
    4494:	28800015 	stw	r2,0(r5)
    4498:	29800215 	stw	r6,8(r5)
    449c:	20c00536 	bltu	r4,r3,44b4 <__unpack_f+0x5c>
    44a0:	3005883a 	mov	r2,r6
    44a4:	18c7883a 	add	r3,r3,r3
    44a8:	10bfffc4 	addi	r2,r2,-1
    44ac:	20fffd2e 	bgeu	r4,r3,44a4 <__unpack_f+0x4c>
    44b0:	28800215 	stw	r2,8(r5)
    44b4:	28c00315 	stw	r3,12(r5)
    44b8:	f800283a 	ret
    44bc:	00800084 	movi	r2,2
    44c0:	28800015 	stw	r2,0(r5)
    44c4:	f800283a 	ret
    44c8:	00803fc4 	movi	r2,255
    44cc:	18800826 	beq	r3,r2,44f0 <__unpack_f+0x98>
    44d0:	380491fa 	slli	r2,r7,7
    44d4:	18ffe044 	addi	r3,r3,-127
    44d8:	28c00215 	stw	r3,8(r5)
    44dc:	10900034 	orhi	r2,r2,16384
    44e0:	28800315 	stw	r2,12(r5)
    44e4:	008000c4 	movi	r2,3
    44e8:	28800015 	stw	r2,0(r5)
    44ec:	f800283a 	ret
    44f0:	3800031e 	bne	r7,zero,4500 <__unpack_f+0xa8>
    44f4:	00800104 	movi	r2,4
    44f8:	28800015 	stw	r2,0(r5)
    44fc:	f800283a 	ret
    4500:	3080042c 	andhi	r2,r6,16
    4504:	10000426 	beq	r2,zero,4518 <__unpack_f+0xc0>
    4508:	00800044 	movi	r2,1
    450c:	28800015 	stw	r2,0(r5)
    4510:	29c00315 	stw	r7,12(r5)
    4514:	f800283a 	ret
    4518:	28000015 	stw	zero,0(r5)
    451c:	003ffc06 	br	4510 <__unpack_f+0xb8>

00004520 <__fpcmp_parts_f>:
    4520:	21800017 	ldw	r6,0(r4)
    4524:	00c00044 	movi	r3,1
    4528:	19800a2e 	bgeu	r3,r6,4554 <__fpcmp_parts_f+0x34>
    452c:	28800017 	ldw	r2,0(r5)
    4530:	1880082e 	bgeu	r3,r2,4554 <__fpcmp_parts_f+0x34>
    4534:	00c00104 	movi	r3,4
    4538:	30c01e26 	beq	r6,r3,45b4 <__fpcmp_parts_f+0x94>
    453c:	10c01a26 	beq	r2,r3,45a8 <__fpcmp_parts_f+0x88>
    4540:	00c00084 	movi	r3,2
    4544:	30c00526 	beq	r6,r3,455c <__fpcmp_parts_f+0x3c>
    4548:	10c0071e 	bne	r2,r3,4568 <__fpcmp_parts_f+0x48>
    454c:	20800117 	ldw	r2,4(r4)
    4550:	1000091e 	bne	r2,zero,4578 <__fpcmp_parts_f+0x58>
    4554:	00800044 	movi	r2,1
    4558:	f800283a 	ret
    455c:	10c0121e 	bne	r2,r3,45a8 <__fpcmp_parts_f+0x88>
    4560:	0005883a 	mov	r2,zero
    4564:	f800283a 	ret
    4568:	20c00117 	ldw	r3,4(r4)
    456c:	28800117 	ldw	r2,4(r5)
    4570:	18800326 	beq	r3,r2,4580 <__fpcmp_parts_f+0x60>
    4574:	183ff726 	beq	r3,zero,4554 <__fpcmp_parts_f+0x34>
    4578:	00bfffc4 	movi	r2,-1
    457c:	f800283a 	ret
    4580:	21800217 	ldw	r6,8(r4)
    4584:	28800217 	ldw	r2,8(r5)
    4588:	11bffa16 	blt	r2,r6,4574 <__fpcmp_parts_f+0x54>
    458c:	30800416 	blt	r6,r2,45a0 <__fpcmp_parts_f+0x80>
    4590:	21000317 	ldw	r4,12(r4)
    4594:	29400317 	ldw	r5,12(r5)
    4598:	293ff636 	bltu	r5,r4,4574 <__fpcmp_parts_f+0x54>
    459c:	217ff02e 	bgeu	r4,r5,4560 <__fpcmp_parts_f+0x40>
    45a0:	183fec1e 	bne	r3,zero,4554 <__fpcmp_parts_f+0x34>
    45a4:	003ff406 	br	4578 <__fpcmp_parts_f+0x58>
    45a8:	28800117 	ldw	r2,4(r5)
    45ac:	103fe91e 	bne	r2,zero,4554 <__fpcmp_parts_f+0x34>
    45b0:	003ff106 	br	4578 <__fpcmp_parts_f+0x58>
    45b4:	11bfe51e 	bne	r2,r6,454c <__fpcmp_parts_f+0x2c>
    45b8:	28c00117 	ldw	r3,4(r5)
    45bc:	20800117 	ldw	r2,4(r4)
    45c0:	1885c83a 	sub	r2,r3,r2
    45c4:	f800283a 	ret

000045c8 <__make_fp>:
    45c8:	defffb04 	addi	sp,sp,-20
    45cc:	d9000015 	stw	r4,0(sp)
    45d0:	d809883a 	mov	r4,sp
    45d4:	dfc00415 	stw	ra,16(sp)
    45d8:	d9400115 	stw	r5,4(sp)
    45dc:	d9800215 	stw	r6,8(sp)
    45e0:	d9c00315 	stw	r7,12(sp)
    45e4:	00042f80 	call	42f8 <__pack_f>
    45e8:	dfc00417 	ldw	ra,16(sp)
    45ec:	dec00504 	addi	sp,sp,20
    45f0:	f800283a 	ret

000045f4 <__pack_d>:
    45f4:	20c00017 	ldw	r3,0(r4)
    45f8:	defffd04 	addi	sp,sp,-12
    45fc:	dc000015 	stw	r16,0(sp)
    4600:	dc800215 	stw	r18,8(sp)
    4604:	dc400115 	stw	r17,4(sp)
    4608:	00800044 	movi	r2,1
    460c:	22000317 	ldw	r8,12(r4)
    4610:	001f883a 	mov	r15,zero
    4614:	22400417 	ldw	r9,16(r4)
    4618:	24000117 	ldw	r16,4(r4)
    461c:	10c0552e 	bgeu	r2,r3,4774 <__pack_d+0x180>
    4620:	00800104 	movi	r2,4
    4624:	18804f26 	beq	r3,r2,4764 <__pack_d+0x170>
    4628:	00800084 	movi	r2,2
    462c:	18800226 	beq	r3,r2,4638 <__pack_d+0x44>
    4630:	4244b03a 	or	r2,r8,r9
    4634:	10001a1e 	bne	r2,zero,46a0 <__pack_d+0xac>
    4638:	000d883a 	mov	r6,zero
    463c:	000f883a 	mov	r7,zero
    4640:	0011883a 	mov	r8,zero
    4644:	00800434 	movhi	r2,16
    4648:	10bfffc4 	addi	r2,r2,-1
    464c:	301d883a 	mov	r14,r6
    4650:	3884703a 	and	r2,r7,r2
    4654:	400a953a 	slli	r5,r8,20
    4658:	79bffc2c 	andhi	r6,r15,65520
    465c:	308cb03a 	or	r6,r6,r2
    4660:	00e00434 	movhi	r3,32784
    4664:	18ffffc4 	addi	r3,r3,-1
    4668:	800497fa 	slli	r2,r16,31
    466c:	30c6703a 	and	r3,r6,r3
    4670:	1946b03a 	or	r3,r3,r5
    4674:	01600034 	movhi	r5,32768
    4678:	297fffc4 	addi	r5,r5,-1
    467c:	194a703a 	and	r5,r3,r5
    4680:	288ab03a 	or	r5,r5,r2
    4684:	2807883a 	mov	r3,r5
    4688:	7005883a 	mov	r2,r14
    468c:	dc800217 	ldw	r18,8(sp)
    4690:	dc400117 	ldw	r17,4(sp)
    4694:	dc000017 	ldw	r16,0(sp)
    4698:	dec00304 	addi	sp,sp,12
    469c:	f800283a 	ret
    46a0:	21000217 	ldw	r4,8(r4)
    46a4:	00bf0084 	movi	r2,-1022
    46a8:	20803f16 	blt	r4,r2,47a8 <__pack_d+0x1b4>
    46ac:	0080ffc4 	movi	r2,1023
    46b0:	11002c16 	blt	r2,r4,4764 <__pack_d+0x170>
    46b4:	00803fc4 	movi	r2,255
    46b8:	408c703a 	and	r6,r8,r2
    46bc:	00802004 	movi	r2,128
    46c0:	0007883a 	mov	r3,zero
    46c4:	000f883a 	mov	r7,zero
    46c8:	2280ffc4 	addi	r10,r4,1023
    46cc:	30801e26 	beq	r6,r2,4748 <__pack_d+0x154>
    46d0:	00801fc4 	movi	r2,127
    46d4:	4089883a 	add	r4,r8,r2
    46d8:	220d803a 	cmpltu	r6,r4,r8
    46dc:	324d883a 	add	r6,r6,r9
    46e0:	2011883a 	mov	r8,r4
    46e4:	3013883a 	mov	r9,r6
    46e8:	00880034 	movhi	r2,8192
    46ec:	10bfffc4 	addi	r2,r2,-1
    46f0:	12400d36 	bltu	r2,r9,4728 <__pack_d+0x134>
    46f4:	4804963a 	slli	r2,r9,24
    46f8:	400cd23a 	srli	r6,r8,8
    46fc:	480ed23a 	srli	r7,r9,8
    4700:	013fffc4 	movi	r4,-1
    4704:	118cb03a 	or	r6,r2,r6
    4708:	01400434 	movhi	r5,16
    470c:	297fffc4 	addi	r5,r5,-1
    4710:	3104703a 	and	r2,r6,r4
    4714:	3946703a 	and	r3,r7,r5
    4718:	5201ffcc 	andi	r8,r10,2047
    471c:	100d883a 	mov	r6,r2
    4720:	180f883a 	mov	r7,r3
    4724:	003fc706 	br	4644 <__pack_d+0x50>
    4728:	480897fa 	slli	r4,r9,31
    472c:	4004d07a 	srli	r2,r8,1
    4730:	4806d07a 	srli	r3,r9,1
    4734:	52800044 	addi	r10,r10,1
    4738:	2084b03a 	or	r2,r4,r2
    473c:	1011883a 	mov	r8,r2
    4740:	1813883a 	mov	r9,r3
    4744:	003feb06 	br	46f4 <__pack_d+0x100>
    4748:	383fe11e 	bne	r7,zero,46d0 <__pack_d+0xdc>
    474c:	01004004 	movi	r4,256
    4750:	4104703a 	and	r2,r8,r4
    4754:	10c4b03a 	or	r2,r2,r3
    4758:	103fe326 	beq	r2,zero,46e8 <__pack_d+0xf4>
    475c:	3005883a 	mov	r2,r6
    4760:	003fdc06 	br	46d4 <__pack_d+0xe0>
    4764:	000d883a 	mov	r6,zero
    4768:	000f883a 	mov	r7,zero
    476c:	0201ffc4 	movi	r8,2047
    4770:	003fb406 	br	4644 <__pack_d+0x50>
    4774:	0005883a 	mov	r2,zero
    4778:	00c00234 	movhi	r3,8
    477c:	408cb03a 	or	r6,r8,r2
    4780:	48ceb03a 	or	r7,r9,r3
    4784:	013fffc4 	movi	r4,-1
    4788:	01400434 	movhi	r5,16
    478c:	297fffc4 	addi	r5,r5,-1
    4790:	3104703a 	and	r2,r6,r4
    4794:	3946703a 	and	r3,r7,r5
    4798:	100d883a 	mov	r6,r2
    479c:	180f883a 	mov	r7,r3
    47a0:	0201ffc4 	movi	r8,2047
    47a4:	003fa706 	br	4644 <__pack_d+0x50>
    47a8:	1109c83a 	sub	r4,r2,r4
    47ac:	00800e04 	movi	r2,56
    47b0:	11004316 	blt	r2,r4,48c0 <__pack_d+0x2cc>
    47b4:	21fff804 	addi	r7,r4,-32
    47b8:	38004516 	blt	r7,zero,48d0 <__pack_d+0x2dc>
    47bc:	49d8d83a 	srl	r12,r9,r7
    47c0:	001b883a 	mov	r13,zero
    47c4:	0023883a 	mov	r17,zero
    47c8:	01400044 	movi	r5,1
    47cc:	0025883a 	mov	r18,zero
    47d0:	38004716 	blt	r7,zero,48f0 <__pack_d+0x2fc>
    47d4:	29d6983a 	sll	r11,r5,r7
    47d8:	0015883a 	mov	r10,zero
    47dc:	00bfffc4 	movi	r2,-1
    47e0:	5089883a 	add	r4,r10,r2
    47e4:	588b883a 	add	r5,r11,r2
    47e8:	228d803a 	cmpltu	r6,r4,r10
    47ec:	314b883a 	add	r5,r6,r5
    47f0:	4104703a 	and	r2,r8,r4
    47f4:	4946703a 	and	r3,r9,r5
    47f8:	10c4b03a 	or	r2,r2,r3
    47fc:	10000226 	beq	r2,zero,4808 <__pack_d+0x214>
    4800:	04400044 	movi	r17,1
    4804:	0025883a 	mov	r18,zero
    4808:	00803fc4 	movi	r2,255
    480c:	644eb03a 	or	r7,r12,r17
    4810:	3892703a 	and	r9,r7,r2
    4814:	00802004 	movi	r2,128
    4818:	6c90b03a 	or	r8,r13,r18
    481c:	0015883a 	mov	r10,zero
    4820:	48801626 	beq	r9,r2,487c <__pack_d+0x288>
    4824:	01001fc4 	movi	r4,127
    4828:	3905883a 	add	r2,r7,r4
    482c:	11cd803a 	cmpltu	r6,r2,r7
    4830:	320d883a 	add	r6,r6,r8
    4834:	100f883a 	mov	r7,r2
    4838:	00840034 	movhi	r2,4096
    483c:	10bfffc4 	addi	r2,r2,-1
    4840:	3011883a 	mov	r8,r6
    4844:	0007883a 	mov	r3,zero
    4848:	11801b36 	bltu	r2,r6,48b8 <__pack_d+0x2c4>
    484c:	4004963a 	slli	r2,r8,24
    4850:	3808d23a 	srli	r4,r7,8
    4854:	400ad23a 	srli	r5,r8,8
    4858:	1813883a 	mov	r9,r3
    485c:	1108b03a 	or	r4,r2,r4
    4860:	00bfffc4 	movi	r2,-1
    4864:	00c00434 	movhi	r3,16
    4868:	18ffffc4 	addi	r3,r3,-1
    486c:	208c703a 	and	r6,r4,r2
    4870:	28ce703a 	and	r7,r5,r3
    4874:	4a01ffcc 	andi	r8,r9,2047
    4878:	003f7206 	br	4644 <__pack_d+0x50>
    487c:	503fe91e 	bne	r10,zero,4824 <__pack_d+0x230>
    4880:	01004004 	movi	r4,256
    4884:	3904703a 	and	r2,r7,r4
    4888:	0007883a 	mov	r3,zero
    488c:	10c4b03a 	or	r2,r2,r3
    4890:	10000626 	beq	r2,zero,48ac <__pack_d+0x2b8>
    4894:	3a45883a 	add	r2,r7,r9
    4898:	11cd803a 	cmpltu	r6,r2,r7
    489c:	320d883a 	add	r6,r6,r8
    48a0:	100f883a 	mov	r7,r2
    48a4:	3011883a 	mov	r8,r6
    48a8:	0007883a 	mov	r3,zero
    48ac:	00840034 	movhi	r2,4096
    48b0:	10bfffc4 	addi	r2,r2,-1
    48b4:	123fe52e 	bgeu	r2,r8,484c <__pack_d+0x258>
    48b8:	00c00044 	movi	r3,1
    48bc:	003fe306 	br	484c <__pack_d+0x258>
    48c0:	0009883a 	mov	r4,zero
    48c4:	0013883a 	mov	r9,zero
    48c8:	000b883a 	mov	r5,zero
    48cc:	003fe406 	br	4860 <__pack_d+0x26c>
    48d0:	4a47883a 	add	r3,r9,r9
    48d4:	008007c4 	movi	r2,31
    48d8:	1105c83a 	sub	r2,r2,r4
    48dc:	1886983a 	sll	r3,r3,r2
    48e0:	4118d83a 	srl	r12,r8,r4
    48e4:	491ad83a 	srl	r13,r9,r4
    48e8:	1b18b03a 	or	r12,r3,r12
    48ec:	003fb506 	br	47c4 <__pack_d+0x1d0>
    48f0:	2806d07a 	srli	r3,r5,1
    48f4:	008007c4 	movi	r2,31
    48f8:	1105c83a 	sub	r2,r2,r4
    48fc:	1896d83a 	srl	r11,r3,r2
    4900:	2914983a 	sll	r10,r5,r4
    4904:	003fb506 	br	47dc <__pack_d+0x1e8>

00004908 <__unpack_d>:
    4908:	20c00117 	ldw	r3,4(r4)
    490c:	22400017 	ldw	r9,0(r4)
    4910:	00800434 	movhi	r2,16
    4914:	10bfffc4 	addi	r2,r2,-1
    4918:	1808d53a 	srli	r4,r3,20
    491c:	180cd7fa 	srli	r6,r3,31
    4920:	1894703a 	and	r10,r3,r2
    4924:	2201ffcc 	andi	r8,r4,2047
    4928:	281b883a 	mov	r13,r5
    492c:	4817883a 	mov	r11,r9
    4930:	29800115 	stw	r6,4(r5)
    4934:	5019883a 	mov	r12,r10
    4938:	40001e1e 	bne	r8,zero,49b4 <__unpack_d+0xac>
    493c:	4a84b03a 	or	r2,r9,r10
    4940:	10001926 	beq	r2,zero,49a8 <__unpack_d+0xa0>
    4944:	4804d63a 	srli	r2,r9,24
    4948:	500c923a 	slli	r6,r10,8
    494c:	013f0084 	movi	r4,-1022
    4950:	00c40034 	movhi	r3,4096
    4954:	18ffffc4 	addi	r3,r3,-1
    4958:	118cb03a 	or	r6,r2,r6
    495c:	008000c4 	movi	r2,3
    4960:	480a923a 	slli	r5,r9,8
    4964:	68800015 	stw	r2,0(r13)
    4968:	69000215 	stw	r4,8(r13)
    496c:	19800b36 	bltu	r3,r6,499c <__unpack_d+0x94>
    4970:	200f883a 	mov	r7,r4
    4974:	1811883a 	mov	r8,r3
    4978:	2945883a 	add	r2,r5,r5
    497c:	1149803a 	cmpltu	r4,r2,r5
    4980:	3187883a 	add	r3,r6,r6
    4984:	20c9883a 	add	r4,r4,r3
    4988:	100b883a 	mov	r5,r2
    498c:	200d883a 	mov	r6,r4
    4990:	39ffffc4 	addi	r7,r7,-1
    4994:	413ff82e 	bgeu	r8,r4,4978 <__unpack_d+0x70>
    4998:	69c00215 	stw	r7,8(r13)
    499c:	69800415 	stw	r6,16(r13)
    49a0:	69400315 	stw	r5,12(r13)
    49a4:	f800283a 	ret
    49a8:	00800084 	movi	r2,2
    49ac:	28800015 	stw	r2,0(r5)
    49b0:	f800283a 	ret
    49b4:	0081ffc4 	movi	r2,2047
    49b8:	40800f26 	beq	r8,r2,49f8 <__unpack_d+0xf0>
    49bc:	480cd63a 	srli	r6,r9,24
    49c0:	5006923a 	slli	r3,r10,8
    49c4:	4804923a 	slli	r2,r9,8
    49c8:	0009883a 	mov	r4,zero
    49cc:	30c6b03a 	or	r3,r6,r3
    49d0:	01440034 	movhi	r5,4096
    49d4:	110cb03a 	or	r6,r2,r4
    49d8:	423f0044 	addi	r8,r8,-1023
    49dc:	194eb03a 	or	r7,r3,r5
    49e0:	008000c4 	movi	r2,3
    49e4:	69c00415 	stw	r7,16(r13)
    49e8:	6a000215 	stw	r8,8(r13)
    49ec:	68800015 	stw	r2,0(r13)
    49f0:	69800315 	stw	r6,12(r13)
    49f4:	f800283a 	ret
    49f8:	4a84b03a 	or	r2,r9,r10
    49fc:	1000031e 	bne	r2,zero,4a0c <__unpack_d+0x104>
    4a00:	00800104 	movi	r2,4
    4a04:	28800015 	stw	r2,0(r5)
    4a08:	f800283a 	ret
    4a0c:	0009883a 	mov	r4,zero
    4a10:	01400234 	movhi	r5,8
    4a14:	4904703a 	and	r2,r9,r4
    4a18:	5146703a 	and	r3,r10,r5
    4a1c:	10c4b03a 	or	r2,r2,r3
    4a20:	10000526 	beq	r2,zero,4a38 <__unpack_d+0x130>
    4a24:	00800044 	movi	r2,1
    4a28:	68800015 	stw	r2,0(r13)
    4a2c:	6b000415 	stw	r12,16(r13)
    4a30:	6ac00315 	stw	r11,12(r13)
    4a34:	f800283a 	ret
    4a38:	68000015 	stw	zero,0(r13)
    4a3c:	003ffb06 	br	4a2c <__unpack_d+0x124>

00004a40 <__fpcmp_parts_d>:
    4a40:	21800017 	ldw	r6,0(r4)
    4a44:	00c00044 	movi	r3,1
    4a48:	19800a2e 	bgeu	r3,r6,4a74 <__fpcmp_parts_d+0x34>
    4a4c:	28800017 	ldw	r2,0(r5)
    4a50:	1880082e 	bgeu	r3,r2,4a74 <__fpcmp_parts_d+0x34>
    4a54:	00c00104 	movi	r3,4
    4a58:	30c02626 	beq	r6,r3,4af4 <__fpcmp_parts_d+0xb4>
    4a5c:	10c02226 	beq	r2,r3,4ae8 <__fpcmp_parts_d+0xa8>
    4a60:	00c00084 	movi	r3,2
    4a64:	30c00526 	beq	r6,r3,4a7c <__fpcmp_parts_d+0x3c>
    4a68:	10c0071e 	bne	r2,r3,4a88 <__fpcmp_parts_d+0x48>
    4a6c:	20800117 	ldw	r2,4(r4)
    4a70:	1000091e 	bne	r2,zero,4a98 <__fpcmp_parts_d+0x58>
    4a74:	00800044 	movi	r2,1
    4a78:	f800283a 	ret
    4a7c:	10c01a1e 	bne	r2,r3,4ae8 <__fpcmp_parts_d+0xa8>
    4a80:	0005883a 	mov	r2,zero
    4a84:	f800283a 	ret
    4a88:	22000117 	ldw	r8,4(r4)
    4a8c:	28800117 	ldw	r2,4(r5)
    4a90:	40800326 	beq	r8,r2,4aa0 <__fpcmp_parts_d+0x60>
    4a94:	403ff726 	beq	r8,zero,4a74 <__fpcmp_parts_d+0x34>
    4a98:	00bfffc4 	movi	r2,-1
    4a9c:	f800283a 	ret
    4aa0:	20c00217 	ldw	r3,8(r4)
    4aa4:	28800217 	ldw	r2,8(r5)
    4aa8:	10fffa16 	blt	r2,r3,4a94 <__fpcmp_parts_d+0x54>
    4aac:	18800916 	blt	r3,r2,4ad4 <__fpcmp_parts_d+0x94>
    4ab0:	21c00417 	ldw	r7,16(r4)
    4ab4:	28c00417 	ldw	r3,16(r5)
    4ab8:	21800317 	ldw	r6,12(r4)
    4abc:	28800317 	ldw	r2,12(r5)
    4ac0:	19fff436 	bltu	r3,r7,4a94 <__fpcmp_parts_d+0x54>
    4ac4:	38c00526 	beq	r7,r3,4adc <__fpcmp_parts_d+0x9c>
    4ac8:	38c00236 	bltu	r7,r3,4ad4 <__fpcmp_parts_d+0x94>
    4acc:	19ffec1e 	bne	r3,r7,4a80 <__fpcmp_parts_d+0x40>
    4ad0:	30bfeb2e 	bgeu	r6,r2,4a80 <__fpcmp_parts_d+0x40>
    4ad4:	403fe71e 	bne	r8,zero,4a74 <__fpcmp_parts_d+0x34>
    4ad8:	003fef06 	br	4a98 <__fpcmp_parts_d+0x58>
    4adc:	11bffa2e 	bgeu	r2,r6,4ac8 <__fpcmp_parts_d+0x88>
    4ae0:	403fe426 	beq	r8,zero,4a74 <__fpcmp_parts_d+0x34>
    4ae4:	003fec06 	br	4a98 <__fpcmp_parts_d+0x58>
    4ae8:	28800117 	ldw	r2,4(r5)
    4aec:	103fe11e 	bne	r2,zero,4a74 <__fpcmp_parts_d+0x34>
    4af0:	003fe906 	br	4a98 <__fpcmp_parts_d+0x58>
    4af4:	11bfdd1e 	bne	r2,r6,4a6c <__fpcmp_parts_d+0x2c>
    4af8:	28c00117 	ldw	r3,4(r5)
    4afc:	20800117 	ldw	r2,4(r4)
    4b00:	1885c83a 	sub	r2,r3,r2
    4b04:	f800283a 	ret

00004b08 <memset>:
    4b08:	008000c4 	movi	r2,3
    4b0c:	29403fcc 	andi	r5,r5,255
    4b10:	2007883a 	mov	r3,r4
    4b14:	1180022e 	bgeu	r2,r6,4b20 <memset+0x18>
    4b18:	2084703a 	and	r2,r4,r2
    4b1c:	10000826 	beq	r2,zero,4b40 <memset+0x38>
    4b20:	30000526 	beq	r6,zero,4b38 <memset+0x30>
    4b24:	2805883a 	mov	r2,r5
    4b28:	30cd883a 	add	r6,r6,r3
    4b2c:	18800005 	stb	r2,0(r3)
    4b30:	18c00044 	addi	r3,r3,1
    4b34:	19bffd1e 	bne	r3,r6,4b2c <memset+0x24>
    4b38:	2005883a 	mov	r2,r4
    4b3c:	f800283a 	ret
    4b40:	2804923a 	slli	r2,r5,8
    4b44:	020003c4 	movi	r8,15
    4b48:	200f883a 	mov	r7,r4
    4b4c:	2884b03a 	or	r2,r5,r2
    4b50:	1006943a 	slli	r3,r2,16
    4b54:	10c6b03a 	or	r3,r2,r3
    4b58:	41800a2e 	bgeu	r8,r6,4b84 <memset+0x7c>
    4b5c:	4005883a 	mov	r2,r8
    4b60:	31bffc04 	addi	r6,r6,-16
    4b64:	38c00015 	stw	r3,0(r7)
    4b68:	38c00115 	stw	r3,4(r7)
    4b6c:	38c00215 	stw	r3,8(r7)
    4b70:	38c00315 	stw	r3,12(r7)
    4b74:	39c00404 	addi	r7,r7,16
    4b78:	11bff936 	bltu	r2,r6,4b60 <memset+0x58>
    4b7c:	008000c4 	movi	r2,3
    4b80:	1180052e 	bgeu	r2,r6,4b98 <memset+0x90>
    4b84:	31bfff04 	addi	r6,r6,-4
    4b88:	008000c4 	movi	r2,3
    4b8c:	38c00015 	stw	r3,0(r7)
    4b90:	39c00104 	addi	r7,r7,4
    4b94:	11bffb36 	bltu	r2,r6,4b84 <memset+0x7c>
    4b98:	3807883a 	mov	r3,r7
    4b9c:	003fe006 	br	4b20 <memset+0x18>

00004ba0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4ba0:	deffff04 	addi	sp,sp,-4
    4ba4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4ba8:	01000074 	movhi	r4,1
    4bac:	210fb404 	addi	r4,r4,16080
    4bb0:	00c00074 	movhi	r3,1
    4bb4:	18e7e204 	addi	r3,r3,-24696

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4bb8:	20c00926 	beq	r4,r3,4be0 <alt_load+0x40>
    4bbc:	01800074 	movhi	r6,1
    4bc0:	318fb404 	addi	r6,r6,16080
  {
    while( to != end )
    4bc4:	19800626 	beq	r3,r6,4be0 <alt_load+0x40>
    4bc8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    4bcc:	20800017 	ldw	r2,0(r4)
    4bd0:	18800015 	stw	r2,0(r3)
    4bd4:	1947883a 	add	r3,r3,r5
    4bd8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4bdc:	30fffb1e 	bne	r6,r3,4bcc <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4be0:	01000034 	movhi	r4,0
    4be4:	21000804 	addi	r4,r4,32
    4be8:	00c00034 	movhi	r3,0
    4bec:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4bf0:	20c00926 	beq	r4,r3,4c18 <alt_load+0x78>
    4bf4:	01800034 	movhi	r6,0
    4bf8:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    4bfc:	19800626 	beq	r3,r6,4c18 <alt_load+0x78>
    4c00:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    4c04:	20800017 	ldw	r2,0(r4)
    4c08:	18800015 	stw	r2,0(r3)
    4c0c:	1947883a 	add	r3,r3,r5
    4c10:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4c14:	30fffb1e 	bne	r6,r3,4c04 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4c18:	01000074 	movhi	r4,1
    4c1c:	21268e04 	addi	r4,r4,-26056
    4c20:	00c00074 	movhi	r3,1
    4c24:	18e68e04 	addi	r3,r3,-26056

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4c28:	20c00926 	beq	r4,r3,4c50 <alt_load+0xb0>
    4c2c:	01800074 	movhi	r6,1
    4c30:	31a7e204 	addi	r6,r6,-24696
  {
    while( to != end )
    4c34:	19800626 	beq	r3,r6,4c50 <alt_load+0xb0>
    4c38:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    4c3c:	20800017 	ldw	r2,0(r4)
    4c40:	18800015 	stw	r2,0(r3)
    4c44:	1947883a 	add	r3,r3,r5
    4c48:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4c4c:	30fffb1e 	bne	r6,r3,4c3c <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4c50:	0006dcc0 	call	6dcc <alt_dcache_flush_all>
  alt_icache_flush_all();
    4c54:	0006eb80 	call	6eb8 <alt_icache_flush_all>
}
    4c58:	dfc00017 	ldw	ra,0(sp)
    4c5c:	dec00104 	addi	sp,sp,4
    4c60:	f800283a 	ret

00004c64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4c64:	defffe04 	addi	sp,sp,-8
    4c68:	dfc00115 	stw	ra,4(sp)
    4c6c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4c70:	0009883a 	mov	r4,zero
    4c74:	0004eb80 	call	4eb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4c78:	0004ed80 	call	4ed8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4c7c:	01800074 	movhi	r6,1
    4c80:	31a79404 	addi	r6,r6,-25008
    4c84:	3009883a 	mov	r4,r6
    4c88:	300b883a 	mov	r5,r6
    4c8c:	0006f3c0 	call	6f3c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4c90:	d107e017 	ldw	r4,8064(gp)
    4c94:	d147e117 	ldw	r5,8068(gp)
    4c98:	d187e217 	ldw	r6,8072(gp)
    4c9c:	00003480 	call	348 <main>
    4ca0:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    4ca4:	01000044 	movi	r4,1
    4ca8:	0006cf00 	call	6cf0 <close>
  exit (result);
    4cac:	8009883a 	mov	r4,r16
    4cb0:	000747c0 	call	747c <exit>

00004cb4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    4cb4:	defff804 	addi	sp,sp,-32
    4cb8:	dfc00415 	stw	ra,16(sp)
    4cbc:	dc800315 	stw	r18,12(sp)
    4cc0:	dc400215 	stw	r17,8(sp)
    4cc4:	dc000115 	stw	r16,4(sp)
    4cc8:	d9400515 	stw	r5,20(sp)
    4ccc:	d9800615 	stw	r6,24(sp)
    4cd0:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    4cd4:	d8800504 	addi	r2,sp,20
    4cd8:	d8800015 	stw	r2,0(sp)
    4cdc:	2023883a 	mov	r17,r4
    4ce0:	00005d06 	br	4e58 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    4ce4:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    4ce8:	21003fcc 	andi	r4,r4,255
    4cec:	2100201c 	xori	r4,r4,128
    4cf0:	213fe004 	addi	r4,r4,-128
    4cf4:	00800944 	movi	r2,37
    4cf8:	20800226 	beq	r4,r2,4d04 <alt_printf+0x50>
        {
            alt_putchar(c);
    4cfc:	0004e900 	call	4e90 <alt_putchar>
    4d00:	00005506 	br	4e58 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    4d04:	89400003 	ldbu	r5,0(r17)
    4d08:	8c400044 	addi	r17,r17,1
    4d0c:	29003fcc 	andi	r4,r5,255
    4d10:	2100201c 	xori	r4,r4,128
    4d14:	213fe004 	addi	r4,r4,-128
    4d18:	20005726 	beq	r4,zero,4e78 <alt_printf+0x1c4>
            {
                if (c == '%')
    4d1c:	00800944 	movi	r2,37
    4d20:	2080021e 	bne	r4,r2,4d2c <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    4d24:	0004e900 	call	4e90 <alt_putchar>
    4d28:	00004b06 	br	4e58 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    4d2c:	28c03fcc 	andi	r3,r5,255
    4d30:	18c0201c 	xori	r3,r3,128
    4d34:	18ffe004 	addi	r3,r3,-128
    4d38:	008018c4 	movi	r2,99
    4d3c:	1880061e 	bne	r3,r2,4d58 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    4d40:	d8c00017 	ldw	r3,0(sp)
    4d44:	18800104 	addi	r2,r3,4
    4d48:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    4d4c:	19000017 	ldw	r4,0(r3)
    4d50:	0004e900 	call	4e90 <alt_putchar>
    4d54:	00004006 	br	4e58 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    4d58:	28c03fcc 	andi	r3,r5,255
    4d5c:	18c0201c 	xori	r3,r3,128
    4d60:	18ffe004 	addi	r3,r3,-128
    4d64:	00801e04 	movi	r2,120
    4d68:	1880231e 	bne	r3,r2,4df8 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    4d6c:	d8c00017 	ldw	r3,0(sp)
    4d70:	18800104 	addi	r2,r3,4
    4d74:	d8800015 	stw	r2,0(sp)
    4d78:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    4d7c:	90000326 	beq	r18,zero,4d8c <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    4d80:	90bc002c 	andhi	r2,r18,61440
    4d84:	10000426 	beq	r2,zero,4d98 <alt_printf+0xe4>
    4d88:	00003906 	br	4e70 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    4d8c:	01000c04 	movi	r4,48
    4d90:	0004e900 	call	4e90 <alt_putchar>
    4d94:	00003006 	br	4e58 <alt_printf+0x1a4>
                        continue;
    4d98:	04000704 	movi	r16,28
    4d9c:	013fff04 	movi	r4,-4
    4da0:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    4da4:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    4da8:	1c04983a 	sll	r2,r3,r16
    4dac:	9084703a 	and	r2,r18,r2
    4db0:	103ffc26 	beq	r2,zero,4da4 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4db4:	80002816 	blt	r16,zero,4e58 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    4db8:	008003c4 	movi	r2,15
    4dbc:	1404983a 	sll	r2,r2,r16
    4dc0:	9084703a 	and	r2,r18,r2
    4dc4:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    4dc8:	00800244 	movi	r2,9
    4dcc:	10c00236 	bltu	r2,r3,4dd8 <alt_printf+0x124>
                            c = '0' + digit;
    4dd0:	19000c04 	addi	r4,r3,48
    4dd4:	00000106 	br	4ddc <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    4dd8:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    4ddc:	21003fcc 	andi	r4,r4,255
    4de0:	2100201c 	xori	r4,r4,128
    4de4:	213fe004 	addi	r4,r4,-128
    4de8:	0004e900 	call	4e90 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4dec:	843fff04 	addi	r16,r16,-4
    4df0:	80001916 	blt	r16,zero,4e58 <alt_printf+0x1a4>
    4df4:	003ff006 	br	4db8 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    4df8:	28c03fcc 	andi	r3,r5,255
    4dfc:	18c0201c 	xori	r3,r3,128
    4e00:	18ffe004 	addi	r3,r3,-128
    4e04:	00801cc4 	movi	r2,115
    4e08:	1880131e 	bne	r3,r2,4e58 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    4e0c:	d8800017 	ldw	r2,0(sp)
    4e10:	10c00104 	addi	r3,r2,4
    4e14:	d8c00015 	stw	r3,0(sp)
    4e18:	14000017 	ldw	r16,0(r2)

                    while(*s)
    4e1c:	81000003 	ldbu	r4,0(r16)
    4e20:	20803fcc 	andi	r2,r4,255
    4e24:	1080201c 	xori	r2,r2,128
    4e28:	10bfe004 	addi	r2,r2,-128
    4e2c:	10000a26 	beq	r2,zero,4e58 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    4e30:	84000044 	addi	r16,r16,1
    4e34:	21003fcc 	andi	r4,r4,255
    4e38:	2100201c 	xori	r4,r4,128
    4e3c:	213fe004 	addi	r4,r4,-128
    4e40:	0004e900 	call	4e90 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    4e44:	81000003 	ldbu	r4,0(r16)
    4e48:	20803fcc 	andi	r2,r4,255
    4e4c:	1080201c 	xori	r2,r2,128
    4e50:	10bfe004 	addi	r2,r2,-128
    4e54:	103ff61e 	bne	r2,zero,4e30 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    4e58:	89000003 	ldbu	r4,0(r17)
    4e5c:	20803fcc 	andi	r2,r4,255
    4e60:	1080201c 	xori	r2,r2,128
    4e64:	10bfe004 	addi	r2,r2,-128
    4e68:	103f9e1e 	bne	r2,zero,4ce4 <alt_printf+0x30>
    4e6c:	00000206 	br	4e78 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    4e70:	04000704 	movi	r16,28
    4e74:	003fd006 	br	4db8 <alt_printf+0x104>
    4e78:	dfc00417 	ldw	ra,16(sp)
    4e7c:	dc800317 	ldw	r18,12(sp)
    4e80:	dc400217 	ldw	r17,8(sp)
    4e84:	dc000117 	ldw	r16,4(sp)
    4e88:	dec00804 	addi	sp,sp,32
    4e8c:	f800283a 	ret

00004e90 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    4e90:	deffff04 	addi	sp,sp,-4
    4e94:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    4e98:	00800074 	movhi	r2,1
    4e9c:	108faf04 	addi	r2,r2,16060
    4ea0:	10800017 	ldw	r2,0(r2)
    4ea4:	11400217 	ldw	r5,8(r2)
    4ea8:	00075c80 	call	75c8 <putc>
#endif
}
    4eac:	dfc00017 	ldw	ra,0(sp)
    4eb0:	dec00104 	addi	sp,sp,4
    4eb4:	f800283a 	ret

00004eb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4eb8:	deffff04 	addi	sp,sp,-4
    4ebc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    4ec0:	00073100 	call	7310 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4ec4:	00800044 	movi	r2,1
    4ec8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4ecc:	dfc00017 	ldw	ra,0(sp)
    4ed0:	dec00104 	addi	sp,sp,4
    4ed4:	f800283a 	ret

00004ed8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4ed8:	defffd04 	addi	sp,sp,-12
    4edc:	dfc00215 	stw	ra,8(sp)
    4ee0:	dc400115 	stw	r17,4(sp)
    4ee4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    4ee8:	04400204 	movi	r17,8
    4eec:	01040034 	movhi	r4,4096
    4ef0:	21080004 	addi	r4,r4,8192
    4ef4:	000b883a 	mov	r5,zero
    4ef8:	000d883a 	mov	r6,zero
    4efc:	880f883a 	mov	r7,r17
    4f00:	00057ac0 	call	57ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    4f04:	04000074 	movhi	r16,1
    4f08:	84087104 	addi	r16,r16,8644
    4f0c:	8009883a 	mov	r4,r16
    4f10:	000b883a 	mov	r5,zero
    4f14:	880d883a 	mov	r6,r17
    4f18:	00052a80 	call	52a8 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4f1c:	04400074 	movhi	r17,1
    4f20:	8c4fa804 	addi	r17,r17,16032
    4f24:	813ff604 	addi	r4,r16,-40
    4f28:	880b883a 	mov	r5,r17
    4f2c:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f30:	01000074 	movhi	r4,1
    4f34:	210c7f04 	addi	r4,r4,12796
    4f38:	880b883a 	mov	r5,r17
    4f3c:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f40:	01000074 	movhi	r4,1
    4f44:	210c8b04 	addi	r4,r4,12844
    4f48:	880b883a 	mov	r5,r17
    4f4c:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    4f50:	04000074 	movhi	r16,1
    4f54:	840c9704 	addi	r16,r16,12892
    4f58:	8009883a 	mov	r4,r16
    4f5c:	00058e00 	call	58e0 <alt_up_character_lcd_init>
    4f60:	8009883a 	mov	r4,r16
    4f64:	880b883a 	mov	r5,r17
    4f68:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f6c:	01000074 	movhi	r4,1
    4f70:	210ca204 	addi	r4,r4,12936
    4f74:	880b883a 	mov	r5,r17
    4f78:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f7c:	01000074 	movhi	r4,1
    4f80:	210cad04 	addi	r4,r4,12980
    4f84:	880b883a 	mov	r5,r17
    4f88:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f8c:	01000074 	movhi	r4,1
    4f90:	210cb804 	addi	r4,r4,13024
    4f94:	880b883a 	mov	r5,r17
    4f98:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4f9c:	01000074 	movhi	r4,1
    4fa0:	210cc304 	addi	r4,r4,13068
    4fa4:	880b883a 	mov	r5,r17
    4fa8:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4fac:	01000074 	movhi	r4,1
    4fb0:	210cce04 	addi	r4,r4,13112
    4fb4:	880b883a 	mov	r5,r17
    4fb8:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4fbc:	01000074 	movhi	r4,1
    4fc0:	210cd904 	addi	r4,r4,13156
    4fc4:	880b883a 	mov	r5,r17
    4fc8:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4fcc:	01000074 	movhi	r4,1
    4fd0:	210ce404 	addi	r4,r4,13200
    4fd4:	880b883a 	mov	r5,r17
    4fd8:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    4fdc:	01000074 	movhi	r4,1
    4fe0:	210cef04 	addi	r4,r4,13244
    4fe4:	880b883a 	mov	r5,r17
    4fe8:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    4fec:	04000074 	movhi	r16,1
    4ff0:	840cfa04 	addi	r16,r16,13288
    4ff4:	8009883a 	mov	r4,r16
    4ff8:	0005e040 	call	5e04 <alt_up_ps2_init>
    4ffc:	8009883a 	mov	r4,r16
    5000:	880b883a 	mov	r5,r17
    5004:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    5008:	01000074 	movhi	r4,1
    500c:	210d0804 	addi	r4,r4,13344
    5010:	880b883a 	mov	r5,r17
    5014:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    5018:	01000074 	movhi	r4,1
    501c:	210d1304 	addi	r4,r4,13388
    5020:	20800a17 	ldw	r2,40(r4)
    5024:	10800104 	addi	r2,r2,4
    5028:	10c0000b 	ldhu	r3,0(r2)
    502c:	20c00c15 	stw	r3,48(r4)
    5030:	10800017 	ldw	r2,0(r2)
    5034:	100ad43a 	srli	r5,r2,16
    5038:	21400d15 	stw	r5,52(r4)
    503c:	00801004 	movi	r2,64
    5040:	10c00436 	bltu	r2,r3,5054 <alt_sys_init+0x17c>
    5044:	00800fc4 	movi	r2,63
    5048:	20800f15 	stw	r2,60(r4)
    504c:	00800184 	movi	r2,6
    5050:	20801015 	stw	r2,64(r4)
    5054:	00800804 	movi	r2,32
    5058:	11400436 	bltu	r2,r5,506c <alt_sys_init+0x194>
    505c:	00c007c4 	movi	r3,31
    5060:	00800074 	movhi	r2,1
    5064:	108d1304 	addi	r2,r2,13388
    5068:	10c01115 	stw	r3,68(r2)
    506c:	04000074 	movhi	r16,1
    5070:	840d1304 	addi	r16,r16,13388
    5074:	8009883a 	mov	r4,r16
    5078:	00061bc0 	call	61bc <alt_up_char_buffer_init>
    507c:	8009883a 	mov	r4,r16
    5080:	01400074 	movhi	r5,1
    5084:	294fa804 	addi	r5,r5,16032
    5088:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    508c:	01800074 	movhi	r6,1
    5090:	318d2504 	addi	r6,r6,13460
    5094:	30c00a17 	ldw	r3,40(r6)
    5098:	18800017 	ldw	r2,0(r3)
    509c:	30800b15 	stw	r2,44(r6)
    50a0:	18800117 	ldw	r2,4(r3)
    50a4:	30800c15 	stw	r2,48(r6)
    50a8:	19000204 	addi	r4,r3,8
    50ac:	2080000b 	ldhu	r2,0(r4)
    50b0:	30800f15 	stw	r2,60(r6)
    50b4:	20800017 	ldw	r2,0(r4)
    50b8:	1004d43a 	srli	r2,r2,16
    50bc:	30801015 	stw	r2,64(r6)
    50c0:	18c00304 	addi	r3,r3,12
    50c4:	18800017 	ldw	r2,0(r3)
    50c8:	1005d07a 	srai	r2,r2,1
    50cc:	01000044 	movi	r4,1
    50d0:	1104703a 	and	r2,r2,r4
    50d4:	30800d15 	stw	r2,52(r6)
    50d8:	18800017 	ldw	r2,0(r3)
    50dc:	1005d13a 	srai	r2,r2,4
    50e0:	114003cc 	andi	r5,r2,15
    50e4:	31400e15 	stw	r5,56(r6)
    50e8:	1a000017 	ldw	r8,0(r3)
    50ec:	400ed43a 	srli	r7,r8,16
    50f0:	2900021e 	bne	r5,r4,50fc <alt_sys_init+0x224>
    50f4:	30001115 	stw	zero,68(r6)
    50f8:	00000b06 	br	5128 <alt_sys_init+0x250>
    50fc:	00800084 	movi	r2,2
    5100:	2880051e 	bne	r5,r2,5118 <alt_sys_init+0x240>
    5104:	00c00044 	movi	r3,1
    5108:	00800074 	movhi	r2,1
    510c:	108d2504 	addi	r2,r2,13460
    5110:	10c01115 	stw	r3,68(r2)
    5114:	00000406 	br	5128 <alt_sys_init+0x250>
    5118:	00c00084 	movi	r3,2
    511c:	00800074 	movhi	r2,1
    5120:	108d2504 	addi	r2,r2,13460
    5124:	10c01115 	stw	r3,68(r2)
    5128:	01000074 	movhi	r4,1
    512c:	210d2504 	addi	r4,r4,13460
    5130:	38c03fcc 	andi	r3,r7,255
    5134:	01800804 	movi	r6,32
    5138:	30c5c83a 	sub	r2,r6,r3
    513c:	017fffc4 	movi	r5,-1
    5140:	2884d83a 	srl	r2,r5,r2
    5144:	20801215 	stw	r2,72(r4)
    5148:	20801117 	ldw	r2,68(r4)
    514c:	1887883a 	add	r3,r3,r2
    5150:	20c01315 	stw	r3,76(r4)
    5154:	4004d63a 	srli	r2,r8,24
    5158:	308dc83a 	sub	r6,r6,r2
    515c:	298ad83a 	srl	r5,r5,r6
    5160:	21401415 	stw	r5,80(r4)
    5164:	01400074 	movhi	r5,1
    5168:	294fa804 	addi	r5,r5,16032
    516c:	0006dd80 	call	6dd8 <alt_dev_llist_insert>
}
    5170:	dfc00217 	ldw	ra,8(sp)
    5174:	dc400117 	ldw	r17,4(sp)
    5178:	dc000017 	ldw	r16,0(sp)
    517c:	dec00304 	addi	sp,sp,12
    5180:	f800283a 	ret

00005184 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    5184:	deffff04 	addi	sp,sp,-4
    5188:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    518c:	21000017 	ldw	r4,0(r4)
    5190:	21000a04 	addi	r4,r4,40
    5194:	00054540 	call	5454 <altera_avalon_jtag_uart_ioctl>
}
    5198:	dfc00017 	ldw	ra,0(sp)
    519c:	dec00104 	addi	sp,sp,4
    51a0:	f800283a 	ret

000051a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    51a4:	deffff04 	addi	sp,sp,-4
    51a8:	dfc00015 	stw	ra,0(sp)
    51ac:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    51b0:	21000017 	ldw	r4,0(r4)
    51b4:	21000a04 	addi	r4,r4,40
    51b8:	11400217 	ldw	r5,8(r2)
    51bc:	000521c0 	call	521c <altera_avalon_jtag_uart_close>
}
    51c0:	dfc00017 	ldw	ra,0(sp)
    51c4:	dec00104 	addi	sp,sp,4
    51c8:	f800283a 	ret

000051cc <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    51cc:	deffff04 	addi	sp,sp,-4
    51d0:	dfc00015 	stw	ra,0(sp)
    51d4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    51d8:	21000017 	ldw	r4,0(r4)
    51dc:	21000a04 	addi	r4,r4,40
    51e0:	11c00217 	ldw	r7,8(r2)
    51e4:	00056300 	call	5630 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    51e8:	dfc00017 	ldw	ra,0(sp)
    51ec:	dec00104 	addi	sp,sp,4
    51f0:	f800283a 	ret

000051f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    51f4:	deffff04 	addi	sp,sp,-4
    51f8:	dfc00015 	stw	ra,0(sp)
    51fc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5200:	21000017 	ldw	r4,0(r4)
    5204:	21000a04 	addi	r4,r4,40
    5208:	11c00217 	ldw	r7,8(r2)
    520c:	00054c80 	call	54c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5210:	dfc00017 	ldw	ra,0(sp)
    5214:	dec00104 	addi	sp,sp,4
    5218:	f800283a 	ret

0000521c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    521c:	21800c17 	ldw	r6,48(r4)
    5220:	2950000c 	andi	r5,r5,16384
    5224:	280b003a 	cmpeq	r5,r5,zero
    5228:	00000306 	br	5238 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    522c:	2800021e 	bne	r5,zero,5238 <altera_avalon_jtag_uart_close+0x1c>
    5230:	00bffd44 	movi	r2,-11
    5234:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    5238:	20800d17 	ldw	r2,52(r4)
    523c:	11800326 	beq	r2,r6,524c <altera_avalon_jtag_uart_close+0x30>
    5240:	20c00917 	ldw	r3,36(r4)
    5244:	20800117 	ldw	r2,4(r4)
    5248:	18bff836 	bltu	r3,r2,522c <altera_avalon_jtag_uart_close+0x10>
    524c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    5250:	f800283a 	ret

00005254 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    5254:	20800017 	ldw	r2,0(r4)
    5258:	10c00104 	addi	r3,r2,4
    525c:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    5260:	01410004 	movi	r5,1024
    5264:	1144703a 	and	r2,r2,r5
    5268:	10000526 	beq	r2,zero,5280 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    526c:	20800817 	ldw	r2,32(r4)
    5270:	1144b03a 	or	r2,r2,r5
    5274:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    5278:	20000915 	stw	zero,36(r4)
    527c:	00000606 	br	5298 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    5280:	20c00917 	ldw	r3,36(r4)
    5284:	00a00034 	movhi	r2,32768
    5288:	10bfff04 	addi	r2,r2,-4
    528c:	10c00236 	bltu	r2,r3,5298 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    5290:	18800044 	addi	r2,r3,1
    5294:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    5298:	008000b4 	movhi	r2,2
    529c:	10b78a04 	addi	r2,r2,-8664
    52a0:	10800017 	ldw	r2,0(r2)
    52a4:	f800283a 	ret

000052a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    52a8:	defffe04 	addi	sp,sp,-8
    52ac:	dfc00115 	stw	ra,4(sp)
    52b0:	dc000015 	stw	r16,0(sp)
    52b4:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    52b8:	00c00044 	movi	r3,1
    52bc:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    52c0:	20800017 	ldw	r2,0(r4)
    52c4:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    52c8:	3009883a 	mov	r4,r6
    52cc:	800b883a 	mov	r5,r16
    52d0:	01800034 	movhi	r6,0
    52d4:	3194c804 	addi	r6,r6,21280
    52d8:	0006fd40 	call	6fd4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    52dc:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    52e0:	81000204 	addi	r4,r16,8
    52e4:	008000b4 	movhi	r2,2
    52e8:	10b78a04 	addi	r2,r2,-8664
    52ec:	11400017 	ldw	r5,0(r2)
    52f0:	01800034 	movhi	r6,0
    52f4:	31949504 	addi	r6,r6,21076
    52f8:	800f883a 	mov	r7,r16
    52fc:	0006c5c0 	call	6c5c <alt_alarm_start>
    5300:	1000030e 	bge	r2,zero,5310 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    5304:	00a00034 	movhi	r2,32768
    5308:	10bfffc4 	addi	r2,r2,-1
    530c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    5310:	dfc00117 	ldw	ra,4(sp)
    5314:	dc000017 	ldw	r16,0(sp)
    5318:	dec00204 	addi	sp,sp,8
    531c:	f800283a 	ret

00005320 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    5320:	22000017 	ldw	r8,0(r4)
    5324:	03800104 	movi	r14,4
    5328:	4399883a 	add	r12,r8,r14
    532c:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5330:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    5334:	5880c00c 	andi	r2,r11,768
    5338:	10004526 	beq	r2,zero,5450 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    533c:	5880400c 	andi	r2,r11,256
    5340:	10002126 	beq	r2,zero,53c8 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5344:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    5348:	10800044 	addi	r2,r2,1
    534c:	1081ffcc 	andi	r2,r2,2047
    5350:	20c00b17 	ldw	r3,44(r4)
    5354:	10c01626 	beq	r2,r3,53b0 <altera_avalon_jtag_uart_irq+0x90>
    5358:	02a00014 	movui	r10,32768
    535c:	02400e04 	movi	r9,56
    5360:	01c00044 	movi	r7,1
    5364:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5368:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    536c:	2a84703a 	and	r2,r5,r10
    5370:	10000d26 	beq	r2,zero,53a8 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5374:	20800a17 	ldw	r2,40(r4)
    5378:	1105883a 	add	r2,r2,r4
    537c:	1245883a 	add	r2,r2,r9
    5380:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5384:	20800a17 	ldw	r2,40(r4)
    5388:	11c5883a 	add	r2,r2,r7
    538c:	1184703a 	and	r2,r2,r6
    5390:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5394:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    5398:	11c5883a 	add	r2,r2,r7
    539c:	1184703a 	and	r2,r2,r6
    53a0:	20c00b17 	ldw	r3,44(r4)
    53a4:	10fff01e 	bne	r2,r3,5368 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    53a8:	2b44703a 	and	r2,r5,r13
    53ac:	10000626 	beq	r2,zero,53c8 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    53b0:	20800817 	ldw	r2,32(r4)
    53b4:	00ffff84 	movi	r3,-2
    53b8:	10c4703a 	and	r2,r2,r3
    53bc:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    53c0:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    53c4:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    53c8:	5880800c 	andi	r2,r11,512
    53cc:	103fd826 	beq	r2,zero,5330 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    53d0:	5b44703a 	and	r2,r11,r13
    53d4:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    53d8:	283fd526 	beq	r5,zero,5330 <altera_avalon_jtag_uart_irq+0x10>
    53dc:	20c00d17 	ldw	r3,52(r4)
    53e0:	20800c17 	ldw	r2,48(r4)
    53e4:	18801126 	beq	r3,r2,542c <altera_avalon_jtag_uart_irq+0x10c>
    53e8:	02420e04 	movi	r9,2104
    53ec:	01800044 	movi	r6,1
    53f0:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    53f4:	20800d17 	ldw	r2,52(r4)
    53f8:	1105883a 	add	r2,r2,r4
    53fc:	1245883a 	add	r2,r2,r9
    5400:	10800007 	ldb	r2,0(r2)
    5404:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5408:	20800d17 	ldw	r2,52(r4)
    540c:	1185883a 	add	r2,r2,r6
    5410:	11c4703a 	and	r2,r2,r7
    5414:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    5418:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    541c:	283fc426 	beq	r5,zero,5330 <altera_avalon_jtag_uart_irq+0x10>
    5420:	20c00d17 	ldw	r3,52(r4)
    5424:	20800c17 	ldw	r2,48(r4)
    5428:	18bff21e 	bne	r3,r2,53f4 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    542c:	20c00817 	ldw	r3,32(r4)
    5430:	00bfff44 	movi	r2,-3
    5434:	1886703a 	and	r3,r3,r2
    5438:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    543c:	20800017 	ldw	r2,0(r4)
    5440:	1385883a 	add	r2,r2,r14
    5444:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5448:	60800037 	ldwio	r2,0(r12)
    544c:	003fb806 	br	5330 <altera_avalon_jtag_uart_irq+0x10>
    5450:	f800283a 	ret

00005454 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    5454:	009a8044 	movi	r2,27137
    5458:	28800326 	beq	r5,r2,5468 <altera_avalon_jtag_uart_ioctl+0x14>
    545c:	009a8084 	movi	r2,27138
    5460:	2880171e 	bne	r5,r2,54c0 <altera_avalon_jtag_uart_ioctl+0x6c>
    5464:	00000d06 	br	549c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    5468:	20c00117 	ldw	r3,4(r4)
    546c:	00a00034 	movhi	r2,32768
    5470:	10bfffc4 	addi	r2,r2,-1
    5474:	18801226 	beq	r3,r2,54c0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    5478:	31800017 	ldw	r6,0(r6)
    547c:	30ffff84 	addi	r3,r6,-2
    5480:	10bfff44 	addi	r2,r2,-3
    5484:	10c0022e 	bgeu	r2,r3,5490 <altera_avalon_jtag_uart_ioctl+0x3c>
    5488:	01a00034 	movhi	r6,32768
    548c:	31bfff84 	addi	r6,r6,-2
    5490:	21800115 	stw	r6,4(r4)
    5494:	0005883a 	mov	r2,zero
    5498:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    549c:	20c00117 	ldw	r3,4(r4)
    54a0:	00a00034 	movhi	r2,32768
    54a4:	10bfffc4 	addi	r2,r2,-1
    54a8:	18800526 	beq	r3,r2,54c0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    54ac:	20800917 	ldw	r2,36(r4)
    54b0:	10c5803a 	cmpltu	r2,r2,r3
    54b4:	30800015 	stw	r2,0(r6)
    54b8:	0005883a 	mov	r2,zero
    54bc:	f800283a 	ret
    54c0:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    54c4:	f800283a 	ret

000054c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    54c8:	defff604 	addi	sp,sp,-40
    54cc:	dfc00915 	stw	ra,36(sp)
    54d0:	df000815 	stw	fp,32(sp)
    54d4:	ddc00715 	stw	r23,28(sp)
    54d8:	dd800615 	stw	r22,24(sp)
    54dc:	dd400515 	stw	r21,20(sp)
    54e0:	dd000415 	stw	r20,16(sp)
    54e4:	dcc00315 	stw	r19,12(sp)
    54e8:	dc800215 	stw	r18,8(sp)
    54ec:	dc400115 	stw	r17,4(sp)
    54f0:	dc000015 	stw	r16,0(sp)
    54f4:	2025883a 	mov	r18,r4
    54f8:	282f883a 	mov	r23,r5
    54fc:	3027883a 	mov	r19,r6
    5500:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5504:	0180220e 	bge	zero,r6,5590 <altera_avalon_jtag_uart_read+0xc8>
    5508:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    550c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    5510:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    5514:	b4400236 	bltu	r22,r17,5520 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    5518:	b461c83a 	sub	r16,r22,r17
    551c:	00000206 	br	5528 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    5520:	00820004 	movi	r2,2048
    5524:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    5528:	80000d26 	beq	r16,zero,5560 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    552c:	9829883a 	mov	r20,r19
    5530:	9c001d36 	bltu	r19,r16,55a8 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    5534:	91400e04 	addi	r5,r18,56
    5538:	a809883a 	mov	r4,r21
    553c:	2c4b883a 	add	r5,r5,r17
    5540:	800d883a 	mov	r6,r16
    5544:	00075280 	call	7528 <memcpy>
      ptr   += n;
    5548:	ac2b883a 	add	r21,r21,r16
      space -= n;
    554c:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5550:	8445883a 	add	r2,r16,r17
    5554:	1081ffcc 	andi	r2,r2,2047
    5558:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    555c:	04ffeb16 	blt	zero,r19,550c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    5560:	adc01c1e 	bne	r21,r23,55d4 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    5564:	e090000c 	andi	r2,fp,16384
    5568:	10000d1e 	bne	r2,zero,55a0 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    556c:	90800a17 	ldw	r2,40(r18)
    5570:	b080031e 	bne	r22,r2,5580 <altera_avalon_jtag_uart_read+0xb8>
    5574:	90c00917 	ldw	r3,36(r18)
    5578:	90800117 	ldw	r2,4(r18)
    557c:	18bffb36 	bltu	r3,r2,556c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    5580:	90800a17 	ldw	r2,40(r18)
    5584:	b0800426 	beq	r22,r2,5598 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5588:	04c0030e 	bge	zero,r19,5598 <altera_avalon_jtag_uart_read+0xd0>
    558c:	003fde06 	br	5508 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    5590:	3890000c 	andi	r2,r7,16384
    5594:	1000021e 	bne	r2,zero,55a0 <altera_avalon_jtag_uart_read+0xd8>
    5598:	00bffec4 	movi	r2,-5
    559c:	00001806 	br	5600 <altera_avalon_jtag_uart_read+0x138>
    55a0:	00bffd44 	movi	r2,-11
    55a4:	00001606 	br	5600 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    55a8:	91400e04 	addi	r5,r18,56
    55ac:	a809883a 	mov	r4,r21
    55b0:	894b883a 	add	r5,r17,r5
    55b4:	980d883a 	mov	r6,r19
    55b8:	00075280 	call	7528 <memcpy>
      ptr   += n;
    55bc:	aceb883a 	add	r21,r21,r19
      space -= n;
    55c0:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    55c4:	a445883a 	add	r2,r20,r17
    55c8:	1081ffcc 	andi	r2,r2,2047
    55cc:	90800b15 	stw	r2,44(r18)
    55d0:	003fe306 	br	5560 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55d4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d8:	00bfff84 	movi	r2,-2
    55dc:	2084703a 	and	r2,r4,r2
    55e0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    55e4:	90800817 	ldw	r2,32(r18)
    55e8:	10800054 	ori	r2,r2,1
    55ec:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    55f0:	90c00017 	ldw	r3,0(r18)
    55f4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55f8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    55fc:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    5600:	dfc00917 	ldw	ra,36(sp)
    5604:	df000817 	ldw	fp,32(sp)
    5608:	ddc00717 	ldw	r23,28(sp)
    560c:	dd800617 	ldw	r22,24(sp)
    5610:	dd400517 	ldw	r21,20(sp)
    5614:	dd000417 	ldw	r20,16(sp)
    5618:	dcc00317 	ldw	r19,12(sp)
    561c:	dc800217 	ldw	r18,8(sp)
    5620:	dc400117 	ldw	r17,4(sp)
    5624:	dc000017 	ldw	r16,0(sp)
    5628:	dec00a04 	addi	sp,sp,40
    562c:	f800283a 	ret

00005630 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5630:	defff804 	addi	sp,sp,-32
    5634:	dfc00715 	stw	ra,28(sp)
    5638:	dd800615 	stw	r22,24(sp)
    563c:	dd400515 	stw	r21,20(sp)
    5640:	dd000415 	stw	r20,16(sp)
    5644:	dcc00315 	stw	r19,12(sp)
    5648:	dc800215 	stw	r18,8(sp)
    564c:	dc400115 	stw	r17,4(sp)
    5650:	dc000015 	stw	r16,0(sp)
    5654:	2021883a 	mov	r16,r4
    5658:	282d883a 	mov	r22,r5
    565c:	3011883a 	mov	r8,r6
    5660:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5664:	01800616 	blt	zero,r6,5680 <altera_avalon_jtag_uart_write+0x50>
    5668:	2829883a 	mov	r20,r5
    566c:	00002106 	br	56f4 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    5670:	a585c83a 	sub	r2,r20,r22
    5674:	00004306 	br	5784 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    5678:	00bffd44 	movi	r2,-11
    567c:	00004106 	br	5784 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5680:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    5684:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    5688:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    568c:	9140032e 	bgeu	r18,r5,569c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    5690:	2c85c83a 	sub	r2,r5,r18
    5694:	11bfffc4 	addi	r6,r2,-1
    5698:	00000606 	br	56b4 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    569c:	28000326 	beq	r5,zero,56ac <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    56a0:	00820004 	movi	r2,2048
    56a4:	148dc83a 	sub	r6,r2,r18
    56a8:	00000206 	br	56b4 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    56ac:	0081ffc4 	movi	r2,2047
    56b0:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    56b4:	30002626 	beq	r6,zero,5750 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    56b8:	4027883a 	mov	r19,r8
    56bc:	3023883a 	mov	r17,r6
    56c0:	4180012e 	bgeu	r8,r6,56c8 <altera_avalon_jtag_uart_write+0x98>
    56c4:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    56c8:	81020e04 	addi	r4,r16,2104
    56cc:	2489883a 	add	r4,r4,r18
    56d0:	a00b883a 	mov	r5,r20
    56d4:	880d883a 	mov	r6,r17
    56d8:	00075280 	call	7528 <memcpy>
      ptr   += n;
    56dc:	a469883a 	add	r20,r20,r17
      count -= n;
    56e0:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    56e4:	9445883a 	add	r2,r18,r17
    56e8:	1081ffcc 	andi	r2,r2,2047
    56ec:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    56f0:	023fe416 	blt	zero,r8,5684 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56f4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56f8:	00bfff84 	movi	r2,-2
    56fc:	2084703a 	and	r2,r4,r2
    5700:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5704:	80800817 	ldw	r2,32(r16)
    5708:	10800094 	ori	r2,r2,2
    570c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5710:	80c00017 	ldw	r3,0(r16)
    5714:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5718:	2001703a 	wrctl	status,r4
    571c:	00000706 	br	573c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    5720:	80800d17 	ldw	r2,52(r16)
    5724:	1140031e 	bne	r2,r5,5734 <altera_avalon_jtag_uart_write+0x104>
    5728:	80c00917 	ldw	r3,36(r16)
    572c:	80800117 	ldw	r2,4(r16)
    5730:	18bffb36 	bltu	r3,r2,5720 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    5734:	80800d17 	ldw	r2,52(r16)
    5738:	117fed1e 	bne	r2,r5,56f0 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    573c:	b53fcc1e 	bne	r22,r20,5670 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    5740:	a890000c 	andi	r2,r21,16384
    5744:	103fcc1e 	bne	r2,zero,5678 <altera_avalon_jtag_uart_write+0x48>
    5748:	00bffec4 	movi	r2,-5
    574c:	00000d06 	br	5784 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5750:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5754:	00bfff84 	movi	r2,-2
    5758:	2084703a 	and	r2,r4,r2
    575c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5760:	80800817 	ldw	r2,32(r16)
    5764:	10800094 	ori	r2,r2,2
    5768:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    576c:	80c00017 	ldw	r3,0(r16)
    5770:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5774:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    5778:	a890000c 	andi	r2,r21,16384
    577c:	103fe826 	beq	r2,zero,5720 <altera_avalon_jtag_uart_write+0xf0>
    5780:	003fee06 	br	573c <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    5784:	dfc00717 	ldw	ra,28(sp)
    5788:	dd800617 	ldw	r22,24(sp)
    578c:	dd400517 	ldw	r21,20(sp)
    5790:	dd000417 	ldw	r20,16(sp)
    5794:	dcc00317 	ldw	r19,12(sp)
    5798:	dc800217 	ldw	r18,8(sp)
    579c:	dc400117 	ldw	r17,4(sp)
    57a0:	dc000017 	ldw	r16,0(sp)
    57a4:	dec00804 	addi	sp,sp,32
    57a8:	f800283a 	ret

000057ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    57ac:	deffff04 	addi	sp,sp,-4
    57b0:	dfc00015 	stw	ra,0(sp)
    57b4:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    57b8:	00c000b4 	movhi	r3,2
    57bc:	18f78a04 	addi	r3,r3,-8664
    57c0:	18800017 	ldw	r2,0(r3)
    57c4:	1000011e 	bne	r2,zero,57cc <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    57c8:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    57cc:	008001c4 	movi	r2,7
    57d0:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    57d4:	3009883a 	mov	r4,r6
    57d8:	01800034 	movhi	r6,0
    57dc:	3195fc04 	addi	r6,r6,22512
    57e0:	0006fd40 	call	6fd4 <alt_irq_register>
#endif  
}
    57e4:	dfc00017 	ldw	ra,0(sp)
    57e8:	dec00104 	addi	sp,sp,4
    57ec:	f800283a 	ret

000057f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    57f0:	defffe04 	addi	sp,sp,-8
    57f4:	dfc00115 	stw	ra,4(sp)
    57f8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    57fc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5800:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5804:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5808:	00bfff84 	movi	r2,-2
    580c:	8084703a 	and	r2,r16,r2
    5810:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    5814:	00072640 	call	7264 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5818:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    581c:	dfc00117 	ldw	ra,4(sp)
    5820:	dc000017 	ldw	r16,0(sp)
    5824:	dec00204 	addi	sp,sp,8
    5828:	f800283a 	ret

0000582c <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    582c:	2800021e 	bne	r5,zero,5838 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    5830:	2005883a 	mov	r2,r4
    5834:	00000106 	br	583c <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    5838:	20801014 	ori	r2,r4,64
    583c:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    5840:	10802014 	ori	r2,r2,128
    5844:	f800283a 	ret

00005848 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5848:	28c00003 	ldbu	r3,0(r5)
    584c:	18803fcc 	andi	r2,r3,255
    5850:	1080201c 	xori	r2,r2,128
    5854:	10bfe004 	addi	r2,r2,-128
    5858:	10000d26 	beq	r2,zero,5890 <alt_up_character_lcd_string+0x48>
    585c:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    5860:	20800a17 	ldw	r2,40(r4)
    5864:	1185883a 	add	r2,r2,r6
    5868:	18c03fcc 	andi	r3,r3,255
    586c:	18c0201c 	xori	r3,r3,128
    5870:	18ffe004 	addi	r3,r3,-128
    5874:	10c00025 	stbio	r3,0(r2)
		++ptr;
    5878:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    587c:	28c00003 	ldbu	r3,0(r5)
    5880:	18803fcc 	andi	r2,r3,255
    5884:	1080201c 	xori	r2,r2,128
    5888:	10bfe004 	addi	r2,r2,-128
    588c:	103ff41e 	bne	r2,zero,5860 <alt_up_character_lcd_string+0x18>
    5890:	f800283a 	ret

00005894 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    5894:	30000926 	beq	r6,zero,58bc <alt_up_character_lcd_write+0x28>
    5898:	000f883a 	mov	r7,zero
    589c:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    58a0:	20800a17 	ldw	r2,40(r4)
    58a4:	1205883a 	add	r2,r2,r8
    58a8:	3947883a 	add	r3,r7,r5
    58ac:	18c00007 	ldb	r3,0(r3)
    58b0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    58b4:	3a0f883a 	add	r7,r7,r8
    58b8:	31fff91e 	bne	r6,r7,58a0 <alt_up_character_lcd_write+0xc>
    58bc:	f800283a 	ret

000058c0 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    58c0:	deffff04 	addi	sp,sp,-4
    58c4:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    58c8:	21000017 	ldw	r4,0(r4)
    58cc:	00058940 	call	5894 <alt_up_character_lcd_write>
	return 0;
}
    58d0:	0005883a 	mov	r2,zero
    58d4:	dfc00017 	ldw	ra,0(sp)
    58d8:	dec00104 	addi	sp,sp,4
    58dc:	f800283a 	ret

000058e0 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    58e0:	20c00a17 	ldw	r3,40(r4)
    58e4:	00800044 	movi	r2,1
    58e8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    58ec:	f800283a 	ret

000058f0 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    58f0:	20800a17 	ldw	r2,40(r4)
    58f4:	29403fcc 	andi	r5,r5,255
    58f8:	11400025 	stbio	r5,0(r2)
}
    58fc:	f800283a 	ret

00005900 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    5900:	deffff04 	addi	sp,sp,-4
    5904:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    5908:	014003c4 	movi	r5,15
    590c:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
}
    5910:	dfc00017 	ldw	ra,0(sp)
    5914:	dec00104 	addi	sp,sp,4
    5918:	f800283a 	ret

0000591c <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    591c:	deffff04 	addi	sp,sp,-4
    5920:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    5924:	01400304 	movi	r5,12
    5928:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
}
    592c:	dfc00017 	ldw	ra,0(sp)
    5930:	dec00104 	addi	sp,sp,4
    5934:	f800283a 	ret

00005938 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    5938:	defffd04 	addi	sp,sp,-12
    593c:	dfc00215 	stw	ra,8(sp)
    5940:	dc400115 	stw	r17,4(sp)
    5944:	dc000015 	stw	r16,0(sp)
    5948:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    594c:	008009c4 	movi	r2,39
    5950:	11400e36 	bltu	r2,r5,598c <alt_up_character_lcd_erase_pos+0x54>
    5954:	04400044 	movi	r17,1
    5958:	89800c36 	bltu	r17,r6,598c <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    595c:	2809883a 	mov	r4,r5
    5960:	300b883a 	mov	r5,r6
    5964:	000582c0 	call	582c <get_DDRAM_addr>
    5968:	8009883a 	mov	r4,r16
    596c:	11403fcc 	andi	r5,r2,255
    5970:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    5974:	80800a17 	ldw	r2,40(r16)
    5978:	1445883a 	add	r2,r2,r17
    597c:	00c00084 	movi	r3,2
    5980:	10c00025 	stbio	r3,0(r2)
    5984:	0005883a 	mov	r2,zero
    5988:	00000106 	br	5990 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    598c:	00bfffc4 	movi	r2,-1
}
    5990:	dfc00217 	ldw	ra,8(sp)
    5994:	dc400117 	ldw	r17,4(sp)
    5998:	dc000017 	ldw	r16,0(sp)
    599c:	dec00304 	addi	sp,sp,12
    59a0:	f800283a 	ret

000059a4 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    59a4:	defffa04 	addi	sp,sp,-24
    59a8:	dfc00515 	stw	ra,20(sp)
    59ac:	dd000415 	stw	r20,16(sp)
    59b0:	dcc00315 	stw	r19,12(sp)
    59b4:	dc800215 	stw	r18,8(sp)
    59b8:	dc400115 	stw	r17,4(sp)
    59bc:	dc000015 	stw	r16,0(sp)
    59c0:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    59c4:	28001326 	beq	r5,zero,5a14 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    59c8:	0140020e 	bge	zero,r5,59d4 <alt_up_character_lcd_shift_display+0x30>
    59cc:	05000704 	movi	r20,28
    59d0:	00000106 	br	59d8 <alt_up_character_lcd_shift_display+0x34>
    59d4:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    59d8:	2800010e 	bge	r5,zero,59e0 <alt_up_character_lcd_shift_display+0x3c>
    59dc:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    59e0:	00bfffc4 	movi	r2,-1
    59e4:	28a1883a 	add	r16,r5,r2
    59e8:	80c03fcc 	andi	r3,r16,255
    59ec:	10803fcc 	andi	r2,r2,255
    59f0:	18800826 	beq	r3,r2,5a14 <alt_up_character_lcd_shift_display+0x70>
    59f4:	04bfffc4 	movi	r18,-1
    59f8:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    59fc:	9809883a 	mov	r4,r19
    5a00:	a1403fcc 	andi	r5,r20,255
    5a04:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5a08:	84a1883a 	add	r16,r16,r18
    5a0c:	80803fcc 	andi	r2,r16,255
    5a10:	147ffa1e 	bne	r2,r17,59fc <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    5a14:	dfc00517 	ldw	ra,20(sp)
    5a18:	dd000417 	ldw	r20,16(sp)
    5a1c:	dcc00317 	ldw	r19,12(sp)
    5a20:	dc800217 	ldw	r18,8(sp)
    5a24:	dc400117 	ldw	r17,4(sp)
    5a28:	dc000017 	ldw	r16,0(sp)
    5a2c:	dec00604 	addi	sp,sp,24
    5a30:	f800283a 	ret

00005a34 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5a34:	defffa04 	addi	sp,sp,-24
    5a38:	dfc00515 	stw	ra,20(sp)
    5a3c:	dd000415 	stw	r20,16(sp)
    5a40:	dcc00315 	stw	r19,12(sp)
    5a44:	dc800215 	stw	r18,8(sp)
    5a48:	dc400115 	stw	r17,4(sp)
    5a4c:	dc000015 	stw	r16,0(sp)
    5a50:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    5a54:	28001326 	beq	r5,zero,5aa4 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    5a58:	0140020e 	bge	zero,r5,5a64 <alt_up_character_lcd_shift_cursor+0x30>
    5a5c:	05000504 	movi	r20,20
    5a60:	00000106 	br	5a68 <alt_up_character_lcd_shift_cursor+0x34>
    5a64:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    5a68:	2800010e 	bge	r5,zero,5a70 <alt_up_character_lcd_shift_cursor+0x3c>
    5a6c:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    5a70:	00bfffc4 	movi	r2,-1
    5a74:	28a1883a 	add	r16,r5,r2
    5a78:	80c03fcc 	andi	r3,r16,255
    5a7c:	10803fcc 	andi	r2,r2,255
    5a80:	18800826 	beq	r3,r2,5aa4 <alt_up_character_lcd_shift_cursor+0x70>
    5a84:	04bfffc4 	movi	r18,-1
    5a88:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5a8c:	9809883a 	mov	r4,r19
    5a90:	a1403fcc 	andi	r5,r20,255
    5a94:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5a98:	84a1883a 	add	r16,r16,r18
    5a9c:	80803fcc 	andi	r2,r16,255
    5aa0:	147ffa1e 	bne	r2,r17,5a8c <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    5aa4:	dfc00517 	ldw	ra,20(sp)
    5aa8:	dd000417 	ldw	r20,16(sp)
    5aac:	dcc00317 	ldw	r19,12(sp)
    5ab0:	dc800217 	ldw	r18,8(sp)
    5ab4:	dc400117 	ldw	r17,4(sp)
    5ab8:	dc000017 	ldw	r16,0(sp)
    5abc:	dec00604 	addi	sp,sp,24
    5ac0:	f800283a 	ret

00005ac4 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    5ac4:	defffe04 	addi	sp,sp,-8
    5ac8:	dfc00115 	stw	ra,4(sp)
    5acc:	dc000015 	stw	r16,0(sp)
    5ad0:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    5ad4:	008009c4 	movi	r2,39
    5ad8:	11400a36 	bltu	r2,r5,5b04 <alt_up_character_lcd_set_cursor_pos+0x40>
    5adc:	00800044 	movi	r2,1
    5ae0:	11800836 	bltu	r2,r6,5b04 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5ae4:	2809883a 	mov	r4,r5
    5ae8:	300b883a 	mov	r5,r6
    5aec:	000582c0 	call	582c <get_DDRAM_addr>
    5af0:	8009883a 	mov	r4,r16
    5af4:	11403fcc 	andi	r5,r2,255
    5af8:	00058f00 	call	58f0 <alt_up_character_lcd_send_cmd>
    5afc:	0005883a 	mov	r2,zero
    5b00:	00000106 	br	5b08 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    5b04:	00bfffc4 	movi	r2,-1
}
    5b08:	dfc00117 	ldw	ra,4(sp)
    5b0c:	dc000017 	ldw	r16,0(sp)
    5b10:	dec00204 	addi	sp,sp,8
    5b14:	f800283a 	ret

00005b18 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    5b18:	deffff04 	addi	sp,sp,-4
    5b1c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    5b20:	01400074 	movhi	r5,1
    5b24:	294fa804 	addi	r5,r5,16032
    5b28:	0006e480 	call	6e48 <alt_find_dev>

  return dev;
}
    5b2c:	dfc00017 	ldw	ra,0(sp)
    5b30:	dec00104 	addi	sp,sp,4
    5b34:	f800283a 	ret

00005b38 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    5b38:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    5b3c:	1004c03a 	cmpne	r2,r2,zero
    5b40:	f800283a 	ret

00005b44 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    5b44:	2080004c 	andi	r2,r4,1
    5b48:	f800283a 	ret

00005b4c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    5b4c:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    5b50:	1004c03a 	cmpne	r2,r2,zero
    5b54:	f800283a 	ret

00005b58 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    5b58:	2004d43a 	srli	r2,r4,16
    5b5c:	f800283a 	ret

00005b60 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    5b60:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    5b64:	1004c03a 	cmpne	r2,r2,zero
    5b68:	f800283a 	ret

00005b6c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    5b6c:	20803fcc 	andi	r2,r4,255
    5b70:	f800283a 	ret

00005b74 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    5b74:	deffff04 	addi	sp,sp,-4
    5b78:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    5b7c:	01400074 	movhi	r5,1
    5b80:	294fa804 	addi	r5,r5,16032
    5b84:	0006e480 	call	6e48 <alt_find_dev>

  return dev;
}
    5b88:	dfc00017 	ldw	ra,0(sp)
    5b8c:	dec00104 	addi	sp,sp,4
    5b90:	f800283a 	ret

00005b94 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    5b94:	defffe04 	addi	sp,sp,-8
    5b98:	dfc00115 	stw	ra,4(sp)
    5b9c:	dc000015 	stw	r16,0(sp)
    5ba0:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    5ba4:	81000037 	ldwio	r4,0(r16)
    5ba8:	0005b580 	call	5b58 <read_num_bytes_available>
    5bac:	10bfffcc 	andi	r2,r2,65535
    5bb0:	103ffc1e 	bne	r2,zero,5ba4 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    5bb4:	dfc00117 	ldw	ra,4(sp)
    5bb8:	dc000017 	ldw	r16,0(sp)
    5bbc:	dec00204 	addi	sp,sp,8
    5bc0:	f800283a 	ret

00005bc4 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5bc4:	defffd04 	addi	sp,sp,-12
    5bc8:	dfc00215 	stw	ra,8(sp)
    5bcc:	dc400115 	stw	r17,4(sp)
    5bd0:	dc000015 	stw	r16,0(sp)
    5bd4:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5bd8:	20800a17 	ldw	r2,40(r4)
    5bdc:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    5be0:	8009883a 	mov	r4,r16
    5be4:	0005b600 	call	5b60 <read_data_valid>
    5be8:	10803fcc 	andi	r2,r2,255
    5bec:	1000021e 	bne	r2,zero,5bf8 <alt_up_ps2_read_data_byte+0x34>
    5bf0:	00bfffc4 	movi	r2,-1
    5bf4:	00000406 	br	5c08 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    5bf8:	8009883a 	mov	r4,r16
    5bfc:	0005b6c0 	call	5b6c <read_data_byte>
    5c00:	88800005 	stb	r2,0(r17)
    5c04:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    5c08:	dfc00217 	ldw	ra,8(sp)
    5c0c:	dc400117 	ldw	r17,4(sp)
    5c10:	dc000017 	ldw	r16,0(sp)
    5c14:	dec00304 	addi	sp,sp,12
    5c18:	f800283a 	ret

00005c1c <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5c1c:	defffb04 	addi	sp,sp,-20
    5c20:	dfc00415 	stw	ra,16(sp)
    5c24:	dcc00315 	stw	r19,12(sp)
    5c28:	dc800215 	stw	r18,8(sp)
    5c2c:	dc400115 	stw	r17,4(sp)
    5c30:	dc000015 	stw	r16,0(sp)
    5c34:	2025883a 	mov	r18,r4
    5c38:	2827883a 	mov	r19,r5
    5c3c:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5c40:	90800a17 	ldw	r2,40(r18)
    5c44:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    5c48:	8009883a 	mov	r4,r16
    5c4c:	0005b600 	call	5b60 <read_data_valid>
    5c50:	10803fcc 	andi	r2,r2,255
    5c54:	10000526 	beq	r2,zero,5c6c <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    5c58:	8009883a 	mov	r4,r16
    5c5c:	0005b6c0 	call	5b6c <read_data_byte>
    5c60:	98800005 	stb	r2,0(r19)
    5c64:	0005883a 	mov	r2,zero
    5c68:	00000506 	br	5c80 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    5c6c:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    5c70:	90800c17 	ldw	r2,48(r18)
    5c74:	103ff226 	beq	r2,zero,5c40 <alt_up_ps2_read_data_byte_timeout+0x24>
    5c78:	147ff12e 	bgeu	r2,r17,5c40 <alt_up_ps2_read_data_byte_timeout+0x24>
    5c7c:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    5c80:	dfc00417 	ldw	ra,16(sp)
    5c84:	dcc00317 	ldw	r19,12(sp)
    5c88:	dc800217 	ldw	r18,8(sp)
    5c8c:	dc400117 	ldw	r17,4(sp)
    5c90:	dc000017 	ldw	r16,0(sp)
    5c94:	dec00504 	addi	sp,sp,20
    5c98:	f800283a 	ret

00005c9c <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    5c9c:	deffff04 	addi	sp,sp,-4
    5ca0:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5ca4:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    5ca8:	0180010e 	bge	zero,r6,5cb0 <alt_up_ps2_read_fd+0x14>
    5cac:	003fff06 	br	5cac <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    5cb0:	0005c1c0 	call	5c1c <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    5cb4:	1005003a 	cmpeq	r2,r2,zero
    5cb8:	dfc00017 	ldw	ra,0(sp)
    5cbc:	dec00104 	addi	sp,sp,4
    5cc0:	f800283a 	ret

00005cc4 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    5cc4:	defffc04 	addi	sp,sp,-16
    5cc8:	dfc00315 	stw	ra,12(sp)
    5ccc:	dc400215 	stw	r17,8(sp)
    5cd0:	dc000115 	stw	r16,4(sp)
    5cd4:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    5cd8:	d8000005 	stb	zero,0(sp)
    5cdc:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    5ce0:	8009883a 	mov	r4,r16
    5ce4:	d80b883a 	mov	r5,sp
    5ce8:	0005c1c0 	call	5c1c <alt_up_ps2_read_data_byte_timeout>
    5cec:	1007883a 	mov	r3,r2
		if ( status == 0)
    5cf0:	10803fcc 	andi	r2,r2,255
    5cf4:	1000041e 	bne	r2,zero,5d08 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    5cf8:	d8800003 	ldbu	r2,0(sp)
    5cfc:	147ff81e 	bne	r2,r17,5ce0 <alt_up_ps2_wait_for_ack+0x1c>
    5d00:	0005883a 	mov	r2,zero
    5d04:	00000106 	br	5d0c <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    5d08:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    5d0c:	dfc00317 	ldw	ra,12(sp)
    5d10:	dc400217 	ldw	r17,8(sp)
    5d14:	dc000117 	ldw	r16,4(sp)
    5d18:	dec00404 	addi	sp,sp,16
    5d1c:	f800283a 	ret

00005d20 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5d20:	deffff04 	addi	sp,sp,-4
    5d24:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    5d28:	20800a17 	ldw	r2,40(r4)
    5d2c:	29403fcc 	andi	r5,r5,255
    5d30:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    5d34:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    5d38:	11000137 	ldwio	r4,4(r2)
    5d3c:	0005b4c0 	call	5b4c <read_CE_bit>
    5d40:	10803fcc 	andi	r2,r2,255
    5d44:	10000226 	beq	r2,zero,5d50 <alt_up_ps2_write_data_byte+0x30>
    5d48:	00bffec4 	movi	r2,-5
    5d4c:	00000106 	br	5d54 <alt_up_ps2_write_data_byte+0x34>
    5d50:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    5d54:	dfc00017 	ldw	ra,0(sp)
    5d58:	dec00104 	addi	sp,sp,4
    5d5c:	f800283a 	ret

00005d60 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5d60:	defffb04 	addi	sp,sp,-20
    5d64:	dfc00415 	stw	ra,16(sp)
    5d68:	dcc00315 	stw	r19,12(sp)
    5d6c:	dc800215 	stw	r18,8(sp)
    5d70:	dc400115 	stw	r17,4(sp)
    5d74:	dc000015 	stw	r16,0(sp)
    5d78:	2827883a 	mov	r19,r5
    5d7c:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5d80:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    5d84:	01800216 	blt	zero,r6,5d90 <alt_up_ps2_write_fd+0x30>
    5d88:	0021883a 	mov	r16,zero
    5d8c:	00000806 	br	5db0 <alt_up_ps2_write_fd+0x50>
    5d90:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    5d94:	9c05883a 	add	r2,r19,r16
    5d98:	8809883a 	mov	r4,r17
    5d9c:	11400003 	ldbu	r5,0(r2)
    5da0:	0005d200 	call	5d20 <alt_up_ps2_write_data_byte>
		if (status!=0)
    5da4:	1000021e 	bne	r2,zero,5db0 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    5da8:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    5dac:	943ff91e 	bne	r18,r16,5d94 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    5db0:	8005883a 	mov	r2,r16
    5db4:	dfc00417 	ldw	ra,16(sp)
    5db8:	dcc00317 	ldw	r19,12(sp)
    5dbc:	dc800217 	ldw	r18,8(sp)
    5dc0:	dc400117 	ldw	r17,4(sp)
    5dc4:	dc000017 	ldw	r16,0(sp)
    5dc8:	dec00504 	addi	sp,sp,20
    5dcc:	f800283a 	ret

00005dd0 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5dd0:	defffe04 	addi	sp,sp,-8
    5dd4:	dfc00115 	stw	ra,4(sp)
    5dd8:	dc000015 	stw	r16,0(sp)
    5ddc:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    5de0:	29403fcc 	andi	r5,r5,255
    5de4:	0005d200 	call	5d20 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    5de8:	1000021e 	bne	r2,zero,5df4 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    5dec:	8009883a 	mov	r4,r16
    5df0:	0005cc40 	call	5cc4 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    5df4:	dfc00117 	ldw	ra,4(sp)
    5df8:	dc000017 	ldw	r16,0(sp)
    5dfc:	dec00204 	addi	sp,sp,8
    5e00:	f800283a 	ret

00005e04 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    5e04:	defffd04 	addi	sp,sp,-12
    5e08:	dfc00215 	stw	ra,8(sp)
    5e0c:	dc000115 	stw	r16,4(sp)
    5e10:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    5e14:	01403fc4 	movi	r5,255
    5e18:	0005dd00 	call	5dd0 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    5e1c:	1000171e 	bne	r2,zero,5e7c <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5e20:	8009883a 	mov	r4,r16
    5e24:	d80b883a 	mov	r5,sp
    5e28:	0005c1c0 	call	5c1c <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    5e2c:	1000131e 	bne	r2,zero,5e7c <alt_up_ps2_init+0x78>
    5e30:	d8c00003 	ldbu	r3,0(sp)
    5e34:	00802a84 	movi	r2,170
    5e38:	1880101e 	bne	r3,r2,5e7c <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5e3c:	8009883a 	mov	r4,r16
    5e40:	d80b883a 	mov	r5,sp
    5e44:	0005c1c0 	call	5c1c <alt_up_ps2_read_data_byte_timeout>
    5e48:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    5e4c:	00bfe304 	movi	r2,-116
    5e50:	1880031e 	bne	r3,r2,5e60 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    5e54:	00800044 	movi	r2,1
    5e58:	80800d15 	stw	r2,52(r16)
    5e5c:	00000706 	br	5e7c <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    5e60:	1800061e 	bne	r3,zero,5e7c <alt_up_ps2_init+0x78>
    5e64:	d8800003 	ldbu	r2,0(sp)
    5e68:	1000041e 	bne	r2,zero,5e7c <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    5e6c:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    5e70:	8009883a 	mov	r4,r16
    5e74:	01403d04 	movi	r5,244
    5e78:	0005d200 	call	5d20 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    5e7c:	dfc00217 	ldw	ra,8(sp)
    5e80:	dc000117 	ldw	r16,4(sp)
    5e84:	dec00304 	addi	sp,sp,12
    5e88:	f800283a 	ret

00005e8c <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5e8c:	20800a17 	ldw	r2,40(r4)
    5e90:	10800104 	addi	r2,r2,4
    5e94:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    5e98:	013fff84 	movi	r4,-2
    5e9c:	1906703a 	and	r3,r3,r4
    5ea0:	10c00035 	stwio	r3,0(r2)
}
    5ea4:	f800283a 	ret

00005ea8 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5ea8:	20c00a17 	ldw	r3,40(r4)
    5eac:	18c00104 	addi	r3,r3,4
    5eb0:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    5eb4:	10800054 	ori	r2,r2,1
    5eb8:	18800035 	stwio	r2,0(r3)
}
    5ebc:	f800283a 	ret

00005ec0 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    5ec0:	200495ba 	slli	r2,r4,22
}
    5ec4:	1005d7fa 	srai	r2,r2,31
    5ec8:	f800283a 	ret

00005ecc <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    5ecc:	deffff04 	addi	sp,sp,-4
    5ed0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    5ed4:	01400074 	movhi	r5,1
    5ed8:	294fa804 	addi	r5,r5,16032
    5edc:	0006e480 	call	6e48 <alt_find_dev>

  return dev;
}
    5ee0:	dfc00017 	ldw	ra,0(sp)
    5ee4:	dec00104 	addi	sp,sp,4
    5ee8:	f800283a 	ret

00005eec <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    5eec:	defffd04 	addi	sp,sp,-12
    5ef0:	dfc00215 	stw	ra,8(sp)
    5ef4:	dc400115 	stw	r17,4(sp)
    5ef8:	dc000015 	stw	r16,0(sp)
    5efc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    5f00:	20800a17 	ldw	r2,40(r4)
    5f04:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    5f08:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    5f0c:	8009883a 	mov	r4,r16
    5f10:	0005ec00 	call	5ec0 <alt_up_rs232_check_parity>
    5f14:	88800005 	stb	r2,0(r17)
    5f18:	8420000c 	andi	r16,r16,32768
    5f1c:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    5f20:	80bfffc4 	addi	r2,r16,-1
    5f24:	dfc00217 	ldw	ra,8(sp)
    5f28:	dc400117 	ldw	r17,4(sp)
    5f2c:	dc000017 	ldw	r16,0(sp)
    5f30:	dec00304 	addi	sp,sp,12
    5f34:	f800283a 	ret

00005f38 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    5f38:	defff904 	addi	sp,sp,-28
    5f3c:	dfc00615 	stw	ra,24(sp)
    5f40:	dd000515 	stw	r20,20(sp)
    5f44:	dcc00415 	stw	r19,16(sp)
    5f48:	dc800315 	stw	r18,12(sp)
    5f4c:	dc400215 	stw	r17,8(sp)
    5f50:	dc000115 	stw	r16,4(sp)
    5f54:	2821883a 	mov	r16,r5
    5f58:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    5f5c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5f60:	3000021e 	bne	r6,zero,5f6c <alt_up_rs232_read_fd+0x34>
    5f64:	0025883a 	mov	r18,zero
    5f68:	00000a06 	br	5f94 <alt_up_rs232_read_fd+0x5c>
    5f6c:	0025883a 	mov	r18,zero
    5f70:	04400044 	movi	r17,1
    5f74:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    5f78:	8461883a 	add	r16,r16,r17
    5f7c:	9809883a 	mov	r4,r19
    5f80:	d80d883a 	mov	r6,sp
    5f84:	0005eec0 	call	5eec <alt_up_rs232_read_data>
    5f88:	1000021e 	bne	r2,zero,5f94 <alt_up_rs232_read_fd+0x5c>
			count++;
    5f8c:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5f90:	a4bff81e 	bne	r20,r18,5f74 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    5f94:	9005883a 	mov	r2,r18
    5f98:	dfc00617 	ldw	ra,24(sp)
    5f9c:	dd000517 	ldw	r20,20(sp)
    5fa0:	dcc00417 	ldw	r19,16(sp)
    5fa4:	dc800317 	ldw	r18,12(sp)
    5fa8:	dc400217 	ldw	r17,8(sp)
    5fac:	dc000117 	ldw	r16,4(sp)
    5fb0:	dec00704 	addi	sp,sp,28
    5fb4:	f800283a 	ret

00005fb8 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5fb8:	20800a17 	ldw	r2,40(r4)
    5fbc:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    5fc0:	1004d43a 	srli	r2,r2,16
    5fc4:	f800283a 	ret

00005fc8 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    5fc8:	20800a17 	ldw	r2,40(r4)
    5fcc:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    5fd0:	29403fcc 	andi	r5,r5,255
    5fd4:	11400035 	stwio	r5,0(r2)
	return 0;
}
    5fd8:	0005883a 	mov	r2,zero
    5fdc:	f800283a 	ret

00005fe0 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5fe0:	defffb04 	addi	sp,sp,-20
    5fe4:	dfc00415 	stw	ra,16(sp)
    5fe8:	dcc00315 	stw	r19,12(sp)
    5fec:	dc800215 	stw	r18,8(sp)
    5ff0:	dc400115 	stw	r17,4(sp)
    5ff4:	dc000015 	stw	r16,0(sp)
    5ff8:	2827883a 	mov	r19,r5
    5ffc:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    6000:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    6004:	3000021e 	bne	r6,zero,6010 <alt_up_rs232_write_fd+0x30>
    6008:	0021883a 	mov	r16,zero
    600c:	00000806 	br	6030 <alt_up_rs232_write_fd+0x50>
    6010:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    6014:	84c5883a 	add	r2,r16,r19
    6018:	8809883a 	mov	r4,r17
    601c:	11400003 	ldbu	r5,0(r2)
    6020:	0005fc80 	call	5fc8 <alt_up_rs232_write_data>
    6024:	1000021e 	bne	r2,zero,6030 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    6028:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    602c:	943ff91e 	bne	r18,r16,6014 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    6030:	8005883a 	mov	r2,r16
    6034:	dfc00417 	ldw	ra,16(sp)
    6038:	dcc00317 	ldw	r19,12(sp)
    603c:	dc800217 	ldw	r18,8(sp)
    6040:	dc400117 	ldw	r17,4(sp)
    6044:	dc000017 	ldw	r16,0(sp)
    6048:	dec00504 	addi	sp,sp,20
    604c:	f800283a 	ret

00006050 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    6050:	20800a17 	ldw	r2,40(r4)
    6054:	10800104 	addi	r2,r2,4
    6058:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    605c:	013fff84 	movi	r4,-2
    6060:	1906703a 	and	r3,r3,r4
    6064:	10c00035 	stwio	r3,0(r2)
}
    6068:	f800283a 	ret

0000606c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    606c:	20c00a17 	ldw	r3,40(r4)
    6070:	18c00104 	addi	r3,r3,4
    6074:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    6078:	10800054 	ori	r2,r2,1
    607c:	18800035 	stwio	r2,0(r3)
}
    6080:	f800283a 	ret

00006084 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    6084:	20800a17 	ldw	r2,40(r4)
    6088:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    608c:	10bfffcc 	andi	r2,r2,65535
    6090:	f800283a 	ret

00006094 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    6094:	20800c17 	ldw	r2,48(r4)
    6098:	30801c2e 	bgeu	r6,r2,610c <alt_up_char_buffer_string+0x78>
    609c:	20800d17 	ldw	r2,52(r4)
    60a0:	38801a2e 	bgeu	r7,r2,610c <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    60a4:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    60a8:	28c00003 	ldbu	r3,0(r5)
    60ac:	18803fcc 	andi	r2,r3,255
    60b0:	1080201c 	xori	r2,r2,128
    60b4:	10bfe004 	addi	r2,r2,-128
    60b8:	10001626 	beq	r2,zero,6114 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    60bc:	3a04983a 	sll	r2,r7,r8
    60c0:	308f883a 	add	r7,r6,r2
    60c4:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    60c8:	20800b17 	ldw	r2,44(r4)
    60cc:	3885883a 	add	r2,r7,r2
    60d0:	18c03fcc 	andi	r3,r3,255
    60d4:	18c0201c 	xori	r3,r3,128
    60d8:	18ffe004 	addi	r3,r3,-128
    60dc:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    60e0:	320d883a 	add	r6,r6,r8
    60e4:	20800c17 	ldw	r2,48(r4)
    60e8:	3080082e 	bgeu	r6,r2,610c <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    60ec:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    60f0:	28c00003 	ldbu	r3,0(r5)
    60f4:	18803fcc 	andi	r2,r3,255
    60f8:	1080201c 	xori	r2,r2,128
    60fc:	10bfe004 	addi	r2,r2,-128
    6100:	10000426 	beq	r2,zero,6114 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    6104:	3a0f883a 	add	r7,r7,r8
    6108:	003fef06 	br	60c8 <alt_up_char_buffer_string+0x34>
    610c:	00bfffc4 	movi	r2,-1
    6110:	f800283a 	ret
    6114:	0005883a 	mov	r2,zero
	}
	return 0;
}
    6118:	f800283a 	ret

0000611c <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    611c:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    6120:	20800c17 	ldw	r2,48(r4)
    6124:	3080112e 	bgeu	r6,r2,616c <alt_up_char_buffer_draw+0x50>
    6128:	20800d17 	ldw	r2,52(r4)
    612c:	38800f2e 	bgeu	r7,r2,616c <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    6130:	20c00f17 	ldw	r3,60(r4)
    6134:	30c6703a 	and	r3,r6,r3
    6138:	20800e17 	ldw	r2,56(r4)
    613c:	1886983a 	sll	r3,r3,r2
    6140:	20801117 	ldw	r2,68(r4)
    6144:	3884703a 	and	r2,r7,r2
    6148:	21001017 	ldw	r4,64(r4)
    614c:	1104983a 	sll	r2,r2,r4
    6150:	1886b03a 	or	r3,r3,r2
    6154:	40800b17 	ldw	r2,44(r8)
    6158:	1887883a 	add	r3,r3,r2
    615c:	28803fcc 	andi	r2,r5,255
    6160:	18800025 	stbio	r2,0(r3)
    6164:	0005883a 	mov	r2,zero
    6168:	f800283a 	ret

	return 0;
    616c:	00bfffc4 	movi	r2,-1
}
    6170:	f800283a 	ret

00006174 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    6174:	20c00a17 	ldw	r3,40(r4)
    6178:	00800044 	movi	r2,1
    617c:	188000a5 	stbio	r2,2(r3)
    6180:	20800a17 	ldw	r2,40(r4)
    6184:	10c00084 	addi	r3,r2,2
    6188:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    618c:	18800023 	ldbuio	r2,0(r3)
    6190:	1104703a 	and	r2,r2,r4
    6194:	103ffd1e 	bne	r2,zero,618c <alt_up_char_buffer_clear+0x18>
	return 0;
}
    6198:	f800283a 	ret

0000619c <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    619c:	deffff04 	addi	sp,sp,-4
    61a0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    61a4:	01400074 	movhi	r5,1
    61a8:	294fa804 	addi	r5,r5,16032
    61ac:	0006e480 	call	6e48 <alt_find_dev>

  return dev;
}
    61b0:	dfc00017 	ldw	ra,0(sp)
    61b4:	dec00104 	addi	sp,sp,4
    61b8:	f800283a 	ret

000061bc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    61bc:	defffe04 	addi	sp,sp,-8
    61c0:	dfc00115 	stw	ra,4(sp)
    61c4:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    61c8:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    61cc:	80800007 	ldb	r2,0(r16)
    61d0:	10000a26 	beq	r2,zero,61fc <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    61d4:	8009883a 	mov	r4,r16
    61d8:	01400074 	movhi	r5,1
    61dc:	2967d704 	addi	r5,r5,-24740
    61e0:	00077b40 	call	77b4 <strcmp>
    61e4:	1000021e 	bne	r2,zero,61f0 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    61e8:	80000005 	stb	zero,0(r16)
    61ec:	00000306 	br	61fc <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    61f0:	84000044 	addi	r16,r16,1
    61f4:	80800007 	ldb	r2,0(r16)
    61f8:	103ff61e 	bne	r2,zero,61d4 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    61fc:	dfc00117 	ldw	ra,4(sp)
    6200:	dc000017 	ldw	r16,0(sp)
    6204:	dec00204 	addi	sp,sp,8
    6208:	f800283a 	ret

0000620c <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    620c:	da000017 	ldw	r8,0(sp)
    6210:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    6214:	1800051e 	bne	r3,zero,622c <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    6218:	29c5383a 	mul	r2,r5,r7
    621c:	3085883a 	add	r2,r6,r2
    6220:	1105883a 	add	r2,r2,r4
    6224:	12000025 	stbio	r8,0(r2)
    6228:	f800283a 	ret
	else if (mode == 1)
    622c:	00800044 	movi	r2,1
    6230:	1880061e 	bne	r3,r2,624c <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    6234:	29c5383a 	mul	r2,r5,r7
    6238:	3085883a 	add	r2,r6,r2
    623c:	1085883a 	add	r2,r2,r2
    6240:	1105883a 	add	r2,r2,r4
    6244:	1200002d 	sthio	r8,0(r2)
    6248:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    624c:	29c5383a 	mul	r2,r5,r7
    6250:	1185883a 	add	r2,r2,r6
    6254:	1085883a 	add	r2,r2,r2
    6258:	1085883a 	add	r2,r2,r2
    625c:	1105883a 	add	r2,r2,r4
    6260:	12000035 	stwio	r8,0(r2)
    6264:	f800283a 	ret

00006268 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    6268:	defff304 	addi	sp,sp,-52
    626c:	dfc00c15 	stw	ra,48(sp)
    6270:	df000b15 	stw	fp,44(sp)
    6274:	ddc00a15 	stw	r23,40(sp)
    6278:	dd800915 	stw	r22,36(sp)
    627c:	dd400815 	stw	r21,32(sp)
    6280:	dd000715 	stw	r20,28(sp)
    6284:	dcc00615 	stw	r19,24(sp)
    6288:	dc800515 	stw	r18,20(sp)
    628c:	dc400415 	stw	r17,16(sp)
    6290:	dc000315 	stw	r16,12(sp)
    6294:	3011883a 	mov	r8,r6
    6298:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    629c:	4987c83a 	sub	r3,r9,r6
    62a0:	1800010e 	bge	r3,zero,62a8 <alt_up_pixel_buffer_dma_draw_line+0x40>
    62a4:	00c7c83a 	sub	r3,zero,r3
    62a8:	3945c83a 	sub	r2,r7,r5
    62ac:	1000010e 	bge	r2,zero,62b4 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    62b0:	0085c83a 	sub	r2,zero,r2
    62b4:	10c4803a 	cmplt	r2,r2,r3
    62b8:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    62bc:	20c00e17 	ldw	r3,56(r4)
    62c0:	00800044 	movi	r2,1
    62c4:	1880021e 	bne	r3,r2,62d0 <alt_up_pixel_buffer_dma_draw_line+0x68>
    62c8:	d8000215 	stw	zero,8(sp)
    62cc:	00000306 	br	62dc <alt_up_pixel_buffer_dma_draw_line+0x74>
    62d0:	18c00098 	cmpnei	r3,r3,2
    62d4:	18c00044 	addi	r3,r3,1
    62d8:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    62dc:	20800d17 	ldw	r2,52(r4)
    62e0:	1000061e 	bne	r2,zero,62fc <alt_up_pixel_buffer_dma_draw_line+0x94>
    62e4:	20801317 	ldw	r2,76(r4)
    62e8:	d8c00217 	ldw	r3,8(sp)
    62ec:	10c5c83a 	sub	r2,r2,r3
    62f0:	00c00044 	movi	r3,1
    62f4:	18ae983a 	sll	r23,r3,r2
    62f8:	00000106 	br	6300 <alt_up_pixel_buffer_dma_draw_line+0x98>
    62fc:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    6300:	d8c00f17 	ldw	r3,60(sp)
    6304:	00800044 	movi	r2,1
    6308:	1880021e 	bne	r3,r2,6314 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    630c:	25800c17 	ldw	r22,48(r4)
    6310:	00000106 	br	6318 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    6314:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    6318:	50000326 	beq	r10,zero,6328 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    631c:	400d883a 	mov	r6,r8
    6320:	4827883a 	mov	r19,r9
    6324:	00000406 	br	6338 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    6328:	280d883a 	mov	r6,r5
    632c:	400b883a 	mov	r5,r8
    6330:	3827883a 	mov	r19,r7
    6334:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    6338:	9980060e 	bge	r19,r6,6354 <alt_up_pixel_buffer_dma_draw_line+0xec>
    633c:	9805883a 	mov	r2,r19
    6340:	3027883a 	mov	r19,r6
    6344:	100d883a 	mov	r6,r2
    6348:	3805883a 	mov	r2,r7
    634c:	280f883a 	mov	r7,r5
    6350:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    6354:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    6358:	3969c83a 	sub	r20,r7,r5
    635c:	a000010e 	bge	r20,zero,6364 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    6360:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    6364:	a804d7fa 	srli	r2,r21,31
    6368:	1545883a 	add	r2,r2,r21
    636c:	1005d07a 	srai	r2,r2,1
    6370:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    6374:	29c0020e 	bge	r5,r7,6380 <alt_up_pixel_buffer_dma_draw_line+0x118>
    6378:	07000044 	movi	fp,1
    637c:	00000106 	br	6384 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    6380:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    6384:	50000226 	beq	r10,zero,6390 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    6388:	9980030e 	bge	r19,r6,6398 <alt_up_pixel_buffer_dma_draw_line+0x130>
    638c:	00002506 	br	6424 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    6390:	9980130e 	bge	r19,r6,63e0 <alt_up_pixel_buffer_dma_draw_line+0x178>
    6394:	00002306 	br	6424 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    6398:	3021883a 	mov	r16,r6
    639c:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    63a0:	d8800e17 	ldw	r2,56(sp)
    63a4:	d8800015 	stw	r2,0(sp)
    63a8:	d8c00217 	ldw	r3,8(sp)
    63ac:	d8c00115 	stw	r3,4(sp)
    63b0:	b009883a 	mov	r4,r22
    63b4:	b80b883a 	mov	r5,r23
    63b8:	900d883a 	mov	r6,r18
    63bc:	800f883a 	mov	r7,r16
    63c0:	000620c0 	call	620c <helper_plot_pixel>
			error = error + deltay;
    63c4:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    63c8:	0440020e 	bge	zero,r17,63d4 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    63cc:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    63d0:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    63d4:	84000044 	addi	r16,r16,1
    63d8:	9c001216 	blt	r19,r16,6424 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    63dc:	003ff006 	br	63a0 <alt_up_pixel_buffer_dma_draw_line+0x138>
    63e0:	3021883a 	mov	r16,r6
    63e4:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    63e8:	d8800e17 	ldw	r2,56(sp)
    63ec:	d8800015 	stw	r2,0(sp)
    63f0:	d8c00217 	ldw	r3,8(sp)
    63f4:	d8c00115 	stw	r3,4(sp)
    63f8:	b009883a 	mov	r4,r22
    63fc:	b80b883a 	mov	r5,r23
    6400:	800d883a 	mov	r6,r16
    6404:	900f883a 	mov	r7,r18
    6408:	000620c0 	call	620c <helper_plot_pixel>
			error = error + deltay;
    640c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    6410:	0440020e 	bge	zero,r17,641c <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    6414:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    6418:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    641c:	84000044 	addi	r16,r16,1
    6420:	9c3ff10e 	bge	r19,r16,63e8 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    6424:	dfc00c17 	ldw	ra,48(sp)
    6428:	df000b17 	ldw	fp,44(sp)
    642c:	ddc00a17 	ldw	r23,40(sp)
    6430:	dd800917 	ldw	r22,36(sp)
    6434:	dd400817 	ldw	r21,32(sp)
    6438:	dd000717 	ldw	r20,28(sp)
    643c:	dcc00617 	ldw	r19,24(sp)
    6440:	dc800517 	ldw	r18,20(sp)
    6444:	dc400417 	ldw	r17,16(sp)
    6448:	dc000317 	ldw	r16,12(sp)
    644c:	dec00d04 	addi	sp,sp,52
    6450:	f800283a 	ret

00006454 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    6454:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    6458:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    645c:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    6460:	3980022e 	bgeu	r7,r6,646c <alt_up_pixel_buffer_dma_draw_vline+0x18>
    6464:	3011883a 	mov	r8,r6
    6468:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    646c:	2a405d2e 	bgeu	r5,r9,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6470:	30805c2e 	bgeu	r6,r2,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    6474:	40800136 	bltu	r8,r2,647c <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    6478:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    647c:	d8c00117 	ldw	r3,4(sp)
    6480:	00800044 	movi	r2,1
    6484:	1880021e 	bne	r3,r2,6490 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    6488:	20c00c17 	ldw	r3,48(r4)
    648c:	00000106 	br	6494 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    6490:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    6494:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6498:	20800d17 	ldw	r2,52(r4)
    649c:	1000281e 	bne	r2,zero,6540 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    64a0:	22801317 	ldw	r10,76(r4)
    64a4:	3284983a 	sll	r2,r6,r10
    64a8:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    64ac:	21000e17 	ldw	r4,56(r4)
    64b0:	00800044 	movi	r2,1
    64b4:	2080091e 	bne	r4,r2,64dc <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    64b8:	41804a36 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    64bc:	1013883a 	mov	r9,r2
    64c0:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    64c4:	1945883a 	add	r2,r3,r5
    64c8:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    64cc:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    64d0:	324d883a 	add	r6,r6,r9
    64d4:	41804336 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    64d8:	003ffa06 	br	64c4 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    64dc:	00800084 	movi	r2,2
    64e0:	2080021e 	bne	r4,r2,64ec <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    64e4:	4180032e 	bgeu	r8,r6,64f4 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    64e8:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    64ec:	41800a2e 	bgeu	r8,r6,6518 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    64f0:	f800283a 	ret
    64f4:	294b883a 	add	r5,r5,r5
    64f8:	02400044 	movi	r9,1
    64fc:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    6500:	28c5883a 	add	r2,r5,r3
    6504:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    6508:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    650c:	324d883a 	add	r6,r6,r9
    6510:	41803436 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6514:	003ffa06 	br	6500 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    6518:	2945883a 	add	r2,r5,r5
    651c:	108b883a 	add	r5,r2,r2
    6520:	02400044 	movi	r9,1
    6524:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    6528:	28c5883a 	add	r2,r5,r3
    652c:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    6530:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    6534:	324d883a 	add	r6,r6,r9
    6538:	41802a36 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    653c:	003ffa06 	br	6528 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6540:	21000e17 	ldw	r4,56(r4)
    6544:	00800044 	movi	r2,1
    6548:	20800b1e 	bne	r4,r2,6578 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    654c:	41802536 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6550:	4809883a 	mov	r4,r9
    6554:	3245383a 	mul	r2,r6,r9
    6558:	1885883a 	add	r2,r3,r2
    655c:	1145883a 	add	r2,r2,r5
    6560:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    6564:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6568:	30cd883a 	add	r6,r6,r3
    656c:	1105883a 	add	r2,r2,r4
    6570:	41801c36 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    6574:	003ffb06 	br	6564 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6578:	00800084 	movi	r2,2
    657c:	20800c1e 	bne	r4,r2,65b0 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6580:	41801836 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    6584:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    6588:	3105383a 	mul	r2,r6,r4
    658c:	1887883a 	add	r3,r3,r2
    6590:	294b883a 	add	r5,r5,r5
    6594:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    6598:	28c5883a 	add	r2,r5,r3
    659c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    65a0:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    65a4:	324d883a 	add	r6,r6,r9
    65a8:	41800e36 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    65ac:	003ffa06 	br	6598 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    65b0:	41800c36 	bltu	r8,r6,65e4 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    65b4:	4a45883a 	add	r2,r9,r9
    65b8:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    65bc:	3105383a 	mul	r2,r6,r4
    65c0:	1887883a 	add	r3,r3,r2
    65c4:	2945883a 	add	r2,r5,r5
    65c8:	108b883a 	add	r5,r2,r2
    65cc:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    65d0:	28c5883a 	add	r2,r5,r3
    65d4:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    65d8:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    65dc:	324d883a 	add	r6,r6,r9
    65e0:	41bffb2e 	bgeu	r8,r6,65d0 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    65e4:	f800283a 	ret

000065e8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    65e8:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    65ec:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    65f0:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    65f4:	3140022e 	bgeu	r6,r5,6600 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    65f8:	2813883a 	mov	r9,r5
    65fc:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    6600:	2a00552e 	bgeu	r5,r8,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6604:	3880542e 	bgeu	r7,r2,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    6608:	4a000136 	bltu	r9,r8,6610 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    660c:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6610:	d8c00117 	ldw	r3,4(sp)
    6614:	00800044 	movi	r2,1
    6618:	1880021e 	bne	r3,r2,6624 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    661c:	21800c17 	ldw	r6,48(r4)
    6620:	00000106 	br	6628 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    6624:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    6628:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    662c:	20800d17 	ldw	r2,52(r4)
    6630:	1000231e 	bne	r2,zero,66c0 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    6634:	20801317 	ldw	r2,76(r4)
    6638:	3884983a 	sll	r2,r7,r2
    663c:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6640:	21000e17 	ldw	r4,56(r4)
    6644:	00800044 	movi	r2,1
    6648:	2080081e 	bne	r4,r2,666c <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    664c:	49404236 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6650:	3945883a 	add	r2,r7,r5
    6654:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    6658:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    665c:	290b883a 	add	r5,r5,r4
    6660:	1105883a 	add	r2,r2,r4
    6664:	49403c36 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6668:	003ffb06 	br	6658 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    666c:	00800084 	movi	r2,2
    6670:	2080021e 	bne	r4,r2,667c <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    6674:	4940032e 	bgeu	r9,r5,6684 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    6678:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    667c:	4940082e 	bgeu	r9,r5,66a0 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    6680:	f800283a 	ret
    6684:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    6688:	2945883a 	add	r2,r5,r5
    668c:	11c5883a 	add	r2,r2,r7
    6690:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    6694:	290b883a 	add	r5,r5,r4
    6698:	49402f36 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    669c:	003ffa06 	br	6688 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    66a0:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    66a4:	2945883a 	add	r2,r5,r5
    66a8:	1085883a 	add	r2,r2,r2
    66ac:	11c5883a 	add	r2,r2,r7
    66b0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    66b4:	290b883a 	add	r5,r5,r4
    66b8:	49402736 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    66bc:	003ff906 	br	66a4 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    66c0:	21000e17 	ldw	r4,56(r4)
    66c4:	00800044 	movi	r2,1
    66c8:	20800a1e 	bne	r4,r2,66f4 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    66cc:	41c5383a 	mul	r2,r8,r7
    66d0:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    66d4:	49402036 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    66d8:	1145883a 	add	r2,r2,r5
    66dc:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    66e0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    66e4:	290b883a 	add	r5,r5,r4
    66e8:	1105883a 	add	r2,r2,r4
    66ec:	49401a36 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    66f0:	003ffb06 	br	66e0 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    66f4:	00800084 	movi	r2,2
    66f8:	20800b1e 	bne	r4,r2,6728 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    66fc:	4205883a 	add	r2,r8,r8
    6700:	3885383a 	mul	r2,r7,r2
    6704:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    6708:	49401336 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    670c:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    6710:	2945883a 	add	r2,r5,r5
    6714:	11c5883a 	add	r2,r2,r7
    6718:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    671c:	290b883a 	add	r5,r5,r4
    6720:	49400d36 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    6724:	003ffa06 	br	6710 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    6728:	4205883a 	add	r2,r8,r8
    672c:	1085883a 	add	r2,r2,r2
    6730:	3885383a 	mul	r2,r7,r2
    6734:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    6738:	49400736 	bltu	r9,r5,6758 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    673c:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    6740:	2945883a 	add	r2,r5,r5
    6744:	1085883a 	add	r2,r2,r2
    6748:	11c5883a 	add	r2,r2,r7
    674c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    6750:	290b883a 	add	r5,r5,r4
    6754:	497ffa2e 	bgeu	r9,r5,6740 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    6758:	f800283a 	ret

0000675c <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    675c:	defff604 	addi	sp,sp,-40
    6760:	dfc00915 	stw	ra,36(sp)
    6764:	dd800815 	stw	r22,32(sp)
    6768:	dd400715 	stw	r21,28(sp)
    676c:	dd000615 	stw	r20,24(sp)
    6770:	dcc00515 	stw	r19,20(sp)
    6774:	dc800415 	stw	r18,16(sp)
    6778:	dc400315 	stw	r17,12(sp)
    677c:	dc000215 	stw	r16,8(sp)
    6780:	2029883a 	mov	r20,r4
    6784:	282d883a 	mov	r22,r5
    6788:	302b883a 	mov	r21,r6
    678c:	3825883a 	mov	r18,r7
    6790:	dcc00a17 	ldw	r19,40(sp)
    6794:	dc000b17 	ldw	r16,44(sp)
    6798:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    679c:	dc000015 	stw	r16,0(sp)
    67a0:	dc400115 	stw	r17,4(sp)
    67a4:	380d883a 	mov	r6,r7
    67a8:	a80f883a 	mov	r7,r21
    67ac:	00065e80 	call	65e8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    67b0:	dc000015 	stw	r16,0(sp)
    67b4:	dc400115 	stw	r17,4(sp)
    67b8:	a009883a 	mov	r4,r20
    67bc:	b00b883a 	mov	r5,r22
    67c0:	900d883a 	mov	r6,r18
    67c4:	980f883a 	mov	r7,r19
    67c8:	00065e80 	call	65e8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    67cc:	dc000015 	stw	r16,0(sp)
    67d0:	dc400115 	stw	r17,4(sp)
    67d4:	a009883a 	mov	r4,r20
    67d8:	b00b883a 	mov	r5,r22
    67dc:	a80d883a 	mov	r6,r21
    67e0:	980f883a 	mov	r7,r19
    67e4:	00064540 	call	6454 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    67e8:	dc000015 	stw	r16,0(sp)
    67ec:	dc400115 	stw	r17,4(sp)
    67f0:	a009883a 	mov	r4,r20
    67f4:	900b883a 	mov	r5,r18
    67f8:	a80d883a 	mov	r6,r21
    67fc:	980f883a 	mov	r7,r19
    6800:	00064540 	call	6454 <alt_up_pixel_buffer_dma_draw_vline>
}
    6804:	dfc00917 	ldw	ra,36(sp)
    6808:	dd800817 	ldw	r22,32(sp)
    680c:	dd400717 	ldw	r21,28(sp)
    6810:	dd000617 	ldw	r20,24(sp)
    6814:	dcc00517 	ldw	r19,20(sp)
    6818:	dc800417 	ldw	r18,16(sp)
    681c:	dc400317 	ldw	r17,12(sp)
    6820:	dc000217 	ldw	r16,8(sp)
    6824:	dec00a04 	addi	sp,sp,40
    6828:	f800283a 	ret

0000682c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    682c:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    6830:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    6834:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    6838:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    683c:	3940022e 	bgeu	r7,r5,6848 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    6840:	2811883a 	mov	r8,r5
    6844:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    6848:	5980032e 	bgeu	r11,r6,6858 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    684c:	5805883a 	mov	r2,r11
    6850:	3017883a 	mov	r11,r6
    6854:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    6858:	2a80842e 	bgeu	r5,r10,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
    685c:	30c0832e 	bgeu	r6,r3,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    6860:	42800136 	bltu	r8,r10,6868 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    6864:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    6868:	58c00136 	bltu	r11,r3,6870 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    686c:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6870:	d8c00217 	ldw	r3,8(sp)
    6874:	00800044 	movi	r2,1
    6878:	1880021e 	bne	r3,r2,6884 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    687c:	20c00c17 	ldw	r3,48(r4)
    6880:	00000106 	br	6888 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    6884:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    6888:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    688c:	20800d17 	ldw	r2,52(r4)
    6890:	1000391e 	bne	r2,zero,6978 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    6894:	22801317 	ldw	r10,76(r4)
    6898:	3284983a 	sll	r2,r6,r10
    689c:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    68a0:	21000e17 	ldw	r4,56(r4)
    68a4:	00800044 	movi	r2,1
    68a8:	2080101e 	bne	r4,r2,68ec <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    68ac:	59806f36 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
    68b0:	00000a06 	br	68dc <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    68b4:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    68b8:	00800044 	movi	r2,1
    68bc:	1887883a 	add	r3,r3,r2
    68c0:	2089883a 	add	r4,r4,r2
    68c4:	40fffb2e 	bgeu	r8,r3,68b4 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    68c8:	00800044 	movi	r2,1
    68cc:	308d883a 	add	r6,r6,r2
    68d0:	59806636 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    68d4:	1284983a 	sll	r2,r2,r10
    68d8:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    68dc:	417ffa36 	bltu	r8,r5,68c8 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    68e0:	29c9883a 	add	r4,r5,r7
    68e4:	2807883a 	mov	r3,r5
    68e8:	003ff206 	br	68b4 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    68ec:	00800084 	movi	r2,2
    68f0:	2080021e 	bne	r4,r2,68fc <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    68f4:	59805d36 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
    68f8:	00000e06 	br	6934 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    68fc:	59805b36 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
    6900:	00001b06 	br	6970 <alt_up_pixel_buffer_dma_draw_box+0x144>
    6904:	2807883a 	mov	r3,r5
    6908:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    690c:	18c5883a 	add	r2,r3,r3
    6910:	11c5883a 	add	r2,r2,r7
    6914:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6918:	1907883a 	add	r3,r3,r4
    691c:	40fffb2e 	bgeu	r8,r3,690c <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    6920:	00800044 	movi	r2,1
    6924:	308d883a 	add	r6,r6,r2
    6928:	59805036 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    692c:	1284983a 	sll	r2,r2,r10
    6930:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6934:	417ff32e 	bgeu	r8,r5,6904 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    6938:	003ff906 	br	6920 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    693c:	2807883a 	mov	r3,r5
    6940:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    6944:	18c5883a 	add	r2,r3,r3
    6948:	1085883a 	add	r2,r2,r2
    694c:	11c5883a 	add	r2,r2,r7
    6950:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6954:	1907883a 	add	r3,r3,r4
    6958:	40fffa2e 	bgeu	r8,r3,6944 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    695c:	00800044 	movi	r2,1
    6960:	308d883a 	add	r6,r6,r2
    6964:	59804136 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    6968:	1284983a 	sll	r2,r2,r10
    696c:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6970:	417ff22e 	bgeu	r8,r5,693c <alt_up_pixel_buffer_dma_draw_box+0x110>
    6974:	003ff906 	br	695c <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6978:	21000e17 	ldw	r4,56(r4)
    697c:	00800044 	movi	r2,1
    6980:	2080121e 	bne	r4,r2,69cc <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6984:	59803936 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
    6988:	5019883a 	mov	r12,r10
    698c:	3285383a 	mul	r2,r6,r10
    6990:	1885883a 	add	r2,r3,r2
    6994:	114f883a 	add	r7,r2,r5
    6998:	00000806 	br	69bc <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    699c:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    69a0:	00800044 	movi	r2,1
    69a4:	1887883a 	add	r3,r3,r2
    69a8:	2089883a 	add	r4,r4,r2
    69ac:	40fffb2e 	bgeu	r8,r3,699c <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    69b0:	31800044 	addi	r6,r6,1
    69b4:	3b0f883a 	add	r7,r7,r12
    69b8:	59802c36 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    69bc:	417ffc36 	bltu	r8,r5,69b0 <alt_up_pixel_buffer_dma_draw_box+0x184>
    69c0:	3809883a 	mov	r4,r7
    69c4:	2807883a 	mov	r3,r5
    69c8:	003ff406 	br	699c <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    69cc:	00800084 	movi	r2,2
    69d0:	2080121e 	bne	r4,r2,6a1c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    69d4:	59802536 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    69d8:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    69dc:	3285383a 	mul	r2,r6,r10
    69e0:	1889883a 	add	r4,r3,r2
    69e4:	03000044 	movi	r12,1
    69e8:	00000a06 	br	6a14 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    69ec:	2807883a 	mov	r3,r5
    69f0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    69f4:	18c5883a 	add	r2,r3,r3
    69f8:	1105883a 	add	r2,r2,r4
    69fc:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6a00:	19c7883a 	add	r3,r3,r7
    6a04:	40fffb2e 	bgeu	r8,r3,69f4 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6a08:	330d883a 	add	r6,r6,r12
    6a0c:	59801736 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    6a10:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6a14:	417ff52e 	bgeu	r8,r5,69ec <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    6a18:	003ffb06 	br	6a08 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6a1c:	59801336 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    6a20:	5285883a 	add	r2,r10,r10
    6a24:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    6a28:	3285383a 	mul	r2,r6,r10
    6a2c:	1889883a 	add	r4,r3,r2
    6a30:	03000044 	movi	r12,1
    6a34:	00000b06 	br	6a64 <alt_up_pixel_buffer_dma_draw_box+0x238>
    6a38:	2807883a 	mov	r3,r5
    6a3c:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    6a40:	18c5883a 	add	r2,r3,r3
    6a44:	1085883a 	add	r2,r2,r2
    6a48:	1105883a 	add	r2,r2,r4
    6a4c:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6a50:	19c7883a 	add	r3,r3,r7
    6a54:	40fffa2e 	bgeu	r8,r3,6a40 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    6a58:	330d883a 	add	r6,r6,r12
    6a5c:	59800336 	bltu	r11,r6,6a6c <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    6a60:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    6a64:	417ff42e 	bgeu	r8,r5,6a38 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    6a68:	003ffb06 	br	6a58 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    6a6c:	f800283a 	ret

00006a70 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6a70:	00800044 	movi	r2,1
    6a74:	2880021e 	bne	r5,r2,6a80 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    6a78:	21c00c17 	ldw	r7,48(r4)
    6a7c:	00000106 	br	6a84 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    6a80:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    6a84:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6a88:	20c00e17 	ldw	r3,56(r4)
    6a8c:	00800084 	movi	r2,2
    6a90:	1880021e 	bne	r3,r2,6a9c <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    6a94:	294d883a 	add	r6,r5,r5
    6a98:	00000206 	br	6aa4 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    6a9c:	2945883a 	add	r2,r5,r5
    6aa0:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    6aa4:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6aa8:	20800d17 	ldw	r2,52(r4)
    6aac:	1000121e 	bne	r2,zero,6af8 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    6ab0:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    6ab4:	48001a26 	beq	r9,zero,6b20 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    6ab8:	0011883a 	mov	r8,zero
    6abc:	3014c03a 	cmpne	r10,r6,zero
    6ac0:	00000b06 	br	6af0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    6ac4:	0007883a 	mov	r3,zero
    6ac8:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    6acc:	19c5883a 	add	r2,r3,r7
    6ad0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    6ad4:	1947883a 	add	r3,r3,r5
    6ad8:	19bffc36 	bltu	r3,r6,6acc <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    6adc:	00800044 	movi	r2,1
    6ae0:	4091883a 	add	r8,r8,r2
    6ae4:	4a000e26 	beq	r9,r8,6b20 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    6ae8:	1104983a 	sll	r2,r2,r4
    6aec:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    6af0:	503ff41e 	bne	r10,zero,6ac4 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    6af4:	003ff906 	br	6adc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    6af8:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    6afc:	20000826 	beq	r4,zero,6b20 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    6b00:	0007883a 	mov	r3,zero
    6b04:	0005883a 	mov	r2,zero
    6b08:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    6b0c:	3885883a 	add	r2,r7,r2
    6b10:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    6b14:	1945883a 	add	r2,r3,r5
    6b18:	1007883a 	mov	r3,r2
    6b1c:	113ffb36 	bltu	r2,r4,6b0c <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    6b20:	f800283a 	ret

00006b24 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    6b24:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    6b28:	20c00a17 	ldw	r3,40(r4)
    6b2c:	00800044 	movi	r2,1
    6b30:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    6b34:	20800b17 	ldw	r2,44(r4)
    6b38:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    6b3c:	21400b15 	stw	r5,44(r4)
	return 0;
}
    6b40:	0005883a 	mov	r2,zero
    6b44:	f800283a 	ret

00006b48 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    6b48:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    6b4c:	22400f17 	ldw	r9,60(r4)
    6b50:	32402a2e 	bgeu	r6,r9,6bfc <alt_up_pixel_buffer_dma_draw+0xb4>
    6b54:	20801017 	ldw	r2,64(r4)
    6b58:	3880282e 	bgeu	r7,r2,6bfc <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6b5c:	20800d17 	ldw	r2,52(r4)
    6b60:	10000a1e 	bne	r2,zero,6b8c <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    6b64:	21001217 	ldw	r4,72(r4)
    6b68:	3108703a 	and	r4,r6,r4
    6b6c:	40801117 	ldw	r2,68(r8)
    6b70:	2088983a 	sll	r4,r4,r2
    6b74:	40801417 	ldw	r2,80(r8)
    6b78:	3884703a 	and	r2,r7,r2
    6b7c:	40c01317 	ldw	r3,76(r8)
    6b80:	10c4983a 	sll	r2,r2,r3
    6b84:	2086b03a 	or	r3,r4,r2
    6b88:	00000806 	br	6bac <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    6b8c:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    6b90:	40c01217 	ldw	r3,72(r8)
    6b94:	30c6703a 	and	r3,r6,r3
    6b98:	40801417 	ldw	r2,80(r8)
    6b9c:	3884703a 	and	r2,r7,r2
    6ba0:	4885383a 	mul	r2,r9,r2
    6ba4:	10c5883a 	add	r2,r2,r3
    6ba8:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6bac:	42400e17 	ldw	r9,56(r8)
    6bb0:	00800044 	movi	r2,1
    6bb4:	4880051e 	bne	r9,r2,6bcc <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6bb8:	40800c17 	ldw	r2,48(r8)
    6bbc:	1885883a 	add	r2,r3,r2
    6bc0:	11400025 	stbio	r5,0(r2)
    6bc4:	0005883a 	mov	r2,zero
    6bc8:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6bcc:	00800084 	movi	r2,2
    6bd0:	4880051e 	bne	r9,r2,6be8 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6bd4:	40800c17 	ldw	r2,48(r8)
    6bd8:	1885883a 	add	r2,r3,r2
    6bdc:	1140002d 	sthio	r5,0(r2)
    6be0:	0005883a 	mov	r2,zero
    6be4:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6be8:	40800c17 	ldw	r2,48(r8)
    6bec:	1885883a 	add	r2,r3,r2
    6bf0:	11400035 	stwio	r5,0(r2)
    6bf4:	0005883a 	mov	r2,zero
    6bf8:	f800283a 	ret
    6bfc:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    6c00:	f800283a 	ret

00006c04 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    6c04:	20800a17 	ldw	r2,40(r4)
    6c08:	10800337 	ldwio	r2,12(r2)
}
    6c0c:	1080004c 	andi	r2,r2,1
    6c10:	f800283a 	ret

00006c14 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    6c14:	00c00104 	movi	r3,4
    6c18:	20800a17 	ldw	r2,40(r4)
    6c1c:	10c5883a 	add	r2,r2,r3
    6c20:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    6c24:	20800a17 	ldw	r2,40(r4)
    6c28:	10c5883a 	add	r2,r2,r3
    6c2c:	10800037 	ldwio	r2,0(r2)
    6c30:	20800c15 	stw	r2,48(r4)
	return 0;
}
    6c34:	0005883a 	mov	r2,zero
    6c38:	f800283a 	ret

00006c3c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    6c3c:	deffff04 	addi	sp,sp,-4
    6c40:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    6c44:	01400074 	movhi	r5,1
    6c48:	294fa804 	addi	r5,r5,16032
    6c4c:	0006e480 	call	6e48 <alt_find_dev>

  return dev;
}
    6c50:	dfc00017 	ldw	ra,0(sp)
    6c54:	dec00104 	addi	sp,sp,4
    6c58:	f800283a 	ret

00006c5c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    6c5c:	008000b4 	movhi	r2,2
    6c60:	10b78a04 	addi	r2,r2,-8664
    6c64:	10800017 	ldw	r2,0(r2)
    6c68:	1000021e 	bne	r2,zero,6c74 <alt_alarm_start+0x18>
    6c6c:	00bfde84 	movi	r2,-134
    6c70:	f800283a 	ret
  {
    if (alarm)
    6c74:	2000021e 	bne	r4,zero,6c80 <alt_alarm_start+0x24>
    6c78:	00bffa84 	movi	r2,-22
    6c7c:	f800283a 	ret
    {
      alarm->callback = callback;
    6c80:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    6c84:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c88:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c8c:	00bfff84 	movi	r2,-2
    6c90:	3884703a 	and	r2,r7,r2
    6c94:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    6c98:	008000b4 	movhi	r2,2
    6c9c:	10b78b04 	addi	r2,r2,-8660
    6ca0:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    6ca4:	01800044 	movi	r6,1
    6ca8:	1985883a 	add	r2,r3,r6
    6cac:	2885883a 	add	r2,r5,r2
    6cb0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    6cb4:	10c0022e 	bgeu	r2,r3,6cc0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    6cb8:	21800405 	stb	r6,16(r4)
    6cbc:	00000106 	br	6cc4 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    6cc0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6cc4:	00800074 	movhi	r2,1
    6cc8:	108fad04 	addi	r2,r2,16052
    6ccc:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    6cd0:	10c00017 	ldw	r3,0(r2)
    6cd4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    6cd8:	10c00017 	ldw	r3,0(r2)
    6cdc:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    6ce0:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ce4:	3801703a 	wrctl	status,r7
    6ce8:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    6cec:	f800283a 	ret

00006cf0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    6cf0:	defffd04 	addi	sp,sp,-12
    6cf4:	dfc00215 	stw	ra,8(sp)
    6cf8:	dc400115 	stw	r17,4(sp)
    6cfc:	dc000015 	stw	r16,0(sp)
    6d00:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6d04:	20001c16 	blt	r4,zero,6d78 <close+0x88>
    6d08:	20c00324 	muli	r3,r4,12
    6d0c:	00800074 	movhi	r2,1
    6d10:	108d4404 	addi	r2,r2,13584
    6d14:	1889883a 	add	r4,r3,r2

  if (fd)
    6d18:	20001726 	beq	r4,zero,6d78 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    6d1c:	20800017 	ldw	r2,0(r4)
    6d20:	10800417 	ldw	r2,16(r2)
    6d24:	10002126 	beq	r2,zero,6dac <close+0xbc>
    6d28:	103ee83a 	callr	r2
    6d2c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6d30:	8009883a 	mov	r4,r16
    6d34:	000720c0 	call	720c <alt_release_fd>
    if (rval < 0)
    6d38:	88000216 	blt	r17,zero,6d44 <close+0x54>
    6d3c:	0005883a 	mov	r2,zero
    6d40:	00001d06 	br	6db8 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    6d44:	00800074 	movhi	r2,1
    6d48:	108fab04 	addi	r2,r2,16044
    6d4c:	10800017 	ldw	r2,0(r2)
    6d50:	1000031e 	bne	r2,zero,6d60 <close+0x70>
    6d54:	00c000b4 	movhi	r3,2
    6d58:	18f78c04 	addi	r3,r3,-8656
    6d5c:	00000206 	br	6d68 <close+0x78>
    6d60:	103ee83a 	callr	r2
    6d64:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    6d68:	0445c83a 	sub	r2,zero,r17
    6d6c:	18800015 	stw	r2,0(r3)
    6d70:	00bfffc4 	movi	r2,-1
    6d74:	00001006 	br	6db8 <close+0xc8>
    6d78:	00800074 	movhi	r2,1
    6d7c:	108fab04 	addi	r2,r2,16044
    6d80:	10800017 	ldw	r2,0(r2)
    6d84:	1000031e 	bne	r2,zero,6d94 <close+0xa4>
    6d88:	00c000b4 	movhi	r3,2
    6d8c:	18f78c04 	addi	r3,r3,-8656
    6d90:	00000206 	br	6d9c <close+0xac>
    6d94:	103ee83a 	callr	r2
    6d98:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6d9c:	00801444 	movi	r2,81
    6da0:	18800015 	stw	r2,0(r3)
    6da4:	00bfffc4 	movi	r2,-1
    6da8:	00000306 	br	6db8 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6dac:	8009883a 	mov	r4,r16
    6db0:	000720c0 	call	720c <alt_release_fd>
    6db4:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    6db8:	dfc00217 	ldw	ra,8(sp)
    6dbc:	dc400117 	ldw	r17,4(sp)
    6dc0:	dc000017 	ldw	r16,0(sp)
    6dc4:	dec00304 	addi	sp,sp,12
    6dc8:	f800283a 	ret

00006dcc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    6dcc:	f800283a 	ret

00006dd0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    6dd0:	3005883a 	mov	r2,r6
    6dd4:	f800283a 	ret

00006dd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6dd8:	deffff04 	addi	sp,sp,-4
    6ddc:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6de0:	20000226 	beq	r4,zero,6dec <alt_dev_llist_insert+0x14>
    6de4:	20800217 	ldw	r2,8(r4)
    6de8:	10000d1e 	bne	r2,zero,6e20 <alt_dev_llist_insert+0x48>
    6dec:	00800074 	movhi	r2,1
    6df0:	108fab04 	addi	r2,r2,16044
    6df4:	10800017 	ldw	r2,0(r2)
    6df8:	1000031e 	bne	r2,zero,6e08 <alt_dev_llist_insert+0x30>
    6dfc:	00c000b4 	movhi	r3,2
    6e00:	18f78c04 	addi	r3,r3,-8656
    6e04:	00000206 	br	6e10 <alt_dev_llist_insert+0x38>
    6e08:	103ee83a 	callr	r2
    6e0c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    6e10:	00800584 	movi	r2,22
    6e14:	18800015 	stw	r2,0(r3)
    6e18:	00bffa84 	movi	r2,-22
    6e1c:	00000706 	br	6e3c <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6e20:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    6e24:	28800017 	ldw	r2,0(r5)
    6e28:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    6e2c:	28800017 	ldw	r2,0(r5)
    6e30:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    6e34:	29000015 	stw	r4,0(r5)
    6e38:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    6e3c:	dfc00017 	ldw	ra,0(sp)
    6e40:	dec00104 	addi	sp,sp,4
    6e44:	f800283a 	ret

00006e48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6e48:	defffb04 	addi	sp,sp,-20
    6e4c:	dfc00415 	stw	ra,16(sp)
    6e50:	dcc00315 	stw	r19,12(sp)
    6e54:	dc800215 	stw	r18,8(sp)
    6e58:	dc400115 	stw	r17,4(sp)
    6e5c:	dc000015 	stw	r16,0(sp)
    6e60:	2027883a 	mov	r19,r4
    6e64:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    6e68:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    6e6c:	00078700 	call	7870 <strlen>
    6e70:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6e74:	8c000726 	beq	r17,r16,6e94 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6e78:	89000217 	ldw	r4,8(r17)
    6e7c:	980b883a 	mov	r5,r19
    6e80:	900d883a 	mov	r6,r18
    6e84:	00074b40 	call	74b4 <memcmp>
    6e88:	10000326 	beq	r2,zero,6e98 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    6e8c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6e90:	847ff91e 	bne	r16,r17,6e78 <alt_find_dev+0x30>
    6e94:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    6e98:	8805883a 	mov	r2,r17
    6e9c:	dfc00417 	ldw	ra,16(sp)
    6ea0:	dcc00317 	ldw	r19,12(sp)
    6ea4:	dc800217 	ldw	r18,8(sp)
    6ea8:	dc400117 	ldw	r17,4(sp)
    6eac:	dc000017 	ldw	r16,0(sp)
    6eb0:	dec00504 	addi	sp,sp,20
    6eb4:	f800283a 	ret

00006eb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6eb8:	deffff04 	addi	sp,sp,-4
    6ebc:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    6ec0:	0009883a 	mov	r4,zero
    6ec4:	01440004 	movi	r5,4096
    6ec8:	00074400 	call	7440 <alt_icache_flush>
#endif
}
    6ecc:	dfc00017 	ldw	ra,0(sp)
    6ed0:	dec00104 	addi	sp,sp,4
    6ed4:	f800283a 	ret

00006ed8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6ed8:	defffe04 	addi	sp,sp,-8
    6edc:	dfc00115 	stw	ra,4(sp)
    6ee0:	dc000015 	stw	r16,0(sp)
    6ee4:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    6ee8:	2809883a 	mov	r4,r5
    6eec:	300b883a 	mov	r5,r6
    6ef0:	380d883a 	mov	r6,r7
    6ef4:	00070900 	call	7090 <open>
    6ef8:	1009883a 	mov	r4,r2

  if (old >= 0)
    6efc:	10000b16 	blt	r2,zero,6f2c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    6f00:	10c00324 	muli	r3,r2,12
    6f04:	00800074 	movhi	r2,1
    6f08:	108d4404 	addi	r2,r2,13584
    6f0c:	1887883a 	add	r3,r3,r2
    6f10:	18800017 	ldw	r2,0(r3)
    6f14:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    6f18:	18800117 	ldw	r2,4(r3)
    6f1c:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6f20:	18800217 	ldw	r2,8(r3)
    6f24:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    6f28:	000720c0 	call	720c <alt_release_fd>
  }
} 
    6f2c:	dfc00117 	ldw	ra,4(sp)
    6f30:	dc000017 	ldw	r16,0(sp)
    6f34:	dec00204 	addi	sp,sp,8
    6f38:	f800283a 	ret

00006f3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6f3c:	defffa04 	addi	sp,sp,-24
    6f40:	dfc00515 	stw	ra,20(sp)
    6f44:	dd000415 	stw	r20,16(sp)
    6f48:	dcc00315 	stw	r19,12(sp)
    6f4c:	dc800215 	stw	r18,8(sp)
    6f50:	dc400115 	stw	r17,4(sp)
    6f54:	dc000015 	stw	r16,0(sp)
    6f58:	2005883a 	mov	r2,r4
    6f5c:	2827883a 	mov	r19,r5
    6f60:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6f64:	04000074 	movhi	r16,1
    6f68:	840d4704 	addi	r16,r16,13596
    6f6c:	04800044 	movi	r18,1
    6f70:	04407fc4 	movi	r17,511
    6f74:	8009883a 	mov	r4,r16
    6f78:	100b883a 	mov	r5,r2
    6f7c:	900d883a 	mov	r6,r18
    6f80:	880f883a 	mov	r7,r17
    6f84:	0006ed80 	call	6ed8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6f88:	843ffd04 	addi	r16,r16,-12
    6f8c:	8009883a 	mov	r4,r16
    6f90:	980b883a 	mov	r5,r19
    6f94:	000d883a 	mov	r6,zero
    6f98:	880f883a 	mov	r7,r17
    6f9c:	0006ed80 	call	6ed8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6fa0:	81000604 	addi	r4,r16,24
    6fa4:	a00b883a 	mov	r5,r20
    6fa8:	900d883a 	mov	r6,r18
    6fac:	880f883a 	mov	r7,r17
    6fb0:	0006ed80 	call	6ed8 <alt_open_fd>
}  
    6fb4:	dfc00517 	ldw	ra,20(sp)
    6fb8:	dd000417 	ldw	r20,16(sp)
    6fbc:	dcc00317 	ldw	r19,12(sp)
    6fc0:	dc800217 	ldw	r18,8(sp)
    6fc4:	dc400117 	ldw	r17,4(sp)
    6fc8:	dc000017 	ldw	r16,0(sp)
    6fcc:	dec00604 	addi	sp,sp,24
    6fd0:	f800283a 	ret

00006fd4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    6fd4:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    6fd8:	008007c4 	movi	r2,31
    6fdc:	1100022e 	bgeu	r2,r4,6fe8 <alt_irq_register+0x14>
    6fe0:	00bffa84 	movi	r2,-22
    6fe4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fe8:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fec:	013fff84 	movi	r4,-2
    6ff0:	4104703a 	and	r2,r8,r4
    6ff4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    6ff8:	380490fa 	slli	r2,r7,3
    6ffc:	00c000b4 	movhi	r3,2
    7000:	18f79a04 	addi	r3,r3,-8600
    7004:	10c5883a 	add	r2,r2,r3
    7008:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    700c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    7010:	30000e26 	beq	r6,zero,704c <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7014:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7018:	2904703a 	and	r2,r5,r4
    701c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    7020:	00c000b4 	movhi	r3,2
    7024:	18f78904 	addi	r3,r3,-8668
    7028:	19000017 	ldw	r4,0(r3)
    702c:	00800044 	movi	r2,1
    7030:	11c4983a 	sll	r2,r2,r7
    7034:	1104b03a 	or	r2,r2,r4
    7038:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    703c:	18800017 	ldw	r2,0(r3)
    7040:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7044:	2801703a 	wrctl	status,r5
    7048:	00000e06 	br	7084 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    704c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7050:	00bfff84 	movi	r2,-2
    7054:	2884703a 	and	r2,r5,r2
    7058:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    705c:	00c000b4 	movhi	r3,2
    7060:	18f78904 	addi	r3,r3,-8668
    7064:	19000017 	ldw	r4,0(r3)
    7068:	00bfff84 	movi	r2,-2
    706c:	11c4183a 	rol	r2,r2,r7
    7070:	1104703a 	and	r2,r2,r4
    7074:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    7078:	18800017 	ldw	r2,0(r3)
    707c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7080:	2801703a 	wrctl	status,r5
    7084:	4001703a 	wrctl	status,r8
    7088:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    708c:	f800283a 	ret

00007090 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    7090:	defff904 	addi	sp,sp,-28
    7094:	dfc00615 	stw	ra,24(sp)
    7098:	dd400515 	stw	r21,20(sp)
    709c:	dd000415 	stw	r20,16(sp)
    70a0:	dcc00315 	stw	r19,12(sp)
    70a4:	dc800215 	stw	r18,8(sp)
    70a8:	dc400115 	stw	r17,4(sp)
    70ac:	dc000015 	stw	r16,0(sp)
    70b0:	2029883a 	mov	r20,r4
    70b4:	2827883a 	mov	r19,r5
    70b8:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    70bc:	01400074 	movhi	r5,1
    70c0:	294fa804 	addi	r5,r5,16032
    70c4:	0006e480 	call	6e48 <alt_find_dev>
    70c8:	1021883a 	mov	r16,r2
    70cc:	10000226 	beq	r2,zero,70d8 <open+0x48>
    70d0:	0025883a 	mov	r18,zero
    70d4:	00000a06 	br	7100 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    70d8:	a009883a 	mov	r4,r20
    70dc:	00073180 	call	7318 <alt_find_file>
    70e0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    70e4:	1000051e 	bne	r2,zero,70fc <open+0x6c>
    70e8:	047fffc4 	movi	r17,-1
    70ec:	043ffb44 	movi	r16,-19
    70f0:	00002b06 	br	71a0 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    70f4:	043ffcc4 	movi	r16,-13
    70f8:	00002906 	br	71a0 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    70fc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    7100:	8009883a 	mov	r4,r16
    7104:	00073d40 	call	73d4 <alt_get_fd>
    7108:	1023883a 	mov	r17,r2
    710c:	10003316 	blt	r2,zero,71dc <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    7110:	10800324 	muli	r2,r2,12
    7114:	02000074 	movhi	r8,1
    7118:	420d4404 	addi	r8,r8,13584
    711c:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    7120:	00900034 	movhi	r2,16384
    7124:	10bfffc4 	addi	r2,r2,-1
    7128:	9886703a 	and	r3,r19,r2
    712c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    7130:	9004c03a 	cmpne	r2,r18,zero
    7134:	1000121e 	bne	r2,zero,7180 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    7138:	18900034 	orhi	r2,r3,16384
    713c:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7140:	00800074 	movhi	r2,1
    7144:	108faa04 	addi	r2,r2,16040
    7148:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    714c:	21800017 	ldw	r6,0(r4)
    7150:	000b883a 	mov	r5,zero
    7154:	4007883a 	mov	r3,r8
    7158:	02400044 	movi	r9,1
    715c:	02000304 	movi	r8,12
    7160:	18800017 	ldw	r2,0(r3)
    7164:	1180031e 	bne	r2,r6,7174 <open+0xe4>
    7168:	18800217 	ldw	r2,8(r3)
    716c:	1000010e 	bge	r2,zero,7174 <open+0xe4>
    7170:	193fe01e 	bne	r3,r4,70f4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7174:	2a4b883a 	add	r5,r5,r9
    7178:	1a07883a 	add	r3,r3,r8
    717c:	397ff82e 	bgeu	r7,r5,7160 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    7180:	80800317 	ldw	r2,12(r16)
    7184:	10001726 	beq	r2,zero,71e4 <open+0x154>
    7188:	a00b883a 	mov	r5,r20
    718c:	980d883a 	mov	r6,r19
    7190:	a80f883a 	mov	r7,r21
    7194:	103ee83a 	callr	r2
    7198:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    719c:	1000110e 	bge	r2,zero,71e4 <open+0x154>
  {
    alt_release_fd (index);  
    71a0:	8809883a 	mov	r4,r17
    71a4:	000720c0 	call	720c <alt_release_fd>
    71a8:	00800074 	movhi	r2,1
    71ac:	108fab04 	addi	r2,r2,16044
    71b0:	10800017 	ldw	r2,0(r2)
    71b4:	1000031e 	bne	r2,zero,71c4 <open+0x134>
    71b8:	00c000b4 	movhi	r3,2
    71bc:	18f78c04 	addi	r3,r3,-8656
    71c0:	00000206 	br	71cc <open+0x13c>
    71c4:	103ee83a 	callr	r2
    71c8:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    71cc:	0405c83a 	sub	r2,zero,r16
    71d0:	18800015 	stw	r2,0(r3)
    71d4:	047fffc4 	movi	r17,-1
    71d8:	00000206 	br	71e4 <open+0x154>
    71dc:	1021883a 	mov	r16,r2
    71e0:	003fef06 	br	71a0 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    71e4:	8805883a 	mov	r2,r17
    71e8:	dfc00617 	ldw	ra,24(sp)
    71ec:	dd400517 	ldw	r21,20(sp)
    71f0:	dd000417 	ldw	r20,16(sp)
    71f4:	dcc00317 	ldw	r19,12(sp)
    71f8:	dc800217 	ldw	r18,8(sp)
    71fc:	dc400117 	ldw	r17,4(sp)
    7200:	dc000017 	ldw	r16,0(sp)
    7204:	dec00704 	addi	sp,sp,28
    7208:	f800283a 	ret

0000720c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    720c:	00800084 	movi	r2,2
    7210:	1100060e 	bge	r2,r4,722c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    7214:	20800324 	muli	r2,r4,12
    7218:	00c00074 	movhi	r3,1
    721c:	18cd4404 	addi	r3,r3,13584
    7220:	10c5883a 	add	r2,r2,r3
    7224:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    7228:	10000015 	stw	zero,0(r2)
    722c:	f800283a 	ret

00007230 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7230:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7234:	00bfff84 	movi	r2,-2
    7238:	2884703a 	and	r2,r5,r2
    723c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    7240:	20c00017 	ldw	r3,0(r4)
    7244:	20800117 	ldw	r2,4(r4)
    7248:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    724c:	20800117 	ldw	r2,4(r4)
    7250:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    7254:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    7258:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    725c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    7260:	f800283a 	ret

00007264 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    7264:	defffd04 	addi	sp,sp,-12
    7268:	dfc00215 	stw	ra,8(sp)
    726c:	dc400115 	stw	r17,4(sp)
    7270:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    7274:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    7278:	d087e517 	ldw	r2,8084(gp)
    727c:	10800044 	addi	r2,r2,1
    7280:	d087e515 	stw	r2,8084(gp)
    7284:	00001b06 	br	72f4 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    7288:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    728c:	80800403 	ldbu	r2,16(r16)
    7290:	10000326 	beq	r2,zero,72a0 <alt_tick+0x3c>
    7294:	d087e517 	ldw	r2,8084(gp)
    7298:	1000011e 	bne	r2,zero,72a0 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    729c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    72a0:	d0c7e517 	ldw	r3,8084(gp)
    72a4:	80800217 	ldw	r2,8(r16)
    72a8:	18801136 	bltu	r3,r2,72f0 <alt_tick+0x8c>
    72ac:	80800403 	ldbu	r2,16(r16)
    72b0:	10000f1e 	bne	r2,zero,72f0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    72b4:	80800317 	ldw	r2,12(r16)
    72b8:	81000517 	ldw	r4,20(r16)
    72bc:	103ee83a 	callr	r2
    72c0:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    72c4:	1000031e 	bne	r2,zero,72d4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    72c8:	8009883a 	mov	r4,r16
    72cc:	00072300 	call	7230 <alt_alarm_stop>
    72d0:	00000706 	br	72f0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    72d4:	80800217 	ldw	r2,8(r16)
    72d8:	1885883a 	add	r2,r3,r2
    72dc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    72e0:	d0c7e517 	ldw	r3,8084(gp)
    72e4:	10c0022e 	bgeu	r2,r3,72f0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    72e8:	00800044 	movi	r2,1
    72ec:	80800405 	stb	r2,16(r16)
    72f0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    72f4:	d0a00704 	addi	r2,gp,-32740
    72f8:	80bfe31e 	bne	r16,r2,7288 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    72fc:	dfc00217 	ldw	ra,8(sp)
    7300:	dc400117 	ldw	r17,4(sp)
    7304:	dc000017 	ldw	r16,0(sp)
    7308:	dec00304 	addi	sp,sp,12
    730c:	f800283a 	ret

00007310 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    7310:	000170fa 	wrctl	ienable,zero
}
    7314:	f800283a 	ret

00007318 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    7318:	defff904 	addi	sp,sp,-28
    731c:	dfc00615 	stw	ra,24(sp)
    7320:	dd400515 	stw	r21,20(sp)
    7324:	dd000415 	stw	r20,16(sp)
    7328:	dcc00315 	stw	r19,12(sp)
    732c:	dc800215 	stw	r18,8(sp)
    7330:	dc400115 	stw	r17,4(sp)
    7334:	dc000015 	stw	r16,0(sp)
    7338:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    733c:	00800074 	movhi	r2,1
    7340:	108fa604 	addi	r2,r2,16024
    7344:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    7348:	102b883a 	mov	r21,r2
    734c:	88801626 	beq	r17,r2,73a8 <alt_find_file+0x90>
    7350:	053fffc4 	movi	r20,-1
    7354:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    7358:	8c000217 	ldw	r16,8(r17)
    735c:	8009883a 	mov	r4,r16
    7360:	00078700 	call	7870 <strlen>
    7364:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    7368:	8085883a 	add	r2,r16,r2
    736c:	1505883a 	add	r2,r2,r20
    7370:	10800007 	ldb	r2,0(r2)
    7374:	14c0011e 	bne	r2,r19,737c <alt_find_file+0x64>
    {
      len -= 1;
    7378:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    737c:	1c85883a 	add	r2,r3,r18
    7380:	10800007 	ldb	r2,0(r2)
    7384:	14c00126 	beq	r2,r19,738c <alt_find_file+0x74>
    7388:	1000051e 	bne	r2,zero,73a0 <alt_find_file+0x88>
    738c:	8009883a 	mov	r4,r16
    7390:	900b883a 	mov	r5,r18
    7394:	180d883a 	mov	r6,r3
    7398:	00074b40 	call	74b4 <memcmp>
    739c:	10000326 	beq	r2,zero,73ac <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    73a0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    73a4:	8d7fec1e 	bne	r17,r21,7358 <alt_find_file+0x40>
    73a8:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    73ac:	8805883a 	mov	r2,r17
    73b0:	dfc00617 	ldw	ra,24(sp)
    73b4:	dd400517 	ldw	r21,20(sp)
    73b8:	dd000417 	ldw	r20,16(sp)
    73bc:	dcc00317 	ldw	r19,12(sp)
    73c0:	dc800217 	ldw	r18,8(sp)
    73c4:	dc400117 	ldw	r17,4(sp)
    73c8:	dc000017 	ldw	r16,0(sp)
    73cc:	dec00704 	addi	sp,sp,28
    73d0:	f800283a 	ret

000073d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    73d4:	000b883a 	mov	r5,zero
    73d8:	00c00074 	movhi	r3,1
    73dc:	18cd4404 	addi	r3,r3,13584
    73e0:	02000304 	movi	r8,12
    73e4:	02400074 	movhi	r9,1
    73e8:	4a4faa04 	addi	r9,r9,16040
    73ec:	01c00044 	movi	r7,1
    73f0:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    73f4:	18800017 	ldw	r2,0(r3)
    73f8:	10000c1e 	bne	r2,zero,742c <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    73fc:	2a05383a 	mul	r2,r5,r8
    7400:	00c00074 	movhi	r3,1
    7404:	18cd4404 	addi	r3,r3,13584
    7408:	10c5883a 	add	r2,r2,r3
    740c:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    7410:	48800017 	ldw	r2,0(r9)
    7414:	11400216 	blt	r2,r5,7420 <alt_get_fd+0x4c>
    7418:	2805883a 	mov	r2,r5
    741c:	f800283a 	ret
      {
        alt_max_fd = i;
    7420:	49400015 	stw	r5,0(r9)
    7424:	2805883a 	mov	r2,r5
    7428:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    742c:	29cb883a 	add	r5,r5,r7
    7430:	1a07883a 	add	r3,r3,r8
    7434:	29bfef1e 	bne	r5,r6,73f4 <alt_get_fd+0x20>
    7438:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    743c:	f800283a 	ret

00007440 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    7440:	2007883a 	mov	r3,r4
    7444:	00840004 	movi	r2,4096
    7448:	1140012e 	bgeu	r2,r5,7450 <alt_icache_flush+0x10>
    744c:	100b883a 	mov	r5,r2
    7450:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    7454:	1940042e 	bgeu	r3,r5,7468 <alt_icache_flush+0x28>
    7458:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    745c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    7460:	1887883a 	add	r3,r3,r2
    7464:	197ffd36 	bltu	r3,r5,745c <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    7468:	208007cc 	andi	r2,r4,31
    746c:	10000126 	beq	r2,zero,7474 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    7470:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    7474:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    7478:	f800283a 	ret

0000747c <exit>:
    747c:	defffe04 	addi	sp,sp,-8
    7480:	000b883a 	mov	r5,zero
    7484:	dc000015 	stw	r16,0(sp)
    7488:	dfc00115 	stw	ra,4(sp)
    748c:	2021883a 	mov	r16,r4
    7490:	0007b700 	call	7b70 <__call_exitprocs>
    7494:	00800074 	movhi	r2,1
    7498:	108fb004 	addi	r2,r2,16064
    749c:	11000017 	ldw	r4,0(r2)
    74a0:	20800f17 	ldw	r2,60(r4)
    74a4:	10000126 	beq	r2,zero,74ac <exit+0x30>
    74a8:	103ee83a 	callr	r2
    74ac:	8009883a 	mov	r4,r16
    74b0:	00096400 	call	9640 <_exit>

000074b4 <memcmp>:
    74b4:	00c000c4 	movi	r3,3
    74b8:	1980032e 	bgeu	r3,r6,74c8 <memcmp+0x14>
    74bc:	2144b03a 	or	r2,r4,r5
    74c0:	10c4703a 	and	r2,r2,r3
    74c4:	10000f26 	beq	r2,zero,7504 <memcmp+0x50>
    74c8:	31ffffc4 	addi	r7,r6,-1
    74cc:	3000061e 	bne	r6,zero,74e8 <memcmp+0x34>
    74d0:	00000a06 	br	74fc <memcmp+0x48>
    74d4:	39ffffc4 	addi	r7,r7,-1
    74d8:	00bfffc4 	movi	r2,-1
    74dc:	21000044 	addi	r4,r4,1
    74e0:	29400044 	addi	r5,r5,1
    74e4:	38800526 	beq	r7,r2,74fc <memcmp+0x48>
    74e8:	20c00003 	ldbu	r3,0(r4)
    74ec:	28800003 	ldbu	r2,0(r5)
    74f0:	18bff826 	beq	r3,r2,74d4 <memcmp+0x20>
    74f4:	1885c83a 	sub	r2,r3,r2
    74f8:	f800283a 	ret
    74fc:	0005883a 	mov	r2,zero
    7500:	f800283a 	ret
    7504:	180f883a 	mov	r7,r3
    7508:	20c00017 	ldw	r3,0(r4)
    750c:	28800017 	ldw	r2,0(r5)
    7510:	18bfed1e 	bne	r3,r2,74c8 <memcmp+0x14>
    7514:	31bfff04 	addi	r6,r6,-4
    7518:	21000104 	addi	r4,r4,4
    751c:	29400104 	addi	r5,r5,4
    7520:	39bff936 	bltu	r7,r6,7508 <memcmp+0x54>
    7524:	003fe806 	br	74c8 <memcmp+0x14>

00007528 <memcpy>:
    7528:	01c003c4 	movi	r7,15
    752c:	2007883a 	mov	r3,r4
    7530:	3980032e 	bgeu	r7,r6,7540 <memcpy+0x18>
    7534:	2904b03a 	or	r2,r5,r4
    7538:	108000cc 	andi	r2,r2,3
    753c:	10000926 	beq	r2,zero,7564 <memcpy+0x3c>
    7540:	30000626 	beq	r6,zero,755c <memcpy+0x34>
    7544:	30cd883a 	add	r6,r6,r3
    7548:	28800003 	ldbu	r2,0(r5)
    754c:	29400044 	addi	r5,r5,1
    7550:	18800005 	stb	r2,0(r3)
    7554:	18c00044 	addi	r3,r3,1
    7558:	30fffb1e 	bne	r6,r3,7548 <memcpy+0x20>
    755c:	2005883a 	mov	r2,r4
    7560:	f800283a 	ret
    7564:	3811883a 	mov	r8,r7
    7568:	200f883a 	mov	r7,r4
    756c:	28c00017 	ldw	r3,0(r5)
    7570:	31bffc04 	addi	r6,r6,-16
    7574:	38c00015 	stw	r3,0(r7)
    7578:	28800117 	ldw	r2,4(r5)
    757c:	38800115 	stw	r2,4(r7)
    7580:	28c00217 	ldw	r3,8(r5)
    7584:	38c00215 	stw	r3,8(r7)
    7588:	28800317 	ldw	r2,12(r5)
    758c:	29400404 	addi	r5,r5,16
    7590:	38800315 	stw	r2,12(r7)
    7594:	39c00404 	addi	r7,r7,16
    7598:	41bff436 	bltu	r8,r6,756c <memcpy+0x44>
    759c:	008000c4 	movi	r2,3
    75a0:	1180072e 	bgeu	r2,r6,75c0 <memcpy+0x98>
    75a4:	1007883a 	mov	r3,r2
    75a8:	28800017 	ldw	r2,0(r5)
    75ac:	31bfff04 	addi	r6,r6,-4
    75b0:	29400104 	addi	r5,r5,4
    75b4:	38800015 	stw	r2,0(r7)
    75b8:	39c00104 	addi	r7,r7,4
    75bc:	19bffa36 	bltu	r3,r6,75a8 <memcpy+0x80>
    75c0:	3807883a 	mov	r3,r7
    75c4:	003fde06 	br	7540 <memcpy+0x18>

000075c8 <putc>:
    75c8:	defffc04 	addi	sp,sp,-16
    75cc:	dc800215 	stw	r18,8(sp)
    75d0:	04800074 	movhi	r18,1
    75d4:	948faf04 	addi	r18,r18,16060
    75d8:	90c00017 	ldw	r3,0(r18)
    75dc:	dc400115 	stw	r17,4(sp)
    75e0:	dc000015 	stw	r16,0(sp)
    75e4:	dfc00315 	stw	ra,12(sp)
    75e8:	2023883a 	mov	r17,r4
    75ec:	2821883a 	mov	r16,r5
    75f0:	18000226 	beq	r3,zero,75fc <putc+0x34>
    75f4:	18800e17 	ldw	r2,56(r3)
    75f8:	10001126 	beq	r2,zero,7640 <putc+0x78>
    75fc:	80800217 	ldw	r2,8(r16)
    7600:	10ffffc4 	addi	r3,r2,-1
    7604:	80c00215 	stw	r3,8(r16)
    7608:	18001316 	blt	r3,zero,7658 <putc+0x90>
    760c:	80800017 	ldw	r2,0(r16)
    7610:	14400005 	stb	r17,0(r2)
    7614:	80c00017 	ldw	r3,0(r16)
    7618:	18800044 	addi	r2,r3,1
    761c:	18c00003 	ldbu	r3,0(r3)
    7620:	80800015 	stw	r2,0(r16)
    7624:	1805883a 	mov	r2,r3
    7628:	dfc00317 	ldw	ra,12(sp)
    762c:	dc800217 	ldw	r18,8(sp)
    7630:	dc400117 	ldw	r17,4(sp)
    7634:	dc000017 	ldw	r16,0(sp)
    7638:	dec00404 	addi	sp,sp,16
    763c:	f800283a 	ret
    7640:	1809883a 	mov	r4,r3
    7644:	0007fb80 	call	7fb8 <__sinit>
    7648:	80800217 	ldw	r2,8(r16)
    764c:	10ffffc4 	addi	r3,r2,-1
    7650:	80c00215 	stw	r3,8(r16)
    7654:	183fed0e 	bge	r3,zero,760c <putc+0x44>
    7658:	80800617 	ldw	r2,24(r16)
    765c:	18800f16 	blt	r3,r2,769c <putc+0xd4>
    7660:	80800017 	ldw	r2,0(r16)
    7664:	14400005 	stb	r17,0(r2)
    7668:	81000017 	ldw	r4,0(r16)
    766c:	00800284 	movi	r2,10
    7670:	20c00003 	ldbu	r3,0(r4)
    7674:	18801226 	beq	r3,r2,76c0 <putc+0xf8>
    7678:	20800044 	addi	r2,r4,1
    767c:	80800015 	stw	r2,0(r16)
    7680:	1805883a 	mov	r2,r3
    7684:	dfc00317 	ldw	ra,12(sp)
    7688:	dc800217 	ldw	r18,8(sp)
    768c:	dc400117 	ldw	r17,4(sp)
    7690:	dc000017 	ldw	r16,0(sp)
    7694:	dec00404 	addi	sp,sp,16
    7698:	f800283a 	ret
    769c:	91000017 	ldw	r4,0(r18)
    76a0:	880b883a 	mov	r5,r17
    76a4:	800d883a 	mov	r6,r16
    76a8:	dfc00317 	ldw	ra,12(sp)
    76ac:	dc800217 	ldw	r18,8(sp)
    76b0:	dc400117 	ldw	r17,4(sp)
    76b4:	dc000017 	ldw	r16,0(sp)
    76b8:	dec00404 	addi	sp,sp,16
    76bc:	00078e41 	jmpi	78e4 <__swbuf_r>
    76c0:	91000017 	ldw	r4,0(r18)
    76c4:	180b883a 	mov	r5,r3
    76c8:	003ff606 	br	76a4 <putc+0xdc>

000076cc <_putc_r>:
    76cc:	defffc04 	addi	sp,sp,-16
    76d0:	dc400215 	stw	r17,8(sp)
    76d4:	dc000115 	stw	r16,4(sp)
    76d8:	dfc00315 	stw	ra,12(sp)
    76dc:	2021883a 	mov	r16,r4
    76e0:	2823883a 	mov	r17,r5
    76e4:	20000226 	beq	r4,zero,76f0 <_putc_r+0x24>
    76e8:	20800e17 	ldw	r2,56(r4)
    76ec:	10001026 	beq	r2,zero,7730 <_putc_r+0x64>
    76f0:	30800217 	ldw	r2,8(r6)
    76f4:	10ffffc4 	addi	r3,r2,-1
    76f8:	30c00215 	stw	r3,8(r6)
    76fc:	18001316 	blt	r3,zero,774c <_putc_r+0x80>
    7700:	30800017 	ldw	r2,0(r6)
    7704:	14400005 	stb	r17,0(r2)
    7708:	30c00017 	ldw	r3,0(r6)
    770c:	18800044 	addi	r2,r3,1
    7710:	18c00003 	ldbu	r3,0(r3)
    7714:	30800015 	stw	r2,0(r6)
    7718:	1805883a 	mov	r2,r3
    771c:	dfc00317 	ldw	ra,12(sp)
    7720:	dc400217 	ldw	r17,8(sp)
    7724:	dc000117 	ldw	r16,4(sp)
    7728:	dec00404 	addi	sp,sp,16
    772c:	f800283a 	ret
    7730:	d9800015 	stw	r6,0(sp)
    7734:	0007fb80 	call	7fb8 <__sinit>
    7738:	d9800017 	ldw	r6,0(sp)
    773c:	30800217 	ldw	r2,8(r6)
    7740:	10ffffc4 	addi	r3,r2,-1
    7744:	30c00215 	stw	r3,8(r6)
    7748:	183fed0e 	bge	r3,zero,7700 <_putc_r+0x34>
    774c:	30800617 	ldw	r2,24(r6)
    7750:	18800e16 	blt	r3,r2,778c <_putc_r+0xc0>
    7754:	30800017 	ldw	r2,0(r6)
    7758:	14400005 	stb	r17,0(r2)
    775c:	31000017 	ldw	r4,0(r6)
    7760:	00800284 	movi	r2,10
    7764:	20c00003 	ldbu	r3,0(r4)
    7768:	18800f26 	beq	r3,r2,77a8 <_putc_r+0xdc>
    776c:	20800044 	addi	r2,r4,1
    7770:	30800015 	stw	r2,0(r6)
    7774:	1805883a 	mov	r2,r3
    7778:	dfc00317 	ldw	ra,12(sp)
    777c:	dc400217 	ldw	r17,8(sp)
    7780:	dc000117 	ldw	r16,4(sp)
    7784:	dec00404 	addi	sp,sp,16
    7788:	f800283a 	ret
    778c:	8009883a 	mov	r4,r16
    7790:	880b883a 	mov	r5,r17
    7794:	dfc00317 	ldw	ra,12(sp)
    7798:	dc400217 	ldw	r17,8(sp)
    779c:	dc000117 	ldw	r16,4(sp)
    77a0:	dec00404 	addi	sp,sp,16
    77a4:	00078e41 	jmpi	78e4 <__swbuf_r>
    77a8:	8009883a 	mov	r4,r16
    77ac:	180b883a 	mov	r5,r3
    77b0:	003ff806 	br	7794 <_putc_r+0xc8>

000077b4 <strcmp>:
    77b4:	2144b03a 	or	r2,r4,r5
    77b8:	108000cc 	andi	r2,r2,3
    77bc:	10001d1e 	bne	r2,zero,7834 <strcmp+0x80>
    77c0:	200f883a 	mov	r7,r4
    77c4:	28800017 	ldw	r2,0(r5)
    77c8:	21000017 	ldw	r4,0(r4)
    77cc:	280d883a 	mov	r6,r5
    77d0:	2080161e 	bne	r4,r2,782c <strcmp+0x78>
    77d4:	023fbff4 	movhi	r8,65279
    77d8:	423fbfc4 	addi	r8,r8,-257
    77dc:	2207883a 	add	r3,r4,r8
    77e0:	01602074 	movhi	r5,32897
    77e4:	29602004 	addi	r5,r5,-32640
    77e8:	1946703a 	and	r3,r3,r5
    77ec:	0104303a 	nor	r2,zero,r4
    77f0:	10c4703a 	and	r2,r2,r3
    77f4:	10001c1e 	bne	r2,zero,7868 <strcmp+0xb4>
    77f8:	4013883a 	mov	r9,r8
    77fc:	2811883a 	mov	r8,r5
    7800:	00000106 	br	7808 <strcmp+0x54>
    7804:	1800181e 	bne	r3,zero,7868 <strcmp+0xb4>
    7808:	39c00104 	addi	r7,r7,4
    780c:	39000017 	ldw	r4,0(r7)
    7810:	31800104 	addi	r6,r6,4
    7814:	31400017 	ldw	r5,0(r6)
    7818:	2245883a 	add	r2,r4,r9
    781c:	1204703a 	and	r2,r2,r8
    7820:	0106303a 	nor	r3,zero,r4
    7824:	1886703a 	and	r3,r3,r2
    7828:	217ff626 	beq	r4,r5,7804 <strcmp+0x50>
    782c:	3809883a 	mov	r4,r7
    7830:	300b883a 	mov	r5,r6
    7834:	20c00007 	ldb	r3,0(r4)
    7838:	1800051e 	bne	r3,zero,7850 <strcmp+0x9c>
    783c:	00000606 	br	7858 <strcmp+0xa4>
    7840:	21000044 	addi	r4,r4,1
    7844:	20c00007 	ldb	r3,0(r4)
    7848:	29400044 	addi	r5,r5,1
    784c:	18000226 	beq	r3,zero,7858 <strcmp+0xa4>
    7850:	28800007 	ldb	r2,0(r5)
    7854:	18bffa26 	beq	r3,r2,7840 <strcmp+0x8c>
    7858:	20c00003 	ldbu	r3,0(r4)
    785c:	28800003 	ldbu	r2,0(r5)
    7860:	1885c83a 	sub	r2,r3,r2
    7864:	f800283a 	ret
    7868:	0005883a 	mov	r2,zero
    786c:	f800283a 	ret

00007870 <strlen>:
    7870:	208000cc 	andi	r2,r4,3
    7874:	2011883a 	mov	r8,r4
    7878:	1000161e 	bne	r2,zero,78d4 <strlen+0x64>
    787c:	20c00017 	ldw	r3,0(r4)
    7880:	017fbff4 	movhi	r5,65279
    7884:	297fbfc4 	addi	r5,r5,-257
    7888:	01e02074 	movhi	r7,32897
    788c:	39e02004 	addi	r7,r7,-32640
    7890:	1945883a 	add	r2,r3,r5
    7894:	11c4703a 	and	r2,r2,r7
    7898:	00c6303a 	nor	r3,zero,r3
    789c:	1886703a 	and	r3,r3,r2
    78a0:	18000c1e 	bne	r3,zero,78d4 <strlen+0x64>
    78a4:	280d883a 	mov	r6,r5
    78a8:	380b883a 	mov	r5,r7
    78ac:	21000104 	addi	r4,r4,4
    78b0:	20800017 	ldw	r2,0(r4)
    78b4:	1187883a 	add	r3,r2,r6
    78b8:	1946703a 	and	r3,r3,r5
    78bc:	0084303a 	nor	r2,zero,r2
    78c0:	10c4703a 	and	r2,r2,r3
    78c4:	103ff926 	beq	r2,zero,78ac <strlen+0x3c>
    78c8:	20800007 	ldb	r2,0(r4)
    78cc:	10000326 	beq	r2,zero,78dc <strlen+0x6c>
    78d0:	21000044 	addi	r4,r4,1
    78d4:	20800007 	ldb	r2,0(r4)
    78d8:	103ffd1e 	bne	r2,zero,78d0 <strlen+0x60>
    78dc:	2205c83a 	sub	r2,r4,r8
    78e0:	f800283a 	ret

000078e4 <__swbuf_r>:
    78e4:	defffc04 	addi	sp,sp,-16
    78e8:	dc400215 	stw	r17,8(sp)
    78ec:	dc000115 	stw	r16,4(sp)
    78f0:	dfc00315 	stw	ra,12(sp)
    78f4:	2023883a 	mov	r17,r4
    78f8:	2821883a 	mov	r16,r5
    78fc:	20000226 	beq	r4,zero,7908 <__swbuf_r+0x24>
    7900:	20800e17 	ldw	r2,56(r4)
    7904:	10002f26 	beq	r2,zero,79c4 <__swbuf_r+0xe0>
    7908:	3080030b 	ldhu	r2,12(r6)
    790c:	30c00617 	ldw	r3,24(r6)
    7910:	1080020c 	andi	r2,r2,8
    7914:	30c00215 	stw	r3,8(r6)
    7918:	10002226 	beq	r2,zero,79a4 <__swbuf_r+0xc0>
    791c:	30c00417 	ldw	r3,16(r6)
    7920:	18002026 	beq	r3,zero,79a4 <__swbuf_r+0xc0>
    7924:	31000017 	ldw	r4,0(r6)
    7928:	30800517 	ldw	r2,20(r6)
    792c:	20c7c83a 	sub	r3,r4,r3
    7930:	18802f0e 	bge	r3,r2,79f0 <__swbuf_r+0x10c>
    7934:	19400044 	addi	r5,r3,1
    7938:	30800217 	ldw	r2,8(r6)
    793c:	84003fcc 	andi	r16,r16,255
    7940:	20c00044 	addi	r3,r4,1
    7944:	10bfffc4 	addi	r2,r2,-1
    7948:	30800215 	stw	r2,8(r6)
    794c:	24000005 	stb	r16,0(r4)
    7950:	30800517 	ldw	r2,20(r6)
    7954:	30c00015 	stw	r3,0(r6)
    7958:	11400c26 	beq	r2,r5,798c <__swbuf_r+0xa8>
    795c:	3080030b 	ldhu	r2,12(r6)
    7960:	1080004c 	andi	r2,r2,1
    7964:	1005003a 	cmpeq	r2,r2,zero
    7968:	10000626 	beq	r2,zero,7984 <__swbuf_r+0xa0>
    796c:	8005883a 	mov	r2,r16
    7970:	dfc00317 	ldw	ra,12(sp)
    7974:	dc400217 	ldw	r17,8(sp)
    7978:	dc000117 	ldw	r16,4(sp)
    797c:	dec00404 	addi	sp,sp,16
    7980:	f800283a 	ret
    7984:	00800284 	movi	r2,10
    7988:	80bff81e 	bne	r16,r2,796c <__swbuf_r+0x88>
    798c:	8809883a 	mov	r4,r17
    7990:	300b883a 	mov	r5,r6
    7994:	0007d200 	call	7d20 <_fflush_r>
    7998:	103ff426 	beq	r2,zero,796c <__swbuf_r+0x88>
    799c:	043fffc4 	movi	r16,-1
    79a0:	003ff206 	br	796c <__swbuf_r+0x88>
    79a4:	300b883a 	mov	r5,r6
    79a8:	8809883a 	mov	r4,r17
    79ac:	d9800015 	stw	r6,0(sp)
    79b0:	0007a300 	call	7a30 <__swsetup_r>
    79b4:	d9800017 	ldw	r6,0(sp)
    79b8:	1000061e 	bne	r2,zero,79d4 <__swbuf_r+0xf0>
    79bc:	30c00417 	ldw	r3,16(r6)
    79c0:	003fd806 	br	7924 <__swbuf_r+0x40>
    79c4:	d9800015 	stw	r6,0(sp)
    79c8:	0007fb80 	call	7fb8 <__sinit>
    79cc:	d9800017 	ldw	r6,0(sp)
    79d0:	003fcd06 	br	7908 <__swbuf_r+0x24>
    79d4:	3080030b 	ldhu	r2,12(r6)
    79d8:	00c00244 	movi	r3,9
    79dc:	043fffc4 	movi	r16,-1
    79e0:	10801014 	ori	r2,r2,64
    79e4:	3080030d 	sth	r2,12(r6)
    79e8:	88c00015 	stw	r3,0(r17)
    79ec:	003fdf06 	br	796c <__swbuf_r+0x88>
    79f0:	300b883a 	mov	r5,r6
    79f4:	8809883a 	mov	r4,r17
    79f8:	d9800015 	stw	r6,0(sp)
    79fc:	0007d200 	call	7d20 <_fflush_r>
    7a00:	d9800017 	ldw	r6,0(sp)
    7a04:	103fe51e 	bne	r2,zero,799c <__swbuf_r+0xb8>
    7a08:	31000017 	ldw	r4,0(r6)
    7a0c:	01400044 	movi	r5,1
    7a10:	003fc906 	br	7938 <__swbuf_r+0x54>

00007a14 <__swbuf>:
    7a14:	01800074 	movhi	r6,1
    7a18:	318faf04 	addi	r6,r6,16060
    7a1c:	2007883a 	mov	r3,r4
    7a20:	31000017 	ldw	r4,0(r6)
    7a24:	280d883a 	mov	r6,r5
    7a28:	180b883a 	mov	r5,r3
    7a2c:	00078e41 	jmpi	78e4 <__swbuf_r>

00007a30 <__swsetup_r>:
    7a30:	00800074 	movhi	r2,1
    7a34:	108faf04 	addi	r2,r2,16060
    7a38:	10c00017 	ldw	r3,0(r2)
    7a3c:	defffd04 	addi	sp,sp,-12
    7a40:	dc400115 	stw	r17,4(sp)
    7a44:	dc000015 	stw	r16,0(sp)
    7a48:	dfc00215 	stw	ra,8(sp)
    7a4c:	2023883a 	mov	r17,r4
    7a50:	2821883a 	mov	r16,r5
    7a54:	18000226 	beq	r3,zero,7a60 <__swsetup_r+0x30>
    7a58:	18800e17 	ldw	r2,56(r3)
    7a5c:	10001f26 	beq	r2,zero,7adc <__swsetup_r+0xac>
    7a60:	8100030b 	ldhu	r4,12(r16)
    7a64:	2080020c 	andi	r2,r4,8
    7a68:	10002826 	beq	r2,zero,7b0c <__swsetup_r+0xdc>
    7a6c:	81400417 	ldw	r5,16(r16)
    7a70:	28001d26 	beq	r5,zero,7ae8 <__swsetup_r+0xb8>
    7a74:	2080004c 	andi	r2,r4,1
    7a78:	1005003a 	cmpeq	r2,r2,zero
    7a7c:	10000b26 	beq	r2,zero,7aac <__swsetup_r+0x7c>
    7a80:	2080008c 	andi	r2,r4,2
    7a84:	10001226 	beq	r2,zero,7ad0 <__swsetup_r+0xa0>
    7a88:	0005883a 	mov	r2,zero
    7a8c:	80800215 	stw	r2,8(r16)
    7a90:	28000b26 	beq	r5,zero,7ac0 <__swsetup_r+0x90>
    7a94:	0005883a 	mov	r2,zero
    7a98:	dfc00217 	ldw	ra,8(sp)
    7a9c:	dc400117 	ldw	r17,4(sp)
    7aa0:	dc000017 	ldw	r16,0(sp)
    7aa4:	dec00304 	addi	sp,sp,12
    7aa8:	f800283a 	ret
    7aac:	80800517 	ldw	r2,20(r16)
    7ab0:	80000215 	stw	zero,8(r16)
    7ab4:	0085c83a 	sub	r2,zero,r2
    7ab8:	80800615 	stw	r2,24(r16)
    7abc:	283ff51e 	bne	r5,zero,7a94 <__swsetup_r+0x64>
    7ac0:	2080200c 	andi	r2,r4,128
    7ac4:	103ff326 	beq	r2,zero,7a94 <__swsetup_r+0x64>
    7ac8:	00bfffc4 	movi	r2,-1
    7acc:	003ff206 	br	7a98 <__swsetup_r+0x68>
    7ad0:	80800517 	ldw	r2,20(r16)
    7ad4:	80800215 	stw	r2,8(r16)
    7ad8:	003fed06 	br	7a90 <__swsetup_r+0x60>
    7adc:	1809883a 	mov	r4,r3
    7ae0:	0007fb80 	call	7fb8 <__sinit>
    7ae4:	003fde06 	br	7a60 <__swsetup_r+0x30>
    7ae8:	20c0a00c 	andi	r3,r4,640
    7aec:	00808004 	movi	r2,512
    7af0:	18bfe026 	beq	r3,r2,7a74 <__swsetup_r+0x44>
    7af4:	8809883a 	mov	r4,r17
    7af8:	800b883a 	mov	r5,r16
    7afc:	00087d00 	call	87d0 <__smakebuf_r>
    7b00:	8100030b 	ldhu	r4,12(r16)
    7b04:	81400417 	ldw	r5,16(r16)
    7b08:	003fda06 	br	7a74 <__swsetup_r+0x44>
    7b0c:	2080040c 	andi	r2,r4,16
    7b10:	103fed26 	beq	r2,zero,7ac8 <__swsetup_r+0x98>
    7b14:	2080010c 	andi	r2,r4,4
    7b18:	10001226 	beq	r2,zero,7b64 <__swsetup_r+0x134>
    7b1c:	81400c17 	ldw	r5,48(r16)
    7b20:	28000526 	beq	r5,zero,7b38 <__swsetup_r+0x108>
    7b24:	80801004 	addi	r2,r16,64
    7b28:	28800226 	beq	r5,r2,7b34 <__swsetup_r+0x104>
    7b2c:	8809883a 	mov	r4,r17
    7b30:	000833c0 	call	833c <_free_r>
    7b34:	80000c15 	stw	zero,48(r16)
    7b38:	8080030b 	ldhu	r2,12(r16)
    7b3c:	81400417 	ldw	r5,16(r16)
    7b40:	80000115 	stw	zero,4(r16)
    7b44:	10bff6cc 	andi	r2,r2,65499
    7b48:	8080030d 	sth	r2,12(r16)
    7b4c:	81400015 	stw	r5,0(r16)
    7b50:	8080030b 	ldhu	r2,12(r16)
    7b54:	10800214 	ori	r2,r2,8
    7b58:	113fffcc 	andi	r4,r2,65535
    7b5c:	8080030d 	sth	r2,12(r16)
    7b60:	003fc306 	br	7a70 <__swsetup_r+0x40>
    7b64:	81400417 	ldw	r5,16(r16)
    7b68:	003ff906 	br	7b50 <__swsetup_r+0x120>

00007b6c <register_fini>:
    7b6c:	f800283a 	ret

00007b70 <__call_exitprocs>:
    7b70:	00800074 	movhi	r2,1
    7b74:	108fb004 	addi	r2,r2,16064
    7b78:	10800017 	ldw	r2,0(r2)
    7b7c:	defff304 	addi	sp,sp,-52
    7b80:	df000b15 	stw	fp,44(sp)
    7b84:	d8800115 	stw	r2,4(sp)
    7b88:	00800034 	movhi	r2,0
    7b8c:	10800004 	addi	r2,r2,0
    7b90:	1005003a 	cmpeq	r2,r2,zero
    7b94:	d8800215 	stw	r2,8(sp)
    7b98:	d8800117 	ldw	r2,4(sp)
    7b9c:	dd400815 	stw	r21,32(sp)
    7ba0:	dd000715 	stw	r20,28(sp)
    7ba4:	10805204 	addi	r2,r2,328
    7ba8:	dfc00c15 	stw	ra,48(sp)
    7bac:	ddc00a15 	stw	r23,40(sp)
    7bb0:	dd800915 	stw	r22,36(sp)
    7bb4:	dcc00615 	stw	r19,24(sp)
    7bb8:	dc800515 	stw	r18,20(sp)
    7bbc:	dc400415 	stw	r17,16(sp)
    7bc0:	dc000315 	stw	r16,12(sp)
    7bc4:	282b883a 	mov	r21,r5
    7bc8:	2039883a 	mov	fp,r4
    7bcc:	d8800015 	stw	r2,0(sp)
    7bd0:	2829003a 	cmpeq	r20,r5,zero
    7bd4:	d8800117 	ldw	r2,4(sp)
    7bd8:	14405217 	ldw	r17,328(r2)
    7bdc:	88001026 	beq	r17,zero,7c20 <__call_exitprocs+0xb0>
    7be0:	ddc00017 	ldw	r23,0(sp)
    7be4:	88800117 	ldw	r2,4(r17)
    7be8:	8c802204 	addi	r18,r17,136
    7bec:	143fffc4 	addi	r16,r2,-1
    7bf0:	80000916 	blt	r16,zero,7c18 <__call_exitprocs+0xa8>
    7bf4:	05bfffc4 	movi	r22,-1
    7bf8:	a000151e 	bne	r20,zero,7c50 <__call_exitprocs+0xe0>
    7bfc:	8409883a 	add	r4,r16,r16
    7c00:	2105883a 	add	r2,r4,r4
    7c04:	1485883a 	add	r2,r2,r18
    7c08:	10c02017 	ldw	r3,128(r2)
    7c0c:	a8c01126 	beq	r21,r3,7c54 <__call_exitprocs+0xe4>
    7c10:	843fffc4 	addi	r16,r16,-1
    7c14:	85bff81e 	bne	r16,r22,7bf8 <__call_exitprocs+0x88>
    7c18:	d8800217 	ldw	r2,8(sp)
    7c1c:	10003126 	beq	r2,zero,7ce4 <__call_exitprocs+0x174>
    7c20:	dfc00c17 	ldw	ra,48(sp)
    7c24:	df000b17 	ldw	fp,44(sp)
    7c28:	ddc00a17 	ldw	r23,40(sp)
    7c2c:	dd800917 	ldw	r22,36(sp)
    7c30:	dd400817 	ldw	r21,32(sp)
    7c34:	dd000717 	ldw	r20,28(sp)
    7c38:	dcc00617 	ldw	r19,24(sp)
    7c3c:	dc800517 	ldw	r18,20(sp)
    7c40:	dc400417 	ldw	r17,16(sp)
    7c44:	dc000317 	ldw	r16,12(sp)
    7c48:	dec00d04 	addi	sp,sp,52
    7c4c:	f800283a 	ret
    7c50:	8409883a 	add	r4,r16,r16
    7c54:	88c00117 	ldw	r3,4(r17)
    7c58:	2105883a 	add	r2,r4,r4
    7c5c:	1445883a 	add	r2,r2,r17
    7c60:	18ffffc4 	addi	r3,r3,-1
    7c64:	11800217 	ldw	r6,8(r2)
    7c68:	1c001526 	beq	r3,r16,7cc0 <__call_exitprocs+0x150>
    7c6c:	10000215 	stw	zero,8(r2)
    7c70:	303fe726 	beq	r6,zero,7c10 <__call_exitprocs+0xa0>
    7c74:	00c00044 	movi	r3,1
    7c78:	1c06983a 	sll	r3,r3,r16
    7c7c:	90804017 	ldw	r2,256(r18)
    7c80:	8cc00117 	ldw	r19,4(r17)
    7c84:	1884703a 	and	r2,r3,r2
    7c88:	10001426 	beq	r2,zero,7cdc <__call_exitprocs+0x16c>
    7c8c:	90804117 	ldw	r2,260(r18)
    7c90:	1884703a 	and	r2,r3,r2
    7c94:	10000c1e 	bne	r2,zero,7cc8 <__call_exitprocs+0x158>
    7c98:	2105883a 	add	r2,r4,r4
    7c9c:	1485883a 	add	r2,r2,r18
    7ca0:	11400017 	ldw	r5,0(r2)
    7ca4:	e009883a 	mov	r4,fp
    7ca8:	303ee83a 	callr	r6
    7cac:	88800117 	ldw	r2,4(r17)
    7cb0:	98bfc81e 	bne	r19,r2,7bd4 <__call_exitprocs+0x64>
    7cb4:	b8800017 	ldw	r2,0(r23)
    7cb8:	147fd526 	beq	r2,r17,7c10 <__call_exitprocs+0xa0>
    7cbc:	003fc506 	br	7bd4 <__call_exitprocs+0x64>
    7cc0:	8c000115 	stw	r16,4(r17)
    7cc4:	003fea06 	br	7c70 <__call_exitprocs+0x100>
    7cc8:	2105883a 	add	r2,r4,r4
    7ccc:	1485883a 	add	r2,r2,r18
    7cd0:	11000017 	ldw	r4,0(r2)
    7cd4:	303ee83a 	callr	r6
    7cd8:	003ff406 	br	7cac <__call_exitprocs+0x13c>
    7cdc:	303ee83a 	callr	r6
    7ce0:	003ff206 	br	7cac <__call_exitprocs+0x13c>
    7ce4:	88800117 	ldw	r2,4(r17)
    7ce8:	1000081e 	bne	r2,zero,7d0c <__call_exitprocs+0x19c>
    7cec:	89000017 	ldw	r4,0(r17)
    7cf0:	20000726 	beq	r4,zero,7d10 <__call_exitprocs+0x1a0>
    7cf4:	b9000015 	stw	r4,0(r23)
    7cf8:	8809883a 	mov	r4,r17
    7cfc:	00000000 	call	0 <__reset>
    7d00:	bc400017 	ldw	r17,0(r23)
    7d04:	883fb71e 	bne	r17,zero,7be4 <__call_exitprocs+0x74>
    7d08:	003fc506 	br	7c20 <__call_exitprocs+0xb0>
    7d0c:	89000017 	ldw	r4,0(r17)
    7d10:	882f883a 	mov	r23,r17
    7d14:	2023883a 	mov	r17,r4
    7d18:	883fb21e 	bne	r17,zero,7be4 <__call_exitprocs+0x74>
    7d1c:	003fc006 	br	7c20 <__call_exitprocs+0xb0>

00007d20 <_fflush_r>:
    7d20:	defffb04 	addi	sp,sp,-20
    7d24:	dcc00315 	stw	r19,12(sp)
    7d28:	dc800215 	stw	r18,8(sp)
    7d2c:	dfc00415 	stw	ra,16(sp)
    7d30:	dc400115 	stw	r17,4(sp)
    7d34:	dc000015 	stw	r16,0(sp)
    7d38:	2027883a 	mov	r19,r4
    7d3c:	2825883a 	mov	r18,r5
    7d40:	20000226 	beq	r4,zero,7d4c <_fflush_r+0x2c>
    7d44:	20800e17 	ldw	r2,56(r4)
    7d48:	10005626 	beq	r2,zero,7ea4 <_fflush_r+0x184>
    7d4c:	9100030b 	ldhu	r4,12(r18)
    7d50:	20ffffcc 	andi	r3,r4,65535
    7d54:	18e0001c 	xori	r3,r3,32768
    7d58:	18e00004 	addi	r3,r3,-32768
    7d5c:	1880020c 	andi	r2,r3,8
    7d60:	1000261e 	bne	r2,zero,7dfc <_fflush_r+0xdc>
    7d64:	90c00117 	ldw	r3,4(r18)
    7d68:	20820014 	ori	r2,r4,2048
    7d6c:	9080030d 	sth	r2,12(r18)
    7d70:	1009883a 	mov	r4,r2
    7d74:	00c0400e 	bge	zero,r3,7e78 <_fflush_r+0x158>
    7d78:	92000a17 	ldw	r8,40(r18)
    7d7c:	40004026 	beq	r8,zero,7e80 <_fflush_r+0x160>
    7d80:	2084000c 	andi	r2,r4,4096
    7d84:	10005326 	beq	r2,zero,7ed4 <_fflush_r+0x1b4>
    7d88:	94001417 	ldw	r16,80(r18)
    7d8c:	9080030b 	ldhu	r2,12(r18)
    7d90:	1080010c 	andi	r2,r2,4
    7d94:	1000481e 	bne	r2,zero,7eb8 <_fflush_r+0x198>
    7d98:	91400717 	ldw	r5,28(r18)
    7d9c:	9809883a 	mov	r4,r19
    7da0:	800d883a 	mov	r6,r16
    7da4:	000f883a 	mov	r7,zero
    7da8:	403ee83a 	callr	r8
    7dac:	8080261e 	bne	r16,r2,7e48 <_fflush_r+0x128>
    7db0:	9080030b 	ldhu	r2,12(r18)
    7db4:	91000417 	ldw	r4,16(r18)
    7db8:	90000115 	stw	zero,4(r18)
    7dbc:	10bdffcc 	andi	r2,r2,63487
    7dc0:	10ffffcc 	andi	r3,r2,65535
    7dc4:	18c4000c 	andi	r3,r3,4096
    7dc8:	9080030d 	sth	r2,12(r18)
    7dcc:	91000015 	stw	r4,0(r18)
    7dd0:	18002b26 	beq	r3,zero,7e80 <_fflush_r+0x160>
    7dd4:	0007883a 	mov	r3,zero
    7dd8:	1805883a 	mov	r2,r3
    7ddc:	94001415 	stw	r16,80(r18)
    7de0:	dfc00417 	ldw	ra,16(sp)
    7de4:	dcc00317 	ldw	r19,12(sp)
    7de8:	dc800217 	ldw	r18,8(sp)
    7dec:	dc400117 	ldw	r17,4(sp)
    7df0:	dc000017 	ldw	r16,0(sp)
    7df4:	dec00504 	addi	sp,sp,20
    7df8:	f800283a 	ret
    7dfc:	94400417 	ldw	r17,16(r18)
    7e00:	88001f26 	beq	r17,zero,7e80 <_fflush_r+0x160>
    7e04:	90800017 	ldw	r2,0(r18)
    7e08:	18c000cc 	andi	r3,r3,3
    7e0c:	94400015 	stw	r17,0(r18)
    7e10:	1461c83a 	sub	r16,r2,r17
    7e14:	18002526 	beq	r3,zero,7eac <_fflush_r+0x18c>
    7e18:	0005883a 	mov	r2,zero
    7e1c:	90800215 	stw	r2,8(r18)
    7e20:	0400170e 	bge	zero,r16,7e80 <_fflush_r+0x160>
    7e24:	90c00917 	ldw	r3,36(r18)
    7e28:	91400717 	ldw	r5,28(r18)
    7e2c:	880d883a 	mov	r6,r17
    7e30:	800f883a 	mov	r7,r16
    7e34:	9809883a 	mov	r4,r19
    7e38:	183ee83a 	callr	r3
    7e3c:	88a3883a 	add	r17,r17,r2
    7e40:	80a1c83a 	sub	r16,r16,r2
    7e44:	00bff616 	blt	zero,r2,7e20 <_fflush_r+0x100>
    7e48:	9080030b 	ldhu	r2,12(r18)
    7e4c:	00ffffc4 	movi	r3,-1
    7e50:	10801014 	ori	r2,r2,64
    7e54:	9080030d 	sth	r2,12(r18)
    7e58:	1805883a 	mov	r2,r3
    7e5c:	dfc00417 	ldw	ra,16(sp)
    7e60:	dcc00317 	ldw	r19,12(sp)
    7e64:	dc800217 	ldw	r18,8(sp)
    7e68:	dc400117 	ldw	r17,4(sp)
    7e6c:	dc000017 	ldw	r16,0(sp)
    7e70:	dec00504 	addi	sp,sp,20
    7e74:	f800283a 	ret
    7e78:	90800f17 	ldw	r2,60(r18)
    7e7c:	00bfbe16 	blt	zero,r2,7d78 <_fflush_r+0x58>
    7e80:	0007883a 	mov	r3,zero
    7e84:	1805883a 	mov	r2,r3
    7e88:	dfc00417 	ldw	ra,16(sp)
    7e8c:	dcc00317 	ldw	r19,12(sp)
    7e90:	dc800217 	ldw	r18,8(sp)
    7e94:	dc400117 	ldw	r17,4(sp)
    7e98:	dc000017 	ldw	r16,0(sp)
    7e9c:	dec00504 	addi	sp,sp,20
    7ea0:	f800283a 	ret
    7ea4:	0007fb80 	call	7fb8 <__sinit>
    7ea8:	003fa806 	br	7d4c <_fflush_r+0x2c>
    7eac:	90800517 	ldw	r2,20(r18)
    7eb0:	90800215 	stw	r2,8(r18)
    7eb4:	003fda06 	br	7e20 <_fflush_r+0x100>
    7eb8:	90800117 	ldw	r2,4(r18)
    7ebc:	90c00c17 	ldw	r3,48(r18)
    7ec0:	80a1c83a 	sub	r16,r16,r2
    7ec4:	183fb426 	beq	r3,zero,7d98 <_fflush_r+0x78>
    7ec8:	90800f17 	ldw	r2,60(r18)
    7ecc:	80a1c83a 	sub	r16,r16,r2
    7ed0:	003fb106 	br	7d98 <_fflush_r+0x78>
    7ed4:	91400717 	ldw	r5,28(r18)
    7ed8:	9809883a 	mov	r4,r19
    7edc:	000d883a 	mov	r6,zero
    7ee0:	01c00044 	movi	r7,1
    7ee4:	403ee83a 	callr	r8
    7ee8:	1021883a 	mov	r16,r2
    7eec:	00bfffc4 	movi	r2,-1
    7ef0:	80800226 	beq	r16,r2,7efc <_fflush_r+0x1dc>
    7ef4:	92000a17 	ldw	r8,40(r18)
    7ef8:	003fa406 	br	7d8c <_fflush_r+0x6c>
    7efc:	98c00017 	ldw	r3,0(r19)
    7f00:	00800744 	movi	r2,29
    7f04:	18bfde26 	beq	r3,r2,7e80 <_fflush_r+0x160>
    7f08:	9080030b 	ldhu	r2,12(r18)
    7f0c:	8007883a 	mov	r3,r16
    7f10:	10801014 	ori	r2,r2,64
    7f14:	9080030d 	sth	r2,12(r18)
    7f18:	003fcf06 	br	7e58 <_fflush_r+0x138>

00007f1c <fflush>:
    7f1c:	01400034 	movhi	r5,0
    7f20:	295f4804 	addi	r5,r5,32032
    7f24:	2007883a 	mov	r3,r4
    7f28:	20000526 	beq	r4,zero,7f40 <fflush+0x24>
    7f2c:	00800074 	movhi	r2,1
    7f30:	108faf04 	addi	r2,r2,16060
    7f34:	11000017 	ldw	r4,0(r2)
    7f38:	180b883a 	mov	r5,r3
    7f3c:	0007d201 	jmpi	7d20 <_fflush_r>
    7f40:	00800074 	movhi	r2,1
    7f44:	108fb004 	addi	r2,r2,16064
    7f48:	11000017 	ldw	r4,0(r2)
    7f4c:	00086501 	jmpi	8650 <_fwalk_reent>

00007f50 <std>:
    7f50:	00800074 	movhi	r2,1
    7f54:	10a44504 	addi	r2,r2,-28396
    7f58:	20800b15 	stw	r2,44(r4)
    7f5c:	00800074 	movhi	r2,1
    7f60:	10a48004 	addi	r2,r2,-28160
    7f64:	20800815 	stw	r2,32(r4)
    7f68:	00c00074 	movhi	r3,1
    7f6c:	18e46104 	addi	r3,r3,-28284
    7f70:	00800074 	movhi	r2,1
    7f74:	10a44704 	addi	r2,r2,-28388
    7f78:	2140030d 	sth	r5,12(r4)
    7f7c:	2180038d 	sth	r6,14(r4)
    7f80:	20c00915 	stw	r3,36(r4)
    7f84:	20800a15 	stw	r2,40(r4)
    7f88:	20000015 	stw	zero,0(r4)
    7f8c:	20000115 	stw	zero,4(r4)
    7f90:	20000215 	stw	zero,8(r4)
    7f94:	20000415 	stw	zero,16(r4)
    7f98:	20000515 	stw	zero,20(r4)
    7f9c:	20000615 	stw	zero,24(r4)
    7fa0:	21000715 	stw	r4,28(r4)
    7fa4:	f800283a 	ret

00007fa8 <__sfp_lock_acquire>:
    7fa8:	f800283a 	ret

00007fac <__sfp_lock_release>:
    7fac:	f800283a 	ret

00007fb0 <__sinit_lock_acquire>:
    7fb0:	f800283a 	ret

00007fb4 <__sinit_lock_release>:
    7fb4:	f800283a 	ret

00007fb8 <__sinit>:
    7fb8:	20800e17 	ldw	r2,56(r4)
    7fbc:	defffd04 	addi	sp,sp,-12
    7fc0:	dc400115 	stw	r17,4(sp)
    7fc4:	dc000015 	stw	r16,0(sp)
    7fc8:	dfc00215 	stw	ra,8(sp)
    7fcc:	04400044 	movi	r17,1
    7fd0:	01400104 	movi	r5,4
    7fd4:	000d883a 	mov	r6,zero
    7fd8:	2021883a 	mov	r16,r4
    7fdc:	2200bb04 	addi	r8,r4,748
    7fe0:	200f883a 	mov	r7,r4
    7fe4:	10000526 	beq	r2,zero,7ffc <__sinit+0x44>
    7fe8:	dfc00217 	ldw	ra,8(sp)
    7fec:	dc400117 	ldw	r17,4(sp)
    7ff0:	dc000017 	ldw	r16,0(sp)
    7ff4:	dec00304 	addi	sp,sp,12
    7ff8:	f800283a 	ret
    7ffc:	21000117 	ldw	r4,4(r4)
    8000:	00800074 	movhi	r2,1
    8004:	10a02704 	addi	r2,r2,-32612
    8008:	00c000c4 	movi	r3,3
    800c:	80800f15 	stw	r2,60(r16)
    8010:	80c0b915 	stw	r3,740(r16)
    8014:	8200ba15 	stw	r8,744(r16)
    8018:	84400e15 	stw	r17,56(r16)
    801c:	8000b815 	stw	zero,736(r16)
    8020:	0007f500 	call	7f50 <std>
    8024:	81000217 	ldw	r4,8(r16)
    8028:	880d883a 	mov	r6,r17
    802c:	800f883a 	mov	r7,r16
    8030:	01400284 	movi	r5,10
    8034:	0007f500 	call	7f50 <std>
    8038:	81000317 	ldw	r4,12(r16)
    803c:	800f883a 	mov	r7,r16
    8040:	01400484 	movi	r5,18
    8044:	01800084 	movi	r6,2
    8048:	dfc00217 	ldw	ra,8(sp)
    804c:	dc400117 	ldw	r17,4(sp)
    8050:	dc000017 	ldw	r16,0(sp)
    8054:	dec00304 	addi	sp,sp,12
    8058:	0007f501 	jmpi	7f50 <std>

0000805c <__fp_lock>:
    805c:	0005883a 	mov	r2,zero
    8060:	f800283a 	ret

00008064 <__fp_unlock>:
    8064:	0005883a 	mov	r2,zero
    8068:	f800283a 	ret

0000806c <__fp_unlock_all>:
    806c:	00800074 	movhi	r2,1
    8070:	108faf04 	addi	r2,r2,16060
    8074:	11000017 	ldw	r4,0(r2)
    8078:	01400074 	movhi	r5,1
    807c:	29601904 	addi	r5,r5,-32668
    8080:	00087181 	jmpi	8718 <_fwalk>

00008084 <__fp_lock_all>:
    8084:	00800074 	movhi	r2,1
    8088:	108faf04 	addi	r2,r2,16060
    808c:	11000017 	ldw	r4,0(r2)
    8090:	01400074 	movhi	r5,1
    8094:	29601704 	addi	r5,r5,-32676
    8098:	00087181 	jmpi	8718 <_fwalk>

0000809c <_cleanup_r>:
    809c:	01400074 	movhi	r5,1
    80a0:	29651604 	addi	r5,r5,-27560
    80a4:	00087181 	jmpi	8718 <_fwalk>

000080a8 <_cleanup>:
    80a8:	00800074 	movhi	r2,1
    80ac:	108fb004 	addi	r2,r2,16064
    80b0:	11000017 	ldw	r4,0(r2)
    80b4:	000809c1 	jmpi	809c <_cleanup_r>

000080b8 <__sfmoreglue>:
    80b8:	defffc04 	addi	sp,sp,-16
    80bc:	dc400115 	stw	r17,4(sp)
    80c0:	2c401724 	muli	r17,r5,92
    80c4:	dc800215 	stw	r18,8(sp)
    80c8:	2825883a 	mov	r18,r5
    80cc:	89400304 	addi	r5,r17,12
    80d0:	dc000015 	stw	r16,0(sp)
    80d4:	dfc00315 	stw	ra,12(sp)
    80d8:	00089640 	call	8964 <_malloc_r>
    80dc:	0021883a 	mov	r16,zero
    80e0:	880d883a 	mov	r6,r17
    80e4:	000b883a 	mov	r5,zero
    80e8:	10000626 	beq	r2,zero,8104 <__sfmoreglue+0x4c>
    80ec:	11000304 	addi	r4,r2,12
    80f0:	14800115 	stw	r18,4(r2)
    80f4:	10000015 	stw	zero,0(r2)
    80f8:	11000215 	stw	r4,8(r2)
    80fc:	1021883a 	mov	r16,r2
    8100:	0004b080 	call	4b08 <memset>
    8104:	8005883a 	mov	r2,r16
    8108:	dfc00317 	ldw	ra,12(sp)
    810c:	dc800217 	ldw	r18,8(sp)
    8110:	dc400117 	ldw	r17,4(sp)
    8114:	dc000017 	ldw	r16,0(sp)
    8118:	dec00404 	addi	sp,sp,16
    811c:	f800283a 	ret

00008120 <__sfp>:
    8120:	defffd04 	addi	sp,sp,-12
    8124:	00800074 	movhi	r2,1
    8128:	108fb004 	addi	r2,r2,16064
    812c:	dc000015 	stw	r16,0(sp)
    8130:	14000017 	ldw	r16,0(r2)
    8134:	dc400115 	stw	r17,4(sp)
    8138:	dfc00215 	stw	ra,8(sp)
    813c:	80800e17 	ldw	r2,56(r16)
    8140:	2023883a 	mov	r17,r4
    8144:	10002626 	beq	r2,zero,81e0 <__sfp+0xc0>
    8148:	8400b804 	addi	r16,r16,736
    814c:	80800117 	ldw	r2,4(r16)
    8150:	81000217 	ldw	r4,8(r16)
    8154:	10ffffc4 	addi	r3,r2,-1
    8158:	18000916 	blt	r3,zero,8180 <__sfp+0x60>
    815c:	2080030f 	ldh	r2,12(r4)
    8160:	10000b26 	beq	r2,zero,8190 <__sfp+0x70>
    8164:	017fffc4 	movi	r5,-1
    8168:	00000206 	br	8174 <__sfp+0x54>
    816c:	2080030f 	ldh	r2,12(r4)
    8170:	10000726 	beq	r2,zero,8190 <__sfp+0x70>
    8174:	18ffffc4 	addi	r3,r3,-1
    8178:	21001704 	addi	r4,r4,92
    817c:	197ffb1e 	bne	r3,r5,816c <__sfp+0x4c>
    8180:	80800017 	ldw	r2,0(r16)
    8184:	10001926 	beq	r2,zero,81ec <__sfp+0xcc>
    8188:	1021883a 	mov	r16,r2
    818c:	003fef06 	br	814c <__sfp+0x2c>
    8190:	00bfffc4 	movi	r2,-1
    8194:	00c00044 	movi	r3,1
    8198:	2080038d 	sth	r2,14(r4)
    819c:	20c0030d 	sth	r3,12(r4)
    81a0:	20000015 	stw	zero,0(r4)
    81a4:	20000215 	stw	zero,8(r4)
    81a8:	20000115 	stw	zero,4(r4)
    81ac:	20000415 	stw	zero,16(r4)
    81b0:	20000515 	stw	zero,20(r4)
    81b4:	20000615 	stw	zero,24(r4)
    81b8:	20000c15 	stw	zero,48(r4)
    81bc:	20000d15 	stw	zero,52(r4)
    81c0:	20001115 	stw	zero,68(r4)
    81c4:	20001215 	stw	zero,72(r4)
    81c8:	2005883a 	mov	r2,r4
    81cc:	dfc00217 	ldw	ra,8(sp)
    81d0:	dc400117 	ldw	r17,4(sp)
    81d4:	dc000017 	ldw	r16,0(sp)
    81d8:	dec00304 	addi	sp,sp,12
    81dc:	f800283a 	ret
    81e0:	8009883a 	mov	r4,r16
    81e4:	0007fb80 	call	7fb8 <__sinit>
    81e8:	003fd706 	br	8148 <__sfp+0x28>
    81ec:	8809883a 	mov	r4,r17
    81f0:	01400104 	movi	r5,4
    81f4:	00080b80 	call	80b8 <__sfmoreglue>
    81f8:	80800015 	stw	r2,0(r16)
    81fc:	103fe21e 	bne	r2,zero,8188 <__sfp+0x68>
    8200:	00800304 	movi	r2,12
    8204:	0009883a 	mov	r4,zero
    8208:	88800015 	stw	r2,0(r17)
    820c:	003fee06 	br	81c8 <__sfp+0xa8>

00008210 <_malloc_trim_r>:
    8210:	defffb04 	addi	sp,sp,-20
    8214:	dcc00315 	stw	r19,12(sp)
    8218:	04c00074 	movhi	r19,1
    821c:	9ccea404 	addi	r19,r19,14992
    8220:	dc800215 	stw	r18,8(sp)
    8224:	dc400115 	stw	r17,4(sp)
    8228:	dc000015 	stw	r16,0(sp)
    822c:	2823883a 	mov	r17,r5
    8230:	2025883a 	mov	r18,r4
    8234:	dfc00415 	stw	ra,16(sp)
    8238:	00097f00 	call	97f0 <__malloc_lock>
    823c:	98800217 	ldw	r2,8(r19)
    8240:	9009883a 	mov	r4,r18
    8244:	000b883a 	mov	r5,zero
    8248:	10c00117 	ldw	r3,4(r2)
    824c:	00bfff04 	movi	r2,-4
    8250:	18a0703a 	and	r16,r3,r2
    8254:	8463c83a 	sub	r17,r16,r17
    8258:	8c43fbc4 	addi	r17,r17,4079
    825c:	8822d33a 	srli	r17,r17,12
    8260:	0083ffc4 	movi	r2,4095
    8264:	8c7fffc4 	addi	r17,r17,-1
    8268:	8822933a 	slli	r17,r17,12
    826c:	1440060e 	bge	r2,r17,8288 <_malloc_trim_r+0x78>
    8270:	00090a40 	call	90a4 <_sbrk_r>
    8274:	98c00217 	ldw	r3,8(r19)
    8278:	9009883a 	mov	r4,r18
    827c:	044bc83a 	sub	r5,zero,r17
    8280:	80c7883a 	add	r3,r16,r3
    8284:	10c00926 	beq	r2,r3,82ac <_malloc_trim_r+0x9c>
    8288:	00097f40 	call	97f4 <__malloc_unlock>
    828c:	0005883a 	mov	r2,zero
    8290:	dfc00417 	ldw	ra,16(sp)
    8294:	dcc00317 	ldw	r19,12(sp)
    8298:	dc800217 	ldw	r18,8(sp)
    829c:	dc400117 	ldw	r17,4(sp)
    82a0:	dc000017 	ldw	r16,0(sp)
    82a4:	dec00504 	addi	sp,sp,20
    82a8:	f800283a 	ret
    82ac:	9009883a 	mov	r4,r18
    82b0:	00090a40 	call	90a4 <_sbrk_r>
    82b4:	844dc83a 	sub	r6,r16,r17
    82b8:	00ffffc4 	movi	r3,-1
    82bc:	9009883a 	mov	r4,r18
    82c0:	000b883a 	mov	r5,zero
    82c4:	01c000b4 	movhi	r7,2
    82c8:	39f79004 	addi	r7,r7,-8640
    82cc:	31800054 	ori	r6,r6,1
    82d0:	10c00926 	beq	r2,r3,82f8 <_malloc_trim_r+0xe8>
    82d4:	38800017 	ldw	r2,0(r7)
    82d8:	98c00217 	ldw	r3,8(r19)
    82dc:	9009883a 	mov	r4,r18
    82e0:	1445c83a 	sub	r2,r2,r17
    82e4:	38800015 	stw	r2,0(r7)
    82e8:	19800115 	stw	r6,4(r3)
    82ec:	00097f40 	call	97f4 <__malloc_unlock>
    82f0:	00800044 	movi	r2,1
    82f4:	003fe606 	br	8290 <_malloc_trim_r+0x80>
    82f8:	00090a40 	call	90a4 <_sbrk_r>
    82fc:	99800217 	ldw	r6,8(r19)
    8300:	100f883a 	mov	r7,r2
    8304:	9009883a 	mov	r4,r18
    8308:	1187c83a 	sub	r3,r2,r6
    830c:	008003c4 	movi	r2,15
    8310:	19400054 	ori	r5,r3,1
    8314:	10ffdc0e 	bge	r2,r3,8288 <_malloc_trim_r+0x78>
    8318:	00800074 	movhi	r2,1
    831c:	108fb204 	addi	r2,r2,16072
    8320:	10c00017 	ldw	r3,0(r2)
    8324:	008000b4 	movhi	r2,2
    8328:	10b79004 	addi	r2,r2,-8640
    832c:	31400115 	stw	r5,4(r6)
    8330:	38c7c83a 	sub	r3,r7,r3
    8334:	10c00015 	stw	r3,0(r2)
    8338:	003fd306 	br	8288 <_malloc_trim_r+0x78>

0000833c <_free_r>:
    833c:	defffd04 	addi	sp,sp,-12
    8340:	dc400115 	stw	r17,4(sp)
    8344:	dc000015 	stw	r16,0(sp)
    8348:	dfc00215 	stw	ra,8(sp)
    834c:	2821883a 	mov	r16,r5
    8350:	2023883a 	mov	r17,r4
    8354:	28005a26 	beq	r5,zero,84c0 <_free_r+0x184>
    8358:	00097f00 	call	97f0 <__malloc_lock>
    835c:	823ffe04 	addi	r8,r16,-8
    8360:	41400117 	ldw	r5,4(r8)
    8364:	00bfff84 	movi	r2,-2
    8368:	02800074 	movhi	r10,1
    836c:	528ea404 	addi	r10,r10,14992
    8370:	288e703a 	and	r7,r5,r2
    8374:	41cd883a 	add	r6,r8,r7
    8378:	30c00117 	ldw	r3,4(r6)
    837c:	51000217 	ldw	r4,8(r10)
    8380:	00bfff04 	movi	r2,-4
    8384:	1892703a 	and	r9,r3,r2
    8388:	5017883a 	mov	r11,r10
    838c:	31006726 	beq	r6,r4,852c <_free_r+0x1f0>
    8390:	2880004c 	andi	r2,r5,1
    8394:	1005003a 	cmpeq	r2,r2,zero
    8398:	32400115 	stw	r9,4(r6)
    839c:	10001a1e 	bne	r2,zero,8408 <_free_r+0xcc>
    83a0:	000b883a 	mov	r5,zero
    83a4:	3247883a 	add	r3,r6,r9
    83a8:	18800117 	ldw	r2,4(r3)
    83ac:	1080004c 	andi	r2,r2,1
    83b0:	1000231e 	bne	r2,zero,8440 <_free_r+0x104>
    83b4:	280ac03a 	cmpne	r5,r5,zero
    83b8:	3a4f883a 	add	r7,r7,r9
    83bc:	2800451e 	bne	r5,zero,84d4 <_free_r+0x198>
    83c0:	31000217 	ldw	r4,8(r6)
    83c4:	00800074 	movhi	r2,1
    83c8:	108ea604 	addi	r2,r2,15000
    83cc:	20807b26 	beq	r4,r2,85bc <_free_r+0x280>
    83d0:	30800317 	ldw	r2,12(r6)
    83d4:	3a07883a 	add	r3,r7,r8
    83d8:	19c00015 	stw	r7,0(r3)
    83dc:	11000215 	stw	r4,8(r2)
    83e0:	20800315 	stw	r2,12(r4)
    83e4:	38800054 	ori	r2,r7,1
    83e8:	40800115 	stw	r2,4(r8)
    83ec:	28001a26 	beq	r5,zero,8458 <_free_r+0x11c>
    83f0:	8809883a 	mov	r4,r17
    83f4:	dfc00217 	ldw	ra,8(sp)
    83f8:	dc400117 	ldw	r17,4(sp)
    83fc:	dc000017 	ldw	r16,0(sp)
    8400:	dec00304 	addi	sp,sp,12
    8404:	00097f41 	jmpi	97f4 <__malloc_unlock>
    8408:	80bffe17 	ldw	r2,-8(r16)
    840c:	50c00204 	addi	r3,r10,8
    8410:	4091c83a 	sub	r8,r8,r2
    8414:	41000217 	ldw	r4,8(r8)
    8418:	388f883a 	add	r7,r7,r2
    841c:	20c06126 	beq	r4,r3,85a4 <_free_r+0x268>
    8420:	40800317 	ldw	r2,12(r8)
    8424:	3247883a 	add	r3,r6,r9
    8428:	000b883a 	mov	r5,zero
    842c:	11000215 	stw	r4,8(r2)
    8430:	20800315 	stw	r2,12(r4)
    8434:	18800117 	ldw	r2,4(r3)
    8438:	1080004c 	andi	r2,r2,1
    843c:	103fdd26 	beq	r2,zero,83b4 <_free_r+0x78>
    8440:	38800054 	ori	r2,r7,1
    8444:	3a07883a 	add	r3,r7,r8
    8448:	280ac03a 	cmpne	r5,r5,zero
    844c:	40800115 	stw	r2,4(r8)
    8450:	19c00015 	stw	r7,0(r3)
    8454:	283fe61e 	bne	r5,zero,83f0 <_free_r+0xb4>
    8458:	00807fc4 	movi	r2,511
    845c:	11c01f2e 	bgeu	r2,r7,84dc <_free_r+0x1a0>
    8460:	3806d27a 	srli	r3,r7,9
    8464:	1800481e 	bne	r3,zero,8588 <_free_r+0x24c>
    8468:	3804d0fa 	srli	r2,r7,3
    846c:	100690fa 	slli	r3,r2,3
    8470:	1acd883a 	add	r6,r3,r11
    8474:	31400217 	ldw	r5,8(r6)
    8478:	31405926 	beq	r6,r5,85e0 <_free_r+0x2a4>
    847c:	28800117 	ldw	r2,4(r5)
    8480:	00ffff04 	movi	r3,-4
    8484:	10c4703a 	and	r2,r2,r3
    8488:	3880022e 	bgeu	r7,r2,8494 <_free_r+0x158>
    848c:	29400217 	ldw	r5,8(r5)
    8490:	317ffa1e 	bne	r6,r5,847c <_free_r+0x140>
    8494:	29800317 	ldw	r6,12(r5)
    8498:	41800315 	stw	r6,12(r8)
    849c:	41400215 	stw	r5,8(r8)
    84a0:	8809883a 	mov	r4,r17
    84a4:	2a000315 	stw	r8,12(r5)
    84a8:	32000215 	stw	r8,8(r6)
    84ac:	dfc00217 	ldw	ra,8(sp)
    84b0:	dc400117 	ldw	r17,4(sp)
    84b4:	dc000017 	ldw	r16,0(sp)
    84b8:	dec00304 	addi	sp,sp,12
    84bc:	00097f41 	jmpi	97f4 <__malloc_unlock>
    84c0:	dfc00217 	ldw	ra,8(sp)
    84c4:	dc400117 	ldw	r17,4(sp)
    84c8:	dc000017 	ldw	r16,0(sp)
    84cc:	dec00304 	addi	sp,sp,12
    84d0:	f800283a 	ret
    84d4:	31000217 	ldw	r4,8(r6)
    84d8:	003fbd06 	br	83d0 <_free_r+0x94>
    84dc:	3806d0fa 	srli	r3,r7,3
    84e0:	00800044 	movi	r2,1
    84e4:	51400117 	ldw	r5,4(r10)
    84e8:	180890fa 	slli	r4,r3,3
    84ec:	1807d0ba 	srai	r3,r3,2
    84f0:	22c9883a 	add	r4,r4,r11
    84f4:	21800217 	ldw	r6,8(r4)
    84f8:	10c4983a 	sll	r2,r2,r3
    84fc:	41000315 	stw	r4,12(r8)
    8500:	41800215 	stw	r6,8(r8)
    8504:	288ab03a 	or	r5,r5,r2
    8508:	22000215 	stw	r8,8(r4)
    850c:	8809883a 	mov	r4,r17
    8510:	51400115 	stw	r5,4(r10)
    8514:	32000315 	stw	r8,12(r6)
    8518:	dfc00217 	ldw	ra,8(sp)
    851c:	dc400117 	ldw	r17,4(sp)
    8520:	dc000017 	ldw	r16,0(sp)
    8524:	dec00304 	addi	sp,sp,12
    8528:	00097f41 	jmpi	97f4 <__malloc_unlock>
    852c:	2880004c 	andi	r2,r5,1
    8530:	3a4d883a 	add	r6,r7,r9
    8534:	1000071e 	bne	r2,zero,8554 <_free_r+0x218>
    8538:	80bffe17 	ldw	r2,-8(r16)
    853c:	4091c83a 	sub	r8,r8,r2
    8540:	41000317 	ldw	r4,12(r8)
    8544:	40c00217 	ldw	r3,8(r8)
    8548:	308d883a 	add	r6,r6,r2
    854c:	20c00215 	stw	r3,8(r4)
    8550:	19000315 	stw	r4,12(r3)
    8554:	00800074 	movhi	r2,1
    8558:	108fb104 	addi	r2,r2,16068
    855c:	11000017 	ldw	r4,0(r2)
    8560:	30c00054 	ori	r3,r6,1
    8564:	52000215 	stw	r8,8(r10)
    8568:	40c00115 	stw	r3,4(r8)
    856c:	313fa036 	bltu	r6,r4,83f0 <_free_r+0xb4>
    8570:	008000b4 	movhi	r2,2
    8574:	10b78d04 	addi	r2,r2,-8652
    8578:	11400017 	ldw	r5,0(r2)
    857c:	8809883a 	mov	r4,r17
    8580:	00082100 	call	8210 <_malloc_trim_r>
    8584:	003f9a06 	br	83f0 <_free_r+0xb4>
    8588:	00800104 	movi	r2,4
    858c:	10c0072e 	bgeu	r2,r3,85ac <_free_r+0x270>
    8590:	00800504 	movi	r2,20
    8594:	10c01936 	bltu	r2,r3,85fc <_free_r+0x2c0>
    8598:	188016c4 	addi	r2,r3,91
    859c:	100690fa 	slli	r3,r2,3
    85a0:	003fb306 	br	8470 <_free_r+0x134>
    85a4:	01400044 	movi	r5,1
    85a8:	003f7e06 	br	83a4 <_free_r+0x68>
    85ac:	3804d1ba 	srli	r2,r7,6
    85b0:	10800e04 	addi	r2,r2,56
    85b4:	100690fa 	slli	r3,r2,3
    85b8:	003fad06 	br	8470 <_free_r+0x134>
    85bc:	22000315 	stw	r8,12(r4)
    85c0:	22000215 	stw	r8,8(r4)
    85c4:	3a05883a 	add	r2,r7,r8
    85c8:	38c00054 	ori	r3,r7,1
    85cc:	11c00015 	stw	r7,0(r2)
    85d0:	41000215 	stw	r4,8(r8)
    85d4:	40c00115 	stw	r3,4(r8)
    85d8:	41000315 	stw	r4,12(r8)
    85dc:	003f8406 	br	83f0 <_free_r+0xb4>
    85e0:	1005d0ba 	srai	r2,r2,2
    85e4:	00c00044 	movi	r3,1
    85e8:	51000117 	ldw	r4,4(r10)
    85ec:	1886983a 	sll	r3,r3,r2
    85f0:	20c8b03a 	or	r4,r4,r3
    85f4:	51000115 	stw	r4,4(r10)
    85f8:	003fa706 	br	8498 <_free_r+0x15c>
    85fc:	00801504 	movi	r2,84
    8600:	10c00436 	bltu	r2,r3,8614 <_free_r+0x2d8>
    8604:	3804d33a 	srli	r2,r7,12
    8608:	10801b84 	addi	r2,r2,110
    860c:	100690fa 	slli	r3,r2,3
    8610:	003f9706 	br	8470 <_free_r+0x134>
    8614:	00805504 	movi	r2,340
    8618:	10c00436 	bltu	r2,r3,862c <_free_r+0x2f0>
    861c:	3804d3fa 	srli	r2,r7,15
    8620:	10801dc4 	addi	r2,r2,119
    8624:	100690fa 	slli	r3,r2,3
    8628:	003f9106 	br	8470 <_free_r+0x134>
    862c:	00815504 	movi	r2,1364
    8630:	10c0032e 	bgeu	r2,r3,8640 <_free_r+0x304>
    8634:	00801f84 	movi	r2,126
    8638:	00c0fc04 	movi	r3,1008
    863c:	003f8c06 	br	8470 <_free_r+0x134>
    8640:	3804d4ba 	srli	r2,r7,18
    8644:	10801f04 	addi	r2,r2,124
    8648:	100690fa 	slli	r3,r2,3
    864c:	003f8806 	br	8470 <_free_r+0x134>

00008650 <_fwalk_reent>:
    8650:	defff704 	addi	sp,sp,-36
    8654:	dcc00315 	stw	r19,12(sp)
    8658:	24c0b804 	addi	r19,r4,736
    865c:	dd800615 	stw	r22,24(sp)
    8660:	dd400515 	stw	r21,20(sp)
    8664:	dfc00815 	stw	ra,32(sp)
    8668:	ddc00715 	stw	r23,28(sp)
    866c:	dd000415 	stw	r20,16(sp)
    8670:	dc800215 	stw	r18,8(sp)
    8674:	dc400115 	stw	r17,4(sp)
    8678:	dc000015 	stw	r16,0(sp)
    867c:	202b883a 	mov	r21,r4
    8680:	282d883a 	mov	r22,r5
    8684:	0007fa80 	call	7fa8 <__sfp_lock_acquire>
    8688:	98002126 	beq	r19,zero,8710 <_fwalk_reent+0xc0>
    868c:	002f883a 	mov	r23,zero
    8690:	9c800117 	ldw	r18,4(r19)
    8694:	9c000217 	ldw	r16,8(r19)
    8698:	90bfffc4 	addi	r2,r18,-1
    869c:	10000d16 	blt	r2,zero,86d4 <_fwalk_reent+0x84>
    86a0:	0023883a 	mov	r17,zero
    86a4:	053fffc4 	movi	r20,-1
    86a8:	8080030f 	ldh	r2,12(r16)
    86ac:	8c400044 	addi	r17,r17,1
    86b0:	10000626 	beq	r2,zero,86cc <_fwalk_reent+0x7c>
    86b4:	8080038f 	ldh	r2,14(r16)
    86b8:	800b883a 	mov	r5,r16
    86bc:	a809883a 	mov	r4,r21
    86c0:	15000226 	beq	r2,r20,86cc <_fwalk_reent+0x7c>
    86c4:	b03ee83a 	callr	r22
    86c8:	b8aeb03a 	or	r23,r23,r2
    86cc:	84001704 	addi	r16,r16,92
    86d0:	947ff51e 	bne	r18,r17,86a8 <_fwalk_reent+0x58>
    86d4:	9cc00017 	ldw	r19,0(r19)
    86d8:	983fed1e 	bne	r19,zero,8690 <_fwalk_reent+0x40>
    86dc:	0007fac0 	call	7fac <__sfp_lock_release>
    86e0:	b805883a 	mov	r2,r23
    86e4:	dfc00817 	ldw	ra,32(sp)
    86e8:	ddc00717 	ldw	r23,28(sp)
    86ec:	dd800617 	ldw	r22,24(sp)
    86f0:	dd400517 	ldw	r21,20(sp)
    86f4:	dd000417 	ldw	r20,16(sp)
    86f8:	dcc00317 	ldw	r19,12(sp)
    86fc:	dc800217 	ldw	r18,8(sp)
    8700:	dc400117 	ldw	r17,4(sp)
    8704:	dc000017 	ldw	r16,0(sp)
    8708:	dec00904 	addi	sp,sp,36
    870c:	f800283a 	ret
    8710:	002f883a 	mov	r23,zero
    8714:	003ff106 	br	86dc <_fwalk_reent+0x8c>

00008718 <_fwalk>:
    8718:	defff804 	addi	sp,sp,-32
    871c:	dcc00315 	stw	r19,12(sp)
    8720:	24c0b804 	addi	r19,r4,736
    8724:	dd400515 	stw	r21,20(sp)
    8728:	dfc00715 	stw	ra,28(sp)
    872c:	dd800615 	stw	r22,24(sp)
    8730:	dd000415 	stw	r20,16(sp)
    8734:	dc800215 	stw	r18,8(sp)
    8738:	dc400115 	stw	r17,4(sp)
    873c:	dc000015 	stw	r16,0(sp)
    8740:	282b883a 	mov	r21,r5
    8744:	0007fa80 	call	7fa8 <__sfp_lock_acquire>
    8748:	98001f26 	beq	r19,zero,87c8 <_fwalk+0xb0>
    874c:	002d883a 	mov	r22,zero
    8750:	9c800117 	ldw	r18,4(r19)
    8754:	9c000217 	ldw	r16,8(r19)
    8758:	90bfffc4 	addi	r2,r18,-1
    875c:	10000c16 	blt	r2,zero,8790 <_fwalk+0x78>
    8760:	0023883a 	mov	r17,zero
    8764:	053fffc4 	movi	r20,-1
    8768:	8080030f 	ldh	r2,12(r16)
    876c:	8c400044 	addi	r17,r17,1
    8770:	10000526 	beq	r2,zero,8788 <_fwalk+0x70>
    8774:	8080038f 	ldh	r2,14(r16)
    8778:	8009883a 	mov	r4,r16
    877c:	15000226 	beq	r2,r20,8788 <_fwalk+0x70>
    8780:	a83ee83a 	callr	r21
    8784:	b0acb03a 	or	r22,r22,r2
    8788:	84001704 	addi	r16,r16,92
    878c:	947ff61e 	bne	r18,r17,8768 <_fwalk+0x50>
    8790:	9cc00017 	ldw	r19,0(r19)
    8794:	983fee1e 	bne	r19,zero,8750 <_fwalk+0x38>
    8798:	0007fac0 	call	7fac <__sfp_lock_release>
    879c:	b005883a 	mov	r2,r22
    87a0:	dfc00717 	ldw	ra,28(sp)
    87a4:	dd800617 	ldw	r22,24(sp)
    87a8:	dd400517 	ldw	r21,20(sp)
    87ac:	dd000417 	ldw	r20,16(sp)
    87b0:	dcc00317 	ldw	r19,12(sp)
    87b4:	dc800217 	ldw	r18,8(sp)
    87b8:	dc400117 	ldw	r17,4(sp)
    87bc:	dc000017 	ldw	r16,0(sp)
    87c0:	dec00804 	addi	sp,sp,32
    87c4:	f800283a 	ret
    87c8:	002d883a 	mov	r22,zero
    87cc:	003ff206 	br	8798 <_fwalk+0x80>

000087d0 <__smakebuf_r>:
    87d0:	2880030b 	ldhu	r2,12(r5)
    87d4:	deffed04 	addi	sp,sp,-76
    87d8:	dc401015 	stw	r17,64(sp)
    87dc:	1080008c 	andi	r2,r2,2
    87e0:	dc000f15 	stw	r16,60(sp)
    87e4:	dfc01215 	stw	ra,72(sp)
    87e8:	dc801115 	stw	r18,68(sp)
    87ec:	2821883a 	mov	r16,r5
    87f0:	2023883a 	mov	r17,r4
    87f4:	10000b26 	beq	r2,zero,8824 <__smakebuf_r+0x54>
    87f8:	28c010c4 	addi	r3,r5,67
    87fc:	00800044 	movi	r2,1
    8800:	28800515 	stw	r2,20(r5)
    8804:	28c00415 	stw	r3,16(r5)
    8808:	28c00015 	stw	r3,0(r5)
    880c:	dfc01217 	ldw	ra,72(sp)
    8810:	dc801117 	ldw	r18,68(sp)
    8814:	dc401017 	ldw	r17,64(sp)
    8818:	dc000f17 	ldw	r16,60(sp)
    881c:	dec01304 	addi	sp,sp,76
    8820:	f800283a 	ret
    8824:	2940038f 	ldh	r5,14(r5)
    8828:	28002116 	blt	r5,zero,88b0 <__smakebuf_r+0xe0>
    882c:	d80d883a 	mov	r6,sp
    8830:	000946c0 	call	946c <_fstat_r>
    8834:	10001e16 	blt	r2,zero,88b0 <__smakebuf_r+0xe0>
    8838:	d8800117 	ldw	r2,4(sp)
    883c:	00e00014 	movui	r3,32768
    8840:	113c000c 	andi	r4,r2,61440
    8844:	20c03126 	beq	r4,r3,890c <__smakebuf_r+0x13c>
    8848:	8080030b 	ldhu	r2,12(r16)
    884c:	00c80004 	movi	r3,8192
    8850:	10820014 	ori	r2,r2,2048
    8854:	8080030d 	sth	r2,12(r16)
    8858:	20c01e26 	beq	r4,r3,88d4 <__smakebuf_r+0x104>
    885c:	04810004 	movi	r18,1024
    8860:	8809883a 	mov	r4,r17
    8864:	900b883a 	mov	r5,r18
    8868:	00089640 	call	8964 <_malloc_r>
    886c:	1009883a 	mov	r4,r2
    8870:	10003126 	beq	r2,zero,8938 <__smakebuf_r+0x168>
    8874:	80c0030b 	ldhu	r3,12(r16)
    8878:	00800074 	movhi	r2,1
    887c:	10a02704 	addi	r2,r2,-32612
    8880:	88800f15 	stw	r2,60(r17)
    8884:	18c02014 	ori	r3,r3,128
    8888:	84800515 	stw	r18,20(r16)
    888c:	80c0030d 	sth	r3,12(r16)
    8890:	81000415 	stw	r4,16(r16)
    8894:	81000015 	stw	r4,0(r16)
    8898:	dfc01217 	ldw	ra,72(sp)
    889c:	dc801117 	ldw	r18,68(sp)
    88a0:	dc401017 	ldw	r17,64(sp)
    88a4:	dc000f17 	ldw	r16,60(sp)
    88a8:	dec01304 	addi	sp,sp,76
    88ac:	f800283a 	ret
    88b0:	80c0030b 	ldhu	r3,12(r16)
    88b4:	1880200c 	andi	r2,r3,128
    88b8:	10000426 	beq	r2,zero,88cc <__smakebuf_r+0xfc>
    88bc:	04801004 	movi	r18,64
    88c0:	18820014 	ori	r2,r3,2048
    88c4:	8080030d 	sth	r2,12(r16)
    88c8:	003fe506 	br	8860 <__smakebuf_r+0x90>
    88cc:	04810004 	movi	r18,1024
    88d0:	003ffb06 	br	88c0 <__smakebuf_r+0xf0>
    88d4:	8140038f 	ldh	r5,14(r16)
    88d8:	8809883a 	mov	r4,r17
    88dc:	00094e00 	call	94e0 <_isatty_r>
    88e0:	103fde26 	beq	r2,zero,885c <__smakebuf_r+0x8c>
    88e4:	8080030b 	ldhu	r2,12(r16)
    88e8:	80c010c4 	addi	r3,r16,67
    88ec:	04810004 	movi	r18,1024
    88f0:	10800054 	ori	r2,r2,1
    88f4:	8080030d 	sth	r2,12(r16)
    88f8:	00800044 	movi	r2,1
    88fc:	80c00415 	stw	r3,16(r16)
    8900:	80800515 	stw	r2,20(r16)
    8904:	80c00015 	stw	r3,0(r16)
    8908:	003fd506 	br	8860 <__smakebuf_r+0x90>
    890c:	80c00a17 	ldw	r3,40(r16)
    8910:	00800074 	movhi	r2,1
    8914:	10a44704 	addi	r2,r2,-28388
    8918:	18bfcb1e 	bne	r3,r2,8848 <__smakebuf_r+0x78>
    891c:	8080030b 	ldhu	r2,12(r16)
    8920:	00c10004 	movi	r3,1024
    8924:	1825883a 	mov	r18,r3
    8928:	10c4b03a 	or	r2,r2,r3
    892c:	8080030d 	sth	r2,12(r16)
    8930:	80c01315 	stw	r3,76(r16)
    8934:	003fca06 	br	8860 <__smakebuf_r+0x90>
    8938:	8100030b 	ldhu	r4,12(r16)
    893c:	2080800c 	andi	r2,r4,512
    8940:	103fb21e 	bne	r2,zero,880c <__smakebuf_r+0x3c>
    8944:	80c010c4 	addi	r3,r16,67
    8948:	21000094 	ori	r4,r4,2
    894c:	00800044 	movi	r2,1
    8950:	80800515 	stw	r2,20(r16)
    8954:	8100030d 	sth	r4,12(r16)
    8958:	80c00415 	stw	r3,16(r16)
    895c:	80c00015 	stw	r3,0(r16)
    8960:	003faa06 	br	880c <__smakebuf_r+0x3c>

00008964 <_malloc_r>:
    8964:	defff604 	addi	sp,sp,-40
    8968:	28c002c4 	addi	r3,r5,11
    896c:	00800584 	movi	r2,22
    8970:	dc800215 	stw	r18,8(sp)
    8974:	dfc00915 	stw	ra,36(sp)
    8978:	df000815 	stw	fp,32(sp)
    897c:	ddc00715 	stw	r23,28(sp)
    8980:	dd800615 	stw	r22,24(sp)
    8984:	dd400515 	stw	r21,20(sp)
    8988:	dd000415 	stw	r20,16(sp)
    898c:	dcc00315 	stw	r19,12(sp)
    8990:	dc400115 	stw	r17,4(sp)
    8994:	dc000015 	stw	r16,0(sp)
    8998:	2025883a 	mov	r18,r4
    899c:	10c01236 	bltu	r2,r3,89e8 <_malloc_r+0x84>
    89a0:	04400404 	movi	r17,16
    89a4:	8940142e 	bgeu	r17,r5,89f8 <_malloc_r+0x94>
    89a8:	00800304 	movi	r2,12
    89ac:	0007883a 	mov	r3,zero
    89b0:	90800015 	stw	r2,0(r18)
    89b4:	1805883a 	mov	r2,r3
    89b8:	dfc00917 	ldw	ra,36(sp)
    89bc:	df000817 	ldw	fp,32(sp)
    89c0:	ddc00717 	ldw	r23,28(sp)
    89c4:	dd800617 	ldw	r22,24(sp)
    89c8:	dd400517 	ldw	r21,20(sp)
    89cc:	dd000417 	ldw	r20,16(sp)
    89d0:	dcc00317 	ldw	r19,12(sp)
    89d4:	dc800217 	ldw	r18,8(sp)
    89d8:	dc400117 	ldw	r17,4(sp)
    89dc:	dc000017 	ldw	r16,0(sp)
    89e0:	dec00a04 	addi	sp,sp,40
    89e4:	f800283a 	ret
    89e8:	00bffe04 	movi	r2,-8
    89ec:	18a2703a 	and	r17,r3,r2
    89f0:	883fed16 	blt	r17,zero,89a8 <_malloc_r+0x44>
    89f4:	897fec36 	bltu	r17,r5,89a8 <_malloc_r+0x44>
    89f8:	9009883a 	mov	r4,r18
    89fc:	00097f00 	call	97f0 <__malloc_lock>
    8a00:	00807dc4 	movi	r2,503
    8a04:	14402b2e 	bgeu	r2,r17,8ab4 <_malloc_r+0x150>
    8a08:	8806d27a 	srli	r3,r17,9
    8a0c:	18003f1e 	bne	r3,zero,8b0c <_malloc_r+0x1a8>
    8a10:	880cd0fa 	srli	r6,r17,3
    8a14:	300490fa 	slli	r2,r6,3
    8a18:	02c00074 	movhi	r11,1
    8a1c:	5acea404 	addi	r11,r11,14992
    8a20:	12cb883a 	add	r5,r2,r11
    8a24:	2c000317 	ldw	r16,12(r5)
    8a28:	580f883a 	mov	r7,r11
    8a2c:	2c00041e 	bne	r5,r16,8a40 <_malloc_r+0xdc>
    8a30:	00000a06 	br	8a5c <_malloc_r+0xf8>
    8a34:	1800860e 	bge	r3,zero,8c50 <_malloc_r+0x2ec>
    8a38:	84000317 	ldw	r16,12(r16)
    8a3c:	2c000726 	beq	r5,r16,8a5c <_malloc_r+0xf8>
    8a40:	80800117 	ldw	r2,4(r16)
    8a44:	00ffff04 	movi	r3,-4
    8a48:	10c8703a 	and	r4,r2,r3
    8a4c:	2447c83a 	sub	r3,r4,r17
    8a50:	008003c4 	movi	r2,15
    8a54:	10fff70e 	bge	r2,r3,8a34 <_malloc_r+0xd0>
    8a58:	31bfffc4 	addi	r6,r6,-1
    8a5c:	32400044 	addi	r9,r6,1
    8a60:	02800074 	movhi	r10,1
    8a64:	528ea604 	addi	r10,r10,15000
    8a68:	54000217 	ldw	r16,8(r10)
    8a6c:	8280a026 	beq	r16,r10,8cf0 <_malloc_r+0x38c>
    8a70:	80800117 	ldw	r2,4(r16)
    8a74:	00ffff04 	movi	r3,-4
    8a78:	10ca703a 	and	r5,r2,r3
    8a7c:	2c4dc83a 	sub	r6,r5,r17
    8a80:	008003c4 	movi	r2,15
    8a84:	11808316 	blt	r2,r6,8c94 <_malloc_r+0x330>
    8a88:	52800315 	stw	r10,12(r10)
    8a8c:	52800215 	stw	r10,8(r10)
    8a90:	30002916 	blt	r6,zero,8b38 <_malloc_r+0x1d4>
    8a94:	8147883a 	add	r3,r16,r5
    8a98:	18800117 	ldw	r2,4(r3)
    8a9c:	9009883a 	mov	r4,r18
    8aa0:	10800054 	ori	r2,r2,1
    8aa4:	18800115 	stw	r2,4(r3)
    8aa8:	00097f40 	call	97f4 <__malloc_unlock>
    8aac:	80c00204 	addi	r3,r16,8
    8ab0:	003fc006 	br	89b4 <_malloc_r+0x50>
    8ab4:	02c00074 	movhi	r11,1
    8ab8:	5acea404 	addi	r11,r11,14992
    8abc:	8ac5883a 	add	r2,r17,r11
    8ac0:	14000317 	ldw	r16,12(r2)
    8ac4:	580f883a 	mov	r7,r11
    8ac8:	8806d0fa 	srli	r3,r17,3
    8acc:	14006c26 	beq	r2,r16,8c80 <_malloc_r+0x31c>
    8ad0:	80c00117 	ldw	r3,4(r16)
    8ad4:	00bfff04 	movi	r2,-4
    8ad8:	81800317 	ldw	r6,12(r16)
    8adc:	1886703a 	and	r3,r3,r2
    8ae0:	80c7883a 	add	r3,r16,r3
    8ae4:	18800117 	ldw	r2,4(r3)
    8ae8:	81400217 	ldw	r5,8(r16)
    8aec:	9009883a 	mov	r4,r18
    8af0:	10800054 	ori	r2,r2,1
    8af4:	18800115 	stw	r2,4(r3)
    8af8:	31400215 	stw	r5,8(r6)
    8afc:	29800315 	stw	r6,12(r5)
    8b00:	00097f40 	call	97f4 <__malloc_unlock>
    8b04:	80c00204 	addi	r3,r16,8
    8b08:	003faa06 	br	89b4 <_malloc_r+0x50>
    8b0c:	00800104 	movi	r2,4
    8b10:	10c0052e 	bgeu	r2,r3,8b28 <_malloc_r+0x1c4>
    8b14:	00800504 	movi	r2,20
    8b18:	10c07836 	bltu	r2,r3,8cfc <_malloc_r+0x398>
    8b1c:	198016c4 	addi	r6,r3,91
    8b20:	300490fa 	slli	r2,r6,3
    8b24:	003fbc06 	br	8a18 <_malloc_r+0xb4>
    8b28:	8804d1ba 	srli	r2,r17,6
    8b2c:	11800e04 	addi	r6,r2,56
    8b30:	300490fa 	slli	r2,r6,3
    8b34:	003fb806 	br	8a18 <_malloc_r+0xb4>
    8b38:	00807fc4 	movi	r2,511
    8b3c:	1140bb36 	bltu	r2,r5,8e2c <_malloc_r+0x4c8>
    8b40:	2806d0fa 	srli	r3,r5,3
    8b44:	573ffe04 	addi	fp,r10,-8
    8b48:	00800044 	movi	r2,1
    8b4c:	180890fa 	slli	r4,r3,3
    8b50:	1807d0ba 	srai	r3,r3,2
    8b54:	e1c00117 	ldw	r7,4(fp)
    8b58:	5909883a 	add	r4,r11,r4
    8b5c:	21400217 	ldw	r5,8(r4)
    8b60:	10c4983a 	sll	r2,r2,r3
    8b64:	81000315 	stw	r4,12(r16)
    8b68:	81400215 	stw	r5,8(r16)
    8b6c:	388eb03a 	or	r7,r7,r2
    8b70:	2c000315 	stw	r16,12(r5)
    8b74:	24000215 	stw	r16,8(r4)
    8b78:	e1c00115 	stw	r7,4(fp)
    8b7c:	4807883a 	mov	r3,r9
    8b80:	4800cd16 	blt	r9,zero,8eb8 <_malloc_r+0x554>
    8b84:	1807d0ba 	srai	r3,r3,2
    8b88:	00800044 	movi	r2,1
    8b8c:	10c8983a 	sll	r4,r2,r3
    8b90:	39004436 	bltu	r7,r4,8ca4 <_malloc_r+0x340>
    8b94:	21c4703a 	and	r2,r4,r7
    8b98:	10000a1e 	bne	r2,zero,8bc4 <_malloc_r+0x260>
    8b9c:	2109883a 	add	r4,r4,r4
    8ba0:	00bfff04 	movi	r2,-4
    8ba4:	4884703a 	and	r2,r9,r2
    8ba8:	3906703a 	and	r3,r7,r4
    8bac:	12400104 	addi	r9,r2,4
    8bb0:	1800041e 	bne	r3,zero,8bc4 <_malloc_r+0x260>
    8bb4:	2109883a 	add	r4,r4,r4
    8bb8:	3904703a 	and	r2,r7,r4
    8bbc:	4a400104 	addi	r9,r9,4
    8bc0:	103ffc26 	beq	r2,zero,8bb4 <_malloc_r+0x250>
    8bc4:	480490fa 	slli	r2,r9,3
    8bc8:	4819883a 	mov	r12,r9
    8bcc:	023fff04 	movi	r8,-4
    8bd0:	589b883a 	add	r13,r11,r2
    8bd4:	6807883a 	mov	r3,r13
    8bd8:	014003c4 	movi	r5,15
    8bdc:	1c000317 	ldw	r16,12(r3)
    8be0:	1c00041e 	bne	r3,r16,8bf4 <_malloc_r+0x290>
    8be4:	0000a706 	br	8e84 <_malloc_r+0x520>
    8be8:	3000ab0e 	bge	r6,zero,8e98 <_malloc_r+0x534>
    8bec:	84000317 	ldw	r16,12(r16)
    8bf0:	1c00a426 	beq	r3,r16,8e84 <_malloc_r+0x520>
    8bf4:	80800117 	ldw	r2,4(r16)
    8bf8:	1204703a 	and	r2,r2,r8
    8bfc:	144dc83a 	sub	r6,r2,r17
    8c00:	29bff90e 	bge	r5,r6,8be8 <_malloc_r+0x284>
    8c04:	81000317 	ldw	r4,12(r16)
    8c08:	80c00217 	ldw	r3,8(r16)
    8c0c:	89400054 	ori	r5,r17,1
    8c10:	8445883a 	add	r2,r16,r17
    8c14:	20c00215 	stw	r3,8(r4)
    8c18:	19000315 	stw	r4,12(r3)
    8c1c:	81400115 	stw	r5,4(r16)
    8c20:	1187883a 	add	r3,r2,r6
    8c24:	31000054 	ori	r4,r6,1
    8c28:	50800315 	stw	r2,12(r10)
    8c2c:	50800215 	stw	r2,8(r10)
    8c30:	19800015 	stw	r6,0(r3)
    8c34:	11000115 	stw	r4,4(r2)
    8c38:	12800215 	stw	r10,8(r2)
    8c3c:	12800315 	stw	r10,12(r2)
    8c40:	9009883a 	mov	r4,r18
    8c44:	00097f40 	call	97f4 <__malloc_unlock>
    8c48:	80c00204 	addi	r3,r16,8
    8c4c:	003f5906 	br	89b4 <_malloc_r+0x50>
    8c50:	8109883a 	add	r4,r16,r4
    8c54:	20800117 	ldw	r2,4(r4)
    8c58:	80c00217 	ldw	r3,8(r16)
    8c5c:	81400317 	ldw	r5,12(r16)
    8c60:	10800054 	ori	r2,r2,1
    8c64:	20800115 	stw	r2,4(r4)
    8c68:	28c00215 	stw	r3,8(r5)
    8c6c:	19400315 	stw	r5,12(r3)
    8c70:	9009883a 	mov	r4,r18
    8c74:	00097f40 	call	97f4 <__malloc_unlock>
    8c78:	80c00204 	addi	r3,r16,8
    8c7c:	003f4d06 	br	89b4 <_malloc_r+0x50>
    8c80:	80800204 	addi	r2,r16,8
    8c84:	14000317 	ldw	r16,12(r2)
    8c88:	143f911e 	bne	r2,r16,8ad0 <_malloc_r+0x16c>
    8c8c:	1a400084 	addi	r9,r3,2
    8c90:	003f7306 	br	8a60 <_malloc_r+0xfc>
    8c94:	88c00054 	ori	r3,r17,1
    8c98:	8445883a 	add	r2,r16,r17
    8c9c:	80c00115 	stw	r3,4(r16)
    8ca0:	003fdf06 	br	8c20 <_malloc_r+0x2bc>
    8ca4:	e4000217 	ldw	r16,8(fp)
    8ca8:	00bfff04 	movi	r2,-4
    8cac:	80c00117 	ldw	r3,4(r16)
    8cb0:	802d883a 	mov	r22,r16
    8cb4:	18aa703a 	and	r21,r3,r2
    8cb8:	ac401636 	bltu	r21,r17,8d14 <_malloc_r+0x3b0>
    8cbc:	ac49c83a 	sub	r4,r21,r17
    8cc0:	008003c4 	movi	r2,15
    8cc4:	1100130e 	bge	r2,r4,8d14 <_malloc_r+0x3b0>
    8cc8:	88800054 	ori	r2,r17,1
    8ccc:	8447883a 	add	r3,r16,r17
    8cd0:	80800115 	stw	r2,4(r16)
    8cd4:	20800054 	ori	r2,r4,1
    8cd8:	18800115 	stw	r2,4(r3)
    8cdc:	e0c00215 	stw	r3,8(fp)
    8ce0:	9009883a 	mov	r4,r18
    8ce4:	00097f40 	call	97f4 <__malloc_unlock>
    8ce8:	80c00204 	addi	r3,r16,8
    8cec:	003f3106 	br	89b4 <_malloc_r+0x50>
    8cf0:	39c00117 	ldw	r7,4(r7)
    8cf4:	573ffe04 	addi	fp,r10,-8
    8cf8:	003fa006 	br	8b7c <_malloc_r+0x218>
    8cfc:	00801504 	movi	r2,84
    8d00:	10c06736 	bltu	r2,r3,8ea0 <_malloc_r+0x53c>
    8d04:	8804d33a 	srli	r2,r17,12
    8d08:	11801b84 	addi	r6,r2,110
    8d0c:	300490fa 	slli	r2,r6,3
    8d10:	003f4106 	br	8a18 <_malloc_r+0xb4>
    8d14:	d087e717 	ldw	r2,8092(gp)
    8d18:	d0e00c17 	ldw	r3,-32720(gp)
    8d1c:	053fffc4 	movi	r20,-1
    8d20:	10800404 	addi	r2,r2,16
    8d24:	88a7883a 	add	r19,r17,r2
    8d28:	1d000326 	beq	r3,r20,8d38 <_malloc_r+0x3d4>
    8d2c:	98c3ffc4 	addi	r3,r19,4095
    8d30:	00bc0004 	movi	r2,-4096
    8d34:	18a6703a 	and	r19,r3,r2
    8d38:	9009883a 	mov	r4,r18
    8d3c:	980b883a 	mov	r5,r19
    8d40:	00090a40 	call	90a4 <_sbrk_r>
    8d44:	1009883a 	mov	r4,r2
    8d48:	15000426 	beq	r2,r20,8d5c <_malloc_r+0x3f8>
    8d4c:	854b883a 	add	r5,r16,r21
    8d50:	1029883a 	mov	r20,r2
    8d54:	11405a2e 	bgeu	r2,r5,8ec0 <_malloc_r+0x55c>
    8d58:	87000c26 	beq	r16,fp,8d8c <_malloc_r+0x428>
    8d5c:	e4000217 	ldw	r16,8(fp)
    8d60:	80c00117 	ldw	r3,4(r16)
    8d64:	00bfff04 	movi	r2,-4
    8d68:	1884703a 	and	r2,r3,r2
    8d6c:	14400336 	bltu	r2,r17,8d7c <_malloc_r+0x418>
    8d70:	1449c83a 	sub	r4,r2,r17
    8d74:	008003c4 	movi	r2,15
    8d78:	113fd316 	blt	r2,r4,8cc8 <_malloc_r+0x364>
    8d7c:	9009883a 	mov	r4,r18
    8d80:	00097f40 	call	97f4 <__malloc_unlock>
    8d84:	0007883a 	mov	r3,zero
    8d88:	003f0a06 	br	89b4 <_malloc_r+0x50>
    8d8c:	05c000b4 	movhi	r23,2
    8d90:	bdf79004 	addi	r23,r23,-8640
    8d94:	b8800017 	ldw	r2,0(r23)
    8d98:	988d883a 	add	r6,r19,r2
    8d9c:	b9800015 	stw	r6,0(r23)
    8da0:	d0e00c17 	ldw	r3,-32720(gp)
    8da4:	00bfffc4 	movi	r2,-1
    8da8:	18808e26 	beq	r3,r2,8fe4 <_malloc_r+0x680>
    8dac:	2145c83a 	sub	r2,r4,r5
    8db0:	3085883a 	add	r2,r6,r2
    8db4:	b8800015 	stw	r2,0(r23)
    8db8:	20c001cc 	andi	r3,r4,7
    8dbc:	18005f1e 	bne	r3,zero,8f3c <_malloc_r+0x5d8>
    8dc0:	000b883a 	mov	r5,zero
    8dc4:	a4c5883a 	add	r2,r20,r19
    8dc8:	1083ffcc 	andi	r2,r2,4095
    8dcc:	00c40004 	movi	r3,4096
    8dd0:	1887c83a 	sub	r3,r3,r2
    8dd4:	28e7883a 	add	r19,r5,r3
    8dd8:	9009883a 	mov	r4,r18
    8ddc:	980b883a 	mov	r5,r19
    8de0:	00090a40 	call	90a4 <_sbrk_r>
    8de4:	1007883a 	mov	r3,r2
    8de8:	00bfffc4 	movi	r2,-1
    8dec:	18807a26 	beq	r3,r2,8fd8 <_malloc_r+0x674>
    8df0:	1d05c83a 	sub	r2,r3,r20
    8df4:	9885883a 	add	r2,r19,r2
    8df8:	10c00054 	ori	r3,r2,1
    8dfc:	b8800017 	ldw	r2,0(r23)
    8e00:	a021883a 	mov	r16,r20
    8e04:	a0c00115 	stw	r3,4(r20)
    8e08:	9885883a 	add	r2,r19,r2
    8e0c:	b8800015 	stw	r2,0(r23)
    8e10:	e5000215 	stw	r20,8(fp)
    8e14:	b7003626 	beq	r22,fp,8ef0 <_malloc_r+0x58c>
    8e18:	018003c4 	movi	r6,15
    8e1c:	35404b36 	bltu	r6,r21,8f4c <_malloc_r+0x5e8>
    8e20:	00800044 	movi	r2,1
    8e24:	a0800115 	stw	r2,4(r20)
    8e28:	003fcd06 	br	8d60 <_malloc_r+0x3fc>
    8e2c:	2808d27a 	srli	r4,r5,9
    8e30:	2000371e 	bne	r4,zero,8f10 <_malloc_r+0x5ac>
    8e34:	2808d0fa 	srli	r4,r5,3
    8e38:	200690fa 	slli	r3,r4,3
    8e3c:	1ad1883a 	add	r8,r3,r11
    8e40:	41800217 	ldw	r6,8(r8)
    8e44:	41805b26 	beq	r8,r6,8fb4 <_malloc_r+0x650>
    8e48:	30800117 	ldw	r2,4(r6)
    8e4c:	00ffff04 	movi	r3,-4
    8e50:	10c4703a 	and	r2,r2,r3
    8e54:	2880022e 	bgeu	r5,r2,8e60 <_malloc_r+0x4fc>
    8e58:	31800217 	ldw	r6,8(r6)
    8e5c:	41bffa1e 	bne	r8,r6,8e48 <_malloc_r+0x4e4>
    8e60:	32000317 	ldw	r8,12(r6)
    8e64:	39c00117 	ldw	r7,4(r7)
    8e68:	82000315 	stw	r8,12(r16)
    8e6c:	81800215 	stw	r6,8(r16)
    8e70:	07000074 	movhi	fp,1
    8e74:	e70ea404 	addi	fp,fp,14992
    8e78:	34000315 	stw	r16,12(r6)
    8e7c:	44000215 	stw	r16,8(r8)
    8e80:	003f3e06 	br	8b7c <_malloc_r+0x218>
    8e84:	63000044 	addi	r12,r12,1
    8e88:	608000cc 	andi	r2,r12,3
    8e8c:	10005d26 	beq	r2,zero,9004 <_malloc_r+0x6a0>
    8e90:	18c00204 	addi	r3,r3,8
    8e94:	003f5106 	br	8bdc <_malloc_r+0x278>
    8e98:	8089883a 	add	r4,r16,r2
    8e9c:	003f6d06 	br	8c54 <_malloc_r+0x2f0>
    8ea0:	00805504 	movi	r2,340
    8ea4:	10c02036 	bltu	r2,r3,8f28 <_malloc_r+0x5c4>
    8ea8:	8804d3fa 	srli	r2,r17,15
    8eac:	11801dc4 	addi	r6,r2,119
    8eb0:	300490fa 	slli	r2,r6,3
    8eb4:	003ed806 	br	8a18 <_malloc_r+0xb4>
    8eb8:	48c000c4 	addi	r3,r9,3
    8ebc:	003f3106 	br	8b84 <_malloc_r+0x220>
    8ec0:	05c000b4 	movhi	r23,2
    8ec4:	bdf79004 	addi	r23,r23,-8640
    8ec8:	b8800017 	ldw	r2,0(r23)
    8ecc:	988d883a 	add	r6,r19,r2
    8ed0:	b9800015 	stw	r6,0(r23)
    8ed4:	293fb21e 	bne	r5,r4,8da0 <_malloc_r+0x43c>
    8ed8:	2083ffcc 	andi	r2,r4,4095
    8edc:	103fb01e 	bne	r2,zero,8da0 <_malloc_r+0x43c>
    8ee0:	e4000217 	ldw	r16,8(fp)
    8ee4:	9d45883a 	add	r2,r19,r21
    8ee8:	10800054 	ori	r2,r2,1
    8eec:	80800115 	stw	r2,4(r16)
    8ef0:	b8c00017 	ldw	r3,0(r23)
    8ef4:	d087e817 	ldw	r2,8096(gp)
    8ef8:	10c0012e 	bgeu	r2,r3,8f00 <_malloc_r+0x59c>
    8efc:	d0c7e815 	stw	r3,8096(gp)
    8f00:	d087e917 	ldw	r2,8100(gp)
    8f04:	10ff962e 	bgeu	r2,r3,8d60 <_malloc_r+0x3fc>
    8f08:	d0c7e915 	stw	r3,8100(gp)
    8f0c:	003f9406 	br	8d60 <_malloc_r+0x3fc>
    8f10:	00800104 	movi	r2,4
    8f14:	11001e36 	bltu	r2,r4,8f90 <_malloc_r+0x62c>
    8f18:	2804d1ba 	srli	r2,r5,6
    8f1c:	11000e04 	addi	r4,r2,56
    8f20:	200690fa 	slli	r3,r4,3
    8f24:	003fc506 	br	8e3c <_malloc_r+0x4d8>
    8f28:	00815504 	movi	r2,1364
    8f2c:	10c01d2e 	bgeu	r2,r3,8fa4 <_malloc_r+0x640>
    8f30:	01801f84 	movi	r6,126
    8f34:	0080fc04 	movi	r2,1008
    8f38:	003eb706 	br	8a18 <_malloc_r+0xb4>
    8f3c:	00800204 	movi	r2,8
    8f40:	10cbc83a 	sub	r5,r2,r3
    8f44:	2169883a 	add	r20,r4,r5
    8f48:	003f9e06 	br	8dc4 <_malloc_r+0x460>
    8f4c:	00bffe04 	movi	r2,-8
    8f50:	a93ffd04 	addi	r4,r21,-12
    8f54:	2088703a 	and	r4,r4,r2
    8f58:	b10b883a 	add	r5,r22,r4
    8f5c:	00c00144 	movi	r3,5
    8f60:	28c00215 	stw	r3,8(r5)
    8f64:	28c00115 	stw	r3,4(r5)
    8f68:	b0800117 	ldw	r2,4(r22)
    8f6c:	1080004c 	andi	r2,r2,1
    8f70:	2084b03a 	or	r2,r4,r2
    8f74:	b0800115 	stw	r2,4(r22)
    8f78:	313fdd2e 	bgeu	r6,r4,8ef0 <_malloc_r+0x58c>
    8f7c:	b1400204 	addi	r5,r22,8
    8f80:	9009883a 	mov	r4,r18
    8f84:	000833c0 	call	833c <_free_r>
    8f88:	e4000217 	ldw	r16,8(fp)
    8f8c:	003fd806 	br	8ef0 <_malloc_r+0x58c>
    8f90:	00800504 	movi	r2,20
    8f94:	11001536 	bltu	r2,r4,8fec <_malloc_r+0x688>
    8f98:	210016c4 	addi	r4,r4,91
    8f9c:	200690fa 	slli	r3,r4,3
    8fa0:	003fa606 	br	8e3c <_malloc_r+0x4d8>
    8fa4:	8804d4ba 	srli	r2,r17,18
    8fa8:	11801f04 	addi	r6,r2,124
    8fac:	300490fa 	slli	r2,r6,3
    8fb0:	003e9906 	br	8a18 <_malloc_r+0xb4>
    8fb4:	2009d0ba 	srai	r4,r4,2
    8fb8:	01400074 	movhi	r5,1
    8fbc:	294ea404 	addi	r5,r5,14992
    8fc0:	00c00044 	movi	r3,1
    8fc4:	28800117 	ldw	r2,4(r5)
    8fc8:	1906983a 	sll	r3,r3,r4
    8fcc:	10c4b03a 	or	r2,r2,r3
    8fd0:	28800115 	stw	r2,4(r5)
    8fd4:	003fa306 	br	8e64 <_malloc_r+0x500>
    8fd8:	0027883a 	mov	r19,zero
    8fdc:	00c00044 	movi	r3,1
    8fe0:	003f8606 	br	8dfc <_malloc_r+0x498>
    8fe4:	d1200c15 	stw	r4,-32720(gp)
    8fe8:	003f7306 	br	8db8 <_malloc_r+0x454>
    8fec:	00801504 	movi	r2,84
    8ff0:	11001936 	bltu	r2,r4,9058 <_malloc_r+0x6f4>
    8ff4:	2804d33a 	srli	r2,r5,12
    8ff8:	11001b84 	addi	r4,r2,110
    8ffc:	200690fa 	slli	r3,r4,3
    9000:	003f8e06 	br	8e3c <_malloc_r+0x4d8>
    9004:	480b883a 	mov	r5,r9
    9008:	6807883a 	mov	r3,r13
    900c:	288000cc 	andi	r2,r5,3
    9010:	18fffe04 	addi	r3,r3,-8
    9014:	297fffc4 	addi	r5,r5,-1
    9018:	10001526 	beq	r2,zero,9070 <_malloc_r+0x70c>
    901c:	18800217 	ldw	r2,8(r3)
    9020:	10fffa26 	beq	r2,r3,900c <_malloc_r+0x6a8>
    9024:	2109883a 	add	r4,r4,r4
    9028:	393f1e36 	bltu	r7,r4,8ca4 <_malloc_r+0x340>
    902c:	203f1d26 	beq	r4,zero,8ca4 <_malloc_r+0x340>
    9030:	21c4703a 	and	r2,r4,r7
    9034:	10000226 	beq	r2,zero,9040 <_malloc_r+0x6dc>
    9038:	6013883a 	mov	r9,r12
    903c:	003ee106 	br	8bc4 <_malloc_r+0x260>
    9040:	2109883a 	add	r4,r4,r4
    9044:	3904703a 	and	r2,r7,r4
    9048:	63000104 	addi	r12,r12,4
    904c:	103ffc26 	beq	r2,zero,9040 <_malloc_r+0x6dc>
    9050:	6013883a 	mov	r9,r12
    9054:	003edb06 	br	8bc4 <_malloc_r+0x260>
    9058:	00805504 	movi	r2,340
    905c:	11000836 	bltu	r2,r4,9080 <_malloc_r+0x71c>
    9060:	2804d3fa 	srli	r2,r5,15
    9064:	11001dc4 	addi	r4,r2,119
    9068:	200690fa 	slli	r3,r4,3
    906c:	003f7306 	br	8e3c <_malloc_r+0x4d8>
    9070:	0104303a 	nor	r2,zero,r4
    9074:	388e703a 	and	r7,r7,r2
    9078:	e1c00115 	stw	r7,4(fp)
    907c:	003fe906 	br	9024 <_malloc_r+0x6c0>
    9080:	00815504 	movi	r2,1364
    9084:	1100032e 	bgeu	r2,r4,9094 <_malloc_r+0x730>
    9088:	01001f84 	movi	r4,126
    908c:	00c0fc04 	movi	r3,1008
    9090:	003f6a06 	br	8e3c <_malloc_r+0x4d8>
    9094:	2804d4ba 	srli	r2,r5,18
    9098:	11001f04 	addi	r4,r2,124
    909c:	200690fa 	slli	r3,r4,3
    90a0:	003f6606 	br	8e3c <_malloc_r+0x4d8>

000090a4 <_sbrk_r>:
    90a4:	defffd04 	addi	sp,sp,-12
    90a8:	dc000015 	stw	r16,0(sp)
    90ac:	040000b4 	movhi	r16,2
    90b0:	84378c04 	addi	r16,r16,-8656
    90b4:	dc400115 	stw	r17,4(sp)
    90b8:	80000015 	stw	zero,0(r16)
    90bc:	2023883a 	mov	r17,r4
    90c0:	2809883a 	mov	r4,r5
    90c4:	dfc00215 	stw	ra,8(sp)
    90c8:	00098f00 	call	98f0 <sbrk>
    90cc:	1007883a 	mov	r3,r2
    90d0:	00bfffc4 	movi	r2,-1
    90d4:	18800626 	beq	r3,r2,90f0 <_sbrk_r+0x4c>
    90d8:	1805883a 	mov	r2,r3
    90dc:	dfc00217 	ldw	ra,8(sp)
    90e0:	dc400117 	ldw	r17,4(sp)
    90e4:	dc000017 	ldw	r16,0(sp)
    90e8:	dec00304 	addi	sp,sp,12
    90ec:	f800283a 	ret
    90f0:	80800017 	ldw	r2,0(r16)
    90f4:	103ff826 	beq	r2,zero,90d8 <_sbrk_r+0x34>
    90f8:	88800015 	stw	r2,0(r17)
    90fc:	1805883a 	mov	r2,r3
    9100:	dfc00217 	ldw	ra,8(sp)
    9104:	dc400117 	ldw	r17,4(sp)
    9108:	dc000017 	ldw	r16,0(sp)
    910c:	dec00304 	addi	sp,sp,12
    9110:	f800283a 	ret

00009114 <__sclose>:
    9114:	2940038f 	ldh	r5,14(r5)
    9118:	00092d81 	jmpi	92d8 <_close_r>

0000911c <__sseek>:
    911c:	defffe04 	addi	sp,sp,-8
    9120:	dc000015 	stw	r16,0(sp)
    9124:	2821883a 	mov	r16,r5
    9128:	2940038f 	ldh	r5,14(r5)
    912c:	dfc00115 	stw	ra,4(sp)
    9130:	00095500 	call	9550 <_lseek_r>
    9134:	1007883a 	mov	r3,r2
    9138:	00bfffc4 	movi	r2,-1
    913c:	18800926 	beq	r3,r2,9164 <__sseek+0x48>
    9140:	8080030b 	ldhu	r2,12(r16)
    9144:	80c01415 	stw	r3,80(r16)
    9148:	10840014 	ori	r2,r2,4096
    914c:	8080030d 	sth	r2,12(r16)
    9150:	1805883a 	mov	r2,r3
    9154:	dfc00117 	ldw	ra,4(sp)
    9158:	dc000017 	ldw	r16,0(sp)
    915c:	dec00204 	addi	sp,sp,8
    9160:	f800283a 	ret
    9164:	8080030b 	ldhu	r2,12(r16)
    9168:	10bbffcc 	andi	r2,r2,61439
    916c:	8080030d 	sth	r2,12(r16)
    9170:	1805883a 	mov	r2,r3
    9174:	dfc00117 	ldw	ra,4(sp)
    9178:	dc000017 	ldw	r16,0(sp)
    917c:	dec00204 	addi	sp,sp,8
    9180:	f800283a 	ret

00009184 <__swrite>:
    9184:	2880030b 	ldhu	r2,12(r5)
    9188:	defffb04 	addi	sp,sp,-20
    918c:	dcc00315 	stw	r19,12(sp)
    9190:	1080400c 	andi	r2,r2,256
    9194:	dc800215 	stw	r18,8(sp)
    9198:	dc400115 	stw	r17,4(sp)
    919c:	dc000015 	stw	r16,0(sp)
    91a0:	3027883a 	mov	r19,r6
    91a4:	3825883a 	mov	r18,r7
    91a8:	dfc00415 	stw	ra,16(sp)
    91ac:	2821883a 	mov	r16,r5
    91b0:	000d883a 	mov	r6,zero
    91b4:	01c00084 	movi	r7,2
    91b8:	2023883a 	mov	r17,r4
    91bc:	10000226 	beq	r2,zero,91c8 <__swrite+0x44>
    91c0:	2940038f 	ldh	r5,14(r5)
    91c4:	00095500 	call	9550 <_lseek_r>
    91c8:	8080030b 	ldhu	r2,12(r16)
    91cc:	8140038f 	ldh	r5,14(r16)
    91d0:	8809883a 	mov	r4,r17
    91d4:	10bbffcc 	andi	r2,r2,61439
    91d8:	980d883a 	mov	r6,r19
    91dc:	900f883a 	mov	r7,r18
    91e0:	8080030d 	sth	r2,12(r16)
    91e4:	dfc00417 	ldw	ra,16(sp)
    91e8:	dcc00317 	ldw	r19,12(sp)
    91ec:	dc800217 	ldw	r18,8(sp)
    91f0:	dc400117 	ldw	r17,4(sp)
    91f4:	dc000017 	ldw	r16,0(sp)
    91f8:	dec00504 	addi	sp,sp,20
    91fc:	00092601 	jmpi	9260 <_write_r>

00009200 <__sread>:
    9200:	defffe04 	addi	sp,sp,-8
    9204:	dc000015 	stw	r16,0(sp)
    9208:	2821883a 	mov	r16,r5
    920c:	2940038f 	ldh	r5,14(r5)
    9210:	dfc00115 	stw	ra,4(sp)
    9214:	00095c80 	call	95c8 <_read_r>
    9218:	1007883a 	mov	r3,r2
    921c:	10000816 	blt	r2,zero,9240 <__sread+0x40>
    9220:	80801417 	ldw	r2,80(r16)
    9224:	10c5883a 	add	r2,r2,r3
    9228:	80801415 	stw	r2,80(r16)
    922c:	1805883a 	mov	r2,r3
    9230:	dfc00117 	ldw	ra,4(sp)
    9234:	dc000017 	ldw	r16,0(sp)
    9238:	dec00204 	addi	sp,sp,8
    923c:	f800283a 	ret
    9240:	8080030b 	ldhu	r2,12(r16)
    9244:	10bbffcc 	andi	r2,r2,61439
    9248:	8080030d 	sth	r2,12(r16)
    924c:	1805883a 	mov	r2,r3
    9250:	dfc00117 	ldw	ra,4(sp)
    9254:	dc000017 	ldw	r16,0(sp)
    9258:	dec00204 	addi	sp,sp,8
    925c:	f800283a 	ret

00009260 <_write_r>:
    9260:	defffd04 	addi	sp,sp,-12
    9264:	dc000015 	stw	r16,0(sp)
    9268:	040000b4 	movhi	r16,2
    926c:	84378c04 	addi	r16,r16,-8656
    9270:	dc400115 	stw	r17,4(sp)
    9274:	80000015 	stw	zero,0(r16)
    9278:	2023883a 	mov	r17,r4
    927c:	2809883a 	mov	r4,r5
    9280:	300b883a 	mov	r5,r6
    9284:	380d883a 	mov	r6,r7
    9288:	dfc00215 	stw	ra,8(sp)
    928c:	00099400 	call	9940 <write>
    9290:	1007883a 	mov	r3,r2
    9294:	00bfffc4 	movi	r2,-1
    9298:	18800626 	beq	r3,r2,92b4 <_write_r+0x54>
    929c:	1805883a 	mov	r2,r3
    92a0:	dfc00217 	ldw	ra,8(sp)
    92a4:	dc400117 	ldw	r17,4(sp)
    92a8:	dc000017 	ldw	r16,0(sp)
    92ac:	dec00304 	addi	sp,sp,12
    92b0:	f800283a 	ret
    92b4:	80800017 	ldw	r2,0(r16)
    92b8:	103ff826 	beq	r2,zero,929c <_write_r+0x3c>
    92bc:	88800015 	stw	r2,0(r17)
    92c0:	1805883a 	mov	r2,r3
    92c4:	dfc00217 	ldw	ra,8(sp)
    92c8:	dc400117 	ldw	r17,4(sp)
    92cc:	dc000017 	ldw	r16,0(sp)
    92d0:	dec00304 	addi	sp,sp,12
    92d4:	f800283a 	ret

000092d8 <_close_r>:
    92d8:	defffd04 	addi	sp,sp,-12
    92dc:	dc000015 	stw	r16,0(sp)
    92e0:	040000b4 	movhi	r16,2
    92e4:	84378c04 	addi	r16,r16,-8656
    92e8:	dc400115 	stw	r17,4(sp)
    92ec:	80000015 	stw	zero,0(r16)
    92f0:	2023883a 	mov	r17,r4
    92f4:	2809883a 	mov	r4,r5
    92f8:	dfc00215 	stw	ra,8(sp)
    92fc:	0006cf00 	call	6cf0 <close>
    9300:	1007883a 	mov	r3,r2
    9304:	00bfffc4 	movi	r2,-1
    9308:	18800626 	beq	r3,r2,9324 <_close_r+0x4c>
    930c:	1805883a 	mov	r2,r3
    9310:	dfc00217 	ldw	ra,8(sp)
    9314:	dc400117 	ldw	r17,4(sp)
    9318:	dc000017 	ldw	r16,0(sp)
    931c:	dec00304 	addi	sp,sp,12
    9320:	f800283a 	ret
    9324:	80800017 	ldw	r2,0(r16)
    9328:	103ff826 	beq	r2,zero,930c <_close_r+0x34>
    932c:	88800015 	stw	r2,0(r17)
    9330:	1805883a 	mov	r2,r3
    9334:	dfc00217 	ldw	ra,8(sp)
    9338:	dc400117 	ldw	r17,4(sp)
    933c:	dc000017 	ldw	r16,0(sp)
    9340:	dec00304 	addi	sp,sp,12
    9344:	f800283a 	ret

00009348 <_fclose_r>:
    9348:	defffc04 	addi	sp,sp,-16
    934c:	dc400115 	stw	r17,4(sp)
    9350:	dc000015 	stw	r16,0(sp)
    9354:	dfc00315 	stw	ra,12(sp)
    9358:	dc800215 	stw	r18,8(sp)
    935c:	2821883a 	mov	r16,r5
    9360:	2023883a 	mov	r17,r4
    9364:	28002926 	beq	r5,zero,940c <_fclose_r+0xc4>
    9368:	0007fa80 	call	7fa8 <__sfp_lock_acquire>
    936c:	88000226 	beq	r17,zero,9378 <_fclose_r+0x30>
    9370:	88800e17 	ldw	r2,56(r17)
    9374:	10002d26 	beq	r2,zero,942c <_fclose_r+0xe4>
    9378:	8080030f 	ldh	r2,12(r16)
    937c:	10002226 	beq	r2,zero,9408 <_fclose_r+0xc0>
    9380:	8809883a 	mov	r4,r17
    9384:	800b883a 	mov	r5,r16
    9388:	0007d200 	call	7d20 <_fflush_r>
    938c:	1025883a 	mov	r18,r2
    9390:	80800b17 	ldw	r2,44(r16)
    9394:	10000426 	beq	r2,zero,93a8 <_fclose_r+0x60>
    9398:	81400717 	ldw	r5,28(r16)
    939c:	8809883a 	mov	r4,r17
    93a0:	103ee83a 	callr	r2
    93a4:	10002a16 	blt	r2,zero,9450 <_fclose_r+0x108>
    93a8:	8080030b 	ldhu	r2,12(r16)
    93ac:	1080200c 	andi	r2,r2,128
    93b0:	1000231e 	bne	r2,zero,9440 <_fclose_r+0xf8>
    93b4:	81400c17 	ldw	r5,48(r16)
    93b8:	28000526 	beq	r5,zero,93d0 <_fclose_r+0x88>
    93bc:	80801004 	addi	r2,r16,64
    93c0:	28800226 	beq	r5,r2,93cc <_fclose_r+0x84>
    93c4:	8809883a 	mov	r4,r17
    93c8:	000833c0 	call	833c <_free_r>
    93cc:	80000c15 	stw	zero,48(r16)
    93d0:	81401117 	ldw	r5,68(r16)
    93d4:	28000326 	beq	r5,zero,93e4 <_fclose_r+0x9c>
    93d8:	8809883a 	mov	r4,r17
    93dc:	000833c0 	call	833c <_free_r>
    93e0:	80001115 	stw	zero,68(r16)
    93e4:	8000030d 	sth	zero,12(r16)
    93e8:	0007fac0 	call	7fac <__sfp_lock_release>
    93ec:	9005883a 	mov	r2,r18
    93f0:	dfc00317 	ldw	ra,12(sp)
    93f4:	dc800217 	ldw	r18,8(sp)
    93f8:	dc400117 	ldw	r17,4(sp)
    93fc:	dc000017 	ldw	r16,0(sp)
    9400:	dec00404 	addi	sp,sp,16
    9404:	f800283a 	ret
    9408:	0007fac0 	call	7fac <__sfp_lock_release>
    940c:	0025883a 	mov	r18,zero
    9410:	9005883a 	mov	r2,r18
    9414:	dfc00317 	ldw	ra,12(sp)
    9418:	dc800217 	ldw	r18,8(sp)
    941c:	dc400117 	ldw	r17,4(sp)
    9420:	dc000017 	ldw	r16,0(sp)
    9424:	dec00404 	addi	sp,sp,16
    9428:	f800283a 	ret
    942c:	8809883a 	mov	r4,r17
    9430:	0007fb80 	call	7fb8 <__sinit>
    9434:	8080030f 	ldh	r2,12(r16)
    9438:	103fd11e 	bne	r2,zero,9380 <_fclose_r+0x38>
    943c:	003ff206 	br	9408 <_fclose_r+0xc0>
    9440:	81400417 	ldw	r5,16(r16)
    9444:	8809883a 	mov	r4,r17
    9448:	000833c0 	call	833c <_free_r>
    944c:	003fd906 	br	93b4 <_fclose_r+0x6c>
    9450:	04bfffc4 	movi	r18,-1
    9454:	003fd406 	br	93a8 <_fclose_r+0x60>

00009458 <fclose>:
    9458:	00800074 	movhi	r2,1
    945c:	108faf04 	addi	r2,r2,16060
    9460:	200b883a 	mov	r5,r4
    9464:	11000017 	ldw	r4,0(r2)
    9468:	00093481 	jmpi	9348 <_fclose_r>

0000946c <_fstat_r>:
    946c:	defffd04 	addi	sp,sp,-12
    9470:	dc000015 	stw	r16,0(sp)
    9474:	040000b4 	movhi	r16,2
    9478:	84378c04 	addi	r16,r16,-8656
    947c:	dc400115 	stw	r17,4(sp)
    9480:	80000015 	stw	zero,0(r16)
    9484:	2023883a 	mov	r17,r4
    9488:	2809883a 	mov	r4,r5
    948c:	300b883a 	mov	r5,r6
    9490:	dfc00215 	stw	ra,8(sp)
    9494:	00096540 	call	9654 <fstat>
    9498:	1007883a 	mov	r3,r2
    949c:	00bfffc4 	movi	r2,-1
    94a0:	18800626 	beq	r3,r2,94bc <_fstat_r+0x50>
    94a4:	1805883a 	mov	r2,r3
    94a8:	dfc00217 	ldw	ra,8(sp)
    94ac:	dc400117 	ldw	r17,4(sp)
    94b0:	dc000017 	ldw	r16,0(sp)
    94b4:	dec00304 	addi	sp,sp,12
    94b8:	f800283a 	ret
    94bc:	80800017 	ldw	r2,0(r16)
    94c0:	103ff826 	beq	r2,zero,94a4 <_fstat_r+0x38>
    94c4:	88800015 	stw	r2,0(r17)
    94c8:	1805883a 	mov	r2,r3
    94cc:	dfc00217 	ldw	ra,8(sp)
    94d0:	dc400117 	ldw	r17,4(sp)
    94d4:	dc000017 	ldw	r16,0(sp)
    94d8:	dec00304 	addi	sp,sp,12
    94dc:	f800283a 	ret

000094e0 <_isatty_r>:
    94e0:	defffd04 	addi	sp,sp,-12
    94e4:	dc000015 	stw	r16,0(sp)
    94e8:	040000b4 	movhi	r16,2
    94ec:	84378c04 	addi	r16,r16,-8656
    94f0:	dc400115 	stw	r17,4(sp)
    94f4:	80000015 	stw	zero,0(r16)
    94f8:	2023883a 	mov	r17,r4
    94fc:	2809883a 	mov	r4,r5
    9500:	dfc00215 	stw	ra,8(sp)
    9504:	00096d40 	call	96d4 <isatty>
    9508:	1007883a 	mov	r3,r2
    950c:	00bfffc4 	movi	r2,-1
    9510:	18800626 	beq	r3,r2,952c <_isatty_r+0x4c>
    9514:	1805883a 	mov	r2,r3
    9518:	dfc00217 	ldw	ra,8(sp)
    951c:	dc400117 	ldw	r17,4(sp)
    9520:	dc000017 	ldw	r16,0(sp)
    9524:	dec00304 	addi	sp,sp,12
    9528:	f800283a 	ret
    952c:	80800017 	ldw	r2,0(r16)
    9530:	103ff826 	beq	r2,zero,9514 <_isatty_r+0x34>
    9534:	88800015 	stw	r2,0(r17)
    9538:	1805883a 	mov	r2,r3
    953c:	dfc00217 	ldw	ra,8(sp)
    9540:	dc400117 	ldw	r17,4(sp)
    9544:	dc000017 	ldw	r16,0(sp)
    9548:	dec00304 	addi	sp,sp,12
    954c:	f800283a 	ret

00009550 <_lseek_r>:
    9550:	defffd04 	addi	sp,sp,-12
    9554:	dc000015 	stw	r16,0(sp)
    9558:	040000b4 	movhi	r16,2
    955c:	84378c04 	addi	r16,r16,-8656
    9560:	dc400115 	stw	r17,4(sp)
    9564:	80000015 	stw	zero,0(r16)
    9568:	2023883a 	mov	r17,r4
    956c:	2809883a 	mov	r4,r5
    9570:	300b883a 	mov	r5,r6
    9574:	380d883a 	mov	r6,r7
    9578:	dfc00215 	stw	ra,8(sp)
    957c:	00097580 	call	9758 <lseek>
    9580:	1007883a 	mov	r3,r2
    9584:	00bfffc4 	movi	r2,-1
    9588:	18800626 	beq	r3,r2,95a4 <_lseek_r+0x54>
    958c:	1805883a 	mov	r2,r3
    9590:	dfc00217 	ldw	ra,8(sp)
    9594:	dc400117 	ldw	r17,4(sp)
    9598:	dc000017 	ldw	r16,0(sp)
    959c:	dec00304 	addi	sp,sp,12
    95a0:	f800283a 	ret
    95a4:	80800017 	ldw	r2,0(r16)
    95a8:	103ff826 	beq	r2,zero,958c <_lseek_r+0x3c>
    95ac:	88800015 	stw	r2,0(r17)
    95b0:	1805883a 	mov	r2,r3
    95b4:	dfc00217 	ldw	ra,8(sp)
    95b8:	dc400117 	ldw	r17,4(sp)
    95bc:	dc000017 	ldw	r16,0(sp)
    95c0:	dec00304 	addi	sp,sp,12
    95c4:	f800283a 	ret

000095c8 <_read_r>:
    95c8:	defffd04 	addi	sp,sp,-12
    95cc:	dc000015 	stw	r16,0(sp)
    95d0:	040000b4 	movhi	r16,2
    95d4:	84378c04 	addi	r16,r16,-8656
    95d8:	dc400115 	stw	r17,4(sp)
    95dc:	80000015 	stw	zero,0(r16)
    95e0:	2023883a 	mov	r17,r4
    95e4:	2809883a 	mov	r4,r5
    95e8:	300b883a 	mov	r5,r6
    95ec:	380d883a 	mov	r6,r7
    95f0:	dfc00215 	stw	ra,8(sp)
    95f4:	00097f80 	call	97f8 <read>
    95f8:	1007883a 	mov	r3,r2
    95fc:	00bfffc4 	movi	r2,-1
    9600:	18800626 	beq	r3,r2,961c <_read_r+0x54>
    9604:	1805883a 	mov	r2,r3
    9608:	dfc00217 	ldw	ra,8(sp)
    960c:	dc400117 	ldw	r17,4(sp)
    9610:	dc000017 	ldw	r16,0(sp)
    9614:	dec00304 	addi	sp,sp,12
    9618:	f800283a 	ret
    961c:	80800017 	ldw	r2,0(r16)
    9620:	103ff826 	beq	r2,zero,9604 <_read_r+0x3c>
    9624:	88800015 	stw	r2,0(r17)
    9628:	1805883a 	mov	r2,r3
    962c:	dfc00217 	ldw	ra,8(sp)
    9630:	dc400117 	ldw	r17,4(sp)
    9634:	dc000017 	ldw	r16,0(sp)
    9638:	dec00304 	addi	sp,sp,12
    963c:	f800283a 	ret

00009640 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9640:	20000226 	beq	r4,zero,964c <_exit+0xc>
    ALT_SIM_FAIL();
    9644:	002af070 	cmpltui	zero,zero,43969
    9648:	00000106 	br	9650 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    964c:	002af0b0 	cmpltui	zero,zero,43970
    9650:	003fff06 	br	9650 <_exit+0x10>

00009654 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9654:	deffff04 	addi	sp,sp,-4
    9658:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    965c:	20000e16 	blt	r4,zero,9698 <fstat+0x44>
    9660:	20c00324 	muli	r3,r4,12
    9664:	00800074 	movhi	r2,1
    9668:	108d4404 	addi	r2,r2,13584
    966c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9670:	20000926 	beq	r4,zero,9698 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9674:	20800017 	ldw	r2,0(r4)
    9678:	10800817 	ldw	r2,32(r2)
    967c:	10000226 	beq	r2,zero,9688 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    9680:	103ee83a 	callr	r2
    9684:	00001006 	br	96c8 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9688:	00880004 	movi	r2,8192
    968c:	28800115 	stw	r2,4(r5)
    9690:	0005883a 	mov	r2,zero
    9694:	00000c06 	br	96c8 <fstat+0x74>
    9698:	00800074 	movhi	r2,1
    969c:	108fab04 	addi	r2,r2,16044
    96a0:	10800017 	ldw	r2,0(r2)
    96a4:	1000031e 	bne	r2,zero,96b4 <fstat+0x60>
    96a8:	00c000b4 	movhi	r3,2
    96ac:	18f78c04 	addi	r3,r3,-8656
    96b0:	00000206 	br	96bc <fstat+0x68>
    96b4:	103ee83a 	callr	r2
    96b8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    96bc:	00801444 	movi	r2,81
    96c0:	18800015 	stw	r2,0(r3)
    96c4:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    96c8:	dfc00017 	ldw	ra,0(sp)
    96cc:	dec00104 	addi	sp,sp,4
    96d0:	f800283a 	ret

000096d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    96d4:	defff004 	addi	sp,sp,-64
    96d8:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    96dc:	20000f16 	blt	r4,zero,971c <isatty+0x48>
    96e0:	20c00324 	muli	r3,r4,12
    96e4:	00800074 	movhi	r2,1
    96e8:	108d4404 	addi	r2,r2,13584
    96ec:	1885883a 	add	r2,r3,r2
  
  if (fd)
    96f0:	10000a26 	beq	r2,zero,971c <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    96f4:	10800017 	ldw	r2,0(r2)
    96f8:	10800817 	ldw	r2,32(r2)
    96fc:	1000021e 	bne	r2,zero,9708 <isatty+0x34>
    9700:	00800044 	movi	r2,1
    9704:	00001106 	br	974c <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9708:	d80b883a 	mov	r5,sp
    970c:	00096540 	call	9654 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9710:	d8800117 	ldw	r2,4(sp)
    9714:	10880020 	cmpeqi	r2,r2,8192
    9718:	00000c06 	br	974c <isatty+0x78>
    971c:	00800074 	movhi	r2,1
    9720:	108fab04 	addi	r2,r2,16044
    9724:	10800017 	ldw	r2,0(r2)
    9728:	1000031e 	bne	r2,zero,9738 <isatty+0x64>
    972c:	00c000b4 	movhi	r3,2
    9730:	18f78c04 	addi	r3,r3,-8656
    9734:	00000206 	br	9740 <isatty+0x6c>
    9738:	103ee83a 	callr	r2
    973c:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9740:	00801444 	movi	r2,81
    9744:	18800015 	stw	r2,0(r3)
    9748:	0005883a 	mov	r2,zero
    return 0;
  }
}
    974c:	dfc00f17 	ldw	ra,60(sp)
    9750:	dec01004 	addi	sp,sp,64
    9754:	f800283a 	ret

00009758 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9758:	defffe04 	addi	sp,sp,-8
    975c:	dfc00115 	stw	ra,4(sp)
    9760:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9764:	2000020e 	bge	r4,zero,9770 <lseek+0x18>
    9768:	043febc4 	movi	r16,-81
    976c:	00000d06 	br	97a4 <lseek+0x4c>
    9770:	20c00324 	muli	r3,r4,12
    9774:	00800074 	movhi	r2,1
    9778:	108d4404 	addi	r2,r2,13584
    977c:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    9780:	20001526 	beq	r4,zero,97d8 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9784:	20800017 	ldw	r2,0(r4)
    9788:	10800717 	ldw	r2,28(r2)
    978c:	1000021e 	bne	r2,zero,9798 <lseek+0x40>
    9790:	043fde84 	movi	r16,-134
    9794:	00000306 	br	97a4 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9798:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    979c:	1000100e 	bge	r2,zero,97e0 <lseek+0x88>
    97a0:	1021883a 	mov	r16,r2
    97a4:	00800074 	movhi	r2,1
    97a8:	108fab04 	addi	r2,r2,16044
    97ac:	10800017 	ldw	r2,0(r2)
    97b0:	1000031e 	bne	r2,zero,97c0 <lseek+0x68>
    97b4:	00c000b4 	movhi	r3,2
    97b8:	18f78c04 	addi	r3,r3,-8656
    97bc:	00000206 	br	97c8 <lseek+0x70>
    97c0:	103ee83a 	callr	r2
    97c4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    97c8:	0405c83a 	sub	r2,zero,r16
    97cc:	18800015 	stw	r2,0(r3)
    97d0:	00bfffc4 	movi	r2,-1
    97d4:	00000206 	br	97e0 <lseek+0x88>
    97d8:	043febc4 	movi	r16,-81
    97dc:	003ff106 	br	97a4 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    97e0:	dfc00117 	ldw	ra,4(sp)
    97e4:	dc000017 	ldw	r16,0(sp)
    97e8:	dec00204 	addi	sp,sp,8
    97ec:	f800283a 	ret

000097f0 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    97f0:	f800283a 	ret

000097f4 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    97f4:	f800283a 	ret

000097f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    97f8:	defffe04 	addi	sp,sp,-8
    97fc:	dfc00115 	stw	ra,4(sp)
    9800:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9804:	20002916 	blt	r4,zero,98ac <read+0xb4>
    9808:	20c00324 	muli	r3,r4,12
    980c:	00800074 	movhi	r2,1
    9810:	108d4404 	addi	r2,r2,13584
    9814:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9818:	20002426 	beq	r4,zero,98ac <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    981c:	20800217 	ldw	r2,8(r4)
    9820:	108000cc 	andi	r2,r2,3
    9824:	00c00044 	movi	r3,1
    9828:	10c01326 	beq	r2,r3,9878 <read+0x80>
    982c:	20800017 	ldw	r2,0(r4)
    9830:	10800517 	ldw	r2,20(r2)
    9834:	10001026 	beq	r2,zero,9878 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    9838:	103ee83a 	callr	r2
    983c:	1021883a 	mov	r16,r2
    9840:	1000260e 	bge	r2,zero,98dc <read+0xe4>
    9844:	00800074 	movhi	r2,1
    9848:	108fab04 	addi	r2,r2,16044
    984c:	10800017 	ldw	r2,0(r2)
    9850:	1000031e 	bne	r2,zero,9860 <read+0x68>
    9854:	00c000b4 	movhi	r3,2
    9858:	18f78c04 	addi	r3,r3,-8656
    985c:	00000206 	br	9868 <read+0x70>
    9860:	103ee83a 	callr	r2
    9864:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    9868:	0405c83a 	sub	r2,zero,r16
    986c:	18800015 	stw	r2,0(r3)
    9870:	043fffc4 	movi	r16,-1
    9874:	00001906 	br	98dc <read+0xe4>
    9878:	00800074 	movhi	r2,1
    987c:	108fab04 	addi	r2,r2,16044
    9880:	10800017 	ldw	r2,0(r2)
    9884:	1000031e 	bne	r2,zero,9894 <read+0x9c>
    9888:	00c000b4 	movhi	r3,2
    988c:	18f78c04 	addi	r3,r3,-8656
    9890:	00000206 	br	989c <read+0xa4>
    9894:	103ee83a 	callr	r2
    9898:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    989c:	00800344 	movi	r2,13
    98a0:	18800015 	stw	r2,0(r3)
    98a4:	043fffc4 	movi	r16,-1
    98a8:	00000c06 	br	98dc <read+0xe4>
    98ac:	00800074 	movhi	r2,1
    98b0:	108fab04 	addi	r2,r2,16044
    98b4:	10800017 	ldw	r2,0(r2)
    98b8:	1000031e 	bne	r2,zero,98c8 <read+0xd0>
    98bc:	00c000b4 	movhi	r3,2
    98c0:	18f78c04 	addi	r3,r3,-8656
    98c4:	00000206 	br	98d0 <read+0xd8>
    98c8:	103ee83a 	callr	r2
    98cc:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    98d0:	00801444 	movi	r2,81
    98d4:	18800015 	stw	r2,0(r3)
    98d8:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    98dc:	8005883a 	mov	r2,r16
    98e0:	dfc00117 	ldw	ra,4(sp)
    98e4:	dc000017 	ldw	r16,0(sp)
    98e8:	dec00204 	addi	sp,sp,8
    98ec:	f800283a 	ret

000098f0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98f4:	00bfff84 	movi	r2,-2
    98f8:	2884703a 	and	r2,r5,r2
    98fc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    9900:	d0a00d17 	ldw	r2,-32716(gp)
    9904:	108000c4 	addi	r2,r2,3
    9908:	00ffff04 	movi	r3,-4
    990c:	10c6703a 	and	r3,r2,r3
    9910:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    9914:	1909883a 	add	r4,r3,r4
    9918:	00802034 	movhi	r2,128
    991c:	10800004 	addi	r2,r2,0
    9920:	1100032e 	bgeu	r2,r4,9930 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9924:	2801703a 	wrctl	status,r5
    9928:	00ffffc4 	movi	r3,-1
    992c:	00000206 	br	9938 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    9930:	d1200d15 	stw	r4,-32716(gp)
    9934:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    9938:	1805883a 	mov	r2,r3
    993c:	f800283a 	ret

00009940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9940:	defffe04 	addi	sp,sp,-8
    9944:	dfc00115 	stw	ra,4(sp)
    9948:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    994c:	20002816 	blt	r4,zero,99f0 <write+0xb0>
    9950:	20c00324 	muli	r3,r4,12
    9954:	00800074 	movhi	r2,1
    9958:	108d4404 	addi	r2,r2,13584
    995c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    9960:	20002326 	beq	r4,zero,99f0 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9964:	20800217 	ldw	r2,8(r4)
    9968:	108000cc 	andi	r2,r2,3
    996c:	10001326 	beq	r2,zero,99bc <write+0x7c>
    9970:	20800017 	ldw	r2,0(r4)
    9974:	10800617 	ldw	r2,24(r2)
    9978:	10001026 	beq	r2,zero,99bc <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    997c:	103ee83a 	callr	r2
    9980:	1021883a 	mov	r16,r2
    9984:	1000260e 	bge	r2,zero,9a20 <write+0xe0>
    9988:	00800074 	movhi	r2,1
    998c:	108fab04 	addi	r2,r2,16044
    9990:	10800017 	ldw	r2,0(r2)
    9994:	1000031e 	bne	r2,zero,99a4 <write+0x64>
    9998:	00c000b4 	movhi	r3,2
    999c:	18f78c04 	addi	r3,r3,-8656
    99a0:	00000206 	br	99ac <write+0x6c>
    99a4:	103ee83a 	callr	r2
    99a8:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    99ac:	0405c83a 	sub	r2,zero,r16
    99b0:	18800015 	stw	r2,0(r3)
    99b4:	043fffc4 	movi	r16,-1
    99b8:	00001906 	br	9a20 <write+0xe0>
    99bc:	00800074 	movhi	r2,1
    99c0:	108fab04 	addi	r2,r2,16044
    99c4:	10800017 	ldw	r2,0(r2)
    99c8:	1000031e 	bne	r2,zero,99d8 <write+0x98>
    99cc:	00c000b4 	movhi	r3,2
    99d0:	18f78c04 	addi	r3,r3,-8656
    99d4:	00000206 	br	99e0 <write+0xa0>
    99d8:	103ee83a 	callr	r2
    99dc:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    99e0:	00800344 	movi	r2,13
    99e4:	18800015 	stw	r2,0(r3)
    99e8:	043fffc4 	movi	r16,-1
    99ec:	00000c06 	br	9a20 <write+0xe0>
    99f0:	00800074 	movhi	r2,1
    99f4:	108fab04 	addi	r2,r2,16044
    99f8:	10800017 	ldw	r2,0(r2)
    99fc:	1000031e 	bne	r2,zero,9a0c <write+0xcc>
    9a00:	00c000b4 	movhi	r3,2
    9a04:	18f78c04 	addi	r3,r3,-8656
    9a08:	00000206 	br	9a14 <write+0xd4>
    9a0c:	103ee83a 	callr	r2
    9a10:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9a14:	00801444 	movi	r2,81
    9a18:	18800015 	stw	r2,0(r3)
    9a1c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    9a20:	8005883a 	mov	r2,r16
    9a24:	dfc00117 	ldw	ra,4(sp)
    9a28:	dc000017 	ldw	r16,0(sp)
    9a2c:	dec00204 	addi	sp,sp,8
    9a30:	f800283a 	ret
    9a34:	00007b6c 	andhi	zero,zero,493
