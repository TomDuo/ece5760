
Z:/ece5760/lab2/lander/media_graphics_HAL.elf:     file format elf32-littlenios2
Z:/ece5760/lab2/lander/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005bec memsz 0x00005bec flags r-x
    LOAD off    0x00006c0c vaddr 0x00005c0c paddr 0x00007940 align 2**12
         filesz 0x00001d34 memsz 0x00001d34 flags rw-
    LOAD off    0x00009674 vaddr 0x00009674 paddr 0x00009674 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005740  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000364  000058a8  000058a8  000068a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d34  00005c0c  00007940  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00009674  00009674  00009674  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000998  00000000  00000000  00008968  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014da  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018fa6  00000000  00000000  0000a7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005e2a  00000000  00000000  00023780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d7af  00000000  00000000  000295aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012c0  00000000  00000000  00036d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b81  00000000  00000000  0003801c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005832  00000000  00000000  0003ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000403d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00043584  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00043587  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0004358a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0004358b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0004358f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00043593  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00043597  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000435a0  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000435a9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000435b2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000058a8 l    d  .rodata	00000000 .rodata
00005c0c l    d  .rwdata	00000000 .rwdata
00009674 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005c0c l     O .rwdata	00001060 JTAG_UART
00006c6c l     O .rwdata	00000030 AV_Config
00006c9c l     O .rwdata	00000030 Audio
00006ccc l     O .rwdata	0000002c Char_LCD_16x2
00006cf8 l     O .rwdata	0000002c Expansion_JP1
00006d24 l     O .rwdata	0000002c Expansion_JP2
00006d50 l     O .rwdata	0000002c Green_LEDs
00006d7c l     O .rwdata	0000002c HEX3_HEX0
00006da8 l     O .rwdata	0000002c HEX7_HEX4
00006dd4 l     O .rwdata	0000002c Pushbuttons
00006e00 l     O .rwdata	0000002c Red_LEDs
00006e2c l     O .rwdata	0000002c Slider_Switches
00006e58 l     O .rwdata	00000038 PS2_Port
00006e90 l     O .rwdata	0000002c Serial_Port
00006ebc l     O .rwdata	00000048 VGA_Char_Buffer
00006f04 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000010c4 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00001190 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001660 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002c40 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002d48 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00007100 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000039dc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003dc0 l     F .text	00000058 std
00003ecc l     F .text	00000008 __fp_lock
00003ed4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000793c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005350 g     F .text	00000070 _isatty_r
00000ad4 g     F .text	00000050 alt_main
000022c4 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
000096c4 g     O .bss	00000100 alt_irq
00001cfc g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000053c0 g     F .text	00000078 _lseek_r
00007940 g       *ABS*	00000000 __flash_rwdata_start
00001760 g     F .text	00000010 alt_up_character_lcd_send_cmd
000097c4 g       *ABS*	00000000 __alt_heap_start
000001a4 g     F .text	000000dc draw_landscape
00004f8c g     F .text	00000068 __sseek
00003e28 g     F .text	000000a4 __sinit
00003754 g     F .text	00000130 __swbuf_r
00001f04 g     F .text	00000088 alt_up_char_buffer_string
000019bc g     F .text	0000000c read_CE_bit
00003f28 g     F .text	00000068 __sfmoreglue
00005664 g     F .text	00000004 __malloc_unlock
00001a8c g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001da8 g     F .text	00000080 alt_up_rs232_read_fd
00001f8c g     F .text	00000058 alt_up_char_buffer_draw
00003f18 g     F .text	00000010 _cleanup
0000063c g     F .text	00000094 __fixsfsi
000029b8 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
0000169c g     F .text	0000001c get_DDRAM_addr
00002aac g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000052dc g     F .text	00000074 _fstat_r
0000968c g     O .bss	00000004 errno
00009678 g     O .bss	00000004 alt_argv
0000f908 g       *ABS*	00000000 _gp
00002a84 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00006f80 g     O .rwdata	00000180 alt_fd_list
00002cb8 g     F .text	00000070 alt_find_dev
00003398 g     F .text	000000a0 memcpy
00001730 g     F .text	00000020 alt_up_character_lcd_write_fd
00001fe4 g     F .text	00000028 alt_up_char_buffer_clear
00003f0c g     F .text	0000000c _cleanup_r
00002dac g     F .text	00000098 alt_io_redirect
00001d5c g     F .text	0000004c alt_up_rs232_read_data
00003180 g     F .text	00000008 altera_nios2_irq_init
00002a74 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00001338 g     F .text	00000168 altera_avalon_jtag_uart_read
00005544 g     F .text	00000084 isatty
00002458 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
000032b0 g     F .text	0000003c alt_icache_flush
00009690 g     O .bss	00000004 __malloc_top_pad
00004f14 g     F .text	00000070 _sbrk_r
0000207c g     F .text	0000005c helper_plot_pixel
00005438 g     F .text	00000078 _read_r
00007918 g     O .rwdata	00000004 alt_max_fd
00001d30 g     F .text	0000000c alt_up_rs232_check_parity
000051b8 g     F .text	00000110 _fclose_r
000019c8 g     F .text	00000008 read_num_bytes_available
00003d8c g     F .text	00000034 fflush
00009694 g     O .bss	00000004 __malloc_max_sbrked_mem
00002e44 g     F .text	000000bc alt_irq_register
000019a8 g     F .text	0000000c read_RI_bit
000028e0 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
000055c8 g     F .text	00000098 lseek
00007930 g     O .rwdata	00000004 _global_impure_ptr
000097c4 g       *ABS*	00000000 __bss_end
0000269c g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
000030d4 g     F .text	000000ac alt_tick
000019dc g     F .text	00000008 read_data_byte
00003ef4 g     F .text	00000018 __fp_lock_all
000030a0 g     F .text	00000034 alt_alarm_stop
000019b4 g     F .text	00000008 read_RE_bit
00009680 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006f58 g     O .rwdata	00000028 alt_dev_null
000008b0 g     F .text	000000c8 __unpack_f
00001770 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00001b90 g     F .text	00000040 alt_up_ps2_write_data_byte
00002c3c g     F .text	00000004 alt_dcache_flush_all
000025cc g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00007940 g       *ABS*	00000000 __ram_rwdata_end
00007910 g     O .rwdata	00000008 alt_dev_list
000057b0 g     F .text	000000f4 write
0000353c g     F .text	000000e8 _putc_r
000020d8 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
00005c0c g       *ABS*	00000000 __ram_rodata_end
000054c4 g     F .text	00000080 fstat
00001e50 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000097c4 g       *ABS*	00000000 end
00001bd0 g     F .text	00000070 alt_up_ps2_write_fd
00000750 g     F .text	00000160 __pack_f
0000202c g     F .text	00000050 alt_up_char_buffer_init
00001118 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000161c g     F .text	00000044 alt_avalon_timer_sc_init
000006d0 g     F .text	00000080 __clzsi2
000014a0 g     F .text	0000017c altera_avalon_jtag_uart_write
00003e18 g     F .text	00000004 __sfp_lock_acquire
00001704 g     F .text	0000002c alt_up_character_lcd_write
000041ac g     F .text	00000314 _free_r
00000b24 g     F .text	000001dc alt_printf
000039e0 g     F .text	000001b0 __call_exitprocs
00007938 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00009684 g     O .bss	00000004 _alt_tick_rate
00009688 g     O .bss	00000004 _alt_nticks
00005668 g     F .text	000000f8 read
00000d48 g     F .text	000002ac alt_sys_init
00001814 g     F .text	00000090 alt_up_character_lcd_shift_display
000005a4 g     F .text	00000098 __floatsisf
00001a04 g     F .text	00000030 alt_up_ps2_clear_fifo
00001e28 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000017a8 g     F .text	0000006c alt_up_character_lcd_erase_pos
0000108c g     F .text	00000038 altera_avalon_jtag_uart_close
00005c0c g       *ABS*	00000000 __ram_rwdata_start
000058a8 g       *ABS*	00000000 __ram_rodata_start
0000969c g     O .bss	00000028 __malloc_current_mallinfo
00001064 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00003244 g     F .text	0000006c alt_get_fd
00005148 g     F .text	00000070 _close_r
00003324 g     F .text	00000074 memcmp
00001014 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000097c4 g       *ABS*	00000000 __alt_stack_base
00000ff4 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000038a0 g     F .text	0000013c __swsetup_r
00003f90 g     F .text	000000f0 __sfp
00007500 g     O .rwdata	00000408 __malloc_av_
00003e24 g     F .text	00000004 __sinit_lock_release
00005070 g     F .text	00000060 __sread
00001ec0 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00003188 g     F .text	000000bc alt_find_file
00002c48 g     F .text	00000070 alt_dev_llist_insert
00005660 g     F .text	00000004 __malloc_lock
00005760 g     F .text	00000050 sbrk
00003b90 g     F .text	000001fc _fflush_r
00009674 g       *ABS*	00000000 __bss_start
00000978 g     F .text	00000098 memset
00000280 g     F .text	00000324 main
0000967c g     O .bss	00000004 alt_envp
00009698 g     O .bss	00000004 __malloc_max_total_mem
00002994 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0000200c g     F .text	00000020 alt_up_char_buffer_open_dev
0000103c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00003884 g     F .text	0000001c __swbuf
000018a4 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00004f84 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000052c8 g     F .text	00000014 fclose
00001a34 g     F .text	00000058 alt_up_ps2_read_data_byte
000047d4 g     F .text	00000740 _malloc_r
0000791c g     O .rwdata	00000004 alt_errno
00004588 g     F .text	000000b8 _fwalk
000019e4 g     F .text	00000020 alt_up_ps2_open_dev
00003438 g     F .text	00000104 putc
00001988 g     F .text	00000020 alt_up_character_lcd_open_dev
00004080 g     F .text	0000012c _malloc_trim_r
00001d18 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00001750 g     F .text	00000010 alt_up_character_lcd_init
00003624 g     F .text	000000bc strcmp
000058a8 g       *ABS*	00000000 __flash_rodata_start
00001d3c g     F .text	00000020 alt_up_rs232_open_dev
00000d28 g     F .text	00000020 alt_irq_init
0000307c g     F .text	00000024 alt_release_fd
000019d0 g     F .text	0000000c read_data_valid
0000178c g     F .text	0000001c alt_up_character_lcd_cursor_off
000059d4 g     O .rodata	00000100 __clz_tab
00001c40 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
000050d0 g     F .text	00000078 _write_r
0000792c g     O .rwdata	00000004 _impure_ptr
00009674 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003edc g     F .text	00000018 __fp_unlock_all
00007908 g     O .rwdata	00000008 alt_fs_list
00001edc g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001e38 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007940 g       *ABS*	00000000 _edata
000097c4 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000012c4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004ff4 g     F .text	0000007c __swrite
00007934 g     O .rwdata	00000004 __malloc_trim_threshold
000032ec g     F .text	00000038 exit
000044c0 g     F .text	000000c8 _fwalk_reent
00001c74 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003e1c g     F .text	00000004 __sfp_lock_release
000016b8 g     F .text	0000004c alt_up_character_lcd_string
000054b0 g     F .text	00000014 _exit
00002acc g     F .text	00000094 alt_alarm_start
00004640 g     F .text	00000194 __smakebuf_r
00001b34 g     F .text	0000005c alt_up_ps2_wait_for_ack
000036e0 g     F .text	00000074 strlen
00002f00 g     F .text	0000017c open
00000d00 g     F .text	00000028 alt_putchar
00002d28 g     F .text	00000020 alt_icache_flush_all
00001934 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00007920 g     O .rwdata	00000004 alt_priority_mask
00001b0c g     F .text	00000028 alt_up_ps2_read_fd
00007924 g     O .rwdata	00000008 alt_alarm_list
00001ef4 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00002b60 g     F .text	000000dc close
00000a10 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
00003e20 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8425b104 	addi	r16,r16,-26940
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6be4214 	ori	gp,gp,63752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a59d14 	ori	r2,r2,38516

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e5f114 	ori	r3,r3,38852

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	0000a100 	call	a10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	0000ad40 	call	ad4 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <draw_landscape>:
	}
}

/* draws a landscape */
void draw_landscape(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1a4:	defff604 	addi	sp,sp,-40
     1a8:	dfc00915 	stw	ra,36(sp)
     1ac:	dd400815 	stw	r21,32(sp)
     1b0:	dd000715 	stw	r20,28(sp)
     1b4:	dcc00615 	stw	r19,24(sp)
     1b8:	dc800515 	stw	r18,20(sp)
     1bc:	dc400415 	stw	r17,16(sp)
     1c0:	dc000315 	stw	r16,12(sp)
     1c4:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 4, 430, 150, 430, 0xffff, 0);
     1c8:	04006b84 	movi	r16,430
     1cc:	04c02584 	movi	r19,150
     1d0:	dc000015 	stw	r16,0(sp)
     1d4:	047fffd4 	movui	r17,65535
     1d8:	dc400115 	stw	r17,4(sp)
     1dc:	d8000215 	stw	zero,8(sp)
     1e0:	01400104 	movi	r5,4
     1e4:	800d883a 	mov	r6,r16
     1e8:	980f883a 	mov	r7,r19
     1ec:	00020d80 	call	20d8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 150, 430, 300, 400, 0xffff, 0);
     1f0:	05004b04 	movi	r20,300
     1f4:	05406404 	movi	r21,400
     1f8:	dd400015 	stw	r21,0(sp)
     1fc:	dc400115 	stw	r17,4(sp)
     200:	d8000215 	stw	zero,8(sp)
     204:	9009883a 	mov	r4,r18
     208:	980b883a 	mov	r5,r19
     20c:	800d883a 	mov	r6,r16
     210:	a00f883a 	mov	r7,r20
     214:	00020d80 	call	20d8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 300, 400, 480, 430, 0xffff, 0);
     218:	04c07804 	movi	r19,480
     21c:	dc000015 	stw	r16,0(sp)
     220:	dc400115 	stw	r17,4(sp)
     224:	d8000215 	stw	zero,8(sp)
     228:	9009883a 	mov	r4,r18
     22c:	a00b883a 	mov	r5,r20
     230:	a80d883a 	mov	r6,r21
     234:	980f883a 	mov	r7,r19
     238:	00020d80 	call	20d8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 480, 430, 636, 430, 0xffff, 0);
     23c:	dc000015 	stw	r16,0(sp)
     240:	dc400115 	stw	r17,4(sp)
     244:	d8000215 	stw	zero,8(sp)
     248:	9009883a 	mov	r4,r18
     24c:	980b883a 	mov	r5,r19
     250:	800d883a 	mov	r6,r16
     254:	01c09f04 	movi	r7,636
     258:	00020d80 	call	20d8 <alt_up_pixel_buffer_dma_draw_line>

}
     25c:	dfc00917 	ldw	ra,36(sp)
     260:	dd400817 	ldw	r21,32(sp)
     264:	dd000717 	ldw	r20,28(sp)
     268:	dcc00617 	ldw	r19,24(sp)
     26c:	dc800517 	ldw	r18,20(sp)
     270:	dc400417 	ldw	r17,16(sp)
     274:	dc000317 	ldw	r16,12(sp)
     278:	dec00a04 	addi	sp,sp,40
     27c:	f800283a 	ret

00000280 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     280:	deffdf04 	addi	sp,sp,-132
     284:	dfc02015 	stw	ra,128(sp)
     288:	df001f15 	stw	fp,124(sp)
     28c:	ddc01e15 	stw	r23,120(sp)
     290:	dd801d15 	stw	r22,116(sp)
     294:	dd401c15 	stw	r21,112(sp)
     298:	dd001b15 	stw	r20,108(sp)
     29c:	dcc01a15 	stw	r19,104(sp)
     2a0:	dc801915 	stw	r18,100(sp)
     2a4:	dc401815 	stw	r17,96(sp)
     2a8:	dc001715 	stw	r16,92(sp)
						{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
*/
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "ECE5760\0";
     2ac:	00c00034 	movhi	r3,0
     2b0:	18d66104 	addi	r3,r3,22916
     2b4:	18800017 	ldw	r2,0(r3)
     2b8:	d8800315 	stw	r2,12(sp)
     2bc:	18800117 	ldw	r2,4(r3)
     2c0:	d8800415 	stw	r2,16(sp)
     2c4:	18800203 	ldbu	r2,8(r3)
     2c8:	d8800505 	stb	r2,20(sp)
     2cc:	d9000544 	addi	r4,sp,21
     2d0:	000b883a 	mov	r5,zero
     2d4:	018007c4 	movi	r6,31
     2d8:	00009780 	call	978 <memset>
	char text_bottom_row[40] = "Bruce is cool.\0";
     2dc:	00c00034 	movhi	r3,0
     2e0:	18d66b04 	addi	r3,r3,22956
     2e4:	18800017 	ldw	r2,0(r3)
     2e8:	d8800d15 	stw	r2,52(sp)
     2ec:	18800117 	ldw	r2,4(r3)
     2f0:	d8800e15 	stw	r2,56(sp)
     2f4:	18800217 	ldw	r2,8(r3)
     2f8:	d8800f15 	stw	r2,60(sp)
     2fc:	18800317 	ldw	r2,12(r3)
     300:	d8801015 	stw	r2,64(sp)
     304:	d8001115 	stw	zero,68(sp)
     308:	d8001215 	stw	zero,72(sp)
     30c:	d8001315 	stw	zero,76(sp)
     310:	d8001415 	stw	zero,80(sp)
     314:	d8001515 	stw	zero,84(sp)
     318:	d8001615 	stw	zero,88(sp)

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     31c:	01000034 	movhi	r4,0
     320:	21162a04 	addi	r4,r4,22696
     324:	0002aac0 	call	2aac <alt_up_pixel_buffer_dma_open_dev>
     328:	1025883a 	mov	r18,r2
	if ( pixel_buffer_dev == NULL)
     32c:	1000041e 	bne	r2,zero,340 <main+0xc0>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     330:	01000034 	movhi	r4,0
     334:	21163004 	addi	r4,r4,22720
     338:	0000b240 	call	b24 <alt_printf>
     33c:	00000306 	br	34c <main+0xcc>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     340:	01000034 	movhi	r4,0
     344:	21163c04 	addi	r4,r4,22768
     348:	0000b240 	call	b24 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     34c:	9009883a 	mov	r4,r18
     350:	000b883a 	mov	r5,zero
     354:	00028e00 	call	28e0 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     358:	01000034 	movhi	r4,0
     35c:	21164704 	addi	r4,r4,22812
     360:	000200c0 	call	200c <alt_up_char_buffer_open_dev>
     364:	1023883a 	mov	r17,r2
	if (char_buffer_dev == NULL)
     368:	10007e26 	beq	r2,zero,564 <main+0x2e4>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     36c:	01000034 	movhi	r4,0
     370:	21165904 	addi	r4,r4,22884
     374:	0000b240 	call	b24 <alt_printf>
	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
     378:	040008c4 	movi	r16,35
     37c:	8809883a 	mov	r4,r17
     380:	d9400304 	addi	r5,sp,12
     384:	800d883a 	mov	r6,r16
     388:	01c00744 	movi	r7,29
     38c:	0001f040 	call	1f04 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
     390:	8809883a 	mov	r4,r17
     394:	d9400d04 	addi	r5,sp,52
     398:	800d883a 	mov	r6,r16
     39c:	01c00784 	movi	r7,30
     3a0:	0001f040 	call	1f04 <alt_up_char_buffer_string>

	/* now draw a background box for the text */
	

	/* now draw the landscape */
	draw_landscape (pixel_buffer_dev);
     3a4:	9009883a 	mov	r4,r18
     3a8:	00001a40 	call	1a4 <draw_landscape>

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
	x2 = 50; y2 = 50;
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0xff, 0);
     3ac:	04000504 	movi	r16,20
     3b0:	04400c84 	movi	r17,50
     3b4:	dc400015 	stw	r17,0(sp)
     3b8:	00803fc4 	movi	r2,255
     3bc:	d8800115 	stw	r2,4(sp)
     3c0:	d8000215 	stw	zero,8(sp)
     3c4:	9009883a 	mov	r4,r18
     3c8:	800b883a 	mov	r5,r16
     3cc:	800d883a 	mov	r6,r16
     3d0:	880f883a 	mov	r7,r17
     3d4:	000269c0 	call	269c <alt_up_pixel_buffer_dma_draw_box>
     3d8:	8027883a 	mov	r19,r16
     3dc:	8029883a 	mov	r20,r16
     3e0:	882f883a 	mov	r23,r17
     3e4:	882d883a 	mov	r22,r17
     3e8:	0039883a 	mov	fp,zero
     3ec:	05400044 	movi	r21,1
     3f0:	0021883a 	mov	r16,zero
	while(1)
	{
	
	int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
	int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
	*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
     3f4:	00840034 	movhi	r2,4096
     3f8:	10801404 	addi	r2,r2,80
     3fc:	10c00017 	ldw	r3,0(r2)
     400:	10bff004 	addi	r2,r2,-64
     404:	10c00015 	stw	r3,0(r2)

	
	
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     408:	9009883a 	mov	r4,r18
     40c:	0002a740 	call	2a74 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     410:	103ff81e 	bne	r2,zero,3f4 <main+0x174>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     414:	04400044 	movi	r17,1
     418:	8c21c83a 	sub	r16,r17,r16

			if (delay == 0)
     41c:	80004e1e 	bne	r16,zero,558 <main+0x2d8>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     420:	dd800015 	stw	r22,0(sp)
     424:	d8000115 	stw	zero,4(sp)
     428:	d8000215 	stw	zero,8(sp)
     42c:	9009883a 	mov	r4,r18
     430:	a00b883a 	mov	r5,r20
     434:	980d883a 	mov	r6,r19
     438:	b80f883a 	mov	r7,r23
     43c:	000269c0 	call	269c <alt_up_pixel_buffer_dma_draw_box>
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);

				//Right Thruster
				if ((*pushbuttons) & 0x02)
     440:	00c40034 	movhi	r3,4096
     444:	18c01404 	addi	r3,r3,80
     448:	18800017 	ldw	r2,0(r3)
     44c:	1080008c 	andi	r2,r2,2
     450:	10000b26 	beq	r2,zero,480 <main+0x200>
				{
					alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 3, 0);
     454:	00800c84 	movi	r2,50
     458:	d8800015 	stw	r2,0(sp)
     45c:	008000c4 	movi	r2,3
     460:	d8800115 	stw	r2,4(sp)
     464:	d8000215 	stw	zero,8(sp)
     468:	9009883a 	mov	r4,r18
     46c:	000b883a 	mov	r5,zero
     470:	000d883a 	mov	r6,zero
     474:	01c00c84 	movi	r7,50
     478:	000269c0 	call	269c <alt_up_pixel_buffer_dma_draw_box>
					deltax = deltax + 1;
     47c:	e479883a 	add	fp,fp,r17
				}
				
				// move the rectangle
				x1 = x1 + deltax;
     480:	a729883a 	add	r20,r20,fp
				//x2 = x2 + deltax;
				y1 = y1 + deltay;
     484:	9d67883a 	add	r19,r19,r21
				//y2 = y2 + deltay;
				
				
				if ((deltax > 0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31))
     488:	0700060e 	bge	zero,fp,4a4 <main+0x224>
     48c:	90800f17 	ldw	r2,60(r18)
     490:	10bff844 	addi	r2,r2,-31
     494:	a0800736 	bltu	r20,r2,4b4 <main+0x234>
				{
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 31;
     498:	1029883a 	mov	r20,r2
     49c:	0039883a 	mov	fp,zero
     4a0:	00000406 	br	4b4 <main+0x234>
					deltax = 0;
				}
				else if ((deltax < 0) && (x1 <= 0))
     4a4:	e000030e 	bge	fp,zero,4b4 <main+0x234>
     4a8:	05000216 	blt	zero,r20,4b4 <main+0x234>
     4ac:	0029883a 	mov	r20,zero
     4b0:	0039883a 	mov	fp,zero
				{
					x1 = 0;
					deltax = 0;
				}

				if ((deltay > 0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 31))
     4b4:	0540060e 	bge	zero,r21,4d0 <main+0x250>
     4b8:	90801017 	ldw	r2,64(r18)
     4bc:	10bff844 	addi	r2,r2,-31
     4c0:	98800736 	bltu	r19,r2,4e0 <main+0x260>
				{
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 31;
     4c4:	1027883a 	mov	r19,r2
     4c8:	002b883a 	mov	r21,zero
     4cc:	00000406 	br	4e0 <main+0x260>
					deltay = 0;
				}
				else if ((deltay < 0) && (y1 <= 0))
     4d0:	a800030e 	bge	r21,zero,4e0 <main+0x260>
     4d4:	04c00216 	blt	zero,r19,4e0 <main+0x260>
				{
					y1 = 0;
					deltay = -deltay;
     4d8:	056bc83a 	sub	r21,zero,r21
     4dc:	0027883a 	mov	r19,zero
				}
				
				x2 = x1 + 30;
     4e0:	00800784 	movi	r2,30
     4e4:	a0af883a 	add	r23,r20,r2
				y2 = y1 + 30;
     4e8:	98ad883a 	add	r22,r19,r2
				
				// redraw Rectangle with diagonal lines
				//alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
				//alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x1, y1, x2, y2, 0x60, 0);
     4ec:	dd800015 	stw	r22,0(sp)
     4f0:	00801804 	movi	r2,96
     4f4:	d8800115 	stw	r2,4(sp)
     4f8:	d8000215 	stw	zero,8(sp)
     4fc:	9009883a 	mov	r4,r18
     500:	a00b883a 	mov	r5,r20
     504:	980d883a 	mov	r6,r19
     508:	b80f883a 	mov	r7,r23
     50c:	000269c0 	call	269c <alt_up_pixel_buffer_dma_draw_box>
				//draw_sprite(pixel_buffer_dev, sprite, x1, y1);
				
				// redraw the box in the foreground 
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xf0, 0);
     510:	00802004 	movi	r2,128
     514:	d8800015 	stw	r2,0(sp)
     518:	00803c04 	movi	r2,240
     51c:	d8800115 	stw	r2,4(sp)
     520:	d8000215 	stw	zero,8(sp)
     524:	9009883a 	mov	r4,r18
     528:	01402204 	movi	r5,136
     52c:	01801c04 	movi	r6,112
     530:	01c03204 	movi	r7,200
     534:	000269c0 	call	269c <alt_up_pixel_buffer_dma_draw_box>

				draw_landscape (pixel_buffer_dev);
     538:	9009883a 	mov	r4,r18
     53c:	00001a40 	call	1a4 <draw_landscape>
				
				deltay = deltay + g;
     540:	a809883a 	mov	r4,r21
     544:	00005a40 	call	5a4 <__floatsisf>
     548:	010fc034 	movhi	r4,16128
     54c:	1109ff72 	custom	253,r4,r2,r4
     550:	000063c0 	call	63c <__fixsfsi>
     554:	102b883a 	mov	r21,r2
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     558:	9009883a 	mov	r4,r18
     55c:	00029940 	call	2994 <alt_up_pixel_buffer_dma_swap_buffers>
     560:	003fa406 	br	3f4 <main+0x174>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     564:	01000034 	movhi	r4,0
     568:	21164d04 	addi	r4,r4,22836
     56c:	0000b240 	call	b24 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     570:	00bfffc4 	movi	r2,-1
     574:	dfc02017 	ldw	ra,128(sp)
     578:	df001f17 	ldw	fp,124(sp)
     57c:	ddc01e17 	ldw	r23,120(sp)
     580:	dd801d17 	ldw	r22,116(sp)
     584:	dd401c17 	ldw	r21,112(sp)
     588:	dd001b17 	ldw	r20,108(sp)
     58c:	dcc01a17 	ldw	r19,104(sp)
     590:	dc801917 	ldw	r18,100(sp)
     594:	dc401817 	ldw	r17,96(sp)
     598:	dc001717 	ldw	r16,92(sp)
     59c:	dec02104 	addi	sp,sp,132
     5a0:	f800283a 	ret

000005a4 <__floatsisf>:
     5a4:	2006d7fa 	srli	r3,r4,31
     5a8:	defffa04 	addi	sp,sp,-24
     5ac:	008000c4 	movi	r2,3
     5b0:	dfc00515 	stw	ra,20(sp)
     5b4:	dc000415 	stw	r16,16(sp)
     5b8:	d8800015 	stw	r2,0(sp)
     5bc:	d8c00115 	stw	r3,4(sp)
     5c0:	2000081e 	bne	r4,zero,5e4 <__floatsisf+0x40>
     5c4:	00800084 	movi	r2,2
     5c8:	d8800015 	stw	r2,0(sp)
     5cc:	d809883a 	mov	r4,sp
     5d0:	00007500 	call	750 <__pack_f>
     5d4:	dfc00517 	ldw	ra,20(sp)
     5d8:	dc000417 	ldw	r16,16(sp)
     5dc:	dec00604 	addi	sp,sp,24
     5e0:	f800283a 	ret
     5e4:	00800784 	movi	r2,30
     5e8:	1807003a 	cmpeq	r3,r3,zero
     5ec:	d8800215 	stw	r2,8(sp)
     5f0:	18000e1e 	bne	r3,zero,62c <__floatsisf+0x88>
     5f4:	00a00034 	movhi	r2,32768
     5f8:	20800e26 	beq	r4,r2,634 <__floatsisf+0x90>
     5fc:	0121c83a 	sub	r16,zero,r4
     600:	8009883a 	mov	r4,r16
     604:	dc000315 	stw	r16,12(sp)
     608:	00006d00 	call	6d0 <__clzsi2>
     60c:	117fffc4 	addi	r5,r2,-1
     610:	017fee0e 	bge	zero,r5,5cc <__floatsisf+0x28>
     614:	d8800217 	ldw	r2,8(sp)
     618:	8146983a 	sll	r3,r16,r5
     61c:	1145c83a 	sub	r2,r2,r5
     620:	d8c00315 	stw	r3,12(sp)
     624:	d8800215 	stw	r2,8(sp)
     628:	003fe806 	br	5cc <__floatsisf+0x28>
     62c:	2021883a 	mov	r16,r4
     630:	003ff306 	br	600 <__floatsisf+0x5c>
     634:	00b3c034 	movhi	r2,52992
     638:	003fe606 	br	5d4 <__floatsisf+0x30>

0000063c <__fixsfsi>:
     63c:	defffa04 	addi	sp,sp,-24
     640:	d9000015 	stw	r4,0(sp)
     644:	d9400104 	addi	r5,sp,4
     648:	d809883a 	mov	r4,sp
     64c:	dfc00515 	stw	ra,20(sp)
     650:	00008b00 	call	8b0 <__unpack_f>
     654:	d8c00117 	ldw	r3,4(sp)
     658:	00800084 	movi	r2,2
     65c:	1880041e 	bne	r3,r2,670 <__fixsfsi+0x34>
     660:	0005883a 	mov	r2,zero
     664:	dfc00517 	ldw	ra,20(sp)
     668:	dec00604 	addi	sp,sp,24
     66c:	f800283a 	ret
     670:	00800044 	movi	r2,1
     674:	10fffa2e 	bgeu	r2,r3,660 <__fixsfsi+0x24>
     678:	00800104 	movi	r2,4
     67c:	18800426 	beq	r3,r2,690 <__fixsfsi+0x54>
     680:	d8800317 	ldw	r2,12(sp)
     684:	103ff616 	blt	r2,zero,660 <__fixsfsi+0x24>
     688:	00c00784 	movi	r3,30
     68c:	1880070e 	bge	r3,r2,6ac <__fixsfsi+0x70>
     690:	d8800217 	ldw	r2,8(sp)
     694:	10000c1e 	bne	r2,zero,6c8 <__fixsfsi+0x8c>
     698:	00a00034 	movhi	r2,32768
     69c:	10bfffc4 	addi	r2,r2,-1
     6a0:	dfc00517 	ldw	ra,20(sp)
     6a4:	dec00604 	addi	sp,sp,24
     6a8:	f800283a 	ret
     6ac:	1885c83a 	sub	r2,r3,r2
     6b0:	d9000217 	ldw	r4,8(sp)
     6b4:	d8c00417 	ldw	r3,16(sp)
     6b8:	1884d83a 	srl	r2,r3,r2
     6bc:	203fe926 	beq	r4,zero,664 <__fixsfsi+0x28>
     6c0:	0085c83a 	sub	r2,zero,r2
     6c4:	003fe706 	br	664 <__fixsfsi+0x28>
     6c8:	00a00034 	movhi	r2,32768
     6cc:	003fe506 	br	664 <__fixsfsi+0x28>

000006d0 <__clzsi2>:
     6d0:	00bfffd4 	movui	r2,65535
     6d4:	11000e36 	bltu	r2,r4,710 <__clzsi2+0x40>
     6d8:	00803fc4 	movi	r2,255
     6dc:	01400204 	movi	r5,8
     6e0:	0007883a 	mov	r3,zero
     6e4:	11001036 	bltu	r2,r4,728 <__clzsi2+0x58>
     6e8:	000b883a 	mov	r5,zero
     6ec:	20c6d83a 	srl	r3,r4,r3
     6f0:	00800034 	movhi	r2,0
     6f4:	10967504 	addi	r2,r2,22996
     6f8:	1887883a 	add	r3,r3,r2
     6fc:	18800003 	ldbu	r2,0(r3)
     700:	00c00804 	movi	r3,32
     704:	2885883a 	add	r2,r5,r2
     708:	1885c83a 	sub	r2,r3,r2
     70c:	f800283a 	ret
     710:	01400404 	movi	r5,16
     714:	00804034 	movhi	r2,256
     718:	10bfffc4 	addi	r2,r2,-1
     71c:	2807883a 	mov	r3,r5
     720:	113ff22e 	bgeu	r2,r4,6ec <__clzsi2+0x1c>
     724:	01400604 	movi	r5,24
     728:	2807883a 	mov	r3,r5
     72c:	20c6d83a 	srl	r3,r4,r3
     730:	00800034 	movhi	r2,0
     734:	10967504 	addi	r2,r2,22996
     738:	1887883a 	add	r3,r3,r2
     73c:	18800003 	ldbu	r2,0(r3)
     740:	00c00804 	movi	r3,32
     744:	2885883a 	add	r2,r5,r2
     748:	1885c83a 	sub	r2,r3,r2
     74c:	f800283a 	ret

00000750 <__pack_f>:
     750:	20c00017 	ldw	r3,0(r4)
     754:	01c00044 	movi	r7,1
     758:	21800317 	ldw	r6,12(r4)
     75c:	21400117 	ldw	r5,4(r4)
     760:	38c02d2e 	bgeu	r7,r3,818 <__pack_f+0xc8>
     764:	00800104 	movi	r2,4
     768:	18802826 	beq	r3,r2,80c <__pack_f+0xbc>
     76c:	00800084 	movi	r2,2
     770:	18800126 	beq	r3,r2,778 <__pack_f+0x28>
     774:	3000101e 	bne	r6,zero,7b8 <__pack_f+0x68>
     778:	000d883a 	mov	r6,zero
     77c:	0007883a 	mov	r3,zero
     780:	19003fcc 	andi	r4,r3,255
     784:	200895fa 	slli	r4,r4,23
     788:	00c02034 	movhi	r3,128
     78c:	18ffffc4 	addi	r3,r3,-1
     790:	30c6703a 	and	r3,r6,r3
     794:	10a0002c 	andhi	r2,r2,32768
     798:	10c4b03a 	or	r2,r2,r3
     79c:	280a97fa 	slli	r5,r5,31
     7a0:	1104b03a 	or	r2,r2,r4
     7a4:	00e00034 	movhi	r3,32768
     7a8:	18ffffc4 	addi	r3,r3,-1
     7ac:	10c4703a 	and	r2,r2,r3
     7b0:	1144b03a 	or	r2,r2,r5
     7b4:	f800283a 	ret
     7b8:	21000217 	ldw	r4,8(r4)
     7bc:	00bfe084 	movi	r2,-126
     7c0:	20801b16 	blt	r4,r2,830 <__pack_f+0xe0>
     7c4:	00801fc4 	movi	r2,127
     7c8:	11001016 	blt	r2,r4,80c <__pack_f+0xbc>
     7cc:	308e703a 	and	r7,r6,r2
     7d0:	2087883a 	add	r3,r4,r2
     7d4:	00801004 	movi	r2,64
     7d8:	38800526 	beq	r7,r2,7f0 <__pack_f+0xa0>
     7dc:	31800fc4 	addi	r6,r6,63
     7e0:	30000716 	blt	r6,zero,800 <__pack_f+0xb0>
     7e4:	300490ba 	slli	r2,r6,2
     7e8:	100cd27a 	srli	r6,r2,9
     7ec:	003fe406 	br	780 <__pack_f+0x30>
     7f0:	3080200c 	andi	r2,r6,128
     7f4:	103ffa26 	beq	r2,zero,7e0 <__pack_f+0x90>
     7f8:	31cd883a 	add	r6,r6,r7
     7fc:	003ff806 	br	7e0 <__pack_f+0x90>
     800:	300cd07a 	srli	r6,r6,1
     804:	18c00044 	addi	r3,r3,1
     808:	003ff606 	br	7e4 <__pack_f+0x94>
     80c:	000d883a 	mov	r6,zero
     810:	00ffffc4 	movi	r3,-1
     814:	003fda06 	br	780 <__pack_f+0x30>
     818:	31800434 	orhi	r6,r6,16
     81c:	00802034 	movhi	r2,128
     820:	10bfffc4 	addi	r2,r2,-1
     824:	308c703a 	and	r6,r6,r2
     828:	00ffffc4 	movi	r3,-1
     82c:	003fd406 	br	780 <__pack_f+0x30>
     830:	1109c83a 	sub	r4,r2,r4
     834:	00800644 	movi	r2,25
     838:	11001216 	blt	r2,r4,884 <__pack_f+0x134>
     83c:	3904983a 	sll	r2,r7,r4
     840:	3106d83a 	srl	r3,r6,r4
     844:	10bfffc4 	addi	r2,r2,-1
     848:	3084703a 	and	r2,r6,r2
     84c:	1004c03a 	cmpne	r2,r2,zero
     850:	1886b03a 	or	r3,r3,r2
     854:	19001fcc 	andi	r4,r3,127
     858:	00801004 	movi	r2,64
     85c:	20800c26 	beq	r4,r2,890 <__pack_f+0x140>
     860:	18c00fc4 	addi	r3,r3,63
     864:	00900034 	movhi	r2,16384
     868:	10bfffc4 	addi	r2,r2,-1
     86c:	180cd1fa 	srli	r6,r3,7
     870:	10c7803a 	cmpltu	r3,r2,r3
     874:	00802034 	movhi	r2,128
     878:	10bfffc4 	addi	r2,r2,-1
     87c:	308c703a 	and	r6,r6,r2
     880:	003fbf06 	br	780 <__pack_f+0x30>
     884:	0007883a 	mov	r3,zero
     888:	000d883a 	mov	r6,zero
     88c:	003ff906 	br	874 <__pack_f+0x124>
     890:	1880200c 	andi	r2,r3,128
     894:	10000126 	beq	r2,zero,89c <__pack_f+0x14c>
     898:	1907883a 	add	r3,r3,r4
     89c:	180cd1fa 	srli	r6,r3,7
     8a0:	00900034 	movhi	r2,16384
     8a4:	10bfffc4 	addi	r2,r2,-1
     8a8:	10c7803a 	cmpltu	r3,r2,r3
     8ac:	003ff106 	br	874 <__pack_f+0x124>

000008b0 <__unpack_f>:
     8b0:	21800017 	ldw	r6,0(r4)
     8b4:	00c02034 	movhi	r3,128
     8b8:	18ffffc4 	addi	r3,r3,-1
     8bc:	3004d5fa 	srli	r2,r6,23
     8c0:	3008d7fa 	srli	r4,r6,31
     8c4:	30ce703a 	and	r7,r6,r3
     8c8:	10c03fcc 	andi	r3,r2,255
     8cc:	29000115 	stw	r4,4(r5)
     8d0:	1800131e 	bne	r3,zero,920 <__unpack_f+0x70>
     8d4:	38000f26 	beq	r7,zero,914 <__unpack_f+0x64>
     8d8:	380691fa 	slli	r3,r7,7
     8dc:	01bfe084 	movi	r6,-126
     8e0:	008000c4 	movi	r2,3
     8e4:	01100034 	movhi	r4,16384
     8e8:	213fffc4 	addi	r4,r4,-1
     8ec:	28800015 	stw	r2,0(r5)
     8f0:	29800215 	stw	r6,8(r5)
     8f4:	20c00536 	bltu	r4,r3,90c <__unpack_f+0x5c>
     8f8:	3005883a 	mov	r2,r6
     8fc:	18c7883a 	add	r3,r3,r3
     900:	10bfffc4 	addi	r2,r2,-1
     904:	20fffd2e 	bgeu	r4,r3,8fc <__unpack_f+0x4c>
     908:	28800215 	stw	r2,8(r5)
     90c:	28c00315 	stw	r3,12(r5)
     910:	f800283a 	ret
     914:	00800084 	movi	r2,2
     918:	28800015 	stw	r2,0(r5)
     91c:	f800283a 	ret
     920:	00803fc4 	movi	r2,255
     924:	18800826 	beq	r3,r2,948 <__unpack_f+0x98>
     928:	380491fa 	slli	r2,r7,7
     92c:	18ffe044 	addi	r3,r3,-127
     930:	28c00215 	stw	r3,8(r5)
     934:	10900034 	orhi	r2,r2,16384
     938:	28800315 	stw	r2,12(r5)
     93c:	008000c4 	movi	r2,3
     940:	28800015 	stw	r2,0(r5)
     944:	f800283a 	ret
     948:	3800031e 	bne	r7,zero,958 <__unpack_f+0xa8>
     94c:	00800104 	movi	r2,4
     950:	28800015 	stw	r2,0(r5)
     954:	f800283a 	ret
     958:	3080042c 	andhi	r2,r6,16
     95c:	10000426 	beq	r2,zero,970 <__unpack_f+0xc0>
     960:	00800044 	movi	r2,1
     964:	28800015 	stw	r2,0(r5)
     968:	29c00315 	stw	r7,12(r5)
     96c:	f800283a 	ret
     970:	28000015 	stw	zero,0(r5)
     974:	003ffc06 	br	968 <__unpack_f+0xb8>

00000978 <memset>:
     978:	008000c4 	movi	r2,3
     97c:	29403fcc 	andi	r5,r5,255
     980:	2007883a 	mov	r3,r4
     984:	1180022e 	bgeu	r2,r6,990 <memset+0x18>
     988:	2084703a 	and	r2,r4,r2
     98c:	10000826 	beq	r2,zero,9b0 <memset+0x38>
     990:	30000526 	beq	r6,zero,9a8 <memset+0x30>
     994:	2805883a 	mov	r2,r5
     998:	30cd883a 	add	r6,r6,r3
     99c:	18800005 	stb	r2,0(r3)
     9a0:	18c00044 	addi	r3,r3,1
     9a4:	19bffd1e 	bne	r3,r6,99c <memset+0x24>
     9a8:	2005883a 	mov	r2,r4
     9ac:	f800283a 	ret
     9b0:	2804923a 	slli	r2,r5,8
     9b4:	020003c4 	movi	r8,15
     9b8:	200f883a 	mov	r7,r4
     9bc:	2884b03a 	or	r2,r5,r2
     9c0:	1006943a 	slli	r3,r2,16
     9c4:	10c6b03a 	or	r3,r2,r3
     9c8:	41800a2e 	bgeu	r8,r6,9f4 <memset+0x7c>
     9cc:	4005883a 	mov	r2,r8
     9d0:	31bffc04 	addi	r6,r6,-16
     9d4:	38c00015 	stw	r3,0(r7)
     9d8:	38c00115 	stw	r3,4(r7)
     9dc:	38c00215 	stw	r3,8(r7)
     9e0:	38c00315 	stw	r3,12(r7)
     9e4:	39c00404 	addi	r7,r7,16
     9e8:	11bff936 	bltu	r2,r6,9d0 <memset+0x58>
     9ec:	008000c4 	movi	r2,3
     9f0:	1180052e 	bgeu	r2,r6,a08 <memset+0x90>
     9f4:	31bfff04 	addi	r6,r6,-4
     9f8:	008000c4 	movi	r2,3
     9fc:	38c00015 	stw	r3,0(r7)
     a00:	39c00104 	addi	r7,r7,4
     a04:	11bffb36 	bltu	r2,r6,9f4 <memset+0x7c>
     a08:	3807883a 	mov	r3,r7
     a0c:	003fe006 	br	990 <memset+0x18>

00000a10 <alt_load>:
     a10:	deffff04 	addi	sp,sp,-4
     a14:	dfc00015 	stw	ra,0(sp)
     a18:	01000034 	movhi	r4,0
     a1c:	211e5004 	addi	r4,r4,31040
     a20:	00c00034 	movhi	r3,0
     a24:	18d70304 	addi	r3,r3,23564
     a28:	20c00926 	beq	r4,r3,a50 <alt_load+0x40>
     a2c:	01800034 	movhi	r6,0
     a30:	319e5004 	addi	r6,r6,31040
     a34:	19800626 	beq	r3,r6,a50 <alt_load+0x40>
     a38:	01400104 	movi	r5,4
     a3c:	20800017 	ldw	r2,0(r4)
     a40:	18800015 	stw	r2,0(r3)
     a44:	1947883a 	add	r3,r3,r5
     a48:	2149883a 	add	r4,r4,r5
     a4c:	30fffb1e 	bne	r6,r3,a3c <alt_load+0x2c>
     a50:	01000034 	movhi	r4,0
     a54:	21000804 	addi	r4,r4,32
     a58:	00c00034 	movhi	r3,0
     a5c:	18c00804 	addi	r3,r3,32
     a60:	20c00926 	beq	r4,r3,a88 <alt_load+0x78>
     a64:	01800034 	movhi	r6,0
     a68:	31805a04 	addi	r6,r6,360
     a6c:	19800626 	beq	r3,r6,a88 <alt_load+0x78>
     a70:	01400104 	movi	r5,4
     a74:	20800017 	ldw	r2,0(r4)
     a78:	18800015 	stw	r2,0(r3)
     a7c:	1947883a 	add	r3,r3,r5
     a80:	2149883a 	add	r4,r4,r5
     a84:	30fffb1e 	bne	r6,r3,a74 <alt_load+0x64>
     a88:	01000034 	movhi	r4,0
     a8c:	21162a04 	addi	r4,r4,22696
     a90:	00c00034 	movhi	r3,0
     a94:	18d62a04 	addi	r3,r3,22696
     a98:	20c00926 	beq	r4,r3,ac0 <alt_load+0xb0>
     a9c:	01800034 	movhi	r6,0
     aa0:	31970304 	addi	r6,r6,23564
     aa4:	19800626 	beq	r3,r6,ac0 <alt_load+0xb0>
     aa8:	01400104 	movi	r5,4
     aac:	20800017 	ldw	r2,0(r4)
     ab0:	18800015 	stw	r2,0(r3)
     ab4:	1947883a 	add	r3,r3,r5
     ab8:	2149883a 	add	r4,r4,r5
     abc:	30fffb1e 	bne	r6,r3,aac <alt_load+0x9c>
     ac0:	0002c3c0 	call	2c3c <alt_dcache_flush_all>
     ac4:	0002d280 	call	2d28 <alt_icache_flush_all>
     ac8:	dfc00017 	ldw	ra,0(sp)
     acc:	dec00104 	addi	sp,sp,4
     ad0:	f800283a 	ret

00000ad4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     ad4:	defffe04 	addi	sp,sp,-8
     ad8:	dfc00115 	stw	ra,4(sp)
     adc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     ae0:	0009883a 	mov	r4,zero
     ae4:	0000d280 	call	d28 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     ae8:	0000d480 	call	d48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     aec:	01800034 	movhi	r6,0
     af0:	3196b504 	addi	r6,r6,23252
     af4:	3009883a 	mov	r4,r6
     af8:	300b883a 	mov	r5,r6
     afc:	0002dac0 	call	2dac <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     b00:	d1275b17 	ldw	r4,-25236(gp)
     b04:	d1675c17 	ldw	r5,-25232(gp)
     b08:	d1a75d17 	ldw	r6,-25228(gp)
     b0c:	00002800 	call	280 <main>
     b10:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     b14:	01000044 	movi	r4,1
     b18:	0002b600 	call	2b60 <close>
  exit (result);
     b1c:	8009883a 	mov	r4,r16
     b20:	00032ec0 	call	32ec <exit>

00000b24 <alt_printf>:
     b24:	defff804 	addi	sp,sp,-32
     b28:	dfc00415 	stw	ra,16(sp)
     b2c:	dc800315 	stw	r18,12(sp)
     b30:	dc400215 	stw	r17,8(sp)
     b34:	dc000115 	stw	r16,4(sp)
     b38:	d9400515 	stw	r5,20(sp)
     b3c:	d9800615 	stw	r6,24(sp)
     b40:	d9c00715 	stw	r7,28(sp)
     b44:	d8800504 	addi	r2,sp,20
     b48:	d8800015 	stw	r2,0(sp)
     b4c:	2023883a 	mov	r17,r4
     b50:	00005d06 	br	cc8 <alt_printf+0x1a4>
     b54:	8c400044 	addi	r17,r17,1
     b58:	21003fcc 	andi	r4,r4,255
     b5c:	2100201c 	xori	r4,r4,128
     b60:	213fe004 	addi	r4,r4,-128
     b64:	00800944 	movi	r2,37
     b68:	20800226 	beq	r4,r2,b74 <alt_printf+0x50>
     b6c:	0000d000 	call	d00 <alt_putchar>
     b70:	00005506 	br	cc8 <alt_printf+0x1a4>
     b74:	89400003 	ldbu	r5,0(r17)
     b78:	8c400044 	addi	r17,r17,1
     b7c:	29003fcc 	andi	r4,r5,255
     b80:	2100201c 	xori	r4,r4,128
     b84:	213fe004 	addi	r4,r4,-128
     b88:	20005726 	beq	r4,zero,ce8 <alt_printf+0x1c4>
     b8c:	00800944 	movi	r2,37
     b90:	2080021e 	bne	r4,r2,b9c <alt_printf+0x78>
     b94:	0000d000 	call	d00 <alt_putchar>
     b98:	00004b06 	br	cc8 <alt_printf+0x1a4>
     b9c:	28c03fcc 	andi	r3,r5,255
     ba0:	18c0201c 	xori	r3,r3,128
     ba4:	18ffe004 	addi	r3,r3,-128
     ba8:	008018c4 	movi	r2,99
     bac:	1880061e 	bne	r3,r2,bc8 <alt_printf+0xa4>
     bb0:	d8c00017 	ldw	r3,0(sp)
     bb4:	18800104 	addi	r2,r3,4
     bb8:	d8800015 	stw	r2,0(sp)
     bbc:	19000017 	ldw	r4,0(r3)
     bc0:	0000d000 	call	d00 <alt_putchar>
     bc4:	00004006 	br	cc8 <alt_printf+0x1a4>
     bc8:	28c03fcc 	andi	r3,r5,255
     bcc:	18c0201c 	xori	r3,r3,128
     bd0:	18ffe004 	addi	r3,r3,-128
     bd4:	00801e04 	movi	r2,120
     bd8:	1880231e 	bne	r3,r2,c68 <alt_printf+0x144>
     bdc:	d8c00017 	ldw	r3,0(sp)
     be0:	18800104 	addi	r2,r3,4
     be4:	d8800015 	stw	r2,0(sp)
     be8:	1c800017 	ldw	r18,0(r3)
     bec:	90000326 	beq	r18,zero,bfc <alt_printf+0xd8>
     bf0:	90bc002c 	andhi	r2,r18,61440
     bf4:	10000426 	beq	r2,zero,c08 <alt_printf+0xe4>
     bf8:	00003906 	br	ce0 <alt_printf+0x1bc>
     bfc:	01000c04 	movi	r4,48
     c00:	0000d000 	call	d00 <alt_putchar>
     c04:	00003006 	br	cc8 <alt_printf+0x1a4>
     c08:	04000704 	movi	r16,28
     c0c:	013fff04 	movi	r4,-4
     c10:	00c003c4 	movi	r3,15
     c14:	8121883a 	add	r16,r16,r4
     c18:	1c04983a 	sll	r2,r3,r16
     c1c:	9084703a 	and	r2,r18,r2
     c20:	103ffc26 	beq	r2,zero,c14 <alt_printf+0xf0>
     c24:	80002816 	blt	r16,zero,cc8 <alt_printf+0x1a4>
     c28:	008003c4 	movi	r2,15
     c2c:	1404983a 	sll	r2,r2,r16
     c30:	9084703a 	and	r2,r18,r2
     c34:	1406d83a 	srl	r3,r2,r16
     c38:	00800244 	movi	r2,9
     c3c:	10c00236 	bltu	r2,r3,c48 <alt_printf+0x124>
     c40:	19000c04 	addi	r4,r3,48
     c44:	00000106 	br	c4c <alt_printf+0x128>
     c48:	190015c4 	addi	r4,r3,87
     c4c:	21003fcc 	andi	r4,r4,255
     c50:	2100201c 	xori	r4,r4,128
     c54:	213fe004 	addi	r4,r4,-128
     c58:	0000d000 	call	d00 <alt_putchar>
     c5c:	843fff04 	addi	r16,r16,-4
     c60:	80001916 	blt	r16,zero,cc8 <alt_printf+0x1a4>
     c64:	003ff006 	br	c28 <alt_printf+0x104>
     c68:	28c03fcc 	andi	r3,r5,255
     c6c:	18c0201c 	xori	r3,r3,128
     c70:	18ffe004 	addi	r3,r3,-128
     c74:	00801cc4 	movi	r2,115
     c78:	1880131e 	bne	r3,r2,cc8 <alt_printf+0x1a4>
     c7c:	d8800017 	ldw	r2,0(sp)
     c80:	10c00104 	addi	r3,r2,4
     c84:	d8c00015 	stw	r3,0(sp)
     c88:	14000017 	ldw	r16,0(r2)
     c8c:	81000003 	ldbu	r4,0(r16)
     c90:	20803fcc 	andi	r2,r4,255
     c94:	1080201c 	xori	r2,r2,128
     c98:	10bfe004 	addi	r2,r2,-128
     c9c:	10000a26 	beq	r2,zero,cc8 <alt_printf+0x1a4>
     ca0:	84000044 	addi	r16,r16,1
     ca4:	21003fcc 	andi	r4,r4,255
     ca8:	2100201c 	xori	r4,r4,128
     cac:	213fe004 	addi	r4,r4,-128
     cb0:	0000d000 	call	d00 <alt_putchar>
     cb4:	81000003 	ldbu	r4,0(r16)
     cb8:	20803fcc 	andi	r2,r4,255
     cbc:	1080201c 	xori	r2,r2,128
     cc0:	10bfe004 	addi	r2,r2,-128
     cc4:	103ff61e 	bne	r2,zero,ca0 <alt_printf+0x17c>
     cc8:	89000003 	ldbu	r4,0(r17)
     ccc:	20803fcc 	andi	r2,r4,255
     cd0:	1080201c 	xori	r2,r2,128
     cd4:	10bfe004 	addi	r2,r2,-128
     cd8:	103f9e1e 	bne	r2,zero,b54 <alt_printf+0x30>
     cdc:	00000206 	br	ce8 <alt_printf+0x1c4>
     ce0:	04000704 	movi	r16,28
     ce4:	003fd006 	br	c28 <alt_printf+0x104>
     ce8:	dfc00417 	ldw	ra,16(sp)
     cec:	dc800317 	ldw	r18,12(sp)
     cf0:	dc400217 	ldw	r17,8(sp)
     cf4:	dc000117 	ldw	r16,4(sp)
     cf8:	dec00804 	addi	sp,sp,32
     cfc:	f800283a 	ret

00000d00 <alt_putchar>:
     d00:	deffff04 	addi	sp,sp,-4
     d04:	dfc00015 	stw	ra,0(sp)
     d08:	00800034 	movhi	r2,0
     d0c:	109e4b04 	addi	r2,r2,31020
     d10:	10800017 	ldw	r2,0(r2)
     d14:	11400217 	ldw	r5,8(r2)
     d18:	00034380 	call	3438 <putc>
     d1c:	dfc00017 	ldw	ra,0(sp)
     d20:	dec00104 	addi	sp,sp,4
     d24:	f800283a 	ret

00000d28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     d28:	deffff04 	addi	sp,sp,-4
     d2c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
     d30:	00031800 	call	3180 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     d34:	00800044 	movi	r2,1
     d38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     d3c:	dfc00017 	ldw	ra,0(sp)
     d40:	dec00104 	addi	sp,sp,4
     d44:	f800283a 	ret

00000d48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     d48:	defffd04 	addi	sp,sp,-12
     d4c:	dfc00215 	stw	ra,8(sp)
     d50:	dc400115 	stw	r17,4(sp)
     d54:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     d58:	04400204 	movi	r17,8
     d5c:	01040034 	movhi	r4,4096
     d60:	21080004 	addi	r4,r4,8192
     d64:	000b883a 	mov	r5,zero
     d68:	000d883a 	mov	r6,zero
     d6c:	880f883a 	mov	r7,r17
     d70:	000161c0 	call	161c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     d74:	04000034 	movhi	r16,0
     d78:	84170d04 	addi	r16,r16,23604
     d7c:	8009883a 	mov	r4,r16
     d80:	000b883a 	mov	r5,zero
     d84:	880d883a 	mov	r6,r17
     d88:	00011180 	call	1118 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     d8c:	04400034 	movhi	r17,0
     d90:	8c5e4404 	addi	r17,r17,30992
     d94:	813ff604 	addi	r4,r16,-40
     d98:	880b883a 	mov	r5,r17
     d9c:	0002c480 	call	2c48 <alt_dev_llist_insert>
     da0:	01000034 	movhi	r4,0
     da4:	211b1b04 	addi	r4,r4,27756
     da8:	880b883a 	mov	r5,r17
     dac:	0002c480 	call	2c48 <alt_dev_llist_insert>
     db0:	01000034 	movhi	r4,0
     db4:	211b2704 	addi	r4,r4,27804
     db8:	880b883a 	mov	r5,r17
     dbc:	0002c480 	call	2c48 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     dc0:	04000034 	movhi	r16,0
     dc4:	841b3304 	addi	r16,r16,27852
     dc8:	8009883a 	mov	r4,r16
     dcc:	00017500 	call	1750 <alt_up_character_lcd_init>
     dd0:	8009883a 	mov	r4,r16
     dd4:	880b883a 	mov	r5,r17
     dd8:	0002c480 	call	2c48 <alt_dev_llist_insert>
     ddc:	01000034 	movhi	r4,0
     de0:	211b3e04 	addi	r4,r4,27896
     de4:	880b883a 	mov	r5,r17
     de8:	0002c480 	call	2c48 <alt_dev_llist_insert>
     dec:	01000034 	movhi	r4,0
     df0:	211b4904 	addi	r4,r4,27940
     df4:	880b883a 	mov	r5,r17
     df8:	0002c480 	call	2c48 <alt_dev_llist_insert>
     dfc:	01000034 	movhi	r4,0
     e00:	211b5404 	addi	r4,r4,27984
     e04:	880b883a 	mov	r5,r17
     e08:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e0c:	01000034 	movhi	r4,0
     e10:	211b5f04 	addi	r4,r4,28028
     e14:	880b883a 	mov	r5,r17
     e18:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e1c:	01000034 	movhi	r4,0
     e20:	211b6a04 	addi	r4,r4,28072
     e24:	880b883a 	mov	r5,r17
     e28:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e2c:	01000034 	movhi	r4,0
     e30:	211b7504 	addi	r4,r4,28116
     e34:	880b883a 	mov	r5,r17
     e38:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e3c:	01000034 	movhi	r4,0
     e40:	211b8004 	addi	r4,r4,28160
     e44:	880b883a 	mov	r5,r17
     e48:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e4c:	01000034 	movhi	r4,0
     e50:	211b8b04 	addi	r4,r4,28204
     e54:	880b883a 	mov	r5,r17
     e58:	0002c480 	call	2c48 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     e5c:	04000034 	movhi	r16,0
     e60:	841b9604 	addi	r16,r16,28248
     e64:	8009883a 	mov	r4,r16
     e68:	0001c740 	call	1c74 <alt_up_ps2_init>
     e6c:	8009883a 	mov	r4,r16
     e70:	880b883a 	mov	r5,r17
     e74:	0002c480 	call	2c48 <alt_dev_llist_insert>
     e78:	01000034 	movhi	r4,0
     e7c:	211ba404 	addi	r4,r4,28304
     e80:	880b883a 	mov	r5,r17
     e84:	0002c480 	call	2c48 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     e88:	01000034 	movhi	r4,0
     e8c:	211baf04 	addi	r4,r4,28348
     e90:	20800a17 	ldw	r2,40(r4)
     e94:	10800104 	addi	r2,r2,4
     e98:	10c0000b 	ldhu	r3,0(r2)
     e9c:	20c00c15 	stw	r3,48(r4)
     ea0:	10800017 	ldw	r2,0(r2)
     ea4:	100ad43a 	srli	r5,r2,16
     ea8:	21400d15 	stw	r5,52(r4)
     eac:	00801004 	movi	r2,64
     eb0:	10c00436 	bltu	r2,r3,ec4 <alt_sys_init+0x17c>
     eb4:	00800fc4 	movi	r2,63
     eb8:	20800f15 	stw	r2,60(r4)
     ebc:	00800184 	movi	r2,6
     ec0:	20801015 	stw	r2,64(r4)
     ec4:	00800804 	movi	r2,32
     ec8:	11400436 	bltu	r2,r5,edc <alt_sys_init+0x194>
     ecc:	00c007c4 	movi	r3,31
     ed0:	00800034 	movhi	r2,0
     ed4:	109baf04 	addi	r2,r2,28348
     ed8:	10c01115 	stw	r3,68(r2)
     edc:	04000034 	movhi	r16,0
     ee0:	841baf04 	addi	r16,r16,28348
     ee4:	8009883a 	mov	r4,r16
     ee8:	000202c0 	call	202c <alt_up_char_buffer_init>
     eec:	8009883a 	mov	r4,r16
     ef0:	01400034 	movhi	r5,0
     ef4:	295e4404 	addi	r5,r5,30992
     ef8:	0002c480 	call	2c48 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     efc:	01800034 	movhi	r6,0
     f00:	319bc104 	addi	r6,r6,28420
     f04:	30c00a17 	ldw	r3,40(r6)
     f08:	18800017 	ldw	r2,0(r3)
     f0c:	30800b15 	stw	r2,44(r6)
     f10:	18800117 	ldw	r2,4(r3)
     f14:	30800c15 	stw	r2,48(r6)
     f18:	19000204 	addi	r4,r3,8
     f1c:	2080000b 	ldhu	r2,0(r4)
     f20:	30800f15 	stw	r2,60(r6)
     f24:	20800017 	ldw	r2,0(r4)
     f28:	1004d43a 	srli	r2,r2,16
     f2c:	30801015 	stw	r2,64(r6)
     f30:	18c00304 	addi	r3,r3,12
     f34:	18800017 	ldw	r2,0(r3)
     f38:	1005d07a 	srai	r2,r2,1
     f3c:	01000044 	movi	r4,1
     f40:	1104703a 	and	r2,r2,r4
     f44:	30800d15 	stw	r2,52(r6)
     f48:	18800017 	ldw	r2,0(r3)
     f4c:	1005d13a 	srai	r2,r2,4
     f50:	114003cc 	andi	r5,r2,15
     f54:	31400e15 	stw	r5,56(r6)
     f58:	1a000017 	ldw	r8,0(r3)
     f5c:	400ed43a 	srli	r7,r8,16
     f60:	2900021e 	bne	r5,r4,f6c <alt_sys_init+0x224>
     f64:	30001115 	stw	zero,68(r6)
     f68:	00000b06 	br	f98 <alt_sys_init+0x250>
     f6c:	00800084 	movi	r2,2
     f70:	2880051e 	bne	r5,r2,f88 <alt_sys_init+0x240>
     f74:	00c00044 	movi	r3,1
     f78:	00800034 	movhi	r2,0
     f7c:	109bc104 	addi	r2,r2,28420
     f80:	10c01115 	stw	r3,68(r2)
     f84:	00000406 	br	f98 <alt_sys_init+0x250>
     f88:	00c00084 	movi	r3,2
     f8c:	00800034 	movhi	r2,0
     f90:	109bc104 	addi	r2,r2,28420
     f94:	10c01115 	stw	r3,68(r2)
     f98:	01000034 	movhi	r4,0
     f9c:	211bc104 	addi	r4,r4,28420
     fa0:	38c03fcc 	andi	r3,r7,255
     fa4:	01800804 	movi	r6,32
     fa8:	30c5c83a 	sub	r2,r6,r3
     fac:	017fffc4 	movi	r5,-1
     fb0:	2884d83a 	srl	r2,r5,r2
     fb4:	20801215 	stw	r2,72(r4)
     fb8:	20801117 	ldw	r2,68(r4)
     fbc:	1887883a 	add	r3,r3,r2
     fc0:	20c01315 	stw	r3,76(r4)
     fc4:	4004d63a 	srli	r2,r8,24
     fc8:	308dc83a 	sub	r6,r6,r2
     fcc:	298ad83a 	srl	r5,r5,r6
     fd0:	21401415 	stw	r5,80(r4)
     fd4:	01400034 	movhi	r5,0
     fd8:	295e4404 	addi	r5,r5,30992
     fdc:	0002c480 	call	2c48 <alt_dev_llist_insert>
}
     fe0:	dfc00217 	ldw	ra,8(sp)
     fe4:	dc400117 	ldw	r17,4(sp)
     fe8:	dc000017 	ldw	r16,0(sp)
     fec:	dec00304 	addi	sp,sp,12
     ff0:	f800283a 	ret

00000ff4 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     ff4:	deffff04 	addi	sp,sp,-4
     ff8:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     ffc:	21000017 	ldw	r4,0(r4)
    1000:	21000a04 	addi	r4,r4,40
    1004:	00012c40 	call	12c4 <altera_avalon_jtag_uart_ioctl>
}
    1008:	dfc00017 	ldw	ra,0(sp)
    100c:	dec00104 	addi	sp,sp,4
    1010:	f800283a 	ret

00001014 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1014:	deffff04 	addi	sp,sp,-4
    1018:	dfc00015 	stw	ra,0(sp)
    101c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1020:	21000017 	ldw	r4,0(r4)
    1024:	21000a04 	addi	r4,r4,40
    1028:	11400217 	ldw	r5,8(r2)
    102c:	000108c0 	call	108c <altera_avalon_jtag_uart_close>
}
    1030:	dfc00017 	ldw	ra,0(sp)
    1034:	dec00104 	addi	sp,sp,4
    1038:	f800283a 	ret

0000103c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    103c:	deffff04 	addi	sp,sp,-4
    1040:	dfc00015 	stw	ra,0(sp)
    1044:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1048:	21000017 	ldw	r4,0(r4)
    104c:	21000a04 	addi	r4,r4,40
    1050:	11c00217 	ldw	r7,8(r2)
    1054:	00014a00 	call	14a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1058:	dfc00017 	ldw	ra,0(sp)
    105c:	dec00104 	addi	sp,sp,4
    1060:	f800283a 	ret

00001064 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1064:	deffff04 	addi	sp,sp,-4
    1068:	dfc00015 	stw	ra,0(sp)
    106c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1070:	21000017 	ldw	r4,0(r4)
    1074:	21000a04 	addi	r4,r4,40
    1078:	11c00217 	ldw	r7,8(r2)
    107c:	00013380 	call	1338 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1080:	dfc00017 	ldw	ra,0(sp)
    1084:	dec00104 	addi	sp,sp,4
    1088:	f800283a 	ret

0000108c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    108c:	21800c17 	ldw	r6,48(r4)
    1090:	2950000c 	andi	r5,r5,16384
    1094:	280b003a 	cmpeq	r5,r5,zero
    1098:	00000306 	br	10a8 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    109c:	2800021e 	bne	r5,zero,10a8 <altera_avalon_jtag_uart_close+0x1c>
    10a0:	00bffd44 	movi	r2,-11
    10a4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    10a8:	20800d17 	ldw	r2,52(r4)
    10ac:	11800326 	beq	r2,r6,10bc <altera_avalon_jtag_uart_close+0x30>
    10b0:	20c00917 	ldw	r3,36(r4)
    10b4:	20800117 	ldw	r2,4(r4)
    10b8:	18bff836 	bltu	r3,r2,109c <altera_avalon_jtag_uart_close+0x10>
    10bc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    10c0:	f800283a 	ret

000010c4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    10c4:	20800017 	ldw	r2,0(r4)
    10c8:	10c00104 	addi	r3,r2,4
    10cc:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    10d0:	01410004 	movi	r5,1024
    10d4:	1144703a 	and	r2,r2,r5
    10d8:	10000526 	beq	r2,zero,10f0 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    10dc:	20800817 	ldw	r2,32(r4)
    10e0:	1144b03a 	or	r2,r2,r5
    10e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    10e8:	20000915 	stw	zero,36(r4)
    10ec:	00000606 	br	1108 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    10f0:	20c00917 	ldw	r3,36(r4)
    10f4:	00a00034 	movhi	r2,32768
    10f8:	10bfff04 	addi	r2,r2,-4
    10fc:	10c00236 	bltu	r2,r3,1108 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    1100:	18800044 	addi	r2,r3,1
    1104:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1108:	00800074 	movhi	r2,1
    110c:	10a5a104 	addi	r2,r2,-27004
    1110:	10800017 	ldw	r2,0(r2)
    1114:	f800283a 	ret

00001118 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1118:	defffe04 	addi	sp,sp,-8
    111c:	dfc00115 	stw	ra,4(sp)
    1120:	dc000015 	stw	r16,0(sp)
    1124:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1128:	00c00044 	movi	r3,1
    112c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1130:	20800017 	ldw	r2,0(r4)
    1134:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    1138:	3009883a 	mov	r4,r6
    113c:	800b883a 	mov	r5,r16
    1140:	01800034 	movhi	r6,0
    1144:	31846404 	addi	r6,r6,4496
    1148:	0002e440 	call	2e44 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    114c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1150:	81000204 	addi	r4,r16,8
    1154:	00800074 	movhi	r2,1
    1158:	10a5a104 	addi	r2,r2,-27004
    115c:	11400017 	ldw	r5,0(r2)
    1160:	01800034 	movhi	r6,0
    1164:	31843104 	addi	r6,r6,4292
    1168:	800f883a 	mov	r7,r16
    116c:	0002acc0 	call	2acc <alt_alarm_start>
    1170:	1000030e 	bge	r2,zero,1180 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1174:	00a00034 	movhi	r2,32768
    1178:	10bfffc4 	addi	r2,r2,-1
    117c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1180:	dfc00117 	ldw	ra,4(sp)
    1184:	dc000017 	ldw	r16,0(sp)
    1188:	dec00204 	addi	sp,sp,8
    118c:	f800283a 	ret

00001190 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    1190:	22000017 	ldw	r8,0(r4)
    1194:	03800104 	movi	r14,4
    1198:	4399883a 	add	r12,r8,r14
    119c:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    11a0:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    11a4:	5880c00c 	andi	r2,r11,768
    11a8:	10004526 	beq	r2,zero,12c0 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    11ac:	5880400c 	andi	r2,r11,256
    11b0:	10002126 	beq	r2,zero,1238 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11b4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    11b8:	10800044 	addi	r2,r2,1
    11bc:	1081ffcc 	andi	r2,r2,2047
    11c0:	20c00b17 	ldw	r3,44(r4)
    11c4:	10c01626 	beq	r2,r3,1220 <altera_avalon_jtag_uart_irq+0x90>
    11c8:	02a00014 	movui	r10,32768
    11cc:	02400e04 	movi	r9,56
    11d0:	01c00044 	movi	r7,1
    11d4:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    11d8:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    11dc:	2a84703a 	and	r2,r5,r10
    11e0:	10000d26 	beq	r2,zero,1218 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    11e4:	20800a17 	ldw	r2,40(r4)
    11e8:	1105883a 	add	r2,r2,r4
    11ec:	1245883a 	add	r2,r2,r9
    11f0:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11f4:	20800a17 	ldw	r2,40(r4)
    11f8:	11c5883a 	add	r2,r2,r7
    11fc:	1184703a 	and	r2,r2,r6
    1200:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1204:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1208:	11c5883a 	add	r2,r2,r7
    120c:	1184703a 	and	r2,r2,r6
    1210:	20c00b17 	ldw	r3,44(r4)
    1214:	10fff01e 	bne	r2,r3,11d8 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1218:	2b44703a 	and	r2,r5,r13
    121c:	10000626 	beq	r2,zero,1238 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1220:	20800817 	ldw	r2,32(r4)
    1224:	00ffff84 	movi	r3,-2
    1228:	10c4703a 	and	r2,r2,r3
    122c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1230:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1234:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1238:	5880800c 	andi	r2,r11,512
    123c:	103fd826 	beq	r2,zero,11a0 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1240:	5b44703a 	and	r2,r11,r13
    1244:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    1248:	283fd526 	beq	r5,zero,11a0 <altera_avalon_jtag_uart_irq+0x10>
    124c:	20c00d17 	ldw	r3,52(r4)
    1250:	20800c17 	ldw	r2,48(r4)
    1254:	18801126 	beq	r3,r2,129c <altera_avalon_jtag_uart_irq+0x10c>
    1258:	02420e04 	movi	r9,2104
    125c:	01800044 	movi	r6,1
    1260:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1264:	20800d17 	ldw	r2,52(r4)
    1268:	1105883a 	add	r2,r2,r4
    126c:	1245883a 	add	r2,r2,r9
    1270:	10800007 	ldb	r2,0(r2)
    1274:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1278:	20800d17 	ldw	r2,52(r4)
    127c:	1185883a 	add	r2,r2,r6
    1280:	11c4703a 	and	r2,r2,r7
    1284:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1288:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    128c:	283fc426 	beq	r5,zero,11a0 <altera_avalon_jtag_uart_irq+0x10>
    1290:	20c00d17 	ldw	r3,52(r4)
    1294:	20800c17 	ldw	r2,48(r4)
    1298:	18bff21e 	bne	r3,r2,1264 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    129c:	20c00817 	ldw	r3,32(r4)
    12a0:	00bfff44 	movi	r2,-3
    12a4:	1886703a 	and	r3,r3,r2
    12a8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    12ac:	20800017 	ldw	r2,0(r4)
    12b0:	1385883a 	add	r2,r2,r14
    12b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    12b8:	60800037 	ldwio	r2,0(r12)
    12bc:	003fb806 	br	11a0 <altera_avalon_jtag_uart_irq+0x10>
    12c0:	f800283a 	ret

000012c4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    12c4:	009a8044 	movi	r2,27137
    12c8:	28800326 	beq	r5,r2,12d8 <altera_avalon_jtag_uart_ioctl+0x14>
    12cc:	009a8084 	movi	r2,27138
    12d0:	2880171e 	bne	r5,r2,1330 <altera_avalon_jtag_uart_ioctl+0x6c>
    12d4:	00000d06 	br	130c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    12d8:	20c00117 	ldw	r3,4(r4)
    12dc:	00a00034 	movhi	r2,32768
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	18801226 	beq	r3,r2,1330 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    12e8:	31800017 	ldw	r6,0(r6)
    12ec:	30ffff84 	addi	r3,r6,-2
    12f0:	10bfff44 	addi	r2,r2,-3
    12f4:	10c0022e 	bgeu	r2,r3,1300 <altera_avalon_jtag_uart_ioctl+0x3c>
    12f8:	01a00034 	movhi	r6,32768
    12fc:	31bfff84 	addi	r6,r6,-2
    1300:	21800115 	stw	r6,4(r4)
    1304:	0005883a 	mov	r2,zero
    1308:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    130c:	20c00117 	ldw	r3,4(r4)
    1310:	00a00034 	movhi	r2,32768
    1314:	10bfffc4 	addi	r2,r2,-1
    1318:	18800526 	beq	r3,r2,1330 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    131c:	20800917 	ldw	r2,36(r4)
    1320:	10c5803a 	cmpltu	r2,r2,r3
    1324:	30800015 	stw	r2,0(r6)
    1328:	0005883a 	mov	r2,zero
    132c:	f800283a 	ret
    1330:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    1334:	f800283a 	ret

00001338 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1338:	defff604 	addi	sp,sp,-40
    133c:	dfc00915 	stw	ra,36(sp)
    1340:	df000815 	stw	fp,32(sp)
    1344:	ddc00715 	stw	r23,28(sp)
    1348:	dd800615 	stw	r22,24(sp)
    134c:	dd400515 	stw	r21,20(sp)
    1350:	dd000415 	stw	r20,16(sp)
    1354:	dcc00315 	stw	r19,12(sp)
    1358:	dc800215 	stw	r18,8(sp)
    135c:	dc400115 	stw	r17,4(sp)
    1360:	dc000015 	stw	r16,0(sp)
    1364:	2025883a 	mov	r18,r4
    1368:	282f883a 	mov	r23,r5
    136c:	3027883a 	mov	r19,r6
    1370:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1374:	0180220e 	bge	zero,r6,1400 <altera_avalon_jtag_uart_read+0xc8>
    1378:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    137c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    1380:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    1384:	b4400236 	bltu	r22,r17,1390 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    1388:	b461c83a 	sub	r16,r22,r17
    138c:	00000206 	br	1398 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1390:	00820004 	movi	r2,2048
    1394:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    1398:	80000d26 	beq	r16,zero,13d0 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    139c:	9829883a 	mov	r20,r19
    13a0:	9c001d36 	bltu	r19,r16,1418 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    13a4:	91400e04 	addi	r5,r18,56
    13a8:	a809883a 	mov	r4,r21
    13ac:	2c4b883a 	add	r5,r5,r17
    13b0:	800d883a 	mov	r6,r16
    13b4:	00033980 	call	3398 <memcpy>
      ptr   += n;
    13b8:	ac2b883a 	add	r21,r21,r16
      space -= n;
    13bc:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13c0:	8445883a 	add	r2,r16,r17
    13c4:	1081ffcc 	andi	r2,r2,2047
    13c8:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    13cc:	04ffeb16 	blt	zero,r19,137c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    13d0:	adc01c1e 	bne	r21,r23,1444 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    13d4:	e090000c 	andi	r2,fp,16384
    13d8:	10000d1e 	bne	r2,zero,1410 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    13dc:	90800a17 	ldw	r2,40(r18)
    13e0:	b080031e 	bne	r22,r2,13f0 <altera_avalon_jtag_uart_read+0xb8>
    13e4:	90c00917 	ldw	r3,36(r18)
    13e8:	90800117 	ldw	r2,4(r18)
    13ec:	18bffb36 	bltu	r3,r2,13dc <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    13f0:	90800a17 	ldw	r2,40(r18)
    13f4:	b0800426 	beq	r22,r2,1408 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    13f8:	04c0030e 	bge	zero,r19,1408 <altera_avalon_jtag_uart_read+0xd0>
    13fc:	003fde06 	br	1378 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1400:	3890000c 	andi	r2,r7,16384
    1404:	1000021e 	bne	r2,zero,1410 <altera_avalon_jtag_uart_read+0xd8>
    1408:	00bffec4 	movi	r2,-5
    140c:	00001806 	br	1470 <altera_avalon_jtag_uart_read+0x138>
    1410:	00bffd44 	movi	r2,-11
    1414:	00001606 	br	1470 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1418:	91400e04 	addi	r5,r18,56
    141c:	a809883a 	mov	r4,r21
    1420:	894b883a 	add	r5,r17,r5
    1424:	980d883a 	mov	r6,r19
    1428:	00033980 	call	3398 <memcpy>
      ptr   += n;
    142c:	aceb883a 	add	r21,r21,r19
      space -= n;
    1430:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1434:	a445883a 	add	r2,r20,r17
    1438:	1081ffcc 	andi	r2,r2,2047
    143c:	90800b15 	stw	r2,44(r18)
    1440:	003fe306 	br	13d0 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1444:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1448:	00bfff84 	movi	r2,-2
    144c:	2084703a 	and	r2,r4,r2
    1450:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1454:	90800817 	ldw	r2,32(r18)
    1458:	10800054 	ori	r2,r2,1
    145c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1460:	90c00017 	ldw	r3,0(r18)
    1464:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1468:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    146c:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1470:	dfc00917 	ldw	ra,36(sp)
    1474:	df000817 	ldw	fp,32(sp)
    1478:	ddc00717 	ldw	r23,28(sp)
    147c:	dd800617 	ldw	r22,24(sp)
    1480:	dd400517 	ldw	r21,20(sp)
    1484:	dd000417 	ldw	r20,16(sp)
    1488:	dcc00317 	ldw	r19,12(sp)
    148c:	dc800217 	ldw	r18,8(sp)
    1490:	dc400117 	ldw	r17,4(sp)
    1494:	dc000017 	ldw	r16,0(sp)
    1498:	dec00a04 	addi	sp,sp,40
    149c:	f800283a 	ret

000014a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    14a0:	defff804 	addi	sp,sp,-32
    14a4:	dfc00715 	stw	ra,28(sp)
    14a8:	dd800615 	stw	r22,24(sp)
    14ac:	dd400515 	stw	r21,20(sp)
    14b0:	dd000415 	stw	r20,16(sp)
    14b4:	dcc00315 	stw	r19,12(sp)
    14b8:	dc800215 	stw	r18,8(sp)
    14bc:	dc400115 	stw	r17,4(sp)
    14c0:	dc000015 	stw	r16,0(sp)
    14c4:	2021883a 	mov	r16,r4
    14c8:	282d883a 	mov	r22,r5
    14cc:	3011883a 	mov	r8,r6
    14d0:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    14d4:	01800616 	blt	zero,r6,14f0 <altera_avalon_jtag_uart_write+0x50>
    14d8:	2829883a 	mov	r20,r5
    14dc:	00002106 	br	1564 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    14e0:	a585c83a 	sub	r2,r20,r22
    14e4:	00004306 	br	15f4 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    14e8:	00bffd44 	movi	r2,-11
    14ec:	00004106 	br	15f4 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    14f0:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    14f4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    14f8:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    14fc:	9140032e 	bgeu	r18,r5,150c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1500:	2c85c83a 	sub	r2,r5,r18
    1504:	11bfffc4 	addi	r6,r2,-1
    1508:	00000606 	br	1524 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    150c:	28000326 	beq	r5,zero,151c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1510:	00820004 	movi	r2,2048
    1514:	148dc83a 	sub	r6,r2,r18
    1518:	00000206 	br	1524 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    151c:	0081ffc4 	movi	r2,2047
    1520:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    1524:	30002626 	beq	r6,zero,15c0 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    1528:	4027883a 	mov	r19,r8
    152c:	3023883a 	mov	r17,r6
    1530:	4180012e 	bgeu	r8,r6,1538 <altera_avalon_jtag_uart_write+0x98>
    1534:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    1538:	81020e04 	addi	r4,r16,2104
    153c:	2489883a 	add	r4,r4,r18
    1540:	a00b883a 	mov	r5,r20
    1544:	880d883a 	mov	r6,r17
    1548:	00033980 	call	3398 <memcpy>
      ptr   += n;
    154c:	a469883a 	add	r20,r20,r17
      count -= n;
    1550:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1554:	9445883a 	add	r2,r18,r17
    1558:	1081ffcc 	andi	r2,r2,2047
    155c:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1560:	023fe416 	blt	zero,r8,14f4 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1564:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1568:	00bfff84 	movi	r2,-2
    156c:	2084703a 	and	r2,r4,r2
    1570:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1574:	80800817 	ldw	r2,32(r16)
    1578:	10800094 	ori	r2,r2,2
    157c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1580:	80c00017 	ldw	r3,0(r16)
    1584:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1588:	2001703a 	wrctl	status,r4
    158c:	00000706 	br	15ac <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1590:	80800d17 	ldw	r2,52(r16)
    1594:	1140031e 	bne	r2,r5,15a4 <altera_avalon_jtag_uart_write+0x104>
    1598:	80c00917 	ldw	r3,36(r16)
    159c:	80800117 	ldw	r2,4(r16)
    15a0:	18bffb36 	bltu	r3,r2,1590 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    15a4:	80800d17 	ldw	r2,52(r16)
    15a8:	117fed1e 	bne	r2,r5,1560 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    15ac:	b53fcc1e 	bne	r22,r20,14e0 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    15b0:	a890000c 	andi	r2,r21,16384
    15b4:	103fcc1e 	bne	r2,zero,14e8 <altera_avalon_jtag_uart_write+0x48>
    15b8:	00bffec4 	movi	r2,-5
    15bc:	00000d06 	br	15f4 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15c0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15c4:	00bfff84 	movi	r2,-2
    15c8:	2084703a 	and	r2,r4,r2
    15cc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    15d0:	80800817 	ldw	r2,32(r16)
    15d4:	10800094 	ori	r2,r2,2
    15d8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    15dc:	80c00017 	ldw	r3,0(r16)
    15e0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15e4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    15e8:	a890000c 	andi	r2,r21,16384
    15ec:	103fe826 	beq	r2,zero,1590 <altera_avalon_jtag_uart_write+0xf0>
    15f0:	003fee06 	br	15ac <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    15f4:	dfc00717 	ldw	ra,28(sp)
    15f8:	dd800617 	ldw	r22,24(sp)
    15fc:	dd400517 	ldw	r21,20(sp)
    1600:	dd000417 	ldw	r20,16(sp)
    1604:	dcc00317 	ldw	r19,12(sp)
    1608:	dc800217 	ldw	r18,8(sp)
    160c:	dc400117 	ldw	r17,4(sp)
    1610:	dc000017 	ldw	r16,0(sp)
    1614:	dec00804 	addi	sp,sp,32
    1618:	f800283a 	ret

0000161c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    161c:	deffff04 	addi	sp,sp,-4
    1620:	dfc00015 	stw	ra,0(sp)
    1624:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1628:	00c00074 	movhi	r3,1
    162c:	18e5a104 	addi	r3,r3,-27004
    1630:	18800017 	ldw	r2,0(r3)
    1634:	1000011e 	bne	r2,zero,163c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1638:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    163c:	008001c4 	movi	r2,7
    1640:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1644:	3009883a 	mov	r4,r6
    1648:	01800034 	movhi	r6,0
    164c:	31859804 	addi	r6,r6,5728
    1650:	0002e440 	call	2e44 <alt_irq_register>
#endif  
}
    1654:	dfc00017 	ldw	ra,0(sp)
    1658:	dec00104 	addi	sp,sp,4
    165c:	f800283a 	ret

00001660 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1660:	defffe04 	addi	sp,sp,-8
    1664:	dfc00115 	stw	ra,4(sp)
    1668:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    166c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1670:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1674:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1678:	00bfff84 	movi	r2,-2
    167c:	8084703a 	and	r2,r16,r2
    1680:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    1684:	00030d40 	call	30d4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1688:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	dc000017 	ldw	r16,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    169c:	2800021e 	bne	r5,zero,16a8 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    16a0:	2005883a 	mov	r2,r4
    16a4:	00000106 	br	16ac <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    16a8:	20801014 	ori	r2,r4,64
    16ac:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    16b0:	10802014 	ori	r2,r2,128
    16b4:	f800283a 	ret

000016b8 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    16b8:	28c00003 	ldbu	r3,0(r5)
    16bc:	18803fcc 	andi	r2,r3,255
    16c0:	1080201c 	xori	r2,r2,128
    16c4:	10bfe004 	addi	r2,r2,-128
    16c8:	10000d26 	beq	r2,zero,1700 <alt_up_character_lcd_string+0x48>
    16cc:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    16d0:	20800a17 	ldw	r2,40(r4)
    16d4:	1185883a 	add	r2,r2,r6
    16d8:	18c03fcc 	andi	r3,r3,255
    16dc:	18c0201c 	xori	r3,r3,128
    16e0:	18ffe004 	addi	r3,r3,-128
    16e4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    16e8:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    16ec:	28c00003 	ldbu	r3,0(r5)
    16f0:	18803fcc 	andi	r2,r3,255
    16f4:	1080201c 	xori	r2,r2,128
    16f8:	10bfe004 	addi	r2,r2,-128
    16fc:	103ff41e 	bne	r2,zero,16d0 <alt_up_character_lcd_string+0x18>
    1700:	f800283a 	ret

00001704 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1704:	30000926 	beq	r6,zero,172c <alt_up_character_lcd_write+0x28>
    1708:	000f883a 	mov	r7,zero
    170c:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    1710:	20800a17 	ldw	r2,40(r4)
    1714:	1205883a 	add	r2,r2,r8
    1718:	3947883a 	add	r3,r7,r5
    171c:	18c00007 	ldb	r3,0(r3)
    1720:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1724:	3a0f883a 	add	r7,r7,r8
    1728:	31fff91e 	bne	r6,r7,1710 <alt_up_character_lcd_write+0xc>
    172c:	f800283a 	ret

00001730 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    1730:	deffff04 	addi	sp,sp,-4
    1734:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1738:	21000017 	ldw	r4,0(r4)
    173c:	00017040 	call	1704 <alt_up_character_lcd_write>
	return 0;
}
    1740:	0005883a 	mov	r2,zero
    1744:	dfc00017 	ldw	ra,0(sp)
    1748:	dec00104 	addi	sp,sp,4
    174c:	f800283a 	ret

00001750 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1750:	20c00a17 	ldw	r3,40(r4)
    1754:	00800044 	movi	r2,1
    1758:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    175c:	f800283a 	ret

00001760 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1760:	20800a17 	ldw	r2,40(r4)
    1764:	29403fcc 	andi	r5,r5,255
    1768:	11400025 	stbio	r5,0(r2)
}
    176c:	f800283a 	ret

00001770 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1770:	deffff04 	addi	sp,sp,-4
    1774:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    1778:	014003c4 	movi	r5,15
    177c:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
}
    1780:	dfc00017 	ldw	ra,0(sp)
    1784:	dec00104 	addi	sp,sp,4
    1788:	f800283a 	ret

0000178c <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    178c:	deffff04 	addi	sp,sp,-4
    1790:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1794:	01400304 	movi	r5,12
    1798:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
}
    179c:	dfc00017 	ldw	ra,0(sp)
    17a0:	dec00104 	addi	sp,sp,4
    17a4:	f800283a 	ret

000017a8 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    17a8:	defffd04 	addi	sp,sp,-12
    17ac:	dfc00215 	stw	ra,8(sp)
    17b0:	dc400115 	stw	r17,4(sp)
    17b4:	dc000015 	stw	r16,0(sp)
    17b8:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    17bc:	008009c4 	movi	r2,39
    17c0:	11400e36 	bltu	r2,r5,17fc <alt_up_character_lcd_erase_pos+0x54>
    17c4:	04400044 	movi	r17,1
    17c8:	89800c36 	bltu	r17,r6,17fc <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    17cc:	2809883a 	mov	r4,r5
    17d0:	300b883a 	mov	r5,r6
    17d4:	000169c0 	call	169c <get_DDRAM_addr>
    17d8:	8009883a 	mov	r4,r16
    17dc:	11403fcc 	andi	r5,r2,255
    17e0:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    17e4:	80800a17 	ldw	r2,40(r16)
    17e8:	1445883a 	add	r2,r2,r17
    17ec:	00c00084 	movi	r3,2
    17f0:	10c00025 	stbio	r3,0(r2)
    17f4:	0005883a 	mov	r2,zero
    17f8:	00000106 	br	1800 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    17fc:	00bfffc4 	movi	r2,-1
}
    1800:	dfc00217 	ldw	ra,8(sp)
    1804:	dc400117 	ldw	r17,4(sp)
    1808:	dc000017 	ldw	r16,0(sp)
    180c:	dec00304 	addi	sp,sp,12
    1810:	f800283a 	ret

00001814 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1814:	defffa04 	addi	sp,sp,-24
    1818:	dfc00515 	stw	ra,20(sp)
    181c:	dd000415 	stw	r20,16(sp)
    1820:	dcc00315 	stw	r19,12(sp)
    1824:	dc800215 	stw	r18,8(sp)
    1828:	dc400115 	stw	r17,4(sp)
    182c:	dc000015 	stw	r16,0(sp)
    1830:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1834:	28001326 	beq	r5,zero,1884 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1838:	0140020e 	bge	zero,r5,1844 <alt_up_character_lcd_shift_display+0x30>
    183c:	05000704 	movi	r20,28
    1840:	00000106 	br	1848 <alt_up_character_lcd_shift_display+0x34>
    1844:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1848:	2800010e 	bge	r5,zero,1850 <alt_up_character_lcd_shift_display+0x3c>
    184c:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    1850:	00bfffc4 	movi	r2,-1
    1854:	28a1883a 	add	r16,r5,r2
    1858:	80c03fcc 	andi	r3,r16,255
    185c:	10803fcc 	andi	r2,r2,255
    1860:	18800826 	beq	r3,r2,1884 <alt_up_character_lcd_shift_display+0x70>
    1864:	04bfffc4 	movi	r18,-1
    1868:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    186c:	9809883a 	mov	r4,r19
    1870:	a1403fcc 	andi	r5,r20,255
    1874:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1878:	84a1883a 	add	r16,r16,r18
    187c:	80803fcc 	andi	r2,r16,255
    1880:	147ffa1e 	bne	r2,r17,186c <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1884:	dfc00517 	ldw	ra,20(sp)
    1888:	dd000417 	ldw	r20,16(sp)
    188c:	dcc00317 	ldw	r19,12(sp)
    1890:	dc800217 	ldw	r18,8(sp)
    1894:	dc400117 	ldw	r17,4(sp)
    1898:	dc000017 	ldw	r16,0(sp)
    189c:	dec00604 	addi	sp,sp,24
    18a0:	f800283a 	ret

000018a4 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    18a4:	defffa04 	addi	sp,sp,-24
    18a8:	dfc00515 	stw	ra,20(sp)
    18ac:	dd000415 	stw	r20,16(sp)
    18b0:	dcc00315 	stw	r19,12(sp)
    18b4:	dc800215 	stw	r18,8(sp)
    18b8:	dc400115 	stw	r17,4(sp)
    18bc:	dc000015 	stw	r16,0(sp)
    18c0:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    18c4:	28001326 	beq	r5,zero,1914 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    18c8:	0140020e 	bge	zero,r5,18d4 <alt_up_character_lcd_shift_cursor+0x30>
    18cc:	05000504 	movi	r20,20
    18d0:	00000106 	br	18d8 <alt_up_character_lcd_shift_cursor+0x34>
    18d4:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    18d8:	2800010e 	bge	r5,zero,18e0 <alt_up_character_lcd_shift_cursor+0x3c>
    18dc:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    18e0:	00bfffc4 	movi	r2,-1
    18e4:	28a1883a 	add	r16,r5,r2
    18e8:	80c03fcc 	andi	r3,r16,255
    18ec:	10803fcc 	andi	r2,r2,255
    18f0:	18800826 	beq	r3,r2,1914 <alt_up_character_lcd_shift_cursor+0x70>
    18f4:	04bfffc4 	movi	r18,-1
    18f8:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    18fc:	9809883a 	mov	r4,r19
    1900:	a1403fcc 	andi	r5,r20,255
    1904:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1908:	84a1883a 	add	r16,r16,r18
    190c:	80803fcc 	andi	r2,r16,255
    1910:	147ffa1e 	bne	r2,r17,18fc <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1914:	dfc00517 	ldw	ra,20(sp)
    1918:	dd000417 	ldw	r20,16(sp)
    191c:	dcc00317 	ldw	r19,12(sp)
    1920:	dc800217 	ldw	r18,8(sp)
    1924:	dc400117 	ldw	r17,4(sp)
    1928:	dc000017 	ldw	r16,0(sp)
    192c:	dec00604 	addi	sp,sp,24
    1930:	f800283a 	ret

00001934 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    1934:	defffe04 	addi	sp,sp,-8
    1938:	dfc00115 	stw	ra,4(sp)
    193c:	dc000015 	stw	r16,0(sp)
    1940:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    1944:	008009c4 	movi	r2,39
    1948:	11400a36 	bltu	r2,r5,1974 <alt_up_character_lcd_set_cursor_pos+0x40>
    194c:	00800044 	movi	r2,1
    1950:	11800836 	bltu	r2,r6,1974 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1954:	2809883a 	mov	r4,r5
    1958:	300b883a 	mov	r5,r6
    195c:	000169c0 	call	169c <get_DDRAM_addr>
    1960:	8009883a 	mov	r4,r16
    1964:	11403fcc 	andi	r5,r2,255
    1968:	00017600 	call	1760 <alt_up_character_lcd_send_cmd>
    196c:	0005883a 	mov	r2,zero
    1970:	00000106 	br	1978 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    1974:	00bfffc4 	movi	r2,-1
}
    1978:	dfc00117 	ldw	ra,4(sp)
    197c:	dc000017 	ldw	r16,0(sp)
    1980:	dec00204 	addi	sp,sp,8
    1984:	f800283a 	ret

00001988 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    1988:	deffff04 	addi	sp,sp,-4
    198c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1990:	01400034 	movhi	r5,0
    1994:	295e4404 	addi	r5,r5,30992
    1998:	0002cb80 	call	2cb8 <alt_find_dev>

  return dev;
}
    199c:	dfc00017 	ldw	ra,0(sp)
    19a0:	dec00104 	addi	sp,sp,4
    19a4:	f800283a 	ret

000019a8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    19a8:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    19ac:	1004c03a 	cmpne	r2,r2,zero
    19b0:	f800283a 	ret

000019b4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    19b4:	2080004c 	andi	r2,r4,1
    19b8:	f800283a 	ret

000019bc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    19bc:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    19c0:	1004c03a 	cmpne	r2,r2,zero
    19c4:	f800283a 	ret

000019c8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    19c8:	2004d43a 	srli	r2,r4,16
    19cc:	f800283a 	ret

000019d0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    19d0:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    19d4:	1004c03a 	cmpne	r2,r2,zero
    19d8:	f800283a 	ret

000019dc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    19dc:	20803fcc 	andi	r2,r4,255
    19e0:	f800283a 	ret

000019e4 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    19e4:	deffff04 	addi	sp,sp,-4
    19e8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    19ec:	01400034 	movhi	r5,0
    19f0:	295e4404 	addi	r5,r5,30992
    19f4:	0002cb80 	call	2cb8 <alt_find_dev>

  return dev;
}
    19f8:	dfc00017 	ldw	ra,0(sp)
    19fc:	dec00104 	addi	sp,sp,4
    1a00:	f800283a 	ret

00001a04 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1a04:	defffe04 	addi	sp,sp,-8
    1a08:	dfc00115 	stw	ra,4(sp)
    1a0c:	dc000015 	stw	r16,0(sp)
    1a10:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1a14:	81000037 	ldwio	r4,0(r16)
    1a18:	00019c80 	call	19c8 <read_num_bytes_available>
    1a1c:	10bfffcc 	andi	r2,r2,65535
    1a20:	103ffc1e 	bne	r2,zero,1a14 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1a24:	dfc00117 	ldw	ra,4(sp)
    1a28:	dc000017 	ldw	r16,0(sp)
    1a2c:	dec00204 	addi	sp,sp,8
    1a30:	f800283a 	ret

00001a34 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1a34:	defffd04 	addi	sp,sp,-12
    1a38:	dfc00215 	stw	ra,8(sp)
    1a3c:	dc400115 	stw	r17,4(sp)
    1a40:	dc000015 	stw	r16,0(sp)
    1a44:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1a48:	20800a17 	ldw	r2,40(r4)
    1a4c:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    1a50:	8009883a 	mov	r4,r16
    1a54:	00019d00 	call	19d0 <read_data_valid>
    1a58:	10803fcc 	andi	r2,r2,255
    1a5c:	1000021e 	bne	r2,zero,1a68 <alt_up_ps2_read_data_byte+0x34>
    1a60:	00bfffc4 	movi	r2,-1
    1a64:	00000406 	br	1a78 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    1a68:	8009883a 	mov	r4,r16
    1a6c:	00019dc0 	call	19dc <read_data_byte>
    1a70:	88800005 	stb	r2,0(r17)
    1a74:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    1a78:	dfc00217 	ldw	ra,8(sp)
    1a7c:	dc400117 	ldw	r17,4(sp)
    1a80:	dc000017 	ldw	r16,0(sp)
    1a84:	dec00304 	addi	sp,sp,12
    1a88:	f800283a 	ret

00001a8c <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1a8c:	defffb04 	addi	sp,sp,-20
    1a90:	dfc00415 	stw	ra,16(sp)
    1a94:	dcc00315 	stw	r19,12(sp)
    1a98:	dc800215 	stw	r18,8(sp)
    1a9c:	dc400115 	stw	r17,4(sp)
    1aa0:	dc000015 	stw	r16,0(sp)
    1aa4:	2025883a 	mov	r18,r4
    1aa8:	2827883a 	mov	r19,r5
    1aac:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1ab0:	90800a17 	ldw	r2,40(r18)
    1ab4:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1ab8:	8009883a 	mov	r4,r16
    1abc:	00019d00 	call	19d0 <read_data_valid>
    1ac0:	10803fcc 	andi	r2,r2,255
    1ac4:	10000526 	beq	r2,zero,1adc <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1ac8:	8009883a 	mov	r4,r16
    1acc:	00019dc0 	call	19dc <read_data_byte>
    1ad0:	98800005 	stb	r2,0(r19)
    1ad4:	0005883a 	mov	r2,zero
    1ad8:	00000506 	br	1af0 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1adc:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1ae0:	90800c17 	ldw	r2,48(r18)
    1ae4:	103ff226 	beq	r2,zero,1ab0 <alt_up_ps2_read_data_byte_timeout+0x24>
    1ae8:	147ff12e 	bgeu	r2,r17,1ab0 <alt_up_ps2_read_data_byte_timeout+0x24>
    1aec:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    1af0:	dfc00417 	ldw	ra,16(sp)
    1af4:	dcc00317 	ldw	r19,12(sp)
    1af8:	dc800217 	ldw	r18,8(sp)
    1afc:	dc400117 	ldw	r17,4(sp)
    1b00:	dc000017 	ldw	r16,0(sp)
    1b04:	dec00504 	addi	sp,sp,20
    1b08:	f800283a 	ret

00001b0c <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1b0c:	deffff04 	addi	sp,sp,-4
    1b10:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1b14:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1b18:	0180010e 	bge	zero,r6,1b20 <alt_up_ps2_read_fd+0x14>
    1b1c:	003fff06 	br	1b1c <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    1b20:	0001a8c0 	call	1a8c <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1b24:	1005003a 	cmpeq	r2,r2,zero
    1b28:	dfc00017 	ldw	ra,0(sp)
    1b2c:	dec00104 	addi	sp,sp,4
    1b30:	f800283a 	ret

00001b34 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1b34:	defffc04 	addi	sp,sp,-16
    1b38:	dfc00315 	stw	ra,12(sp)
    1b3c:	dc400215 	stw	r17,8(sp)
    1b40:	dc000115 	stw	r16,4(sp)
    1b44:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    1b48:	d8000005 	stb	zero,0(sp)
    1b4c:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1b50:	8009883a 	mov	r4,r16
    1b54:	d80b883a 	mov	r5,sp
    1b58:	0001a8c0 	call	1a8c <alt_up_ps2_read_data_byte_timeout>
    1b5c:	1007883a 	mov	r3,r2
		if ( status == 0)
    1b60:	10803fcc 	andi	r2,r2,255
    1b64:	1000041e 	bne	r2,zero,1b78 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    1b68:	d8800003 	ldbu	r2,0(sp)
    1b6c:	147ff81e 	bne	r2,r17,1b50 <alt_up_ps2_wait_for_ack+0x1c>
    1b70:	0005883a 	mov	r2,zero
    1b74:	00000106 	br	1b7c <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1b78:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1b7c:	dfc00317 	ldw	ra,12(sp)
    1b80:	dc400217 	ldw	r17,8(sp)
    1b84:	dc000117 	ldw	r16,4(sp)
    1b88:	dec00404 	addi	sp,sp,16
    1b8c:	f800283a 	ret

00001b90 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1b90:	deffff04 	addi	sp,sp,-4
    1b94:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1b98:	20800a17 	ldw	r2,40(r4)
    1b9c:	29403fcc 	andi	r5,r5,255
    1ba0:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1ba4:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1ba8:	11000137 	ldwio	r4,4(r2)
    1bac:	00019bc0 	call	19bc <read_CE_bit>
    1bb0:	10803fcc 	andi	r2,r2,255
    1bb4:	10000226 	beq	r2,zero,1bc0 <alt_up_ps2_write_data_byte+0x30>
    1bb8:	00bffec4 	movi	r2,-5
    1bbc:	00000106 	br	1bc4 <alt_up_ps2_write_data_byte+0x34>
    1bc0:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1bc4:	dfc00017 	ldw	ra,0(sp)
    1bc8:	dec00104 	addi	sp,sp,4
    1bcc:	f800283a 	ret

00001bd0 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1bd0:	defffb04 	addi	sp,sp,-20
    1bd4:	dfc00415 	stw	ra,16(sp)
    1bd8:	dcc00315 	stw	r19,12(sp)
    1bdc:	dc800215 	stw	r18,8(sp)
    1be0:	dc400115 	stw	r17,4(sp)
    1be4:	dc000015 	stw	r16,0(sp)
    1be8:	2827883a 	mov	r19,r5
    1bec:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1bf0:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1bf4:	01800216 	blt	zero,r6,1c00 <alt_up_ps2_write_fd+0x30>
    1bf8:	0021883a 	mov	r16,zero
    1bfc:	00000806 	br	1c20 <alt_up_ps2_write_fd+0x50>
    1c00:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1c04:	9c05883a 	add	r2,r19,r16
    1c08:	8809883a 	mov	r4,r17
    1c0c:	11400003 	ldbu	r5,0(r2)
    1c10:	0001b900 	call	1b90 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1c14:	1000021e 	bne	r2,zero,1c20 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1c18:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1c1c:	943ff91e 	bne	r18,r16,1c04 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1c20:	8005883a 	mov	r2,r16
    1c24:	dfc00417 	ldw	ra,16(sp)
    1c28:	dcc00317 	ldw	r19,12(sp)
    1c2c:	dc800217 	ldw	r18,8(sp)
    1c30:	dc400117 	ldw	r17,4(sp)
    1c34:	dc000017 	ldw	r16,0(sp)
    1c38:	dec00504 	addi	sp,sp,20
    1c3c:	f800283a 	ret

00001c40 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1c40:	defffe04 	addi	sp,sp,-8
    1c44:	dfc00115 	stw	ra,4(sp)
    1c48:	dc000015 	stw	r16,0(sp)
    1c4c:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1c50:	29403fcc 	andi	r5,r5,255
    1c54:	0001b900 	call	1b90 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1c58:	1000021e 	bne	r2,zero,1c64 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1c5c:	8009883a 	mov	r4,r16
    1c60:	0001b340 	call	1b34 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1c64:	dfc00117 	ldw	ra,4(sp)
    1c68:	dc000017 	ldw	r16,0(sp)
    1c6c:	dec00204 	addi	sp,sp,8
    1c70:	f800283a 	ret

00001c74 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1c74:	defffd04 	addi	sp,sp,-12
    1c78:	dfc00215 	stw	ra,8(sp)
    1c7c:	dc000115 	stw	r16,4(sp)
    1c80:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1c84:	01403fc4 	movi	r5,255
    1c88:	0001c400 	call	1c40 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1c8c:	1000171e 	bne	r2,zero,1cec <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1c90:	8009883a 	mov	r4,r16
    1c94:	d80b883a 	mov	r5,sp
    1c98:	0001a8c0 	call	1a8c <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1c9c:	1000131e 	bne	r2,zero,1cec <alt_up_ps2_init+0x78>
    1ca0:	d8c00003 	ldbu	r3,0(sp)
    1ca4:	00802a84 	movi	r2,170
    1ca8:	1880101e 	bne	r3,r2,1cec <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1cac:	8009883a 	mov	r4,r16
    1cb0:	d80b883a 	mov	r5,sp
    1cb4:	0001a8c0 	call	1a8c <alt_up_ps2_read_data_byte_timeout>
    1cb8:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1cbc:	00bfe304 	movi	r2,-116
    1cc0:	1880031e 	bne	r3,r2,1cd0 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1cc4:	00800044 	movi	r2,1
    1cc8:	80800d15 	stw	r2,52(r16)
    1ccc:	00000706 	br	1cec <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1cd0:	1800061e 	bne	r3,zero,1cec <alt_up_ps2_init+0x78>
    1cd4:	d8800003 	ldbu	r2,0(sp)
    1cd8:	1000041e 	bne	r2,zero,1cec <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1cdc:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1ce0:	8009883a 	mov	r4,r16
    1ce4:	01403d04 	movi	r5,244
    1ce8:	0001b900 	call	1b90 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1cec:	dfc00217 	ldw	ra,8(sp)
    1cf0:	dc000117 	ldw	r16,4(sp)
    1cf4:	dec00304 	addi	sp,sp,12
    1cf8:	f800283a 	ret

00001cfc <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1cfc:	20800a17 	ldw	r2,40(r4)
    1d00:	10800104 	addi	r2,r2,4
    1d04:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1d08:	013fff84 	movi	r4,-2
    1d0c:	1906703a 	and	r3,r3,r4
    1d10:	10c00035 	stwio	r3,0(r2)
}
    1d14:	f800283a 	ret

00001d18 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1d18:	20c00a17 	ldw	r3,40(r4)
    1d1c:	18c00104 	addi	r3,r3,4
    1d20:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1d24:	10800054 	ori	r2,r2,1
    1d28:	18800035 	stwio	r2,0(r3)
}
    1d2c:	f800283a 	ret

00001d30 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1d30:	200495ba 	slli	r2,r4,22
}
    1d34:	1005d7fa 	srai	r2,r2,31
    1d38:	f800283a 	ret

00001d3c <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1d3c:	deffff04 	addi	sp,sp,-4
    1d40:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1d44:	01400034 	movhi	r5,0
    1d48:	295e4404 	addi	r5,r5,30992
    1d4c:	0002cb80 	call	2cb8 <alt_find_dev>

  return dev;
}
    1d50:	dfc00017 	ldw	ra,0(sp)
    1d54:	dec00104 	addi	sp,sp,4
    1d58:	f800283a 	ret

00001d5c <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1d5c:	defffd04 	addi	sp,sp,-12
    1d60:	dfc00215 	stw	ra,8(sp)
    1d64:	dc400115 	stw	r17,4(sp)
    1d68:	dc000015 	stw	r16,0(sp)
    1d6c:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1d70:	20800a17 	ldw	r2,40(r4)
    1d74:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1d78:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1d7c:	8009883a 	mov	r4,r16
    1d80:	0001d300 	call	1d30 <alt_up_rs232_check_parity>
    1d84:	88800005 	stb	r2,0(r17)
    1d88:	8420000c 	andi	r16,r16,32768
    1d8c:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    1d90:	80bfffc4 	addi	r2,r16,-1
    1d94:	dfc00217 	ldw	ra,8(sp)
    1d98:	dc400117 	ldw	r17,4(sp)
    1d9c:	dc000017 	ldw	r16,0(sp)
    1da0:	dec00304 	addi	sp,sp,12
    1da4:	f800283a 	ret

00001da8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1da8:	defff904 	addi	sp,sp,-28
    1dac:	dfc00615 	stw	ra,24(sp)
    1db0:	dd000515 	stw	r20,20(sp)
    1db4:	dcc00415 	stw	r19,16(sp)
    1db8:	dc800315 	stw	r18,12(sp)
    1dbc:	dc400215 	stw	r17,8(sp)
    1dc0:	dc000115 	stw	r16,4(sp)
    1dc4:	2821883a 	mov	r16,r5
    1dc8:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1dcc:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1dd0:	3000021e 	bne	r6,zero,1ddc <alt_up_rs232_read_fd+0x34>
    1dd4:	0025883a 	mov	r18,zero
    1dd8:	00000a06 	br	1e04 <alt_up_rs232_read_fd+0x5c>
    1ddc:	0025883a 	mov	r18,zero
    1de0:	04400044 	movi	r17,1
    1de4:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1de8:	8461883a 	add	r16,r16,r17
    1dec:	9809883a 	mov	r4,r19
    1df0:	d80d883a 	mov	r6,sp
    1df4:	0001d5c0 	call	1d5c <alt_up_rs232_read_data>
    1df8:	1000021e 	bne	r2,zero,1e04 <alt_up_rs232_read_fd+0x5c>
			count++;
    1dfc:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1e00:	a4bff81e 	bne	r20,r18,1de4 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1e04:	9005883a 	mov	r2,r18
    1e08:	dfc00617 	ldw	ra,24(sp)
    1e0c:	dd000517 	ldw	r20,20(sp)
    1e10:	dcc00417 	ldw	r19,16(sp)
    1e14:	dc800317 	ldw	r18,12(sp)
    1e18:	dc400217 	ldw	r17,8(sp)
    1e1c:	dc000117 	ldw	r16,4(sp)
    1e20:	dec00704 	addi	sp,sp,28
    1e24:	f800283a 	ret

00001e28 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1e28:	20800a17 	ldw	r2,40(r4)
    1e2c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1e30:	1004d43a 	srli	r2,r2,16
    1e34:	f800283a 	ret

00001e38 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1e38:	20800a17 	ldw	r2,40(r4)
    1e3c:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1e40:	29403fcc 	andi	r5,r5,255
    1e44:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1e48:	0005883a 	mov	r2,zero
    1e4c:	f800283a 	ret

00001e50 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1e50:	defffb04 	addi	sp,sp,-20
    1e54:	dfc00415 	stw	ra,16(sp)
    1e58:	dcc00315 	stw	r19,12(sp)
    1e5c:	dc800215 	stw	r18,8(sp)
    1e60:	dc400115 	stw	r17,4(sp)
    1e64:	dc000015 	stw	r16,0(sp)
    1e68:	2827883a 	mov	r19,r5
    1e6c:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1e70:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1e74:	3000021e 	bne	r6,zero,1e80 <alt_up_rs232_write_fd+0x30>
    1e78:	0021883a 	mov	r16,zero
    1e7c:	00000806 	br	1ea0 <alt_up_rs232_write_fd+0x50>
    1e80:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1e84:	84c5883a 	add	r2,r16,r19
    1e88:	8809883a 	mov	r4,r17
    1e8c:	11400003 	ldbu	r5,0(r2)
    1e90:	0001e380 	call	1e38 <alt_up_rs232_write_data>
    1e94:	1000021e 	bne	r2,zero,1ea0 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1e98:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1e9c:	943ff91e 	bne	r18,r16,1e84 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    1ea0:	8005883a 	mov	r2,r16
    1ea4:	dfc00417 	ldw	ra,16(sp)
    1ea8:	dcc00317 	ldw	r19,12(sp)
    1eac:	dc800217 	ldw	r18,8(sp)
    1eb0:	dc400117 	ldw	r17,4(sp)
    1eb4:	dc000017 	ldw	r16,0(sp)
    1eb8:	dec00504 	addi	sp,sp,20
    1ebc:	f800283a 	ret

00001ec0 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1ec0:	20800a17 	ldw	r2,40(r4)
    1ec4:	10800104 	addi	r2,r2,4
    1ec8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1ecc:	013fff84 	movi	r4,-2
    1ed0:	1906703a 	and	r3,r3,r4
    1ed4:	10c00035 	stwio	r3,0(r2)
}
    1ed8:	f800283a 	ret

00001edc <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1edc:	20c00a17 	ldw	r3,40(r4)
    1ee0:	18c00104 	addi	r3,r3,4
    1ee4:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1ee8:	10800054 	ori	r2,r2,1
    1eec:	18800035 	stwio	r2,0(r3)
}
    1ef0:	f800283a 	ret

00001ef4 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1ef4:	20800a17 	ldw	r2,40(r4)
    1ef8:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1efc:	10bfffcc 	andi	r2,r2,65535
    1f00:	f800283a 	ret

00001f04 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1f04:	20800c17 	ldw	r2,48(r4)
    1f08:	30801c2e 	bgeu	r6,r2,1f7c <alt_up_char_buffer_string+0x78>
    1f0c:	20800d17 	ldw	r2,52(r4)
    1f10:	38801a2e 	bgeu	r7,r2,1f7c <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1f14:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1f18:	28c00003 	ldbu	r3,0(r5)
    1f1c:	18803fcc 	andi	r2,r3,255
    1f20:	1080201c 	xori	r2,r2,128
    1f24:	10bfe004 	addi	r2,r2,-128
    1f28:	10001626 	beq	r2,zero,1f84 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1f2c:	3a04983a 	sll	r2,r7,r8
    1f30:	308f883a 	add	r7,r6,r2
    1f34:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1f38:	20800b17 	ldw	r2,44(r4)
    1f3c:	3885883a 	add	r2,r7,r2
    1f40:	18c03fcc 	andi	r3,r3,255
    1f44:	18c0201c 	xori	r3,r3,128
    1f48:	18ffe004 	addi	r3,r3,-128
    1f4c:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1f50:	320d883a 	add	r6,r6,r8
    1f54:	20800c17 	ldw	r2,48(r4)
    1f58:	3080082e 	bgeu	r6,r2,1f7c <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1f5c:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1f60:	28c00003 	ldbu	r3,0(r5)
    1f64:	18803fcc 	andi	r2,r3,255
    1f68:	1080201c 	xori	r2,r2,128
    1f6c:	10bfe004 	addi	r2,r2,-128
    1f70:	10000426 	beq	r2,zero,1f84 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1f74:	3a0f883a 	add	r7,r7,r8
    1f78:	003fef06 	br	1f38 <alt_up_char_buffer_string+0x34>
    1f7c:	00bfffc4 	movi	r2,-1
    1f80:	f800283a 	ret
    1f84:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1f88:	f800283a 	ret

00001f8c <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1f8c:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1f90:	20800c17 	ldw	r2,48(r4)
    1f94:	3080112e 	bgeu	r6,r2,1fdc <alt_up_char_buffer_draw+0x50>
    1f98:	20800d17 	ldw	r2,52(r4)
    1f9c:	38800f2e 	bgeu	r7,r2,1fdc <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1fa0:	20c00f17 	ldw	r3,60(r4)
    1fa4:	30c6703a 	and	r3,r6,r3
    1fa8:	20800e17 	ldw	r2,56(r4)
    1fac:	1886983a 	sll	r3,r3,r2
    1fb0:	20801117 	ldw	r2,68(r4)
    1fb4:	3884703a 	and	r2,r7,r2
    1fb8:	21001017 	ldw	r4,64(r4)
    1fbc:	1104983a 	sll	r2,r2,r4
    1fc0:	1886b03a 	or	r3,r3,r2
    1fc4:	40800b17 	ldw	r2,44(r8)
    1fc8:	1887883a 	add	r3,r3,r2
    1fcc:	28803fcc 	andi	r2,r5,255
    1fd0:	18800025 	stbio	r2,0(r3)
    1fd4:	0005883a 	mov	r2,zero
    1fd8:	f800283a 	ret

	return 0;
    1fdc:	00bfffc4 	movi	r2,-1
}
    1fe0:	f800283a 	ret

00001fe4 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1fe4:	20c00a17 	ldw	r3,40(r4)
    1fe8:	00800044 	movi	r2,1
    1fec:	188000a5 	stbio	r2,2(r3)
    1ff0:	20800a17 	ldw	r2,40(r4)
    1ff4:	10c00084 	addi	r3,r2,2
    1ff8:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1ffc:	18800023 	ldbuio	r2,0(r3)
    2000:	1104703a 	and	r2,r2,r4
    2004:	103ffd1e 	bne	r2,zero,1ffc <alt_up_char_buffer_clear+0x18>
	return 0;
}
    2008:	f800283a 	ret

0000200c <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    200c:	deffff04 	addi	sp,sp,-4
    2010:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    2014:	01400034 	movhi	r5,0
    2018:	295e4404 	addi	r5,r5,30992
    201c:	0002cb80 	call	2cb8 <alt_find_dev>

  return dev;
}
    2020:	dfc00017 	ldw	ra,0(sp)
    2024:	dec00104 	addi	sp,sp,4
    2028:	f800283a 	ret

0000202c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    202c:	defffe04 	addi	sp,sp,-8
    2030:	dfc00115 	stw	ra,4(sp)
    2034:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    2038:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    203c:	80800007 	ldb	r2,0(r16)
    2040:	10000a26 	beq	r2,zero,206c <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    2044:	8009883a 	mov	r4,r16
    2048:	01400034 	movhi	r5,0
    204c:	2956f804 	addi	r5,r5,23520
    2050:	00036240 	call	3624 <strcmp>
    2054:	1000021e 	bne	r2,zero,2060 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    2058:	80000005 	stb	zero,0(r16)
    205c:	00000306 	br	206c <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    2060:	84000044 	addi	r16,r16,1
    2064:	80800007 	ldb	r2,0(r16)
    2068:	103ff61e 	bne	r2,zero,2044 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    206c:	dfc00117 	ldw	ra,4(sp)
    2070:	dc000017 	ldw	r16,0(sp)
    2074:	dec00204 	addi	sp,sp,8
    2078:	f800283a 	ret

0000207c <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    207c:	da000017 	ldw	r8,0(sp)
    2080:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    2084:	1800051e 	bne	r3,zero,209c <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    2088:	29c5383a 	mul	r2,r5,r7
    208c:	3085883a 	add	r2,r6,r2
    2090:	1105883a 	add	r2,r2,r4
    2094:	12000025 	stbio	r8,0(r2)
    2098:	f800283a 	ret
	else if (mode == 1)
    209c:	00800044 	movi	r2,1
    20a0:	1880061e 	bne	r3,r2,20bc <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    20a4:	29c5383a 	mul	r2,r5,r7
    20a8:	3085883a 	add	r2,r6,r2
    20ac:	1085883a 	add	r2,r2,r2
    20b0:	1105883a 	add	r2,r2,r4
    20b4:	1200002d 	sthio	r8,0(r2)
    20b8:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    20bc:	29c5383a 	mul	r2,r5,r7
    20c0:	1185883a 	add	r2,r2,r6
    20c4:	1085883a 	add	r2,r2,r2
    20c8:	1085883a 	add	r2,r2,r2
    20cc:	1105883a 	add	r2,r2,r4
    20d0:	12000035 	stwio	r8,0(r2)
    20d4:	f800283a 	ret

000020d8 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    20d8:	defff304 	addi	sp,sp,-52
    20dc:	dfc00c15 	stw	ra,48(sp)
    20e0:	df000b15 	stw	fp,44(sp)
    20e4:	ddc00a15 	stw	r23,40(sp)
    20e8:	dd800915 	stw	r22,36(sp)
    20ec:	dd400815 	stw	r21,32(sp)
    20f0:	dd000715 	stw	r20,28(sp)
    20f4:	dcc00615 	stw	r19,24(sp)
    20f8:	dc800515 	stw	r18,20(sp)
    20fc:	dc400415 	stw	r17,16(sp)
    2100:	dc000315 	stw	r16,12(sp)
    2104:	3011883a 	mov	r8,r6
    2108:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    210c:	4987c83a 	sub	r3,r9,r6
    2110:	1800010e 	bge	r3,zero,2118 <alt_up_pixel_buffer_dma_draw_line+0x40>
    2114:	00c7c83a 	sub	r3,zero,r3
    2118:	3945c83a 	sub	r2,r7,r5
    211c:	1000010e 	bge	r2,zero,2124 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    2120:	0085c83a 	sub	r2,zero,r2
    2124:	10c4803a 	cmplt	r2,r2,r3
    2128:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    212c:	20c00e17 	ldw	r3,56(r4)
    2130:	00800044 	movi	r2,1
    2134:	1880021e 	bne	r3,r2,2140 <alt_up_pixel_buffer_dma_draw_line+0x68>
    2138:	d8000215 	stw	zero,8(sp)
    213c:	00000306 	br	214c <alt_up_pixel_buffer_dma_draw_line+0x74>
    2140:	18c00098 	cmpnei	r3,r3,2
    2144:	18c00044 	addi	r3,r3,1
    2148:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    214c:	20800d17 	ldw	r2,52(r4)
    2150:	1000061e 	bne	r2,zero,216c <alt_up_pixel_buffer_dma_draw_line+0x94>
    2154:	20801317 	ldw	r2,76(r4)
    2158:	d8c00217 	ldw	r3,8(sp)
    215c:	10c5c83a 	sub	r2,r2,r3
    2160:	00c00044 	movi	r3,1
    2164:	18ae983a 	sll	r23,r3,r2
    2168:	00000106 	br	2170 <alt_up_pixel_buffer_dma_draw_line+0x98>
    216c:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    2170:	d8c00f17 	ldw	r3,60(sp)
    2174:	00800044 	movi	r2,1
    2178:	1880021e 	bne	r3,r2,2184 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    217c:	25800c17 	ldw	r22,48(r4)
    2180:	00000106 	br	2188 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    2184:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    2188:	50000326 	beq	r10,zero,2198 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    218c:	400d883a 	mov	r6,r8
    2190:	4827883a 	mov	r19,r9
    2194:	00000406 	br	21a8 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    2198:	280d883a 	mov	r6,r5
    219c:	400b883a 	mov	r5,r8
    21a0:	3827883a 	mov	r19,r7
    21a4:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    21a8:	9980060e 	bge	r19,r6,21c4 <alt_up_pixel_buffer_dma_draw_line+0xec>
    21ac:	9805883a 	mov	r2,r19
    21b0:	3027883a 	mov	r19,r6
    21b4:	100d883a 	mov	r6,r2
    21b8:	3805883a 	mov	r2,r7
    21bc:	280f883a 	mov	r7,r5
    21c0:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    21c4:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    21c8:	3969c83a 	sub	r20,r7,r5
    21cc:	a000010e 	bge	r20,zero,21d4 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    21d0:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    21d4:	a804d7fa 	srli	r2,r21,31
    21d8:	1545883a 	add	r2,r2,r21
    21dc:	1005d07a 	srai	r2,r2,1
    21e0:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    21e4:	29c0020e 	bge	r5,r7,21f0 <alt_up_pixel_buffer_dma_draw_line+0x118>
    21e8:	07000044 	movi	fp,1
    21ec:	00000106 	br	21f4 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    21f0:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    21f4:	50000226 	beq	r10,zero,2200 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    21f8:	9980030e 	bge	r19,r6,2208 <alt_up_pixel_buffer_dma_draw_line+0x130>
    21fc:	00002506 	br	2294 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    2200:	9980130e 	bge	r19,r6,2250 <alt_up_pixel_buffer_dma_draw_line+0x178>
    2204:	00002306 	br	2294 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    2208:	3021883a 	mov	r16,r6
    220c:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    2210:	d8800e17 	ldw	r2,56(sp)
    2214:	d8800015 	stw	r2,0(sp)
    2218:	d8c00217 	ldw	r3,8(sp)
    221c:	d8c00115 	stw	r3,4(sp)
    2220:	b009883a 	mov	r4,r22
    2224:	b80b883a 	mov	r5,r23
    2228:	900d883a 	mov	r6,r18
    222c:	800f883a 	mov	r7,r16
    2230:	000207c0 	call	207c <helper_plot_pixel>
			error = error + deltay;
    2234:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    2238:	0440020e 	bge	zero,r17,2244 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    223c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    2240:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    2244:	84000044 	addi	r16,r16,1
    2248:	9c001216 	blt	r19,r16,2294 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    224c:	003ff006 	br	2210 <alt_up_pixel_buffer_dma_draw_line+0x138>
    2250:	3021883a 	mov	r16,r6
    2254:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    2258:	d8800e17 	ldw	r2,56(sp)
    225c:	d8800015 	stw	r2,0(sp)
    2260:	d8c00217 	ldw	r3,8(sp)
    2264:	d8c00115 	stw	r3,4(sp)
    2268:	b009883a 	mov	r4,r22
    226c:	b80b883a 	mov	r5,r23
    2270:	800d883a 	mov	r6,r16
    2274:	900f883a 	mov	r7,r18
    2278:	000207c0 	call	207c <helper_plot_pixel>
			error = error + deltay;
    227c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    2280:	0440020e 	bge	zero,r17,228c <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    2284:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    2288:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    228c:	84000044 	addi	r16,r16,1
    2290:	9c3ff10e 	bge	r19,r16,2258 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    2294:	dfc00c17 	ldw	ra,48(sp)
    2298:	df000b17 	ldw	fp,44(sp)
    229c:	ddc00a17 	ldw	r23,40(sp)
    22a0:	dd800917 	ldw	r22,36(sp)
    22a4:	dd400817 	ldw	r21,32(sp)
    22a8:	dd000717 	ldw	r20,28(sp)
    22ac:	dcc00617 	ldw	r19,24(sp)
    22b0:	dc800517 	ldw	r18,20(sp)
    22b4:	dc400417 	ldw	r17,16(sp)
    22b8:	dc000317 	ldw	r16,12(sp)
    22bc:	dec00d04 	addi	sp,sp,52
    22c0:	f800283a 	ret

000022c4 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    22c4:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    22c8:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    22cc:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    22d0:	3980022e 	bgeu	r7,r6,22dc <alt_up_pixel_buffer_dma_draw_vline+0x18>
    22d4:	3011883a 	mov	r8,r6
    22d8:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    22dc:	2a405d2e 	bgeu	r5,r9,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22e0:	30805c2e 	bgeu	r6,r2,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    22e4:	40800136 	bltu	r8,r2,22ec <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    22e8:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    22ec:	d8c00117 	ldw	r3,4(sp)
    22f0:	00800044 	movi	r2,1
    22f4:	1880021e 	bne	r3,r2,2300 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    22f8:	20c00c17 	ldw	r3,48(r4)
    22fc:	00000106 	br	2304 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    2300:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2304:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2308:	20800d17 	ldw	r2,52(r4)
    230c:	1000281e 	bne	r2,zero,23b0 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2310:	22801317 	ldw	r10,76(r4)
    2314:	3284983a 	sll	r2,r6,r10
    2318:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    231c:	21000e17 	ldw	r4,56(r4)
    2320:	00800044 	movi	r2,1
    2324:	2080091e 	bne	r4,r2,234c <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    2328:	41804a36 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    232c:	1013883a 	mov	r9,r2
    2330:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    2334:	1945883a 	add	r2,r3,r5
    2338:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    233c:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2340:	324d883a 	add	r6,r6,r9
    2344:	41804336 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2348:	003ffa06 	br	2334 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    234c:	00800084 	movi	r2,2
    2350:	2080021e 	bne	r4,r2,235c <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    2354:	4180032e 	bgeu	r8,r6,2364 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    2358:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    235c:	41800a2e 	bgeu	r8,r6,2388 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    2360:	f800283a 	ret
    2364:	294b883a 	add	r5,r5,r5
    2368:	02400044 	movi	r9,1
    236c:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2370:	28c5883a 	add	r2,r5,r3
    2374:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    2378:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    237c:	324d883a 	add	r6,r6,r9
    2380:	41803436 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2384:	003ffa06 	br	2370 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    2388:	2945883a 	add	r2,r5,r5
    238c:	108b883a 	add	r5,r2,r2
    2390:	02400044 	movi	r9,1
    2394:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    2398:	28c5883a 	add	r2,r5,r3
    239c:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    23a0:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    23a4:	324d883a 	add	r6,r6,r9
    23a8:	41802a36 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    23ac:	003ffa06 	br	2398 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    23b0:	21000e17 	ldw	r4,56(r4)
    23b4:	00800044 	movi	r2,1
    23b8:	20800b1e 	bne	r4,r2,23e8 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23bc:	41802536 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    23c0:	4809883a 	mov	r4,r9
    23c4:	3245383a 	mul	r2,r6,r9
    23c8:	1885883a 	add	r2,r3,r2
    23cc:	1145883a 	add	r2,r2,r5
    23d0:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    23d4:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23d8:	30cd883a 	add	r6,r6,r3
    23dc:	1105883a 	add	r2,r2,r4
    23e0:	41801c36 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    23e4:	003ffb06 	br	23d4 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    23e8:	00800084 	movi	r2,2
    23ec:	20800c1e 	bne	r4,r2,2420 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23f0:	41801836 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    23f4:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    23f8:	3105383a 	mul	r2,r6,r4
    23fc:	1887883a 	add	r3,r3,r2
    2400:	294b883a 	add	r5,r5,r5
    2404:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2408:	28c5883a 	add	r2,r5,r3
    240c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    2410:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2414:	324d883a 	add	r6,r6,r9
    2418:	41800e36 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    241c:	003ffa06 	br	2408 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2420:	41800c36 	bltu	r8,r6,2454 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    2424:	4a45883a 	add	r2,r9,r9
    2428:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    242c:	3105383a 	mul	r2,r6,r4
    2430:	1887883a 	add	r3,r3,r2
    2434:	2945883a 	add	r2,r5,r5
    2438:	108b883a 	add	r5,r2,r2
    243c:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    2440:	28c5883a 	add	r2,r5,r3
    2444:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    2448:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    244c:	324d883a 	add	r6,r6,r9
    2450:	41bffb2e 	bgeu	r8,r6,2440 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    2454:	f800283a 	ret

00002458 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2458:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    245c:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2460:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    2464:	3140022e 	bgeu	r6,r5,2470 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    2468:	2813883a 	mov	r9,r5
    246c:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    2470:	2a00552e 	bgeu	r5,r8,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2474:	3880542e 	bgeu	r7,r2,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    2478:	4a000136 	bltu	r9,r8,2480 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    247c:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2480:	d8c00117 	ldw	r3,4(sp)
    2484:	00800044 	movi	r2,1
    2488:	1880021e 	bne	r3,r2,2494 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    248c:	21800c17 	ldw	r6,48(r4)
    2490:	00000106 	br	2498 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    2494:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    2498:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    249c:	20800d17 	ldw	r2,52(r4)
    24a0:	1000231e 	bne	r2,zero,2530 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    24a4:	20801317 	ldw	r2,76(r4)
    24a8:	3884983a 	sll	r2,r7,r2
    24ac:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    24b0:	21000e17 	ldw	r4,56(r4)
    24b4:	00800044 	movi	r2,1
    24b8:	2080081e 	bne	r4,r2,24dc <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    24bc:	49404236 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24c0:	3945883a 	add	r2,r7,r5
    24c4:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    24c8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    24cc:	290b883a 	add	r5,r5,r4
    24d0:	1105883a 	add	r2,r2,r4
    24d4:	49403c36 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24d8:	003ffb06 	br	24c8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    24dc:	00800084 	movi	r2,2
    24e0:	2080021e 	bne	r4,r2,24ec <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    24e4:	4940032e 	bgeu	r9,r5,24f4 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    24e8:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    24ec:	4940082e 	bgeu	r9,r5,2510 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    24f0:	f800283a 	ret
    24f4:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    24f8:	2945883a 	add	r2,r5,r5
    24fc:	11c5883a 	add	r2,r2,r7
    2500:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2504:	290b883a 	add	r5,r5,r4
    2508:	49402f36 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    250c:	003ffa06 	br	24f8 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    2510:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2514:	2945883a 	add	r2,r5,r5
    2518:	1085883a 	add	r2,r2,r2
    251c:	11c5883a 	add	r2,r2,r7
    2520:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2524:	290b883a 	add	r5,r5,r4
    2528:	49402736 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    252c:	003ff906 	br	2514 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2530:	21000e17 	ldw	r4,56(r4)
    2534:	00800044 	movi	r2,1
    2538:	20800a1e 	bne	r4,r2,2564 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    253c:	41c5383a 	mul	r2,r8,r7
    2540:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    2544:	49402036 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2548:	1145883a 	add	r2,r2,r5
    254c:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    2550:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    2554:	290b883a 	add	r5,r5,r4
    2558:	1105883a 	add	r2,r2,r4
    255c:	49401a36 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2560:	003ffb06 	br	2550 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2564:	00800084 	movi	r2,2
    2568:	20800b1e 	bne	r4,r2,2598 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    256c:	4205883a 	add	r2,r8,r8
    2570:	3885383a 	mul	r2,r7,r2
    2574:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    2578:	49401336 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    257c:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2580:	2945883a 	add	r2,r5,r5
    2584:	11c5883a 	add	r2,r2,r7
    2588:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    258c:	290b883a 	add	r5,r5,r4
    2590:	49400d36 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2594:	003ffa06 	br	2580 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    2598:	4205883a 	add	r2,r8,r8
    259c:	1085883a 	add	r2,r2,r2
    25a0:	3885383a 	mul	r2,r7,r2
    25a4:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    25a8:	49400736 	bltu	r9,r5,25c8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    25ac:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    25b0:	2945883a 	add	r2,r5,r5
    25b4:	1085883a 	add	r2,r2,r2
    25b8:	11c5883a 	add	r2,r2,r7
    25bc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    25c0:	290b883a 	add	r5,r5,r4
    25c4:	497ffa2e 	bgeu	r9,r5,25b0 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    25c8:	f800283a 	ret

000025cc <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    25cc:	defff604 	addi	sp,sp,-40
    25d0:	dfc00915 	stw	ra,36(sp)
    25d4:	dd800815 	stw	r22,32(sp)
    25d8:	dd400715 	stw	r21,28(sp)
    25dc:	dd000615 	stw	r20,24(sp)
    25e0:	dcc00515 	stw	r19,20(sp)
    25e4:	dc800415 	stw	r18,16(sp)
    25e8:	dc400315 	stw	r17,12(sp)
    25ec:	dc000215 	stw	r16,8(sp)
    25f0:	2029883a 	mov	r20,r4
    25f4:	282d883a 	mov	r22,r5
    25f8:	302b883a 	mov	r21,r6
    25fc:	3825883a 	mov	r18,r7
    2600:	dcc00a17 	ldw	r19,40(sp)
    2604:	dc000b17 	ldw	r16,44(sp)
    2608:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    260c:	dc000015 	stw	r16,0(sp)
    2610:	dc400115 	stw	r17,4(sp)
    2614:	380d883a 	mov	r6,r7
    2618:	a80f883a 	mov	r7,r21
    261c:	00024580 	call	2458 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    2620:	dc000015 	stw	r16,0(sp)
    2624:	dc400115 	stw	r17,4(sp)
    2628:	a009883a 	mov	r4,r20
    262c:	b00b883a 	mov	r5,r22
    2630:	900d883a 	mov	r6,r18
    2634:	980f883a 	mov	r7,r19
    2638:	00024580 	call	2458 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    263c:	dc000015 	stw	r16,0(sp)
    2640:	dc400115 	stw	r17,4(sp)
    2644:	a009883a 	mov	r4,r20
    2648:	b00b883a 	mov	r5,r22
    264c:	a80d883a 	mov	r6,r21
    2650:	980f883a 	mov	r7,r19
    2654:	00022c40 	call	22c4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    2658:	dc000015 	stw	r16,0(sp)
    265c:	dc400115 	stw	r17,4(sp)
    2660:	a009883a 	mov	r4,r20
    2664:	900b883a 	mov	r5,r18
    2668:	a80d883a 	mov	r6,r21
    266c:	980f883a 	mov	r7,r19
    2670:	00022c40 	call	22c4 <alt_up_pixel_buffer_dma_draw_vline>
}
    2674:	dfc00917 	ldw	ra,36(sp)
    2678:	dd800817 	ldw	r22,32(sp)
    267c:	dd400717 	ldw	r21,28(sp)
    2680:	dd000617 	ldw	r20,24(sp)
    2684:	dcc00517 	ldw	r19,20(sp)
    2688:	dc800417 	ldw	r18,16(sp)
    268c:	dc400317 	ldw	r17,12(sp)
    2690:	dc000217 	ldw	r16,8(sp)
    2694:	dec00a04 	addi	sp,sp,40
    2698:	f800283a 	ret

0000269c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    269c:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    26a0:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    26a4:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    26a8:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    26ac:	3940022e 	bgeu	r7,r5,26b8 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    26b0:	2811883a 	mov	r8,r5
    26b4:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    26b8:	5980032e 	bgeu	r11,r6,26c8 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    26bc:	5805883a 	mov	r2,r11
    26c0:	3017883a 	mov	r11,r6
    26c4:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    26c8:	2a80842e 	bgeu	r5,r10,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
    26cc:	30c0832e 	bgeu	r6,r3,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    26d0:	42800136 	bltu	r8,r10,26d8 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    26d4:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    26d8:	58c00136 	bltu	r11,r3,26e0 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    26dc:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    26e0:	d8c00217 	ldw	r3,8(sp)
    26e4:	00800044 	movi	r2,1
    26e8:	1880021e 	bne	r3,r2,26f4 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    26ec:	20c00c17 	ldw	r3,48(r4)
    26f0:	00000106 	br	26f8 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    26f4:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    26f8:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    26fc:	20800d17 	ldw	r2,52(r4)
    2700:	1000391e 	bne	r2,zero,27e8 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2704:	22801317 	ldw	r10,76(r4)
    2708:	3284983a 	sll	r2,r6,r10
    270c:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2710:	21000e17 	ldw	r4,56(r4)
    2714:	00800044 	movi	r2,1
    2718:	2080101e 	bne	r4,r2,275c <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    271c:	59806f36 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
    2720:	00000a06 	br	274c <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2724:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2728:	00800044 	movi	r2,1
    272c:	1887883a 	add	r3,r3,r2
    2730:	2089883a 	add	r4,r4,r2
    2734:	40fffb2e 	bgeu	r8,r3,2724 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2738:	00800044 	movi	r2,1
    273c:	308d883a 	add	r6,r6,r2
    2740:	59806636 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    2744:	1284983a 	sll	r2,r2,r10
    2748:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    274c:	417ffa36 	bltu	r8,r5,2738 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    2750:	29c9883a 	add	r4,r5,r7
    2754:	2807883a 	mov	r3,r5
    2758:	003ff206 	br	2724 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    275c:	00800084 	movi	r2,2
    2760:	2080021e 	bne	r4,r2,276c <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    2764:	59805d36 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
    2768:	00000e06 	br	27a4 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    276c:	59805b36 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
    2770:	00001b06 	br	27e0 <alt_up_pixel_buffer_dma_draw_box+0x144>
    2774:	2807883a 	mov	r3,r5
    2778:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    277c:	18c5883a 	add	r2,r3,r3
    2780:	11c5883a 	add	r2,r2,r7
    2784:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2788:	1907883a 	add	r3,r3,r4
    278c:	40fffb2e 	bgeu	r8,r3,277c <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2790:	00800044 	movi	r2,1
    2794:	308d883a 	add	r6,r6,r2
    2798:	59805036 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    279c:	1284983a 	sll	r2,r2,r10
    27a0:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27a4:	417ff32e 	bgeu	r8,r5,2774 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    27a8:	003ff906 	br	2790 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    27ac:	2807883a 	mov	r3,r5
    27b0:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    27b4:	18c5883a 	add	r2,r3,r3
    27b8:	1085883a 	add	r2,r2,r2
    27bc:	11c5883a 	add	r2,r2,r7
    27c0:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27c4:	1907883a 	add	r3,r3,r4
    27c8:	40fffa2e 	bgeu	r8,r3,27b4 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    27cc:	00800044 	movi	r2,1
    27d0:	308d883a 	add	r6,r6,r2
    27d4:	59804136 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    27d8:	1284983a 	sll	r2,r2,r10
    27dc:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27e0:	417ff22e 	bgeu	r8,r5,27ac <alt_up_pixel_buffer_dma_draw_box+0x110>
    27e4:	003ff906 	br	27cc <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    27e8:	21000e17 	ldw	r4,56(r4)
    27ec:	00800044 	movi	r2,1
    27f0:	2080121e 	bne	r4,r2,283c <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27f4:	59803936 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
    27f8:	5019883a 	mov	r12,r10
    27fc:	3285383a 	mul	r2,r6,r10
    2800:	1885883a 	add	r2,r3,r2
    2804:	114f883a 	add	r7,r2,r5
    2808:	00000806 	br	282c <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    280c:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2810:	00800044 	movi	r2,1
    2814:	1887883a 	add	r3,r3,r2
    2818:	2089883a 	add	r4,r4,r2
    281c:	40fffb2e 	bgeu	r8,r3,280c <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2820:	31800044 	addi	r6,r6,1
    2824:	3b0f883a 	add	r7,r7,r12
    2828:	59802c36 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    282c:	417ffc36 	bltu	r8,r5,2820 <alt_up_pixel_buffer_dma_draw_box+0x184>
    2830:	3809883a 	mov	r4,r7
    2834:	2807883a 	mov	r3,r5
    2838:	003ff406 	br	280c <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    283c:	00800084 	movi	r2,2
    2840:	2080121e 	bne	r4,r2,288c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2844:	59802536 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    2848:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    284c:	3285383a 	mul	r2,r6,r10
    2850:	1889883a 	add	r4,r3,r2
    2854:	03000044 	movi	r12,1
    2858:	00000a06 	br	2884 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    285c:	2807883a 	mov	r3,r5
    2860:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    2864:	18c5883a 	add	r2,r3,r3
    2868:	1105883a 	add	r2,r2,r4
    286c:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2870:	19c7883a 	add	r3,r3,r7
    2874:	40fffb2e 	bgeu	r8,r3,2864 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2878:	330d883a 	add	r6,r6,r12
    287c:	59801736 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    2880:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2884:	417ff52e 	bgeu	r8,r5,285c <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    2888:	003ffb06 	br	2878 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    288c:	59801336 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    2890:	5285883a 	add	r2,r10,r10
    2894:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    2898:	3285383a 	mul	r2,r6,r10
    289c:	1889883a 	add	r4,r3,r2
    28a0:	03000044 	movi	r12,1
    28a4:	00000b06 	br	28d4 <alt_up_pixel_buffer_dma_draw_box+0x238>
    28a8:	2807883a 	mov	r3,r5
    28ac:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    28b0:	18c5883a 	add	r2,r3,r3
    28b4:	1085883a 	add	r2,r2,r2
    28b8:	1105883a 	add	r2,r2,r4
    28bc:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    28c0:	19c7883a 	add	r3,r3,r7
    28c4:	40fffa2e 	bgeu	r8,r3,28b0 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    28c8:	330d883a 	add	r6,r6,r12
    28cc:	59800336 	bltu	r11,r6,28dc <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    28d0:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    28d4:	417ff42e 	bgeu	r8,r5,28a8 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    28d8:	003ffb06 	br	28c8 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    28dc:	f800283a 	ret

000028e0 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    28e0:	00800044 	movi	r2,1
    28e4:	2880021e 	bne	r5,r2,28f0 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    28e8:	21c00c17 	ldw	r7,48(r4)
    28ec:	00000106 	br	28f4 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    28f0:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    28f4:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    28f8:	20c00e17 	ldw	r3,56(r4)
    28fc:	00800084 	movi	r2,2
    2900:	1880021e 	bne	r3,r2,290c <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2904:	294d883a 	add	r6,r5,r5
    2908:	00000206 	br	2914 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    290c:	2945883a 	add	r2,r5,r5
    2910:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2914:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2918:	20800d17 	ldw	r2,52(r4)
    291c:	1000121e 	bne	r2,zero,2968 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    2920:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2924:	48001a26 	beq	r9,zero,2990 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2928:	0011883a 	mov	r8,zero
    292c:	3014c03a 	cmpne	r10,r6,zero
    2930:	00000b06 	br	2960 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    2934:	0007883a 	mov	r3,zero
    2938:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    293c:	19c5883a 	add	r2,r3,r7
    2940:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2944:	1947883a 	add	r3,r3,r5
    2948:	19bffc36 	bltu	r3,r6,293c <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    294c:	00800044 	movi	r2,1
    2950:	4091883a 	add	r8,r8,r2
    2954:	4a000e26 	beq	r9,r8,2990 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    2958:	1104983a 	sll	r2,r2,r4
    295c:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2960:	503ff41e 	bne	r10,zero,2934 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    2964:	003ff906 	br	294c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    2968:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    296c:	20000826 	beq	r4,zero,2990 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2970:	0007883a 	mov	r3,zero
    2974:	0005883a 	mov	r2,zero
    2978:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    297c:	3885883a 	add	r2,r7,r2
    2980:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    2984:	1945883a 	add	r2,r3,r5
    2988:	1007883a 	mov	r3,r2
    298c:	113ffb36 	bltu	r2,r4,297c <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    2990:	f800283a 	ret

00002994 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    2994:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    2998:	20c00a17 	ldw	r3,40(r4)
    299c:	00800044 	movi	r2,1
    29a0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    29a4:	20800b17 	ldw	r2,44(r4)
    29a8:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    29ac:	21400b15 	stw	r5,44(r4)
	return 0;
}
    29b0:	0005883a 	mov	r2,zero
    29b4:	f800283a 	ret

000029b8 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    29b8:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    29bc:	22400f17 	ldw	r9,60(r4)
    29c0:	32402a2e 	bgeu	r6,r9,2a6c <alt_up_pixel_buffer_dma_draw+0xb4>
    29c4:	20801017 	ldw	r2,64(r4)
    29c8:	3880282e 	bgeu	r7,r2,2a6c <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    29cc:	20800d17 	ldw	r2,52(r4)
    29d0:	10000a1e 	bne	r2,zero,29fc <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    29d4:	21001217 	ldw	r4,72(r4)
    29d8:	3108703a 	and	r4,r6,r4
    29dc:	40801117 	ldw	r2,68(r8)
    29e0:	2088983a 	sll	r4,r4,r2
    29e4:	40801417 	ldw	r2,80(r8)
    29e8:	3884703a 	and	r2,r7,r2
    29ec:	40c01317 	ldw	r3,76(r8)
    29f0:	10c4983a 	sll	r2,r2,r3
    29f4:	2086b03a 	or	r3,r4,r2
    29f8:	00000806 	br	2a1c <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    29fc:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    2a00:	40c01217 	ldw	r3,72(r8)
    2a04:	30c6703a 	and	r3,r6,r3
    2a08:	40801417 	ldw	r2,80(r8)
    2a0c:	3884703a 	and	r2,r7,r2
    2a10:	4885383a 	mul	r2,r9,r2
    2a14:	10c5883a 	add	r2,r2,r3
    2a18:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2a1c:	42400e17 	ldw	r9,56(r8)
    2a20:	00800044 	movi	r2,1
    2a24:	4880051e 	bne	r9,r2,2a3c <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2a28:	40800c17 	ldw	r2,48(r8)
    2a2c:	1885883a 	add	r2,r3,r2
    2a30:	11400025 	stbio	r5,0(r2)
    2a34:	0005883a 	mov	r2,zero
    2a38:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2a3c:	00800084 	movi	r2,2
    2a40:	4880051e 	bne	r9,r2,2a58 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2a44:	40800c17 	ldw	r2,48(r8)
    2a48:	1885883a 	add	r2,r3,r2
    2a4c:	1140002d 	sthio	r5,0(r2)
    2a50:	0005883a 	mov	r2,zero
    2a54:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2a58:	40800c17 	ldw	r2,48(r8)
    2a5c:	1885883a 	add	r2,r3,r2
    2a60:	11400035 	stwio	r5,0(r2)
    2a64:	0005883a 	mov	r2,zero
    2a68:	f800283a 	ret
    2a6c:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    2a70:	f800283a 	ret

00002a74 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    2a74:	20800a17 	ldw	r2,40(r4)
    2a78:	10800337 	ldwio	r2,12(r2)
}
    2a7c:	1080004c 	andi	r2,r2,1
    2a80:	f800283a 	ret

00002a84 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    2a84:	00c00104 	movi	r3,4
    2a88:	20800a17 	ldw	r2,40(r4)
    2a8c:	10c5883a 	add	r2,r2,r3
    2a90:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    2a94:	20800a17 	ldw	r2,40(r4)
    2a98:	10c5883a 	add	r2,r2,r3
    2a9c:	10800037 	ldwio	r2,0(r2)
    2aa0:	20800c15 	stw	r2,48(r4)
	return 0;
}
    2aa4:	0005883a 	mov	r2,zero
    2aa8:	f800283a 	ret

00002aac <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    2aac:	deffff04 	addi	sp,sp,-4
    2ab0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    2ab4:	01400034 	movhi	r5,0
    2ab8:	295e4404 	addi	r5,r5,30992
    2abc:	0002cb80 	call	2cb8 <alt_find_dev>

  return dev;
}
    2ac0:	dfc00017 	ldw	ra,0(sp)
    2ac4:	dec00104 	addi	sp,sp,4
    2ac8:	f800283a 	ret

00002acc <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2acc:	00800074 	movhi	r2,1
    2ad0:	10a5a104 	addi	r2,r2,-27004
    2ad4:	10800017 	ldw	r2,0(r2)
    2ad8:	1000021e 	bne	r2,zero,2ae4 <alt_alarm_start+0x18>
    2adc:	00bfde84 	movi	r2,-134
    2ae0:	f800283a 	ret
  {
    if (alarm)
    2ae4:	2000021e 	bne	r4,zero,2af0 <alt_alarm_start+0x24>
    2ae8:	00bffa84 	movi	r2,-22
    2aec:	f800283a 	ret
    {
      alarm->callback = callback;
    2af0:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2af4:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2af8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2afc:	00bfff84 	movi	r2,-2
    2b00:	3884703a 	and	r2,r7,r2
    2b04:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2b08:	00800074 	movhi	r2,1
    2b0c:	10a5a204 	addi	r2,r2,-27000
    2b10:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2b14:	01800044 	movi	r6,1
    2b18:	1985883a 	add	r2,r3,r6
    2b1c:	2885883a 	add	r2,r5,r2
    2b20:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2b24:	10c0022e 	bgeu	r2,r3,2b30 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2b28:	21800405 	stb	r6,16(r4)
    2b2c:	00000106 	br	2b34 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    2b30:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2b34:	00800034 	movhi	r2,0
    2b38:	109e4904 	addi	r2,r2,31012
    2b3c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    2b40:	10c00017 	ldw	r3,0(r2)
    2b44:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    2b48:	10c00017 	ldw	r3,0(r2)
    2b4c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    2b50:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2b54:	3801703a 	wrctl	status,r7
    2b58:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    2b5c:	f800283a 	ret

00002b60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2b60:	defffd04 	addi	sp,sp,-12
    2b64:	dfc00215 	stw	ra,8(sp)
    2b68:	dc400115 	stw	r17,4(sp)
    2b6c:	dc000015 	stw	r16,0(sp)
    2b70:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2b74:	20001c16 	blt	r4,zero,2be8 <close+0x88>
    2b78:	20c00324 	muli	r3,r4,12
    2b7c:	00800034 	movhi	r2,0
    2b80:	109be004 	addi	r2,r2,28544
    2b84:	1889883a 	add	r4,r3,r2

  if (fd)
    2b88:	20001726 	beq	r4,zero,2be8 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2b8c:	20800017 	ldw	r2,0(r4)
    2b90:	10800417 	ldw	r2,16(r2)
    2b94:	10002126 	beq	r2,zero,2c1c <close+0xbc>
    2b98:	103ee83a 	callr	r2
    2b9c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2ba0:	8009883a 	mov	r4,r16
    2ba4:	000307c0 	call	307c <alt_release_fd>
    if (rval < 0)
    2ba8:	88000216 	blt	r17,zero,2bb4 <close+0x54>
    2bac:	0005883a 	mov	r2,zero
    2bb0:	00001d06 	br	2c28 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2bb4:	00800034 	movhi	r2,0
    2bb8:	109e4704 	addi	r2,r2,31004
    2bbc:	10800017 	ldw	r2,0(r2)
    2bc0:	1000031e 	bne	r2,zero,2bd0 <close+0x70>
    2bc4:	00c00074 	movhi	r3,1
    2bc8:	18e5a304 	addi	r3,r3,-26996
    2bcc:	00000206 	br	2bd8 <close+0x78>
    2bd0:	103ee83a 	callr	r2
    2bd4:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2bd8:	0445c83a 	sub	r2,zero,r17
    2bdc:	18800015 	stw	r2,0(r3)
    2be0:	00bfffc4 	movi	r2,-1
    2be4:	00001006 	br	2c28 <close+0xc8>
    2be8:	00800034 	movhi	r2,0
    2bec:	109e4704 	addi	r2,r2,31004
    2bf0:	10800017 	ldw	r2,0(r2)
    2bf4:	1000031e 	bne	r2,zero,2c04 <close+0xa4>
    2bf8:	00c00074 	movhi	r3,1
    2bfc:	18e5a304 	addi	r3,r3,-26996
    2c00:	00000206 	br	2c0c <close+0xac>
    2c04:	103ee83a 	callr	r2
    2c08:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c0c:	00801444 	movi	r2,81
    2c10:	18800015 	stw	r2,0(r3)
    2c14:	00bfffc4 	movi	r2,-1
    2c18:	00000306 	br	2c28 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c1c:	8009883a 	mov	r4,r16
    2c20:	000307c0 	call	307c <alt_release_fd>
    2c24:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2c28:	dfc00217 	ldw	ra,8(sp)
    2c2c:	dc400117 	ldw	r17,4(sp)
    2c30:	dc000017 	ldw	r16,0(sp)
    2c34:	dec00304 	addi	sp,sp,12
    2c38:	f800283a 	ret

00002c3c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2c3c:	f800283a 	ret

00002c40 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2c40:	3005883a 	mov	r2,r6
    2c44:	f800283a 	ret

00002c48 <alt_dev_llist_insert>:
    2c48:	deffff04 	addi	sp,sp,-4
    2c4c:	dfc00015 	stw	ra,0(sp)
    2c50:	20000226 	beq	r4,zero,2c5c <alt_dev_llist_insert+0x14>
    2c54:	20800217 	ldw	r2,8(r4)
    2c58:	10000d1e 	bne	r2,zero,2c90 <alt_dev_llist_insert+0x48>
    2c5c:	00800034 	movhi	r2,0
    2c60:	109e4704 	addi	r2,r2,31004
    2c64:	10800017 	ldw	r2,0(r2)
    2c68:	1000031e 	bne	r2,zero,2c78 <alt_dev_llist_insert+0x30>
    2c6c:	00c00074 	movhi	r3,1
    2c70:	18e5a304 	addi	r3,r3,-26996
    2c74:	00000206 	br	2c80 <alt_dev_llist_insert+0x38>
    2c78:	103ee83a 	callr	r2
    2c7c:	1007883a 	mov	r3,r2
    2c80:	00800584 	movi	r2,22
    2c84:	18800015 	stw	r2,0(r3)
    2c88:	00bffa84 	movi	r2,-22
    2c8c:	00000706 	br	2cac <alt_dev_llist_insert+0x64>
    2c90:	21400115 	stw	r5,4(r4)
    2c94:	28800017 	ldw	r2,0(r5)
    2c98:	20800015 	stw	r2,0(r4)
    2c9c:	28800017 	ldw	r2,0(r5)
    2ca0:	11000115 	stw	r4,4(r2)
    2ca4:	29000015 	stw	r4,0(r5)
    2ca8:	0005883a 	mov	r2,zero
    2cac:	dfc00017 	ldw	ra,0(sp)
    2cb0:	dec00104 	addi	sp,sp,4
    2cb4:	f800283a 	ret

00002cb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2cb8:	defffb04 	addi	sp,sp,-20
    2cbc:	dfc00415 	stw	ra,16(sp)
    2cc0:	dcc00315 	stw	r19,12(sp)
    2cc4:	dc800215 	stw	r18,8(sp)
    2cc8:	dc400115 	stw	r17,4(sp)
    2ccc:	dc000015 	stw	r16,0(sp)
    2cd0:	2027883a 	mov	r19,r4
    2cd4:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2cd8:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2cdc:	00036e00 	call	36e0 <strlen>
    2ce0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2ce4:	8c000726 	beq	r17,r16,2d04 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2ce8:	89000217 	ldw	r4,8(r17)
    2cec:	980b883a 	mov	r5,r19
    2cf0:	900d883a 	mov	r6,r18
    2cf4:	00033240 	call	3324 <memcmp>
    2cf8:	10000326 	beq	r2,zero,2d08 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2cfc:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2d00:	847ff91e 	bne	r16,r17,2ce8 <alt_find_dev+0x30>
    2d04:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2d08:	8805883a 	mov	r2,r17
    2d0c:	dfc00417 	ldw	ra,16(sp)
    2d10:	dcc00317 	ldw	r19,12(sp)
    2d14:	dc800217 	ldw	r18,8(sp)
    2d18:	dc400117 	ldw	r17,4(sp)
    2d1c:	dc000017 	ldw	r16,0(sp)
    2d20:	dec00504 	addi	sp,sp,20
    2d24:	f800283a 	ret

00002d28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2d28:	deffff04 	addi	sp,sp,-4
    2d2c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2d30:	0009883a 	mov	r4,zero
    2d34:	01440004 	movi	r5,4096
    2d38:	00032b00 	call	32b0 <alt_icache_flush>
#endif
}
    2d3c:	dfc00017 	ldw	ra,0(sp)
    2d40:	dec00104 	addi	sp,sp,4
    2d44:	f800283a 	ret

00002d48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2d48:	defffe04 	addi	sp,sp,-8
    2d4c:	dfc00115 	stw	ra,4(sp)
    2d50:	dc000015 	stw	r16,0(sp)
    2d54:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2d58:	2809883a 	mov	r4,r5
    2d5c:	300b883a 	mov	r5,r6
    2d60:	380d883a 	mov	r6,r7
    2d64:	0002f000 	call	2f00 <open>
    2d68:	1009883a 	mov	r4,r2

  if (old >= 0)
    2d6c:	10000b16 	blt	r2,zero,2d9c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    2d70:	10c00324 	muli	r3,r2,12
    2d74:	00800034 	movhi	r2,0
    2d78:	109be004 	addi	r2,r2,28544
    2d7c:	1887883a 	add	r3,r3,r2
    2d80:	18800017 	ldw	r2,0(r3)
    2d84:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2d88:	18800117 	ldw	r2,4(r3)
    2d8c:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2d90:	18800217 	ldw	r2,8(r3)
    2d94:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    2d98:	000307c0 	call	307c <alt_release_fd>
  }
} 
    2d9c:	dfc00117 	ldw	ra,4(sp)
    2da0:	dc000017 	ldw	r16,0(sp)
    2da4:	dec00204 	addi	sp,sp,8
    2da8:	f800283a 	ret

00002dac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2dac:	defffa04 	addi	sp,sp,-24
    2db0:	dfc00515 	stw	ra,20(sp)
    2db4:	dd000415 	stw	r20,16(sp)
    2db8:	dcc00315 	stw	r19,12(sp)
    2dbc:	dc800215 	stw	r18,8(sp)
    2dc0:	dc400115 	stw	r17,4(sp)
    2dc4:	dc000015 	stw	r16,0(sp)
    2dc8:	2005883a 	mov	r2,r4
    2dcc:	2827883a 	mov	r19,r5
    2dd0:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2dd4:	04000034 	movhi	r16,0
    2dd8:	841be304 	addi	r16,r16,28556
    2ddc:	04800044 	movi	r18,1
    2de0:	04407fc4 	movi	r17,511
    2de4:	8009883a 	mov	r4,r16
    2de8:	100b883a 	mov	r5,r2
    2dec:	900d883a 	mov	r6,r18
    2df0:	880f883a 	mov	r7,r17
    2df4:	0002d480 	call	2d48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2df8:	843ffd04 	addi	r16,r16,-12
    2dfc:	8009883a 	mov	r4,r16
    2e00:	980b883a 	mov	r5,r19
    2e04:	000d883a 	mov	r6,zero
    2e08:	880f883a 	mov	r7,r17
    2e0c:	0002d480 	call	2d48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2e10:	81000604 	addi	r4,r16,24
    2e14:	a00b883a 	mov	r5,r20
    2e18:	900d883a 	mov	r6,r18
    2e1c:	880f883a 	mov	r7,r17
    2e20:	0002d480 	call	2d48 <alt_open_fd>
}  
    2e24:	dfc00517 	ldw	ra,20(sp)
    2e28:	dd000417 	ldw	r20,16(sp)
    2e2c:	dcc00317 	ldw	r19,12(sp)
    2e30:	dc800217 	ldw	r18,8(sp)
    2e34:	dc400117 	ldw	r17,4(sp)
    2e38:	dc000017 	ldw	r16,0(sp)
    2e3c:	dec00604 	addi	sp,sp,24
    2e40:	f800283a 	ret

00002e44 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2e44:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2e48:	008007c4 	movi	r2,31
    2e4c:	1100022e 	bgeu	r2,r4,2e58 <alt_irq_register+0x14>
    2e50:	00bffa84 	movi	r2,-22
    2e54:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e58:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e5c:	013fff84 	movi	r4,-2
    2e60:	4104703a 	and	r2,r8,r4
    2e64:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2e68:	380490fa 	slli	r2,r7,3
    2e6c:	00c00074 	movhi	r3,1
    2e70:	18e5b104 	addi	r3,r3,-26940
    2e74:	10c5883a 	add	r2,r2,r3
    2e78:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2e7c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2e80:	30000e26 	beq	r6,zero,2ebc <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e84:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e88:	2904703a 	and	r2,r5,r4
    2e8c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2e90:	00c00074 	movhi	r3,1
    2e94:	18e5a004 	addi	r3,r3,-27008
    2e98:	19000017 	ldw	r4,0(r3)
    2e9c:	00800044 	movi	r2,1
    2ea0:	11c4983a 	sll	r2,r2,r7
    2ea4:	1104b03a 	or	r2,r2,r4
    2ea8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2eac:	18800017 	ldw	r2,0(r3)
    2eb0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2eb4:	2801703a 	wrctl	status,r5
    2eb8:	00000e06 	br	2ef4 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ebc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ec0:	00bfff84 	movi	r2,-2
    2ec4:	2884703a 	and	r2,r5,r2
    2ec8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2ecc:	00c00074 	movhi	r3,1
    2ed0:	18e5a004 	addi	r3,r3,-27008
    2ed4:	19000017 	ldw	r4,0(r3)
    2ed8:	00bfff84 	movi	r2,-2
    2edc:	11c4183a 	rol	r2,r2,r7
    2ee0:	1104703a 	and	r2,r2,r4
    2ee4:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2ee8:	18800017 	ldw	r2,0(r3)
    2eec:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ef0:	2801703a 	wrctl	status,r5
    2ef4:	4001703a 	wrctl	status,r8
    2ef8:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2efc:	f800283a 	ret

00002f00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2f00:	defff904 	addi	sp,sp,-28
    2f04:	dfc00615 	stw	ra,24(sp)
    2f08:	dd400515 	stw	r21,20(sp)
    2f0c:	dd000415 	stw	r20,16(sp)
    2f10:	dcc00315 	stw	r19,12(sp)
    2f14:	dc800215 	stw	r18,8(sp)
    2f18:	dc400115 	stw	r17,4(sp)
    2f1c:	dc000015 	stw	r16,0(sp)
    2f20:	2029883a 	mov	r20,r4
    2f24:	2827883a 	mov	r19,r5
    2f28:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2f2c:	01400034 	movhi	r5,0
    2f30:	295e4404 	addi	r5,r5,30992
    2f34:	0002cb80 	call	2cb8 <alt_find_dev>
    2f38:	1021883a 	mov	r16,r2
    2f3c:	10000226 	beq	r2,zero,2f48 <open+0x48>
    2f40:	0025883a 	mov	r18,zero
    2f44:	00000a06 	br	2f70 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2f48:	a009883a 	mov	r4,r20
    2f4c:	00031880 	call	3188 <alt_find_file>
    2f50:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2f54:	1000051e 	bne	r2,zero,2f6c <open+0x6c>
    2f58:	047fffc4 	movi	r17,-1
    2f5c:	043ffb44 	movi	r16,-19
    2f60:	00002b06 	br	3010 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2f64:	043ffcc4 	movi	r16,-13
    2f68:	00002906 	br	3010 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2f6c:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    2f70:	8009883a 	mov	r4,r16
    2f74:	00032440 	call	3244 <alt_get_fd>
    2f78:	1023883a 	mov	r17,r2
    2f7c:	10003316 	blt	r2,zero,304c <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2f80:	10800324 	muli	r2,r2,12
    2f84:	02000034 	movhi	r8,0
    2f88:	421be004 	addi	r8,r8,28544
    2f8c:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2f90:	00900034 	movhi	r2,16384
    2f94:	10bfffc4 	addi	r2,r2,-1
    2f98:	9886703a 	and	r3,r19,r2
    2f9c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2fa0:	9004c03a 	cmpne	r2,r18,zero
    2fa4:	1000121e 	bne	r2,zero,2ff0 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2fa8:	18900034 	orhi	r2,r3,16384
    2fac:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2fb0:	00800034 	movhi	r2,0
    2fb4:	109e4604 	addi	r2,r2,31000
    2fb8:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2fbc:	21800017 	ldw	r6,0(r4)
    2fc0:	000b883a 	mov	r5,zero
    2fc4:	4007883a 	mov	r3,r8
    2fc8:	02400044 	movi	r9,1
    2fcc:	02000304 	movi	r8,12
    2fd0:	18800017 	ldw	r2,0(r3)
    2fd4:	1180031e 	bne	r2,r6,2fe4 <open+0xe4>
    2fd8:	18800217 	ldw	r2,8(r3)
    2fdc:	1000010e 	bge	r2,zero,2fe4 <open+0xe4>
    2fe0:	193fe01e 	bne	r3,r4,2f64 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2fe4:	2a4b883a 	add	r5,r5,r9
    2fe8:	1a07883a 	add	r3,r3,r8
    2fec:	397ff82e 	bgeu	r7,r5,2fd0 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2ff0:	80800317 	ldw	r2,12(r16)
    2ff4:	10001726 	beq	r2,zero,3054 <open+0x154>
    2ff8:	a00b883a 	mov	r5,r20
    2ffc:	980d883a 	mov	r6,r19
    3000:	a80f883a 	mov	r7,r21
    3004:	103ee83a 	callr	r2
    3008:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    300c:	1000110e 	bge	r2,zero,3054 <open+0x154>
  {
    alt_release_fd (index);  
    3010:	8809883a 	mov	r4,r17
    3014:	000307c0 	call	307c <alt_release_fd>
    3018:	00800034 	movhi	r2,0
    301c:	109e4704 	addi	r2,r2,31004
    3020:	10800017 	ldw	r2,0(r2)
    3024:	1000031e 	bne	r2,zero,3034 <open+0x134>
    3028:	00c00074 	movhi	r3,1
    302c:	18e5a304 	addi	r3,r3,-26996
    3030:	00000206 	br	303c <open+0x13c>
    3034:	103ee83a 	callr	r2
    3038:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    303c:	0405c83a 	sub	r2,zero,r16
    3040:	18800015 	stw	r2,0(r3)
    3044:	047fffc4 	movi	r17,-1
    3048:	00000206 	br	3054 <open+0x154>
    304c:	1021883a 	mov	r16,r2
    3050:	003fef06 	br	3010 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    3054:	8805883a 	mov	r2,r17
    3058:	dfc00617 	ldw	ra,24(sp)
    305c:	dd400517 	ldw	r21,20(sp)
    3060:	dd000417 	ldw	r20,16(sp)
    3064:	dcc00317 	ldw	r19,12(sp)
    3068:	dc800217 	ldw	r18,8(sp)
    306c:	dc400117 	ldw	r17,4(sp)
    3070:	dc000017 	ldw	r16,0(sp)
    3074:	dec00704 	addi	sp,sp,28
    3078:	f800283a 	ret

0000307c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    307c:	00800084 	movi	r2,2
    3080:	1100060e 	bge	r2,r4,309c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    3084:	20800324 	muli	r2,r4,12
    3088:	00c00034 	movhi	r3,0
    308c:	18dbe004 	addi	r3,r3,28544
    3090:	10c5883a 	add	r2,r2,r3
    3094:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    3098:	10000015 	stw	zero,0(r2)
    309c:	f800283a 	ret

000030a0 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    30a0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    30a4:	00bfff84 	movi	r2,-2
    30a8:	2884703a 	and	r2,r5,r2
    30ac:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    30b0:	20c00017 	ldw	r3,0(r4)
    30b4:	20800117 	ldw	r2,4(r4)
    30b8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    30bc:	20800117 	ldw	r2,4(r4)
    30c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    30c4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    30c8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    30cc:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    30d0:	f800283a 	ret

000030d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    30d4:	defffd04 	addi	sp,sp,-12
    30d8:	dfc00215 	stw	ra,8(sp)
    30dc:	dc400115 	stw	r17,4(sp)
    30e0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    30e4:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    30e8:	d0a76017 	ldw	r2,-25216(gp)
    30ec:	10800044 	addi	r2,r2,1
    30f0:	d0a76015 	stw	r2,-25216(gp)
    30f4:	00001b06 	br	3164 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    30f8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    30fc:	80800403 	ldbu	r2,16(r16)
    3100:	10000326 	beq	r2,zero,3110 <alt_tick+0x3c>
    3104:	d0a76017 	ldw	r2,-25216(gp)
    3108:	1000011e 	bne	r2,zero,3110 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    310c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3110:	d0e76017 	ldw	r3,-25216(gp)
    3114:	80800217 	ldw	r2,8(r16)
    3118:	18801136 	bltu	r3,r2,3160 <alt_tick+0x8c>
    311c:	80800403 	ldbu	r2,16(r16)
    3120:	10000f1e 	bne	r2,zero,3160 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    3124:	80800317 	ldw	r2,12(r16)
    3128:	81000517 	ldw	r4,20(r16)
    312c:	103ee83a 	callr	r2
    3130:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3134:	1000031e 	bne	r2,zero,3144 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    3138:	8009883a 	mov	r4,r16
    313c:	00030a00 	call	30a0 <alt_alarm_stop>
    3140:	00000706 	br	3160 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    3144:	80800217 	ldw	r2,8(r16)
    3148:	1885883a 	add	r2,r3,r2
    314c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3150:	d0e76017 	ldw	r3,-25216(gp)
    3154:	10c0022e 	bgeu	r2,r3,3160 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    3158:	00800044 	movi	r2,1
    315c:	80800405 	stb	r2,16(r16)
    3160:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3164:	d0a00704 	addi	r2,gp,-32740
    3168:	80bfe31e 	bne	r16,r2,30f8 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    316c:	dfc00217 	ldw	ra,8(sp)
    3170:	dc400117 	ldw	r17,4(sp)
    3174:	dc000017 	ldw	r16,0(sp)
    3178:	dec00304 	addi	sp,sp,12
    317c:	f800283a 	ret

00003180 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    3180:	000170fa 	wrctl	ienable,zero
}
    3184:	f800283a 	ret

00003188 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3188:	defff904 	addi	sp,sp,-28
    318c:	dfc00615 	stw	ra,24(sp)
    3190:	dd400515 	stw	r21,20(sp)
    3194:	dd000415 	stw	r20,16(sp)
    3198:	dcc00315 	stw	r19,12(sp)
    319c:	dc800215 	stw	r18,8(sp)
    31a0:	dc400115 	stw	r17,4(sp)
    31a4:	dc000015 	stw	r16,0(sp)
    31a8:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    31ac:	00800034 	movhi	r2,0
    31b0:	109e4204 	addi	r2,r2,30984
    31b4:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    31b8:	102b883a 	mov	r21,r2
    31bc:	88801626 	beq	r17,r2,3218 <alt_find_file+0x90>
    31c0:	053fffc4 	movi	r20,-1
    31c4:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    31c8:	8c000217 	ldw	r16,8(r17)
    31cc:	8009883a 	mov	r4,r16
    31d0:	00036e00 	call	36e0 <strlen>
    31d4:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    31d8:	8085883a 	add	r2,r16,r2
    31dc:	1505883a 	add	r2,r2,r20
    31e0:	10800007 	ldb	r2,0(r2)
    31e4:	14c0011e 	bne	r2,r19,31ec <alt_find_file+0x64>
    {
      len -= 1;
    31e8:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    31ec:	1c85883a 	add	r2,r3,r18
    31f0:	10800007 	ldb	r2,0(r2)
    31f4:	14c00126 	beq	r2,r19,31fc <alt_find_file+0x74>
    31f8:	1000051e 	bne	r2,zero,3210 <alt_find_file+0x88>
    31fc:	8009883a 	mov	r4,r16
    3200:	900b883a 	mov	r5,r18
    3204:	180d883a 	mov	r6,r3
    3208:	00033240 	call	3324 <memcmp>
    320c:	10000326 	beq	r2,zero,321c <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    3210:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3214:	8d7fec1e 	bne	r17,r21,31c8 <alt_find_file+0x40>
    3218:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    321c:	8805883a 	mov	r2,r17
    3220:	dfc00617 	ldw	ra,24(sp)
    3224:	dd400517 	ldw	r21,20(sp)
    3228:	dd000417 	ldw	r20,16(sp)
    322c:	dcc00317 	ldw	r19,12(sp)
    3230:	dc800217 	ldw	r18,8(sp)
    3234:	dc400117 	ldw	r17,4(sp)
    3238:	dc000017 	ldw	r16,0(sp)
    323c:	dec00704 	addi	sp,sp,28
    3240:	f800283a 	ret

00003244 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3244:	000b883a 	mov	r5,zero
    3248:	00c00034 	movhi	r3,0
    324c:	18dbe004 	addi	r3,r3,28544
    3250:	02000304 	movi	r8,12
    3254:	02400034 	movhi	r9,0
    3258:	4a5e4604 	addi	r9,r9,31000
    325c:	01c00044 	movi	r7,1
    3260:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    3264:	18800017 	ldw	r2,0(r3)
    3268:	10000c1e 	bne	r2,zero,329c <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    326c:	2a05383a 	mul	r2,r5,r8
    3270:	00c00034 	movhi	r3,0
    3274:	18dbe004 	addi	r3,r3,28544
    3278:	10c5883a 	add	r2,r2,r3
    327c:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    3280:	48800017 	ldw	r2,0(r9)
    3284:	11400216 	blt	r2,r5,3290 <alt_get_fd+0x4c>
    3288:	2805883a 	mov	r2,r5
    328c:	f800283a 	ret
      {
        alt_max_fd = i;
    3290:	49400015 	stw	r5,0(r9)
    3294:	2805883a 	mov	r2,r5
    3298:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    329c:	29cb883a 	add	r5,r5,r7
    32a0:	1a07883a 	add	r3,r3,r8
    32a4:	29bfef1e 	bne	r5,r6,3264 <alt_get_fd+0x20>
    32a8:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    32ac:	f800283a 	ret

000032b0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    32b0:	2007883a 	mov	r3,r4
    32b4:	00840004 	movi	r2,4096
    32b8:	1140012e 	bgeu	r2,r5,32c0 <alt_icache_flush+0x10>
    32bc:	100b883a 	mov	r5,r2
    32c0:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    32c4:	1940042e 	bgeu	r3,r5,32d8 <alt_icache_flush+0x28>
    32c8:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    32cc:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    32d0:	1887883a 	add	r3,r3,r2
    32d4:	197ffd36 	bltu	r3,r5,32cc <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    32d8:	208007cc 	andi	r2,r4,31
    32dc:	10000126 	beq	r2,zero,32e4 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    32e0:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    32e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    32e8:	f800283a 	ret

000032ec <exit>:
    32ec:	defffe04 	addi	sp,sp,-8
    32f0:	000b883a 	mov	r5,zero
    32f4:	dc000015 	stw	r16,0(sp)
    32f8:	dfc00115 	stw	ra,4(sp)
    32fc:	2021883a 	mov	r16,r4
    3300:	00039e00 	call	39e0 <__call_exitprocs>
    3304:	00800034 	movhi	r2,0
    3308:	109e4c04 	addi	r2,r2,31024
    330c:	11000017 	ldw	r4,0(r2)
    3310:	20800f17 	ldw	r2,60(r4)
    3314:	10000126 	beq	r2,zero,331c <exit+0x30>
    3318:	103ee83a 	callr	r2
    331c:	8009883a 	mov	r4,r16
    3320:	00054b00 	call	54b0 <_exit>

00003324 <memcmp>:
    3324:	00c000c4 	movi	r3,3
    3328:	1980032e 	bgeu	r3,r6,3338 <memcmp+0x14>
    332c:	2144b03a 	or	r2,r4,r5
    3330:	10c4703a 	and	r2,r2,r3
    3334:	10000f26 	beq	r2,zero,3374 <memcmp+0x50>
    3338:	31ffffc4 	addi	r7,r6,-1
    333c:	3000061e 	bne	r6,zero,3358 <memcmp+0x34>
    3340:	00000a06 	br	336c <memcmp+0x48>
    3344:	39ffffc4 	addi	r7,r7,-1
    3348:	00bfffc4 	movi	r2,-1
    334c:	21000044 	addi	r4,r4,1
    3350:	29400044 	addi	r5,r5,1
    3354:	38800526 	beq	r7,r2,336c <memcmp+0x48>
    3358:	20c00003 	ldbu	r3,0(r4)
    335c:	28800003 	ldbu	r2,0(r5)
    3360:	18bff826 	beq	r3,r2,3344 <memcmp+0x20>
    3364:	1885c83a 	sub	r2,r3,r2
    3368:	f800283a 	ret
    336c:	0005883a 	mov	r2,zero
    3370:	f800283a 	ret
    3374:	180f883a 	mov	r7,r3
    3378:	20c00017 	ldw	r3,0(r4)
    337c:	28800017 	ldw	r2,0(r5)
    3380:	18bfed1e 	bne	r3,r2,3338 <memcmp+0x14>
    3384:	31bfff04 	addi	r6,r6,-4
    3388:	21000104 	addi	r4,r4,4
    338c:	29400104 	addi	r5,r5,4
    3390:	39bff936 	bltu	r7,r6,3378 <memcmp+0x54>
    3394:	003fe806 	br	3338 <memcmp+0x14>

00003398 <memcpy>:
    3398:	01c003c4 	movi	r7,15
    339c:	2007883a 	mov	r3,r4
    33a0:	3980032e 	bgeu	r7,r6,33b0 <memcpy+0x18>
    33a4:	2904b03a 	or	r2,r5,r4
    33a8:	108000cc 	andi	r2,r2,3
    33ac:	10000926 	beq	r2,zero,33d4 <memcpy+0x3c>
    33b0:	30000626 	beq	r6,zero,33cc <memcpy+0x34>
    33b4:	30cd883a 	add	r6,r6,r3
    33b8:	28800003 	ldbu	r2,0(r5)
    33bc:	29400044 	addi	r5,r5,1
    33c0:	18800005 	stb	r2,0(r3)
    33c4:	18c00044 	addi	r3,r3,1
    33c8:	30fffb1e 	bne	r6,r3,33b8 <memcpy+0x20>
    33cc:	2005883a 	mov	r2,r4
    33d0:	f800283a 	ret
    33d4:	3811883a 	mov	r8,r7
    33d8:	200f883a 	mov	r7,r4
    33dc:	28c00017 	ldw	r3,0(r5)
    33e0:	31bffc04 	addi	r6,r6,-16
    33e4:	38c00015 	stw	r3,0(r7)
    33e8:	28800117 	ldw	r2,4(r5)
    33ec:	38800115 	stw	r2,4(r7)
    33f0:	28c00217 	ldw	r3,8(r5)
    33f4:	38c00215 	stw	r3,8(r7)
    33f8:	28800317 	ldw	r2,12(r5)
    33fc:	29400404 	addi	r5,r5,16
    3400:	38800315 	stw	r2,12(r7)
    3404:	39c00404 	addi	r7,r7,16
    3408:	41bff436 	bltu	r8,r6,33dc <memcpy+0x44>
    340c:	008000c4 	movi	r2,3
    3410:	1180072e 	bgeu	r2,r6,3430 <memcpy+0x98>
    3414:	1007883a 	mov	r3,r2
    3418:	28800017 	ldw	r2,0(r5)
    341c:	31bfff04 	addi	r6,r6,-4
    3420:	29400104 	addi	r5,r5,4
    3424:	38800015 	stw	r2,0(r7)
    3428:	39c00104 	addi	r7,r7,4
    342c:	19bffa36 	bltu	r3,r6,3418 <memcpy+0x80>
    3430:	3807883a 	mov	r3,r7
    3434:	003fde06 	br	33b0 <memcpy+0x18>

00003438 <putc>:
    3438:	defffc04 	addi	sp,sp,-16
    343c:	dc800215 	stw	r18,8(sp)
    3440:	04800034 	movhi	r18,0
    3444:	949e4b04 	addi	r18,r18,31020
    3448:	90c00017 	ldw	r3,0(r18)
    344c:	dc400115 	stw	r17,4(sp)
    3450:	dc000015 	stw	r16,0(sp)
    3454:	dfc00315 	stw	ra,12(sp)
    3458:	2023883a 	mov	r17,r4
    345c:	2821883a 	mov	r16,r5
    3460:	18000226 	beq	r3,zero,346c <putc+0x34>
    3464:	18800e17 	ldw	r2,56(r3)
    3468:	10001126 	beq	r2,zero,34b0 <putc+0x78>
    346c:	80800217 	ldw	r2,8(r16)
    3470:	10ffffc4 	addi	r3,r2,-1
    3474:	80c00215 	stw	r3,8(r16)
    3478:	18001316 	blt	r3,zero,34c8 <putc+0x90>
    347c:	80800017 	ldw	r2,0(r16)
    3480:	14400005 	stb	r17,0(r2)
    3484:	80c00017 	ldw	r3,0(r16)
    3488:	18800044 	addi	r2,r3,1
    348c:	18c00003 	ldbu	r3,0(r3)
    3490:	80800015 	stw	r2,0(r16)
    3494:	1805883a 	mov	r2,r3
    3498:	dfc00317 	ldw	ra,12(sp)
    349c:	dc800217 	ldw	r18,8(sp)
    34a0:	dc400117 	ldw	r17,4(sp)
    34a4:	dc000017 	ldw	r16,0(sp)
    34a8:	dec00404 	addi	sp,sp,16
    34ac:	f800283a 	ret
    34b0:	1809883a 	mov	r4,r3
    34b4:	0003e280 	call	3e28 <__sinit>
    34b8:	80800217 	ldw	r2,8(r16)
    34bc:	10ffffc4 	addi	r3,r2,-1
    34c0:	80c00215 	stw	r3,8(r16)
    34c4:	183fed0e 	bge	r3,zero,347c <putc+0x44>
    34c8:	80800617 	ldw	r2,24(r16)
    34cc:	18800f16 	blt	r3,r2,350c <putc+0xd4>
    34d0:	80800017 	ldw	r2,0(r16)
    34d4:	14400005 	stb	r17,0(r2)
    34d8:	81000017 	ldw	r4,0(r16)
    34dc:	00800284 	movi	r2,10
    34e0:	20c00003 	ldbu	r3,0(r4)
    34e4:	18801226 	beq	r3,r2,3530 <putc+0xf8>
    34e8:	20800044 	addi	r2,r4,1
    34ec:	80800015 	stw	r2,0(r16)
    34f0:	1805883a 	mov	r2,r3
    34f4:	dfc00317 	ldw	ra,12(sp)
    34f8:	dc800217 	ldw	r18,8(sp)
    34fc:	dc400117 	ldw	r17,4(sp)
    3500:	dc000017 	ldw	r16,0(sp)
    3504:	dec00404 	addi	sp,sp,16
    3508:	f800283a 	ret
    350c:	91000017 	ldw	r4,0(r18)
    3510:	880b883a 	mov	r5,r17
    3514:	800d883a 	mov	r6,r16
    3518:	dfc00317 	ldw	ra,12(sp)
    351c:	dc800217 	ldw	r18,8(sp)
    3520:	dc400117 	ldw	r17,4(sp)
    3524:	dc000017 	ldw	r16,0(sp)
    3528:	dec00404 	addi	sp,sp,16
    352c:	00037541 	jmpi	3754 <__swbuf_r>
    3530:	91000017 	ldw	r4,0(r18)
    3534:	180b883a 	mov	r5,r3
    3538:	003ff606 	br	3514 <putc+0xdc>

0000353c <_putc_r>:
    353c:	defffc04 	addi	sp,sp,-16
    3540:	dc400215 	stw	r17,8(sp)
    3544:	dc000115 	stw	r16,4(sp)
    3548:	dfc00315 	stw	ra,12(sp)
    354c:	2021883a 	mov	r16,r4
    3550:	2823883a 	mov	r17,r5
    3554:	20000226 	beq	r4,zero,3560 <_putc_r+0x24>
    3558:	20800e17 	ldw	r2,56(r4)
    355c:	10001026 	beq	r2,zero,35a0 <_putc_r+0x64>
    3560:	30800217 	ldw	r2,8(r6)
    3564:	10ffffc4 	addi	r3,r2,-1
    3568:	30c00215 	stw	r3,8(r6)
    356c:	18001316 	blt	r3,zero,35bc <_putc_r+0x80>
    3570:	30800017 	ldw	r2,0(r6)
    3574:	14400005 	stb	r17,0(r2)
    3578:	30c00017 	ldw	r3,0(r6)
    357c:	18800044 	addi	r2,r3,1
    3580:	18c00003 	ldbu	r3,0(r3)
    3584:	30800015 	stw	r2,0(r6)
    3588:	1805883a 	mov	r2,r3
    358c:	dfc00317 	ldw	ra,12(sp)
    3590:	dc400217 	ldw	r17,8(sp)
    3594:	dc000117 	ldw	r16,4(sp)
    3598:	dec00404 	addi	sp,sp,16
    359c:	f800283a 	ret
    35a0:	d9800015 	stw	r6,0(sp)
    35a4:	0003e280 	call	3e28 <__sinit>
    35a8:	d9800017 	ldw	r6,0(sp)
    35ac:	30800217 	ldw	r2,8(r6)
    35b0:	10ffffc4 	addi	r3,r2,-1
    35b4:	30c00215 	stw	r3,8(r6)
    35b8:	183fed0e 	bge	r3,zero,3570 <_putc_r+0x34>
    35bc:	30800617 	ldw	r2,24(r6)
    35c0:	18800e16 	blt	r3,r2,35fc <_putc_r+0xc0>
    35c4:	30800017 	ldw	r2,0(r6)
    35c8:	14400005 	stb	r17,0(r2)
    35cc:	31000017 	ldw	r4,0(r6)
    35d0:	00800284 	movi	r2,10
    35d4:	20c00003 	ldbu	r3,0(r4)
    35d8:	18800f26 	beq	r3,r2,3618 <_putc_r+0xdc>
    35dc:	20800044 	addi	r2,r4,1
    35e0:	30800015 	stw	r2,0(r6)
    35e4:	1805883a 	mov	r2,r3
    35e8:	dfc00317 	ldw	ra,12(sp)
    35ec:	dc400217 	ldw	r17,8(sp)
    35f0:	dc000117 	ldw	r16,4(sp)
    35f4:	dec00404 	addi	sp,sp,16
    35f8:	f800283a 	ret
    35fc:	8009883a 	mov	r4,r16
    3600:	880b883a 	mov	r5,r17
    3604:	dfc00317 	ldw	ra,12(sp)
    3608:	dc400217 	ldw	r17,8(sp)
    360c:	dc000117 	ldw	r16,4(sp)
    3610:	dec00404 	addi	sp,sp,16
    3614:	00037541 	jmpi	3754 <__swbuf_r>
    3618:	8009883a 	mov	r4,r16
    361c:	180b883a 	mov	r5,r3
    3620:	003ff806 	br	3604 <_putc_r+0xc8>

00003624 <strcmp>:
    3624:	2144b03a 	or	r2,r4,r5
    3628:	108000cc 	andi	r2,r2,3
    362c:	10001d1e 	bne	r2,zero,36a4 <strcmp+0x80>
    3630:	200f883a 	mov	r7,r4
    3634:	28800017 	ldw	r2,0(r5)
    3638:	21000017 	ldw	r4,0(r4)
    363c:	280d883a 	mov	r6,r5
    3640:	2080161e 	bne	r4,r2,369c <strcmp+0x78>
    3644:	023fbff4 	movhi	r8,65279
    3648:	423fbfc4 	addi	r8,r8,-257
    364c:	2207883a 	add	r3,r4,r8
    3650:	01602074 	movhi	r5,32897
    3654:	29602004 	addi	r5,r5,-32640
    3658:	1946703a 	and	r3,r3,r5
    365c:	0104303a 	nor	r2,zero,r4
    3660:	10c4703a 	and	r2,r2,r3
    3664:	10001c1e 	bne	r2,zero,36d8 <strcmp+0xb4>
    3668:	4013883a 	mov	r9,r8
    366c:	2811883a 	mov	r8,r5
    3670:	00000106 	br	3678 <strcmp+0x54>
    3674:	1800181e 	bne	r3,zero,36d8 <strcmp+0xb4>
    3678:	39c00104 	addi	r7,r7,4
    367c:	39000017 	ldw	r4,0(r7)
    3680:	31800104 	addi	r6,r6,4
    3684:	31400017 	ldw	r5,0(r6)
    3688:	2245883a 	add	r2,r4,r9
    368c:	1204703a 	and	r2,r2,r8
    3690:	0106303a 	nor	r3,zero,r4
    3694:	1886703a 	and	r3,r3,r2
    3698:	217ff626 	beq	r4,r5,3674 <strcmp+0x50>
    369c:	3809883a 	mov	r4,r7
    36a0:	300b883a 	mov	r5,r6
    36a4:	20c00007 	ldb	r3,0(r4)
    36a8:	1800051e 	bne	r3,zero,36c0 <strcmp+0x9c>
    36ac:	00000606 	br	36c8 <strcmp+0xa4>
    36b0:	21000044 	addi	r4,r4,1
    36b4:	20c00007 	ldb	r3,0(r4)
    36b8:	29400044 	addi	r5,r5,1
    36bc:	18000226 	beq	r3,zero,36c8 <strcmp+0xa4>
    36c0:	28800007 	ldb	r2,0(r5)
    36c4:	18bffa26 	beq	r3,r2,36b0 <strcmp+0x8c>
    36c8:	20c00003 	ldbu	r3,0(r4)
    36cc:	28800003 	ldbu	r2,0(r5)
    36d0:	1885c83a 	sub	r2,r3,r2
    36d4:	f800283a 	ret
    36d8:	0005883a 	mov	r2,zero
    36dc:	f800283a 	ret

000036e0 <strlen>:
    36e0:	208000cc 	andi	r2,r4,3
    36e4:	2011883a 	mov	r8,r4
    36e8:	1000161e 	bne	r2,zero,3744 <strlen+0x64>
    36ec:	20c00017 	ldw	r3,0(r4)
    36f0:	017fbff4 	movhi	r5,65279
    36f4:	297fbfc4 	addi	r5,r5,-257
    36f8:	01e02074 	movhi	r7,32897
    36fc:	39e02004 	addi	r7,r7,-32640
    3700:	1945883a 	add	r2,r3,r5
    3704:	11c4703a 	and	r2,r2,r7
    3708:	00c6303a 	nor	r3,zero,r3
    370c:	1886703a 	and	r3,r3,r2
    3710:	18000c1e 	bne	r3,zero,3744 <strlen+0x64>
    3714:	280d883a 	mov	r6,r5
    3718:	380b883a 	mov	r5,r7
    371c:	21000104 	addi	r4,r4,4
    3720:	20800017 	ldw	r2,0(r4)
    3724:	1187883a 	add	r3,r2,r6
    3728:	1946703a 	and	r3,r3,r5
    372c:	0084303a 	nor	r2,zero,r2
    3730:	10c4703a 	and	r2,r2,r3
    3734:	103ff926 	beq	r2,zero,371c <strlen+0x3c>
    3738:	20800007 	ldb	r2,0(r4)
    373c:	10000326 	beq	r2,zero,374c <strlen+0x6c>
    3740:	21000044 	addi	r4,r4,1
    3744:	20800007 	ldb	r2,0(r4)
    3748:	103ffd1e 	bne	r2,zero,3740 <strlen+0x60>
    374c:	2205c83a 	sub	r2,r4,r8
    3750:	f800283a 	ret

00003754 <__swbuf_r>:
    3754:	defffc04 	addi	sp,sp,-16
    3758:	dc400215 	stw	r17,8(sp)
    375c:	dc000115 	stw	r16,4(sp)
    3760:	dfc00315 	stw	ra,12(sp)
    3764:	2023883a 	mov	r17,r4
    3768:	2821883a 	mov	r16,r5
    376c:	20000226 	beq	r4,zero,3778 <__swbuf_r+0x24>
    3770:	20800e17 	ldw	r2,56(r4)
    3774:	10002f26 	beq	r2,zero,3834 <__swbuf_r+0xe0>
    3778:	3080030b 	ldhu	r2,12(r6)
    377c:	30c00617 	ldw	r3,24(r6)
    3780:	1080020c 	andi	r2,r2,8
    3784:	30c00215 	stw	r3,8(r6)
    3788:	10002226 	beq	r2,zero,3814 <__swbuf_r+0xc0>
    378c:	30c00417 	ldw	r3,16(r6)
    3790:	18002026 	beq	r3,zero,3814 <__swbuf_r+0xc0>
    3794:	31000017 	ldw	r4,0(r6)
    3798:	30800517 	ldw	r2,20(r6)
    379c:	20c7c83a 	sub	r3,r4,r3
    37a0:	18802f0e 	bge	r3,r2,3860 <__swbuf_r+0x10c>
    37a4:	19400044 	addi	r5,r3,1
    37a8:	30800217 	ldw	r2,8(r6)
    37ac:	84003fcc 	andi	r16,r16,255
    37b0:	20c00044 	addi	r3,r4,1
    37b4:	10bfffc4 	addi	r2,r2,-1
    37b8:	30800215 	stw	r2,8(r6)
    37bc:	24000005 	stb	r16,0(r4)
    37c0:	30800517 	ldw	r2,20(r6)
    37c4:	30c00015 	stw	r3,0(r6)
    37c8:	11400c26 	beq	r2,r5,37fc <__swbuf_r+0xa8>
    37cc:	3080030b 	ldhu	r2,12(r6)
    37d0:	1080004c 	andi	r2,r2,1
    37d4:	1005003a 	cmpeq	r2,r2,zero
    37d8:	10000626 	beq	r2,zero,37f4 <__swbuf_r+0xa0>
    37dc:	8005883a 	mov	r2,r16
    37e0:	dfc00317 	ldw	ra,12(sp)
    37e4:	dc400217 	ldw	r17,8(sp)
    37e8:	dc000117 	ldw	r16,4(sp)
    37ec:	dec00404 	addi	sp,sp,16
    37f0:	f800283a 	ret
    37f4:	00800284 	movi	r2,10
    37f8:	80bff81e 	bne	r16,r2,37dc <__swbuf_r+0x88>
    37fc:	8809883a 	mov	r4,r17
    3800:	300b883a 	mov	r5,r6
    3804:	0003b900 	call	3b90 <_fflush_r>
    3808:	103ff426 	beq	r2,zero,37dc <__swbuf_r+0x88>
    380c:	043fffc4 	movi	r16,-1
    3810:	003ff206 	br	37dc <__swbuf_r+0x88>
    3814:	300b883a 	mov	r5,r6
    3818:	8809883a 	mov	r4,r17
    381c:	d9800015 	stw	r6,0(sp)
    3820:	00038a00 	call	38a0 <__swsetup_r>
    3824:	d9800017 	ldw	r6,0(sp)
    3828:	1000061e 	bne	r2,zero,3844 <__swbuf_r+0xf0>
    382c:	30c00417 	ldw	r3,16(r6)
    3830:	003fd806 	br	3794 <__swbuf_r+0x40>
    3834:	d9800015 	stw	r6,0(sp)
    3838:	0003e280 	call	3e28 <__sinit>
    383c:	d9800017 	ldw	r6,0(sp)
    3840:	003fcd06 	br	3778 <__swbuf_r+0x24>
    3844:	3080030b 	ldhu	r2,12(r6)
    3848:	00c00244 	movi	r3,9
    384c:	043fffc4 	movi	r16,-1
    3850:	10801014 	ori	r2,r2,64
    3854:	3080030d 	sth	r2,12(r6)
    3858:	88c00015 	stw	r3,0(r17)
    385c:	003fdf06 	br	37dc <__swbuf_r+0x88>
    3860:	300b883a 	mov	r5,r6
    3864:	8809883a 	mov	r4,r17
    3868:	d9800015 	stw	r6,0(sp)
    386c:	0003b900 	call	3b90 <_fflush_r>
    3870:	d9800017 	ldw	r6,0(sp)
    3874:	103fe51e 	bne	r2,zero,380c <__swbuf_r+0xb8>
    3878:	31000017 	ldw	r4,0(r6)
    387c:	01400044 	movi	r5,1
    3880:	003fc906 	br	37a8 <__swbuf_r+0x54>

00003884 <__swbuf>:
    3884:	01800034 	movhi	r6,0
    3888:	319e4b04 	addi	r6,r6,31020
    388c:	2007883a 	mov	r3,r4
    3890:	31000017 	ldw	r4,0(r6)
    3894:	280d883a 	mov	r6,r5
    3898:	180b883a 	mov	r5,r3
    389c:	00037541 	jmpi	3754 <__swbuf_r>

000038a0 <__swsetup_r>:
    38a0:	00800034 	movhi	r2,0
    38a4:	109e4b04 	addi	r2,r2,31020
    38a8:	10c00017 	ldw	r3,0(r2)
    38ac:	defffd04 	addi	sp,sp,-12
    38b0:	dc400115 	stw	r17,4(sp)
    38b4:	dc000015 	stw	r16,0(sp)
    38b8:	dfc00215 	stw	ra,8(sp)
    38bc:	2023883a 	mov	r17,r4
    38c0:	2821883a 	mov	r16,r5
    38c4:	18000226 	beq	r3,zero,38d0 <__swsetup_r+0x30>
    38c8:	18800e17 	ldw	r2,56(r3)
    38cc:	10001f26 	beq	r2,zero,394c <__swsetup_r+0xac>
    38d0:	8100030b 	ldhu	r4,12(r16)
    38d4:	2080020c 	andi	r2,r4,8
    38d8:	10002826 	beq	r2,zero,397c <__swsetup_r+0xdc>
    38dc:	81400417 	ldw	r5,16(r16)
    38e0:	28001d26 	beq	r5,zero,3958 <__swsetup_r+0xb8>
    38e4:	2080004c 	andi	r2,r4,1
    38e8:	1005003a 	cmpeq	r2,r2,zero
    38ec:	10000b26 	beq	r2,zero,391c <__swsetup_r+0x7c>
    38f0:	2080008c 	andi	r2,r4,2
    38f4:	10001226 	beq	r2,zero,3940 <__swsetup_r+0xa0>
    38f8:	0005883a 	mov	r2,zero
    38fc:	80800215 	stw	r2,8(r16)
    3900:	28000b26 	beq	r5,zero,3930 <__swsetup_r+0x90>
    3904:	0005883a 	mov	r2,zero
    3908:	dfc00217 	ldw	ra,8(sp)
    390c:	dc400117 	ldw	r17,4(sp)
    3910:	dc000017 	ldw	r16,0(sp)
    3914:	dec00304 	addi	sp,sp,12
    3918:	f800283a 	ret
    391c:	80800517 	ldw	r2,20(r16)
    3920:	80000215 	stw	zero,8(r16)
    3924:	0085c83a 	sub	r2,zero,r2
    3928:	80800615 	stw	r2,24(r16)
    392c:	283ff51e 	bne	r5,zero,3904 <__swsetup_r+0x64>
    3930:	2080200c 	andi	r2,r4,128
    3934:	103ff326 	beq	r2,zero,3904 <__swsetup_r+0x64>
    3938:	00bfffc4 	movi	r2,-1
    393c:	003ff206 	br	3908 <__swsetup_r+0x68>
    3940:	80800517 	ldw	r2,20(r16)
    3944:	80800215 	stw	r2,8(r16)
    3948:	003fed06 	br	3900 <__swsetup_r+0x60>
    394c:	1809883a 	mov	r4,r3
    3950:	0003e280 	call	3e28 <__sinit>
    3954:	003fde06 	br	38d0 <__swsetup_r+0x30>
    3958:	20c0a00c 	andi	r3,r4,640
    395c:	00808004 	movi	r2,512
    3960:	18bfe026 	beq	r3,r2,38e4 <__swsetup_r+0x44>
    3964:	8809883a 	mov	r4,r17
    3968:	800b883a 	mov	r5,r16
    396c:	00046400 	call	4640 <__smakebuf_r>
    3970:	8100030b 	ldhu	r4,12(r16)
    3974:	81400417 	ldw	r5,16(r16)
    3978:	003fda06 	br	38e4 <__swsetup_r+0x44>
    397c:	2080040c 	andi	r2,r4,16
    3980:	103fed26 	beq	r2,zero,3938 <__swsetup_r+0x98>
    3984:	2080010c 	andi	r2,r4,4
    3988:	10001226 	beq	r2,zero,39d4 <__swsetup_r+0x134>
    398c:	81400c17 	ldw	r5,48(r16)
    3990:	28000526 	beq	r5,zero,39a8 <__swsetup_r+0x108>
    3994:	80801004 	addi	r2,r16,64
    3998:	28800226 	beq	r5,r2,39a4 <__swsetup_r+0x104>
    399c:	8809883a 	mov	r4,r17
    39a0:	00041ac0 	call	41ac <_free_r>
    39a4:	80000c15 	stw	zero,48(r16)
    39a8:	8080030b 	ldhu	r2,12(r16)
    39ac:	81400417 	ldw	r5,16(r16)
    39b0:	80000115 	stw	zero,4(r16)
    39b4:	10bff6cc 	andi	r2,r2,65499
    39b8:	8080030d 	sth	r2,12(r16)
    39bc:	81400015 	stw	r5,0(r16)
    39c0:	8080030b 	ldhu	r2,12(r16)
    39c4:	10800214 	ori	r2,r2,8
    39c8:	113fffcc 	andi	r4,r2,65535
    39cc:	8080030d 	sth	r2,12(r16)
    39d0:	003fc306 	br	38e0 <__swsetup_r+0x40>
    39d4:	81400417 	ldw	r5,16(r16)
    39d8:	003ff906 	br	39c0 <__swsetup_r+0x120>

000039dc <register_fini>:
    39dc:	f800283a 	ret

000039e0 <__call_exitprocs>:
    39e0:	00800034 	movhi	r2,0
    39e4:	109e4c04 	addi	r2,r2,31024
    39e8:	10800017 	ldw	r2,0(r2)
    39ec:	defff304 	addi	sp,sp,-52
    39f0:	df000b15 	stw	fp,44(sp)
    39f4:	d8800115 	stw	r2,4(sp)
    39f8:	00800034 	movhi	r2,0
    39fc:	10800004 	addi	r2,r2,0
    3a00:	1005003a 	cmpeq	r2,r2,zero
    3a04:	d8800215 	stw	r2,8(sp)
    3a08:	d8800117 	ldw	r2,4(sp)
    3a0c:	dd400815 	stw	r21,32(sp)
    3a10:	dd000715 	stw	r20,28(sp)
    3a14:	10805204 	addi	r2,r2,328
    3a18:	dfc00c15 	stw	ra,48(sp)
    3a1c:	ddc00a15 	stw	r23,40(sp)
    3a20:	dd800915 	stw	r22,36(sp)
    3a24:	dcc00615 	stw	r19,24(sp)
    3a28:	dc800515 	stw	r18,20(sp)
    3a2c:	dc400415 	stw	r17,16(sp)
    3a30:	dc000315 	stw	r16,12(sp)
    3a34:	282b883a 	mov	r21,r5
    3a38:	2039883a 	mov	fp,r4
    3a3c:	d8800015 	stw	r2,0(sp)
    3a40:	2829003a 	cmpeq	r20,r5,zero
    3a44:	d8800117 	ldw	r2,4(sp)
    3a48:	14405217 	ldw	r17,328(r2)
    3a4c:	88001026 	beq	r17,zero,3a90 <__call_exitprocs+0xb0>
    3a50:	ddc00017 	ldw	r23,0(sp)
    3a54:	88800117 	ldw	r2,4(r17)
    3a58:	8c802204 	addi	r18,r17,136
    3a5c:	143fffc4 	addi	r16,r2,-1
    3a60:	80000916 	blt	r16,zero,3a88 <__call_exitprocs+0xa8>
    3a64:	05bfffc4 	movi	r22,-1
    3a68:	a000151e 	bne	r20,zero,3ac0 <__call_exitprocs+0xe0>
    3a6c:	8409883a 	add	r4,r16,r16
    3a70:	2105883a 	add	r2,r4,r4
    3a74:	1485883a 	add	r2,r2,r18
    3a78:	10c02017 	ldw	r3,128(r2)
    3a7c:	a8c01126 	beq	r21,r3,3ac4 <__call_exitprocs+0xe4>
    3a80:	843fffc4 	addi	r16,r16,-1
    3a84:	85bff81e 	bne	r16,r22,3a68 <__call_exitprocs+0x88>
    3a88:	d8800217 	ldw	r2,8(sp)
    3a8c:	10003126 	beq	r2,zero,3b54 <__call_exitprocs+0x174>
    3a90:	dfc00c17 	ldw	ra,48(sp)
    3a94:	df000b17 	ldw	fp,44(sp)
    3a98:	ddc00a17 	ldw	r23,40(sp)
    3a9c:	dd800917 	ldw	r22,36(sp)
    3aa0:	dd400817 	ldw	r21,32(sp)
    3aa4:	dd000717 	ldw	r20,28(sp)
    3aa8:	dcc00617 	ldw	r19,24(sp)
    3aac:	dc800517 	ldw	r18,20(sp)
    3ab0:	dc400417 	ldw	r17,16(sp)
    3ab4:	dc000317 	ldw	r16,12(sp)
    3ab8:	dec00d04 	addi	sp,sp,52
    3abc:	f800283a 	ret
    3ac0:	8409883a 	add	r4,r16,r16
    3ac4:	88c00117 	ldw	r3,4(r17)
    3ac8:	2105883a 	add	r2,r4,r4
    3acc:	1445883a 	add	r2,r2,r17
    3ad0:	18ffffc4 	addi	r3,r3,-1
    3ad4:	11800217 	ldw	r6,8(r2)
    3ad8:	1c001526 	beq	r3,r16,3b30 <__call_exitprocs+0x150>
    3adc:	10000215 	stw	zero,8(r2)
    3ae0:	303fe726 	beq	r6,zero,3a80 <__call_exitprocs+0xa0>
    3ae4:	00c00044 	movi	r3,1
    3ae8:	1c06983a 	sll	r3,r3,r16
    3aec:	90804017 	ldw	r2,256(r18)
    3af0:	8cc00117 	ldw	r19,4(r17)
    3af4:	1884703a 	and	r2,r3,r2
    3af8:	10001426 	beq	r2,zero,3b4c <__call_exitprocs+0x16c>
    3afc:	90804117 	ldw	r2,260(r18)
    3b00:	1884703a 	and	r2,r3,r2
    3b04:	10000c1e 	bne	r2,zero,3b38 <__call_exitprocs+0x158>
    3b08:	2105883a 	add	r2,r4,r4
    3b0c:	1485883a 	add	r2,r2,r18
    3b10:	11400017 	ldw	r5,0(r2)
    3b14:	e009883a 	mov	r4,fp
    3b18:	303ee83a 	callr	r6
    3b1c:	88800117 	ldw	r2,4(r17)
    3b20:	98bfc81e 	bne	r19,r2,3a44 <__call_exitprocs+0x64>
    3b24:	b8800017 	ldw	r2,0(r23)
    3b28:	147fd526 	beq	r2,r17,3a80 <__call_exitprocs+0xa0>
    3b2c:	003fc506 	br	3a44 <__call_exitprocs+0x64>
    3b30:	8c000115 	stw	r16,4(r17)
    3b34:	003fea06 	br	3ae0 <__call_exitprocs+0x100>
    3b38:	2105883a 	add	r2,r4,r4
    3b3c:	1485883a 	add	r2,r2,r18
    3b40:	11000017 	ldw	r4,0(r2)
    3b44:	303ee83a 	callr	r6
    3b48:	003ff406 	br	3b1c <__call_exitprocs+0x13c>
    3b4c:	303ee83a 	callr	r6
    3b50:	003ff206 	br	3b1c <__call_exitprocs+0x13c>
    3b54:	88800117 	ldw	r2,4(r17)
    3b58:	1000081e 	bne	r2,zero,3b7c <__call_exitprocs+0x19c>
    3b5c:	89000017 	ldw	r4,0(r17)
    3b60:	20000726 	beq	r4,zero,3b80 <__call_exitprocs+0x1a0>
    3b64:	b9000015 	stw	r4,0(r23)
    3b68:	8809883a 	mov	r4,r17
    3b6c:	00000000 	call	0 <__alt_mem_SDRAM>
    3b70:	bc400017 	ldw	r17,0(r23)
    3b74:	883fb71e 	bne	r17,zero,3a54 <__call_exitprocs+0x74>
    3b78:	003fc506 	br	3a90 <__call_exitprocs+0xb0>
    3b7c:	89000017 	ldw	r4,0(r17)
    3b80:	882f883a 	mov	r23,r17
    3b84:	2023883a 	mov	r17,r4
    3b88:	883fb21e 	bne	r17,zero,3a54 <__call_exitprocs+0x74>
    3b8c:	003fc006 	br	3a90 <__call_exitprocs+0xb0>

00003b90 <_fflush_r>:
    3b90:	defffb04 	addi	sp,sp,-20
    3b94:	dcc00315 	stw	r19,12(sp)
    3b98:	dc800215 	stw	r18,8(sp)
    3b9c:	dfc00415 	stw	ra,16(sp)
    3ba0:	dc400115 	stw	r17,4(sp)
    3ba4:	dc000015 	stw	r16,0(sp)
    3ba8:	2027883a 	mov	r19,r4
    3bac:	2825883a 	mov	r18,r5
    3bb0:	20000226 	beq	r4,zero,3bbc <_fflush_r+0x2c>
    3bb4:	20800e17 	ldw	r2,56(r4)
    3bb8:	10005626 	beq	r2,zero,3d14 <_fflush_r+0x184>
    3bbc:	9100030b 	ldhu	r4,12(r18)
    3bc0:	20ffffcc 	andi	r3,r4,65535
    3bc4:	18e0001c 	xori	r3,r3,32768
    3bc8:	18e00004 	addi	r3,r3,-32768
    3bcc:	1880020c 	andi	r2,r3,8
    3bd0:	1000261e 	bne	r2,zero,3c6c <_fflush_r+0xdc>
    3bd4:	90c00117 	ldw	r3,4(r18)
    3bd8:	20820014 	ori	r2,r4,2048
    3bdc:	9080030d 	sth	r2,12(r18)
    3be0:	1009883a 	mov	r4,r2
    3be4:	00c0400e 	bge	zero,r3,3ce8 <_fflush_r+0x158>
    3be8:	92000a17 	ldw	r8,40(r18)
    3bec:	40004026 	beq	r8,zero,3cf0 <_fflush_r+0x160>
    3bf0:	2084000c 	andi	r2,r4,4096
    3bf4:	10005326 	beq	r2,zero,3d44 <_fflush_r+0x1b4>
    3bf8:	94001417 	ldw	r16,80(r18)
    3bfc:	9080030b 	ldhu	r2,12(r18)
    3c00:	1080010c 	andi	r2,r2,4
    3c04:	1000481e 	bne	r2,zero,3d28 <_fflush_r+0x198>
    3c08:	91400717 	ldw	r5,28(r18)
    3c0c:	9809883a 	mov	r4,r19
    3c10:	800d883a 	mov	r6,r16
    3c14:	000f883a 	mov	r7,zero
    3c18:	403ee83a 	callr	r8
    3c1c:	8080261e 	bne	r16,r2,3cb8 <_fflush_r+0x128>
    3c20:	9080030b 	ldhu	r2,12(r18)
    3c24:	91000417 	ldw	r4,16(r18)
    3c28:	90000115 	stw	zero,4(r18)
    3c2c:	10bdffcc 	andi	r2,r2,63487
    3c30:	10ffffcc 	andi	r3,r2,65535
    3c34:	18c4000c 	andi	r3,r3,4096
    3c38:	9080030d 	sth	r2,12(r18)
    3c3c:	91000015 	stw	r4,0(r18)
    3c40:	18002b26 	beq	r3,zero,3cf0 <_fflush_r+0x160>
    3c44:	0007883a 	mov	r3,zero
    3c48:	1805883a 	mov	r2,r3
    3c4c:	94001415 	stw	r16,80(r18)
    3c50:	dfc00417 	ldw	ra,16(sp)
    3c54:	dcc00317 	ldw	r19,12(sp)
    3c58:	dc800217 	ldw	r18,8(sp)
    3c5c:	dc400117 	ldw	r17,4(sp)
    3c60:	dc000017 	ldw	r16,0(sp)
    3c64:	dec00504 	addi	sp,sp,20
    3c68:	f800283a 	ret
    3c6c:	94400417 	ldw	r17,16(r18)
    3c70:	88001f26 	beq	r17,zero,3cf0 <_fflush_r+0x160>
    3c74:	90800017 	ldw	r2,0(r18)
    3c78:	18c000cc 	andi	r3,r3,3
    3c7c:	94400015 	stw	r17,0(r18)
    3c80:	1461c83a 	sub	r16,r2,r17
    3c84:	18002526 	beq	r3,zero,3d1c <_fflush_r+0x18c>
    3c88:	0005883a 	mov	r2,zero
    3c8c:	90800215 	stw	r2,8(r18)
    3c90:	0400170e 	bge	zero,r16,3cf0 <_fflush_r+0x160>
    3c94:	90c00917 	ldw	r3,36(r18)
    3c98:	91400717 	ldw	r5,28(r18)
    3c9c:	880d883a 	mov	r6,r17
    3ca0:	800f883a 	mov	r7,r16
    3ca4:	9809883a 	mov	r4,r19
    3ca8:	183ee83a 	callr	r3
    3cac:	88a3883a 	add	r17,r17,r2
    3cb0:	80a1c83a 	sub	r16,r16,r2
    3cb4:	00bff616 	blt	zero,r2,3c90 <_fflush_r+0x100>
    3cb8:	9080030b 	ldhu	r2,12(r18)
    3cbc:	00ffffc4 	movi	r3,-1
    3cc0:	10801014 	ori	r2,r2,64
    3cc4:	9080030d 	sth	r2,12(r18)
    3cc8:	1805883a 	mov	r2,r3
    3ccc:	dfc00417 	ldw	ra,16(sp)
    3cd0:	dcc00317 	ldw	r19,12(sp)
    3cd4:	dc800217 	ldw	r18,8(sp)
    3cd8:	dc400117 	ldw	r17,4(sp)
    3cdc:	dc000017 	ldw	r16,0(sp)
    3ce0:	dec00504 	addi	sp,sp,20
    3ce4:	f800283a 	ret
    3ce8:	90800f17 	ldw	r2,60(r18)
    3cec:	00bfbe16 	blt	zero,r2,3be8 <_fflush_r+0x58>
    3cf0:	0007883a 	mov	r3,zero
    3cf4:	1805883a 	mov	r2,r3
    3cf8:	dfc00417 	ldw	ra,16(sp)
    3cfc:	dcc00317 	ldw	r19,12(sp)
    3d00:	dc800217 	ldw	r18,8(sp)
    3d04:	dc400117 	ldw	r17,4(sp)
    3d08:	dc000017 	ldw	r16,0(sp)
    3d0c:	dec00504 	addi	sp,sp,20
    3d10:	f800283a 	ret
    3d14:	0003e280 	call	3e28 <__sinit>
    3d18:	003fa806 	br	3bbc <_fflush_r+0x2c>
    3d1c:	90800517 	ldw	r2,20(r18)
    3d20:	90800215 	stw	r2,8(r18)
    3d24:	003fda06 	br	3c90 <_fflush_r+0x100>
    3d28:	90800117 	ldw	r2,4(r18)
    3d2c:	90c00c17 	ldw	r3,48(r18)
    3d30:	80a1c83a 	sub	r16,r16,r2
    3d34:	183fb426 	beq	r3,zero,3c08 <_fflush_r+0x78>
    3d38:	90800f17 	ldw	r2,60(r18)
    3d3c:	80a1c83a 	sub	r16,r16,r2
    3d40:	003fb106 	br	3c08 <_fflush_r+0x78>
    3d44:	91400717 	ldw	r5,28(r18)
    3d48:	9809883a 	mov	r4,r19
    3d4c:	000d883a 	mov	r6,zero
    3d50:	01c00044 	movi	r7,1
    3d54:	403ee83a 	callr	r8
    3d58:	1021883a 	mov	r16,r2
    3d5c:	00bfffc4 	movi	r2,-1
    3d60:	80800226 	beq	r16,r2,3d6c <_fflush_r+0x1dc>
    3d64:	92000a17 	ldw	r8,40(r18)
    3d68:	003fa406 	br	3bfc <_fflush_r+0x6c>
    3d6c:	98c00017 	ldw	r3,0(r19)
    3d70:	00800744 	movi	r2,29
    3d74:	18bfde26 	beq	r3,r2,3cf0 <_fflush_r+0x160>
    3d78:	9080030b 	ldhu	r2,12(r18)
    3d7c:	8007883a 	mov	r3,r16
    3d80:	10801014 	ori	r2,r2,64
    3d84:	9080030d 	sth	r2,12(r18)
    3d88:	003fcf06 	br	3cc8 <_fflush_r+0x138>

00003d8c <fflush>:
    3d8c:	01400034 	movhi	r5,0
    3d90:	294ee404 	addi	r5,r5,15248
    3d94:	2007883a 	mov	r3,r4
    3d98:	20000526 	beq	r4,zero,3db0 <fflush+0x24>
    3d9c:	00800034 	movhi	r2,0
    3da0:	109e4b04 	addi	r2,r2,31020
    3da4:	11000017 	ldw	r4,0(r2)
    3da8:	180b883a 	mov	r5,r3
    3dac:	0003b901 	jmpi	3b90 <_fflush_r>
    3db0:	00800034 	movhi	r2,0
    3db4:	109e4c04 	addi	r2,r2,31024
    3db8:	11000017 	ldw	r4,0(r2)
    3dbc:	00044c01 	jmpi	44c0 <_fwalk_reent>

00003dc0 <std>:
    3dc0:	00800034 	movhi	r2,0
    3dc4:	1093e104 	addi	r2,r2,20356
    3dc8:	20800b15 	stw	r2,44(r4)
    3dcc:	00800034 	movhi	r2,0
    3dd0:	10941c04 	addi	r2,r2,20592
    3dd4:	20800815 	stw	r2,32(r4)
    3dd8:	00c00034 	movhi	r3,0
    3ddc:	18d3fd04 	addi	r3,r3,20468
    3de0:	00800034 	movhi	r2,0
    3de4:	1093e304 	addi	r2,r2,20364
    3de8:	2140030d 	sth	r5,12(r4)
    3dec:	2180038d 	sth	r6,14(r4)
    3df0:	20c00915 	stw	r3,36(r4)
    3df4:	20800a15 	stw	r2,40(r4)
    3df8:	20000015 	stw	zero,0(r4)
    3dfc:	20000115 	stw	zero,4(r4)
    3e00:	20000215 	stw	zero,8(r4)
    3e04:	20000415 	stw	zero,16(r4)
    3e08:	20000515 	stw	zero,20(r4)
    3e0c:	20000615 	stw	zero,24(r4)
    3e10:	21000715 	stw	r4,28(r4)
    3e14:	f800283a 	ret

00003e18 <__sfp_lock_acquire>:
    3e18:	f800283a 	ret

00003e1c <__sfp_lock_release>:
    3e1c:	f800283a 	ret

00003e20 <__sinit_lock_acquire>:
    3e20:	f800283a 	ret

00003e24 <__sinit_lock_release>:
    3e24:	f800283a 	ret

00003e28 <__sinit>:
    3e28:	20800e17 	ldw	r2,56(r4)
    3e2c:	defffd04 	addi	sp,sp,-12
    3e30:	dc400115 	stw	r17,4(sp)
    3e34:	dc000015 	stw	r16,0(sp)
    3e38:	dfc00215 	stw	ra,8(sp)
    3e3c:	04400044 	movi	r17,1
    3e40:	01400104 	movi	r5,4
    3e44:	000d883a 	mov	r6,zero
    3e48:	2021883a 	mov	r16,r4
    3e4c:	2200bb04 	addi	r8,r4,748
    3e50:	200f883a 	mov	r7,r4
    3e54:	10000526 	beq	r2,zero,3e6c <__sinit+0x44>
    3e58:	dfc00217 	ldw	ra,8(sp)
    3e5c:	dc400117 	ldw	r17,4(sp)
    3e60:	dc000017 	ldw	r16,0(sp)
    3e64:	dec00304 	addi	sp,sp,12
    3e68:	f800283a 	ret
    3e6c:	21000117 	ldw	r4,4(r4)
    3e70:	00800034 	movhi	r2,0
    3e74:	108fc304 	addi	r2,r2,16140
    3e78:	00c000c4 	movi	r3,3
    3e7c:	80800f15 	stw	r2,60(r16)
    3e80:	80c0b915 	stw	r3,740(r16)
    3e84:	8200ba15 	stw	r8,744(r16)
    3e88:	84400e15 	stw	r17,56(r16)
    3e8c:	8000b815 	stw	zero,736(r16)
    3e90:	0003dc00 	call	3dc0 <std>
    3e94:	81000217 	ldw	r4,8(r16)
    3e98:	880d883a 	mov	r6,r17
    3e9c:	800f883a 	mov	r7,r16
    3ea0:	01400284 	movi	r5,10
    3ea4:	0003dc00 	call	3dc0 <std>
    3ea8:	81000317 	ldw	r4,12(r16)
    3eac:	800f883a 	mov	r7,r16
    3eb0:	01400484 	movi	r5,18
    3eb4:	01800084 	movi	r6,2
    3eb8:	dfc00217 	ldw	ra,8(sp)
    3ebc:	dc400117 	ldw	r17,4(sp)
    3ec0:	dc000017 	ldw	r16,0(sp)
    3ec4:	dec00304 	addi	sp,sp,12
    3ec8:	0003dc01 	jmpi	3dc0 <std>

00003ecc <__fp_lock>:
    3ecc:	0005883a 	mov	r2,zero
    3ed0:	f800283a 	ret

00003ed4 <__fp_unlock>:
    3ed4:	0005883a 	mov	r2,zero
    3ed8:	f800283a 	ret

00003edc <__fp_unlock_all>:
    3edc:	00800034 	movhi	r2,0
    3ee0:	109e4b04 	addi	r2,r2,31020
    3ee4:	11000017 	ldw	r4,0(r2)
    3ee8:	01400034 	movhi	r5,0
    3eec:	294fb504 	addi	r5,r5,16084
    3ef0:	00045881 	jmpi	4588 <_fwalk>

00003ef4 <__fp_lock_all>:
    3ef4:	00800034 	movhi	r2,0
    3ef8:	109e4b04 	addi	r2,r2,31020
    3efc:	11000017 	ldw	r4,0(r2)
    3f00:	01400034 	movhi	r5,0
    3f04:	294fb304 	addi	r5,r5,16076
    3f08:	00045881 	jmpi	4588 <_fwalk>

00003f0c <_cleanup_r>:
    3f0c:	01400034 	movhi	r5,0
    3f10:	2954b204 	addi	r5,r5,21192
    3f14:	00045881 	jmpi	4588 <_fwalk>

00003f18 <_cleanup>:
    3f18:	00800034 	movhi	r2,0
    3f1c:	109e4c04 	addi	r2,r2,31024
    3f20:	11000017 	ldw	r4,0(r2)
    3f24:	0003f0c1 	jmpi	3f0c <_cleanup_r>

00003f28 <__sfmoreglue>:
    3f28:	defffc04 	addi	sp,sp,-16
    3f2c:	dc400115 	stw	r17,4(sp)
    3f30:	2c401724 	muli	r17,r5,92
    3f34:	dc800215 	stw	r18,8(sp)
    3f38:	2825883a 	mov	r18,r5
    3f3c:	89400304 	addi	r5,r17,12
    3f40:	dc000015 	stw	r16,0(sp)
    3f44:	dfc00315 	stw	ra,12(sp)
    3f48:	00047d40 	call	47d4 <_malloc_r>
    3f4c:	0021883a 	mov	r16,zero
    3f50:	880d883a 	mov	r6,r17
    3f54:	000b883a 	mov	r5,zero
    3f58:	10000626 	beq	r2,zero,3f74 <__sfmoreglue+0x4c>
    3f5c:	11000304 	addi	r4,r2,12
    3f60:	14800115 	stw	r18,4(r2)
    3f64:	10000015 	stw	zero,0(r2)
    3f68:	11000215 	stw	r4,8(r2)
    3f6c:	1021883a 	mov	r16,r2
    3f70:	00009780 	call	978 <memset>
    3f74:	8005883a 	mov	r2,r16
    3f78:	dfc00317 	ldw	ra,12(sp)
    3f7c:	dc800217 	ldw	r18,8(sp)
    3f80:	dc400117 	ldw	r17,4(sp)
    3f84:	dc000017 	ldw	r16,0(sp)
    3f88:	dec00404 	addi	sp,sp,16
    3f8c:	f800283a 	ret

00003f90 <__sfp>:
    3f90:	defffd04 	addi	sp,sp,-12
    3f94:	00800034 	movhi	r2,0
    3f98:	109e4c04 	addi	r2,r2,31024
    3f9c:	dc000015 	stw	r16,0(sp)
    3fa0:	14000017 	ldw	r16,0(r2)
    3fa4:	dc400115 	stw	r17,4(sp)
    3fa8:	dfc00215 	stw	ra,8(sp)
    3fac:	80800e17 	ldw	r2,56(r16)
    3fb0:	2023883a 	mov	r17,r4
    3fb4:	10002626 	beq	r2,zero,4050 <__sfp+0xc0>
    3fb8:	8400b804 	addi	r16,r16,736
    3fbc:	80800117 	ldw	r2,4(r16)
    3fc0:	81000217 	ldw	r4,8(r16)
    3fc4:	10ffffc4 	addi	r3,r2,-1
    3fc8:	18000916 	blt	r3,zero,3ff0 <__sfp+0x60>
    3fcc:	2080030f 	ldh	r2,12(r4)
    3fd0:	10000b26 	beq	r2,zero,4000 <__sfp+0x70>
    3fd4:	017fffc4 	movi	r5,-1
    3fd8:	00000206 	br	3fe4 <__sfp+0x54>
    3fdc:	2080030f 	ldh	r2,12(r4)
    3fe0:	10000726 	beq	r2,zero,4000 <__sfp+0x70>
    3fe4:	18ffffc4 	addi	r3,r3,-1
    3fe8:	21001704 	addi	r4,r4,92
    3fec:	197ffb1e 	bne	r3,r5,3fdc <__sfp+0x4c>
    3ff0:	80800017 	ldw	r2,0(r16)
    3ff4:	10001926 	beq	r2,zero,405c <__sfp+0xcc>
    3ff8:	1021883a 	mov	r16,r2
    3ffc:	003fef06 	br	3fbc <__sfp+0x2c>
    4000:	00bfffc4 	movi	r2,-1
    4004:	00c00044 	movi	r3,1
    4008:	2080038d 	sth	r2,14(r4)
    400c:	20c0030d 	sth	r3,12(r4)
    4010:	20000015 	stw	zero,0(r4)
    4014:	20000215 	stw	zero,8(r4)
    4018:	20000115 	stw	zero,4(r4)
    401c:	20000415 	stw	zero,16(r4)
    4020:	20000515 	stw	zero,20(r4)
    4024:	20000615 	stw	zero,24(r4)
    4028:	20000c15 	stw	zero,48(r4)
    402c:	20000d15 	stw	zero,52(r4)
    4030:	20001115 	stw	zero,68(r4)
    4034:	20001215 	stw	zero,72(r4)
    4038:	2005883a 	mov	r2,r4
    403c:	dfc00217 	ldw	ra,8(sp)
    4040:	dc400117 	ldw	r17,4(sp)
    4044:	dc000017 	ldw	r16,0(sp)
    4048:	dec00304 	addi	sp,sp,12
    404c:	f800283a 	ret
    4050:	8009883a 	mov	r4,r16
    4054:	0003e280 	call	3e28 <__sinit>
    4058:	003fd706 	br	3fb8 <__sfp+0x28>
    405c:	8809883a 	mov	r4,r17
    4060:	01400104 	movi	r5,4
    4064:	0003f280 	call	3f28 <__sfmoreglue>
    4068:	80800015 	stw	r2,0(r16)
    406c:	103fe21e 	bne	r2,zero,3ff8 <__sfp+0x68>
    4070:	00800304 	movi	r2,12
    4074:	0009883a 	mov	r4,zero
    4078:	88800015 	stw	r2,0(r17)
    407c:	003fee06 	br	4038 <__sfp+0xa8>

00004080 <_malloc_trim_r>:
    4080:	defffb04 	addi	sp,sp,-20
    4084:	dcc00315 	stw	r19,12(sp)
    4088:	04c00034 	movhi	r19,0
    408c:	9cdd4004 	addi	r19,r19,29952
    4090:	dc800215 	stw	r18,8(sp)
    4094:	dc400115 	stw	r17,4(sp)
    4098:	dc000015 	stw	r16,0(sp)
    409c:	2823883a 	mov	r17,r5
    40a0:	2025883a 	mov	r18,r4
    40a4:	dfc00415 	stw	ra,16(sp)
    40a8:	00056600 	call	5660 <__malloc_lock>
    40ac:	98800217 	ldw	r2,8(r19)
    40b0:	9009883a 	mov	r4,r18
    40b4:	000b883a 	mov	r5,zero
    40b8:	10c00117 	ldw	r3,4(r2)
    40bc:	00bfff04 	movi	r2,-4
    40c0:	18a0703a 	and	r16,r3,r2
    40c4:	8463c83a 	sub	r17,r16,r17
    40c8:	8c43fbc4 	addi	r17,r17,4079
    40cc:	8822d33a 	srli	r17,r17,12
    40d0:	0083ffc4 	movi	r2,4095
    40d4:	8c7fffc4 	addi	r17,r17,-1
    40d8:	8822933a 	slli	r17,r17,12
    40dc:	1440060e 	bge	r2,r17,40f8 <_malloc_trim_r+0x78>
    40e0:	0004f140 	call	4f14 <_sbrk_r>
    40e4:	98c00217 	ldw	r3,8(r19)
    40e8:	9009883a 	mov	r4,r18
    40ec:	044bc83a 	sub	r5,zero,r17
    40f0:	80c7883a 	add	r3,r16,r3
    40f4:	10c00926 	beq	r2,r3,411c <_malloc_trim_r+0x9c>
    40f8:	00056640 	call	5664 <__malloc_unlock>
    40fc:	0005883a 	mov	r2,zero
    4100:	dfc00417 	ldw	ra,16(sp)
    4104:	dcc00317 	ldw	r19,12(sp)
    4108:	dc800217 	ldw	r18,8(sp)
    410c:	dc400117 	ldw	r17,4(sp)
    4110:	dc000017 	ldw	r16,0(sp)
    4114:	dec00504 	addi	sp,sp,20
    4118:	f800283a 	ret
    411c:	9009883a 	mov	r4,r18
    4120:	0004f140 	call	4f14 <_sbrk_r>
    4124:	844dc83a 	sub	r6,r16,r17
    4128:	00ffffc4 	movi	r3,-1
    412c:	9009883a 	mov	r4,r18
    4130:	000b883a 	mov	r5,zero
    4134:	01c00074 	movhi	r7,1
    4138:	39e5a704 	addi	r7,r7,-26980
    413c:	31800054 	ori	r6,r6,1
    4140:	10c00926 	beq	r2,r3,4168 <_malloc_trim_r+0xe8>
    4144:	38800017 	ldw	r2,0(r7)
    4148:	98c00217 	ldw	r3,8(r19)
    414c:	9009883a 	mov	r4,r18
    4150:	1445c83a 	sub	r2,r2,r17
    4154:	38800015 	stw	r2,0(r7)
    4158:	19800115 	stw	r6,4(r3)
    415c:	00056640 	call	5664 <__malloc_unlock>
    4160:	00800044 	movi	r2,1
    4164:	003fe606 	br	4100 <_malloc_trim_r+0x80>
    4168:	0004f140 	call	4f14 <_sbrk_r>
    416c:	99800217 	ldw	r6,8(r19)
    4170:	100f883a 	mov	r7,r2
    4174:	9009883a 	mov	r4,r18
    4178:	1187c83a 	sub	r3,r2,r6
    417c:	008003c4 	movi	r2,15
    4180:	19400054 	ori	r5,r3,1
    4184:	10ffdc0e 	bge	r2,r3,40f8 <_malloc_trim_r+0x78>
    4188:	00800034 	movhi	r2,0
    418c:	109e4e04 	addi	r2,r2,31032
    4190:	10c00017 	ldw	r3,0(r2)
    4194:	00800074 	movhi	r2,1
    4198:	10a5a704 	addi	r2,r2,-26980
    419c:	31400115 	stw	r5,4(r6)
    41a0:	38c7c83a 	sub	r3,r7,r3
    41a4:	10c00015 	stw	r3,0(r2)
    41a8:	003fd306 	br	40f8 <_malloc_trim_r+0x78>

000041ac <_free_r>:
    41ac:	defffd04 	addi	sp,sp,-12
    41b0:	dc400115 	stw	r17,4(sp)
    41b4:	dc000015 	stw	r16,0(sp)
    41b8:	dfc00215 	stw	ra,8(sp)
    41bc:	2821883a 	mov	r16,r5
    41c0:	2023883a 	mov	r17,r4
    41c4:	28005a26 	beq	r5,zero,4330 <_free_r+0x184>
    41c8:	00056600 	call	5660 <__malloc_lock>
    41cc:	823ffe04 	addi	r8,r16,-8
    41d0:	41400117 	ldw	r5,4(r8)
    41d4:	00bfff84 	movi	r2,-2
    41d8:	02800034 	movhi	r10,0
    41dc:	529d4004 	addi	r10,r10,29952
    41e0:	288e703a 	and	r7,r5,r2
    41e4:	41cd883a 	add	r6,r8,r7
    41e8:	30c00117 	ldw	r3,4(r6)
    41ec:	51000217 	ldw	r4,8(r10)
    41f0:	00bfff04 	movi	r2,-4
    41f4:	1892703a 	and	r9,r3,r2
    41f8:	5017883a 	mov	r11,r10
    41fc:	31006726 	beq	r6,r4,439c <_free_r+0x1f0>
    4200:	2880004c 	andi	r2,r5,1
    4204:	1005003a 	cmpeq	r2,r2,zero
    4208:	32400115 	stw	r9,4(r6)
    420c:	10001a1e 	bne	r2,zero,4278 <_free_r+0xcc>
    4210:	000b883a 	mov	r5,zero
    4214:	3247883a 	add	r3,r6,r9
    4218:	18800117 	ldw	r2,4(r3)
    421c:	1080004c 	andi	r2,r2,1
    4220:	1000231e 	bne	r2,zero,42b0 <_free_r+0x104>
    4224:	280ac03a 	cmpne	r5,r5,zero
    4228:	3a4f883a 	add	r7,r7,r9
    422c:	2800451e 	bne	r5,zero,4344 <_free_r+0x198>
    4230:	31000217 	ldw	r4,8(r6)
    4234:	00800034 	movhi	r2,0
    4238:	109d4204 	addi	r2,r2,29960
    423c:	20807b26 	beq	r4,r2,442c <_free_r+0x280>
    4240:	30800317 	ldw	r2,12(r6)
    4244:	3a07883a 	add	r3,r7,r8
    4248:	19c00015 	stw	r7,0(r3)
    424c:	11000215 	stw	r4,8(r2)
    4250:	20800315 	stw	r2,12(r4)
    4254:	38800054 	ori	r2,r7,1
    4258:	40800115 	stw	r2,4(r8)
    425c:	28001a26 	beq	r5,zero,42c8 <_free_r+0x11c>
    4260:	8809883a 	mov	r4,r17
    4264:	dfc00217 	ldw	ra,8(sp)
    4268:	dc400117 	ldw	r17,4(sp)
    426c:	dc000017 	ldw	r16,0(sp)
    4270:	dec00304 	addi	sp,sp,12
    4274:	00056641 	jmpi	5664 <__malloc_unlock>
    4278:	80bffe17 	ldw	r2,-8(r16)
    427c:	50c00204 	addi	r3,r10,8
    4280:	4091c83a 	sub	r8,r8,r2
    4284:	41000217 	ldw	r4,8(r8)
    4288:	388f883a 	add	r7,r7,r2
    428c:	20c06126 	beq	r4,r3,4414 <_free_r+0x268>
    4290:	40800317 	ldw	r2,12(r8)
    4294:	3247883a 	add	r3,r6,r9
    4298:	000b883a 	mov	r5,zero
    429c:	11000215 	stw	r4,8(r2)
    42a0:	20800315 	stw	r2,12(r4)
    42a4:	18800117 	ldw	r2,4(r3)
    42a8:	1080004c 	andi	r2,r2,1
    42ac:	103fdd26 	beq	r2,zero,4224 <_free_r+0x78>
    42b0:	38800054 	ori	r2,r7,1
    42b4:	3a07883a 	add	r3,r7,r8
    42b8:	280ac03a 	cmpne	r5,r5,zero
    42bc:	40800115 	stw	r2,4(r8)
    42c0:	19c00015 	stw	r7,0(r3)
    42c4:	283fe61e 	bne	r5,zero,4260 <_free_r+0xb4>
    42c8:	00807fc4 	movi	r2,511
    42cc:	11c01f2e 	bgeu	r2,r7,434c <_free_r+0x1a0>
    42d0:	3806d27a 	srli	r3,r7,9
    42d4:	1800481e 	bne	r3,zero,43f8 <_free_r+0x24c>
    42d8:	3804d0fa 	srli	r2,r7,3
    42dc:	100690fa 	slli	r3,r2,3
    42e0:	1acd883a 	add	r6,r3,r11
    42e4:	31400217 	ldw	r5,8(r6)
    42e8:	31405926 	beq	r6,r5,4450 <_free_r+0x2a4>
    42ec:	28800117 	ldw	r2,4(r5)
    42f0:	00ffff04 	movi	r3,-4
    42f4:	10c4703a 	and	r2,r2,r3
    42f8:	3880022e 	bgeu	r7,r2,4304 <_free_r+0x158>
    42fc:	29400217 	ldw	r5,8(r5)
    4300:	317ffa1e 	bne	r6,r5,42ec <_free_r+0x140>
    4304:	29800317 	ldw	r6,12(r5)
    4308:	41800315 	stw	r6,12(r8)
    430c:	41400215 	stw	r5,8(r8)
    4310:	8809883a 	mov	r4,r17
    4314:	2a000315 	stw	r8,12(r5)
    4318:	32000215 	stw	r8,8(r6)
    431c:	dfc00217 	ldw	ra,8(sp)
    4320:	dc400117 	ldw	r17,4(sp)
    4324:	dc000017 	ldw	r16,0(sp)
    4328:	dec00304 	addi	sp,sp,12
    432c:	00056641 	jmpi	5664 <__malloc_unlock>
    4330:	dfc00217 	ldw	ra,8(sp)
    4334:	dc400117 	ldw	r17,4(sp)
    4338:	dc000017 	ldw	r16,0(sp)
    433c:	dec00304 	addi	sp,sp,12
    4340:	f800283a 	ret
    4344:	31000217 	ldw	r4,8(r6)
    4348:	003fbd06 	br	4240 <_free_r+0x94>
    434c:	3806d0fa 	srli	r3,r7,3
    4350:	00800044 	movi	r2,1
    4354:	51400117 	ldw	r5,4(r10)
    4358:	180890fa 	slli	r4,r3,3
    435c:	1807d0ba 	srai	r3,r3,2
    4360:	22c9883a 	add	r4,r4,r11
    4364:	21800217 	ldw	r6,8(r4)
    4368:	10c4983a 	sll	r2,r2,r3
    436c:	41000315 	stw	r4,12(r8)
    4370:	41800215 	stw	r6,8(r8)
    4374:	288ab03a 	or	r5,r5,r2
    4378:	22000215 	stw	r8,8(r4)
    437c:	8809883a 	mov	r4,r17
    4380:	51400115 	stw	r5,4(r10)
    4384:	32000315 	stw	r8,12(r6)
    4388:	dfc00217 	ldw	ra,8(sp)
    438c:	dc400117 	ldw	r17,4(sp)
    4390:	dc000017 	ldw	r16,0(sp)
    4394:	dec00304 	addi	sp,sp,12
    4398:	00056641 	jmpi	5664 <__malloc_unlock>
    439c:	2880004c 	andi	r2,r5,1
    43a0:	3a4d883a 	add	r6,r7,r9
    43a4:	1000071e 	bne	r2,zero,43c4 <_free_r+0x218>
    43a8:	80bffe17 	ldw	r2,-8(r16)
    43ac:	4091c83a 	sub	r8,r8,r2
    43b0:	41000317 	ldw	r4,12(r8)
    43b4:	40c00217 	ldw	r3,8(r8)
    43b8:	308d883a 	add	r6,r6,r2
    43bc:	20c00215 	stw	r3,8(r4)
    43c0:	19000315 	stw	r4,12(r3)
    43c4:	00800034 	movhi	r2,0
    43c8:	109e4d04 	addi	r2,r2,31028
    43cc:	11000017 	ldw	r4,0(r2)
    43d0:	30c00054 	ori	r3,r6,1
    43d4:	52000215 	stw	r8,8(r10)
    43d8:	40c00115 	stw	r3,4(r8)
    43dc:	313fa036 	bltu	r6,r4,4260 <_free_r+0xb4>
    43e0:	00800074 	movhi	r2,1
    43e4:	10a5a404 	addi	r2,r2,-26992
    43e8:	11400017 	ldw	r5,0(r2)
    43ec:	8809883a 	mov	r4,r17
    43f0:	00040800 	call	4080 <_malloc_trim_r>
    43f4:	003f9a06 	br	4260 <_free_r+0xb4>
    43f8:	00800104 	movi	r2,4
    43fc:	10c0072e 	bgeu	r2,r3,441c <_free_r+0x270>
    4400:	00800504 	movi	r2,20
    4404:	10c01936 	bltu	r2,r3,446c <_free_r+0x2c0>
    4408:	188016c4 	addi	r2,r3,91
    440c:	100690fa 	slli	r3,r2,3
    4410:	003fb306 	br	42e0 <_free_r+0x134>
    4414:	01400044 	movi	r5,1
    4418:	003f7e06 	br	4214 <_free_r+0x68>
    441c:	3804d1ba 	srli	r2,r7,6
    4420:	10800e04 	addi	r2,r2,56
    4424:	100690fa 	slli	r3,r2,3
    4428:	003fad06 	br	42e0 <_free_r+0x134>
    442c:	22000315 	stw	r8,12(r4)
    4430:	22000215 	stw	r8,8(r4)
    4434:	3a05883a 	add	r2,r7,r8
    4438:	38c00054 	ori	r3,r7,1
    443c:	11c00015 	stw	r7,0(r2)
    4440:	41000215 	stw	r4,8(r8)
    4444:	40c00115 	stw	r3,4(r8)
    4448:	41000315 	stw	r4,12(r8)
    444c:	003f8406 	br	4260 <_free_r+0xb4>
    4450:	1005d0ba 	srai	r2,r2,2
    4454:	00c00044 	movi	r3,1
    4458:	51000117 	ldw	r4,4(r10)
    445c:	1886983a 	sll	r3,r3,r2
    4460:	20c8b03a 	or	r4,r4,r3
    4464:	51000115 	stw	r4,4(r10)
    4468:	003fa706 	br	4308 <_free_r+0x15c>
    446c:	00801504 	movi	r2,84
    4470:	10c00436 	bltu	r2,r3,4484 <_free_r+0x2d8>
    4474:	3804d33a 	srli	r2,r7,12
    4478:	10801b84 	addi	r2,r2,110
    447c:	100690fa 	slli	r3,r2,3
    4480:	003f9706 	br	42e0 <_free_r+0x134>
    4484:	00805504 	movi	r2,340
    4488:	10c00436 	bltu	r2,r3,449c <_free_r+0x2f0>
    448c:	3804d3fa 	srli	r2,r7,15
    4490:	10801dc4 	addi	r2,r2,119
    4494:	100690fa 	slli	r3,r2,3
    4498:	003f9106 	br	42e0 <_free_r+0x134>
    449c:	00815504 	movi	r2,1364
    44a0:	10c0032e 	bgeu	r2,r3,44b0 <_free_r+0x304>
    44a4:	00801f84 	movi	r2,126
    44a8:	00c0fc04 	movi	r3,1008
    44ac:	003f8c06 	br	42e0 <_free_r+0x134>
    44b0:	3804d4ba 	srli	r2,r7,18
    44b4:	10801f04 	addi	r2,r2,124
    44b8:	100690fa 	slli	r3,r2,3
    44bc:	003f8806 	br	42e0 <_free_r+0x134>

000044c0 <_fwalk_reent>:
    44c0:	defff704 	addi	sp,sp,-36
    44c4:	dcc00315 	stw	r19,12(sp)
    44c8:	24c0b804 	addi	r19,r4,736
    44cc:	dd800615 	stw	r22,24(sp)
    44d0:	dd400515 	stw	r21,20(sp)
    44d4:	dfc00815 	stw	ra,32(sp)
    44d8:	ddc00715 	stw	r23,28(sp)
    44dc:	dd000415 	stw	r20,16(sp)
    44e0:	dc800215 	stw	r18,8(sp)
    44e4:	dc400115 	stw	r17,4(sp)
    44e8:	dc000015 	stw	r16,0(sp)
    44ec:	202b883a 	mov	r21,r4
    44f0:	282d883a 	mov	r22,r5
    44f4:	0003e180 	call	3e18 <__sfp_lock_acquire>
    44f8:	98002126 	beq	r19,zero,4580 <_fwalk_reent+0xc0>
    44fc:	002f883a 	mov	r23,zero
    4500:	9c800117 	ldw	r18,4(r19)
    4504:	9c000217 	ldw	r16,8(r19)
    4508:	90bfffc4 	addi	r2,r18,-1
    450c:	10000d16 	blt	r2,zero,4544 <_fwalk_reent+0x84>
    4510:	0023883a 	mov	r17,zero
    4514:	053fffc4 	movi	r20,-1
    4518:	8080030f 	ldh	r2,12(r16)
    451c:	8c400044 	addi	r17,r17,1
    4520:	10000626 	beq	r2,zero,453c <_fwalk_reent+0x7c>
    4524:	8080038f 	ldh	r2,14(r16)
    4528:	800b883a 	mov	r5,r16
    452c:	a809883a 	mov	r4,r21
    4530:	15000226 	beq	r2,r20,453c <_fwalk_reent+0x7c>
    4534:	b03ee83a 	callr	r22
    4538:	b8aeb03a 	or	r23,r23,r2
    453c:	84001704 	addi	r16,r16,92
    4540:	947ff51e 	bne	r18,r17,4518 <_fwalk_reent+0x58>
    4544:	9cc00017 	ldw	r19,0(r19)
    4548:	983fed1e 	bne	r19,zero,4500 <_fwalk_reent+0x40>
    454c:	0003e1c0 	call	3e1c <__sfp_lock_release>
    4550:	b805883a 	mov	r2,r23
    4554:	dfc00817 	ldw	ra,32(sp)
    4558:	ddc00717 	ldw	r23,28(sp)
    455c:	dd800617 	ldw	r22,24(sp)
    4560:	dd400517 	ldw	r21,20(sp)
    4564:	dd000417 	ldw	r20,16(sp)
    4568:	dcc00317 	ldw	r19,12(sp)
    456c:	dc800217 	ldw	r18,8(sp)
    4570:	dc400117 	ldw	r17,4(sp)
    4574:	dc000017 	ldw	r16,0(sp)
    4578:	dec00904 	addi	sp,sp,36
    457c:	f800283a 	ret
    4580:	002f883a 	mov	r23,zero
    4584:	003ff106 	br	454c <_fwalk_reent+0x8c>

00004588 <_fwalk>:
    4588:	defff804 	addi	sp,sp,-32
    458c:	dcc00315 	stw	r19,12(sp)
    4590:	24c0b804 	addi	r19,r4,736
    4594:	dd400515 	stw	r21,20(sp)
    4598:	dfc00715 	stw	ra,28(sp)
    459c:	dd800615 	stw	r22,24(sp)
    45a0:	dd000415 	stw	r20,16(sp)
    45a4:	dc800215 	stw	r18,8(sp)
    45a8:	dc400115 	stw	r17,4(sp)
    45ac:	dc000015 	stw	r16,0(sp)
    45b0:	282b883a 	mov	r21,r5
    45b4:	0003e180 	call	3e18 <__sfp_lock_acquire>
    45b8:	98001f26 	beq	r19,zero,4638 <_fwalk+0xb0>
    45bc:	002d883a 	mov	r22,zero
    45c0:	9c800117 	ldw	r18,4(r19)
    45c4:	9c000217 	ldw	r16,8(r19)
    45c8:	90bfffc4 	addi	r2,r18,-1
    45cc:	10000c16 	blt	r2,zero,4600 <_fwalk+0x78>
    45d0:	0023883a 	mov	r17,zero
    45d4:	053fffc4 	movi	r20,-1
    45d8:	8080030f 	ldh	r2,12(r16)
    45dc:	8c400044 	addi	r17,r17,1
    45e0:	10000526 	beq	r2,zero,45f8 <_fwalk+0x70>
    45e4:	8080038f 	ldh	r2,14(r16)
    45e8:	8009883a 	mov	r4,r16
    45ec:	15000226 	beq	r2,r20,45f8 <_fwalk+0x70>
    45f0:	a83ee83a 	callr	r21
    45f4:	b0acb03a 	or	r22,r22,r2
    45f8:	84001704 	addi	r16,r16,92
    45fc:	947ff61e 	bne	r18,r17,45d8 <_fwalk+0x50>
    4600:	9cc00017 	ldw	r19,0(r19)
    4604:	983fee1e 	bne	r19,zero,45c0 <_fwalk+0x38>
    4608:	0003e1c0 	call	3e1c <__sfp_lock_release>
    460c:	b005883a 	mov	r2,r22
    4610:	dfc00717 	ldw	ra,28(sp)
    4614:	dd800617 	ldw	r22,24(sp)
    4618:	dd400517 	ldw	r21,20(sp)
    461c:	dd000417 	ldw	r20,16(sp)
    4620:	dcc00317 	ldw	r19,12(sp)
    4624:	dc800217 	ldw	r18,8(sp)
    4628:	dc400117 	ldw	r17,4(sp)
    462c:	dc000017 	ldw	r16,0(sp)
    4630:	dec00804 	addi	sp,sp,32
    4634:	f800283a 	ret
    4638:	002d883a 	mov	r22,zero
    463c:	003ff206 	br	4608 <_fwalk+0x80>

00004640 <__smakebuf_r>:
    4640:	2880030b 	ldhu	r2,12(r5)
    4644:	deffed04 	addi	sp,sp,-76
    4648:	dc401015 	stw	r17,64(sp)
    464c:	1080008c 	andi	r2,r2,2
    4650:	dc000f15 	stw	r16,60(sp)
    4654:	dfc01215 	stw	ra,72(sp)
    4658:	dc801115 	stw	r18,68(sp)
    465c:	2821883a 	mov	r16,r5
    4660:	2023883a 	mov	r17,r4
    4664:	10000b26 	beq	r2,zero,4694 <__smakebuf_r+0x54>
    4668:	28c010c4 	addi	r3,r5,67
    466c:	00800044 	movi	r2,1
    4670:	28800515 	stw	r2,20(r5)
    4674:	28c00415 	stw	r3,16(r5)
    4678:	28c00015 	stw	r3,0(r5)
    467c:	dfc01217 	ldw	ra,72(sp)
    4680:	dc801117 	ldw	r18,68(sp)
    4684:	dc401017 	ldw	r17,64(sp)
    4688:	dc000f17 	ldw	r16,60(sp)
    468c:	dec01304 	addi	sp,sp,76
    4690:	f800283a 	ret
    4694:	2940038f 	ldh	r5,14(r5)
    4698:	28002116 	blt	r5,zero,4720 <__smakebuf_r+0xe0>
    469c:	d80d883a 	mov	r6,sp
    46a0:	00052dc0 	call	52dc <_fstat_r>
    46a4:	10001e16 	blt	r2,zero,4720 <__smakebuf_r+0xe0>
    46a8:	d8800117 	ldw	r2,4(sp)
    46ac:	00e00014 	movui	r3,32768
    46b0:	113c000c 	andi	r4,r2,61440
    46b4:	20c03126 	beq	r4,r3,477c <__smakebuf_r+0x13c>
    46b8:	8080030b 	ldhu	r2,12(r16)
    46bc:	00c80004 	movi	r3,8192
    46c0:	10820014 	ori	r2,r2,2048
    46c4:	8080030d 	sth	r2,12(r16)
    46c8:	20c01e26 	beq	r4,r3,4744 <__smakebuf_r+0x104>
    46cc:	04810004 	movi	r18,1024
    46d0:	8809883a 	mov	r4,r17
    46d4:	900b883a 	mov	r5,r18
    46d8:	00047d40 	call	47d4 <_malloc_r>
    46dc:	1009883a 	mov	r4,r2
    46e0:	10003126 	beq	r2,zero,47a8 <__smakebuf_r+0x168>
    46e4:	80c0030b 	ldhu	r3,12(r16)
    46e8:	00800034 	movhi	r2,0
    46ec:	108fc304 	addi	r2,r2,16140
    46f0:	88800f15 	stw	r2,60(r17)
    46f4:	18c02014 	ori	r3,r3,128
    46f8:	84800515 	stw	r18,20(r16)
    46fc:	80c0030d 	sth	r3,12(r16)
    4700:	81000415 	stw	r4,16(r16)
    4704:	81000015 	stw	r4,0(r16)
    4708:	dfc01217 	ldw	ra,72(sp)
    470c:	dc801117 	ldw	r18,68(sp)
    4710:	dc401017 	ldw	r17,64(sp)
    4714:	dc000f17 	ldw	r16,60(sp)
    4718:	dec01304 	addi	sp,sp,76
    471c:	f800283a 	ret
    4720:	80c0030b 	ldhu	r3,12(r16)
    4724:	1880200c 	andi	r2,r3,128
    4728:	10000426 	beq	r2,zero,473c <__smakebuf_r+0xfc>
    472c:	04801004 	movi	r18,64
    4730:	18820014 	ori	r2,r3,2048
    4734:	8080030d 	sth	r2,12(r16)
    4738:	003fe506 	br	46d0 <__smakebuf_r+0x90>
    473c:	04810004 	movi	r18,1024
    4740:	003ffb06 	br	4730 <__smakebuf_r+0xf0>
    4744:	8140038f 	ldh	r5,14(r16)
    4748:	8809883a 	mov	r4,r17
    474c:	00053500 	call	5350 <_isatty_r>
    4750:	103fde26 	beq	r2,zero,46cc <__smakebuf_r+0x8c>
    4754:	8080030b 	ldhu	r2,12(r16)
    4758:	80c010c4 	addi	r3,r16,67
    475c:	04810004 	movi	r18,1024
    4760:	10800054 	ori	r2,r2,1
    4764:	8080030d 	sth	r2,12(r16)
    4768:	00800044 	movi	r2,1
    476c:	80c00415 	stw	r3,16(r16)
    4770:	80800515 	stw	r2,20(r16)
    4774:	80c00015 	stw	r3,0(r16)
    4778:	003fd506 	br	46d0 <__smakebuf_r+0x90>
    477c:	80c00a17 	ldw	r3,40(r16)
    4780:	00800034 	movhi	r2,0
    4784:	1093e304 	addi	r2,r2,20364
    4788:	18bfcb1e 	bne	r3,r2,46b8 <__smakebuf_r+0x78>
    478c:	8080030b 	ldhu	r2,12(r16)
    4790:	00c10004 	movi	r3,1024
    4794:	1825883a 	mov	r18,r3
    4798:	10c4b03a 	or	r2,r2,r3
    479c:	8080030d 	sth	r2,12(r16)
    47a0:	80c01315 	stw	r3,76(r16)
    47a4:	003fca06 	br	46d0 <__smakebuf_r+0x90>
    47a8:	8100030b 	ldhu	r4,12(r16)
    47ac:	2080800c 	andi	r2,r4,512
    47b0:	103fb21e 	bne	r2,zero,467c <__smakebuf_r+0x3c>
    47b4:	80c010c4 	addi	r3,r16,67
    47b8:	21000094 	ori	r4,r4,2
    47bc:	00800044 	movi	r2,1
    47c0:	80800515 	stw	r2,20(r16)
    47c4:	8100030d 	sth	r4,12(r16)
    47c8:	80c00415 	stw	r3,16(r16)
    47cc:	80c00015 	stw	r3,0(r16)
    47d0:	003faa06 	br	467c <__smakebuf_r+0x3c>

000047d4 <_malloc_r>:
    47d4:	defff604 	addi	sp,sp,-40
    47d8:	28c002c4 	addi	r3,r5,11
    47dc:	00800584 	movi	r2,22
    47e0:	dc800215 	stw	r18,8(sp)
    47e4:	dfc00915 	stw	ra,36(sp)
    47e8:	df000815 	stw	fp,32(sp)
    47ec:	ddc00715 	stw	r23,28(sp)
    47f0:	dd800615 	stw	r22,24(sp)
    47f4:	dd400515 	stw	r21,20(sp)
    47f8:	dd000415 	stw	r20,16(sp)
    47fc:	dcc00315 	stw	r19,12(sp)
    4800:	dc400115 	stw	r17,4(sp)
    4804:	dc000015 	stw	r16,0(sp)
    4808:	2025883a 	mov	r18,r4
    480c:	10c01236 	bltu	r2,r3,4858 <_malloc_r+0x84>
    4810:	04400404 	movi	r17,16
    4814:	8940142e 	bgeu	r17,r5,4868 <_malloc_r+0x94>
    4818:	00800304 	movi	r2,12
    481c:	0007883a 	mov	r3,zero
    4820:	90800015 	stw	r2,0(r18)
    4824:	1805883a 	mov	r2,r3
    4828:	dfc00917 	ldw	ra,36(sp)
    482c:	df000817 	ldw	fp,32(sp)
    4830:	ddc00717 	ldw	r23,28(sp)
    4834:	dd800617 	ldw	r22,24(sp)
    4838:	dd400517 	ldw	r21,20(sp)
    483c:	dd000417 	ldw	r20,16(sp)
    4840:	dcc00317 	ldw	r19,12(sp)
    4844:	dc800217 	ldw	r18,8(sp)
    4848:	dc400117 	ldw	r17,4(sp)
    484c:	dc000017 	ldw	r16,0(sp)
    4850:	dec00a04 	addi	sp,sp,40
    4854:	f800283a 	ret
    4858:	00bffe04 	movi	r2,-8
    485c:	18a2703a 	and	r17,r3,r2
    4860:	883fed16 	blt	r17,zero,4818 <_malloc_r+0x44>
    4864:	897fec36 	bltu	r17,r5,4818 <_malloc_r+0x44>
    4868:	9009883a 	mov	r4,r18
    486c:	00056600 	call	5660 <__malloc_lock>
    4870:	00807dc4 	movi	r2,503
    4874:	14402b2e 	bgeu	r2,r17,4924 <_malloc_r+0x150>
    4878:	8806d27a 	srli	r3,r17,9
    487c:	18003f1e 	bne	r3,zero,497c <_malloc_r+0x1a8>
    4880:	880cd0fa 	srli	r6,r17,3
    4884:	300490fa 	slli	r2,r6,3
    4888:	02c00034 	movhi	r11,0
    488c:	5add4004 	addi	r11,r11,29952
    4890:	12cb883a 	add	r5,r2,r11
    4894:	2c000317 	ldw	r16,12(r5)
    4898:	580f883a 	mov	r7,r11
    489c:	2c00041e 	bne	r5,r16,48b0 <_malloc_r+0xdc>
    48a0:	00000a06 	br	48cc <_malloc_r+0xf8>
    48a4:	1800860e 	bge	r3,zero,4ac0 <_malloc_r+0x2ec>
    48a8:	84000317 	ldw	r16,12(r16)
    48ac:	2c000726 	beq	r5,r16,48cc <_malloc_r+0xf8>
    48b0:	80800117 	ldw	r2,4(r16)
    48b4:	00ffff04 	movi	r3,-4
    48b8:	10c8703a 	and	r4,r2,r3
    48bc:	2447c83a 	sub	r3,r4,r17
    48c0:	008003c4 	movi	r2,15
    48c4:	10fff70e 	bge	r2,r3,48a4 <_malloc_r+0xd0>
    48c8:	31bfffc4 	addi	r6,r6,-1
    48cc:	32400044 	addi	r9,r6,1
    48d0:	02800034 	movhi	r10,0
    48d4:	529d4204 	addi	r10,r10,29960
    48d8:	54000217 	ldw	r16,8(r10)
    48dc:	8280a026 	beq	r16,r10,4b60 <_malloc_r+0x38c>
    48e0:	80800117 	ldw	r2,4(r16)
    48e4:	00ffff04 	movi	r3,-4
    48e8:	10ca703a 	and	r5,r2,r3
    48ec:	2c4dc83a 	sub	r6,r5,r17
    48f0:	008003c4 	movi	r2,15
    48f4:	11808316 	blt	r2,r6,4b04 <_malloc_r+0x330>
    48f8:	52800315 	stw	r10,12(r10)
    48fc:	52800215 	stw	r10,8(r10)
    4900:	30002916 	blt	r6,zero,49a8 <_malloc_r+0x1d4>
    4904:	8147883a 	add	r3,r16,r5
    4908:	18800117 	ldw	r2,4(r3)
    490c:	9009883a 	mov	r4,r18
    4910:	10800054 	ori	r2,r2,1
    4914:	18800115 	stw	r2,4(r3)
    4918:	00056640 	call	5664 <__malloc_unlock>
    491c:	80c00204 	addi	r3,r16,8
    4920:	003fc006 	br	4824 <_malloc_r+0x50>
    4924:	02c00034 	movhi	r11,0
    4928:	5add4004 	addi	r11,r11,29952
    492c:	8ac5883a 	add	r2,r17,r11
    4930:	14000317 	ldw	r16,12(r2)
    4934:	580f883a 	mov	r7,r11
    4938:	8806d0fa 	srli	r3,r17,3
    493c:	14006c26 	beq	r2,r16,4af0 <_malloc_r+0x31c>
    4940:	80c00117 	ldw	r3,4(r16)
    4944:	00bfff04 	movi	r2,-4
    4948:	81800317 	ldw	r6,12(r16)
    494c:	1886703a 	and	r3,r3,r2
    4950:	80c7883a 	add	r3,r16,r3
    4954:	18800117 	ldw	r2,4(r3)
    4958:	81400217 	ldw	r5,8(r16)
    495c:	9009883a 	mov	r4,r18
    4960:	10800054 	ori	r2,r2,1
    4964:	18800115 	stw	r2,4(r3)
    4968:	31400215 	stw	r5,8(r6)
    496c:	29800315 	stw	r6,12(r5)
    4970:	00056640 	call	5664 <__malloc_unlock>
    4974:	80c00204 	addi	r3,r16,8
    4978:	003faa06 	br	4824 <_malloc_r+0x50>
    497c:	00800104 	movi	r2,4
    4980:	10c0052e 	bgeu	r2,r3,4998 <_malloc_r+0x1c4>
    4984:	00800504 	movi	r2,20
    4988:	10c07836 	bltu	r2,r3,4b6c <_malloc_r+0x398>
    498c:	198016c4 	addi	r6,r3,91
    4990:	300490fa 	slli	r2,r6,3
    4994:	003fbc06 	br	4888 <_malloc_r+0xb4>
    4998:	8804d1ba 	srli	r2,r17,6
    499c:	11800e04 	addi	r6,r2,56
    49a0:	300490fa 	slli	r2,r6,3
    49a4:	003fb806 	br	4888 <_malloc_r+0xb4>
    49a8:	00807fc4 	movi	r2,511
    49ac:	1140bb36 	bltu	r2,r5,4c9c <_malloc_r+0x4c8>
    49b0:	2806d0fa 	srli	r3,r5,3
    49b4:	573ffe04 	addi	fp,r10,-8
    49b8:	00800044 	movi	r2,1
    49bc:	180890fa 	slli	r4,r3,3
    49c0:	1807d0ba 	srai	r3,r3,2
    49c4:	e1c00117 	ldw	r7,4(fp)
    49c8:	5909883a 	add	r4,r11,r4
    49cc:	21400217 	ldw	r5,8(r4)
    49d0:	10c4983a 	sll	r2,r2,r3
    49d4:	81000315 	stw	r4,12(r16)
    49d8:	81400215 	stw	r5,8(r16)
    49dc:	388eb03a 	or	r7,r7,r2
    49e0:	2c000315 	stw	r16,12(r5)
    49e4:	24000215 	stw	r16,8(r4)
    49e8:	e1c00115 	stw	r7,4(fp)
    49ec:	4807883a 	mov	r3,r9
    49f0:	4800cd16 	blt	r9,zero,4d28 <_malloc_r+0x554>
    49f4:	1807d0ba 	srai	r3,r3,2
    49f8:	00800044 	movi	r2,1
    49fc:	10c8983a 	sll	r4,r2,r3
    4a00:	39004436 	bltu	r7,r4,4b14 <_malloc_r+0x340>
    4a04:	21c4703a 	and	r2,r4,r7
    4a08:	10000a1e 	bne	r2,zero,4a34 <_malloc_r+0x260>
    4a0c:	2109883a 	add	r4,r4,r4
    4a10:	00bfff04 	movi	r2,-4
    4a14:	4884703a 	and	r2,r9,r2
    4a18:	3906703a 	and	r3,r7,r4
    4a1c:	12400104 	addi	r9,r2,4
    4a20:	1800041e 	bne	r3,zero,4a34 <_malloc_r+0x260>
    4a24:	2109883a 	add	r4,r4,r4
    4a28:	3904703a 	and	r2,r7,r4
    4a2c:	4a400104 	addi	r9,r9,4
    4a30:	103ffc26 	beq	r2,zero,4a24 <_malloc_r+0x250>
    4a34:	480490fa 	slli	r2,r9,3
    4a38:	4819883a 	mov	r12,r9
    4a3c:	023fff04 	movi	r8,-4
    4a40:	589b883a 	add	r13,r11,r2
    4a44:	6807883a 	mov	r3,r13
    4a48:	014003c4 	movi	r5,15
    4a4c:	1c000317 	ldw	r16,12(r3)
    4a50:	1c00041e 	bne	r3,r16,4a64 <_malloc_r+0x290>
    4a54:	0000a706 	br	4cf4 <_malloc_r+0x520>
    4a58:	3000ab0e 	bge	r6,zero,4d08 <_malloc_r+0x534>
    4a5c:	84000317 	ldw	r16,12(r16)
    4a60:	1c00a426 	beq	r3,r16,4cf4 <_malloc_r+0x520>
    4a64:	80800117 	ldw	r2,4(r16)
    4a68:	1204703a 	and	r2,r2,r8
    4a6c:	144dc83a 	sub	r6,r2,r17
    4a70:	29bff90e 	bge	r5,r6,4a58 <_malloc_r+0x284>
    4a74:	81000317 	ldw	r4,12(r16)
    4a78:	80c00217 	ldw	r3,8(r16)
    4a7c:	89400054 	ori	r5,r17,1
    4a80:	8445883a 	add	r2,r16,r17
    4a84:	20c00215 	stw	r3,8(r4)
    4a88:	19000315 	stw	r4,12(r3)
    4a8c:	81400115 	stw	r5,4(r16)
    4a90:	1187883a 	add	r3,r2,r6
    4a94:	31000054 	ori	r4,r6,1
    4a98:	50800315 	stw	r2,12(r10)
    4a9c:	50800215 	stw	r2,8(r10)
    4aa0:	19800015 	stw	r6,0(r3)
    4aa4:	11000115 	stw	r4,4(r2)
    4aa8:	12800215 	stw	r10,8(r2)
    4aac:	12800315 	stw	r10,12(r2)
    4ab0:	9009883a 	mov	r4,r18
    4ab4:	00056640 	call	5664 <__malloc_unlock>
    4ab8:	80c00204 	addi	r3,r16,8
    4abc:	003f5906 	br	4824 <_malloc_r+0x50>
    4ac0:	8109883a 	add	r4,r16,r4
    4ac4:	20800117 	ldw	r2,4(r4)
    4ac8:	80c00217 	ldw	r3,8(r16)
    4acc:	81400317 	ldw	r5,12(r16)
    4ad0:	10800054 	ori	r2,r2,1
    4ad4:	20800115 	stw	r2,4(r4)
    4ad8:	28c00215 	stw	r3,8(r5)
    4adc:	19400315 	stw	r5,12(r3)
    4ae0:	9009883a 	mov	r4,r18
    4ae4:	00056640 	call	5664 <__malloc_unlock>
    4ae8:	80c00204 	addi	r3,r16,8
    4aec:	003f4d06 	br	4824 <_malloc_r+0x50>
    4af0:	80800204 	addi	r2,r16,8
    4af4:	14000317 	ldw	r16,12(r2)
    4af8:	143f911e 	bne	r2,r16,4940 <_malloc_r+0x16c>
    4afc:	1a400084 	addi	r9,r3,2
    4b00:	003f7306 	br	48d0 <_malloc_r+0xfc>
    4b04:	88c00054 	ori	r3,r17,1
    4b08:	8445883a 	add	r2,r16,r17
    4b0c:	80c00115 	stw	r3,4(r16)
    4b10:	003fdf06 	br	4a90 <_malloc_r+0x2bc>
    4b14:	e4000217 	ldw	r16,8(fp)
    4b18:	00bfff04 	movi	r2,-4
    4b1c:	80c00117 	ldw	r3,4(r16)
    4b20:	802d883a 	mov	r22,r16
    4b24:	18aa703a 	and	r21,r3,r2
    4b28:	ac401636 	bltu	r21,r17,4b84 <_malloc_r+0x3b0>
    4b2c:	ac49c83a 	sub	r4,r21,r17
    4b30:	008003c4 	movi	r2,15
    4b34:	1100130e 	bge	r2,r4,4b84 <_malloc_r+0x3b0>
    4b38:	88800054 	ori	r2,r17,1
    4b3c:	8447883a 	add	r3,r16,r17
    4b40:	80800115 	stw	r2,4(r16)
    4b44:	20800054 	ori	r2,r4,1
    4b48:	18800115 	stw	r2,4(r3)
    4b4c:	e0c00215 	stw	r3,8(fp)
    4b50:	9009883a 	mov	r4,r18
    4b54:	00056640 	call	5664 <__malloc_unlock>
    4b58:	80c00204 	addi	r3,r16,8
    4b5c:	003f3106 	br	4824 <_malloc_r+0x50>
    4b60:	39c00117 	ldw	r7,4(r7)
    4b64:	573ffe04 	addi	fp,r10,-8
    4b68:	003fa006 	br	49ec <_malloc_r+0x218>
    4b6c:	00801504 	movi	r2,84
    4b70:	10c06736 	bltu	r2,r3,4d10 <_malloc_r+0x53c>
    4b74:	8804d33a 	srli	r2,r17,12
    4b78:	11801b84 	addi	r6,r2,110
    4b7c:	300490fa 	slli	r2,r6,3
    4b80:	003f4106 	br	4888 <_malloc_r+0xb4>
    4b84:	d0a76217 	ldw	r2,-25208(gp)
    4b88:	d0e00c17 	ldw	r3,-32720(gp)
    4b8c:	053fffc4 	movi	r20,-1
    4b90:	10800404 	addi	r2,r2,16
    4b94:	88a7883a 	add	r19,r17,r2
    4b98:	1d000326 	beq	r3,r20,4ba8 <_malloc_r+0x3d4>
    4b9c:	98c3ffc4 	addi	r3,r19,4095
    4ba0:	00bc0004 	movi	r2,-4096
    4ba4:	18a6703a 	and	r19,r3,r2
    4ba8:	9009883a 	mov	r4,r18
    4bac:	980b883a 	mov	r5,r19
    4bb0:	0004f140 	call	4f14 <_sbrk_r>
    4bb4:	1009883a 	mov	r4,r2
    4bb8:	15000426 	beq	r2,r20,4bcc <_malloc_r+0x3f8>
    4bbc:	854b883a 	add	r5,r16,r21
    4bc0:	1029883a 	mov	r20,r2
    4bc4:	11405a2e 	bgeu	r2,r5,4d30 <_malloc_r+0x55c>
    4bc8:	87000c26 	beq	r16,fp,4bfc <_malloc_r+0x428>
    4bcc:	e4000217 	ldw	r16,8(fp)
    4bd0:	80c00117 	ldw	r3,4(r16)
    4bd4:	00bfff04 	movi	r2,-4
    4bd8:	1884703a 	and	r2,r3,r2
    4bdc:	14400336 	bltu	r2,r17,4bec <_malloc_r+0x418>
    4be0:	1449c83a 	sub	r4,r2,r17
    4be4:	008003c4 	movi	r2,15
    4be8:	113fd316 	blt	r2,r4,4b38 <_malloc_r+0x364>
    4bec:	9009883a 	mov	r4,r18
    4bf0:	00056640 	call	5664 <__malloc_unlock>
    4bf4:	0007883a 	mov	r3,zero
    4bf8:	003f0a06 	br	4824 <_malloc_r+0x50>
    4bfc:	05c00074 	movhi	r23,1
    4c00:	bde5a704 	addi	r23,r23,-26980
    4c04:	b8800017 	ldw	r2,0(r23)
    4c08:	988d883a 	add	r6,r19,r2
    4c0c:	b9800015 	stw	r6,0(r23)
    4c10:	d0e00c17 	ldw	r3,-32720(gp)
    4c14:	00bfffc4 	movi	r2,-1
    4c18:	18808e26 	beq	r3,r2,4e54 <_malloc_r+0x680>
    4c1c:	2145c83a 	sub	r2,r4,r5
    4c20:	3085883a 	add	r2,r6,r2
    4c24:	b8800015 	stw	r2,0(r23)
    4c28:	20c001cc 	andi	r3,r4,7
    4c2c:	18005f1e 	bne	r3,zero,4dac <_malloc_r+0x5d8>
    4c30:	000b883a 	mov	r5,zero
    4c34:	a4c5883a 	add	r2,r20,r19
    4c38:	1083ffcc 	andi	r2,r2,4095
    4c3c:	00c40004 	movi	r3,4096
    4c40:	1887c83a 	sub	r3,r3,r2
    4c44:	28e7883a 	add	r19,r5,r3
    4c48:	9009883a 	mov	r4,r18
    4c4c:	980b883a 	mov	r5,r19
    4c50:	0004f140 	call	4f14 <_sbrk_r>
    4c54:	1007883a 	mov	r3,r2
    4c58:	00bfffc4 	movi	r2,-1
    4c5c:	18807a26 	beq	r3,r2,4e48 <_malloc_r+0x674>
    4c60:	1d05c83a 	sub	r2,r3,r20
    4c64:	9885883a 	add	r2,r19,r2
    4c68:	10c00054 	ori	r3,r2,1
    4c6c:	b8800017 	ldw	r2,0(r23)
    4c70:	a021883a 	mov	r16,r20
    4c74:	a0c00115 	stw	r3,4(r20)
    4c78:	9885883a 	add	r2,r19,r2
    4c7c:	b8800015 	stw	r2,0(r23)
    4c80:	e5000215 	stw	r20,8(fp)
    4c84:	b7003626 	beq	r22,fp,4d60 <_malloc_r+0x58c>
    4c88:	018003c4 	movi	r6,15
    4c8c:	35404b36 	bltu	r6,r21,4dbc <_malloc_r+0x5e8>
    4c90:	00800044 	movi	r2,1
    4c94:	a0800115 	stw	r2,4(r20)
    4c98:	003fcd06 	br	4bd0 <_malloc_r+0x3fc>
    4c9c:	2808d27a 	srli	r4,r5,9
    4ca0:	2000371e 	bne	r4,zero,4d80 <_malloc_r+0x5ac>
    4ca4:	2808d0fa 	srli	r4,r5,3
    4ca8:	200690fa 	slli	r3,r4,3
    4cac:	1ad1883a 	add	r8,r3,r11
    4cb0:	41800217 	ldw	r6,8(r8)
    4cb4:	41805b26 	beq	r8,r6,4e24 <_malloc_r+0x650>
    4cb8:	30800117 	ldw	r2,4(r6)
    4cbc:	00ffff04 	movi	r3,-4
    4cc0:	10c4703a 	and	r2,r2,r3
    4cc4:	2880022e 	bgeu	r5,r2,4cd0 <_malloc_r+0x4fc>
    4cc8:	31800217 	ldw	r6,8(r6)
    4ccc:	41bffa1e 	bne	r8,r6,4cb8 <_malloc_r+0x4e4>
    4cd0:	32000317 	ldw	r8,12(r6)
    4cd4:	39c00117 	ldw	r7,4(r7)
    4cd8:	82000315 	stw	r8,12(r16)
    4cdc:	81800215 	stw	r6,8(r16)
    4ce0:	07000034 	movhi	fp,0
    4ce4:	e71d4004 	addi	fp,fp,29952
    4ce8:	34000315 	stw	r16,12(r6)
    4cec:	44000215 	stw	r16,8(r8)
    4cf0:	003f3e06 	br	49ec <_malloc_r+0x218>
    4cf4:	63000044 	addi	r12,r12,1
    4cf8:	608000cc 	andi	r2,r12,3
    4cfc:	10005d26 	beq	r2,zero,4e74 <_malloc_r+0x6a0>
    4d00:	18c00204 	addi	r3,r3,8
    4d04:	003f5106 	br	4a4c <_malloc_r+0x278>
    4d08:	8089883a 	add	r4,r16,r2
    4d0c:	003f6d06 	br	4ac4 <_malloc_r+0x2f0>
    4d10:	00805504 	movi	r2,340
    4d14:	10c02036 	bltu	r2,r3,4d98 <_malloc_r+0x5c4>
    4d18:	8804d3fa 	srli	r2,r17,15
    4d1c:	11801dc4 	addi	r6,r2,119
    4d20:	300490fa 	slli	r2,r6,3
    4d24:	003ed806 	br	4888 <_malloc_r+0xb4>
    4d28:	48c000c4 	addi	r3,r9,3
    4d2c:	003f3106 	br	49f4 <_malloc_r+0x220>
    4d30:	05c00074 	movhi	r23,1
    4d34:	bde5a704 	addi	r23,r23,-26980
    4d38:	b8800017 	ldw	r2,0(r23)
    4d3c:	988d883a 	add	r6,r19,r2
    4d40:	b9800015 	stw	r6,0(r23)
    4d44:	293fb21e 	bne	r5,r4,4c10 <_malloc_r+0x43c>
    4d48:	2083ffcc 	andi	r2,r4,4095
    4d4c:	103fb01e 	bne	r2,zero,4c10 <_malloc_r+0x43c>
    4d50:	e4000217 	ldw	r16,8(fp)
    4d54:	9d45883a 	add	r2,r19,r21
    4d58:	10800054 	ori	r2,r2,1
    4d5c:	80800115 	stw	r2,4(r16)
    4d60:	b8c00017 	ldw	r3,0(r23)
    4d64:	d0a76317 	ldw	r2,-25204(gp)
    4d68:	10c0012e 	bgeu	r2,r3,4d70 <_malloc_r+0x59c>
    4d6c:	d0e76315 	stw	r3,-25204(gp)
    4d70:	d0a76417 	ldw	r2,-25200(gp)
    4d74:	10ff962e 	bgeu	r2,r3,4bd0 <_malloc_r+0x3fc>
    4d78:	d0e76415 	stw	r3,-25200(gp)
    4d7c:	003f9406 	br	4bd0 <_malloc_r+0x3fc>
    4d80:	00800104 	movi	r2,4
    4d84:	11001e36 	bltu	r2,r4,4e00 <_malloc_r+0x62c>
    4d88:	2804d1ba 	srli	r2,r5,6
    4d8c:	11000e04 	addi	r4,r2,56
    4d90:	200690fa 	slli	r3,r4,3
    4d94:	003fc506 	br	4cac <_malloc_r+0x4d8>
    4d98:	00815504 	movi	r2,1364
    4d9c:	10c01d2e 	bgeu	r2,r3,4e14 <_malloc_r+0x640>
    4da0:	01801f84 	movi	r6,126
    4da4:	0080fc04 	movi	r2,1008
    4da8:	003eb706 	br	4888 <_malloc_r+0xb4>
    4dac:	00800204 	movi	r2,8
    4db0:	10cbc83a 	sub	r5,r2,r3
    4db4:	2169883a 	add	r20,r4,r5
    4db8:	003f9e06 	br	4c34 <_malloc_r+0x460>
    4dbc:	00bffe04 	movi	r2,-8
    4dc0:	a93ffd04 	addi	r4,r21,-12
    4dc4:	2088703a 	and	r4,r4,r2
    4dc8:	b10b883a 	add	r5,r22,r4
    4dcc:	00c00144 	movi	r3,5
    4dd0:	28c00215 	stw	r3,8(r5)
    4dd4:	28c00115 	stw	r3,4(r5)
    4dd8:	b0800117 	ldw	r2,4(r22)
    4ddc:	1080004c 	andi	r2,r2,1
    4de0:	2084b03a 	or	r2,r4,r2
    4de4:	b0800115 	stw	r2,4(r22)
    4de8:	313fdd2e 	bgeu	r6,r4,4d60 <_malloc_r+0x58c>
    4dec:	b1400204 	addi	r5,r22,8
    4df0:	9009883a 	mov	r4,r18
    4df4:	00041ac0 	call	41ac <_free_r>
    4df8:	e4000217 	ldw	r16,8(fp)
    4dfc:	003fd806 	br	4d60 <_malloc_r+0x58c>
    4e00:	00800504 	movi	r2,20
    4e04:	11001536 	bltu	r2,r4,4e5c <_malloc_r+0x688>
    4e08:	210016c4 	addi	r4,r4,91
    4e0c:	200690fa 	slli	r3,r4,3
    4e10:	003fa606 	br	4cac <_malloc_r+0x4d8>
    4e14:	8804d4ba 	srli	r2,r17,18
    4e18:	11801f04 	addi	r6,r2,124
    4e1c:	300490fa 	slli	r2,r6,3
    4e20:	003e9906 	br	4888 <_malloc_r+0xb4>
    4e24:	2009d0ba 	srai	r4,r4,2
    4e28:	01400034 	movhi	r5,0
    4e2c:	295d4004 	addi	r5,r5,29952
    4e30:	00c00044 	movi	r3,1
    4e34:	28800117 	ldw	r2,4(r5)
    4e38:	1906983a 	sll	r3,r3,r4
    4e3c:	10c4b03a 	or	r2,r2,r3
    4e40:	28800115 	stw	r2,4(r5)
    4e44:	003fa306 	br	4cd4 <_malloc_r+0x500>
    4e48:	0027883a 	mov	r19,zero
    4e4c:	00c00044 	movi	r3,1
    4e50:	003f8606 	br	4c6c <_malloc_r+0x498>
    4e54:	d1200c15 	stw	r4,-32720(gp)
    4e58:	003f7306 	br	4c28 <_malloc_r+0x454>
    4e5c:	00801504 	movi	r2,84
    4e60:	11001936 	bltu	r2,r4,4ec8 <_malloc_r+0x6f4>
    4e64:	2804d33a 	srli	r2,r5,12
    4e68:	11001b84 	addi	r4,r2,110
    4e6c:	200690fa 	slli	r3,r4,3
    4e70:	003f8e06 	br	4cac <_malloc_r+0x4d8>
    4e74:	480b883a 	mov	r5,r9
    4e78:	6807883a 	mov	r3,r13
    4e7c:	288000cc 	andi	r2,r5,3
    4e80:	18fffe04 	addi	r3,r3,-8
    4e84:	297fffc4 	addi	r5,r5,-1
    4e88:	10001526 	beq	r2,zero,4ee0 <_malloc_r+0x70c>
    4e8c:	18800217 	ldw	r2,8(r3)
    4e90:	10fffa26 	beq	r2,r3,4e7c <_malloc_r+0x6a8>
    4e94:	2109883a 	add	r4,r4,r4
    4e98:	393f1e36 	bltu	r7,r4,4b14 <_malloc_r+0x340>
    4e9c:	203f1d26 	beq	r4,zero,4b14 <_malloc_r+0x340>
    4ea0:	21c4703a 	and	r2,r4,r7
    4ea4:	10000226 	beq	r2,zero,4eb0 <_malloc_r+0x6dc>
    4ea8:	6013883a 	mov	r9,r12
    4eac:	003ee106 	br	4a34 <_malloc_r+0x260>
    4eb0:	2109883a 	add	r4,r4,r4
    4eb4:	3904703a 	and	r2,r7,r4
    4eb8:	63000104 	addi	r12,r12,4
    4ebc:	103ffc26 	beq	r2,zero,4eb0 <_malloc_r+0x6dc>
    4ec0:	6013883a 	mov	r9,r12
    4ec4:	003edb06 	br	4a34 <_malloc_r+0x260>
    4ec8:	00805504 	movi	r2,340
    4ecc:	11000836 	bltu	r2,r4,4ef0 <_malloc_r+0x71c>
    4ed0:	2804d3fa 	srli	r2,r5,15
    4ed4:	11001dc4 	addi	r4,r2,119
    4ed8:	200690fa 	slli	r3,r4,3
    4edc:	003f7306 	br	4cac <_malloc_r+0x4d8>
    4ee0:	0104303a 	nor	r2,zero,r4
    4ee4:	388e703a 	and	r7,r7,r2
    4ee8:	e1c00115 	stw	r7,4(fp)
    4eec:	003fe906 	br	4e94 <_malloc_r+0x6c0>
    4ef0:	00815504 	movi	r2,1364
    4ef4:	1100032e 	bgeu	r2,r4,4f04 <_malloc_r+0x730>
    4ef8:	01001f84 	movi	r4,126
    4efc:	00c0fc04 	movi	r3,1008
    4f00:	003f6a06 	br	4cac <_malloc_r+0x4d8>
    4f04:	2804d4ba 	srli	r2,r5,18
    4f08:	11001f04 	addi	r4,r2,124
    4f0c:	200690fa 	slli	r3,r4,3
    4f10:	003f6606 	br	4cac <_malloc_r+0x4d8>

00004f14 <_sbrk_r>:
    4f14:	defffd04 	addi	sp,sp,-12
    4f18:	dc000015 	stw	r16,0(sp)
    4f1c:	04000074 	movhi	r16,1
    4f20:	8425a304 	addi	r16,r16,-26996
    4f24:	dc400115 	stw	r17,4(sp)
    4f28:	80000015 	stw	zero,0(r16)
    4f2c:	2023883a 	mov	r17,r4
    4f30:	2809883a 	mov	r4,r5
    4f34:	dfc00215 	stw	ra,8(sp)
    4f38:	00057600 	call	5760 <sbrk>
    4f3c:	1007883a 	mov	r3,r2
    4f40:	00bfffc4 	movi	r2,-1
    4f44:	18800626 	beq	r3,r2,4f60 <_sbrk_r+0x4c>
    4f48:	1805883a 	mov	r2,r3
    4f4c:	dfc00217 	ldw	ra,8(sp)
    4f50:	dc400117 	ldw	r17,4(sp)
    4f54:	dc000017 	ldw	r16,0(sp)
    4f58:	dec00304 	addi	sp,sp,12
    4f5c:	f800283a 	ret
    4f60:	80800017 	ldw	r2,0(r16)
    4f64:	103ff826 	beq	r2,zero,4f48 <_sbrk_r+0x34>
    4f68:	88800015 	stw	r2,0(r17)
    4f6c:	1805883a 	mov	r2,r3
    4f70:	dfc00217 	ldw	ra,8(sp)
    4f74:	dc400117 	ldw	r17,4(sp)
    4f78:	dc000017 	ldw	r16,0(sp)
    4f7c:	dec00304 	addi	sp,sp,12
    4f80:	f800283a 	ret

00004f84 <__sclose>:
    4f84:	2940038f 	ldh	r5,14(r5)
    4f88:	00051481 	jmpi	5148 <_close_r>

00004f8c <__sseek>:
    4f8c:	defffe04 	addi	sp,sp,-8
    4f90:	dc000015 	stw	r16,0(sp)
    4f94:	2821883a 	mov	r16,r5
    4f98:	2940038f 	ldh	r5,14(r5)
    4f9c:	dfc00115 	stw	ra,4(sp)
    4fa0:	00053c00 	call	53c0 <_lseek_r>
    4fa4:	1007883a 	mov	r3,r2
    4fa8:	00bfffc4 	movi	r2,-1
    4fac:	18800926 	beq	r3,r2,4fd4 <__sseek+0x48>
    4fb0:	8080030b 	ldhu	r2,12(r16)
    4fb4:	80c01415 	stw	r3,80(r16)
    4fb8:	10840014 	ori	r2,r2,4096
    4fbc:	8080030d 	sth	r2,12(r16)
    4fc0:	1805883a 	mov	r2,r3
    4fc4:	dfc00117 	ldw	ra,4(sp)
    4fc8:	dc000017 	ldw	r16,0(sp)
    4fcc:	dec00204 	addi	sp,sp,8
    4fd0:	f800283a 	ret
    4fd4:	8080030b 	ldhu	r2,12(r16)
    4fd8:	10bbffcc 	andi	r2,r2,61439
    4fdc:	8080030d 	sth	r2,12(r16)
    4fe0:	1805883a 	mov	r2,r3
    4fe4:	dfc00117 	ldw	ra,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00204 	addi	sp,sp,8
    4ff0:	f800283a 	ret

00004ff4 <__swrite>:
    4ff4:	2880030b 	ldhu	r2,12(r5)
    4ff8:	defffb04 	addi	sp,sp,-20
    4ffc:	dcc00315 	stw	r19,12(sp)
    5000:	1080400c 	andi	r2,r2,256
    5004:	dc800215 	stw	r18,8(sp)
    5008:	dc400115 	stw	r17,4(sp)
    500c:	dc000015 	stw	r16,0(sp)
    5010:	3027883a 	mov	r19,r6
    5014:	3825883a 	mov	r18,r7
    5018:	dfc00415 	stw	ra,16(sp)
    501c:	2821883a 	mov	r16,r5
    5020:	000d883a 	mov	r6,zero
    5024:	01c00084 	movi	r7,2
    5028:	2023883a 	mov	r17,r4
    502c:	10000226 	beq	r2,zero,5038 <__swrite+0x44>
    5030:	2940038f 	ldh	r5,14(r5)
    5034:	00053c00 	call	53c0 <_lseek_r>
    5038:	8080030b 	ldhu	r2,12(r16)
    503c:	8140038f 	ldh	r5,14(r16)
    5040:	8809883a 	mov	r4,r17
    5044:	10bbffcc 	andi	r2,r2,61439
    5048:	980d883a 	mov	r6,r19
    504c:	900f883a 	mov	r7,r18
    5050:	8080030d 	sth	r2,12(r16)
    5054:	dfc00417 	ldw	ra,16(sp)
    5058:	dcc00317 	ldw	r19,12(sp)
    505c:	dc800217 	ldw	r18,8(sp)
    5060:	dc400117 	ldw	r17,4(sp)
    5064:	dc000017 	ldw	r16,0(sp)
    5068:	dec00504 	addi	sp,sp,20
    506c:	00050d01 	jmpi	50d0 <_write_r>

00005070 <__sread>:
    5070:	defffe04 	addi	sp,sp,-8
    5074:	dc000015 	stw	r16,0(sp)
    5078:	2821883a 	mov	r16,r5
    507c:	2940038f 	ldh	r5,14(r5)
    5080:	dfc00115 	stw	ra,4(sp)
    5084:	00054380 	call	5438 <_read_r>
    5088:	1007883a 	mov	r3,r2
    508c:	10000816 	blt	r2,zero,50b0 <__sread+0x40>
    5090:	80801417 	ldw	r2,80(r16)
    5094:	10c5883a 	add	r2,r2,r3
    5098:	80801415 	stw	r2,80(r16)
    509c:	1805883a 	mov	r2,r3
    50a0:	dfc00117 	ldw	ra,4(sp)
    50a4:	dc000017 	ldw	r16,0(sp)
    50a8:	dec00204 	addi	sp,sp,8
    50ac:	f800283a 	ret
    50b0:	8080030b 	ldhu	r2,12(r16)
    50b4:	10bbffcc 	andi	r2,r2,61439
    50b8:	8080030d 	sth	r2,12(r16)
    50bc:	1805883a 	mov	r2,r3
    50c0:	dfc00117 	ldw	ra,4(sp)
    50c4:	dc000017 	ldw	r16,0(sp)
    50c8:	dec00204 	addi	sp,sp,8
    50cc:	f800283a 	ret

000050d0 <_write_r>:
    50d0:	defffd04 	addi	sp,sp,-12
    50d4:	dc000015 	stw	r16,0(sp)
    50d8:	04000074 	movhi	r16,1
    50dc:	8425a304 	addi	r16,r16,-26996
    50e0:	dc400115 	stw	r17,4(sp)
    50e4:	80000015 	stw	zero,0(r16)
    50e8:	2023883a 	mov	r17,r4
    50ec:	2809883a 	mov	r4,r5
    50f0:	300b883a 	mov	r5,r6
    50f4:	380d883a 	mov	r6,r7
    50f8:	dfc00215 	stw	ra,8(sp)
    50fc:	00057b00 	call	57b0 <write>
    5100:	1007883a 	mov	r3,r2
    5104:	00bfffc4 	movi	r2,-1
    5108:	18800626 	beq	r3,r2,5124 <_write_r+0x54>
    510c:	1805883a 	mov	r2,r3
    5110:	dfc00217 	ldw	ra,8(sp)
    5114:	dc400117 	ldw	r17,4(sp)
    5118:	dc000017 	ldw	r16,0(sp)
    511c:	dec00304 	addi	sp,sp,12
    5120:	f800283a 	ret
    5124:	80800017 	ldw	r2,0(r16)
    5128:	103ff826 	beq	r2,zero,510c <_write_r+0x3c>
    512c:	88800015 	stw	r2,0(r17)
    5130:	1805883a 	mov	r2,r3
    5134:	dfc00217 	ldw	ra,8(sp)
    5138:	dc400117 	ldw	r17,4(sp)
    513c:	dc000017 	ldw	r16,0(sp)
    5140:	dec00304 	addi	sp,sp,12
    5144:	f800283a 	ret

00005148 <_close_r>:
    5148:	defffd04 	addi	sp,sp,-12
    514c:	dc000015 	stw	r16,0(sp)
    5150:	04000074 	movhi	r16,1
    5154:	8425a304 	addi	r16,r16,-26996
    5158:	dc400115 	stw	r17,4(sp)
    515c:	80000015 	stw	zero,0(r16)
    5160:	2023883a 	mov	r17,r4
    5164:	2809883a 	mov	r4,r5
    5168:	dfc00215 	stw	ra,8(sp)
    516c:	0002b600 	call	2b60 <close>
    5170:	1007883a 	mov	r3,r2
    5174:	00bfffc4 	movi	r2,-1
    5178:	18800626 	beq	r3,r2,5194 <_close_r+0x4c>
    517c:	1805883a 	mov	r2,r3
    5180:	dfc00217 	ldw	ra,8(sp)
    5184:	dc400117 	ldw	r17,4(sp)
    5188:	dc000017 	ldw	r16,0(sp)
    518c:	dec00304 	addi	sp,sp,12
    5190:	f800283a 	ret
    5194:	80800017 	ldw	r2,0(r16)
    5198:	103ff826 	beq	r2,zero,517c <_close_r+0x34>
    519c:	88800015 	stw	r2,0(r17)
    51a0:	1805883a 	mov	r2,r3
    51a4:	dfc00217 	ldw	ra,8(sp)
    51a8:	dc400117 	ldw	r17,4(sp)
    51ac:	dc000017 	ldw	r16,0(sp)
    51b0:	dec00304 	addi	sp,sp,12
    51b4:	f800283a 	ret

000051b8 <_fclose_r>:
    51b8:	defffc04 	addi	sp,sp,-16
    51bc:	dc400115 	stw	r17,4(sp)
    51c0:	dc000015 	stw	r16,0(sp)
    51c4:	dfc00315 	stw	ra,12(sp)
    51c8:	dc800215 	stw	r18,8(sp)
    51cc:	2821883a 	mov	r16,r5
    51d0:	2023883a 	mov	r17,r4
    51d4:	28002926 	beq	r5,zero,527c <_fclose_r+0xc4>
    51d8:	0003e180 	call	3e18 <__sfp_lock_acquire>
    51dc:	88000226 	beq	r17,zero,51e8 <_fclose_r+0x30>
    51e0:	88800e17 	ldw	r2,56(r17)
    51e4:	10002d26 	beq	r2,zero,529c <_fclose_r+0xe4>
    51e8:	8080030f 	ldh	r2,12(r16)
    51ec:	10002226 	beq	r2,zero,5278 <_fclose_r+0xc0>
    51f0:	8809883a 	mov	r4,r17
    51f4:	800b883a 	mov	r5,r16
    51f8:	0003b900 	call	3b90 <_fflush_r>
    51fc:	1025883a 	mov	r18,r2
    5200:	80800b17 	ldw	r2,44(r16)
    5204:	10000426 	beq	r2,zero,5218 <_fclose_r+0x60>
    5208:	81400717 	ldw	r5,28(r16)
    520c:	8809883a 	mov	r4,r17
    5210:	103ee83a 	callr	r2
    5214:	10002a16 	blt	r2,zero,52c0 <_fclose_r+0x108>
    5218:	8080030b 	ldhu	r2,12(r16)
    521c:	1080200c 	andi	r2,r2,128
    5220:	1000231e 	bne	r2,zero,52b0 <_fclose_r+0xf8>
    5224:	81400c17 	ldw	r5,48(r16)
    5228:	28000526 	beq	r5,zero,5240 <_fclose_r+0x88>
    522c:	80801004 	addi	r2,r16,64
    5230:	28800226 	beq	r5,r2,523c <_fclose_r+0x84>
    5234:	8809883a 	mov	r4,r17
    5238:	00041ac0 	call	41ac <_free_r>
    523c:	80000c15 	stw	zero,48(r16)
    5240:	81401117 	ldw	r5,68(r16)
    5244:	28000326 	beq	r5,zero,5254 <_fclose_r+0x9c>
    5248:	8809883a 	mov	r4,r17
    524c:	00041ac0 	call	41ac <_free_r>
    5250:	80001115 	stw	zero,68(r16)
    5254:	8000030d 	sth	zero,12(r16)
    5258:	0003e1c0 	call	3e1c <__sfp_lock_release>
    525c:	9005883a 	mov	r2,r18
    5260:	dfc00317 	ldw	ra,12(sp)
    5264:	dc800217 	ldw	r18,8(sp)
    5268:	dc400117 	ldw	r17,4(sp)
    526c:	dc000017 	ldw	r16,0(sp)
    5270:	dec00404 	addi	sp,sp,16
    5274:	f800283a 	ret
    5278:	0003e1c0 	call	3e1c <__sfp_lock_release>
    527c:	0025883a 	mov	r18,zero
    5280:	9005883a 	mov	r2,r18
    5284:	dfc00317 	ldw	ra,12(sp)
    5288:	dc800217 	ldw	r18,8(sp)
    528c:	dc400117 	ldw	r17,4(sp)
    5290:	dc000017 	ldw	r16,0(sp)
    5294:	dec00404 	addi	sp,sp,16
    5298:	f800283a 	ret
    529c:	8809883a 	mov	r4,r17
    52a0:	0003e280 	call	3e28 <__sinit>
    52a4:	8080030f 	ldh	r2,12(r16)
    52a8:	103fd11e 	bne	r2,zero,51f0 <_fclose_r+0x38>
    52ac:	003ff206 	br	5278 <_fclose_r+0xc0>
    52b0:	81400417 	ldw	r5,16(r16)
    52b4:	8809883a 	mov	r4,r17
    52b8:	00041ac0 	call	41ac <_free_r>
    52bc:	003fd906 	br	5224 <_fclose_r+0x6c>
    52c0:	04bfffc4 	movi	r18,-1
    52c4:	003fd406 	br	5218 <_fclose_r+0x60>

000052c8 <fclose>:
    52c8:	00800034 	movhi	r2,0
    52cc:	109e4b04 	addi	r2,r2,31020
    52d0:	200b883a 	mov	r5,r4
    52d4:	11000017 	ldw	r4,0(r2)
    52d8:	00051b81 	jmpi	51b8 <_fclose_r>

000052dc <_fstat_r>:
    52dc:	defffd04 	addi	sp,sp,-12
    52e0:	dc000015 	stw	r16,0(sp)
    52e4:	04000074 	movhi	r16,1
    52e8:	8425a304 	addi	r16,r16,-26996
    52ec:	dc400115 	stw	r17,4(sp)
    52f0:	80000015 	stw	zero,0(r16)
    52f4:	2023883a 	mov	r17,r4
    52f8:	2809883a 	mov	r4,r5
    52fc:	300b883a 	mov	r5,r6
    5300:	dfc00215 	stw	ra,8(sp)
    5304:	00054c40 	call	54c4 <fstat>
    5308:	1007883a 	mov	r3,r2
    530c:	00bfffc4 	movi	r2,-1
    5310:	18800626 	beq	r3,r2,532c <_fstat_r+0x50>
    5314:	1805883a 	mov	r2,r3
    5318:	dfc00217 	ldw	ra,8(sp)
    531c:	dc400117 	ldw	r17,4(sp)
    5320:	dc000017 	ldw	r16,0(sp)
    5324:	dec00304 	addi	sp,sp,12
    5328:	f800283a 	ret
    532c:	80800017 	ldw	r2,0(r16)
    5330:	103ff826 	beq	r2,zero,5314 <_fstat_r+0x38>
    5334:	88800015 	stw	r2,0(r17)
    5338:	1805883a 	mov	r2,r3
    533c:	dfc00217 	ldw	ra,8(sp)
    5340:	dc400117 	ldw	r17,4(sp)
    5344:	dc000017 	ldw	r16,0(sp)
    5348:	dec00304 	addi	sp,sp,12
    534c:	f800283a 	ret

00005350 <_isatty_r>:
    5350:	defffd04 	addi	sp,sp,-12
    5354:	dc000015 	stw	r16,0(sp)
    5358:	04000074 	movhi	r16,1
    535c:	8425a304 	addi	r16,r16,-26996
    5360:	dc400115 	stw	r17,4(sp)
    5364:	80000015 	stw	zero,0(r16)
    5368:	2023883a 	mov	r17,r4
    536c:	2809883a 	mov	r4,r5
    5370:	dfc00215 	stw	ra,8(sp)
    5374:	00055440 	call	5544 <isatty>
    5378:	1007883a 	mov	r3,r2
    537c:	00bfffc4 	movi	r2,-1
    5380:	18800626 	beq	r3,r2,539c <_isatty_r+0x4c>
    5384:	1805883a 	mov	r2,r3
    5388:	dfc00217 	ldw	ra,8(sp)
    538c:	dc400117 	ldw	r17,4(sp)
    5390:	dc000017 	ldw	r16,0(sp)
    5394:	dec00304 	addi	sp,sp,12
    5398:	f800283a 	ret
    539c:	80800017 	ldw	r2,0(r16)
    53a0:	103ff826 	beq	r2,zero,5384 <_isatty_r+0x34>
    53a4:	88800015 	stw	r2,0(r17)
    53a8:	1805883a 	mov	r2,r3
    53ac:	dfc00217 	ldw	ra,8(sp)
    53b0:	dc400117 	ldw	r17,4(sp)
    53b4:	dc000017 	ldw	r16,0(sp)
    53b8:	dec00304 	addi	sp,sp,12
    53bc:	f800283a 	ret

000053c0 <_lseek_r>:
    53c0:	defffd04 	addi	sp,sp,-12
    53c4:	dc000015 	stw	r16,0(sp)
    53c8:	04000074 	movhi	r16,1
    53cc:	8425a304 	addi	r16,r16,-26996
    53d0:	dc400115 	stw	r17,4(sp)
    53d4:	80000015 	stw	zero,0(r16)
    53d8:	2023883a 	mov	r17,r4
    53dc:	2809883a 	mov	r4,r5
    53e0:	300b883a 	mov	r5,r6
    53e4:	380d883a 	mov	r6,r7
    53e8:	dfc00215 	stw	ra,8(sp)
    53ec:	00055c80 	call	55c8 <lseek>
    53f0:	1007883a 	mov	r3,r2
    53f4:	00bfffc4 	movi	r2,-1
    53f8:	18800626 	beq	r3,r2,5414 <_lseek_r+0x54>
    53fc:	1805883a 	mov	r2,r3
    5400:	dfc00217 	ldw	ra,8(sp)
    5404:	dc400117 	ldw	r17,4(sp)
    5408:	dc000017 	ldw	r16,0(sp)
    540c:	dec00304 	addi	sp,sp,12
    5410:	f800283a 	ret
    5414:	80800017 	ldw	r2,0(r16)
    5418:	103ff826 	beq	r2,zero,53fc <_lseek_r+0x3c>
    541c:	88800015 	stw	r2,0(r17)
    5420:	1805883a 	mov	r2,r3
    5424:	dfc00217 	ldw	ra,8(sp)
    5428:	dc400117 	ldw	r17,4(sp)
    542c:	dc000017 	ldw	r16,0(sp)
    5430:	dec00304 	addi	sp,sp,12
    5434:	f800283a 	ret

00005438 <_read_r>:
    5438:	defffd04 	addi	sp,sp,-12
    543c:	dc000015 	stw	r16,0(sp)
    5440:	04000074 	movhi	r16,1
    5444:	8425a304 	addi	r16,r16,-26996
    5448:	dc400115 	stw	r17,4(sp)
    544c:	80000015 	stw	zero,0(r16)
    5450:	2023883a 	mov	r17,r4
    5454:	2809883a 	mov	r4,r5
    5458:	300b883a 	mov	r5,r6
    545c:	380d883a 	mov	r6,r7
    5460:	dfc00215 	stw	ra,8(sp)
    5464:	00056680 	call	5668 <read>
    5468:	1007883a 	mov	r3,r2
    546c:	00bfffc4 	movi	r2,-1
    5470:	18800626 	beq	r3,r2,548c <_read_r+0x54>
    5474:	1805883a 	mov	r2,r3
    5478:	dfc00217 	ldw	ra,8(sp)
    547c:	dc400117 	ldw	r17,4(sp)
    5480:	dc000017 	ldw	r16,0(sp)
    5484:	dec00304 	addi	sp,sp,12
    5488:	f800283a 	ret
    548c:	80800017 	ldw	r2,0(r16)
    5490:	103ff826 	beq	r2,zero,5474 <_read_r+0x3c>
    5494:	88800015 	stw	r2,0(r17)
    5498:	1805883a 	mov	r2,r3
    549c:	dfc00217 	ldw	ra,8(sp)
    54a0:	dc400117 	ldw	r17,4(sp)
    54a4:	dc000017 	ldw	r16,0(sp)
    54a8:	dec00304 	addi	sp,sp,12
    54ac:	f800283a 	ret

000054b0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    54b0:	20000226 	beq	r4,zero,54bc <_exit+0xc>
    ALT_SIM_FAIL();
    54b4:	002af070 	cmpltui	zero,zero,43969
    54b8:	00000106 	br	54c0 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    54bc:	002af0b0 	cmpltui	zero,zero,43970
    54c0:	003fff06 	br	54c0 <_exit+0x10>

000054c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    54c4:	deffff04 	addi	sp,sp,-4
    54c8:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    54cc:	20000e16 	blt	r4,zero,5508 <fstat+0x44>
    54d0:	20c00324 	muli	r3,r4,12
    54d4:	00800034 	movhi	r2,0
    54d8:	109be004 	addi	r2,r2,28544
    54dc:	1889883a 	add	r4,r3,r2
  
  if (fd)
    54e0:	20000926 	beq	r4,zero,5508 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    54e4:	20800017 	ldw	r2,0(r4)
    54e8:	10800817 	ldw	r2,32(r2)
    54ec:	10000226 	beq	r2,zero,54f8 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    54f0:	103ee83a 	callr	r2
    54f4:	00001006 	br	5538 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    54f8:	00880004 	movi	r2,8192
    54fc:	28800115 	stw	r2,4(r5)
    5500:	0005883a 	mov	r2,zero
    5504:	00000c06 	br	5538 <fstat+0x74>
    5508:	00800034 	movhi	r2,0
    550c:	109e4704 	addi	r2,r2,31004
    5510:	10800017 	ldw	r2,0(r2)
    5514:	1000031e 	bne	r2,zero,5524 <fstat+0x60>
    5518:	00c00074 	movhi	r3,1
    551c:	18e5a304 	addi	r3,r3,-26996
    5520:	00000206 	br	552c <fstat+0x68>
    5524:	103ee83a 	callr	r2
    5528:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    552c:	00801444 	movi	r2,81
    5530:	18800015 	stw	r2,0(r3)
    5534:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    5538:	dfc00017 	ldw	ra,0(sp)
    553c:	dec00104 	addi	sp,sp,4
    5540:	f800283a 	ret

00005544 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5544:	defff004 	addi	sp,sp,-64
    5548:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    554c:	20000f16 	blt	r4,zero,558c <isatty+0x48>
    5550:	20c00324 	muli	r3,r4,12
    5554:	00800034 	movhi	r2,0
    5558:	109be004 	addi	r2,r2,28544
    555c:	1885883a 	add	r2,r3,r2
  
  if (fd)
    5560:	10000a26 	beq	r2,zero,558c <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5564:	10800017 	ldw	r2,0(r2)
    5568:	10800817 	ldw	r2,32(r2)
    556c:	1000021e 	bne	r2,zero,5578 <isatty+0x34>
    5570:	00800044 	movi	r2,1
    5574:	00001106 	br	55bc <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5578:	d80b883a 	mov	r5,sp
    557c:	00054c40 	call	54c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5580:	d8800117 	ldw	r2,4(sp)
    5584:	10880020 	cmpeqi	r2,r2,8192
    5588:	00000c06 	br	55bc <isatty+0x78>
    558c:	00800034 	movhi	r2,0
    5590:	109e4704 	addi	r2,r2,31004
    5594:	10800017 	ldw	r2,0(r2)
    5598:	1000031e 	bne	r2,zero,55a8 <isatty+0x64>
    559c:	00c00074 	movhi	r3,1
    55a0:	18e5a304 	addi	r3,r3,-26996
    55a4:	00000206 	br	55b0 <isatty+0x6c>
    55a8:	103ee83a 	callr	r2
    55ac:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    55b0:	00801444 	movi	r2,81
    55b4:	18800015 	stw	r2,0(r3)
    55b8:	0005883a 	mov	r2,zero
    return 0;
  }
}
    55bc:	dfc00f17 	ldw	ra,60(sp)
    55c0:	dec01004 	addi	sp,sp,64
    55c4:	f800283a 	ret

000055c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    55c8:	defffe04 	addi	sp,sp,-8
    55cc:	dfc00115 	stw	ra,4(sp)
    55d0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    55d4:	2000020e 	bge	r4,zero,55e0 <lseek+0x18>
    55d8:	043febc4 	movi	r16,-81
    55dc:	00000d06 	br	5614 <lseek+0x4c>
    55e0:	20c00324 	muli	r3,r4,12
    55e4:	00800034 	movhi	r2,0
    55e8:	109be004 	addi	r2,r2,28544
    55ec:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    55f0:	20001526 	beq	r4,zero,5648 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    55f4:	20800017 	ldw	r2,0(r4)
    55f8:	10800717 	ldw	r2,28(r2)
    55fc:	1000021e 	bne	r2,zero,5608 <lseek+0x40>
    5600:	043fde84 	movi	r16,-134
    5604:	00000306 	br	5614 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5608:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    560c:	1000100e 	bge	r2,zero,5650 <lseek+0x88>
    5610:	1021883a 	mov	r16,r2
    5614:	00800034 	movhi	r2,0
    5618:	109e4704 	addi	r2,r2,31004
    561c:	10800017 	ldw	r2,0(r2)
    5620:	1000031e 	bne	r2,zero,5630 <lseek+0x68>
    5624:	00c00074 	movhi	r3,1
    5628:	18e5a304 	addi	r3,r3,-26996
    562c:	00000206 	br	5638 <lseek+0x70>
    5630:	103ee83a 	callr	r2
    5634:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    5638:	0405c83a 	sub	r2,zero,r16
    563c:	18800015 	stw	r2,0(r3)
    5640:	00bfffc4 	movi	r2,-1
    5644:	00000206 	br	5650 <lseek+0x88>
    5648:	043febc4 	movi	r16,-81
    564c:	003ff106 	br	5614 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    5650:	dfc00117 	ldw	ra,4(sp)
    5654:	dc000017 	ldw	r16,0(sp)
    5658:	dec00204 	addi	sp,sp,8
    565c:	f800283a 	ret

00005660 <__malloc_lock>:
    5660:	f800283a 	ret

00005664 <__malloc_unlock>:
    5664:	f800283a 	ret

00005668 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5668:	defffe04 	addi	sp,sp,-8
    566c:	dfc00115 	stw	ra,4(sp)
    5670:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5674:	20002916 	blt	r4,zero,571c <read+0xb4>
    5678:	20c00324 	muli	r3,r4,12
    567c:	00800034 	movhi	r2,0
    5680:	109be004 	addi	r2,r2,28544
    5684:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5688:	20002426 	beq	r4,zero,571c <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    568c:	20800217 	ldw	r2,8(r4)
    5690:	108000cc 	andi	r2,r2,3
    5694:	00c00044 	movi	r3,1
    5698:	10c01326 	beq	r2,r3,56e8 <read+0x80>
    569c:	20800017 	ldw	r2,0(r4)
    56a0:	10800517 	ldw	r2,20(r2)
    56a4:	10001026 	beq	r2,zero,56e8 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    56a8:	103ee83a 	callr	r2
    56ac:	1021883a 	mov	r16,r2
    56b0:	1000260e 	bge	r2,zero,574c <read+0xe4>
    56b4:	00800034 	movhi	r2,0
    56b8:	109e4704 	addi	r2,r2,31004
    56bc:	10800017 	ldw	r2,0(r2)
    56c0:	1000031e 	bne	r2,zero,56d0 <read+0x68>
    56c4:	00c00074 	movhi	r3,1
    56c8:	18e5a304 	addi	r3,r3,-26996
    56cc:	00000206 	br	56d8 <read+0x70>
    56d0:	103ee83a 	callr	r2
    56d4:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    56d8:	0405c83a 	sub	r2,zero,r16
    56dc:	18800015 	stw	r2,0(r3)
    56e0:	043fffc4 	movi	r16,-1
    56e4:	00001906 	br	574c <read+0xe4>
    56e8:	00800034 	movhi	r2,0
    56ec:	109e4704 	addi	r2,r2,31004
    56f0:	10800017 	ldw	r2,0(r2)
    56f4:	1000031e 	bne	r2,zero,5704 <read+0x9c>
    56f8:	00c00074 	movhi	r3,1
    56fc:	18e5a304 	addi	r3,r3,-26996
    5700:	00000206 	br	570c <read+0xa4>
    5704:	103ee83a 	callr	r2
    5708:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    570c:	00800344 	movi	r2,13
    5710:	18800015 	stw	r2,0(r3)
    5714:	043fffc4 	movi	r16,-1
    5718:	00000c06 	br	574c <read+0xe4>
    571c:	00800034 	movhi	r2,0
    5720:	109e4704 	addi	r2,r2,31004
    5724:	10800017 	ldw	r2,0(r2)
    5728:	1000031e 	bne	r2,zero,5738 <read+0xd0>
    572c:	00c00074 	movhi	r3,1
    5730:	18e5a304 	addi	r3,r3,-26996
    5734:	00000206 	br	5740 <read+0xd8>
    5738:	103ee83a 	callr	r2
    573c:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5740:	00801444 	movi	r2,81
    5744:	18800015 	stw	r2,0(r3)
    5748:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    574c:	8005883a 	mov	r2,r16
    5750:	dfc00117 	ldw	ra,4(sp)
    5754:	dc000017 	ldw	r16,0(sp)
    5758:	dec00204 	addi	sp,sp,8
    575c:	f800283a 	ret

00005760 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5760:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5764:	00bfff84 	movi	r2,-2
    5768:	2884703a 	and	r2,r5,r2
    576c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5770:	d0a00d17 	ldw	r2,-32716(gp)
    5774:	108000c4 	addi	r2,r2,3
    5778:	00ffff04 	movi	r3,-4
    577c:	10c6703a 	and	r3,r2,r3
    5780:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5784:	1909883a 	add	r4,r3,r4
    5788:	00802034 	movhi	r2,128
    578c:	10800004 	addi	r2,r2,0
    5790:	1100032e 	bgeu	r2,r4,57a0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5794:	2801703a 	wrctl	status,r5
    5798:	00ffffc4 	movi	r3,-1
    579c:	00000206 	br	57a8 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    57a0:	d1200d15 	stw	r4,-32716(gp)
    57a4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    57a8:	1805883a 	mov	r2,r3
    57ac:	f800283a 	ret

000057b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    57b0:	defffe04 	addi	sp,sp,-8
    57b4:	dfc00115 	stw	ra,4(sp)
    57b8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    57bc:	20002816 	blt	r4,zero,5860 <write+0xb0>
    57c0:	20c00324 	muli	r3,r4,12
    57c4:	00800034 	movhi	r2,0
    57c8:	109be004 	addi	r2,r2,28544
    57cc:	1889883a 	add	r4,r3,r2
  
  if (fd)
    57d0:	20002326 	beq	r4,zero,5860 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    57d4:	20800217 	ldw	r2,8(r4)
    57d8:	108000cc 	andi	r2,r2,3
    57dc:	10001326 	beq	r2,zero,582c <write+0x7c>
    57e0:	20800017 	ldw	r2,0(r4)
    57e4:	10800617 	ldw	r2,24(r2)
    57e8:	10001026 	beq	r2,zero,582c <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    57ec:	103ee83a 	callr	r2
    57f0:	1021883a 	mov	r16,r2
    57f4:	1000260e 	bge	r2,zero,5890 <write+0xe0>
    57f8:	00800034 	movhi	r2,0
    57fc:	109e4704 	addi	r2,r2,31004
    5800:	10800017 	ldw	r2,0(r2)
    5804:	1000031e 	bne	r2,zero,5814 <write+0x64>
    5808:	00c00074 	movhi	r3,1
    580c:	18e5a304 	addi	r3,r3,-26996
    5810:	00000206 	br	581c <write+0x6c>
    5814:	103ee83a 	callr	r2
    5818:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    581c:	0405c83a 	sub	r2,zero,r16
    5820:	18800015 	stw	r2,0(r3)
    5824:	043fffc4 	movi	r16,-1
    5828:	00001906 	br	5890 <write+0xe0>
    582c:	00800034 	movhi	r2,0
    5830:	109e4704 	addi	r2,r2,31004
    5834:	10800017 	ldw	r2,0(r2)
    5838:	1000031e 	bne	r2,zero,5848 <write+0x98>
    583c:	00c00074 	movhi	r3,1
    5840:	18e5a304 	addi	r3,r3,-26996
    5844:	00000206 	br	5850 <write+0xa0>
    5848:	103ee83a 	callr	r2
    584c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5850:	00800344 	movi	r2,13
    5854:	18800015 	stw	r2,0(r3)
    5858:	043fffc4 	movi	r16,-1
    585c:	00000c06 	br	5890 <write+0xe0>
    5860:	00800034 	movhi	r2,0
    5864:	109e4704 	addi	r2,r2,31004
    5868:	10800017 	ldw	r2,0(r2)
    586c:	1000031e 	bne	r2,zero,587c <write+0xcc>
    5870:	00c00074 	movhi	r3,1
    5874:	18e5a304 	addi	r3,r3,-26996
    5878:	00000206 	br	5884 <write+0xd4>
    587c:	103ee83a 	callr	r2
    5880:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5884:	00801444 	movi	r2,81
    5888:	18800015 	stw	r2,0(r3)
    588c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5890:	8005883a 	mov	r2,r16
    5894:	dfc00117 	ldw	ra,4(sp)
    5898:	dc000017 	ldw	r16,0(sp)
    589c:	dec00204 	addi	sp,sp,8
    58a0:	f800283a 	ret
    58a4:	000039dc 	xori	zero,zero,231
