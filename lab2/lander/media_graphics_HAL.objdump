
C:/ece5760/lab2/lander/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/ece5760/lab2/lander/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005858 memsz 0x00005858 flags r-x
    LOAD off    0x00006878 vaddr 0x00005878 paddr 0x000075ac align 2**12
         filesz 0x00001d34 memsz 0x00001d34 flags rw-
    LOAD off    0x000092e0 vaddr 0x000092e0 paddr 0x000092e0 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054ac  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000264  00005614  00005614  00006614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d34  00005878  000075ac  00006878  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  000092e0  000092e0  000092e0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000085ac  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  000085d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001419  00000000  00000000  00008ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001839a  00000000  00000000  0000a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000574e  00000000  00000000  0002267b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d06f  00000000  00000000  00027dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001210  00000000  00000000  00034e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002996  00000000  00000000  00036048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005611  00000000  00000000  000389de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003dff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003e010  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00041054  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00041057  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0004105a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0004105b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0004105f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00041063  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00041067  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00041070  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00041079  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00041082  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00005614 l    d  .rodata	00000000 .rodata
00005878 l    d  .rwdata	00000000 .rwdata
000092e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005878 l     O .rwdata	00001060 JTAG_UART
000068d8 l     O .rwdata	00000030 AV_Config
00006908 l     O .rwdata	00000030 Audio
00006938 l     O .rwdata	0000002c Char_LCD_16x2
00006964 l     O .rwdata	0000002c Expansion_JP1
00006990 l     O .rwdata	0000002c Expansion_JP2
000069bc l     O .rwdata	0000002c Green_LEDs
000069e8 l     O .rwdata	0000002c HEX3_HEX0
00006a14 l     O .rwdata	0000002c HEX7_HEX4
00006a40 l     O .rwdata	0000002c Pushbuttons
00006a6c l     O .rwdata	0000002c Red_LEDs
00006a98 l     O .rwdata	0000002c Slider_Switches
00006ac4 l     O .rwdata	00000038 PS2_Port
00006afc l     O .rwdata	0000002c Serial_Port
00006b28 l     O .rwdata	00000048 VGA_Char_Buffer
00006b70 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000e30 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000efc l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000013cc l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000029ac l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002ab4 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006d6c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003748 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003b2c l     F .text	00000058 std
00003c38 l     F .text	00000008 __fp_lock
00003c40 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000075a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000050bc g     F .text	00000070 _isatty_r
00000840 g     F .text	00000050 alt_main
00002030 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00009330 g     O .bss	00000100 alt_irq
00001a68 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
0000512c g     F .text	00000078 _lseek_r
000075ac g       *ABS*	00000000 __flash_rwdata_start
000014cc g     F .text	00000010 alt_up_character_lcd_send_cmd
00009430 g       *ABS*	00000000 __alt_heap_start
000001a4 g     F .text	000000d8 draw_landscape
00004cf8 g     F .text	00000068 __sseek
00003b94 g     F .text	000000a4 __sinit
000034c0 g     F .text	00000130 __swbuf_r
00001c70 g     F .text	00000088 alt_up_char_buffer_string
00001728 g     F .text	0000000c read_CE_bit
00003c94 g     F .text	00000068 __sfmoreglue
000053d0 g     F .text	00000004 __malloc_unlock
000017f8 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001b14 g     F .text	00000080 alt_up_rs232_read_fd
00001cf8 g     F .text	00000058 alt_up_char_buffer_draw
00003c84 g     F .text	00000010 _cleanup
00002724 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00001408 g     F .text	0000001c get_DDRAM_addr
00002818 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005048 g     F .text	00000074 _fstat_r
000092f8 g     O .bss	00000004 errno
000092e4 g     O .bss	00000004 alt_argv
0000f574 g       *ABS*	00000000 _gp
000027f0 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00006bec g     O .rwdata	00000180 alt_fd_list
00002a24 g     F .text	00000070 alt_find_dev
00003104 g     F .text	000000a0 memcpy
0000149c g     F .text	00000020 alt_up_character_lcd_write_fd
00001d50 g     F .text	00000028 alt_up_char_buffer_clear
00003c78 g     F .text	0000000c _cleanup_r
00002b18 g     F .text	00000098 alt_io_redirect
00001ac8 g     F .text	0000004c alt_up_rs232_read_data
00002eec g     F .text	00000008 altera_nios2_irq_init
000027e0 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
000010a4 g     F .text	00000168 altera_avalon_jtag_uart_read
000052b0 g     F .text	00000084 isatty
000021c4 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
0000301c g     F .text	0000003c alt_icache_flush
000092fc g     O .bss	00000004 __malloc_top_pad
00004c80 g     F .text	00000070 _sbrk_r
00001de8 g     F .text	0000005c helper_plot_pixel
000051a4 g     F .text	00000078 _read_r
00007584 g     O .rwdata	00000004 alt_max_fd
00001a9c g     F .text	0000000c alt_up_rs232_check_parity
00004f24 g     F .text	00000110 _fclose_r
00001734 g     F .text	00000008 read_num_bytes_available
00003af8 g     F .text	00000034 fflush
00009300 g     O .bss	00000004 __malloc_max_sbrked_mem
00002bb0 g     F .text	000000bc alt_irq_register
00001714 g     F .text	0000000c read_RI_bit
0000264c g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00005334 g     F .text	00000098 lseek
0000759c g     O .rwdata	00000004 _global_impure_ptr
00009430 g       *ABS*	00000000 __bss_end
00002408 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00002e40 g     F .text	000000ac alt_tick
00001748 g     F .text	00000008 read_data_byte
00003c60 g     F .text	00000018 __fp_lock_all
00002e0c g     F .text	00000034 alt_alarm_stop
00001720 g     F .text	00000008 read_RE_bit
000092ec g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006bc4 g     O .rwdata	00000028 alt_dev_null
000014dc g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
000018fc g     F .text	00000040 alt_up_ps2_write_data_byte
000029a8 g     F .text	00000004 alt_dcache_flush_all
00002338 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
000075ac g       *ABS*	00000000 __ram_rwdata_end
0000757c g     O .rwdata	00000008 alt_dev_list
0000551c g     F .text	000000f4 write
000032a8 g     F .text	000000e8 _putc_r
00001e44 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
00005878 g       *ABS*	00000000 __ram_rodata_end
00005230 g     F .text	00000080 fstat
00001bbc g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00009430 g       *ABS*	00000000 end
0000193c g     F .text	00000070 alt_up_ps2_write_fd
00001d98 g     F .text	00000050 alt_up_char_buffer_init
00000e84 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
00001388 g     F .text	00000044 alt_avalon_timer_sc_init
0000120c g     F .text	0000017c altera_avalon_jtag_uart_write
00003b84 g     F .text	00000004 __sfp_lock_acquire
00001470 g     F .text	0000002c alt_up_character_lcd_write
00003f18 g     F .text	00000314 _free_r
00000890 g     F .text	000001dc alt_printf
0000374c g     F .text	000001b0 __call_exitprocs
000075a4 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
000092f0 g     O .bss	00000004 _alt_tick_rate
000092f4 g     O .bss	00000004 _alt_nticks
000053d4 g     F .text	000000f8 read
00000ab4 g     F .text	000002ac alt_sys_init
00001580 g     F .text	00000090 alt_up_character_lcd_shift_display
00001770 g     F .text	00000030 alt_up_ps2_clear_fifo
00001b94 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00001514 g     F .text	0000006c alt_up_character_lcd_erase_pos
00000df8 g     F .text	00000038 altera_avalon_jtag_uart_close
00005878 g       *ABS*	00000000 __ram_rwdata_start
00005614 g       *ABS*	00000000 __ram_rodata_start
00009308 g     O .bss	00000028 __malloc_current_mallinfo
00000dd0 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00002fb0 g     F .text	0000006c alt_get_fd
00004eb4 g     F .text	00000070 _close_r
00003090 g     F .text	00000074 memcmp
00000d80 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00009430 g       *ABS*	00000000 __alt_stack_base
00000d60 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000360c g     F .text	0000013c __swsetup_r
00003cfc g     F .text	000000f0 __sfp
0000716c g     O .rwdata	00000408 __malloc_av_
00003b90 g     F .text	00000004 __sinit_lock_release
00004ddc g     F .text	00000060 __sread
00001c2c g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00002ef4 g     F .text	000000bc alt_find_file
000029b4 g     F .text	00000070 alt_dev_llist_insert
000053cc g     F .text	00000004 __malloc_lock
000054cc g     F .text	00000050 sbrk
000038fc g     F .text	000001fc _fflush_r
000092e0 g       *ABS*	00000000 __bss_start
000006e4 g     F .text	00000098 memset
0000027c g     F .text	00000468 main
000092e8 g     O .bss	00000004 alt_envp
00009304 g     O .bss	00000004 __malloc_max_total_mem
00002700 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001d78 g     F .text	00000020 alt_up_char_buffer_open_dev
00000da8 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000035f0 g     F .text	0000001c __swbuf
00001610 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00004cf0 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00005034 g     F .text	00000014 fclose
000017a0 g     F .text	00000058 alt_up_ps2_read_data_byte
00004540 g     F .text	00000740 _malloc_r
00007588 g     O .rwdata	00000004 alt_errno
000042f4 g     F .text	000000b8 _fwalk
00001750 g     F .text	00000020 alt_up_ps2_open_dev
000031a4 g     F .text	00000104 putc
000016f4 g     F .text	00000020 alt_up_character_lcd_open_dev
00003dec g     F .text	0000012c _malloc_trim_r
00001a84 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
000014bc g     F .text	00000010 alt_up_character_lcd_init
00003390 g     F .text	000000bc strcmp
00005614 g       *ABS*	00000000 __flash_rodata_start
00001aa8 g     F .text	00000020 alt_up_rs232_open_dev
00000a94 g     F .text	00000020 alt_irq_init
00002de8 g     F .text	00000024 alt_release_fd
0000173c g     F .text	0000000c read_data_valid
000014f8 g     F .text	0000001c alt_up_character_lcd_cursor_off
000019ac g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004e3c g     F .text	00000078 _write_r
00007598 g     O .rwdata	00000004 _impure_ptr
000092e0 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003c48 g     F .text	00000018 __fp_unlock_all
00007574 g     O .rwdata	00000008 alt_fs_list
00001c48 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001ba4 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000075ac g       *ABS*	00000000 _edata
00009430 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00001030 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004d60 g     F .text	0000007c __swrite
000075a0 g     O .rwdata	00000004 __malloc_trim_threshold
00003058 g     F .text	00000038 exit
0000422c g     F .text	000000c8 _fwalk_reent
000019e0 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003b88 g     F .text	00000004 __sfp_lock_release
00001424 g     F .text	0000004c alt_up_character_lcd_string
0000521c g     F .text	00000014 _exit
00002838 g     F .text	00000094 alt_alarm_start
000043ac g     F .text	00000194 __smakebuf_r
000018a0 g     F .text	0000005c alt_up_ps2_wait_for_ack
0000344c g     F .text	00000074 strlen
00002c6c g     F .text	0000017c open
00000a6c g     F .text	00000028 alt_putchar
00002a94 g     F .text	00000020 alt_icache_flush_all
000016a0 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
0000758c g     O .rwdata	00000004 alt_priority_mask
00001878 g     F .text	00000028 alt_up_ps2_read_fd
00007590 g     O .rwdata	00000008 alt_alarm_list
00001c60 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000028cc g     F .text	000000dc close
0000077c g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
00003b8c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8424cc04 	addi	r16,r16,-27856
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bd5d14 	ori	gp,gp,62836
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a4b814 	ori	r2,r2,37600

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e50c14 	ori	r3,r3,37936

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000077c0 	call	77c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00008400 	call	840 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <draw_landscape>:
	}
}

/* draws a landscape */
void draw_landscape(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1a4:	defff604 	addi	sp,sp,-40
     1a8:	dfc00915 	stw	ra,36(sp)
     1ac:	dd400815 	stw	r21,32(sp)
     1b0:	dd000715 	stw	r20,28(sp)
     1b4:	dcc00615 	stw	r19,24(sp)
     1b8:	dc800515 	stw	r18,20(sp)
     1bc:	dc400415 	stw	r17,16(sp)
     1c0:	dc000315 	stw	r16,12(sp)
     1c4:	2027883a 	mov	r19,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 4, 200, 150, 200, 0xffff, 0);
     1c8:	04003204 	movi	r16,200
     1cc:	04402584 	movi	r17,150
     1d0:	dc000015 	stw	r16,0(sp)
     1d4:	04bfffd4 	movui	r18,65535
     1d8:	dc800115 	stw	r18,4(sp)
     1dc:	d8000215 	stw	zero,8(sp)
     1e0:	01400104 	movi	r5,4
     1e4:	800d883a 	mov	r6,r16
     1e8:	880f883a 	mov	r7,r17
     1ec:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 150, 200, 220, 150, 0xffff, 0);
     1f0:	05403704 	movi	r21,220
     1f4:	dc400015 	stw	r17,0(sp)
     1f8:	dc800115 	stw	r18,4(sp)
     1fc:	d8000215 	stw	zero,8(sp)
     200:	9809883a 	mov	r4,r19
     204:	880b883a 	mov	r5,r17
     208:	800d883a 	mov	r6,r16
     20c:	a80f883a 	mov	r7,r21
     210:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 220, 150, 260, 200, 0xffff, 0);
     214:	05004104 	movi	r20,260
     218:	dc000015 	stw	r16,0(sp)
     21c:	dc800115 	stw	r18,4(sp)
     220:	d8000215 	stw	zero,8(sp)
     224:	9809883a 	mov	r4,r19
     228:	a80b883a 	mov	r5,r21
     22c:	880d883a 	mov	r6,r17
     230:	a00f883a 	mov	r7,r20
     234:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 260, 200, 310, 200, 0xffff, 0);
     238:	dc000015 	stw	r16,0(sp)
     23c:	dc800115 	stw	r18,4(sp)
     240:	d8000215 	stw	zero,8(sp)
     244:	9809883a 	mov	r4,r19
     248:	a00b883a 	mov	r5,r20
     24c:	800d883a 	mov	r6,r16
     250:	01c04d84 	movi	r7,310
     254:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>

}
     258:	dfc00917 	ldw	ra,36(sp)
     25c:	dd400817 	ldw	r21,32(sp)
     260:	dd000717 	ldw	r20,28(sp)
     264:	dcc00617 	ldw	r19,24(sp)
     268:	dc800517 	ldw	r18,20(sp)
     26c:	dc400417 	ldw	r17,16(sp)
     270:	dc000317 	ldw	r16,12(sp)
     274:	dec00a04 	addi	sp,sp,40
     278:	f800283a 	ret

0000027c <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     27c:	deffde04 	addi	sp,sp,-136
     280:	dfc02115 	stw	ra,132(sp)
     284:	df002015 	stw	fp,128(sp)
     288:	ddc01f15 	stw	r23,124(sp)
     28c:	dd801e15 	stw	r22,120(sp)
     290:	dd401d15 	stw	r21,116(sp)
     294:	dd001c15 	stw	r20,112(sp)
     298:	dcc01b15 	stw	r19,108(sp)
     29c:	dc801a15 	stw	r18,104(sp)
     2a0:	dc401915 	stw	r17,100(sp)
     2a4:	dc001815 	stw	r16,96(sp)

	/* used for drawing coordinates */
	int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;

	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "ECE5760\0";
     2a8:	00c00034 	movhi	r3,0
     2ac:	18d5bc04 	addi	r3,r3,22256
     2b0:	18800017 	ldw	r2,0(r3)
     2b4:	d8800315 	stw	r2,12(sp)
     2b8:	18800117 	ldw	r2,4(r3)
     2bc:	d8800415 	stw	r2,16(sp)
     2c0:	18800203 	ldbu	r2,8(r3)
     2c4:	d8800505 	stb	r2,20(sp)
     2c8:	d9000544 	addi	r4,sp,21
     2cc:	000b883a 	mov	r5,zero
     2d0:	018007c4 	movi	r6,31
     2d4:	00006e40 	call	6e4 <memset>
	char text_bottom_row[40] = "Bruce is cool.\0";
     2d8:	00c00034 	movhi	r3,0
     2dc:	18d5c604 	addi	r3,r3,22296
     2e0:	18800017 	ldw	r2,0(r3)
     2e4:	d8800d15 	stw	r2,52(sp)
     2e8:	18800117 	ldw	r2,4(r3)
     2ec:	d8800e15 	stw	r2,56(sp)
     2f0:	18800217 	ldw	r2,8(r3)
     2f4:	d8800f15 	stw	r2,60(sp)
     2f8:	18800317 	ldw	r2,12(r3)
     2fc:	d8801015 	stw	r2,64(sp)
     300:	d8001115 	stw	zero,68(sp)
     304:	d8001215 	stw	zero,72(sp)
     308:	d8001315 	stw	zero,76(sp)
     30c:	d8001415 	stw	zero,80(sp)
     310:	d8001515 	stw	zero,84(sp)
     314:	d8001615 	stw	zero,88(sp)

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     318:	01000034 	movhi	r4,0
     31c:	21158504 	addi	r4,r4,22036
     320:	00028180 	call	2818 <alt_up_pixel_buffer_dma_open_dev>
     324:	1027883a 	mov	r19,r2
	if ( pixel_buffer_dev == NULL)
     328:	1000041e 	bne	r2,zero,33c <main+0xc0>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     32c:	01000034 	movhi	r4,0
     330:	21158b04 	addi	r4,r4,22060
     334:	00008900 	call	890 <alt_printf>
     338:	00000306 	br	348 <main+0xcc>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     33c:	01000034 	movhi	r4,0
     340:	21159704 	addi	r4,r4,22108
     344:	00008900 	call	890 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     348:	9809883a 	mov	r4,r19
     34c:	000b883a 	mov	r5,zero
     350:	000264c0 	call	264c <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     354:	01000034 	movhi	r4,0
     358:	2115a204 	addi	r4,r4,22152
     35c:	0001d780 	call	1d78 <alt_up_char_buffer_open_dev>
     360:	1023883a 	mov	r17,r2
	if (char_buffer_dev == NULL)
     364:	1000cf26 	beq	r2,zero,6a4 <main+0x428>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     368:	01000034 	movhi	r4,0
     36c:	2115b404 	addi	r4,r4,22224
     370:	00008900 	call	890 <alt_printf>
	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
     374:	040008c4 	movi	r16,35
     378:	8809883a 	mov	r4,r17
     37c:	d9400304 	addi	r5,sp,12
     380:	800d883a 	mov	r6,r16
     384:	01c00744 	movi	r7,29
     388:	0001c700 	call	1c70 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
     38c:	8809883a 	mov	r4,r17
     390:	d9400d04 	addi	r5,sp,52
     394:	800d883a 	mov	r6,r16
     398:	01c00784 	movi	r7,30
     39c:	0001c700 	call	1c70 <alt_up_char_buffer_string>

	/* now draw a background box for the text */
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     3a0:	00802004 	movi	r2,128
     3a4:	d8800015 	stw	r2,0(sp)
     3a8:	00861fc4 	movi	r2,6271
     3ac:	d8800115 	stw	r2,4(sp)
     3b0:	d8000215 	stw	zero,8(sp)
     3b4:	9809883a 	mov	r4,r19
     3b8:	01402204 	movi	r5,136
     3bc:	01801c04 	movi	r6,112
     3c0:	01c03204 	movi	r7,200
     3c4:	00024080 	call	2408 <alt_up_pixel_buffer_dma_draw_box>

	/* now draw the landscape */
	draw_landscape (pixel_buffer_dev);
     3c8:	9809883a 	mov	r4,r19
     3cc:	00001a40 	call	1a4 <draw_landscape>

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
	x2 = 50; y2 = 50;
	alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     3d0:	04000504 	movi	r16,20
     3d4:	04400c84 	movi	r17,50
     3d8:	dc400015 	stw	r17,0(sp)
     3dc:	00be0014 	movui	r2,63488
     3e0:	d8800115 	stw	r2,4(sp)
     3e4:	d8000215 	stw	zero,8(sp)
     3e8:	9809883a 	mov	r4,r19
     3ec:	800b883a 	mov	r5,r16
     3f0:	800d883a 	mov	r6,r16
     3f4:	880f883a 	mov	r7,r17
     3f8:	00023380 	call	2338 <alt_up_pixel_buffer_dma_draw_rectangle>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     3fc:	dc400015 	stw	r17,0(sp)
     400:	0481f804 	movi	r18,2016
     404:	dc800115 	stw	r18,4(sp)
     408:	d8000215 	stw	zero,8(sp)
     40c:	9809883a 	mov	r4,r19
     410:	800b883a 	mov	r5,r16
     414:	800d883a 	mov	r6,r16
     418:	880f883a 	mov	r7,r17
     41c:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     420:	dc000015 	stw	r16,0(sp)
     424:	dc800115 	stw	r18,4(sp)
     428:	d8000215 	stw	zero,8(sp)
     42c:	9809883a 	mov	r4,r19
     430:	800b883a 	mov	r5,r16
     434:	880d883a 	mov	r6,r17
     438:	880f883a 	mov	r7,r17
     43c:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     440:	9809883a 	mov	r4,r19
     444:	00027000 	call	2700 <alt_up_pixel_buffer_dma_swap_buffers>
     448:	8029883a 	mov	r20,r16
     44c:	8825883a 	mov	r18,r17
     450:	07000044 	movi	fp,1
     454:	df001715 	stw	fp,92(sp)
     458:	e02f883a 	mov	r23,fp
     45c:	e02d883a 	mov	r22,fp
     460:	002b883a 	mov	r21,zero
	while(1)
	{
	
	int * green_leds = (int *) GREEN_LEDS_BASE; /* red_leds is a pointer to the LEDRs */
	int * pushbuttons = (int *) PUSHBUTTONS_BASE; /* points to pushbuttons */
	*(green_leds) = *(pushbuttons); /* Green LEDG[k] is set equal to PB[k] */
     464:	00840034 	movhi	r2,4096
     468:	10801404 	addi	r2,r2,80
     46c:	10c00017 	ldw	r3,0(r2)
     470:	10bff004 	addi	r2,r2,-64
     474:	10c00015 	stw	r3,0(r2)

	
	
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     478:	9809883a 	mov	r4,r19
     47c:	00027e00 	call	27e0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     480:	103ff81e 	bne	r2,zero,464 <main+0x1e8>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     484:	00800044 	movi	r2,1
     488:	156bc83a 	sub	r21,r2,r21

			if (delay == 0)
     48c:	a800821e 	bne	r21,zero,698 <main+0x41c>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     490:	dc800015 	stw	r18,0(sp)
     494:	d8000115 	stw	zero,4(sp)
     498:	d8000215 	stw	zero,8(sp)
     49c:	9809883a 	mov	r4,r19
     4a0:	a00b883a 	mov	r5,r20
     4a4:	800d883a 	mov	r6,r16
     4a8:	880f883a 	mov	r7,r17
     4ac:	00023380 	call	2338 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     4b0:	dc800015 	stw	r18,0(sp)
     4b4:	d8000115 	stw	zero,4(sp)
     4b8:	d8000215 	stw	zero,8(sp)
     4bc:	9809883a 	mov	r4,r19
     4c0:	a00b883a 	mov	r5,r20
     4c4:	800d883a 	mov	r6,r16
     4c8:	880f883a 	mov	r7,r17
     4cc:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);
     4d0:	dc000015 	stw	r16,0(sp)
     4d4:	d8000115 	stw	zero,4(sp)
     4d8:	d8000215 	stw	zero,8(sp)
     4dc:	9809883a 	mov	r4,r19
     4e0:	a00b883a 	mov	r5,r20
     4e4:	900d883a 	mov	r6,r18
     4e8:	880f883a 	mov	r7,r17
     4ec:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>

				//Right Thruster
				if ((*pushbuttons) & 0x02)
     4f0:	00c40034 	movhi	r3,4096
     4f4:	18c01404 	addi	r3,r3,80
     4f8:	18800017 	ldw	r2,0(r3)
     4fc:	1080008c 	andi	r2,r2,2
     500:	10000a26 	beq	r2,zero,52c <main+0x2b0>
				{
					alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, 50, 50, 0x187F, 0);
     504:	00800c84 	movi	r2,50
     508:	d8800015 	stw	r2,0(sp)
     50c:	00861fc4 	movi	r2,6271
     510:	d8800115 	stw	r2,4(sp)
     514:	d8000215 	stw	zero,8(sp)
     518:	9809883a 	mov	r4,r19
     51c:	000b883a 	mov	r5,zero
     520:	000d883a 	mov	r6,zero
     524:	01c00c84 	movi	r7,50
     528:	00024080 	call	2408 <alt_up_pixel_buffer_dma_draw_box>
				}
				
				// move the rectangle
				x1 = x1 + deltax_1;
     52c:	d8c01717 	ldw	r3,92(sp)
     530:	a0e9883a 	add	r20,r20,r3
				x2 = x2 + deltax_2;
     534:	8f23883a 	add	r17,r17,fp
				y1 = y1 + deltay_1;
     538:	85a1883a 	add	r16,r16,r22
				y2 = y2 + deltay_2;
     53c:	95e5883a 	add	r18,r18,r23
				if ((deltax_1 > 0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     540:	00c0070e 	bge	zero,r3,560 <main+0x2e4>
     544:	98800f17 	ldw	r2,60(r19)
     548:	10bfffc4 	addi	r2,r2,-1
     54c:	a0800a36 	bltu	r20,r2,578 <main+0x2fc>
				{
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     550:	1029883a 	mov	r20,r2
					deltax_1 = -deltax_1;
     554:	00c7c83a 	sub	r3,zero,r3
     558:	d8c01715 	stw	r3,92(sp)
     55c:	00000606 	br	578 <main+0x2fc>
				}
				else if ((deltax_1 < 0) && (x1 <= 0))
     560:	d8801717 	ldw	r2,92(sp)
     564:	1000040e 	bge	r2,zero,578 <main+0x2fc>
     568:	05000316 	blt	zero,r20,578 <main+0x2fc>
				{
					x1 = 0;
					deltax_1 = -deltax_1;
     56c:	0085c83a 	sub	r2,zero,r2
     570:	d8801715 	stw	r2,92(sp)
     574:	0029883a 	mov	r20,zero
				}
				if ((deltax_2 > 0) && (x2 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     578:	0700060e 	bge	zero,fp,594 <main+0x318>
     57c:	98800f17 	ldw	r2,60(r19)
     580:	10bfffc4 	addi	r2,r2,-1
     584:	88800736 	bltu	r17,r2,5a4 <main+0x328>
				{
					x2 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     588:	1023883a 	mov	r17,r2
					deltax_2 = -deltax_2;
     58c:	0739c83a 	sub	fp,zero,fp
     590:	00000406 	br	5a4 <main+0x328>
				}
				else if ((deltax_2 < 0) && (x2 <= 0))
     594:	e000030e 	bge	fp,zero,5a4 <main+0x328>
     598:	04400216 	blt	zero,r17,5a4 <main+0x328>
				{
					x2 = 0;
					deltax_2 = -deltax_2;
     59c:	0739c83a 	sub	fp,zero,fp
     5a0:	0023883a 	mov	r17,zero
				}
				if ((deltay_1 > 0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     5a4:	0580060e 	bge	zero,r22,5c0 <main+0x344>
     5a8:	98801017 	ldw	r2,64(r19)
     5ac:	10bfffc4 	addi	r2,r2,-1
     5b0:	80800736 	bltu	r16,r2,5d0 <main+0x354>
				{
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     5b4:	1021883a 	mov	r16,r2
					deltay_1 = -deltay_1;
     5b8:	05adc83a 	sub	r22,zero,r22
     5bc:	00000406 	br	5d0 <main+0x354>
				}
				else if ((deltay_1 < 0) && (y1 <= 0))
     5c0:	b000030e 	bge	r22,zero,5d0 <main+0x354>
     5c4:	04000216 	blt	zero,r16,5d0 <main+0x354>
				{
					y1 = 0;
					deltay_1 = -deltay_1;
     5c8:	05adc83a 	sub	r22,zero,r22
     5cc:	0021883a 	mov	r16,zero
				}
				if ((deltay_2 > 0) && (y2 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     5d0:	05c0060e 	bge	zero,r23,5ec <main+0x370>
     5d4:	98801017 	ldw	r2,64(r19)
     5d8:	10bfffc4 	addi	r2,r2,-1
     5dc:	90800736 	bltu	r18,r2,5fc <main+0x380>
				{
					y2 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     5e0:	1025883a 	mov	r18,r2
					deltay_2 = -deltay_2;
     5e4:	05efc83a 	sub	r23,zero,r23
     5e8:	00000406 	br	5fc <main+0x380>
				}
				else if ((deltay_2 < 0) && (y2 <= 0))
     5ec:	b800030e 	bge	r23,zero,5fc <main+0x380>
     5f0:	04800216 	blt	zero,r18,5fc <main+0x380>
				{
					y2 = 0;
					deltay_2 = -deltay_2;
     5f4:	05efc83a 	sub	r23,zero,r23
     5f8:	0025883a 	mov	r18,zero
				}

				// redraw Rectangle with diagonal lines
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     5fc:	dc800015 	stw	r18,0(sp)
     600:	00be0014 	movui	r2,63488
     604:	d8800115 	stw	r2,4(sp)
     608:	d8000215 	stw	zero,8(sp)
     60c:	9809883a 	mov	r4,r19
     610:	a00b883a 	mov	r5,r20
     614:	800d883a 	mov	r6,r16
     618:	880f883a 	mov	r7,r17
     61c:	00023380 	call	2338 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     620:	dc800015 	stw	r18,0(sp)
     624:	00c1f804 	movi	r3,2016
     628:	d8c00115 	stw	r3,4(sp)
     62c:	d8000215 	stw	zero,8(sp)
     630:	9809883a 	mov	r4,r19
     634:	a00b883a 	mov	r5,r20
     638:	800d883a 	mov	r6,r16
     63c:	880f883a 	mov	r7,r17
     640:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     644:	dc000015 	stw	r16,0(sp)
     648:	0081f804 	movi	r2,2016
     64c:	d8800115 	stw	r2,4(sp)
     650:	d8000215 	stw	zero,8(sp)
     654:	9809883a 	mov	r4,r19
     658:	a00b883a 	mov	r5,r20
     65c:	900d883a 	mov	r6,r18
     660:	880f883a 	mov	r7,r17
     664:	0001e440 	call	1e44 <alt_up_pixel_buffer_dma_draw_line>

				// redraw the box in the foreground 
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     668:	00802004 	movi	r2,128
     66c:	d8800015 	stw	r2,0(sp)
     670:	00861fc4 	movi	r2,6271
     674:	d8800115 	stw	r2,4(sp)
     678:	d8000215 	stw	zero,8(sp)
     67c:	9809883a 	mov	r4,r19
     680:	01402204 	movi	r5,136
     684:	01801c04 	movi	r6,112
     688:	01c03204 	movi	r7,200
     68c:	00024080 	call	2408 <alt_up_pixel_buffer_dma_draw_box>

				draw_landscape (pixel_buffer_dev);
     690:	9809883a 	mov	r4,r19
     694:	00001a40 	call	1a4 <draw_landscape>
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     698:	9809883a 	mov	r4,r19
     69c:	00027000 	call	2700 <alt_up_pixel_buffer_dma_swap_buffers>
     6a0:	003f7006 	br	464 <main+0x1e8>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     6a4:	01000034 	movhi	r4,0
     6a8:	2115a804 	addi	r4,r4,22176
     6ac:	00008900 	call	890 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     6b0:	00bfffc4 	movi	r2,-1
     6b4:	dfc02117 	ldw	ra,132(sp)
     6b8:	df002017 	ldw	fp,128(sp)
     6bc:	ddc01f17 	ldw	r23,124(sp)
     6c0:	dd801e17 	ldw	r22,120(sp)
     6c4:	dd401d17 	ldw	r21,116(sp)
     6c8:	dd001c17 	ldw	r20,112(sp)
     6cc:	dcc01b17 	ldw	r19,108(sp)
     6d0:	dc801a17 	ldw	r18,104(sp)
     6d4:	dc401917 	ldw	r17,100(sp)
     6d8:	dc001817 	ldw	r16,96(sp)
     6dc:	dec02204 	addi	sp,sp,136
     6e0:	f800283a 	ret

000006e4 <memset>:
     6e4:	008000c4 	movi	r2,3
     6e8:	29403fcc 	andi	r5,r5,255
     6ec:	2007883a 	mov	r3,r4
     6f0:	1180022e 	bgeu	r2,r6,6fc <memset+0x18>
     6f4:	2084703a 	and	r2,r4,r2
     6f8:	10000826 	beq	r2,zero,71c <memset+0x38>
     6fc:	30000526 	beq	r6,zero,714 <memset+0x30>
     700:	2805883a 	mov	r2,r5
     704:	30cd883a 	add	r6,r6,r3
     708:	18800005 	stb	r2,0(r3)
     70c:	18c00044 	addi	r3,r3,1
     710:	19bffd1e 	bne	r3,r6,708 <memset+0x24>
     714:	2005883a 	mov	r2,r4
     718:	f800283a 	ret
     71c:	2804923a 	slli	r2,r5,8
     720:	020003c4 	movi	r8,15
     724:	200f883a 	mov	r7,r4
     728:	2884b03a 	or	r2,r5,r2
     72c:	1006943a 	slli	r3,r2,16
     730:	10c6b03a 	or	r3,r2,r3
     734:	41800a2e 	bgeu	r8,r6,760 <memset+0x7c>
     738:	4005883a 	mov	r2,r8
     73c:	31bffc04 	addi	r6,r6,-16
     740:	38c00015 	stw	r3,0(r7)
     744:	38c00115 	stw	r3,4(r7)
     748:	38c00215 	stw	r3,8(r7)
     74c:	38c00315 	stw	r3,12(r7)
     750:	39c00404 	addi	r7,r7,16
     754:	11bff936 	bltu	r2,r6,73c <memset+0x58>
     758:	008000c4 	movi	r2,3
     75c:	1180052e 	bgeu	r2,r6,774 <memset+0x90>
     760:	31bfff04 	addi	r6,r6,-4
     764:	008000c4 	movi	r2,3
     768:	38c00015 	stw	r3,0(r7)
     76c:	39c00104 	addi	r7,r7,4
     770:	11bffb36 	bltu	r2,r6,760 <memset+0x7c>
     774:	3807883a 	mov	r3,r7
     778:	003fe006 	br	6fc <memset+0x18>

0000077c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     77c:	deffff04 	addi	sp,sp,-4
     780:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     784:	01000034 	movhi	r4,0
     788:	211d6b04 	addi	r4,r4,30124
     78c:	00c00034 	movhi	r3,0
     790:	18d61e04 	addi	r3,r3,22648

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     794:	20c00926 	beq	r4,r3,7bc <alt_load+0x40>
     798:	01800034 	movhi	r6,0
     79c:	319d6b04 	addi	r6,r6,30124
  {
    while( to != end )
     7a0:	19800626 	beq	r3,r6,7bc <alt_load+0x40>
     7a4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     7a8:	20800017 	ldw	r2,0(r4)
     7ac:	18800015 	stw	r2,0(r3)
     7b0:	1947883a 	add	r3,r3,r5
     7b4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     7b8:	30fffb1e 	bne	r6,r3,7a8 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     7bc:	01000034 	movhi	r4,0
     7c0:	21000804 	addi	r4,r4,32
     7c4:	00c00034 	movhi	r3,0
     7c8:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     7cc:	20c00926 	beq	r4,r3,7f4 <alt_load+0x78>
     7d0:	01800034 	movhi	r6,0
     7d4:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     7d8:	19800626 	beq	r3,r6,7f4 <alt_load+0x78>
     7dc:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     7e0:	20800017 	ldw	r2,0(r4)
     7e4:	18800015 	stw	r2,0(r3)
     7e8:	1947883a 	add	r3,r3,r5
     7ec:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     7f0:	30fffb1e 	bne	r6,r3,7e0 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     7f4:	01000034 	movhi	r4,0
     7f8:	21158504 	addi	r4,r4,22036
     7fc:	00c00034 	movhi	r3,0
     800:	18d58504 	addi	r3,r3,22036

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     804:	20c00926 	beq	r4,r3,82c <alt_load+0xb0>
     808:	01800034 	movhi	r6,0
     80c:	31961e04 	addi	r6,r6,22648
  {
    while( to != end )
     810:	19800626 	beq	r3,r6,82c <alt_load+0xb0>
     814:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     818:	20800017 	ldw	r2,0(r4)
     81c:	18800015 	stw	r2,0(r3)
     820:	1947883a 	add	r3,r3,r5
     824:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     828:	30fffb1e 	bne	r6,r3,818 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     82c:	00029a80 	call	29a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     830:	0002a940 	call	2a94 <alt_icache_flush_all>
}
     834:	dfc00017 	ldw	ra,0(sp)
     838:	dec00104 	addi	sp,sp,4
     83c:	f800283a 	ret

00000840 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     840:	defffe04 	addi	sp,sp,-8
     844:	dfc00115 	stw	ra,4(sp)
     848:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     84c:	0009883a 	mov	r4,zero
     850:	0000a940 	call	a94 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     854:	0000ab40 	call	ab4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     858:	01800034 	movhi	r6,0
     85c:	3195d004 	addi	r6,r6,22336
     860:	3009883a 	mov	r4,r6
     864:	300b883a 	mov	r5,r6
     868:	0002b180 	call	2b18 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     86c:	d1275b17 	ldw	r4,-25236(gp)
     870:	d1675c17 	ldw	r5,-25232(gp)
     874:	d1a75d17 	ldw	r6,-25228(gp)
     878:	000027c0 	call	27c <main>
     87c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     880:	01000044 	movi	r4,1
     884:	00028cc0 	call	28cc <close>
  exit (result);
     888:	8009883a 	mov	r4,r16
     88c:	00030580 	call	3058 <exit>

00000890 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     890:	defff804 	addi	sp,sp,-32
     894:	dfc00415 	stw	ra,16(sp)
     898:	dc800315 	stw	r18,12(sp)
     89c:	dc400215 	stw	r17,8(sp)
     8a0:	dc000115 	stw	r16,4(sp)
     8a4:	d9400515 	stw	r5,20(sp)
     8a8:	d9800615 	stw	r6,24(sp)
     8ac:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     8b0:	d8800504 	addi	r2,sp,20
     8b4:	d8800015 	stw	r2,0(sp)
     8b8:	2023883a 	mov	r17,r4
     8bc:	00005d06 	br	a34 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     8c0:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     8c4:	21003fcc 	andi	r4,r4,255
     8c8:	2100201c 	xori	r4,r4,128
     8cc:	213fe004 	addi	r4,r4,-128
     8d0:	00800944 	movi	r2,37
     8d4:	20800226 	beq	r4,r2,8e0 <alt_printf+0x50>
        {
            alt_putchar(c);
     8d8:	0000a6c0 	call	a6c <alt_putchar>
     8dc:	00005506 	br	a34 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     8e0:	89400003 	ldbu	r5,0(r17)
     8e4:	8c400044 	addi	r17,r17,1
     8e8:	29003fcc 	andi	r4,r5,255
     8ec:	2100201c 	xori	r4,r4,128
     8f0:	213fe004 	addi	r4,r4,-128
     8f4:	20005726 	beq	r4,zero,a54 <alt_printf+0x1c4>
            {
                if (c == '%')
     8f8:	00800944 	movi	r2,37
     8fc:	2080021e 	bne	r4,r2,908 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     900:	0000a6c0 	call	a6c <alt_putchar>
     904:	00004b06 	br	a34 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     908:	28c03fcc 	andi	r3,r5,255
     90c:	18c0201c 	xori	r3,r3,128
     910:	18ffe004 	addi	r3,r3,-128
     914:	008018c4 	movi	r2,99
     918:	1880061e 	bne	r3,r2,934 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     91c:	d8c00017 	ldw	r3,0(sp)
     920:	18800104 	addi	r2,r3,4
     924:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     928:	19000017 	ldw	r4,0(r3)
     92c:	0000a6c0 	call	a6c <alt_putchar>
     930:	00004006 	br	a34 <alt_printf+0x1a4>
                }
                else if (c == 'x')
     934:	28c03fcc 	andi	r3,r5,255
     938:	18c0201c 	xori	r3,r3,128
     93c:	18ffe004 	addi	r3,r3,-128
     940:	00801e04 	movi	r2,120
     944:	1880231e 	bne	r3,r2,9d4 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     948:	d8c00017 	ldw	r3,0(sp)
     94c:	18800104 	addi	r2,r3,4
     950:	d8800015 	stw	r2,0(sp)
     954:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     958:	90000326 	beq	r18,zero,968 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     95c:	90bc002c 	andhi	r2,r18,61440
     960:	10000426 	beq	r2,zero,974 <alt_printf+0xe4>
     964:	00003906 	br	a4c <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     968:	01000c04 	movi	r4,48
     96c:	0000a6c0 	call	a6c <alt_putchar>
     970:	00003006 	br	a34 <alt_printf+0x1a4>
                        continue;
     974:	04000704 	movi	r16,28
     978:	013fff04 	movi	r4,-4
     97c:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     980:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     984:	1c04983a 	sll	r2,r3,r16
     988:	9084703a 	and	r2,r18,r2
     98c:	103ffc26 	beq	r2,zero,980 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     990:	80002816 	blt	r16,zero,a34 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     994:	008003c4 	movi	r2,15
     998:	1404983a 	sll	r2,r2,r16
     99c:	9084703a 	and	r2,r18,r2
     9a0:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     9a4:	00800244 	movi	r2,9
     9a8:	10c00236 	bltu	r2,r3,9b4 <alt_printf+0x124>
                            c = '0' + digit;
     9ac:	19000c04 	addi	r4,r3,48
     9b0:	00000106 	br	9b8 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     9b4:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     9b8:	21003fcc 	andi	r4,r4,255
     9bc:	2100201c 	xori	r4,r4,128
     9c0:	213fe004 	addi	r4,r4,-128
     9c4:	0000a6c0 	call	a6c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     9c8:	843fff04 	addi	r16,r16,-4
     9cc:	80001916 	blt	r16,zero,a34 <alt_printf+0x1a4>
     9d0:	003ff006 	br	994 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     9d4:	28c03fcc 	andi	r3,r5,255
     9d8:	18c0201c 	xori	r3,r3,128
     9dc:	18ffe004 	addi	r3,r3,-128
     9e0:	00801cc4 	movi	r2,115
     9e4:	1880131e 	bne	r3,r2,a34 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     9e8:	d8800017 	ldw	r2,0(sp)
     9ec:	10c00104 	addi	r3,r2,4
     9f0:	d8c00015 	stw	r3,0(sp)
     9f4:	14000017 	ldw	r16,0(r2)

                    while(*s)
     9f8:	81000003 	ldbu	r4,0(r16)
     9fc:	20803fcc 	andi	r2,r4,255
     a00:	1080201c 	xori	r2,r2,128
     a04:	10bfe004 	addi	r2,r2,-128
     a08:	10000a26 	beq	r2,zero,a34 <alt_printf+0x1a4>
                      alt_putchar(*s++);
     a0c:	84000044 	addi	r16,r16,1
     a10:	21003fcc 	andi	r4,r4,255
     a14:	2100201c 	xori	r4,r4,128
     a18:	213fe004 	addi	r4,r4,-128
     a1c:	0000a6c0 	call	a6c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     a20:	81000003 	ldbu	r4,0(r16)
     a24:	20803fcc 	andi	r2,r4,255
     a28:	1080201c 	xori	r2,r2,128
     a2c:	10bfe004 	addi	r2,r2,-128
     a30:	103ff61e 	bne	r2,zero,a0c <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     a34:	89000003 	ldbu	r4,0(r17)
     a38:	20803fcc 	andi	r2,r4,255
     a3c:	1080201c 	xori	r2,r2,128
     a40:	10bfe004 	addi	r2,r2,-128
     a44:	103f9e1e 	bne	r2,zero,8c0 <alt_printf+0x30>
     a48:	00000206 	br	a54 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     a4c:	04000704 	movi	r16,28
     a50:	003fd006 	br	994 <alt_printf+0x104>
     a54:	dfc00417 	ldw	ra,16(sp)
     a58:	dc800317 	ldw	r18,12(sp)
     a5c:	dc400217 	ldw	r17,8(sp)
     a60:	dc000117 	ldw	r16,4(sp)
     a64:	dec00804 	addi	sp,sp,32
     a68:	f800283a 	ret

00000a6c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     a6c:	deffff04 	addi	sp,sp,-4
     a70:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     a74:	00800034 	movhi	r2,0
     a78:	109d6604 	addi	r2,r2,30104
     a7c:	10800017 	ldw	r2,0(r2)
     a80:	11400217 	ldw	r5,8(r2)
     a84:	00031a40 	call	31a4 <putc>
#endif
}
     a88:	dfc00017 	ldw	ra,0(sp)
     a8c:	dec00104 	addi	sp,sp,4
     a90:	f800283a 	ret

00000a94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     a94:	deffff04 	addi	sp,sp,-4
     a98:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
     a9c:	0002eec0 	call	2eec <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     aa0:	00800044 	movi	r2,1
     aa4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     aa8:	dfc00017 	ldw	ra,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     ab4:	defffd04 	addi	sp,sp,-12
     ab8:	dfc00215 	stw	ra,8(sp)
     abc:	dc400115 	stw	r17,4(sp)
     ac0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     ac4:	04400204 	movi	r17,8
     ac8:	01040034 	movhi	r4,4096
     acc:	21080004 	addi	r4,r4,8192
     ad0:	000b883a 	mov	r5,zero
     ad4:	000d883a 	mov	r6,zero
     ad8:	880f883a 	mov	r7,r17
     adc:	00013880 	call	1388 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     ae0:	04000034 	movhi	r16,0
     ae4:	84162804 	addi	r16,r16,22688
     ae8:	8009883a 	mov	r4,r16
     aec:	000b883a 	mov	r5,zero
     af0:	880d883a 	mov	r6,r17
     af4:	0000e840 	call	e84 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     af8:	04400034 	movhi	r17,0
     afc:	8c5d5f04 	addi	r17,r17,30076
     b00:	813ff604 	addi	r4,r16,-40
     b04:	880b883a 	mov	r5,r17
     b08:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b0c:	01000034 	movhi	r4,0
     b10:	211a3604 	addi	r4,r4,26840
     b14:	880b883a 	mov	r5,r17
     b18:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b1c:	01000034 	movhi	r4,0
     b20:	211a4204 	addi	r4,r4,26888
     b24:	880b883a 	mov	r5,r17
     b28:	00029b40 	call	29b4 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     b2c:	04000034 	movhi	r16,0
     b30:	841a4e04 	addi	r16,r16,26936
     b34:	8009883a 	mov	r4,r16
     b38:	00014bc0 	call	14bc <alt_up_character_lcd_init>
     b3c:	8009883a 	mov	r4,r16
     b40:	880b883a 	mov	r5,r17
     b44:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b48:	01000034 	movhi	r4,0
     b4c:	211a5904 	addi	r4,r4,26980
     b50:	880b883a 	mov	r5,r17
     b54:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b58:	01000034 	movhi	r4,0
     b5c:	211a6404 	addi	r4,r4,27024
     b60:	880b883a 	mov	r5,r17
     b64:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b68:	01000034 	movhi	r4,0
     b6c:	211a6f04 	addi	r4,r4,27068
     b70:	880b883a 	mov	r5,r17
     b74:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b78:	01000034 	movhi	r4,0
     b7c:	211a7a04 	addi	r4,r4,27112
     b80:	880b883a 	mov	r5,r17
     b84:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b88:	01000034 	movhi	r4,0
     b8c:	211a8504 	addi	r4,r4,27156
     b90:	880b883a 	mov	r5,r17
     b94:	00029b40 	call	29b4 <alt_dev_llist_insert>
     b98:	01000034 	movhi	r4,0
     b9c:	211a9004 	addi	r4,r4,27200
     ba0:	880b883a 	mov	r5,r17
     ba4:	00029b40 	call	29b4 <alt_dev_llist_insert>
     ba8:	01000034 	movhi	r4,0
     bac:	211a9b04 	addi	r4,r4,27244
     bb0:	880b883a 	mov	r5,r17
     bb4:	00029b40 	call	29b4 <alt_dev_llist_insert>
     bb8:	01000034 	movhi	r4,0
     bbc:	211aa604 	addi	r4,r4,27288
     bc0:	880b883a 	mov	r5,r17
     bc4:	00029b40 	call	29b4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     bc8:	04000034 	movhi	r16,0
     bcc:	841ab104 	addi	r16,r16,27332
     bd0:	8009883a 	mov	r4,r16
     bd4:	00019e00 	call	19e0 <alt_up_ps2_init>
     bd8:	8009883a 	mov	r4,r16
     bdc:	880b883a 	mov	r5,r17
     be0:	00029b40 	call	29b4 <alt_dev_llist_insert>
     be4:	01000034 	movhi	r4,0
     be8:	211abf04 	addi	r4,r4,27388
     bec:	880b883a 	mov	r5,r17
     bf0:	00029b40 	call	29b4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     bf4:	01000034 	movhi	r4,0
     bf8:	211aca04 	addi	r4,r4,27432
     bfc:	20800a17 	ldw	r2,40(r4)
     c00:	10800104 	addi	r2,r2,4
     c04:	10c0000b 	ldhu	r3,0(r2)
     c08:	20c00c15 	stw	r3,48(r4)
     c0c:	10800017 	ldw	r2,0(r2)
     c10:	100ad43a 	srli	r5,r2,16
     c14:	21400d15 	stw	r5,52(r4)
     c18:	00801004 	movi	r2,64
     c1c:	10c00436 	bltu	r2,r3,c30 <alt_sys_init+0x17c>
     c20:	00800fc4 	movi	r2,63
     c24:	20800f15 	stw	r2,60(r4)
     c28:	00800184 	movi	r2,6
     c2c:	20801015 	stw	r2,64(r4)
     c30:	00800804 	movi	r2,32
     c34:	11400436 	bltu	r2,r5,c48 <alt_sys_init+0x194>
     c38:	00c007c4 	movi	r3,31
     c3c:	00800034 	movhi	r2,0
     c40:	109aca04 	addi	r2,r2,27432
     c44:	10c01115 	stw	r3,68(r2)
     c48:	04000034 	movhi	r16,0
     c4c:	841aca04 	addi	r16,r16,27432
     c50:	8009883a 	mov	r4,r16
     c54:	0001d980 	call	1d98 <alt_up_char_buffer_init>
     c58:	8009883a 	mov	r4,r16
     c5c:	01400034 	movhi	r5,0
     c60:	295d5f04 	addi	r5,r5,30076
     c64:	00029b40 	call	29b4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     c68:	01800034 	movhi	r6,0
     c6c:	319adc04 	addi	r6,r6,27504
     c70:	30c00a17 	ldw	r3,40(r6)
     c74:	18800017 	ldw	r2,0(r3)
     c78:	30800b15 	stw	r2,44(r6)
     c7c:	18800117 	ldw	r2,4(r3)
     c80:	30800c15 	stw	r2,48(r6)
     c84:	19000204 	addi	r4,r3,8
     c88:	2080000b 	ldhu	r2,0(r4)
     c8c:	30800f15 	stw	r2,60(r6)
     c90:	20800017 	ldw	r2,0(r4)
     c94:	1004d43a 	srli	r2,r2,16
     c98:	30801015 	stw	r2,64(r6)
     c9c:	18c00304 	addi	r3,r3,12
     ca0:	18800017 	ldw	r2,0(r3)
     ca4:	1005d07a 	srai	r2,r2,1
     ca8:	01000044 	movi	r4,1
     cac:	1104703a 	and	r2,r2,r4
     cb0:	30800d15 	stw	r2,52(r6)
     cb4:	18800017 	ldw	r2,0(r3)
     cb8:	1005d13a 	srai	r2,r2,4
     cbc:	114003cc 	andi	r5,r2,15
     cc0:	31400e15 	stw	r5,56(r6)
     cc4:	1a000017 	ldw	r8,0(r3)
     cc8:	400ed43a 	srli	r7,r8,16
     ccc:	2900021e 	bne	r5,r4,cd8 <alt_sys_init+0x224>
     cd0:	30001115 	stw	zero,68(r6)
     cd4:	00000b06 	br	d04 <alt_sys_init+0x250>
     cd8:	00800084 	movi	r2,2
     cdc:	2880051e 	bne	r5,r2,cf4 <alt_sys_init+0x240>
     ce0:	00c00044 	movi	r3,1
     ce4:	00800034 	movhi	r2,0
     ce8:	109adc04 	addi	r2,r2,27504
     cec:	10c01115 	stw	r3,68(r2)
     cf0:	00000406 	br	d04 <alt_sys_init+0x250>
     cf4:	00c00084 	movi	r3,2
     cf8:	00800034 	movhi	r2,0
     cfc:	109adc04 	addi	r2,r2,27504
     d00:	10c01115 	stw	r3,68(r2)
     d04:	01000034 	movhi	r4,0
     d08:	211adc04 	addi	r4,r4,27504
     d0c:	38c03fcc 	andi	r3,r7,255
     d10:	01800804 	movi	r6,32
     d14:	30c5c83a 	sub	r2,r6,r3
     d18:	017fffc4 	movi	r5,-1
     d1c:	2884d83a 	srl	r2,r5,r2
     d20:	20801215 	stw	r2,72(r4)
     d24:	20801117 	ldw	r2,68(r4)
     d28:	1887883a 	add	r3,r3,r2
     d2c:	20c01315 	stw	r3,76(r4)
     d30:	4004d63a 	srli	r2,r8,24
     d34:	308dc83a 	sub	r6,r6,r2
     d38:	298ad83a 	srl	r5,r5,r6
     d3c:	21401415 	stw	r5,80(r4)
     d40:	01400034 	movhi	r5,0
     d44:	295d5f04 	addi	r5,r5,30076
     d48:	00029b40 	call	29b4 <alt_dev_llist_insert>
}
     d4c:	dfc00217 	ldw	ra,8(sp)
     d50:	dc400117 	ldw	r17,4(sp)
     d54:	dc000017 	ldw	r16,0(sp)
     d58:	dec00304 	addi	sp,sp,12
     d5c:	f800283a 	ret

00000d60 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     d60:	deffff04 	addi	sp,sp,-4
     d64:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     d68:	21000017 	ldw	r4,0(r4)
     d6c:	21000a04 	addi	r4,r4,40
     d70:	00010300 	call	1030 <altera_avalon_jtag_uart_ioctl>
}
     d74:	dfc00017 	ldw	ra,0(sp)
     d78:	dec00104 	addi	sp,sp,4
     d7c:	f800283a 	ret

00000d80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     d80:	deffff04 	addi	sp,sp,-4
     d84:	dfc00015 	stw	ra,0(sp)
     d88:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     d8c:	21000017 	ldw	r4,0(r4)
     d90:	21000a04 	addi	r4,r4,40
     d94:	11400217 	ldw	r5,8(r2)
     d98:	0000df80 	call	df8 <altera_avalon_jtag_uart_close>
}
     d9c:	dfc00017 	ldw	ra,0(sp)
     da0:	dec00104 	addi	sp,sp,4
     da4:	f800283a 	ret

00000da8 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     da8:	deffff04 	addi	sp,sp,-4
     dac:	dfc00015 	stw	ra,0(sp)
     db0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     db4:	21000017 	ldw	r4,0(r4)
     db8:	21000a04 	addi	r4,r4,40
     dbc:	11c00217 	ldw	r7,8(r2)
     dc0:	000120c0 	call	120c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     dc4:	dfc00017 	ldw	ra,0(sp)
     dc8:	dec00104 	addi	sp,sp,4
     dcc:	f800283a 	ret

00000dd0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     dd0:	deffff04 	addi	sp,sp,-4
     dd4:	dfc00015 	stw	ra,0(sp)
     dd8:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     ddc:	21000017 	ldw	r4,0(r4)
     de0:	21000a04 	addi	r4,r4,40
     de4:	11c00217 	ldw	r7,8(r2)
     de8:	00010a40 	call	10a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     dec:	dfc00017 	ldw	ra,0(sp)
     df0:	dec00104 	addi	sp,sp,4
     df4:	f800283a 	ret

00000df8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     df8:	21800c17 	ldw	r6,48(r4)
     dfc:	2950000c 	andi	r5,r5,16384
     e00:	280b003a 	cmpeq	r5,r5,zero
     e04:	00000306 	br	e14 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     e08:	2800021e 	bne	r5,zero,e14 <altera_avalon_jtag_uart_close+0x1c>
     e0c:	00bffd44 	movi	r2,-11
     e10:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     e14:	20800d17 	ldw	r2,52(r4)
     e18:	11800326 	beq	r2,r6,e28 <altera_avalon_jtag_uart_close+0x30>
     e1c:	20c00917 	ldw	r3,36(r4)
     e20:	20800117 	ldw	r2,4(r4)
     e24:	18bff836 	bltu	r3,r2,e08 <altera_avalon_jtag_uart_close+0x10>
     e28:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     e2c:	f800283a 	ret

00000e30 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     e30:	20800017 	ldw	r2,0(r4)
     e34:	10c00104 	addi	r3,r2,4
     e38:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     e3c:	01410004 	movi	r5,1024
     e40:	1144703a 	and	r2,r2,r5
     e44:	10000526 	beq	r2,zero,e5c <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     e48:	20800817 	ldw	r2,32(r4)
     e4c:	1144b03a 	or	r2,r2,r5
     e50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     e54:	20000915 	stw	zero,36(r4)
     e58:	00000606 	br	e74 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     e5c:	20c00917 	ldw	r3,36(r4)
     e60:	00a00034 	movhi	r2,32768
     e64:	10bfff04 	addi	r2,r2,-4
     e68:	10c00236 	bltu	r2,r3,e74 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     e6c:	18800044 	addi	r2,r3,1
     e70:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     e74:	00800074 	movhi	r2,1
     e78:	10a4bc04 	addi	r2,r2,-27920
     e7c:	10800017 	ldw	r2,0(r2)
     e80:	f800283a 	ret

00000e84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     e84:	defffe04 	addi	sp,sp,-8
     e88:	dfc00115 	stw	ra,4(sp)
     e8c:	dc000015 	stw	r16,0(sp)
     e90:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e94:	00c00044 	movi	r3,1
     e98:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     e9c:	20800017 	ldw	r2,0(r4)
     ea0:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     ea4:	3009883a 	mov	r4,r6
     ea8:	800b883a 	mov	r5,r16
     eac:	01800034 	movhi	r6,0
     eb0:	3183bf04 	addi	r6,r6,3836
     eb4:	0002bb00 	call	2bb0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     eb8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     ebc:	81000204 	addi	r4,r16,8
     ec0:	00800074 	movhi	r2,1
     ec4:	10a4bc04 	addi	r2,r2,-27920
     ec8:	11400017 	ldw	r5,0(r2)
     ecc:	01800034 	movhi	r6,0
     ed0:	31838c04 	addi	r6,r6,3632
     ed4:	800f883a 	mov	r7,r16
     ed8:	00028380 	call	2838 <alt_alarm_start>
     edc:	1000030e 	bge	r2,zero,eec <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     ee0:	00a00034 	movhi	r2,32768
     ee4:	10bfffc4 	addi	r2,r2,-1
     ee8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     eec:	dfc00117 	ldw	ra,4(sp)
     ef0:	dc000017 	ldw	r16,0(sp)
     ef4:	dec00204 	addi	sp,sp,8
     ef8:	f800283a 	ret

00000efc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     efc:	22000017 	ldw	r8,0(r4)
     f00:	03800104 	movi	r14,4
     f04:	4399883a 	add	r12,r8,r14
     f08:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f0c:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     f10:	5880c00c 	andi	r2,r11,768
     f14:	10004526 	beq	r2,zero,102c <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     f18:	5880400c 	andi	r2,r11,256
     f1c:	10002126 	beq	r2,zero,fa4 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f20:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     f24:	10800044 	addi	r2,r2,1
     f28:	1081ffcc 	andi	r2,r2,2047
     f2c:	20c00b17 	ldw	r3,44(r4)
     f30:	10c01626 	beq	r2,r3,f8c <altera_avalon_jtag_uart_irq+0x90>
     f34:	02a00014 	movui	r10,32768
     f38:	02400e04 	movi	r9,56
     f3c:	01c00044 	movi	r7,1
     f40:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     f44:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     f48:	2a84703a 	and	r2,r5,r10
     f4c:	10000d26 	beq	r2,zero,f84 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     f50:	20800a17 	ldw	r2,40(r4)
     f54:	1105883a 	add	r2,r2,r4
     f58:	1245883a 	add	r2,r2,r9
     f5c:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f60:	20800a17 	ldw	r2,40(r4)
     f64:	11c5883a 	add	r2,r2,r7
     f68:	1184703a 	and	r2,r2,r6
     f6c:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f70:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     f74:	11c5883a 	add	r2,r2,r7
     f78:	1184703a 	and	r2,r2,r6
     f7c:	20c00b17 	ldw	r3,44(r4)
     f80:	10fff01e 	bne	r2,r3,f44 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     f84:	2b44703a 	and	r2,r5,r13
     f88:	10000626 	beq	r2,zero,fa4 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     f8c:	20800817 	ldw	r2,32(r4)
     f90:	00ffff84 	movi	r3,-2
     f94:	10c4703a 	and	r2,r2,r3
     f98:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     f9c:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     fa0:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     fa4:	5880800c 	andi	r2,r11,512
     fa8:	103fd826 	beq	r2,zero,f0c <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     fac:	5b44703a 	and	r2,r11,r13
     fb0:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     fb4:	283fd526 	beq	r5,zero,f0c <altera_avalon_jtag_uart_irq+0x10>
     fb8:	20c00d17 	ldw	r3,52(r4)
     fbc:	20800c17 	ldw	r2,48(r4)
     fc0:	18801126 	beq	r3,r2,1008 <altera_avalon_jtag_uart_irq+0x10c>
     fc4:	02420e04 	movi	r9,2104
     fc8:	01800044 	movi	r6,1
     fcc:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     fd0:	20800d17 	ldw	r2,52(r4)
     fd4:	1105883a 	add	r2,r2,r4
     fd8:	1245883a 	add	r2,r2,r9
     fdc:	10800007 	ldb	r2,0(r2)
     fe0:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     fe4:	20800d17 	ldw	r2,52(r4)
     fe8:	1185883a 	add	r2,r2,r6
     fec:	11c4703a 	and	r2,r2,r7
     ff0:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     ff4:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     ff8:	283fc426 	beq	r5,zero,f0c <altera_avalon_jtag_uart_irq+0x10>
     ffc:	20c00d17 	ldw	r3,52(r4)
    1000:	20800c17 	ldw	r2,48(r4)
    1004:	18bff21e 	bne	r3,r2,fd0 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1008:	20c00817 	ldw	r3,32(r4)
    100c:	00bfff44 	movi	r2,-3
    1010:	1886703a 	and	r3,r3,r2
    1014:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1018:	20800017 	ldw	r2,0(r4)
    101c:	1385883a 	add	r2,r2,r14
    1020:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1024:	60800037 	ldwio	r2,0(r12)
    1028:	003fb806 	br	f0c <altera_avalon_jtag_uart_irq+0x10>
    102c:	f800283a 	ret

00001030 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    1030:	009a8044 	movi	r2,27137
    1034:	28800326 	beq	r5,r2,1044 <altera_avalon_jtag_uart_ioctl+0x14>
    1038:	009a8084 	movi	r2,27138
    103c:	2880171e 	bne	r5,r2,109c <altera_avalon_jtag_uart_ioctl+0x6c>
    1040:	00000d06 	br	1078 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1044:	20c00117 	ldw	r3,4(r4)
    1048:	00a00034 	movhi	r2,32768
    104c:	10bfffc4 	addi	r2,r2,-1
    1050:	18801226 	beq	r3,r2,109c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1054:	31800017 	ldw	r6,0(r6)
    1058:	30ffff84 	addi	r3,r6,-2
    105c:	10bfff44 	addi	r2,r2,-3
    1060:	10c0022e 	bgeu	r2,r3,106c <altera_avalon_jtag_uart_ioctl+0x3c>
    1064:	01a00034 	movhi	r6,32768
    1068:	31bfff84 	addi	r6,r6,-2
    106c:	21800115 	stw	r6,4(r4)
    1070:	0005883a 	mov	r2,zero
    1074:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1078:	20c00117 	ldw	r3,4(r4)
    107c:	00a00034 	movhi	r2,32768
    1080:	10bfffc4 	addi	r2,r2,-1
    1084:	18800526 	beq	r3,r2,109c <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1088:	20800917 	ldw	r2,36(r4)
    108c:	10c5803a 	cmpltu	r2,r2,r3
    1090:	30800015 	stw	r2,0(r6)
    1094:	0005883a 	mov	r2,zero
    1098:	f800283a 	ret
    109c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    10a0:	f800283a 	ret

000010a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    10a4:	defff604 	addi	sp,sp,-40
    10a8:	dfc00915 	stw	ra,36(sp)
    10ac:	df000815 	stw	fp,32(sp)
    10b0:	ddc00715 	stw	r23,28(sp)
    10b4:	dd800615 	stw	r22,24(sp)
    10b8:	dd400515 	stw	r21,20(sp)
    10bc:	dd000415 	stw	r20,16(sp)
    10c0:	dcc00315 	stw	r19,12(sp)
    10c4:	dc800215 	stw	r18,8(sp)
    10c8:	dc400115 	stw	r17,4(sp)
    10cc:	dc000015 	stw	r16,0(sp)
    10d0:	2025883a 	mov	r18,r4
    10d4:	282f883a 	mov	r23,r5
    10d8:	3027883a 	mov	r19,r6
    10dc:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    10e0:	0180220e 	bge	zero,r6,116c <altera_avalon_jtag_uart_read+0xc8>
    10e4:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    10e8:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    10ec:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    10f0:	b4400236 	bltu	r22,r17,10fc <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    10f4:	b461c83a 	sub	r16,r22,r17
    10f8:	00000206 	br	1104 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    10fc:	00820004 	movi	r2,2048
    1100:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    1104:	80000d26 	beq	r16,zero,113c <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    1108:	9829883a 	mov	r20,r19
    110c:	9c001d36 	bltu	r19,r16,1184 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1110:	91400e04 	addi	r5,r18,56
    1114:	a809883a 	mov	r4,r21
    1118:	2c4b883a 	add	r5,r5,r17
    111c:	800d883a 	mov	r6,r16
    1120:	00031040 	call	3104 <memcpy>
      ptr   += n;
    1124:	ac2b883a 	add	r21,r21,r16
      space -= n;
    1128:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    112c:	8445883a 	add	r2,r16,r17
    1130:	1081ffcc 	andi	r2,r2,2047
    1134:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    1138:	04ffeb16 	blt	zero,r19,10e8 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    113c:	adc01c1e 	bne	r21,r23,11b0 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1140:	e090000c 	andi	r2,fp,16384
    1144:	10000d1e 	bne	r2,zero,117c <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1148:	90800a17 	ldw	r2,40(r18)
    114c:	b080031e 	bne	r22,r2,115c <altera_avalon_jtag_uart_read+0xb8>
    1150:	90c00917 	ldw	r3,36(r18)
    1154:	90800117 	ldw	r2,4(r18)
    1158:	18bffb36 	bltu	r3,r2,1148 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    115c:	90800a17 	ldw	r2,40(r18)
    1160:	b0800426 	beq	r22,r2,1174 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1164:	04c0030e 	bge	zero,r19,1174 <altera_avalon_jtag_uart_read+0xd0>
    1168:	003fde06 	br	10e4 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    116c:	3890000c 	andi	r2,r7,16384
    1170:	1000021e 	bne	r2,zero,117c <altera_avalon_jtag_uart_read+0xd8>
    1174:	00bffec4 	movi	r2,-5
    1178:	00001806 	br	11dc <altera_avalon_jtag_uart_read+0x138>
    117c:	00bffd44 	movi	r2,-11
    1180:	00001606 	br	11dc <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1184:	91400e04 	addi	r5,r18,56
    1188:	a809883a 	mov	r4,r21
    118c:	894b883a 	add	r5,r17,r5
    1190:	980d883a 	mov	r6,r19
    1194:	00031040 	call	3104 <memcpy>
      ptr   += n;
    1198:	aceb883a 	add	r21,r21,r19
      space -= n;
    119c:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11a0:	a445883a 	add	r2,r20,r17
    11a4:	1081ffcc 	andi	r2,r2,2047
    11a8:	90800b15 	stw	r2,44(r18)
    11ac:	003fe306 	br	113c <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11b4:	00bfff84 	movi	r2,-2
    11b8:	2084703a 	and	r2,r4,r2
    11bc:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    11c0:	90800817 	ldw	r2,32(r18)
    11c4:	10800054 	ori	r2,r2,1
    11c8:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    11cc:	90c00017 	ldw	r3,0(r18)
    11d0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11d4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    11d8:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    11dc:	dfc00917 	ldw	ra,36(sp)
    11e0:	df000817 	ldw	fp,32(sp)
    11e4:	ddc00717 	ldw	r23,28(sp)
    11e8:	dd800617 	ldw	r22,24(sp)
    11ec:	dd400517 	ldw	r21,20(sp)
    11f0:	dd000417 	ldw	r20,16(sp)
    11f4:	dcc00317 	ldw	r19,12(sp)
    11f8:	dc800217 	ldw	r18,8(sp)
    11fc:	dc400117 	ldw	r17,4(sp)
    1200:	dc000017 	ldw	r16,0(sp)
    1204:	dec00a04 	addi	sp,sp,40
    1208:	f800283a 	ret

0000120c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    120c:	defff804 	addi	sp,sp,-32
    1210:	dfc00715 	stw	ra,28(sp)
    1214:	dd800615 	stw	r22,24(sp)
    1218:	dd400515 	stw	r21,20(sp)
    121c:	dd000415 	stw	r20,16(sp)
    1220:	dcc00315 	stw	r19,12(sp)
    1224:	dc800215 	stw	r18,8(sp)
    1228:	dc400115 	stw	r17,4(sp)
    122c:	dc000015 	stw	r16,0(sp)
    1230:	2021883a 	mov	r16,r4
    1234:	282d883a 	mov	r22,r5
    1238:	3011883a 	mov	r8,r6
    123c:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1240:	01800616 	blt	zero,r6,125c <altera_avalon_jtag_uart_write+0x50>
    1244:	2829883a 	mov	r20,r5
    1248:	00002106 	br	12d0 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    124c:	a585c83a 	sub	r2,r20,r22
    1250:	00004306 	br	1360 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    1254:	00bffd44 	movi	r2,-11
    1258:	00004106 	br	1360 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    125c:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1260:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    1264:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    1268:	9140032e 	bgeu	r18,r5,1278 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    126c:	2c85c83a 	sub	r2,r5,r18
    1270:	11bfffc4 	addi	r6,r2,-1
    1274:	00000606 	br	1290 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    1278:	28000326 	beq	r5,zero,1288 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    127c:	00820004 	movi	r2,2048
    1280:	148dc83a 	sub	r6,r2,r18
    1284:	00000206 	br	1290 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1288:	0081ffc4 	movi	r2,2047
    128c:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    1290:	30002626 	beq	r6,zero,132c <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    1294:	4027883a 	mov	r19,r8
    1298:	3023883a 	mov	r17,r6
    129c:	4180012e 	bgeu	r8,r6,12a4 <altera_avalon_jtag_uart_write+0x98>
    12a0:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    12a4:	81020e04 	addi	r4,r16,2104
    12a8:	2489883a 	add	r4,r4,r18
    12ac:	a00b883a 	mov	r5,r20
    12b0:	880d883a 	mov	r6,r17
    12b4:	00031040 	call	3104 <memcpy>
      ptr   += n;
    12b8:	a469883a 	add	r20,r20,r17
      count -= n;
    12bc:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12c0:	9445883a 	add	r2,r18,r17
    12c4:	1081ffcc 	andi	r2,r2,2047
    12c8:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    12cc:	023fe416 	blt	zero,r8,1260 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12d4:	00bfff84 	movi	r2,-2
    12d8:	2084703a 	and	r2,r4,r2
    12dc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    12e0:	80800817 	ldw	r2,32(r16)
    12e4:	10800094 	ori	r2,r2,2
    12e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    12ec:	80c00017 	ldw	r3,0(r16)
    12f0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12f4:	2001703a 	wrctl	status,r4
    12f8:	00000706 	br	1318 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    12fc:	80800d17 	ldw	r2,52(r16)
    1300:	1140031e 	bne	r2,r5,1310 <altera_avalon_jtag_uart_write+0x104>
    1304:	80c00917 	ldw	r3,36(r16)
    1308:	80800117 	ldw	r2,4(r16)
    130c:	18bffb36 	bltu	r3,r2,12fc <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1310:	80800d17 	ldw	r2,52(r16)
    1314:	117fed1e 	bne	r2,r5,12cc <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1318:	b53fcc1e 	bne	r22,r20,124c <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    131c:	a890000c 	andi	r2,r21,16384
    1320:	103fcc1e 	bne	r2,zero,1254 <altera_avalon_jtag_uart_write+0x48>
    1324:	00bffec4 	movi	r2,-5
    1328:	00000d06 	br	1360 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    132c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1330:	00bfff84 	movi	r2,-2
    1334:	2084703a 	and	r2,r4,r2
    1338:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    133c:	80800817 	ldw	r2,32(r16)
    1340:	10800094 	ori	r2,r2,2
    1344:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1348:	80c00017 	ldw	r3,0(r16)
    134c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1350:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1354:	a890000c 	andi	r2,r21,16384
    1358:	103fe826 	beq	r2,zero,12fc <altera_avalon_jtag_uart_write+0xf0>
    135c:	003fee06 	br	1318 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    1360:	dfc00717 	ldw	ra,28(sp)
    1364:	dd800617 	ldw	r22,24(sp)
    1368:	dd400517 	ldw	r21,20(sp)
    136c:	dd000417 	ldw	r20,16(sp)
    1370:	dcc00317 	ldw	r19,12(sp)
    1374:	dc800217 	ldw	r18,8(sp)
    1378:	dc400117 	ldw	r17,4(sp)
    137c:	dc000017 	ldw	r16,0(sp)
    1380:	dec00804 	addi	sp,sp,32
    1384:	f800283a 	ret

00001388 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1388:	deffff04 	addi	sp,sp,-4
    138c:	dfc00015 	stw	ra,0(sp)
    1390:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1394:	00c00074 	movhi	r3,1
    1398:	18e4bc04 	addi	r3,r3,-27920
    139c:	18800017 	ldw	r2,0(r3)
    13a0:	1000011e 	bne	r2,zero,13a8 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    13a4:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    13a8:	008001c4 	movi	r2,7
    13ac:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    13b0:	3009883a 	mov	r4,r6
    13b4:	01800034 	movhi	r6,0
    13b8:	3184f304 	addi	r6,r6,5068
    13bc:	0002bb00 	call	2bb0 <alt_irq_register>
#endif  
}
    13c0:	dfc00017 	ldw	ra,0(sp)
    13c4:	dec00104 	addi	sp,sp,4
    13c8:	f800283a 	ret

000013cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    13cc:	defffe04 	addi	sp,sp,-8
    13d0:	dfc00115 	stw	ra,4(sp)
    13d4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    13d8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    13dc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13e0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13e4:	00bfff84 	movi	r2,-2
    13e8:	8084703a 	and	r2,r16,r2
    13ec:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    13f0:	0002e400 	call	2e40 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13f4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    13f8:	dfc00117 	ldw	ra,4(sp)
    13fc:	dc000017 	ldw	r16,0(sp)
    1400:	dec00204 	addi	sp,sp,8
    1404:	f800283a 	ret

00001408 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    1408:	2800021e 	bne	r5,zero,1414 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
    140c:	2005883a 	mov	r2,r4
    1410:	00000106 	br	1418 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    1414:	20801014 	ori	r2,r4,64
    1418:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    141c:	10802014 	ori	r2,r2,128
    1420:	f800283a 	ret

00001424 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1424:	28c00003 	ldbu	r3,0(r5)
    1428:	18803fcc 	andi	r2,r3,255
    142c:	1080201c 	xori	r2,r2,128
    1430:	10bfe004 	addi	r2,r2,-128
    1434:	10000d26 	beq	r2,zero,146c <alt_up_character_lcd_string+0x48>
    1438:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    143c:	20800a17 	ldw	r2,40(r4)
    1440:	1185883a 	add	r2,r2,r6
    1444:	18c03fcc 	andi	r3,r3,255
    1448:	18c0201c 	xori	r3,r3,128
    144c:	18ffe004 	addi	r3,r3,-128
    1450:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1454:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1458:	28c00003 	ldbu	r3,0(r5)
    145c:	18803fcc 	andi	r2,r3,255
    1460:	1080201c 	xori	r2,r2,128
    1464:	10bfe004 	addi	r2,r2,-128
    1468:	103ff41e 	bne	r2,zero,143c <alt_up_character_lcd_string+0x18>
    146c:	f800283a 	ret

00001470 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1470:	30000926 	beq	r6,zero,1498 <alt_up_character_lcd_write+0x28>
    1474:	000f883a 	mov	r7,zero
    1478:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    147c:	20800a17 	ldw	r2,40(r4)
    1480:	1205883a 	add	r2,r2,r8
    1484:	3947883a 	add	r3,r7,r5
    1488:	18c00007 	ldb	r3,0(r3)
    148c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1490:	3a0f883a 	add	r7,r7,r8
    1494:	31fff91e 	bne	r6,r7,147c <alt_up_character_lcd_write+0xc>
    1498:	f800283a 	ret

0000149c <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    149c:	deffff04 	addi	sp,sp,-4
    14a0:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    14a4:	21000017 	ldw	r4,0(r4)
    14a8:	00014700 	call	1470 <alt_up_character_lcd_write>
	return 0;
}
    14ac:	0005883a 	mov	r2,zero
    14b0:	dfc00017 	ldw	ra,0(sp)
    14b4:	dec00104 	addi	sp,sp,4
    14b8:	f800283a 	ret

000014bc <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    14bc:	20c00a17 	ldw	r3,40(r4)
    14c0:	00800044 	movi	r2,1
    14c4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    14c8:	f800283a 	ret

000014cc <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    14cc:	20800a17 	ldw	r2,40(r4)
    14d0:	29403fcc 	andi	r5,r5,255
    14d4:	11400025 	stbio	r5,0(r2)
}
    14d8:	f800283a 	ret

000014dc <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    14dc:	deffff04 	addi	sp,sp,-4
    14e0:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    14e4:	014003c4 	movi	r5,15
    14e8:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
}
    14ec:	dfc00017 	ldw	ra,0(sp)
    14f0:	dec00104 	addi	sp,sp,4
    14f4:	f800283a 	ret

000014f8 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    14f8:	deffff04 	addi	sp,sp,-4
    14fc:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1500:	01400304 	movi	r5,12
    1504:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
}
    1508:	dfc00017 	ldw	ra,0(sp)
    150c:	dec00104 	addi	sp,sp,4
    1510:	f800283a 	ret

00001514 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1514:	defffd04 	addi	sp,sp,-12
    1518:	dfc00215 	stw	ra,8(sp)
    151c:	dc400115 	stw	r17,4(sp)
    1520:	dc000015 	stw	r16,0(sp)
    1524:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1528:	008009c4 	movi	r2,39
    152c:	11400e36 	bltu	r2,r5,1568 <alt_up_character_lcd_erase_pos+0x54>
    1530:	04400044 	movi	r17,1
    1534:	89800c36 	bltu	r17,r6,1568 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1538:	2809883a 	mov	r4,r5
    153c:	300b883a 	mov	r5,r6
    1540:	00014080 	call	1408 <get_DDRAM_addr>
    1544:	8009883a 	mov	r4,r16
    1548:	11403fcc 	andi	r5,r2,255
    154c:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1550:	80800a17 	ldw	r2,40(r16)
    1554:	1445883a 	add	r2,r2,r17
    1558:	00c00084 	movi	r3,2
    155c:	10c00025 	stbio	r3,0(r2)
    1560:	0005883a 	mov	r2,zero
    1564:	00000106 	br	156c <alt_up_character_lcd_erase_pos+0x58>
	return 0;
    1568:	00bfffc4 	movi	r2,-1
}
    156c:	dfc00217 	ldw	ra,8(sp)
    1570:	dc400117 	ldw	r17,4(sp)
    1574:	dc000017 	ldw	r16,0(sp)
    1578:	dec00304 	addi	sp,sp,12
    157c:	f800283a 	ret

00001580 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1580:	defffa04 	addi	sp,sp,-24
    1584:	dfc00515 	stw	ra,20(sp)
    1588:	dd000415 	stw	r20,16(sp)
    158c:	dcc00315 	stw	r19,12(sp)
    1590:	dc800215 	stw	r18,8(sp)
    1594:	dc400115 	stw	r17,4(sp)
    1598:	dc000015 	stw	r16,0(sp)
    159c:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    15a0:	28001326 	beq	r5,zero,15f0 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    15a4:	0140020e 	bge	zero,r5,15b0 <alt_up_character_lcd_shift_display+0x30>
    15a8:	05000704 	movi	r20,28
    15ac:	00000106 	br	15b4 <alt_up_character_lcd_shift_display+0x34>
    15b0:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    15b4:	2800010e 	bge	r5,zero,15bc <alt_up_character_lcd_shift_display+0x3c>
    15b8:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    15bc:	00bfffc4 	movi	r2,-1
    15c0:	28a1883a 	add	r16,r5,r2
    15c4:	80c03fcc 	andi	r3,r16,255
    15c8:	10803fcc 	andi	r2,r2,255
    15cc:	18800826 	beq	r3,r2,15f0 <alt_up_character_lcd_shift_display+0x70>
    15d0:	04bfffc4 	movi	r18,-1
    15d4:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    15d8:	9809883a 	mov	r4,r19
    15dc:	a1403fcc 	andi	r5,r20,255
    15e0:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    15e4:	84a1883a 	add	r16,r16,r18
    15e8:	80803fcc 	andi	r2,r16,255
    15ec:	147ffa1e 	bne	r2,r17,15d8 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    15f0:	dfc00517 	ldw	ra,20(sp)
    15f4:	dd000417 	ldw	r20,16(sp)
    15f8:	dcc00317 	ldw	r19,12(sp)
    15fc:	dc800217 	ldw	r18,8(sp)
    1600:	dc400117 	ldw	r17,4(sp)
    1604:	dc000017 	ldw	r16,0(sp)
    1608:	dec00604 	addi	sp,sp,24
    160c:	f800283a 	ret

00001610 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1610:	defffa04 	addi	sp,sp,-24
    1614:	dfc00515 	stw	ra,20(sp)
    1618:	dd000415 	stw	r20,16(sp)
    161c:	dcc00315 	stw	r19,12(sp)
    1620:	dc800215 	stw	r18,8(sp)
    1624:	dc400115 	stw	r17,4(sp)
    1628:	dc000015 	stw	r16,0(sp)
    162c:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
    1630:	28001326 	beq	r5,zero,1680 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1634:	0140020e 	bge	zero,r5,1640 <alt_up_character_lcd_shift_cursor+0x30>
    1638:	05000504 	movi	r20,20
    163c:	00000106 	br	1644 <alt_up_character_lcd_shift_cursor+0x34>
    1640:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1644:	2800010e 	bge	r5,zero,164c <alt_up_character_lcd_shift_cursor+0x3c>
    1648:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
    164c:	00bfffc4 	movi	r2,-1
    1650:	28a1883a 	add	r16,r5,r2
    1654:	80c03fcc 	andi	r3,r16,255
    1658:	10803fcc 	andi	r2,r2,255
    165c:	18800826 	beq	r3,r2,1680 <alt_up_character_lcd_shift_cursor+0x70>
    1660:	04bfffc4 	movi	r18,-1
    1664:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1668:	9809883a 	mov	r4,r19
    166c:	a1403fcc 	andi	r5,r20,255
    1670:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1674:	84a1883a 	add	r16,r16,r18
    1678:	80803fcc 	andi	r2,r16,255
    167c:	147ffa1e 	bne	r2,r17,1668 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1680:	dfc00517 	ldw	ra,20(sp)
    1684:	dd000417 	ldw	r20,16(sp)
    1688:	dcc00317 	ldw	r19,12(sp)
    168c:	dc800217 	ldw	r18,8(sp)
    1690:	dc400117 	ldw	r17,4(sp)
    1694:	dc000017 	ldw	r16,0(sp)
    1698:	dec00604 	addi	sp,sp,24
    169c:	f800283a 	ret

000016a0 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    16a0:	defffe04 	addi	sp,sp,-8
    16a4:	dfc00115 	stw	ra,4(sp)
    16a8:	dc000015 	stw	r16,0(sp)
    16ac:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    16b0:	008009c4 	movi	r2,39
    16b4:	11400a36 	bltu	r2,r5,16e0 <alt_up_character_lcd_set_cursor_pos+0x40>
    16b8:	00800044 	movi	r2,1
    16bc:	11800836 	bltu	r2,r6,16e0 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    16c0:	2809883a 	mov	r4,r5
    16c4:	300b883a 	mov	r5,r6
    16c8:	00014080 	call	1408 <get_DDRAM_addr>
    16cc:	8009883a 	mov	r4,r16
    16d0:	11403fcc 	andi	r5,r2,255
    16d4:	00014cc0 	call	14cc <alt_up_character_lcd_send_cmd>
    16d8:	0005883a 	mov	r2,zero
    16dc:	00000106 	br	16e4 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    16e0:	00bfffc4 	movi	r2,-1
}
    16e4:	dfc00117 	ldw	ra,4(sp)
    16e8:	dc000017 	ldw	r16,0(sp)
    16ec:	dec00204 	addi	sp,sp,8
    16f0:	f800283a 	ret

000016f4 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    16f4:	deffff04 	addi	sp,sp,-4
    16f8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    16fc:	01400034 	movhi	r5,0
    1700:	295d5f04 	addi	r5,r5,30076
    1704:	0002a240 	call	2a24 <alt_find_dev>

  return dev;
}
    1708:	dfc00017 	ldw	ra,0(sp)
    170c:	dec00104 	addi	sp,sp,4
    1710:	f800283a 	ret

00001714 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    1714:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    1718:	1004c03a 	cmpne	r2,r2,zero
    171c:	f800283a 	ret

00001720 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1720:	2080004c 	andi	r2,r4,1
    1724:	f800283a 	ret

00001728 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1728:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    172c:	1004c03a 	cmpne	r2,r2,zero
    1730:	f800283a 	ret

00001734 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1734:	2004d43a 	srli	r2,r4,16
    1738:	f800283a 	ret

0000173c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    173c:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1740:	1004c03a 	cmpne	r2,r2,zero
    1744:	f800283a 	ret

00001748 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1748:	20803fcc 	andi	r2,r4,255
    174c:	f800283a 	ret

00001750 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1750:	deffff04 	addi	sp,sp,-4
    1754:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1758:	01400034 	movhi	r5,0
    175c:	295d5f04 	addi	r5,r5,30076
    1760:	0002a240 	call	2a24 <alt_find_dev>

  return dev;
}
    1764:	dfc00017 	ldw	ra,0(sp)
    1768:	dec00104 	addi	sp,sp,4
    176c:	f800283a 	ret

00001770 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1770:	defffe04 	addi	sp,sp,-8
    1774:	dfc00115 	stw	ra,4(sp)
    1778:	dc000015 	stw	r16,0(sp)
    177c:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1780:	81000037 	ldwio	r4,0(r16)
    1784:	00017340 	call	1734 <read_num_bytes_available>
    1788:	10bfffcc 	andi	r2,r2,65535
    178c:	103ffc1e 	bne	r2,zero,1780 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1790:	dfc00117 	ldw	ra,4(sp)
    1794:	dc000017 	ldw	r16,0(sp)
    1798:	dec00204 	addi	sp,sp,8
    179c:	f800283a 	ret

000017a0 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    17a0:	defffd04 	addi	sp,sp,-12
    17a4:	dfc00215 	stw	ra,8(sp)
    17a8:	dc400115 	stw	r17,4(sp)
    17ac:	dc000015 	stw	r16,0(sp)
    17b0:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    17b4:	20800a17 	ldw	r2,40(r4)
    17b8:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    17bc:	8009883a 	mov	r4,r16
    17c0:	000173c0 	call	173c <read_data_valid>
    17c4:	10803fcc 	andi	r2,r2,255
    17c8:	1000021e 	bne	r2,zero,17d4 <alt_up_ps2_read_data_byte+0x34>
    17cc:	00bfffc4 	movi	r2,-1
    17d0:	00000406 	br	17e4 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    17d4:	8009883a 	mov	r4,r16
    17d8:	00017480 	call	1748 <read_data_byte>
    17dc:	88800005 	stb	r2,0(r17)
    17e0:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    17e4:	dfc00217 	ldw	ra,8(sp)
    17e8:	dc400117 	ldw	r17,4(sp)
    17ec:	dc000017 	ldw	r16,0(sp)
    17f0:	dec00304 	addi	sp,sp,12
    17f4:	f800283a 	ret

000017f8 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    17f8:	defffb04 	addi	sp,sp,-20
    17fc:	dfc00415 	stw	ra,16(sp)
    1800:	dcc00315 	stw	r19,12(sp)
    1804:	dc800215 	stw	r18,8(sp)
    1808:	dc400115 	stw	r17,4(sp)
    180c:	dc000015 	stw	r16,0(sp)
    1810:	2025883a 	mov	r18,r4
    1814:	2827883a 	mov	r19,r5
    1818:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    181c:	90800a17 	ldw	r2,40(r18)
    1820:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1824:	8009883a 	mov	r4,r16
    1828:	000173c0 	call	173c <read_data_valid>
    182c:	10803fcc 	andi	r2,r2,255
    1830:	10000526 	beq	r2,zero,1848 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1834:	8009883a 	mov	r4,r16
    1838:	00017480 	call	1748 <read_data_byte>
    183c:	98800005 	stb	r2,0(r19)
    1840:	0005883a 	mov	r2,zero
    1844:	00000506 	br	185c <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1848:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    184c:	90800c17 	ldw	r2,48(r18)
    1850:	103ff226 	beq	r2,zero,181c <alt_up_ps2_read_data_byte_timeout+0x24>
    1854:	147ff12e 	bgeu	r2,r17,181c <alt_up_ps2_read_data_byte_timeout+0x24>
    1858:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    185c:	dfc00417 	ldw	ra,16(sp)
    1860:	dcc00317 	ldw	r19,12(sp)
    1864:	dc800217 	ldw	r18,8(sp)
    1868:	dc400117 	ldw	r17,4(sp)
    186c:	dc000017 	ldw	r16,0(sp)
    1870:	dec00504 	addi	sp,sp,20
    1874:	f800283a 	ret

00001878 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1878:	deffff04 	addi	sp,sp,-4
    187c:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1880:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1884:	0180010e 	bge	zero,r6,188c <alt_up_ps2_read_fd+0x14>
    1888:	003fff06 	br	1888 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    188c:	00017f80 	call	17f8 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1890:	1005003a 	cmpeq	r2,r2,zero
    1894:	dfc00017 	ldw	ra,0(sp)
    1898:	dec00104 	addi	sp,sp,4
    189c:	f800283a 	ret

000018a0 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    18a0:	defffc04 	addi	sp,sp,-16
    18a4:	dfc00315 	stw	ra,12(sp)
    18a8:	dc400215 	stw	r17,8(sp)
    18ac:	dc000115 	stw	r16,4(sp)
    18b0:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    18b4:	d8000005 	stb	zero,0(sp)
    18b8:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    18bc:	8009883a 	mov	r4,r16
    18c0:	d80b883a 	mov	r5,sp
    18c4:	00017f80 	call	17f8 <alt_up_ps2_read_data_byte_timeout>
    18c8:	1007883a 	mov	r3,r2
		if ( status == 0)
    18cc:	10803fcc 	andi	r2,r2,255
    18d0:	1000041e 	bne	r2,zero,18e4 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    18d4:	d8800003 	ldbu	r2,0(sp)
    18d8:	147ff81e 	bne	r2,r17,18bc <alt_up_ps2_wait_for_ack+0x1c>
    18dc:	0005883a 	mov	r2,zero
    18e0:	00000106 	br	18e8 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    18e4:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    18e8:	dfc00317 	ldw	ra,12(sp)
    18ec:	dc400217 	ldw	r17,8(sp)
    18f0:	dc000117 	ldw	r16,4(sp)
    18f4:	dec00404 	addi	sp,sp,16
    18f8:	f800283a 	ret

000018fc <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    18fc:	deffff04 	addi	sp,sp,-4
    1900:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1904:	20800a17 	ldw	r2,40(r4)
    1908:	29403fcc 	andi	r5,r5,255
    190c:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1910:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1914:	11000137 	ldwio	r4,4(r2)
    1918:	00017280 	call	1728 <read_CE_bit>
    191c:	10803fcc 	andi	r2,r2,255
    1920:	10000226 	beq	r2,zero,192c <alt_up_ps2_write_data_byte+0x30>
    1924:	00bffec4 	movi	r2,-5
    1928:	00000106 	br	1930 <alt_up_ps2_write_data_byte+0x34>
    192c:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1930:	dfc00017 	ldw	ra,0(sp)
    1934:	dec00104 	addi	sp,sp,4
    1938:	f800283a 	ret

0000193c <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    193c:	defffb04 	addi	sp,sp,-20
    1940:	dfc00415 	stw	ra,16(sp)
    1944:	dcc00315 	stw	r19,12(sp)
    1948:	dc800215 	stw	r18,8(sp)
    194c:	dc400115 	stw	r17,4(sp)
    1950:	dc000015 	stw	r16,0(sp)
    1954:	2827883a 	mov	r19,r5
    1958:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    195c:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1960:	01800216 	blt	zero,r6,196c <alt_up_ps2_write_fd+0x30>
    1964:	0021883a 	mov	r16,zero
    1968:	00000806 	br	198c <alt_up_ps2_write_fd+0x50>
    196c:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1970:	9c05883a 	add	r2,r19,r16
    1974:	8809883a 	mov	r4,r17
    1978:	11400003 	ldbu	r5,0(r2)
    197c:	00018fc0 	call	18fc <alt_up_ps2_write_data_byte>
		if (status!=0)
    1980:	1000021e 	bne	r2,zero,198c <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1984:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1988:	943ff91e 	bne	r18,r16,1970 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    198c:	8005883a 	mov	r2,r16
    1990:	dfc00417 	ldw	ra,16(sp)
    1994:	dcc00317 	ldw	r19,12(sp)
    1998:	dc800217 	ldw	r18,8(sp)
    199c:	dc400117 	ldw	r17,4(sp)
    19a0:	dc000017 	ldw	r16,0(sp)
    19a4:	dec00504 	addi	sp,sp,20
    19a8:	f800283a 	ret

000019ac <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    19ac:	defffe04 	addi	sp,sp,-8
    19b0:	dfc00115 	stw	ra,4(sp)
    19b4:	dc000015 	stw	r16,0(sp)
    19b8:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    19bc:	29403fcc 	andi	r5,r5,255
    19c0:	00018fc0 	call	18fc <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    19c4:	1000021e 	bne	r2,zero,19d0 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    19c8:	8009883a 	mov	r4,r16
    19cc:	00018a00 	call	18a0 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    19d0:	dfc00117 	ldw	ra,4(sp)
    19d4:	dc000017 	ldw	r16,0(sp)
    19d8:	dec00204 	addi	sp,sp,8
    19dc:	f800283a 	ret

000019e0 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    19e0:	defffd04 	addi	sp,sp,-12
    19e4:	dfc00215 	stw	ra,8(sp)
    19e8:	dc000115 	stw	r16,4(sp)
    19ec:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    19f0:	01403fc4 	movi	r5,255
    19f4:	00019ac0 	call	19ac <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    19f8:	1000171e 	bne	r2,zero,1a58 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    19fc:	8009883a 	mov	r4,r16
    1a00:	d80b883a 	mov	r5,sp
    1a04:	00017f80 	call	17f8 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1a08:	1000131e 	bne	r2,zero,1a58 <alt_up_ps2_init+0x78>
    1a0c:	d8c00003 	ldbu	r3,0(sp)
    1a10:	00802a84 	movi	r2,170
    1a14:	1880101e 	bne	r3,r2,1a58 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1a18:	8009883a 	mov	r4,r16
    1a1c:	d80b883a 	mov	r5,sp
    1a20:	00017f80 	call	17f8 <alt_up_ps2_read_data_byte_timeout>
    1a24:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1a28:	00bfe304 	movi	r2,-116
    1a2c:	1880031e 	bne	r3,r2,1a3c <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1a30:	00800044 	movi	r2,1
    1a34:	80800d15 	stw	r2,52(r16)
    1a38:	00000706 	br	1a58 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1a3c:	1800061e 	bne	r3,zero,1a58 <alt_up_ps2_init+0x78>
    1a40:	d8800003 	ldbu	r2,0(sp)
    1a44:	1000041e 	bne	r2,zero,1a58 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1a48:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1a4c:	8009883a 	mov	r4,r16
    1a50:	01403d04 	movi	r5,244
    1a54:	00018fc0 	call	18fc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1a58:	dfc00217 	ldw	ra,8(sp)
    1a5c:	dc000117 	ldw	r16,4(sp)
    1a60:	dec00304 	addi	sp,sp,12
    1a64:	f800283a 	ret

00001a68 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1a68:	20800a17 	ldw	r2,40(r4)
    1a6c:	10800104 	addi	r2,r2,4
    1a70:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1a74:	013fff84 	movi	r4,-2
    1a78:	1906703a 	and	r3,r3,r4
    1a7c:	10c00035 	stwio	r3,0(r2)
}
    1a80:	f800283a 	ret

00001a84 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1a84:	20c00a17 	ldw	r3,40(r4)
    1a88:	18c00104 	addi	r3,r3,4
    1a8c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1a90:	10800054 	ori	r2,r2,1
    1a94:	18800035 	stwio	r2,0(r3)
}
    1a98:	f800283a 	ret

00001a9c <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1a9c:	200495ba 	slli	r2,r4,22
}
    1aa0:	1005d7fa 	srai	r2,r2,31
    1aa4:	f800283a 	ret

00001aa8 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1aa8:	deffff04 	addi	sp,sp,-4
    1aac:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1ab0:	01400034 	movhi	r5,0
    1ab4:	295d5f04 	addi	r5,r5,30076
    1ab8:	0002a240 	call	2a24 <alt_find_dev>

  return dev;
}
    1abc:	dfc00017 	ldw	ra,0(sp)
    1ac0:	dec00104 	addi	sp,sp,4
    1ac4:	f800283a 	ret

00001ac8 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1ac8:	defffd04 	addi	sp,sp,-12
    1acc:	dfc00215 	stw	ra,8(sp)
    1ad0:	dc400115 	stw	r17,4(sp)
    1ad4:	dc000015 	stw	r16,0(sp)
    1ad8:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1adc:	20800a17 	ldw	r2,40(r4)
    1ae0:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1ae4:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1ae8:	8009883a 	mov	r4,r16
    1aec:	0001a9c0 	call	1a9c <alt_up_rs232_check_parity>
    1af0:	88800005 	stb	r2,0(r17)
    1af4:	8420000c 	andi	r16,r16,32768
    1af8:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    1afc:	80bfffc4 	addi	r2,r16,-1
    1b00:	dfc00217 	ldw	ra,8(sp)
    1b04:	dc400117 	ldw	r17,4(sp)
    1b08:	dc000017 	ldw	r16,0(sp)
    1b0c:	dec00304 	addi	sp,sp,12
    1b10:	f800283a 	ret

00001b14 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1b14:	defff904 	addi	sp,sp,-28
    1b18:	dfc00615 	stw	ra,24(sp)
    1b1c:	dd000515 	stw	r20,20(sp)
    1b20:	dcc00415 	stw	r19,16(sp)
    1b24:	dc800315 	stw	r18,12(sp)
    1b28:	dc400215 	stw	r17,8(sp)
    1b2c:	dc000115 	stw	r16,4(sp)
    1b30:	2821883a 	mov	r16,r5
    1b34:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1b38:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1b3c:	3000021e 	bne	r6,zero,1b48 <alt_up_rs232_read_fd+0x34>
    1b40:	0025883a 	mov	r18,zero
    1b44:	00000a06 	br	1b70 <alt_up_rs232_read_fd+0x5c>
    1b48:	0025883a 	mov	r18,zero
    1b4c:	04400044 	movi	r17,1
    1b50:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1b54:	8461883a 	add	r16,r16,r17
    1b58:	9809883a 	mov	r4,r19
    1b5c:	d80d883a 	mov	r6,sp
    1b60:	0001ac80 	call	1ac8 <alt_up_rs232_read_data>
    1b64:	1000021e 	bne	r2,zero,1b70 <alt_up_rs232_read_fd+0x5c>
			count++;
    1b68:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1b6c:	a4bff81e 	bne	r20,r18,1b50 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1b70:	9005883a 	mov	r2,r18
    1b74:	dfc00617 	ldw	ra,24(sp)
    1b78:	dd000517 	ldw	r20,20(sp)
    1b7c:	dcc00417 	ldw	r19,16(sp)
    1b80:	dc800317 	ldw	r18,12(sp)
    1b84:	dc400217 	ldw	r17,8(sp)
    1b88:	dc000117 	ldw	r16,4(sp)
    1b8c:	dec00704 	addi	sp,sp,28
    1b90:	f800283a 	ret

00001b94 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1b94:	20800a17 	ldw	r2,40(r4)
    1b98:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1b9c:	1004d43a 	srli	r2,r2,16
    1ba0:	f800283a 	ret

00001ba4 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1ba4:	20800a17 	ldw	r2,40(r4)
    1ba8:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1bac:	29403fcc 	andi	r5,r5,255
    1bb0:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1bb4:	0005883a 	mov	r2,zero
    1bb8:	f800283a 	ret

00001bbc <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1bbc:	defffb04 	addi	sp,sp,-20
    1bc0:	dfc00415 	stw	ra,16(sp)
    1bc4:	dcc00315 	stw	r19,12(sp)
    1bc8:	dc800215 	stw	r18,8(sp)
    1bcc:	dc400115 	stw	r17,4(sp)
    1bd0:	dc000015 	stw	r16,0(sp)
    1bd4:	2827883a 	mov	r19,r5
    1bd8:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1bdc:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1be0:	3000021e 	bne	r6,zero,1bec <alt_up_rs232_write_fd+0x30>
    1be4:	0021883a 	mov	r16,zero
    1be8:	00000806 	br	1c0c <alt_up_rs232_write_fd+0x50>
    1bec:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1bf0:	84c5883a 	add	r2,r16,r19
    1bf4:	8809883a 	mov	r4,r17
    1bf8:	11400003 	ldbu	r5,0(r2)
    1bfc:	0001ba40 	call	1ba4 <alt_up_rs232_write_data>
    1c00:	1000021e 	bne	r2,zero,1c0c <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1c04:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1c08:	943ff91e 	bne	r18,r16,1bf0 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    1c0c:	8005883a 	mov	r2,r16
    1c10:	dfc00417 	ldw	ra,16(sp)
    1c14:	dcc00317 	ldw	r19,12(sp)
    1c18:	dc800217 	ldw	r18,8(sp)
    1c1c:	dc400117 	ldw	r17,4(sp)
    1c20:	dc000017 	ldw	r16,0(sp)
    1c24:	dec00504 	addi	sp,sp,20
    1c28:	f800283a 	ret

00001c2c <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1c2c:	20800a17 	ldw	r2,40(r4)
    1c30:	10800104 	addi	r2,r2,4
    1c34:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1c38:	013fff84 	movi	r4,-2
    1c3c:	1906703a 	and	r3,r3,r4
    1c40:	10c00035 	stwio	r3,0(r2)
}
    1c44:	f800283a 	ret

00001c48 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1c48:	20c00a17 	ldw	r3,40(r4)
    1c4c:	18c00104 	addi	r3,r3,4
    1c50:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1c54:	10800054 	ori	r2,r2,1
    1c58:	18800035 	stwio	r2,0(r3)
}
    1c5c:	f800283a 	ret

00001c60 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1c60:	20800a17 	ldw	r2,40(r4)
    1c64:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1c68:	10bfffcc 	andi	r2,r2,65535
    1c6c:	f800283a 	ret

00001c70 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1c70:	20800c17 	ldw	r2,48(r4)
    1c74:	30801c2e 	bgeu	r6,r2,1ce8 <alt_up_char_buffer_string+0x78>
    1c78:	20800d17 	ldw	r2,52(r4)
    1c7c:	38801a2e 	bgeu	r7,r2,1ce8 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1c80:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1c84:	28c00003 	ldbu	r3,0(r5)
    1c88:	18803fcc 	andi	r2,r3,255
    1c8c:	1080201c 	xori	r2,r2,128
    1c90:	10bfe004 	addi	r2,r2,-128
    1c94:	10001626 	beq	r2,zero,1cf0 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1c98:	3a04983a 	sll	r2,r7,r8
    1c9c:	308f883a 	add	r7,r6,r2
    1ca0:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1ca4:	20800b17 	ldw	r2,44(r4)
    1ca8:	3885883a 	add	r2,r7,r2
    1cac:	18c03fcc 	andi	r3,r3,255
    1cb0:	18c0201c 	xori	r3,r3,128
    1cb4:	18ffe004 	addi	r3,r3,-128
    1cb8:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1cbc:	320d883a 	add	r6,r6,r8
    1cc0:	20800c17 	ldw	r2,48(r4)
    1cc4:	3080082e 	bgeu	r6,r2,1ce8 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1cc8:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1ccc:	28c00003 	ldbu	r3,0(r5)
    1cd0:	18803fcc 	andi	r2,r3,255
    1cd4:	1080201c 	xori	r2,r2,128
    1cd8:	10bfe004 	addi	r2,r2,-128
    1cdc:	10000426 	beq	r2,zero,1cf0 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1ce0:	3a0f883a 	add	r7,r7,r8
    1ce4:	003fef06 	br	1ca4 <alt_up_char_buffer_string+0x34>
    1ce8:	00bfffc4 	movi	r2,-1
    1cec:	f800283a 	ret
    1cf0:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1cf4:	f800283a 	ret

00001cf8 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1cf8:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1cfc:	20800c17 	ldw	r2,48(r4)
    1d00:	3080112e 	bgeu	r6,r2,1d48 <alt_up_char_buffer_draw+0x50>
    1d04:	20800d17 	ldw	r2,52(r4)
    1d08:	38800f2e 	bgeu	r7,r2,1d48 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1d0c:	20c00f17 	ldw	r3,60(r4)
    1d10:	30c6703a 	and	r3,r6,r3
    1d14:	20800e17 	ldw	r2,56(r4)
    1d18:	1886983a 	sll	r3,r3,r2
    1d1c:	20801117 	ldw	r2,68(r4)
    1d20:	3884703a 	and	r2,r7,r2
    1d24:	21001017 	ldw	r4,64(r4)
    1d28:	1104983a 	sll	r2,r2,r4
    1d2c:	1886b03a 	or	r3,r3,r2
    1d30:	40800b17 	ldw	r2,44(r8)
    1d34:	1887883a 	add	r3,r3,r2
    1d38:	28803fcc 	andi	r2,r5,255
    1d3c:	18800025 	stbio	r2,0(r3)
    1d40:	0005883a 	mov	r2,zero
    1d44:	f800283a 	ret

	return 0;
    1d48:	00bfffc4 	movi	r2,-1
}
    1d4c:	f800283a 	ret

00001d50 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1d50:	20c00a17 	ldw	r3,40(r4)
    1d54:	00800044 	movi	r2,1
    1d58:	188000a5 	stbio	r2,2(r3)
    1d5c:	20800a17 	ldw	r2,40(r4)
    1d60:	10c00084 	addi	r3,r2,2
    1d64:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1d68:	18800023 	ldbuio	r2,0(r3)
    1d6c:	1104703a 	and	r2,r2,r4
    1d70:	103ffd1e 	bne	r2,zero,1d68 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1d74:	f800283a 	ret

00001d78 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1d78:	deffff04 	addi	sp,sp,-4
    1d7c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1d80:	01400034 	movhi	r5,0
    1d84:	295d5f04 	addi	r5,r5,30076
    1d88:	0002a240 	call	2a24 <alt_find_dev>

  return dev;
}
    1d8c:	dfc00017 	ldw	ra,0(sp)
    1d90:	dec00104 	addi	sp,sp,4
    1d94:	f800283a 	ret

00001d98 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1d98:	defffe04 	addi	sp,sp,-8
    1d9c:	dfc00115 	stw	ra,4(sp)
    1da0:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1da4:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1da8:	80800007 	ldb	r2,0(r16)
    1dac:	10000a26 	beq	r2,zero,1dd8 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1db0:	8009883a 	mov	r4,r16
    1db4:	01400034 	movhi	r5,0
    1db8:	29561304 	addi	r5,r5,22604
    1dbc:	00033900 	call	3390 <strcmp>
    1dc0:	1000021e 	bne	r2,zero,1dcc <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    1dc4:	80000005 	stb	zero,0(r16)
    1dc8:	00000306 	br	1dd8 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1dcc:	84000044 	addi	r16,r16,1
    1dd0:	80800007 	ldb	r2,0(r16)
    1dd4:	103ff61e 	bne	r2,zero,1db0 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    1dd8:	dfc00117 	ldw	ra,4(sp)
    1ddc:	dc000017 	ldw	r16,0(sp)
    1de0:	dec00204 	addi	sp,sp,8
    1de4:	f800283a 	ret

00001de8 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1de8:	da000017 	ldw	r8,0(sp)
    1dec:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    1df0:	1800051e 	bne	r3,zero,1e08 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    1df4:	29c5383a 	mul	r2,r5,r7
    1df8:	3085883a 	add	r2,r6,r2
    1dfc:	1105883a 	add	r2,r2,r4
    1e00:	12000025 	stbio	r8,0(r2)
    1e04:	f800283a 	ret
	else if (mode == 1)
    1e08:	00800044 	movi	r2,1
    1e0c:	1880061e 	bne	r3,r2,1e28 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    1e10:	29c5383a 	mul	r2,r5,r7
    1e14:	3085883a 	add	r2,r6,r2
    1e18:	1085883a 	add	r2,r2,r2
    1e1c:	1105883a 	add	r2,r2,r4
    1e20:	1200002d 	sthio	r8,0(r2)
    1e24:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    1e28:	29c5383a 	mul	r2,r5,r7
    1e2c:	1185883a 	add	r2,r2,r6
    1e30:	1085883a 	add	r2,r2,r2
    1e34:	1085883a 	add	r2,r2,r2
    1e38:	1105883a 	add	r2,r2,r4
    1e3c:	12000035 	stwio	r8,0(r2)
    1e40:	f800283a 	ret

00001e44 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    1e44:	defff304 	addi	sp,sp,-52
    1e48:	dfc00c15 	stw	ra,48(sp)
    1e4c:	df000b15 	stw	fp,44(sp)
    1e50:	ddc00a15 	stw	r23,40(sp)
    1e54:	dd800915 	stw	r22,36(sp)
    1e58:	dd400815 	stw	r21,32(sp)
    1e5c:	dd000715 	stw	r20,28(sp)
    1e60:	dcc00615 	stw	r19,24(sp)
    1e64:	dc800515 	stw	r18,20(sp)
    1e68:	dc400415 	stw	r17,16(sp)
    1e6c:	dc000315 	stw	r16,12(sp)
    1e70:	3011883a 	mov	r8,r6
    1e74:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    1e78:	4987c83a 	sub	r3,r9,r6
    1e7c:	1800010e 	bge	r3,zero,1e84 <alt_up_pixel_buffer_dma_draw_line+0x40>
    1e80:	00c7c83a 	sub	r3,zero,r3
    1e84:	3945c83a 	sub	r2,r7,r5
    1e88:	1000010e 	bge	r2,zero,1e90 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    1e8c:	0085c83a 	sub	r2,zero,r2
    1e90:	10c4803a 	cmplt	r2,r2,r3
    1e94:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    1e98:	20c00e17 	ldw	r3,56(r4)
    1e9c:	00800044 	movi	r2,1
    1ea0:	1880021e 	bne	r3,r2,1eac <alt_up_pixel_buffer_dma_draw_line+0x68>
    1ea4:	d8000215 	stw	zero,8(sp)
    1ea8:	00000306 	br	1eb8 <alt_up_pixel_buffer_dma_draw_line+0x74>
    1eac:	18c00098 	cmpnei	r3,r3,2
    1eb0:	18c00044 	addi	r3,r3,1
    1eb4:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    1eb8:	20800d17 	ldw	r2,52(r4)
    1ebc:	1000061e 	bne	r2,zero,1ed8 <alt_up_pixel_buffer_dma_draw_line+0x94>
    1ec0:	20801317 	ldw	r2,76(r4)
    1ec4:	d8c00217 	ldw	r3,8(sp)
    1ec8:	10c5c83a 	sub	r2,r2,r3
    1ecc:	00c00044 	movi	r3,1
    1ed0:	18ae983a 	sll	r23,r3,r2
    1ed4:	00000106 	br	1edc <alt_up_pixel_buffer_dma_draw_line+0x98>
    1ed8:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    1edc:	d8c00f17 	ldw	r3,60(sp)
    1ee0:	00800044 	movi	r2,1
    1ee4:	1880021e 	bne	r3,r2,1ef0 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    1ee8:	25800c17 	ldw	r22,48(r4)
    1eec:	00000106 	br	1ef4 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    1ef0:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    1ef4:	50000326 	beq	r10,zero,1f04 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    1ef8:	400d883a 	mov	r6,r8
    1efc:	4827883a 	mov	r19,r9
    1f00:	00000406 	br	1f14 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    1f04:	280d883a 	mov	r6,r5
    1f08:	400b883a 	mov	r5,r8
    1f0c:	3827883a 	mov	r19,r7
    1f10:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    1f14:	9980060e 	bge	r19,r6,1f30 <alt_up_pixel_buffer_dma_draw_line+0xec>
    1f18:	9805883a 	mov	r2,r19
    1f1c:	3027883a 	mov	r19,r6
    1f20:	100d883a 	mov	r6,r2
    1f24:	3805883a 	mov	r2,r7
    1f28:	280f883a 	mov	r7,r5
    1f2c:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    1f30:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    1f34:	3969c83a 	sub	r20,r7,r5
    1f38:	a000010e 	bge	r20,zero,1f40 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    1f3c:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    1f40:	a804d7fa 	srli	r2,r21,31
    1f44:	1545883a 	add	r2,r2,r21
    1f48:	1005d07a 	srai	r2,r2,1
    1f4c:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    1f50:	29c0020e 	bge	r5,r7,1f5c <alt_up_pixel_buffer_dma_draw_line+0x118>
    1f54:	07000044 	movi	fp,1
    1f58:	00000106 	br	1f60 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    1f5c:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    1f60:	50000226 	beq	r10,zero,1f6c <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    1f64:	9980030e 	bge	r19,r6,1f74 <alt_up_pixel_buffer_dma_draw_line+0x130>
    1f68:	00002506 	br	2000 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1f6c:	9980130e 	bge	r19,r6,1fbc <alt_up_pixel_buffer_dma_draw_line+0x178>
    1f70:	00002306 	br	2000 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1f74:	3021883a 	mov	r16,r6
    1f78:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    1f7c:	d8800e17 	ldw	r2,56(sp)
    1f80:	d8800015 	stw	r2,0(sp)
    1f84:	d8c00217 	ldw	r3,8(sp)
    1f88:	d8c00115 	stw	r3,4(sp)
    1f8c:	b009883a 	mov	r4,r22
    1f90:	b80b883a 	mov	r5,r23
    1f94:	900d883a 	mov	r6,r18
    1f98:	800f883a 	mov	r7,r16
    1f9c:	0001de80 	call	1de8 <helper_plot_pixel>
			error = error + deltay;
    1fa0:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1fa4:	0440020e 	bge	zero,r17,1fb0 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    1fa8:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1fac:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    1fb0:	84000044 	addi	r16,r16,1
    1fb4:	9c001216 	blt	r19,r16,2000 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1fb8:	003ff006 	br	1f7c <alt_up_pixel_buffer_dma_draw_line+0x138>
    1fbc:	3021883a 	mov	r16,r6
    1fc0:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    1fc4:	d8800e17 	ldw	r2,56(sp)
    1fc8:	d8800015 	stw	r2,0(sp)
    1fcc:	d8c00217 	ldw	r3,8(sp)
    1fd0:	d8c00115 	stw	r3,4(sp)
    1fd4:	b009883a 	mov	r4,r22
    1fd8:	b80b883a 	mov	r5,r23
    1fdc:	800d883a 	mov	r6,r16
    1fe0:	900f883a 	mov	r7,r18
    1fe4:	0001de80 	call	1de8 <helper_plot_pixel>
			error = error + deltay;
    1fe8:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1fec:	0440020e 	bge	zero,r17,1ff8 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    1ff0:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1ff4:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1ff8:	84000044 	addi	r16,r16,1
    1ffc:	9c3ff10e 	bge	r19,r16,1fc4 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    2000:	dfc00c17 	ldw	ra,48(sp)
    2004:	df000b17 	ldw	fp,44(sp)
    2008:	ddc00a17 	ldw	r23,40(sp)
    200c:	dd800917 	ldw	r22,36(sp)
    2010:	dd400817 	ldw	r21,32(sp)
    2014:	dd000717 	ldw	r20,28(sp)
    2018:	dcc00617 	ldw	r19,24(sp)
    201c:	dc800517 	ldw	r18,20(sp)
    2020:	dc400417 	ldw	r17,16(sp)
    2024:	dc000317 	ldw	r16,12(sp)
    2028:	dec00d04 	addi	sp,sp,52
    202c:	f800283a 	ret

00002030 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2030:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    2034:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    2038:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    203c:	3980022e 	bgeu	r7,r6,2048 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    2040:	3011883a 	mov	r8,r6
    2044:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    2048:	2a405d2e 	bgeu	r5,r9,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    204c:	30805c2e 	bgeu	r6,r2,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2050:	40800136 	bltu	r8,r2,2058 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    2054:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2058:	d8c00117 	ldw	r3,4(sp)
    205c:	00800044 	movi	r2,1
    2060:	1880021e 	bne	r3,r2,206c <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    2064:	20c00c17 	ldw	r3,48(r4)
    2068:	00000106 	br	2070 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    206c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2070:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2074:	20800d17 	ldw	r2,52(r4)
    2078:	1000281e 	bne	r2,zero,211c <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    207c:	22801317 	ldw	r10,76(r4)
    2080:	3284983a 	sll	r2,r6,r10
    2084:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2088:	21000e17 	ldw	r4,56(r4)
    208c:	00800044 	movi	r2,1
    2090:	2080091e 	bne	r4,r2,20b8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    2094:	41804a36 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2098:	1013883a 	mov	r9,r2
    209c:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    20a0:	1945883a 	add	r2,r3,r5
    20a4:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    20a8:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    20ac:	324d883a 	add	r6,r6,r9
    20b0:	41804336 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    20b4:	003ffa06 	br	20a0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    20b8:	00800084 	movi	r2,2
    20bc:	2080021e 	bne	r4,r2,20c8 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    20c0:	4180032e 	bgeu	r8,r6,20d0 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    20c4:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    20c8:	41800a2e 	bgeu	r8,r6,20f4 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    20cc:	f800283a 	ret
    20d0:	294b883a 	add	r5,r5,r5
    20d4:	02400044 	movi	r9,1
    20d8:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    20dc:	28c5883a 	add	r2,r5,r3
    20e0:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    20e4:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    20e8:	324d883a 	add	r6,r6,r9
    20ec:	41803436 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    20f0:	003ffa06 	br	20dc <alt_up_pixel_buffer_dma_draw_vline+0xac>
    20f4:	2945883a 	add	r2,r5,r5
    20f8:	108b883a 	add	r5,r2,r2
    20fc:	02400044 	movi	r9,1
    2100:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    2104:	28c5883a 	add	r2,r5,r3
    2108:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    210c:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2110:	324d883a 	add	r6,r6,r9
    2114:	41802a36 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2118:	003ffa06 	br	2104 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    211c:	21000e17 	ldw	r4,56(r4)
    2120:	00800044 	movi	r2,1
    2124:	20800b1e 	bne	r4,r2,2154 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2128:	41802536 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    212c:	4809883a 	mov	r4,r9
    2130:	3245383a 	mul	r2,r6,r9
    2134:	1885883a 	add	r2,r3,r2
    2138:	1145883a 	add	r2,r2,r5
    213c:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    2140:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2144:	30cd883a 	add	r6,r6,r3
    2148:	1105883a 	add	r2,r2,r4
    214c:	41801c36 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2150:	003ffb06 	br	2140 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2154:	00800084 	movi	r2,2
    2158:	20800c1e 	bne	r4,r2,218c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    215c:	41801836 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    2160:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    2164:	3105383a 	mul	r2,r6,r4
    2168:	1887883a 	add	r3,r3,r2
    216c:	294b883a 	add	r5,r5,r5
    2170:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2174:	28c5883a 	add	r2,r5,r3
    2178:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    217c:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2180:	324d883a 	add	r6,r6,r9
    2184:	41800e36 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2188:	003ffa06 	br	2174 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    218c:	41800c36 	bltu	r8,r6,21c0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    2190:	4a45883a 	add	r2,r9,r9
    2194:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    2198:	3105383a 	mul	r2,r6,r4
    219c:	1887883a 	add	r3,r3,r2
    21a0:	2945883a 	add	r2,r5,r5
    21a4:	108b883a 	add	r5,r2,r2
    21a8:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    21ac:	28c5883a 	add	r2,r5,r3
    21b0:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    21b4:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    21b8:	324d883a 	add	r6,r6,r9
    21bc:	41bffb2e 	bgeu	r8,r6,21ac <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    21c0:	f800283a 	ret

000021c4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    21c4:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    21c8:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    21cc:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    21d0:	3140022e 	bgeu	r6,r5,21dc <alt_up_pixel_buffer_dma_draw_hline+0x18>
    21d4:	2813883a 	mov	r9,r5
    21d8:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    21dc:	2a00552e 	bgeu	r5,r8,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    21e0:	3880542e 	bgeu	r7,r2,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    21e4:	4a000136 	bltu	r9,r8,21ec <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    21e8:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    21ec:	d8c00117 	ldw	r3,4(sp)
    21f0:	00800044 	movi	r2,1
    21f4:	1880021e 	bne	r3,r2,2200 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    21f8:	21800c17 	ldw	r6,48(r4)
    21fc:	00000106 	br	2204 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    2200:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    2204:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2208:	20800d17 	ldw	r2,52(r4)
    220c:	1000231e 	bne	r2,zero,229c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    2210:	20801317 	ldw	r2,76(r4)
    2214:	3884983a 	sll	r2,r7,r2
    2218:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    221c:	21000e17 	ldw	r4,56(r4)
    2220:	00800044 	movi	r2,1
    2224:	2080081e 	bne	r4,r2,2248 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    2228:	49404236 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    222c:	3945883a 	add	r2,r7,r5
    2230:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    2234:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2238:	290b883a 	add	r5,r5,r4
    223c:	1105883a 	add	r2,r2,r4
    2240:	49403c36 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2244:	003ffb06 	br	2234 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2248:	00800084 	movi	r2,2
    224c:	2080021e 	bne	r4,r2,2258 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    2250:	4940032e 	bgeu	r9,r5,2260 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    2254:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2258:	4940082e 	bgeu	r9,r5,227c <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    225c:	f800283a 	ret
    2260:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2264:	2945883a 	add	r2,r5,r5
    2268:	11c5883a 	add	r2,r2,r7
    226c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2270:	290b883a 	add	r5,r5,r4
    2274:	49402f36 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2278:	003ffa06 	br	2264 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    227c:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2280:	2945883a 	add	r2,r5,r5
    2284:	1085883a 	add	r2,r2,r2
    2288:	11c5883a 	add	r2,r2,r7
    228c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2290:	290b883a 	add	r5,r5,r4
    2294:	49402736 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2298:	003ff906 	br	2280 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    229c:	21000e17 	ldw	r4,56(r4)
    22a0:	00800044 	movi	r2,1
    22a4:	20800a1e 	bne	r4,r2,22d0 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    22a8:	41c5383a 	mul	r2,r8,r7
    22ac:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    22b0:	49402036 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    22b4:	1145883a 	add	r2,r2,r5
    22b8:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    22bc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    22c0:	290b883a 	add	r5,r5,r4
    22c4:	1105883a 	add	r2,r2,r4
    22c8:	49401a36 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    22cc:	003ffb06 	br	22bc <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    22d0:	00800084 	movi	r2,2
    22d4:	20800b1e 	bne	r4,r2,2304 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    22d8:	4205883a 	add	r2,r8,r8
    22dc:	3885383a 	mul	r2,r7,r2
    22e0:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    22e4:	49401336 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    22e8:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    22ec:	2945883a 	add	r2,r5,r5
    22f0:	11c5883a 	add	r2,r2,r7
    22f4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    22f8:	290b883a 	add	r5,r5,r4
    22fc:	49400d36 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2300:	003ffa06 	br	22ec <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    2304:	4205883a 	add	r2,r8,r8
    2308:	1085883a 	add	r2,r2,r2
    230c:	3885383a 	mul	r2,r7,r2
    2310:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    2314:	49400736 	bltu	r9,r5,2334 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2318:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    231c:	2945883a 	add	r2,r5,r5
    2320:	1085883a 	add	r2,r2,r2
    2324:	11c5883a 	add	r2,r2,r7
    2328:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    232c:	290b883a 	add	r5,r5,r4
    2330:	497ffa2e 	bgeu	r9,r5,231c <alt_up_pixel_buffer_dma_draw_hline+0x158>
    2334:	f800283a 	ret

00002338 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    2338:	defff604 	addi	sp,sp,-40
    233c:	dfc00915 	stw	ra,36(sp)
    2340:	dd800815 	stw	r22,32(sp)
    2344:	dd400715 	stw	r21,28(sp)
    2348:	dd000615 	stw	r20,24(sp)
    234c:	dcc00515 	stw	r19,20(sp)
    2350:	dc800415 	stw	r18,16(sp)
    2354:	dc400315 	stw	r17,12(sp)
    2358:	dc000215 	stw	r16,8(sp)
    235c:	2029883a 	mov	r20,r4
    2360:	282d883a 	mov	r22,r5
    2364:	302b883a 	mov	r21,r6
    2368:	3825883a 	mov	r18,r7
    236c:	dcc00a17 	ldw	r19,40(sp)
    2370:	dc000b17 	ldw	r16,44(sp)
    2374:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    2378:	dc000015 	stw	r16,0(sp)
    237c:	dc400115 	stw	r17,4(sp)
    2380:	380d883a 	mov	r6,r7
    2384:	a80f883a 	mov	r7,r21
    2388:	00021c40 	call	21c4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    238c:	dc000015 	stw	r16,0(sp)
    2390:	dc400115 	stw	r17,4(sp)
    2394:	a009883a 	mov	r4,r20
    2398:	b00b883a 	mov	r5,r22
    239c:	900d883a 	mov	r6,r18
    23a0:	980f883a 	mov	r7,r19
    23a4:	00021c40 	call	21c4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    23a8:	dc000015 	stw	r16,0(sp)
    23ac:	dc400115 	stw	r17,4(sp)
    23b0:	a009883a 	mov	r4,r20
    23b4:	b00b883a 	mov	r5,r22
    23b8:	a80d883a 	mov	r6,r21
    23bc:	980f883a 	mov	r7,r19
    23c0:	00020300 	call	2030 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    23c4:	dc000015 	stw	r16,0(sp)
    23c8:	dc400115 	stw	r17,4(sp)
    23cc:	a009883a 	mov	r4,r20
    23d0:	900b883a 	mov	r5,r18
    23d4:	a80d883a 	mov	r6,r21
    23d8:	980f883a 	mov	r7,r19
    23dc:	00020300 	call	2030 <alt_up_pixel_buffer_dma_draw_vline>
}
    23e0:	dfc00917 	ldw	ra,36(sp)
    23e4:	dd800817 	ldw	r22,32(sp)
    23e8:	dd400717 	ldw	r21,28(sp)
    23ec:	dd000617 	ldw	r20,24(sp)
    23f0:	dcc00517 	ldw	r19,20(sp)
    23f4:	dc800417 	ldw	r18,16(sp)
    23f8:	dc400317 	ldw	r17,12(sp)
    23fc:	dc000217 	ldw	r16,8(sp)
    2400:	dec00a04 	addi	sp,sp,40
    2404:	f800283a 	ret

00002408 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2408:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    240c:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2410:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    2414:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    2418:	3940022e 	bgeu	r7,r5,2424 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    241c:	2811883a 	mov	r8,r5
    2420:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    2424:	5980032e 	bgeu	r11,r6,2434 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    2428:	5805883a 	mov	r2,r11
    242c:	3017883a 	mov	r11,r6
    2430:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    2434:	2a80842e 	bgeu	r5,r10,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2438:	30c0832e 	bgeu	r6,r3,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    243c:	42800136 	bltu	r8,r10,2444 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    2440:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2444:	58c00136 	bltu	r11,r3,244c <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    2448:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    244c:	d8c00217 	ldw	r3,8(sp)
    2450:	00800044 	movi	r2,1
    2454:	1880021e 	bne	r3,r2,2460 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    2458:	20c00c17 	ldw	r3,48(r4)
    245c:	00000106 	br	2464 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    2460:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2464:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2468:	20800d17 	ldw	r2,52(r4)
    246c:	1000391e 	bne	r2,zero,2554 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2470:	22801317 	ldw	r10,76(r4)
    2474:	3284983a 	sll	r2,r6,r10
    2478:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    247c:	21000e17 	ldw	r4,56(r4)
    2480:	00800044 	movi	r2,1
    2484:	2080101e 	bne	r4,r2,24c8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    2488:	59806f36 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
    248c:	00000a06 	br	24b8 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2490:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2494:	00800044 	movi	r2,1
    2498:	1887883a 	add	r3,r3,r2
    249c:	2089883a 	add	r4,r4,r2
    24a0:	40fffb2e 	bgeu	r8,r3,2490 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    24a4:	00800044 	movi	r2,1
    24a8:	308d883a 	add	r6,r6,r2
    24ac:	59806636 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    24b0:	1284983a 	sll	r2,r2,r10
    24b4:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    24b8:	417ffa36 	bltu	r8,r5,24a4 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    24bc:	29c9883a 	add	r4,r5,r7
    24c0:	2807883a 	mov	r3,r5
    24c4:	003ff206 	br	2490 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    24c8:	00800084 	movi	r2,2
    24cc:	2080021e 	bne	r4,r2,24d8 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    24d0:	59805d36 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
    24d4:	00000e06 	br	2510 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    24d8:	59805b36 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
    24dc:	00001b06 	br	254c <alt_up_pixel_buffer_dma_draw_box+0x144>
    24e0:	2807883a 	mov	r3,r5
    24e4:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    24e8:	18c5883a 	add	r2,r3,r3
    24ec:	11c5883a 	add	r2,r2,r7
    24f0:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    24f4:	1907883a 	add	r3,r3,r4
    24f8:	40fffb2e 	bgeu	r8,r3,24e8 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    24fc:	00800044 	movi	r2,1
    2500:	308d883a 	add	r6,r6,r2
    2504:	59805036 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    2508:	1284983a 	sll	r2,r2,r10
    250c:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2510:	417ff32e 	bgeu	r8,r5,24e0 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    2514:	003ff906 	br	24fc <alt_up_pixel_buffer_dma_draw_box+0xf4>
    2518:	2807883a 	mov	r3,r5
    251c:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    2520:	18c5883a 	add	r2,r3,r3
    2524:	1085883a 	add	r2,r2,r2
    2528:	11c5883a 	add	r2,r2,r7
    252c:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2530:	1907883a 	add	r3,r3,r4
    2534:	40fffa2e 	bgeu	r8,r3,2520 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2538:	00800044 	movi	r2,1
    253c:	308d883a 	add	r6,r6,r2
    2540:	59804136 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    2544:	1284983a 	sll	r2,r2,r10
    2548:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    254c:	417ff22e 	bgeu	r8,r5,2518 <alt_up_pixel_buffer_dma_draw_box+0x110>
    2550:	003ff906 	br	2538 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2554:	21000e17 	ldw	r4,56(r4)
    2558:	00800044 	movi	r2,1
    255c:	2080121e 	bne	r4,r2,25a8 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2560:	59803936 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2564:	5019883a 	mov	r12,r10
    2568:	3285383a 	mul	r2,r6,r10
    256c:	1885883a 	add	r2,r3,r2
    2570:	114f883a 	add	r7,r2,r5
    2574:	00000806 	br	2598 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2578:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    257c:	00800044 	movi	r2,1
    2580:	1887883a 	add	r3,r3,r2
    2584:	2089883a 	add	r4,r4,r2
    2588:	40fffb2e 	bgeu	r8,r3,2578 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    258c:	31800044 	addi	r6,r6,1
    2590:	3b0f883a 	add	r7,r7,r12
    2594:	59802c36 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    2598:	417ffc36 	bltu	r8,r5,258c <alt_up_pixel_buffer_dma_draw_box+0x184>
    259c:	3809883a 	mov	r4,r7
    25a0:	2807883a 	mov	r3,r5
    25a4:	003ff406 	br	2578 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    25a8:	00800084 	movi	r2,2
    25ac:	2080121e 	bne	r4,r2,25f8 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    25b0:	59802536 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    25b4:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    25b8:	3285383a 	mul	r2,r6,r10
    25bc:	1889883a 	add	r4,r3,r2
    25c0:	03000044 	movi	r12,1
    25c4:	00000a06 	br	25f0 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    25c8:	2807883a 	mov	r3,r5
    25cc:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    25d0:	18c5883a 	add	r2,r3,r3
    25d4:	1105883a 	add	r2,r2,r4
    25d8:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    25dc:	19c7883a 	add	r3,r3,r7
    25e0:	40fffb2e 	bgeu	r8,r3,25d0 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    25e4:	330d883a 	add	r6,r6,r12
    25e8:	59801736 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    25ec:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    25f0:	417ff52e 	bgeu	r8,r5,25c8 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    25f4:	003ffb06 	br	25e4 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    25f8:	59801336 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    25fc:	5285883a 	add	r2,r10,r10
    2600:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    2604:	3285383a 	mul	r2,r6,r10
    2608:	1889883a 	add	r4,r3,r2
    260c:	03000044 	movi	r12,1
    2610:	00000b06 	br	2640 <alt_up_pixel_buffer_dma_draw_box+0x238>
    2614:	2807883a 	mov	r3,r5
    2618:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    261c:	18c5883a 	add	r2,r3,r3
    2620:	1085883a 	add	r2,r2,r2
    2624:	1105883a 	add	r2,r2,r4
    2628:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    262c:	19c7883a 	add	r3,r3,r7
    2630:	40fffa2e 	bgeu	r8,r3,261c <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2634:	330d883a 	add	r6,r6,r12
    2638:	59800336 	bltu	r11,r6,2648 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    263c:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2640:	417ff42e 	bgeu	r8,r5,2614 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    2644:	003ffb06 	br	2634 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    2648:	f800283a 	ret

0000264c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    264c:	00800044 	movi	r2,1
    2650:	2880021e 	bne	r5,r2,265c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2654:	21c00c17 	ldw	r7,48(r4)
    2658:	00000106 	br	2660 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    265c:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2660:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2664:	20c00e17 	ldw	r3,56(r4)
    2668:	00800084 	movi	r2,2
    266c:	1880021e 	bne	r3,r2,2678 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2670:	294d883a 	add	r6,r5,r5
    2674:	00000206 	br	2680 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2678:	2945883a 	add	r2,r5,r5
    267c:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2680:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2684:	20800d17 	ldw	r2,52(r4)
    2688:	1000121e 	bne	r2,zero,26d4 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    268c:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2690:	48001a26 	beq	r9,zero,26fc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2694:	0011883a 	mov	r8,zero
    2698:	3014c03a 	cmpne	r10,r6,zero
    269c:	00000b06 	br	26cc <alt_up_pixel_buffer_dma_clear_screen+0x80>
    26a0:	0007883a 	mov	r3,zero
    26a4:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    26a8:	19c5883a 	add	r2,r3,r7
    26ac:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    26b0:	1947883a 	add	r3,r3,r5
    26b4:	19bffc36 	bltu	r3,r6,26a8 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    26b8:	00800044 	movi	r2,1
    26bc:	4091883a 	add	r8,r8,r2
    26c0:	4a000e26 	beq	r9,r8,26fc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    26c4:	1104983a 	sll	r2,r2,r4
    26c8:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    26cc:	503ff41e 	bne	r10,zero,26a0 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    26d0:	003ff906 	br	26b8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    26d4:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    26d8:	20000826 	beq	r4,zero,26fc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    26dc:	0007883a 	mov	r3,zero
    26e0:	0005883a 	mov	r2,zero
    26e4:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    26e8:	3885883a 	add	r2,r7,r2
    26ec:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    26f0:	1945883a 	add	r2,r3,r5
    26f4:	1007883a 	mov	r3,r2
    26f8:	113ffb36 	bltu	r2,r4,26e8 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    26fc:	f800283a 	ret

00002700 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    2700:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    2704:	20c00a17 	ldw	r3,40(r4)
    2708:	00800044 	movi	r2,1
    270c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    2710:	20800b17 	ldw	r2,44(r4)
    2714:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    2718:	21400b15 	stw	r5,44(r4)
	return 0;
}
    271c:	0005883a 	mov	r2,zero
    2720:	f800283a 	ret

00002724 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    2724:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    2728:	22400f17 	ldw	r9,60(r4)
    272c:	32402a2e 	bgeu	r6,r9,27d8 <alt_up_pixel_buffer_dma_draw+0xb4>
    2730:	20801017 	ldw	r2,64(r4)
    2734:	3880282e 	bgeu	r7,r2,27d8 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2738:	20800d17 	ldw	r2,52(r4)
    273c:	10000a1e 	bne	r2,zero,2768 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    2740:	21001217 	ldw	r4,72(r4)
    2744:	3108703a 	and	r4,r6,r4
    2748:	40801117 	ldw	r2,68(r8)
    274c:	2088983a 	sll	r4,r4,r2
    2750:	40801417 	ldw	r2,80(r8)
    2754:	3884703a 	and	r2,r7,r2
    2758:	40c01317 	ldw	r3,76(r8)
    275c:	10c4983a 	sll	r2,r2,r3
    2760:	2086b03a 	or	r3,r4,r2
    2764:	00000806 	br	2788 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2768:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    276c:	40c01217 	ldw	r3,72(r8)
    2770:	30c6703a 	and	r3,r6,r3
    2774:	40801417 	ldw	r2,80(r8)
    2778:	3884703a 	and	r2,r7,r2
    277c:	4885383a 	mul	r2,r9,r2
    2780:	10c5883a 	add	r2,r2,r3
    2784:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2788:	42400e17 	ldw	r9,56(r8)
    278c:	00800044 	movi	r2,1
    2790:	4880051e 	bne	r9,r2,27a8 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2794:	40800c17 	ldw	r2,48(r8)
    2798:	1885883a 	add	r2,r3,r2
    279c:	11400025 	stbio	r5,0(r2)
    27a0:	0005883a 	mov	r2,zero
    27a4:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    27a8:	00800084 	movi	r2,2
    27ac:	4880051e 	bne	r9,r2,27c4 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    27b0:	40800c17 	ldw	r2,48(r8)
    27b4:	1885883a 	add	r2,r3,r2
    27b8:	1140002d 	sthio	r5,0(r2)
    27bc:	0005883a 	mov	r2,zero
    27c0:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    27c4:	40800c17 	ldw	r2,48(r8)
    27c8:	1885883a 	add	r2,r3,r2
    27cc:	11400035 	stwio	r5,0(r2)
    27d0:	0005883a 	mov	r2,zero
    27d4:	f800283a 	ret
    27d8:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    27dc:	f800283a 	ret

000027e0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    27e0:	20800a17 	ldw	r2,40(r4)
    27e4:	10800337 	ldwio	r2,12(r2)
}
    27e8:	1080004c 	andi	r2,r2,1
    27ec:	f800283a 	ret

000027f0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    27f0:	00c00104 	movi	r3,4
    27f4:	20800a17 	ldw	r2,40(r4)
    27f8:	10c5883a 	add	r2,r2,r3
    27fc:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    2800:	20800a17 	ldw	r2,40(r4)
    2804:	10c5883a 	add	r2,r2,r3
    2808:	10800037 	ldwio	r2,0(r2)
    280c:	20800c15 	stw	r2,48(r4)
	return 0;
}
    2810:	0005883a 	mov	r2,zero
    2814:	f800283a 	ret

00002818 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    2818:	deffff04 	addi	sp,sp,-4
    281c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    2820:	01400034 	movhi	r5,0
    2824:	295d5f04 	addi	r5,r5,30076
    2828:	0002a240 	call	2a24 <alt_find_dev>

  return dev;
}
    282c:	dfc00017 	ldw	ra,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2838:	00800074 	movhi	r2,1
    283c:	10a4bc04 	addi	r2,r2,-27920
    2840:	10800017 	ldw	r2,0(r2)
    2844:	1000021e 	bne	r2,zero,2850 <alt_alarm_start+0x18>
    2848:	00bfde84 	movi	r2,-134
    284c:	f800283a 	ret
  {
    if (alarm)
    2850:	2000021e 	bne	r4,zero,285c <alt_alarm_start+0x24>
    2854:	00bffa84 	movi	r2,-22
    2858:	f800283a 	ret
    {
      alarm->callback = callback;
    285c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2860:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2864:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2868:	00bfff84 	movi	r2,-2
    286c:	3884703a 	and	r2,r7,r2
    2870:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2874:	00800074 	movhi	r2,1
    2878:	10a4bd04 	addi	r2,r2,-27916
    287c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2880:	01800044 	movi	r6,1
    2884:	1985883a 	add	r2,r3,r6
    2888:	2885883a 	add	r2,r5,r2
    288c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2890:	10c0022e 	bgeu	r2,r3,289c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2894:	21800405 	stb	r6,16(r4)
    2898:	00000106 	br	28a0 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    289c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    28a0:	00800034 	movhi	r2,0
    28a4:	109d6404 	addi	r2,r2,30096
    28a8:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    28ac:	10c00017 	ldw	r3,0(r2)
    28b0:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    28b4:	10c00017 	ldw	r3,0(r2)
    28b8:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    28bc:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28c0:	3801703a 	wrctl	status,r7
    28c4:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    28c8:	f800283a 	ret

000028cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    28cc:	defffd04 	addi	sp,sp,-12
    28d0:	dfc00215 	stw	ra,8(sp)
    28d4:	dc400115 	stw	r17,4(sp)
    28d8:	dc000015 	stw	r16,0(sp)
    28dc:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    28e0:	20001c16 	blt	r4,zero,2954 <close+0x88>
    28e4:	20c00324 	muli	r3,r4,12
    28e8:	00800034 	movhi	r2,0
    28ec:	109afb04 	addi	r2,r2,27628
    28f0:	1889883a 	add	r4,r3,r2

  if (fd)
    28f4:	20001726 	beq	r4,zero,2954 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    28f8:	20800017 	ldw	r2,0(r4)
    28fc:	10800417 	ldw	r2,16(r2)
    2900:	10002126 	beq	r2,zero,2988 <close+0xbc>
    2904:	103ee83a 	callr	r2
    2908:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    290c:	8009883a 	mov	r4,r16
    2910:	0002de80 	call	2de8 <alt_release_fd>
    if (rval < 0)
    2914:	88000216 	blt	r17,zero,2920 <close+0x54>
    2918:	0005883a 	mov	r2,zero
    291c:	00001d06 	br	2994 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2920:	00800034 	movhi	r2,0
    2924:	109d6204 	addi	r2,r2,30088
    2928:	10800017 	ldw	r2,0(r2)
    292c:	1000031e 	bne	r2,zero,293c <close+0x70>
    2930:	00c00074 	movhi	r3,1
    2934:	18e4be04 	addi	r3,r3,-27912
    2938:	00000206 	br	2944 <close+0x78>
    293c:	103ee83a 	callr	r2
    2940:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2944:	0445c83a 	sub	r2,zero,r17
    2948:	18800015 	stw	r2,0(r3)
    294c:	00bfffc4 	movi	r2,-1
    2950:	00001006 	br	2994 <close+0xc8>
    2954:	00800034 	movhi	r2,0
    2958:	109d6204 	addi	r2,r2,30088
    295c:	10800017 	ldw	r2,0(r2)
    2960:	1000031e 	bne	r2,zero,2970 <close+0xa4>
    2964:	00c00074 	movhi	r3,1
    2968:	18e4be04 	addi	r3,r3,-27912
    296c:	00000206 	br	2978 <close+0xac>
    2970:	103ee83a 	callr	r2
    2974:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2978:	00801444 	movi	r2,81
    297c:	18800015 	stw	r2,0(r3)
    2980:	00bfffc4 	movi	r2,-1
    2984:	00000306 	br	2994 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2988:	8009883a 	mov	r4,r16
    298c:	0002de80 	call	2de8 <alt_release_fd>
    2990:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2994:	dfc00217 	ldw	ra,8(sp)
    2998:	dc400117 	ldw	r17,4(sp)
    299c:	dc000017 	ldw	r16,0(sp)
    29a0:	dec00304 	addi	sp,sp,12
    29a4:	f800283a 	ret

000029a8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    29a8:	f800283a 	ret

000029ac <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    29ac:	3005883a 	mov	r2,r6
    29b0:	f800283a 	ret

000029b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    29b4:	deffff04 	addi	sp,sp,-4
    29b8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    29bc:	20000226 	beq	r4,zero,29c8 <alt_dev_llist_insert+0x14>
    29c0:	20800217 	ldw	r2,8(r4)
    29c4:	10000d1e 	bne	r2,zero,29fc <alt_dev_llist_insert+0x48>
    29c8:	00800034 	movhi	r2,0
    29cc:	109d6204 	addi	r2,r2,30088
    29d0:	10800017 	ldw	r2,0(r2)
    29d4:	1000031e 	bne	r2,zero,29e4 <alt_dev_llist_insert+0x30>
    29d8:	00c00074 	movhi	r3,1
    29dc:	18e4be04 	addi	r3,r3,-27912
    29e0:	00000206 	br	29ec <alt_dev_llist_insert+0x38>
    29e4:	103ee83a 	callr	r2
    29e8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    29ec:	00800584 	movi	r2,22
    29f0:	18800015 	stw	r2,0(r3)
    29f4:	00bffa84 	movi	r2,-22
    29f8:	00000706 	br	2a18 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    29fc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2a00:	28800017 	ldw	r2,0(r5)
    2a04:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2a08:	28800017 	ldw	r2,0(r5)
    2a0c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2a10:	29000015 	stw	r4,0(r5)
    2a14:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2a18:	dfc00017 	ldw	ra,0(sp)
    2a1c:	dec00104 	addi	sp,sp,4
    2a20:	f800283a 	ret

00002a24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2a24:	defffb04 	addi	sp,sp,-20
    2a28:	dfc00415 	stw	ra,16(sp)
    2a2c:	dcc00315 	stw	r19,12(sp)
    2a30:	dc800215 	stw	r18,8(sp)
    2a34:	dc400115 	stw	r17,4(sp)
    2a38:	dc000015 	stw	r16,0(sp)
    2a3c:	2027883a 	mov	r19,r4
    2a40:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2a44:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2a48:	000344c0 	call	344c <strlen>
    2a4c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2a50:	8c000726 	beq	r17,r16,2a70 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2a54:	89000217 	ldw	r4,8(r17)
    2a58:	980b883a 	mov	r5,r19
    2a5c:	900d883a 	mov	r6,r18
    2a60:	00030900 	call	3090 <memcmp>
    2a64:	10000326 	beq	r2,zero,2a74 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2a68:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2a6c:	847ff91e 	bne	r16,r17,2a54 <alt_find_dev+0x30>
    2a70:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2a74:	8805883a 	mov	r2,r17
    2a78:	dfc00417 	ldw	ra,16(sp)
    2a7c:	dcc00317 	ldw	r19,12(sp)
    2a80:	dc800217 	ldw	r18,8(sp)
    2a84:	dc400117 	ldw	r17,4(sp)
    2a88:	dc000017 	ldw	r16,0(sp)
    2a8c:	dec00504 	addi	sp,sp,20
    2a90:	f800283a 	ret

00002a94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2a94:	deffff04 	addi	sp,sp,-4
    2a98:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2a9c:	0009883a 	mov	r4,zero
    2aa0:	01440004 	movi	r5,4096
    2aa4:	000301c0 	call	301c <alt_icache_flush>
#endif
}
    2aa8:	dfc00017 	ldw	ra,0(sp)
    2aac:	dec00104 	addi	sp,sp,4
    2ab0:	f800283a 	ret

00002ab4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2ab4:	defffe04 	addi	sp,sp,-8
    2ab8:	dfc00115 	stw	ra,4(sp)
    2abc:	dc000015 	stw	r16,0(sp)
    2ac0:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2ac4:	2809883a 	mov	r4,r5
    2ac8:	300b883a 	mov	r5,r6
    2acc:	380d883a 	mov	r6,r7
    2ad0:	0002c6c0 	call	2c6c <open>
    2ad4:	1009883a 	mov	r4,r2

  if (old >= 0)
    2ad8:	10000b16 	blt	r2,zero,2b08 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    2adc:	10c00324 	muli	r3,r2,12
    2ae0:	00800034 	movhi	r2,0
    2ae4:	109afb04 	addi	r2,r2,27628
    2ae8:	1887883a 	add	r3,r3,r2
    2aec:	18800017 	ldw	r2,0(r3)
    2af0:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2af4:	18800117 	ldw	r2,4(r3)
    2af8:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2afc:	18800217 	ldw	r2,8(r3)
    2b00:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    2b04:	0002de80 	call	2de8 <alt_release_fd>
  }
} 
    2b08:	dfc00117 	ldw	ra,4(sp)
    2b0c:	dc000017 	ldw	r16,0(sp)
    2b10:	dec00204 	addi	sp,sp,8
    2b14:	f800283a 	ret

00002b18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2b18:	defffa04 	addi	sp,sp,-24
    2b1c:	dfc00515 	stw	ra,20(sp)
    2b20:	dd000415 	stw	r20,16(sp)
    2b24:	dcc00315 	stw	r19,12(sp)
    2b28:	dc800215 	stw	r18,8(sp)
    2b2c:	dc400115 	stw	r17,4(sp)
    2b30:	dc000015 	stw	r16,0(sp)
    2b34:	2005883a 	mov	r2,r4
    2b38:	2827883a 	mov	r19,r5
    2b3c:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2b40:	04000034 	movhi	r16,0
    2b44:	841afe04 	addi	r16,r16,27640
    2b48:	04800044 	movi	r18,1
    2b4c:	04407fc4 	movi	r17,511
    2b50:	8009883a 	mov	r4,r16
    2b54:	100b883a 	mov	r5,r2
    2b58:	900d883a 	mov	r6,r18
    2b5c:	880f883a 	mov	r7,r17
    2b60:	0002ab40 	call	2ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2b64:	843ffd04 	addi	r16,r16,-12
    2b68:	8009883a 	mov	r4,r16
    2b6c:	980b883a 	mov	r5,r19
    2b70:	000d883a 	mov	r6,zero
    2b74:	880f883a 	mov	r7,r17
    2b78:	0002ab40 	call	2ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2b7c:	81000604 	addi	r4,r16,24
    2b80:	a00b883a 	mov	r5,r20
    2b84:	900d883a 	mov	r6,r18
    2b88:	880f883a 	mov	r7,r17
    2b8c:	0002ab40 	call	2ab4 <alt_open_fd>
}  
    2b90:	dfc00517 	ldw	ra,20(sp)
    2b94:	dd000417 	ldw	r20,16(sp)
    2b98:	dcc00317 	ldw	r19,12(sp)
    2b9c:	dc800217 	ldw	r18,8(sp)
    2ba0:	dc400117 	ldw	r17,4(sp)
    2ba4:	dc000017 	ldw	r16,0(sp)
    2ba8:	dec00604 	addi	sp,sp,24
    2bac:	f800283a 	ret

00002bb0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2bb0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2bb4:	008007c4 	movi	r2,31
    2bb8:	1100022e 	bgeu	r2,r4,2bc4 <alt_irq_register+0x14>
    2bbc:	00bffa84 	movi	r2,-22
    2bc0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2bc4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2bc8:	013fff84 	movi	r4,-2
    2bcc:	4104703a 	and	r2,r8,r4
    2bd0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2bd4:	380490fa 	slli	r2,r7,3
    2bd8:	00c00074 	movhi	r3,1
    2bdc:	18e4cc04 	addi	r3,r3,-27856
    2be0:	10c5883a 	add	r2,r2,r3
    2be4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2be8:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2bec:	30000e26 	beq	r6,zero,2c28 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2bf0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2bf4:	2904703a 	and	r2,r5,r4
    2bf8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2bfc:	00c00074 	movhi	r3,1
    2c00:	18e4bb04 	addi	r3,r3,-27924
    2c04:	19000017 	ldw	r4,0(r3)
    2c08:	00800044 	movi	r2,1
    2c0c:	11c4983a 	sll	r2,r2,r7
    2c10:	1104b03a 	or	r2,r2,r4
    2c14:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2c18:	18800017 	ldw	r2,0(r3)
    2c1c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c20:	2801703a 	wrctl	status,r5
    2c24:	00000e06 	br	2c60 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c28:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c2c:	00bfff84 	movi	r2,-2
    2c30:	2884703a 	and	r2,r5,r2
    2c34:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2c38:	00c00074 	movhi	r3,1
    2c3c:	18e4bb04 	addi	r3,r3,-27924
    2c40:	19000017 	ldw	r4,0(r3)
    2c44:	00bfff84 	movi	r2,-2
    2c48:	11c4183a 	rol	r2,r2,r7
    2c4c:	1104703a 	and	r2,r2,r4
    2c50:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2c54:	18800017 	ldw	r2,0(r3)
    2c58:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c5c:	2801703a 	wrctl	status,r5
    2c60:	4001703a 	wrctl	status,r8
    2c64:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2c68:	f800283a 	ret

00002c6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2c6c:	defff904 	addi	sp,sp,-28
    2c70:	dfc00615 	stw	ra,24(sp)
    2c74:	dd400515 	stw	r21,20(sp)
    2c78:	dd000415 	stw	r20,16(sp)
    2c7c:	dcc00315 	stw	r19,12(sp)
    2c80:	dc800215 	stw	r18,8(sp)
    2c84:	dc400115 	stw	r17,4(sp)
    2c88:	dc000015 	stw	r16,0(sp)
    2c8c:	2029883a 	mov	r20,r4
    2c90:	2827883a 	mov	r19,r5
    2c94:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2c98:	01400034 	movhi	r5,0
    2c9c:	295d5f04 	addi	r5,r5,30076
    2ca0:	0002a240 	call	2a24 <alt_find_dev>
    2ca4:	1021883a 	mov	r16,r2
    2ca8:	10000226 	beq	r2,zero,2cb4 <open+0x48>
    2cac:	0025883a 	mov	r18,zero
    2cb0:	00000a06 	br	2cdc <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2cb4:	a009883a 	mov	r4,r20
    2cb8:	0002ef40 	call	2ef4 <alt_find_file>
    2cbc:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2cc0:	1000051e 	bne	r2,zero,2cd8 <open+0x6c>
    2cc4:	047fffc4 	movi	r17,-1
    2cc8:	043ffb44 	movi	r16,-19
    2ccc:	00002b06 	br	2d7c <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2cd0:	043ffcc4 	movi	r16,-13
    2cd4:	00002906 	br	2d7c <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2cd8:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    2cdc:	8009883a 	mov	r4,r16
    2ce0:	0002fb00 	call	2fb0 <alt_get_fd>
    2ce4:	1023883a 	mov	r17,r2
    2ce8:	10003316 	blt	r2,zero,2db8 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2cec:	10800324 	muli	r2,r2,12
    2cf0:	02000034 	movhi	r8,0
    2cf4:	421afb04 	addi	r8,r8,27628
    2cf8:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2cfc:	00900034 	movhi	r2,16384
    2d00:	10bfffc4 	addi	r2,r2,-1
    2d04:	9886703a 	and	r3,r19,r2
    2d08:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2d0c:	9004c03a 	cmpne	r2,r18,zero
    2d10:	1000121e 	bne	r2,zero,2d5c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2d14:	18900034 	orhi	r2,r3,16384
    2d18:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2d1c:	00800034 	movhi	r2,0
    2d20:	109d6104 	addi	r2,r2,30084
    2d24:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2d28:	21800017 	ldw	r6,0(r4)
    2d2c:	000b883a 	mov	r5,zero
    2d30:	4007883a 	mov	r3,r8
    2d34:	02400044 	movi	r9,1
    2d38:	02000304 	movi	r8,12
    2d3c:	18800017 	ldw	r2,0(r3)
    2d40:	1180031e 	bne	r2,r6,2d50 <open+0xe4>
    2d44:	18800217 	ldw	r2,8(r3)
    2d48:	1000010e 	bge	r2,zero,2d50 <open+0xe4>
    2d4c:	193fe01e 	bne	r3,r4,2cd0 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2d50:	2a4b883a 	add	r5,r5,r9
    2d54:	1a07883a 	add	r3,r3,r8
    2d58:	397ff82e 	bgeu	r7,r5,2d3c <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2d5c:	80800317 	ldw	r2,12(r16)
    2d60:	10001726 	beq	r2,zero,2dc0 <open+0x154>
    2d64:	a00b883a 	mov	r5,r20
    2d68:	980d883a 	mov	r6,r19
    2d6c:	a80f883a 	mov	r7,r21
    2d70:	103ee83a 	callr	r2
    2d74:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2d78:	1000110e 	bge	r2,zero,2dc0 <open+0x154>
  {
    alt_release_fd (index);  
    2d7c:	8809883a 	mov	r4,r17
    2d80:	0002de80 	call	2de8 <alt_release_fd>
    2d84:	00800034 	movhi	r2,0
    2d88:	109d6204 	addi	r2,r2,30088
    2d8c:	10800017 	ldw	r2,0(r2)
    2d90:	1000031e 	bne	r2,zero,2da0 <open+0x134>
    2d94:	00c00074 	movhi	r3,1
    2d98:	18e4be04 	addi	r3,r3,-27912
    2d9c:	00000206 	br	2da8 <open+0x13c>
    2da0:	103ee83a 	callr	r2
    2da4:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2da8:	0405c83a 	sub	r2,zero,r16
    2dac:	18800015 	stw	r2,0(r3)
    2db0:	047fffc4 	movi	r17,-1
    2db4:	00000206 	br	2dc0 <open+0x154>
    2db8:	1021883a 	mov	r16,r2
    2dbc:	003fef06 	br	2d7c <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2dc0:	8805883a 	mov	r2,r17
    2dc4:	dfc00617 	ldw	ra,24(sp)
    2dc8:	dd400517 	ldw	r21,20(sp)
    2dcc:	dd000417 	ldw	r20,16(sp)
    2dd0:	dcc00317 	ldw	r19,12(sp)
    2dd4:	dc800217 	ldw	r18,8(sp)
    2dd8:	dc400117 	ldw	r17,4(sp)
    2ddc:	dc000017 	ldw	r16,0(sp)
    2de0:	dec00704 	addi	sp,sp,28
    2de4:	f800283a 	ret

00002de8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2de8:	00800084 	movi	r2,2
    2dec:	1100060e 	bge	r2,r4,2e08 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2df0:	20800324 	muli	r2,r4,12
    2df4:	00c00034 	movhi	r3,0
    2df8:	18dafb04 	addi	r3,r3,27628
    2dfc:	10c5883a 	add	r2,r2,r3
    2e00:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    2e04:	10000015 	stw	zero,0(r2)
    2e08:	f800283a 	ret

00002e0c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e0c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e10:	00bfff84 	movi	r2,-2
    2e14:	2884703a 	and	r2,r5,r2
    2e18:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2e1c:	20c00017 	ldw	r3,0(r4)
    2e20:	20800117 	ldw	r2,4(r4)
    2e24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2e28:	20800117 	ldw	r2,4(r4)
    2e2c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2e30:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2e34:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e38:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2e3c:	f800283a 	ret

00002e40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2e40:	defffd04 	addi	sp,sp,-12
    2e44:	dfc00215 	stw	ra,8(sp)
    2e48:	dc400115 	stw	r17,4(sp)
    2e4c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2e50:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2e54:	d0a76017 	ldw	r2,-25216(gp)
    2e58:	10800044 	addi	r2,r2,1
    2e5c:	d0a76015 	stw	r2,-25216(gp)
    2e60:	00001b06 	br	2ed0 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    2e64:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2e68:	80800403 	ldbu	r2,16(r16)
    2e6c:	10000326 	beq	r2,zero,2e7c <alt_tick+0x3c>
    2e70:	d0a76017 	ldw	r2,-25216(gp)
    2e74:	1000011e 	bne	r2,zero,2e7c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2e78:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2e7c:	d0e76017 	ldw	r3,-25216(gp)
    2e80:	80800217 	ldw	r2,8(r16)
    2e84:	18801136 	bltu	r3,r2,2ecc <alt_tick+0x8c>
    2e88:	80800403 	ldbu	r2,16(r16)
    2e8c:	10000f1e 	bne	r2,zero,2ecc <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2e90:	80800317 	ldw	r2,12(r16)
    2e94:	81000517 	ldw	r4,20(r16)
    2e98:	103ee83a 	callr	r2
    2e9c:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2ea0:	1000031e 	bne	r2,zero,2eb0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    2ea4:	8009883a 	mov	r4,r16
    2ea8:	0002e0c0 	call	2e0c <alt_alarm_stop>
    2eac:	00000706 	br	2ecc <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    2eb0:	80800217 	ldw	r2,8(r16)
    2eb4:	1885883a 	add	r2,r3,r2
    2eb8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2ebc:	d0e76017 	ldw	r3,-25216(gp)
    2ec0:	10c0022e 	bgeu	r2,r3,2ecc <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    2ec4:	00800044 	movi	r2,1
    2ec8:	80800405 	stb	r2,16(r16)
    2ecc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2ed0:	d0a00704 	addi	r2,gp,-32740
    2ed4:	80bfe31e 	bne	r16,r2,2e64 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2ed8:	dfc00217 	ldw	ra,8(sp)
    2edc:	dc400117 	ldw	r17,4(sp)
    2ee0:	dc000017 	ldw	r16,0(sp)
    2ee4:	dec00304 	addi	sp,sp,12
    2ee8:	f800283a 	ret

00002eec <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2eec:	000170fa 	wrctl	ienable,zero
}
    2ef0:	f800283a 	ret

00002ef4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2ef4:	defff904 	addi	sp,sp,-28
    2ef8:	dfc00615 	stw	ra,24(sp)
    2efc:	dd400515 	stw	r21,20(sp)
    2f00:	dd000415 	stw	r20,16(sp)
    2f04:	dcc00315 	stw	r19,12(sp)
    2f08:	dc800215 	stw	r18,8(sp)
    2f0c:	dc400115 	stw	r17,4(sp)
    2f10:	dc000015 	stw	r16,0(sp)
    2f14:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2f18:	00800034 	movhi	r2,0
    2f1c:	109d5d04 	addi	r2,r2,30068
    2f20:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2f24:	102b883a 	mov	r21,r2
    2f28:	88801626 	beq	r17,r2,2f84 <alt_find_file+0x90>
    2f2c:	053fffc4 	movi	r20,-1
    2f30:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    2f34:	8c000217 	ldw	r16,8(r17)
    2f38:	8009883a 	mov	r4,r16
    2f3c:	000344c0 	call	344c <strlen>
    2f40:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    2f44:	8085883a 	add	r2,r16,r2
    2f48:	1505883a 	add	r2,r2,r20
    2f4c:	10800007 	ldb	r2,0(r2)
    2f50:	14c0011e 	bne	r2,r19,2f58 <alt_find_file+0x64>
    {
      len -= 1;
    2f54:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2f58:	1c85883a 	add	r2,r3,r18
    2f5c:	10800007 	ldb	r2,0(r2)
    2f60:	14c00126 	beq	r2,r19,2f68 <alt_find_file+0x74>
    2f64:	1000051e 	bne	r2,zero,2f7c <alt_find_file+0x88>
    2f68:	8009883a 	mov	r4,r16
    2f6c:	900b883a 	mov	r5,r18
    2f70:	180d883a 	mov	r6,r3
    2f74:	00030900 	call	3090 <memcmp>
    2f78:	10000326 	beq	r2,zero,2f88 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2f7c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2f80:	8d7fec1e 	bne	r17,r21,2f34 <alt_find_file+0x40>
    2f84:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2f88:	8805883a 	mov	r2,r17
    2f8c:	dfc00617 	ldw	ra,24(sp)
    2f90:	dd400517 	ldw	r21,20(sp)
    2f94:	dd000417 	ldw	r20,16(sp)
    2f98:	dcc00317 	ldw	r19,12(sp)
    2f9c:	dc800217 	ldw	r18,8(sp)
    2fa0:	dc400117 	ldw	r17,4(sp)
    2fa4:	dc000017 	ldw	r16,0(sp)
    2fa8:	dec00704 	addi	sp,sp,28
    2fac:	f800283a 	ret

00002fb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2fb0:	000b883a 	mov	r5,zero
    2fb4:	00c00034 	movhi	r3,0
    2fb8:	18dafb04 	addi	r3,r3,27628
    2fbc:	02000304 	movi	r8,12
    2fc0:	02400034 	movhi	r9,0
    2fc4:	4a5d6104 	addi	r9,r9,30084
    2fc8:	01c00044 	movi	r7,1
    2fcc:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    2fd0:	18800017 	ldw	r2,0(r3)
    2fd4:	10000c1e 	bne	r2,zero,3008 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    2fd8:	2a05383a 	mul	r2,r5,r8
    2fdc:	00c00034 	movhi	r3,0
    2fe0:	18dafb04 	addi	r3,r3,27628
    2fe4:	10c5883a 	add	r2,r2,r3
    2fe8:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    2fec:	48800017 	ldw	r2,0(r9)
    2ff0:	11400216 	blt	r2,r5,2ffc <alt_get_fd+0x4c>
    2ff4:	2805883a 	mov	r2,r5
    2ff8:	f800283a 	ret
      {
        alt_max_fd = i;
    2ffc:	49400015 	stw	r5,0(r9)
    3000:	2805883a 	mov	r2,r5
    3004:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3008:	29cb883a 	add	r5,r5,r7
    300c:	1a07883a 	add	r3,r3,r8
    3010:	29bfef1e 	bne	r5,r6,2fd0 <alt_get_fd+0x20>
    3014:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    3018:	f800283a 	ret

0000301c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    301c:	2007883a 	mov	r3,r4
    3020:	00840004 	movi	r2,4096
    3024:	1140012e 	bgeu	r2,r5,302c <alt_icache_flush+0x10>
    3028:	100b883a 	mov	r5,r2
    302c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3030:	1940042e 	bgeu	r3,r5,3044 <alt_icache_flush+0x28>
    3034:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3038:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    303c:	1887883a 	add	r3,r3,r2
    3040:	197ffd36 	bltu	r3,r5,3038 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3044:	208007cc 	andi	r2,r4,31
    3048:	10000126 	beq	r2,zero,3050 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    304c:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3050:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3054:	f800283a 	ret

00003058 <exit>:
    3058:	defffe04 	addi	sp,sp,-8
    305c:	000b883a 	mov	r5,zero
    3060:	dc000015 	stw	r16,0(sp)
    3064:	dfc00115 	stw	ra,4(sp)
    3068:	2021883a 	mov	r16,r4
    306c:	000374c0 	call	374c <__call_exitprocs>
    3070:	00800034 	movhi	r2,0
    3074:	109d6704 	addi	r2,r2,30108
    3078:	11000017 	ldw	r4,0(r2)
    307c:	20800f17 	ldw	r2,60(r4)
    3080:	10000126 	beq	r2,zero,3088 <exit+0x30>
    3084:	103ee83a 	callr	r2
    3088:	8009883a 	mov	r4,r16
    308c:	000521c0 	call	521c <_exit>

00003090 <memcmp>:
    3090:	00c000c4 	movi	r3,3
    3094:	1980032e 	bgeu	r3,r6,30a4 <memcmp+0x14>
    3098:	2144b03a 	or	r2,r4,r5
    309c:	10c4703a 	and	r2,r2,r3
    30a0:	10000f26 	beq	r2,zero,30e0 <memcmp+0x50>
    30a4:	31ffffc4 	addi	r7,r6,-1
    30a8:	3000061e 	bne	r6,zero,30c4 <memcmp+0x34>
    30ac:	00000a06 	br	30d8 <memcmp+0x48>
    30b0:	39ffffc4 	addi	r7,r7,-1
    30b4:	00bfffc4 	movi	r2,-1
    30b8:	21000044 	addi	r4,r4,1
    30bc:	29400044 	addi	r5,r5,1
    30c0:	38800526 	beq	r7,r2,30d8 <memcmp+0x48>
    30c4:	20c00003 	ldbu	r3,0(r4)
    30c8:	28800003 	ldbu	r2,0(r5)
    30cc:	18bff826 	beq	r3,r2,30b0 <memcmp+0x20>
    30d0:	1885c83a 	sub	r2,r3,r2
    30d4:	f800283a 	ret
    30d8:	0005883a 	mov	r2,zero
    30dc:	f800283a 	ret
    30e0:	180f883a 	mov	r7,r3
    30e4:	20c00017 	ldw	r3,0(r4)
    30e8:	28800017 	ldw	r2,0(r5)
    30ec:	18bfed1e 	bne	r3,r2,30a4 <memcmp+0x14>
    30f0:	31bfff04 	addi	r6,r6,-4
    30f4:	21000104 	addi	r4,r4,4
    30f8:	29400104 	addi	r5,r5,4
    30fc:	39bff936 	bltu	r7,r6,30e4 <memcmp+0x54>
    3100:	003fe806 	br	30a4 <memcmp+0x14>

00003104 <memcpy>:
    3104:	01c003c4 	movi	r7,15
    3108:	2007883a 	mov	r3,r4
    310c:	3980032e 	bgeu	r7,r6,311c <memcpy+0x18>
    3110:	2904b03a 	or	r2,r5,r4
    3114:	108000cc 	andi	r2,r2,3
    3118:	10000926 	beq	r2,zero,3140 <memcpy+0x3c>
    311c:	30000626 	beq	r6,zero,3138 <memcpy+0x34>
    3120:	30cd883a 	add	r6,r6,r3
    3124:	28800003 	ldbu	r2,0(r5)
    3128:	29400044 	addi	r5,r5,1
    312c:	18800005 	stb	r2,0(r3)
    3130:	18c00044 	addi	r3,r3,1
    3134:	30fffb1e 	bne	r6,r3,3124 <memcpy+0x20>
    3138:	2005883a 	mov	r2,r4
    313c:	f800283a 	ret
    3140:	3811883a 	mov	r8,r7
    3144:	200f883a 	mov	r7,r4
    3148:	28c00017 	ldw	r3,0(r5)
    314c:	31bffc04 	addi	r6,r6,-16
    3150:	38c00015 	stw	r3,0(r7)
    3154:	28800117 	ldw	r2,4(r5)
    3158:	38800115 	stw	r2,4(r7)
    315c:	28c00217 	ldw	r3,8(r5)
    3160:	38c00215 	stw	r3,8(r7)
    3164:	28800317 	ldw	r2,12(r5)
    3168:	29400404 	addi	r5,r5,16
    316c:	38800315 	stw	r2,12(r7)
    3170:	39c00404 	addi	r7,r7,16
    3174:	41bff436 	bltu	r8,r6,3148 <memcpy+0x44>
    3178:	008000c4 	movi	r2,3
    317c:	1180072e 	bgeu	r2,r6,319c <memcpy+0x98>
    3180:	1007883a 	mov	r3,r2
    3184:	28800017 	ldw	r2,0(r5)
    3188:	31bfff04 	addi	r6,r6,-4
    318c:	29400104 	addi	r5,r5,4
    3190:	38800015 	stw	r2,0(r7)
    3194:	39c00104 	addi	r7,r7,4
    3198:	19bffa36 	bltu	r3,r6,3184 <memcpy+0x80>
    319c:	3807883a 	mov	r3,r7
    31a0:	003fde06 	br	311c <memcpy+0x18>

000031a4 <putc>:
    31a4:	defffc04 	addi	sp,sp,-16
    31a8:	dc800215 	stw	r18,8(sp)
    31ac:	04800034 	movhi	r18,0
    31b0:	949d6604 	addi	r18,r18,30104
    31b4:	90c00017 	ldw	r3,0(r18)
    31b8:	dc400115 	stw	r17,4(sp)
    31bc:	dc000015 	stw	r16,0(sp)
    31c0:	dfc00315 	stw	ra,12(sp)
    31c4:	2023883a 	mov	r17,r4
    31c8:	2821883a 	mov	r16,r5
    31cc:	18000226 	beq	r3,zero,31d8 <putc+0x34>
    31d0:	18800e17 	ldw	r2,56(r3)
    31d4:	10001126 	beq	r2,zero,321c <putc+0x78>
    31d8:	80800217 	ldw	r2,8(r16)
    31dc:	10ffffc4 	addi	r3,r2,-1
    31e0:	80c00215 	stw	r3,8(r16)
    31e4:	18001316 	blt	r3,zero,3234 <putc+0x90>
    31e8:	80800017 	ldw	r2,0(r16)
    31ec:	14400005 	stb	r17,0(r2)
    31f0:	80c00017 	ldw	r3,0(r16)
    31f4:	18800044 	addi	r2,r3,1
    31f8:	18c00003 	ldbu	r3,0(r3)
    31fc:	80800015 	stw	r2,0(r16)
    3200:	1805883a 	mov	r2,r3
    3204:	dfc00317 	ldw	ra,12(sp)
    3208:	dc800217 	ldw	r18,8(sp)
    320c:	dc400117 	ldw	r17,4(sp)
    3210:	dc000017 	ldw	r16,0(sp)
    3214:	dec00404 	addi	sp,sp,16
    3218:	f800283a 	ret
    321c:	1809883a 	mov	r4,r3
    3220:	0003b940 	call	3b94 <__sinit>
    3224:	80800217 	ldw	r2,8(r16)
    3228:	10ffffc4 	addi	r3,r2,-1
    322c:	80c00215 	stw	r3,8(r16)
    3230:	183fed0e 	bge	r3,zero,31e8 <putc+0x44>
    3234:	80800617 	ldw	r2,24(r16)
    3238:	18800f16 	blt	r3,r2,3278 <putc+0xd4>
    323c:	80800017 	ldw	r2,0(r16)
    3240:	14400005 	stb	r17,0(r2)
    3244:	81000017 	ldw	r4,0(r16)
    3248:	00800284 	movi	r2,10
    324c:	20c00003 	ldbu	r3,0(r4)
    3250:	18801226 	beq	r3,r2,329c <putc+0xf8>
    3254:	20800044 	addi	r2,r4,1
    3258:	80800015 	stw	r2,0(r16)
    325c:	1805883a 	mov	r2,r3
    3260:	dfc00317 	ldw	ra,12(sp)
    3264:	dc800217 	ldw	r18,8(sp)
    3268:	dc400117 	ldw	r17,4(sp)
    326c:	dc000017 	ldw	r16,0(sp)
    3270:	dec00404 	addi	sp,sp,16
    3274:	f800283a 	ret
    3278:	91000017 	ldw	r4,0(r18)
    327c:	880b883a 	mov	r5,r17
    3280:	800d883a 	mov	r6,r16
    3284:	dfc00317 	ldw	ra,12(sp)
    3288:	dc800217 	ldw	r18,8(sp)
    328c:	dc400117 	ldw	r17,4(sp)
    3290:	dc000017 	ldw	r16,0(sp)
    3294:	dec00404 	addi	sp,sp,16
    3298:	00034c01 	jmpi	34c0 <__swbuf_r>
    329c:	91000017 	ldw	r4,0(r18)
    32a0:	180b883a 	mov	r5,r3
    32a4:	003ff606 	br	3280 <putc+0xdc>

000032a8 <_putc_r>:
    32a8:	defffc04 	addi	sp,sp,-16
    32ac:	dc400215 	stw	r17,8(sp)
    32b0:	dc000115 	stw	r16,4(sp)
    32b4:	dfc00315 	stw	ra,12(sp)
    32b8:	2021883a 	mov	r16,r4
    32bc:	2823883a 	mov	r17,r5
    32c0:	20000226 	beq	r4,zero,32cc <_putc_r+0x24>
    32c4:	20800e17 	ldw	r2,56(r4)
    32c8:	10001026 	beq	r2,zero,330c <_putc_r+0x64>
    32cc:	30800217 	ldw	r2,8(r6)
    32d0:	10ffffc4 	addi	r3,r2,-1
    32d4:	30c00215 	stw	r3,8(r6)
    32d8:	18001316 	blt	r3,zero,3328 <_putc_r+0x80>
    32dc:	30800017 	ldw	r2,0(r6)
    32e0:	14400005 	stb	r17,0(r2)
    32e4:	30c00017 	ldw	r3,0(r6)
    32e8:	18800044 	addi	r2,r3,1
    32ec:	18c00003 	ldbu	r3,0(r3)
    32f0:	30800015 	stw	r2,0(r6)
    32f4:	1805883a 	mov	r2,r3
    32f8:	dfc00317 	ldw	ra,12(sp)
    32fc:	dc400217 	ldw	r17,8(sp)
    3300:	dc000117 	ldw	r16,4(sp)
    3304:	dec00404 	addi	sp,sp,16
    3308:	f800283a 	ret
    330c:	d9800015 	stw	r6,0(sp)
    3310:	0003b940 	call	3b94 <__sinit>
    3314:	d9800017 	ldw	r6,0(sp)
    3318:	30800217 	ldw	r2,8(r6)
    331c:	10ffffc4 	addi	r3,r2,-1
    3320:	30c00215 	stw	r3,8(r6)
    3324:	183fed0e 	bge	r3,zero,32dc <_putc_r+0x34>
    3328:	30800617 	ldw	r2,24(r6)
    332c:	18800e16 	blt	r3,r2,3368 <_putc_r+0xc0>
    3330:	30800017 	ldw	r2,0(r6)
    3334:	14400005 	stb	r17,0(r2)
    3338:	31000017 	ldw	r4,0(r6)
    333c:	00800284 	movi	r2,10
    3340:	20c00003 	ldbu	r3,0(r4)
    3344:	18800f26 	beq	r3,r2,3384 <_putc_r+0xdc>
    3348:	20800044 	addi	r2,r4,1
    334c:	30800015 	stw	r2,0(r6)
    3350:	1805883a 	mov	r2,r3
    3354:	dfc00317 	ldw	ra,12(sp)
    3358:	dc400217 	ldw	r17,8(sp)
    335c:	dc000117 	ldw	r16,4(sp)
    3360:	dec00404 	addi	sp,sp,16
    3364:	f800283a 	ret
    3368:	8009883a 	mov	r4,r16
    336c:	880b883a 	mov	r5,r17
    3370:	dfc00317 	ldw	ra,12(sp)
    3374:	dc400217 	ldw	r17,8(sp)
    3378:	dc000117 	ldw	r16,4(sp)
    337c:	dec00404 	addi	sp,sp,16
    3380:	00034c01 	jmpi	34c0 <__swbuf_r>
    3384:	8009883a 	mov	r4,r16
    3388:	180b883a 	mov	r5,r3
    338c:	003ff806 	br	3370 <_putc_r+0xc8>

00003390 <strcmp>:
    3390:	2144b03a 	or	r2,r4,r5
    3394:	108000cc 	andi	r2,r2,3
    3398:	10001d1e 	bne	r2,zero,3410 <strcmp+0x80>
    339c:	200f883a 	mov	r7,r4
    33a0:	28800017 	ldw	r2,0(r5)
    33a4:	21000017 	ldw	r4,0(r4)
    33a8:	280d883a 	mov	r6,r5
    33ac:	2080161e 	bne	r4,r2,3408 <strcmp+0x78>
    33b0:	023fbff4 	movhi	r8,65279
    33b4:	423fbfc4 	addi	r8,r8,-257
    33b8:	2207883a 	add	r3,r4,r8
    33bc:	01602074 	movhi	r5,32897
    33c0:	29602004 	addi	r5,r5,-32640
    33c4:	1946703a 	and	r3,r3,r5
    33c8:	0104303a 	nor	r2,zero,r4
    33cc:	10c4703a 	and	r2,r2,r3
    33d0:	10001c1e 	bne	r2,zero,3444 <strcmp+0xb4>
    33d4:	4013883a 	mov	r9,r8
    33d8:	2811883a 	mov	r8,r5
    33dc:	00000106 	br	33e4 <strcmp+0x54>
    33e0:	1800181e 	bne	r3,zero,3444 <strcmp+0xb4>
    33e4:	39c00104 	addi	r7,r7,4
    33e8:	39000017 	ldw	r4,0(r7)
    33ec:	31800104 	addi	r6,r6,4
    33f0:	31400017 	ldw	r5,0(r6)
    33f4:	2245883a 	add	r2,r4,r9
    33f8:	1204703a 	and	r2,r2,r8
    33fc:	0106303a 	nor	r3,zero,r4
    3400:	1886703a 	and	r3,r3,r2
    3404:	217ff626 	beq	r4,r5,33e0 <strcmp+0x50>
    3408:	3809883a 	mov	r4,r7
    340c:	300b883a 	mov	r5,r6
    3410:	20c00007 	ldb	r3,0(r4)
    3414:	1800051e 	bne	r3,zero,342c <strcmp+0x9c>
    3418:	00000606 	br	3434 <strcmp+0xa4>
    341c:	21000044 	addi	r4,r4,1
    3420:	20c00007 	ldb	r3,0(r4)
    3424:	29400044 	addi	r5,r5,1
    3428:	18000226 	beq	r3,zero,3434 <strcmp+0xa4>
    342c:	28800007 	ldb	r2,0(r5)
    3430:	18bffa26 	beq	r3,r2,341c <strcmp+0x8c>
    3434:	20c00003 	ldbu	r3,0(r4)
    3438:	28800003 	ldbu	r2,0(r5)
    343c:	1885c83a 	sub	r2,r3,r2
    3440:	f800283a 	ret
    3444:	0005883a 	mov	r2,zero
    3448:	f800283a 	ret

0000344c <strlen>:
    344c:	208000cc 	andi	r2,r4,3
    3450:	2011883a 	mov	r8,r4
    3454:	1000161e 	bne	r2,zero,34b0 <strlen+0x64>
    3458:	20c00017 	ldw	r3,0(r4)
    345c:	017fbff4 	movhi	r5,65279
    3460:	297fbfc4 	addi	r5,r5,-257
    3464:	01e02074 	movhi	r7,32897
    3468:	39e02004 	addi	r7,r7,-32640
    346c:	1945883a 	add	r2,r3,r5
    3470:	11c4703a 	and	r2,r2,r7
    3474:	00c6303a 	nor	r3,zero,r3
    3478:	1886703a 	and	r3,r3,r2
    347c:	18000c1e 	bne	r3,zero,34b0 <strlen+0x64>
    3480:	280d883a 	mov	r6,r5
    3484:	380b883a 	mov	r5,r7
    3488:	21000104 	addi	r4,r4,4
    348c:	20800017 	ldw	r2,0(r4)
    3490:	1187883a 	add	r3,r2,r6
    3494:	1946703a 	and	r3,r3,r5
    3498:	0084303a 	nor	r2,zero,r2
    349c:	10c4703a 	and	r2,r2,r3
    34a0:	103ff926 	beq	r2,zero,3488 <strlen+0x3c>
    34a4:	20800007 	ldb	r2,0(r4)
    34a8:	10000326 	beq	r2,zero,34b8 <strlen+0x6c>
    34ac:	21000044 	addi	r4,r4,1
    34b0:	20800007 	ldb	r2,0(r4)
    34b4:	103ffd1e 	bne	r2,zero,34ac <strlen+0x60>
    34b8:	2205c83a 	sub	r2,r4,r8
    34bc:	f800283a 	ret

000034c0 <__swbuf_r>:
    34c0:	defffc04 	addi	sp,sp,-16
    34c4:	dc400215 	stw	r17,8(sp)
    34c8:	dc000115 	stw	r16,4(sp)
    34cc:	dfc00315 	stw	ra,12(sp)
    34d0:	2023883a 	mov	r17,r4
    34d4:	2821883a 	mov	r16,r5
    34d8:	20000226 	beq	r4,zero,34e4 <__swbuf_r+0x24>
    34dc:	20800e17 	ldw	r2,56(r4)
    34e0:	10002f26 	beq	r2,zero,35a0 <__swbuf_r+0xe0>
    34e4:	3080030b 	ldhu	r2,12(r6)
    34e8:	30c00617 	ldw	r3,24(r6)
    34ec:	1080020c 	andi	r2,r2,8
    34f0:	30c00215 	stw	r3,8(r6)
    34f4:	10002226 	beq	r2,zero,3580 <__swbuf_r+0xc0>
    34f8:	30c00417 	ldw	r3,16(r6)
    34fc:	18002026 	beq	r3,zero,3580 <__swbuf_r+0xc0>
    3500:	31000017 	ldw	r4,0(r6)
    3504:	30800517 	ldw	r2,20(r6)
    3508:	20c7c83a 	sub	r3,r4,r3
    350c:	18802f0e 	bge	r3,r2,35cc <__swbuf_r+0x10c>
    3510:	19400044 	addi	r5,r3,1
    3514:	30800217 	ldw	r2,8(r6)
    3518:	84003fcc 	andi	r16,r16,255
    351c:	20c00044 	addi	r3,r4,1
    3520:	10bfffc4 	addi	r2,r2,-1
    3524:	30800215 	stw	r2,8(r6)
    3528:	24000005 	stb	r16,0(r4)
    352c:	30800517 	ldw	r2,20(r6)
    3530:	30c00015 	stw	r3,0(r6)
    3534:	11400c26 	beq	r2,r5,3568 <__swbuf_r+0xa8>
    3538:	3080030b 	ldhu	r2,12(r6)
    353c:	1080004c 	andi	r2,r2,1
    3540:	1005003a 	cmpeq	r2,r2,zero
    3544:	10000626 	beq	r2,zero,3560 <__swbuf_r+0xa0>
    3548:	8005883a 	mov	r2,r16
    354c:	dfc00317 	ldw	ra,12(sp)
    3550:	dc400217 	ldw	r17,8(sp)
    3554:	dc000117 	ldw	r16,4(sp)
    3558:	dec00404 	addi	sp,sp,16
    355c:	f800283a 	ret
    3560:	00800284 	movi	r2,10
    3564:	80bff81e 	bne	r16,r2,3548 <__swbuf_r+0x88>
    3568:	8809883a 	mov	r4,r17
    356c:	300b883a 	mov	r5,r6
    3570:	00038fc0 	call	38fc <_fflush_r>
    3574:	103ff426 	beq	r2,zero,3548 <__swbuf_r+0x88>
    3578:	043fffc4 	movi	r16,-1
    357c:	003ff206 	br	3548 <__swbuf_r+0x88>
    3580:	300b883a 	mov	r5,r6
    3584:	8809883a 	mov	r4,r17
    3588:	d9800015 	stw	r6,0(sp)
    358c:	000360c0 	call	360c <__swsetup_r>
    3590:	d9800017 	ldw	r6,0(sp)
    3594:	1000061e 	bne	r2,zero,35b0 <__swbuf_r+0xf0>
    3598:	30c00417 	ldw	r3,16(r6)
    359c:	003fd806 	br	3500 <__swbuf_r+0x40>
    35a0:	d9800015 	stw	r6,0(sp)
    35a4:	0003b940 	call	3b94 <__sinit>
    35a8:	d9800017 	ldw	r6,0(sp)
    35ac:	003fcd06 	br	34e4 <__swbuf_r+0x24>
    35b0:	3080030b 	ldhu	r2,12(r6)
    35b4:	00c00244 	movi	r3,9
    35b8:	043fffc4 	movi	r16,-1
    35bc:	10801014 	ori	r2,r2,64
    35c0:	3080030d 	sth	r2,12(r6)
    35c4:	88c00015 	stw	r3,0(r17)
    35c8:	003fdf06 	br	3548 <__swbuf_r+0x88>
    35cc:	300b883a 	mov	r5,r6
    35d0:	8809883a 	mov	r4,r17
    35d4:	d9800015 	stw	r6,0(sp)
    35d8:	00038fc0 	call	38fc <_fflush_r>
    35dc:	d9800017 	ldw	r6,0(sp)
    35e0:	103fe51e 	bne	r2,zero,3578 <__swbuf_r+0xb8>
    35e4:	31000017 	ldw	r4,0(r6)
    35e8:	01400044 	movi	r5,1
    35ec:	003fc906 	br	3514 <__swbuf_r+0x54>

000035f0 <__swbuf>:
    35f0:	01800034 	movhi	r6,0
    35f4:	319d6604 	addi	r6,r6,30104
    35f8:	2007883a 	mov	r3,r4
    35fc:	31000017 	ldw	r4,0(r6)
    3600:	280d883a 	mov	r6,r5
    3604:	180b883a 	mov	r5,r3
    3608:	00034c01 	jmpi	34c0 <__swbuf_r>

0000360c <__swsetup_r>:
    360c:	00800034 	movhi	r2,0
    3610:	109d6604 	addi	r2,r2,30104
    3614:	10c00017 	ldw	r3,0(r2)
    3618:	defffd04 	addi	sp,sp,-12
    361c:	dc400115 	stw	r17,4(sp)
    3620:	dc000015 	stw	r16,0(sp)
    3624:	dfc00215 	stw	ra,8(sp)
    3628:	2023883a 	mov	r17,r4
    362c:	2821883a 	mov	r16,r5
    3630:	18000226 	beq	r3,zero,363c <__swsetup_r+0x30>
    3634:	18800e17 	ldw	r2,56(r3)
    3638:	10001f26 	beq	r2,zero,36b8 <__swsetup_r+0xac>
    363c:	8100030b 	ldhu	r4,12(r16)
    3640:	2080020c 	andi	r2,r4,8
    3644:	10002826 	beq	r2,zero,36e8 <__swsetup_r+0xdc>
    3648:	81400417 	ldw	r5,16(r16)
    364c:	28001d26 	beq	r5,zero,36c4 <__swsetup_r+0xb8>
    3650:	2080004c 	andi	r2,r4,1
    3654:	1005003a 	cmpeq	r2,r2,zero
    3658:	10000b26 	beq	r2,zero,3688 <__swsetup_r+0x7c>
    365c:	2080008c 	andi	r2,r4,2
    3660:	10001226 	beq	r2,zero,36ac <__swsetup_r+0xa0>
    3664:	0005883a 	mov	r2,zero
    3668:	80800215 	stw	r2,8(r16)
    366c:	28000b26 	beq	r5,zero,369c <__swsetup_r+0x90>
    3670:	0005883a 	mov	r2,zero
    3674:	dfc00217 	ldw	ra,8(sp)
    3678:	dc400117 	ldw	r17,4(sp)
    367c:	dc000017 	ldw	r16,0(sp)
    3680:	dec00304 	addi	sp,sp,12
    3684:	f800283a 	ret
    3688:	80800517 	ldw	r2,20(r16)
    368c:	80000215 	stw	zero,8(r16)
    3690:	0085c83a 	sub	r2,zero,r2
    3694:	80800615 	stw	r2,24(r16)
    3698:	283ff51e 	bne	r5,zero,3670 <__swsetup_r+0x64>
    369c:	2080200c 	andi	r2,r4,128
    36a0:	103ff326 	beq	r2,zero,3670 <__swsetup_r+0x64>
    36a4:	00bfffc4 	movi	r2,-1
    36a8:	003ff206 	br	3674 <__swsetup_r+0x68>
    36ac:	80800517 	ldw	r2,20(r16)
    36b0:	80800215 	stw	r2,8(r16)
    36b4:	003fed06 	br	366c <__swsetup_r+0x60>
    36b8:	1809883a 	mov	r4,r3
    36bc:	0003b940 	call	3b94 <__sinit>
    36c0:	003fde06 	br	363c <__swsetup_r+0x30>
    36c4:	20c0a00c 	andi	r3,r4,640
    36c8:	00808004 	movi	r2,512
    36cc:	18bfe026 	beq	r3,r2,3650 <__swsetup_r+0x44>
    36d0:	8809883a 	mov	r4,r17
    36d4:	800b883a 	mov	r5,r16
    36d8:	00043ac0 	call	43ac <__smakebuf_r>
    36dc:	8100030b 	ldhu	r4,12(r16)
    36e0:	81400417 	ldw	r5,16(r16)
    36e4:	003fda06 	br	3650 <__swsetup_r+0x44>
    36e8:	2080040c 	andi	r2,r4,16
    36ec:	103fed26 	beq	r2,zero,36a4 <__swsetup_r+0x98>
    36f0:	2080010c 	andi	r2,r4,4
    36f4:	10001226 	beq	r2,zero,3740 <__swsetup_r+0x134>
    36f8:	81400c17 	ldw	r5,48(r16)
    36fc:	28000526 	beq	r5,zero,3714 <__swsetup_r+0x108>
    3700:	80801004 	addi	r2,r16,64
    3704:	28800226 	beq	r5,r2,3710 <__swsetup_r+0x104>
    3708:	8809883a 	mov	r4,r17
    370c:	0003f180 	call	3f18 <_free_r>
    3710:	80000c15 	stw	zero,48(r16)
    3714:	8080030b 	ldhu	r2,12(r16)
    3718:	81400417 	ldw	r5,16(r16)
    371c:	80000115 	stw	zero,4(r16)
    3720:	10bff6cc 	andi	r2,r2,65499
    3724:	8080030d 	sth	r2,12(r16)
    3728:	81400015 	stw	r5,0(r16)
    372c:	8080030b 	ldhu	r2,12(r16)
    3730:	10800214 	ori	r2,r2,8
    3734:	113fffcc 	andi	r4,r2,65535
    3738:	8080030d 	sth	r2,12(r16)
    373c:	003fc306 	br	364c <__swsetup_r+0x40>
    3740:	81400417 	ldw	r5,16(r16)
    3744:	003ff906 	br	372c <__swsetup_r+0x120>

00003748 <register_fini>:
    3748:	f800283a 	ret

0000374c <__call_exitprocs>:
    374c:	00800034 	movhi	r2,0
    3750:	109d6704 	addi	r2,r2,30108
    3754:	10800017 	ldw	r2,0(r2)
    3758:	defff304 	addi	sp,sp,-52
    375c:	df000b15 	stw	fp,44(sp)
    3760:	d8800115 	stw	r2,4(sp)
    3764:	00800034 	movhi	r2,0
    3768:	10800004 	addi	r2,r2,0
    376c:	1005003a 	cmpeq	r2,r2,zero
    3770:	d8800215 	stw	r2,8(sp)
    3774:	d8800117 	ldw	r2,4(sp)
    3778:	dd400815 	stw	r21,32(sp)
    377c:	dd000715 	stw	r20,28(sp)
    3780:	10805204 	addi	r2,r2,328
    3784:	dfc00c15 	stw	ra,48(sp)
    3788:	ddc00a15 	stw	r23,40(sp)
    378c:	dd800915 	stw	r22,36(sp)
    3790:	dcc00615 	stw	r19,24(sp)
    3794:	dc800515 	stw	r18,20(sp)
    3798:	dc400415 	stw	r17,16(sp)
    379c:	dc000315 	stw	r16,12(sp)
    37a0:	282b883a 	mov	r21,r5
    37a4:	2039883a 	mov	fp,r4
    37a8:	d8800015 	stw	r2,0(sp)
    37ac:	2829003a 	cmpeq	r20,r5,zero
    37b0:	d8800117 	ldw	r2,4(sp)
    37b4:	14405217 	ldw	r17,328(r2)
    37b8:	88001026 	beq	r17,zero,37fc <__call_exitprocs+0xb0>
    37bc:	ddc00017 	ldw	r23,0(sp)
    37c0:	88800117 	ldw	r2,4(r17)
    37c4:	8c802204 	addi	r18,r17,136
    37c8:	143fffc4 	addi	r16,r2,-1
    37cc:	80000916 	blt	r16,zero,37f4 <__call_exitprocs+0xa8>
    37d0:	05bfffc4 	movi	r22,-1
    37d4:	a000151e 	bne	r20,zero,382c <__call_exitprocs+0xe0>
    37d8:	8409883a 	add	r4,r16,r16
    37dc:	2105883a 	add	r2,r4,r4
    37e0:	1485883a 	add	r2,r2,r18
    37e4:	10c02017 	ldw	r3,128(r2)
    37e8:	a8c01126 	beq	r21,r3,3830 <__call_exitprocs+0xe4>
    37ec:	843fffc4 	addi	r16,r16,-1
    37f0:	85bff81e 	bne	r16,r22,37d4 <__call_exitprocs+0x88>
    37f4:	d8800217 	ldw	r2,8(sp)
    37f8:	10003126 	beq	r2,zero,38c0 <__call_exitprocs+0x174>
    37fc:	dfc00c17 	ldw	ra,48(sp)
    3800:	df000b17 	ldw	fp,44(sp)
    3804:	ddc00a17 	ldw	r23,40(sp)
    3808:	dd800917 	ldw	r22,36(sp)
    380c:	dd400817 	ldw	r21,32(sp)
    3810:	dd000717 	ldw	r20,28(sp)
    3814:	dcc00617 	ldw	r19,24(sp)
    3818:	dc800517 	ldw	r18,20(sp)
    381c:	dc400417 	ldw	r17,16(sp)
    3820:	dc000317 	ldw	r16,12(sp)
    3824:	dec00d04 	addi	sp,sp,52
    3828:	f800283a 	ret
    382c:	8409883a 	add	r4,r16,r16
    3830:	88c00117 	ldw	r3,4(r17)
    3834:	2105883a 	add	r2,r4,r4
    3838:	1445883a 	add	r2,r2,r17
    383c:	18ffffc4 	addi	r3,r3,-1
    3840:	11800217 	ldw	r6,8(r2)
    3844:	1c001526 	beq	r3,r16,389c <__call_exitprocs+0x150>
    3848:	10000215 	stw	zero,8(r2)
    384c:	303fe726 	beq	r6,zero,37ec <__call_exitprocs+0xa0>
    3850:	00c00044 	movi	r3,1
    3854:	1c06983a 	sll	r3,r3,r16
    3858:	90804017 	ldw	r2,256(r18)
    385c:	8cc00117 	ldw	r19,4(r17)
    3860:	1884703a 	and	r2,r3,r2
    3864:	10001426 	beq	r2,zero,38b8 <__call_exitprocs+0x16c>
    3868:	90804117 	ldw	r2,260(r18)
    386c:	1884703a 	and	r2,r3,r2
    3870:	10000c1e 	bne	r2,zero,38a4 <__call_exitprocs+0x158>
    3874:	2105883a 	add	r2,r4,r4
    3878:	1485883a 	add	r2,r2,r18
    387c:	11400017 	ldw	r5,0(r2)
    3880:	e009883a 	mov	r4,fp
    3884:	303ee83a 	callr	r6
    3888:	88800117 	ldw	r2,4(r17)
    388c:	98bfc81e 	bne	r19,r2,37b0 <__call_exitprocs+0x64>
    3890:	b8800017 	ldw	r2,0(r23)
    3894:	147fd526 	beq	r2,r17,37ec <__call_exitprocs+0xa0>
    3898:	003fc506 	br	37b0 <__call_exitprocs+0x64>
    389c:	8c000115 	stw	r16,4(r17)
    38a0:	003fea06 	br	384c <__call_exitprocs+0x100>
    38a4:	2105883a 	add	r2,r4,r4
    38a8:	1485883a 	add	r2,r2,r18
    38ac:	11000017 	ldw	r4,0(r2)
    38b0:	303ee83a 	callr	r6
    38b4:	003ff406 	br	3888 <__call_exitprocs+0x13c>
    38b8:	303ee83a 	callr	r6
    38bc:	003ff206 	br	3888 <__call_exitprocs+0x13c>
    38c0:	88800117 	ldw	r2,4(r17)
    38c4:	1000081e 	bne	r2,zero,38e8 <__call_exitprocs+0x19c>
    38c8:	89000017 	ldw	r4,0(r17)
    38cc:	20000726 	beq	r4,zero,38ec <__call_exitprocs+0x1a0>
    38d0:	b9000015 	stw	r4,0(r23)
    38d4:	8809883a 	mov	r4,r17
    38d8:	00000000 	call	0 <__alt_mem_SDRAM>
    38dc:	bc400017 	ldw	r17,0(r23)
    38e0:	883fb71e 	bne	r17,zero,37c0 <__call_exitprocs+0x74>
    38e4:	003fc506 	br	37fc <__call_exitprocs+0xb0>
    38e8:	89000017 	ldw	r4,0(r17)
    38ec:	882f883a 	mov	r23,r17
    38f0:	2023883a 	mov	r17,r4
    38f4:	883fb21e 	bne	r17,zero,37c0 <__call_exitprocs+0x74>
    38f8:	003fc006 	br	37fc <__call_exitprocs+0xb0>

000038fc <_fflush_r>:
    38fc:	defffb04 	addi	sp,sp,-20
    3900:	dcc00315 	stw	r19,12(sp)
    3904:	dc800215 	stw	r18,8(sp)
    3908:	dfc00415 	stw	ra,16(sp)
    390c:	dc400115 	stw	r17,4(sp)
    3910:	dc000015 	stw	r16,0(sp)
    3914:	2027883a 	mov	r19,r4
    3918:	2825883a 	mov	r18,r5
    391c:	20000226 	beq	r4,zero,3928 <_fflush_r+0x2c>
    3920:	20800e17 	ldw	r2,56(r4)
    3924:	10005626 	beq	r2,zero,3a80 <_fflush_r+0x184>
    3928:	9100030b 	ldhu	r4,12(r18)
    392c:	20ffffcc 	andi	r3,r4,65535
    3930:	18e0001c 	xori	r3,r3,32768
    3934:	18e00004 	addi	r3,r3,-32768
    3938:	1880020c 	andi	r2,r3,8
    393c:	1000261e 	bne	r2,zero,39d8 <_fflush_r+0xdc>
    3940:	90c00117 	ldw	r3,4(r18)
    3944:	20820014 	ori	r2,r4,2048
    3948:	9080030d 	sth	r2,12(r18)
    394c:	1009883a 	mov	r4,r2
    3950:	00c0400e 	bge	zero,r3,3a54 <_fflush_r+0x158>
    3954:	92000a17 	ldw	r8,40(r18)
    3958:	40004026 	beq	r8,zero,3a5c <_fflush_r+0x160>
    395c:	2084000c 	andi	r2,r4,4096
    3960:	10005326 	beq	r2,zero,3ab0 <_fflush_r+0x1b4>
    3964:	94001417 	ldw	r16,80(r18)
    3968:	9080030b 	ldhu	r2,12(r18)
    396c:	1080010c 	andi	r2,r2,4
    3970:	1000481e 	bne	r2,zero,3a94 <_fflush_r+0x198>
    3974:	91400717 	ldw	r5,28(r18)
    3978:	9809883a 	mov	r4,r19
    397c:	800d883a 	mov	r6,r16
    3980:	000f883a 	mov	r7,zero
    3984:	403ee83a 	callr	r8
    3988:	8080261e 	bne	r16,r2,3a24 <_fflush_r+0x128>
    398c:	9080030b 	ldhu	r2,12(r18)
    3990:	91000417 	ldw	r4,16(r18)
    3994:	90000115 	stw	zero,4(r18)
    3998:	10bdffcc 	andi	r2,r2,63487
    399c:	10ffffcc 	andi	r3,r2,65535
    39a0:	18c4000c 	andi	r3,r3,4096
    39a4:	9080030d 	sth	r2,12(r18)
    39a8:	91000015 	stw	r4,0(r18)
    39ac:	18002b26 	beq	r3,zero,3a5c <_fflush_r+0x160>
    39b0:	0007883a 	mov	r3,zero
    39b4:	1805883a 	mov	r2,r3
    39b8:	94001415 	stw	r16,80(r18)
    39bc:	dfc00417 	ldw	ra,16(sp)
    39c0:	dcc00317 	ldw	r19,12(sp)
    39c4:	dc800217 	ldw	r18,8(sp)
    39c8:	dc400117 	ldw	r17,4(sp)
    39cc:	dc000017 	ldw	r16,0(sp)
    39d0:	dec00504 	addi	sp,sp,20
    39d4:	f800283a 	ret
    39d8:	94400417 	ldw	r17,16(r18)
    39dc:	88001f26 	beq	r17,zero,3a5c <_fflush_r+0x160>
    39e0:	90800017 	ldw	r2,0(r18)
    39e4:	18c000cc 	andi	r3,r3,3
    39e8:	94400015 	stw	r17,0(r18)
    39ec:	1461c83a 	sub	r16,r2,r17
    39f0:	18002526 	beq	r3,zero,3a88 <_fflush_r+0x18c>
    39f4:	0005883a 	mov	r2,zero
    39f8:	90800215 	stw	r2,8(r18)
    39fc:	0400170e 	bge	zero,r16,3a5c <_fflush_r+0x160>
    3a00:	90c00917 	ldw	r3,36(r18)
    3a04:	91400717 	ldw	r5,28(r18)
    3a08:	880d883a 	mov	r6,r17
    3a0c:	800f883a 	mov	r7,r16
    3a10:	9809883a 	mov	r4,r19
    3a14:	183ee83a 	callr	r3
    3a18:	88a3883a 	add	r17,r17,r2
    3a1c:	80a1c83a 	sub	r16,r16,r2
    3a20:	00bff616 	blt	zero,r2,39fc <_fflush_r+0x100>
    3a24:	9080030b 	ldhu	r2,12(r18)
    3a28:	00ffffc4 	movi	r3,-1
    3a2c:	10801014 	ori	r2,r2,64
    3a30:	9080030d 	sth	r2,12(r18)
    3a34:	1805883a 	mov	r2,r3
    3a38:	dfc00417 	ldw	ra,16(sp)
    3a3c:	dcc00317 	ldw	r19,12(sp)
    3a40:	dc800217 	ldw	r18,8(sp)
    3a44:	dc400117 	ldw	r17,4(sp)
    3a48:	dc000017 	ldw	r16,0(sp)
    3a4c:	dec00504 	addi	sp,sp,20
    3a50:	f800283a 	ret
    3a54:	90800f17 	ldw	r2,60(r18)
    3a58:	00bfbe16 	blt	zero,r2,3954 <_fflush_r+0x58>
    3a5c:	0007883a 	mov	r3,zero
    3a60:	1805883a 	mov	r2,r3
    3a64:	dfc00417 	ldw	ra,16(sp)
    3a68:	dcc00317 	ldw	r19,12(sp)
    3a6c:	dc800217 	ldw	r18,8(sp)
    3a70:	dc400117 	ldw	r17,4(sp)
    3a74:	dc000017 	ldw	r16,0(sp)
    3a78:	dec00504 	addi	sp,sp,20
    3a7c:	f800283a 	ret
    3a80:	0003b940 	call	3b94 <__sinit>
    3a84:	003fa806 	br	3928 <_fflush_r+0x2c>
    3a88:	90800517 	ldw	r2,20(r18)
    3a8c:	90800215 	stw	r2,8(r18)
    3a90:	003fda06 	br	39fc <_fflush_r+0x100>
    3a94:	90800117 	ldw	r2,4(r18)
    3a98:	90c00c17 	ldw	r3,48(r18)
    3a9c:	80a1c83a 	sub	r16,r16,r2
    3aa0:	183fb426 	beq	r3,zero,3974 <_fflush_r+0x78>
    3aa4:	90800f17 	ldw	r2,60(r18)
    3aa8:	80a1c83a 	sub	r16,r16,r2
    3aac:	003fb106 	br	3974 <_fflush_r+0x78>
    3ab0:	91400717 	ldw	r5,28(r18)
    3ab4:	9809883a 	mov	r4,r19
    3ab8:	000d883a 	mov	r6,zero
    3abc:	01c00044 	movi	r7,1
    3ac0:	403ee83a 	callr	r8
    3ac4:	1021883a 	mov	r16,r2
    3ac8:	00bfffc4 	movi	r2,-1
    3acc:	80800226 	beq	r16,r2,3ad8 <_fflush_r+0x1dc>
    3ad0:	92000a17 	ldw	r8,40(r18)
    3ad4:	003fa406 	br	3968 <_fflush_r+0x6c>
    3ad8:	98c00017 	ldw	r3,0(r19)
    3adc:	00800744 	movi	r2,29
    3ae0:	18bfde26 	beq	r3,r2,3a5c <_fflush_r+0x160>
    3ae4:	9080030b 	ldhu	r2,12(r18)
    3ae8:	8007883a 	mov	r3,r16
    3aec:	10801014 	ori	r2,r2,64
    3af0:	9080030d 	sth	r2,12(r18)
    3af4:	003fcf06 	br	3a34 <_fflush_r+0x138>

00003af8 <fflush>:
    3af8:	01400034 	movhi	r5,0
    3afc:	294e3f04 	addi	r5,r5,14588
    3b00:	2007883a 	mov	r3,r4
    3b04:	20000526 	beq	r4,zero,3b1c <fflush+0x24>
    3b08:	00800034 	movhi	r2,0
    3b0c:	109d6604 	addi	r2,r2,30104
    3b10:	11000017 	ldw	r4,0(r2)
    3b14:	180b883a 	mov	r5,r3
    3b18:	00038fc1 	jmpi	38fc <_fflush_r>
    3b1c:	00800034 	movhi	r2,0
    3b20:	109d6704 	addi	r2,r2,30108
    3b24:	11000017 	ldw	r4,0(r2)
    3b28:	000422c1 	jmpi	422c <_fwalk_reent>

00003b2c <std>:
    3b2c:	00800034 	movhi	r2,0
    3b30:	10933c04 	addi	r2,r2,19696
    3b34:	20800b15 	stw	r2,44(r4)
    3b38:	00800034 	movhi	r2,0
    3b3c:	10937704 	addi	r2,r2,19932
    3b40:	20800815 	stw	r2,32(r4)
    3b44:	00c00034 	movhi	r3,0
    3b48:	18d35804 	addi	r3,r3,19808
    3b4c:	00800034 	movhi	r2,0
    3b50:	10933e04 	addi	r2,r2,19704
    3b54:	2140030d 	sth	r5,12(r4)
    3b58:	2180038d 	sth	r6,14(r4)
    3b5c:	20c00915 	stw	r3,36(r4)
    3b60:	20800a15 	stw	r2,40(r4)
    3b64:	20000015 	stw	zero,0(r4)
    3b68:	20000115 	stw	zero,4(r4)
    3b6c:	20000215 	stw	zero,8(r4)
    3b70:	20000415 	stw	zero,16(r4)
    3b74:	20000515 	stw	zero,20(r4)
    3b78:	20000615 	stw	zero,24(r4)
    3b7c:	21000715 	stw	r4,28(r4)
    3b80:	f800283a 	ret

00003b84 <__sfp_lock_acquire>:
    3b84:	f800283a 	ret

00003b88 <__sfp_lock_release>:
    3b88:	f800283a 	ret

00003b8c <__sinit_lock_acquire>:
    3b8c:	f800283a 	ret

00003b90 <__sinit_lock_release>:
    3b90:	f800283a 	ret

00003b94 <__sinit>:
    3b94:	20800e17 	ldw	r2,56(r4)
    3b98:	defffd04 	addi	sp,sp,-12
    3b9c:	dc400115 	stw	r17,4(sp)
    3ba0:	dc000015 	stw	r16,0(sp)
    3ba4:	dfc00215 	stw	ra,8(sp)
    3ba8:	04400044 	movi	r17,1
    3bac:	01400104 	movi	r5,4
    3bb0:	000d883a 	mov	r6,zero
    3bb4:	2021883a 	mov	r16,r4
    3bb8:	2200bb04 	addi	r8,r4,748
    3bbc:	200f883a 	mov	r7,r4
    3bc0:	10000526 	beq	r2,zero,3bd8 <__sinit+0x44>
    3bc4:	dfc00217 	ldw	ra,8(sp)
    3bc8:	dc400117 	ldw	r17,4(sp)
    3bcc:	dc000017 	ldw	r16,0(sp)
    3bd0:	dec00304 	addi	sp,sp,12
    3bd4:	f800283a 	ret
    3bd8:	21000117 	ldw	r4,4(r4)
    3bdc:	00800034 	movhi	r2,0
    3be0:	108f1e04 	addi	r2,r2,15480
    3be4:	00c000c4 	movi	r3,3
    3be8:	80800f15 	stw	r2,60(r16)
    3bec:	80c0b915 	stw	r3,740(r16)
    3bf0:	8200ba15 	stw	r8,744(r16)
    3bf4:	84400e15 	stw	r17,56(r16)
    3bf8:	8000b815 	stw	zero,736(r16)
    3bfc:	0003b2c0 	call	3b2c <std>
    3c00:	81000217 	ldw	r4,8(r16)
    3c04:	880d883a 	mov	r6,r17
    3c08:	800f883a 	mov	r7,r16
    3c0c:	01400284 	movi	r5,10
    3c10:	0003b2c0 	call	3b2c <std>
    3c14:	81000317 	ldw	r4,12(r16)
    3c18:	800f883a 	mov	r7,r16
    3c1c:	01400484 	movi	r5,18
    3c20:	01800084 	movi	r6,2
    3c24:	dfc00217 	ldw	ra,8(sp)
    3c28:	dc400117 	ldw	r17,4(sp)
    3c2c:	dc000017 	ldw	r16,0(sp)
    3c30:	dec00304 	addi	sp,sp,12
    3c34:	0003b2c1 	jmpi	3b2c <std>

00003c38 <__fp_lock>:
    3c38:	0005883a 	mov	r2,zero
    3c3c:	f800283a 	ret

00003c40 <__fp_unlock>:
    3c40:	0005883a 	mov	r2,zero
    3c44:	f800283a 	ret

00003c48 <__fp_unlock_all>:
    3c48:	00800034 	movhi	r2,0
    3c4c:	109d6604 	addi	r2,r2,30104
    3c50:	11000017 	ldw	r4,0(r2)
    3c54:	01400034 	movhi	r5,0
    3c58:	294f1004 	addi	r5,r5,15424
    3c5c:	00042f41 	jmpi	42f4 <_fwalk>

00003c60 <__fp_lock_all>:
    3c60:	00800034 	movhi	r2,0
    3c64:	109d6604 	addi	r2,r2,30104
    3c68:	11000017 	ldw	r4,0(r2)
    3c6c:	01400034 	movhi	r5,0
    3c70:	294f0e04 	addi	r5,r5,15416
    3c74:	00042f41 	jmpi	42f4 <_fwalk>

00003c78 <_cleanup_r>:
    3c78:	01400034 	movhi	r5,0
    3c7c:	29540d04 	addi	r5,r5,20532
    3c80:	00042f41 	jmpi	42f4 <_fwalk>

00003c84 <_cleanup>:
    3c84:	00800034 	movhi	r2,0
    3c88:	109d6704 	addi	r2,r2,30108
    3c8c:	11000017 	ldw	r4,0(r2)
    3c90:	0003c781 	jmpi	3c78 <_cleanup_r>

00003c94 <__sfmoreglue>:
    3c94:	defffc04 	addi	sp,sp,-16
    3c98:	dc400115 	stw	r17,4(sp)
    3c9c:	2c401724 	muli	r17,r5,92
    3ca0:	dc800215 	stw	r18,8(sp)
    3ca4:	2825883a 	mov	r18,r5
    3ca8:	89400304 	addi	r5,r17,12
    3cac:	dc000015 	stw	r16,0(sp)
    3cb0:	dfc00315 	stw	ra,12(sp)
    3cb4:	00045400 	call	4540 <_malloc_r>
    3cb8:	0021883a 	mov	r16,zero
    3cbc:	880d883a 	mov	r6,r17
    3cc0:	000b883a 	mov	r5,zero
    3cc4:	10000626 	beq	r2,zero,3ce0 <__sfmoreglue+0x4c>
    3cc8:	11000304 	addi	r4,r2,12
    3ccc:	14800115 	stw	r18,4(r2)
    3cd0:	10000015 	stw	zero,0(r2)
    3cd4:	11000215 	stw	r4,8(r2)
    3cd8:	1021883a 	mov	r16,r2
    3cdc:	00006e40 	call	6e4 <memset>
    3ce0:	8005883a 	mov	r2,r16
    3ce4:	dfc00317 	ldw	ra,12(sp)
    3ce8:	dc800217 	ldw	r18,8(sp)
    3cec:	dc400117 	ldw	r17,4(sp)
    3cf0:	dc000017 	ldw	r16,0(sp)
    3cf4:	dec00404 	addi	sp,sp,16
    3cf8:	f800283a 	ret

00003cfc <__sfp>:
    3cfc:	defffd04 	addi	sp,sp,-12
    3d00:	00800034 	movhi	r2,0
    3d04:	109d6704 	addi	r2,r2,30108
    3d08:	dc000015 	stw	r16,0(sp)
    3d0c:	14000017 	ldw	r16,0(r2)
    3d10:	dc400115 	stw	r17,4(sp)
    3d14:	dfc00215 	stw	ra,8(sp)
    3d18:	80800e17 	ldw	r2,56(r16)
    3d1c:	2023883a 	mov	r17,r4
    3d20:	10002626 	beq	r2,zero,3dbc <__sfp+0xc0>
    3d24:	8400b804 	addi	r16,r16,736
    3d28:	80800117 	ldw	r2,4(r16)
    3d2c:	81000217 	ldw	r4,8(r16)
    3d30:	10ffffc4 	addi	r3,r2,-1
    3d34:	18000916 	blt	r3,zero,3d5c <__sfp+0x60>
    3d38:	2080030f 	ldh	r2,12(r4)
    3d3c:	10000b26 	beq	r2,zero,3d6c <__sfp+0x70>
    3d40:	017fffc4 	movi	r5,-1
    3d44:	00000206 	br	3d50 <__sfp+0x54>
    3d48:	2080030f 	ldh	r2,12(r4)
    3d4c:	10000726 	beq	r2,zero,3d6c <__sfp+0x70>
    3d50:	18ffffc4 	addi	r3,r3,-1
    3d54:	21001704 	addi	r4,r4,92
    3d58:	197ffb1e 	bne	r3,r5,3d48 <__sfp+0x4c>
    3d5c:	80800017 	ldw	r2,0(r16)
    3d60:	10001926 	beq	r2,zero,3dc8 <__sfp+0xcc>
    3d64:	1021883a 	mov	r16,r2
    3d68:	003fef06 	br	3d28 <__sfp+0x2c>
    3d6c:	00bfffc4 	movi	r2,-1
    3d70:	00c00044 	movi	r3,1
    3d74:	2080038d 	sth	r2,14(r4)
    3d78:	20c0030d 	sth	r3,12(r4)
    3d7c:	20000015 	stw	zero,0(r4)
    3d80:	20000215 	stw	zero,8(r4)
    3d84:	20000115 	stw	zero,4(r4)
    3d88:	20000415 	stw	zero,16(r4)
    3d8c:	20000515 	stw	zero,20(r4)
    3d90:	20000615 	stw	zero,24(r4)
    3d94:	20000c15 	stw	zero,48(r4)
    3d98:	20000d15 	stw	zero,52(r4)
    3d9c:	20001115 	stw	zero,68(r4)
    3da0:	20001215 	stw	zero,72(r4)
    3da4:	2005883a 	mov	r2,r4
    3da8:	dfc00217 	ldw	ra,8(sp)
    3dac:	dc400117 	ldw	r17,4(sp)
    3db0:	dc000017 	ldw	r16,0(sp)
    3db4:	dec00304 	addi	sp,sp,12
    3db8:	f800283a 	ret
    3dbc:	8009883a 	mov	r4,r16
    3dc0:	0003b940 	call	3b94 <__sinit>
    3dc4:	003fd706 	br	3d24 <__sfp+0x28>
    3dc8:	8809883a 	mov	r4,r17
    3dcc:	01400104 	movi	r5,4
    3dd0:	0003c940 	call	3c94 <__sfmoreglue>
    3dd4:	80800015 	stw	r2,0(r16)
    3dd8:	103fe21e 	bne	r2,zero,3d64 <__sfp+0x68>
    3ddc:	00800304 	movi	r2,12
    3de0:	0009883a 	mov	r4,zero
    3de4:	88800015 	stw	r2,0(r17)
    3de8:	003fee06 	br	3da4 <__sfp+0xa8>

00003dec <_malloc_trim_r>:
    3dec:	defffb04 	addi	sp,sp,-20
    3df0:	dcc00315 	stw	r19,12(sp)
    3df4:	04c00034 	movhi	r19,0
    3df8:	9cdc5b04 	addi	r19,r19,29036
    3dfc:	dc800215 	stw	r18,8(sp)
    3e00:	dc400115 	stw	r17,4(sp)
    3e04:	dc000015 	stw	r16,0(sp)
    3e08:	2823883a 	mov	r17,r5
    3e0c:	2025883a 	mov	r18,r4
    3e10:	dfc00415 	stw	ra,16(sp)
    3e14:	00053cc0 	call	53cc <__malloc_lock>
    3e18:	98800217 	ldw	r2,8(r19)
    3e1c:	9009883a 	mov	r4,r18
    3e20:	000b883a 	mov	r5,zero
    3e24:	10c00117 	ldw	r3,4(r2)
    3e28:	00bfff04 	movi	r2,-4
    3e2c:	18a0703a 	and	r16,r3,r2
    3e30:	8463c83a 	sub	r17,r16,r17
    3e34:	8c43fbc4 	addi	r17,r17,4079
    3e38:	8822d33a 	srli	r17,r17,12
    3e3c:	0083ffc4 	movi	r2,4095
    3e40:	8c7fffc4 	addi	r17,r17,-1
    3e44:	8822933a 	slli	r17,r17,12
    3e48:	1440060e 	bge	r2,r17,3e64 <_malloc_trim_r+0x78>
    3e4c:	0004c800 	call	4c80 <_sbrk_r>
    3e50:	98c00217 	ldw	r3,8(r19)
    3e54:	9009883a 	mov	r4,r18
    3e58:	044bc83a 	sub	r5,zero,r17
    3e5c:	80c7883a 	add	r3,r16,r3
    3e60:	10c00926 	beq	r2,r3,3e88 <_malloc_trim_r+0x9c>
    3e64:	00053d00 	call	53d0 <__malloc_unlock>
    3e68:	0005883a 	mov	r2,zero
    3e6c:	dfc00417 	ldw	ra,16(sp)
    3e70:	dcc00317 	ldw	r19,12(sp)
    3e74:	dc800217 	ldw	r18,8(sp)
    3e78:	dc400117 	ldw	r17,4(sp)
    3e7c:	dc000017 	ldw	r16,0(sp)
    3e80:	dec00504 	addi	sp,sp,20
    3e84:	f800283a 	ret
    3e88:	9009883a 	mov	r4,r18
    3e8c:	0004c800 	call	4c80 <_sbrk_r>
    3e90:	844dc83a 	sub	r6,r16,r17
    3e94:	00ffffc4 	movi	r3,-1
    3e98:	9009883a 	mov	r4,r18
    3e9c:	000b883a 	mov	r5,zero
    3ea0:	01c00074 	movhi	r7,1
    3ea4:	39e4c204 	addi	r7,r7,-27896
    3ea8:	31800054 	ori	r6,r6,1
    3eac:	10c00926 	beq	r2,r3,3ed4 <_malloc_trim_r+0xe8>
    3eb0:	38800017 	ldw	r2,0(r7)
    3eb4:	98c00217 	ldw	r3,8(r19)
    3eb8:	9009883a 	mov	r4,r18
    3ebc:	1445c83a 	sub	r2,r2,r17
    3ec0:	38800015 	stw	r2,0(r7)
    3ec4:	19800115 	stw	r6,4(r3)
    3ec8:	00053d00 	call	53d0 <__malloc_unlock>
    3ecc:	00800044 	movi	r2,1
    3ed0:	003fe606 	br	3e6c <_malloc_trim_r+0x80>
    3ed4:	0004c800 	call	4c80 <_sbrk_r>
    3ed8:	99800217 	ldw	r6,8(r19)
    3edc:	100f883a 	mov	r7,r2
    3ee0:	9009883a 	mov	r4,r18
    3ee4:	1187c83a 	sub	r3,r2,r6
    3ee8:	008003c4 	movi	r2,15
    3eec:	19400054 	ori	r5,r3,1
    3ef0:	10ffdc0e 	bge	r2,r3,3e64 <_malloc_trim_r+0x78>
    3ef4:	00800034 	movhi	r2,0
    3ef8:	109d6904 	addi	r2,r2,30116
    3efc:	10c00017 	ldw	r3,0(r2)
    3f00:	00800074 	movhi	r2,1
    3f04:	10a4c204 	addi	r2,r2,-27896
    3f08:	31400115 	stw	r5,4(r6)
    3f0c:	38c7c83a 	sub	r3,r7,r3
    3f10:	10c00015 	stw	r3,0(r2)
    3f14:	003fd306 	br	3e64 <_malloc_trim_r+0x78>

00003f18 <_free_r>:
    3f18:	defffd04 	addi	sp,sp,-12
    3f1c:	dc400115 	stw	r17,4(sp)
    3f20:	dc000015 	stw	r16,0(sp)
    3f24:	dfc00215 	stw	ra,8(sp)
    3f28:	2821883a 	mov	r16,r5
    3f2c:	2023883a 	mov	r17,r4
    3f30:	28005a26 	beq	r5,zero,409c <_free_r+0x184>
    3f34:	00053cc0 	call	53cc <__malloc_lock>
    3f38:	823ffe04 	addi	r8,r16,-8
    3f3c:	41400117 	ldw	r5,4(r8)
    3f40:	00bfff84 	movi	r2,-2
    3f44:	02800034 	movhi	r10,0
    3f48:	529c5b04 	addi	r10,r10,29036
    3f4c:	288e703a 	and	r7,r5,r2
    3f50:	41cd883a 	add	r6,r8,r7
    3f54:	30c00117 	ldw	r3,4(r6)
    3f58:	51000217 	ldw	r4,8(r10)
    3f5c:	00bfff04 	movi	r2,-4
    3f60:	1892703a 	and	r9,r3,r2
    3f64:	5017883a 	mov	r11,r10
    3f68:	31006726 	beq	r6,r4,4108 <_free_r+0x1f0>
    3f6c:	2880004c 	andi	r2,r5,1
    3f70:	1005003a 	cmpeq	r2,r2,zero
    3f74:	32400115 	stw	r9,4(r6)
    3f78:	10001a1e 	bne	r2,zero,3fe4 <_free_r+0xcc>
    3f7c:	000b883a 	mov	r5,zero
    3f80:	3247883a 	add	r3,r6,r9
    3f84:	18800117 	ldw	r2,4(r3)
    3f88:	1080004c 	andi	r2,r2,1
    3f8c:	1000231e 	bne	r2,zero,401c <_free_r+0x104>
    3f90:	280ac03a 	cmpne	r5,r5,zero
    3f94:	3a4f883a 	add	r7,r7,r9
    3f98:	2800451e 	bne	r5,zero,40b0 <_free_r+0x198>
    3f9c:	31000217 	ldw	r4,8(r6)
    3fa0:	00800034 	movhi	r2,0
    3fa4:	109c5d04 	addi	r2,r2,29044
    3fa8:	20807b26 	beq	r4,r2,4198 <_free_r+0x280>
    3fac:	30800317 	ldw	r2,12(r6)
    3fb0:	3a07883a 	add	r3,r7,r8
    3fb4:	19c00015 	stw	r7,0(r3)
    3fb8:	11000215 	stw	r4,8(r2)
    3fbc:	20800315 	stw	r2,12(r4)
    3fc0:	38800054 	ori	r2,r7,1
    3fc4:	40800115 	stw	r2,4(r8)
    3fc8:	28001a26 	beq	r5,zero,4034 <_free_r+0x11c>
    3fcc:	8809883a 	mov	r4,r17
    3fd0:	dfc00217 	ldw	ra,8(sp)
    3fd4:	dc400117 	ldw	r17,4(sp)
    3fd8:	dc000017 	ldw	r16,0(sp)
    3fdc:	dec00304 	addi	sp,sp,12
    3fe0:	00053d01 	jmpi	53d0 <__malloc_unlock>
    3fe4:	80bffe17 	ldw	r2,-8(r16)
    3fe8:	50c00204 	addi	r3,r10,8
    3fec:	4091c83a 	sub	r8,r8,r2
    3ff0:	41000217 	ldw	r4,8(r8)
    3ff4:	388f883a 	add	r7,r7,r2
    3ff8:	20c06126 	beq	r4,r3,4180 <_free_r+0x268>
    3ffc:	40800317 	ldw	r2,12(r8)
    4000:	3247883a 	add	r3,r6,r9
    4004:	000b883a 	mov	r5,zero
    4008:	11000215 	stw	r4,8(r2)
    400c:	20800315 	stw	r2,12(r4)
    4010:	18800117 	ldw	r2,4(r3)
    4014:	1080004c 	andi	r2,r2,1
    4018:	103fdd26 	beq	r2,zero,3f90 <_free_r+0x78>
    401c:	38800054 	ori	r2,r7,1
    4020:	3a07883a 	add	r3,r7,r8
    4024:	280ac03a 	cmpne	r5,r5,zero
    4028:	40800115 	stw	r2,4(r8)
    402c:	19c00015 	stw	r7,0(r3)
    4030:	283fe61e 	bne	r5,zero,3fcc <_free_r+0xb4>
    4034:	00807fc4 	movi	r2,511
    4038:	11c01f2e 	bgeu	r2,r7,40b8 <_free_r+0x1a0>
    403c:	3806d27a 	srli	r3,r7,9
    4040:	1800481e 	bne	r3,zero,4164 <_free_r+0x24c>
    4044:	3804d0fa 	srli	r2,r7,3
    4048:	100690fa 	slli	r3,r2,3
    404c:	1acd883a 	add	r6,r3,r11
    4050:	31400217 	ldw	r5,8(r6)
    4054:	31405926 	beq	r6,r5,41bc <_free_r+0x2a4>
    4058:	28800117 	ldw	r2,4(r5)
    405c:	00ffff04 	movi	r3,-4
    4060:	10c4703a 	and	r2,r2,r3
    4064:	3880022e 	bgeu	r7,r2,4070 <_free_r+0x158>
    4068:	29400217 	ldw	r5,8(r5)
    406c:	317ffa1e 	bne	r6,r5,4058 <_free_r+0x140>
    4070:	29800317 	ldw	r6,12(r5)
    4074:	41800315 	stw	r6,12(r8)
    4078:	41400215 	stw	r5,8(r8)
    407c:	8809883a 	mov	r4,r17
    4080:	2a000315 	stw	r8,12(r5)
    4084:	32000215 	stw	r8,8(r6)
    4088:	dfc00217 	ldw	ra,8(sp)
    408c:	dc400117 	ldw	r17,4(sp)
    4090:	dc000017 	ldw	r16,0(sp)
    4094:	dec00304 	addi	sp,sp,12
    4098:	00053d01 	jmpi	53d0 <__malloc_unlock>
    409c:	dfc00217 	ldw	ra,8(sp)
    40a0:	dc400117 	ldw	r17,4(sp)
    40a4:	dc000017 	ldw	r16,0(sp)
    40a8:	dec00304 	addi	sp,sp,12
    40ac:	f800283a 	ret
    40b0:	31000217 	ldw	r4,8(r6)
    40b4:	003fbd06 	br	3fac <_free_r+0x94>
    40b8:	3806d0fa 	srli	r3,r7,3
    40bc:	00800044 	movi	r2,1
    40c0:	51400117 	ldw	r5,4(r10)
    40c4:	180890fa 	slli	r4,r3,3
    40c8:	1807d0ba 	srai	r3,r3,2
    40cc:	22c9883a 	add	r4,r4,r11
    40d0:	21800217 	ldw	r6,8(r4)
    40d4:	10c4983a 	sll	r2,r2,r3
    40d8:	41000315 	stw	r4,12(r8)
    40dc:	41800215 	stw	r6,8(r8)
    40e0:	288ab03a 	or	r5,r5,r2
    40e4:	22000215 	stw	r8,8(r4)
    40e8:	8809883a 	mov	r4,r17
    40ec:	51400115 	stw	r5,4(r10)
    40f0:	32000315 	stw	r8,12(r6)
    40f4:	dfc00217 	ldw	ra,8(sp)
    40f8:	dc400117 	ldw	r17,4(sp)
    40fc:	dc000017 	ldw	r16,0(sp)
    4100:	dec00304 	addi	sp,sp,12
    4104:	00053d01 	jmpi	53d0 <__malloc_unlock>
    4108:	2880004c 	andi	r2,r5,1
    410c:	3a4d883a 	add	r6,r7,r9
    4110:	1000071e 	bne	r2,zero,4130 <_free_r+0x218>
    4114:	80bffe17 	ldw	r2,-8(r16)
    4118:	4091c83a 	sub	r8,r8,r2
    411c:	41000317 	ldw	r4,12(r8)
    4120:	40c00217 	ldw	r3,8(r8)
    4124:	308d883a 	add	r6,r6,r2
    4128:	20c00215 	stw	r3,8(r4)
    412c:	19000315 	stw	r4,12(r3)
    4130:	00800034 	movhi	r2,0
    4134:	109d6804 	addi	r2,r2,30112
    4138:	11000017 	ldw	r4,0(r2)
    413c:	30c00054 	ori	r3,r6,1
    4140:	52000215 	stw	r8,8(r10)
    4144:	40c00115 	stw	r3,4(r8)
    4148:	313fa036 	bltu	r6,r4,3fcc <_free_r+0xb4>
    414c:	00800074 	movhi	r2,1
    4150:	10a4bf04 	addi	r2,r2,-27908
    4154:	11400017 	ldw	r5,0(r2)
    4158:	8809883a 	mov	r4,r17
    415c:	0003dec0 	call	3dec <_malloc_trim_r>
    4160:	003f9a06 	br	3fcc <_free_r+0xb4>
    4164:	00800104 	movi	r2,4
    4168:	10c0072e 	bgeu	r2,r3,4188 <_free_r+0x270>
    416c:	00800504 	movi	r2,20
    4170:	10c01936 	bltu	r2,r3,41d8 <_free_r+0x2c0>
    4174:	188016c4 	addi	r2,r3,91
    4178:	100690fa 	slli	r3,r2,3
    417c:	003fb306 	br	404c <_free_r+0x134>
    4180:	01400044 	movi	r5,1
    4184:	003f7e06 	br	3f80 <_free_r+0x68>
    4188:	3804d1ba 	srli	r2,r7,6
    418c:	10800e04 	addi	r2,r2,56
    4190:	100690fa 	slli	r3,r2,3
    4194:	003fad06 	br	404c <_free_r+0x134>
    4198:	22000315 	stw	r8,12(r4)
    419c:	22000215 	stw	r8,8(r4)
    41a0:	3a05883a 	add	r2,r7,r8
    41a4:	38c00054 	ori	r3,r7,1
    41a8:	11c00015 	stw	r7,0(r2)
    41ac:	41000215 	stw	r4,8(r8)
    41b0:	40c00115 	stw	r3,4(r8)
    41b4:	41000315 	stw	r4,12(r8)
    41b8:	003f8406 	br	3fcc <_free_r+0xb4>
    41bc:	1005d0ba 	srai	r2,r2,2
    41c0:	00c00044 	movi	r3,1
    41c4:	51000117 	ldw	r4,4(r10)
    41c8:	1886983a 	sll	r3,r3,r2
    41cc:	20c8b03a 	or	r4,r4,r3
    41d0:	51000115 	stw	r4,4(r10)
    41d4:	003fa706 	br	4074 <_free_r+0x15c>
    41d8:	00801504 	movi	r2,84
    41dc:	10c00436 	bltu	r2,r3,41f0 <_free_r+0x2d8>
    41e0:	3804d33a 	srli	r2,r7,12
    41e4:	10801b84 	addi	r2,r2,110
    41e8:	100690fa 	slli	r3,r2,3
    41ec:	003f9706 	br	404c <_free_r+0x134>
    41f0:	00805504 	movi	r2,340
    41f4:	10c00436 	bltu	r2,r3,4208 <_free_r+0x2f0>
    41f8:	3804d3fa 	srli	r2,r7,15
    41fc:	10801dc4 	addi	r2,r2,119
    4200:	100690fa 	slli	r3,r2,3
    4204:	003f9106 	br	404c <_free_r+0x134>
    4208:	00815504 	movi	r2,1364
    420c:	10c0032e 	bgeu	r2,r3,421c <_free_r+0x304>
    4210:	00801f84 	movi	r2,126
    4214:	00c0fc04 	movi	r3,1008
    4218:	003f8c06 	br	404c <_free_r+0x134>
    421c:	3804d4ba 	srli	r2,r7,18
    4220:	10801f04 	addi	r2,r2,124
    4224:	100690fa 	slli	r3,r2,3
    4228:	003f8806 	br	404c <_free_r+0x134>

0000422c <_fwalk_reent>:
    422c:	defff704 	addi	sp,sp,-36
    4230:	dcc00315 	stw	r19,12(sp)
    4234:	24c0b804 	addi	r19,r4,736
    4238:	dd800615 	stw	r22,24(sp)
    423c:	dd400515 	stw	r21,20(sp)
    4240:	dfc00815 	stw	ra,32(sp)
    4244:	ddc00715 	stw	r23,28(sp)
    4248:	dd000415 	stw	r20,16(sp)
    424c:	dc800215 	stw	r18,8(sp)
    4250:	dc400115 	stw	r17,4(sp)
    4254:	dc000015 	stw	r16,0(sp)
    4258:	202b883a 	mov	r21,r4
    425c:	282d883a 	mov	r22,r5
    4260:	0003b840 	call	3b84 <__sfp_lock_acquire>
    4264:	98002126 	beq	r19,zero,42ec <_fwalk_reent+0xc0>
    4268:	002f883a 	mov	r23,zero
    426c:	9c800117 	ldw	r18,4(r19)
    4270:	9c000217 	ldw	r16,8(r19)
    4274:	90bfffc4 	addi	r2,r18,-1
    4278:	10000d16 	blt	r2,zero,42b0 <_fwalk_reent+0x84>
    427c:	0023883a 	mov	r17,zero
    4280:	053fffc4 	movi	r20,-1
    4284:	8080030f 	ldh	r2,12(r16)
    4288:	8c400044 	addi	r17,r17,1
    428c:	10000626 	beq	r2,zero,42a8 <_fwalk_reent+0x7c>
    4290:	8080038f 	ldh	r2,14(r16)
    4294:	800b883a 	mov	r5,r16
    4298:	a809883a 	mov	r4,r21
    429c:	15000226 	beq	r2,r20,42a8 <_fwalk_reent+0x7c>
    42a0:	b03ee83a 	callr	r22
    42a4:	b8aeb03a 	or	r23,r23,r2
    42a8:	84001704 	addi	r16,r16,92
    42ac:	947ff51e 	bne	r18,r17,4284 <_fwalk_reent+0x58>
    42b0:	9cc00017 	ldw	r19,0(r19)
    42b4:	983fed1e 	bne	r19,zero,426c <_fwalk_reent+0x40>
    42b8:	0003b880 	call	3b88 <__sfp_lock_release>
    42bc:	b805883a 	mov	r2,r23
    42c0:	dfc00817 	ldw	ra,32(sp)
    42c4:	ddc00717 	ldw	r23,28(sp)
    42c8:	dd800617 	ldw	r22,24(sp)
    42cc:	dd400517 	ldw	r21,20(sp)
    42d0:	dd000417 	ldw	r20,16(sp)
    42d4:	dcc00317 	ldw	r19,12(sp)
    42d8:	dc800217 	ldw	r18,8(sp)
    42dc:	dc400117 	ldw	r17,4(sp)
    42e0:	dc000017 	ldw	r16,0(sp)
    42e4:	dec00904 	addi	sp,sp,36
    42e8:	f800283a 	ret
    42ec:	002f883a 	mov	r23,zero
    42f0:	003ff106 	br	42b8 <_fwalk_reent+0x8c>

000042f4 <_fwalk>:
    42f4:	defff804 	addi	sp,sp,-32
    42f8:	dcc00315 	stw	r19,12(sp)
    42fc:	24c0b804 	addi	r19,r4,736
    4300:	dd400515 	stw	r21,20(sp)
    4304:	dfc00715 	stw	ra,28(sp)
    4308:	dd800615 	stw	r22,24(sp)
    430c:	dd000415 	stw	r20,16(sp)
    4310:	dc800215 	stw	r18,8(sp)
    4314:	dc400115 	stw	r17,4(sp)
    4318:	dc000015 	stw	r16,0(sp)
    431c:	282b883a 	mov	r21,r5
    4320:	0003b840 	call	3b84 <__sfp_lock_acquire>
    4324:	98001f26 	beq	r19,zero,43a4 <_fwalk+0xb0>
    4328:	002d883a 	mov	r22,zero
    432c:	9c800117 	ldw	r18,4(r19)
    4330:	9c000217 	ldw	r16,8(r19)
    4334:	90bfffc4 	addi	r2,r18,-1
    4338:	10000c16 	blt	r2,zero,436c <_fwalk+0x78>
    433c:	0023883a 	mov	r17,zero
    4340:	053fffc4 	movi	r20,-1
    4344:	8080030f 	ldh	r2,12(r16)
    4348:	8c400044 	addi	r17,r17,1
    434c:	10000526 	beq	r2,zero,4364 <_fwalk+0x70>
    4350:	8080038f 	ldh	r2,14(r16)
    4354:	8009883a 	mov	r4,r16
    4358:	15000226 	beq	r2,r20,4364 <_fwalk+0x70>
    435c:	a83ee83a 	callr	r21
    4360:	b0acb03a 	or	r22,r22,r2
    4364:	84001704 	addi	r16,r16,92
    4368:	947ff61e 	bne	r18,r17,4344 <_fwalk+0x50>
    436c:	9cc00017 	ldw	r19,0(r19)
    4370:	983fee1e 	bne	r19,zero,432c <_fwalk+0x38>
    4374:	0003b880 	call	3b88 <__sfp_lock_release>
    4378:	b005883a 	mov	r2,r22
    437c:	dfc00717 	ldw	ra,28(sp)
    4380:	dd800617 	ldw	r22,24(sp)
    4384:	dd400517 	ldw	r21,20(sp)
    4388:	dd000417 	ldw	r20,16(sp)
    438c:	dcc00317 	ldw	r19,12(sp)
    4390:	dc800217 	ldw	r18,8(sp)
    4394:	dc400117 	ldw	r17,4(sp)
    4398:	dc000017 	ldw	r16,0(sp)
    439c:	dec00804 	addi	sp,sp,32
    43a0:	f800283a 	ret
    43a4:	002d883a 	mov	r22,zero
    43a8:	003ff206 	br	4374 <_fwalk+0x80>

000043ac <__smakebuf_r>:
    43ac:	2880030b 	ldhu	r2,12(r5)
    43b0:	deffed04 	addi	sp,sp,-76
    43b4:	dc401015 	stw	r17,64(sp)
    43b8:	1080008c 	andi	r2,r2,2
    43bc:	dc000f15 	stw	r16,60(sp)
    43c0:	dfc01215 	stw	ra,72(sp)
    43c4:	dc801115 	stw	r18,68(sp)
    43c8:	2821883a 	mov	r16,r5
    43cc:	2023883a 	mov	r17,r4
    43d0:	10000b26 	beq	r2,zero,4400 <__smakebuf_r+0x54>
    43d4:	28c010c4 	addi	r3,r5,67
    43d8:	00800044 	movi	r2,1
    43dc:	28800515 	stw	r2,20(r5)
    43e0:	28c00415 	stw	r3,16(r5)
    43e4:	28c00015 	stw	r3,0(r5)
    43e8:	dfc01217 	ldw	ra,72(sp)
    43ec:	dc801117 	ldw	r18,68(sp)
    43f0:	dc401017 	ldw	r17,64(sp)
    43f4:	dc000f17 	ldw	r16,60(sp)
    43f8:	dec01304 	addi	sp,sp,76
    43fc:	f800283a 	ret
    4400:	2940038f 	ldh	r5,14(r5)
    4404:	28002116 	blt	r5,zero,448c <__smakebuf_r+0xe0>
    4408:	d80d883a 	mov	r6,sp
    440c:	00050480 	call	5048 <_fstat_r>
    4410:	10001e16 	blt	r2,zero,448c <__smakebuf_r+0xe0>
    4414:	d8800117 	ldw	r2,4(sp)
    4418:	00e00014 	movui	r3,32768
    441c:	113c000c 	andi	r4,r2,61440
    4420:	20c03126 	beq	r4,r3,44e8 <__smakebuf_r+0x13c>
    4424:	8080030b 	ldhu	r2,12(r16)
    4428:	00c80004 	movi	r3,8192
    442c:	10820014 	ori	r2,r2,2048
    4430:	8080030d 	sth	r2,12(r16)
    4434:	20c01e26 	beq	r4,r3,44b0 <__smakebuf_r+0x104>
    4438:	04810004 	movi	r18,1024
    443c:	8809883a 	mov	r4,r17
    4440:	900b883a 	mov	r5,r18
    4444:	00045400 	call	4540 <_malloc_r>
    4448:	1009883a 	mov	r4,r2
    444c:	10003126 	beq	r2,zero,4514 <__smakebuf_r+0x168>
    4450:	80c0030b 	ldhu	r3,12(r16)
    4454:	00800034 	movhi	r2,0
    4458:	108f1e04 	addi	r2,r2,15480
    445c:	88800f15 	stw	r2,60(r17)
    4460:	18c02014 	ori	r3,r3,128
    4464:	84800515 	stw	r18,20(r16)
    4468:	80c0030d 	sth	r3,12(r16)
    446c:	81000415 	stw	r4,16(r16)
    4470:	81000015 	stw	r4,0(r16)
    4474:	dfc01217 	ldw	ra,72(sp)
    4478:	dc801117 	ldw	r18,68(sp)
    447c:	dc401017 	ldw	r17,64(sp)
    4480:	dc000f17 	ldw	r16,60(sp)
    4484:	dec01304 	addi	sp,sp,76
    4488:	f800283a 	ret
    448c:	80c0030b 	ldhu	r3,12(r16)
    4490:	1880200c 	andi	r2,r3,128
    4494:	10000426 	beq	r2,zero,44a8 <__smakebuf_r+0xfc>
    4498:	04801004 	movi	r18,64
    449c:	18820014 	ori	r2,r3,2048
    44a0:	8080030d 	sth	r2,12(r16)
    44a4:	003fe506 	br	443c <__smakebuf_r+0x90>
    44a8:	04810004 	movi	r18,1024
    44ac:	003ffb06 	br	449c <__smakebuf_r+0xf0>
    44b0:	8140038f 	ldh	r5,14(r16)
    44b4:	8809883a 	mov	r4,r17
    44b8:	00050bc0 	call	50bc <_isatty_r>
    44bc:	103fde26 	beq	r2,zero,4438 <__smakebuf_r+0x8c>
    44c0:	8080030b 	ldhu	r2,12(r16)
    44c4:	80c010c4 	addi	r3,r16,67
    44c8:	04810004 	movi	r18,1024
    44cc:	10800054 	ori	r2,r2,1
    44d0:	8080030d 	sth	r2,12(r16)
    44d4:	00800044 	movi	r2,1
    44d8:	80c00415 	stw	r3,16(r16)
    44dc:	80800515 	stw	r2,20(r16)
    44e0:	80c00015 	stw	r3,0(r16)
    44e4:	003fd506 	br	443c <__smakebuf_r+0x90>
    44e8:	80c00a17 	ldw	r3,40(r16)
    44ec:	00800034 	movhi	r2,0
    44f0:	10933e04 	addi	r2,r2,19704
    44f4:	18bfcb1e 	bne	r3,r2,4424 <__smakebuf_r+0x78>
    44f8:	8080030b 	ldhu	r2,12(r16)
    44fc:	00c10004 	movi	r3,1024
    4500:	1825883a 	mov	r18,r3
    4504:	10c4b03a 	or	r2,r2,r3
    4508:	8080030d 	sth	r2,12(r16)
    450c:	80c01315 	stw	r3,76(r16)
    4510:	003fca06 	br	443c <__smakebuf_r+0x90>
    4514:	8100030b 	ldhu	r4,12(r16)
    4518:	2080800c 	andi	r2,r4,512
    451c:	103fb21e 	bne	r2,zero,43e8 <__smakebuf_r+0x3c>
    4520:	80c010c4 	addi	r3,r16,67
    4524:	21000094 	ori	r4,r4,2
    4528:	00800044 	movi	r2,1
    452c:	80800515 	stw	r2,20(r16)
    4530:	8100030d 	sth	r4,12(r16)
    4534:	80c00415 	stw	r3,16(r16)
    4538:	80c00015 	stw	r3,0(r16)
    453c:	003faa06 	br	43e8 <__smakebuf_r+0x3c>

00004540 <_malloc_r>:
    4540:	defff604 	addi	sp,sp,-40
    4544:	28c002c4 	addi	r3,r5,11
    4548:	00800584 	movi	r2,22
    454c:	dc800215 	stw	r18,8(sp)
    4550:	dfc00915 	stw	ra,36(sp)
    4554:	df000815 	stw	fp,32(sp)
    4558:	ddc00715 	stw	r23,28(sp)
    455c:	dd800615 	stw	r22,24(sp)
    4560:	dd400515 	stw	r21,20(sp)
    4564:	dd000415 	stw	r20,16(sp)
    4568:	dcc00315 	stw	r19,12(sp)
    456c:	dc400115 	stw	r17,4(sp)
    4570:	dc000015 	stw	r16,0(sp)
    4574:	2025883a 	mov	r18,r4
    4578:	10c01236 	bltu	r2,r3,45c4 <_malloc_r+0x84>
    457c:	04400404 	movi	r17,16
    4580:	8940142e 	bgeu	r17,r5,45d4 <_malloc_r+0x94>
    4584:	00800304 	movi	r2,12
    4588:	0007883a 	mov	r3,zero
    458c:	90800015 	stw	r2,0(r18)
    4590:	1805883a 	mov	r2,r3
    4594:	dfc00917 	ldw	ra,36(sp)
    4598:	df000817 	ldw	fp,32(sp)
    459c:	ddc00717 	ldw	r23,28(sp)
    45a0:	dd800617 	ldw	r22,24(sp)
    45a4:	dd400517 	ldw	r21,20(sp)
    45a8:	dd000417 	ldw	r20,16(sp)
    45ac:	dcc00317 	ldw	r19,12(sp)
    45b0:	dc800217 	ldw	r18,8(sp)
    45b4:	dc400117 	ldw	r17,4(sp)
    45b8:	dc000017 	ldw	r16,0(sp)
    45bc:	dec00a04 	addi	sp,sp,40
    45c0:	f800283a 	ret
    45c4:	00bffe04 	movi	r2,-8
    45c8:	18a2703a 	and	r17,r3,r2
    45cc:	883fed16 	blt	r17,zero,4584 <_malloc_r+0x44>
    45d0:	897fec36 	bltu	r17,r5,4584 <_malloc_r+0x44>
    45d4:	9009883a 	mov	r4,r18
    45d8:	00053cc0 	call	53cc <__malloc_lock>
    45dc:	00807dc4 	movi	r2,503
    45e0:	14402b2e 	bgeu	r2,r17,4690 <_malloc_r+0x150>
    45e4:	8806d27a 	srli	r3,r17,9
    45e8:	18003f1e 	bne	r3,zero,46e8 <_malloc_r+0x1a8>
    45ec:	880cd0fa 	srli	r6,r17,3
    45f0:	300490fa 	slli	r2,r6,3
    45f4:	02c00034 	movhi	r11,0
    45f8:	5adc5b04 	addi	r11,r11,29036
    45fc:	12cb883a 	add	r5,r2,r11
    4600:	2c000317 	ldw	r16,12(r5)
    4604:	580f883a 	mov	r7,r11
    4608:	2c00041e 	bne	r5,r16,461c <_malloc_r+0xdc>
    460c:	00000a06 	br	4638 <_malloc_r+0xf8>
    4610:	1800860e 	bge	r3,zero,482c <_malloc_r+0x2ec>
    4614:	84000317 	ldw	r16,12(r16)
    4618:	2c000726 	beq	r5,r16,4638 <_malloc_r+0xf8>
    461c:	80800117 	ldw	r2,4(r16)
    4620:	00ffff04 	movi	r3,-4
    4624:	10c8703a 	and	r4,r2,r3
    4628:	2447c83a 	sub	r3,r4,r17
    462c:	008003c4 	movi	r2,15
    4630:	10fff70e 	bge	r2,r3,4610 <_malloc_r+0xd0>
    4634:	31bfffc4 	addi	r6,r6,-1
    4638:	32400044 	addi	r9,r6,1
    463c:	02800034 	movhi	r10,0
    4640:	529c5d04 	addi	r10,r10,29044
    4644:	54000217 	ldw	r16,8(r10)
    4648:	8280a026 	beq	r16,r10,48cc <_malloc_r+0x38c>
    464c:	80800117 	ldw	r2,4(r16)
    4650:	00ffff04 	movi	r3,-4
    4654:	10ca703a 	and	r5,r2,r3
    4658:	2c4dc83a 	sub	r6,r5,r17
    465c:	008003c4 	movi	r2,15
    4660:	11808316 	blt	r2,r6,4870 <_malloc_r+0x330>
    4664:	52800315 	stw	r10,12(r10)
    4668:	52800215 	stw	r10,8(r10)
    466c:	30002916 	blt	r6,zero,4714 <_malloc_r+0x1d4>
    4670:	8147883a 	add	r3,r16,r5
    4674:	18800117 	ldw	r2,4(r3)
    4678:	9009883a 	mov	r4,r18
    467c:	10800054 	ori	r2,r2,1
    4680:	18800115 	stw	r2,4(r3)
    4684:	00053d00 	call	53d0 <__malloc_unlock>
    4688:	80c00204 	addi	r3,r16,8
    468c:	003fc006 	br	4590 <_malloc_r+0x50>
    4690:	02c00034 	movhi	r11,0
    4694:	5adc5b04 	addi	r11,r11,29036
    4698:	8ac5883a 	add	r2,r17,r11
    469c:	14000317 	ldw	r16,12(r2)
    46a0:	580f883a 	mov	r7,r11
    46a4:	8806d0fa 	srli	r3,r17,3
    46a8:	14006c26 	beq	r2,r16,485c <_malloc_r+0x31c>
    46ac:	80c00117 	ldw	r3,4(r16)
    46b0:	00bfff04 	movi	r2,-4
    46b4:	81800317 	ldw	r6,12(r16)
    46b8:	1886703a 	and	r3,r3,r2
    46bc:	80c7883a 	add	r3,r16,r3
    46c0:	18800117 	ldw	r2,4(r3)
    46c4:	81400217 	ldw	r5,8(r16)
    46c8:	9009883a 	mov	r4,r18
    46cc:	10800054 	ori	r2,r2,1
    46d0:	18800115 	stw	r2,4(r3)
    46d4:	31400215 	stw	r5,8(r6)
    46d8:	29800315 	stw	r6,12(r5)
    46dc:	00053d00 	call	53d0 <__malloc_unlock>
    46e0:	80c00204 	addi	r3,r16,8
    46e4:	003faa06 	br	4590 <_malloc_r+0x50>
    46e8:	00800104 	movi	r2,4
    46ec:	10c0052e 	bgeu	r2,r3,4704 <_malloc_r+0x1c4>
    46f0:	00800504 	movi	r2,20
    46f4:	10c07836 	bltu	r2,r3,48d8 <_malloc_r+0x398>
    46f8:	198016c4 	addi	r6,r3,91
    46fc:	300490fa 	slli	r2,r6,3
    4700:	003fbc06 	br	45f4 <_malloc_r+0xb4>
    4704:	8804d1ba 	srli	r2,r17,6
    4708:	11800e04 	addi	r6,r2,56
    470c:	300490fa 	slli	r2,r6,3
    4710:	003fb806 	br	45f4 <_malloc_r+0xb4>
    4714:	00807fc4 	movi	r2,511
    4718:	1140bb36 	bltu	r2,r5,4a08 <_malloc_r+0x4c8>
    471c:	2806d0fa 	srli	r3,r5,3
    4720:	573ffe04 	addi	fp,r10,-8
    4724:	00800044 	movi	r2,1
    4728:	180890fa 	slli	r4,r3,3
    472c:	1807d0ba 	srai	r3,r3,2
    4730:	e1c00117 	ldw	r7,4(fp)
    4734:	5909883a 	add	r4,r11,r4
    4738:	21400217 	ldw	r5,8(r4)
    473c:	10c4983a 	sll	r2,r2,r3
    4740:	81000315 	stw	r4,12(r16)
    4744:	81400215 	stw	r5,8(r16)
    4748:	388eb03a 	or	r7,r7,r2
    474c:	2c000315 	stw	r16,12(r5)
    4750:	24000215 	stw	r16,8(r4)
    4754:	e1c00115 	stw	r7,4(fp)
    4758:	4807883a 	mov	r3,r9
    475c:	4800cd16 	blt	r9,zero,4a94 <_malloc_r+0x554>
    4760:	1807d0ba 	srai	r3,r3,2
    4764:	00800044 	movi	r2,1
    4768:	10c8983a 	sll	r4,r2,r3
    476c:	39004436 	bltu	r7,r4,4880 <_malloc_r+0x340>
    4770:	21c4703a 	and	r2,r4,r7
    4774:	10000a1e 	bne	r2,zero,47a0 <_malloc_r+0x260>
    4778:	2109883a 	add	r4,r4,r4
    477c:	00bfff04 	movi	r2,-4
    4780:	4884703a 	and	r2,r9,r2
    4784:	3906703a 	and	r3,r7,r4
    4788:	12400104 	addi	r9,r2,4
    478c:	1800041e 	bne	r3,zero,47a0 <_malloc_r+0x260>
    4790:	2109883a 	add	r4,r4,r4
    4794:	3904703a 	and	r2,r7,r4
    4798:	4a400104 	addi	r9,r9,4
    479c:	103ffc26 	beq	r2,zero,4790 <_malloc_r+0x250>
    47a0:	480490fa 	slli	r2,r9,3
    47a4:	4819883a 	mov	r12,r9
    47a8:	023fff04 	movi	r8,-4
    47ac:	589b883a 	add	r13,r11,r2
    47b0:	6807883a 	mov	r3,r13
    47b4:	014003c4 	movi	r5,15
    47b8:	1c000317 	ldw	r16,12(r3)
    47bc:	1c00041e 	bne	r3,r16,47d0 <_malloc_r+0x290>
    47c0:	0000a706 	br	4a60 <_malloc_r+0x520>
    47c4:	3000ab0e 	bge	r6,zero,4a74 <_malloc_r+0x534>
    47c8:	84000317 	ldw	r16,12(r16)
    47cc:	1c00a426 	beq	r3,r16,4a60 <_malloc_r+0x520>
    47d0:	80800117 	ldw	r2,4(r16)
    47d4:	1204703a 	and	r2,r2,r8
    47d8:	144dc83a 	sub	r6,r2,r17
    47dc:	29bff90e 	bge	r5,r6,47c4 <_malloc_r+0x284>
    47e0:	81000317 	ldw	r4,12(r16)
    47e4:	80c00217 	ldw	r3,8(r16)
    47e8:	89400054 	ori	r5,r17,1
    47ec:	8445883a 	add	r2,r16,r17
    47f0:	20c00215 	stw	r3,8(r4)
    47f4:	19000315 	stw	r4,12(r3)
    47f8:	81400115 	stw	r5,4(r16)
    47fc:	1187883a 	add	r3,r2,r6
    4800:	31000054 	ori	r4,r6,1
    4804:	50800315 	stw	r2,12(r10)
    4808:	50800215 	stw	r2,8(r10)
    480c:	19800015 	stw	r6,0(r3)
    4810:	11000115 	stw	r4,4(r2)
    4814:	12800215 	stw	r10,8(r2)
    4818:	12800315 	stw	r10,12(r2)
    481c:	9009883a 	mov	r4,r18
    4820:	00053d00 	call	53d0 <__malloc_unlock>
    4824:	80c00204 	addi	r3,r16,8
    4828:	003f5906 	br	4590 <_malloc_r+0x50>
    482c:	8109883a 	add	r4,r16,r4
    4830:	20800117 	ldw	r2,4(r4)
    4834:	80c00217 	ldw	r3,8(r16)
    4838:	81400317 	ldw	r5,12(r16)
    483c:	10800054 	ori	r2,r2,1
    4840:	20800115 	stw	r2,4(r4)
    4844:	28c00215 	stw	r3,8(r5)
    4848:	19400315 	stw	r5,12(r3)
    484c:	9009883a 	mov	r4,r18
    4850:	00053d00 	call	53d0 <__malloc_unlock>
    4854:	80c00204 	addi	r3,r16,8
    4858:	003f4d06 	br	4590 <_malloc_r+0x50>
    485c:	80800204 	addi	r2,r16,8
    4860:	14000317 	ldw	r16,12(r2)
    4864:	143f911e 	bne	r2,r16,46ac <_malloc_r+0x16c>
    4868:	1a400084 	addi	r9,r3,2
    486c:	003f7306 	br	463c <_malloc_r+0xfc>
    4870:	88c00054 	ori	r3,r17,1
    4874:	8445883a 	add	r2,r16,r17
    4878:	80c00115 	stw	r3,4(r16)
    487c:	003fdf06 	br	47fc <_malloc_r+0x2bc>
    4880:	e4000217 	ldw	r16,8(fp)
    4884:	00bfff04 	movi	r2,-4
    4888:	80c00117 	ldw	r3,4(r16)
    488c:	802d883a 	mov	r22,r16
    4890:	18aa703a 	and	r21,r3,r2
    4894:	ac401636 	bltu	r21,r17,48f0 <_malloc_r+0x3b0>
    4898:	ac49c83a 	sub	r4,r21,r17
    489c:	008003c4 	movi	r2,15
    48a0:	1100130e 	bge	r2,r4,48f0 <_malloc_r+0x3b0>
    48a4:	88800054 	ori	r2,r17,1
    48a8:	8447883a 	add	r3,r16,r17
    48ac:	80800115 	stw	r2,4(r16)
    48b0:	20800054 	ori	r2,r4,1
    48b4:	18800115 	stw	r2,4(r3)
    48b8:	e0c00215 	stw	r3,8(fp)
    48bc:	9009883a 	mov	r4,r18
    48c0:	00053d00 	call	53d0 <__malloc_unlock>
    48c4:	80c00204 	addi	r3,r16,8
    48c8:	003f3106 	br	4590 <_malloc_r+0x50>
    48cc:	39c00117 	ldw	r7,4(r7)
    48d0:	573ffe04 	addi	fp,r10,-8
    48d4:	003fa006 	br	4758 <_malloc_r+0x218>
    48d8:	00801504 	movi	r2,84
    48dc:	10c06736 	bltu	r2,r3,4a7c <_malloc_r+0x53c>
    48e0:	8804d33a 	srli	r2,r17,12
    48e4:	11801b84 	addi	r6,r2,110
    48e8:	300490fa 	slli	r2,r6,3
    48ec:	003f4106 	br	45f4 <_malloc_r+0xb4>
    48f0:	d0a76217 	ldw	r2,-25208(gp)
    48f4:	d0e00c17 	ldw	r3,-32720(gp)
    48f8:	053fffc4 	movi	r20,-1
    48fc:	10800404 	addi	r2,r2,16
    4900:	88a7883a 	add	r19,r17,r2
    4904:	1d000326 	beq	r3,r20,4914 <_malloc_r+0x3d4>
    4908:	98c3ffc4 	addi	r3,r19,4095
    490c:	00bc0004 	movi	r2,-4096
    4910:	18a6703a 	and	r19,r3,r2
    4914:	9009883a 	mov	r4,r18
    4918:	980b883a 	mov	r5,r19
    491c:	0004c800 	call	4c80 <_sbrk_r>
    4920:	1009883a 	mov	r4,r2
    4924:	15000426 	beq	r2,r20,4938 <_malloc_r+0x3f8>
    4928:	854b883a 	add	r5,r16,r21
    492c:	1029883a 	mov	r20,r2
    4930:	11405a2e 	bgeu	r2,r5,4a9c <_malloc_r+0x55c>
    4934:	87000c26 	beq	r16,fp,4968 <_malloc_r+0x428>
    4938:	e4000217 	ldw	r16,8(fp)
    493c:	80c00117 	ldw	r3,4(r16)
    4940:	00bfff04 	movi	r2,-4
    4944:	1884703a 	and	r2,r3,r2
    4948:	14400336 	bltu	r2,r17,4958 <_malloc_r+0x418>
    494c:	1449c83a 	sub	r4,r2,r17
    4950:	008003c4 	movi	r2,15
    4954:	113fd316 	blt	r2,r4,48a4 <_malloc_r+0x364>
    4958:	9009883a 	mov	r4,r18
    495c:	00053d00 	call	53d0 <__malloc_unlock>
    4960:	0007883a 	mov	r3,zero
    4964:	003f0a06 	br	4590 <_malloc_r+0x50>
    4968:	05c00074 	movhi	r23,1
    496c:	bde4c204 	addi	r23,r23,-27896
    4970:	b8800017 	ldw	r2,0(r23)
    4974:	988d883a 	add	r6,r19,r2
    4978:	b9800015 	stw	r6,0(r23)
    497c:	d0e00c17 	ldw	r3,-32720(gp)
    4980:	00bfffc4 	movi	r2,-1
    4984:	18808e26 	beq	r3,r2,4bc0 <_malloc_r+0x680>
    4988:	2145c83a 	sub	r2,r4,r5
    498c:	3085883a 	add	r2,r6,r2
    4990:	b8800015 	stw	r2,0(r23)
    4994:	20c001cc 	andi	r3,r4,7
    4998:	18005f1e 	bne	r3,zero,4b18 <_malloc_r+0x5d8>
    499c:	000b883a 	mov	r5,zero
    49a0:	a4c5883a 	add	r2,r20,r19
    49a4:	1083ffcc 	andi	r2,r2,4095
    49a8:	00c40004 	movi	r3,4096
    49ac:	1887c83a 	sub	r3,r3,r2
    49b0:	28e7883a 	add	r19,r5,r3
    49b4:	9009883a 	mov	r4,r18
    49b8:	980b883a 	mov	r5,r19
    49bc:	0004c800 	call	4c80 <_sbrk_r>
    49c0:	1007883a 	mov	r3,r2
    49c4:	00bfffc4 	movi	r2,-1
    49c8:	18807a26 	beq	r3,r2,4bb4 <_malloc_r+0x674>
    49cc:	1d05c83a 	sub	r2,r3,r20
    49d0:	9885883a 	add	r2,r19,r2
    49d4:	10c00054 	ori	r3,r2,1
    49d8:	b8800017 	ldw	r2,0(r23)
    49dc:	a021883a 	mov	r16,r20
    49e0:	a0c00115 	stw	r3,4(r20)
    49e4:	9885883a 	add	r2,r19,r2
    49e8:	b8800015 	stw	r2,0(r23)
    49ec:	e5000215 	stw	r20,8(fp)
    49f0:	b7003626 	beq	r22,fp,4acc <_malloc_r+0x58c>
    49f4:	018003c4 	movi	r6,15
    49f8:	35404b36 	bltu	r6,r21,4b28 <_malloc_r+0x5e8>
    49fc:	00800044 	movi	r2,1
    4a00:	a0800115 	stw	r2,4(r20)
    4a04:	003fcd06 	br	493c <_malloc_r+0x3fc>
    4a08:	2808d27a 	srli	r4,r5,9
    4a0c:	2000371e 	bne	r4,zero,4aec <_malloc_r+0x5ac>
    4a10:	2808d0fa 	srli	r4,r5,3
    4a14:	200690fa 	slli	r3,r4,3
    4a18:	1ad1883a 	add	r8,r3,r11
    4a1c:	41800217 	ldw	r6,8(r8)
    4a20:	41805b26 	beq	r8,r6,4b90 <_malloc_r+0x650>
    4a24:	30800117 	ldw	r2,4(r6)
    4a28:	00ffff04 	movi	r3,-4
    4a2c:	10c4703a 	and	r2,r2,r3
    4a30:	2880022e 	bgeu	r5,r2,4a3c <_malloc_r+0x4fc>
    4a34:	31800217 	ldw	r6,8(r6)
    4a38:	41bffa1e 	bne	r8,r6,4a24 <_malloc_r+0x4e4>
    4a3c:	32000317 	ldw	r8,12(r6)
    4a40:	39c00117 	ldw	r7,4(r7)
    4a44:	82000315 	stw	r8,12(r16)
    4a48:	81800215 	stw	r6,8(r16)
    4a4c:	07000034 	movhi	fp,0
    4a50:	e71c5b04 	addi	fp,fp,29036
    4a54:	34000315 	stw	r16,12(r6)
    4a58:	44000215 	stw	r16,8(r8)
    4a5c:	003f3e06 	br	4758 <_malloc_r+0x218>
    4a60:	63000044 	addi	r12,r12,1
    4a64:	608000cc 	andi	r2,r12,3
    4a68:	10005d26 	beq	r2,zero,4be0 <_malloc_r+0x6a0>
    4a6c:	18c00204 	addi	r3,r3,8
    4a70:	003f5106 	br	47b8 <_malloc_r+0x278>
    4a74:	8089883a 	add	r4,r16,r2
    4a78:	003f6d06 	br	4830 <_malloc_r+0x2f0>
    4a7c:	00805504 	movi	r2,340
    4a80:	10c02036 	bltu	r2,r3,4b04 <_malloc_r+0x5c4>
    4a84:	8804d3fa 	srli	r2,r17,15
    4a88:	11801dc4 	addi	r6,r2,119
    4a8c:	300490fa 	slli	r2,r6,3
    4a90:	003ed806 	br	45f4 <_malloc_r+0xb4>
    4a94:	48c000c4 	addi	r3,r9,3
    4a98:	003f3106 	br	4760 <_malloc_r+0x220>
    4a9c:	05c00074 	movhi	r23,1
    4aa0:	bde4c204 	addi	r23,r23,-27896
    4aa4:	b8800017 	ldw	r2,0(r23)
    4aa8:	988d883a 	add	r6,r19,r2
    4aac:	b9800015 	stw	r6,0(r23)
    4ab0:	293fb21e 	bne	r5,r4,497c <_malloc_r+0x43c>
    4ab4:	2083ffcc 	andi	r2,r4,4095
    4ab8:	103fb01e 	bne	r2,zero,497c <_malloc_r+0x43c>
    4abc:	e4000217 	ldw	r16,8(fp)
    4ac0:	9d45883a 	add	r2,r19,r21
    4ac4:	10800054 	ori	r2,r2,1
    4ac8:	80800115 	stw	r2,4(r16)
    4acc:	b8c00017 	ldw	r3,0(r23)
    4ad0:	d0a76317 	ldw	r2,-25204(gp)
    4ad4:	10c0012e 	bgeu	r2,r3,4adc <_malloc_r+0x59c>
    4ad8:	d0e76315 	stw	r3,-25204(gp)
    4adc:	d0a76417 	ldw	r2,-25200(gp)
    4ae0:	10ff962e 	bgeu	r2,r3,493c <_malloc_r+0x3fc>
    4ae4:	d0e76415 	stw	r3,-25200(gp)
    4ae8:	003f9406 	br	493c <_malloc_r+0x3fc>
    4aec:	00800104 	movi	r2,4
    4af0:	11001e36 	bltu	r2,r4,4b6c <_malloc_r+0x62c>
    4af4:	2804d1ba 	srli	r2,r5,6
    4af8:	11000e04 	addi	r4,r2,56
    4afc:	200690fa 	slli	r3,r4,3
    4b00:	003fc506 	br	4a18 <_malloc_r+0x4d8>
    4b04:	00815504 	movi	r2,1364
    4b08:	10c01d2e 	bgeu	r2,r3,4b80 <_malloc_r+0x640>
    4b0c:	01801f84 	movi	r6,126
    4b10:	0080fc04 	movi	r2,1008
    4b14:	003eb706 	br	45f4 <_malloc_r+0xb4>
    4b18:	00800204 	movi	r2,8
    4b1c:	10cbc83a 	sub	r5,r2,r3
    4b20:	2169883a 	add	r20,r4,r5
    4b24:	003f9e06 	br	49a0 <_malloc_r+0x460>
    4b28:	00bffe04 	movi	r2,-8
    4b2c:	a93ffd04 	addi	r4,r21,-12
    4b30:	2088703a 	and	r4,r4,r2
    4b34:	b10b883a 	add	r5,r22,r4
    4b38:	00c00144 	movi	r3,5
    4b3c:	28c00215 	stw	r3,8(r5)
    4b40:	28c00115 	stw	r3,4(r5)
    4b44:	b0800117 	ldw	r2,4(r22)
    4b48:	1080004c 	andi	r2,r2,1
    4b4c:	2084b03a 	or	r2,r4,r2
    4b50:	b0800115 	stw	r2,4(r22)
    4b54:	313fdd2e 	bgeu	r6,r4,4acc <_malloc_r+0x58c>
    4b58:	b1400204 	addi	r5,r22,8
    4b5c:	9009883a 	mov	r4,r18
    4b60:	0003f180 	call	3f18 <_free_r>
    4b64:	e4000217 	ldw	r16,8(fp)
    4b68:	003fd806 	br	4acc <_malloc_r+0x58c>
    4b6c:	00800504 	movi	r2,20
    4b70:	11001536 	bltu	r2,r4,4bc8 <_malloc_r+0x688>
    4b74:	210016c4 	addi	r4,r4,91
    4b78:	200690fa 	slli	r3,r4,3
    4b7c:	003fa606 	br	4a18 <_malloc_r+0x4d8>
    4b80:	8804d4ba 	srli	r2,r17,18
    4b84:	11801f04 	addi	r6,r2,124
    4b88:	300490fa 	slli	r2,r6,3
    4b8c:	003e9906 	br	45f4 <_malloc_r+0xb4>
    4b90:	2009d0ba 	srai	r4,r4,2
    4b94:	01400034 	movhi	r5,0
    4b98:	295c5b04 	addi	r5,r5,29036
    4b9c:	00c00044 	movi	r3,1
    4ba0:	28800117 	ldw	r2,4(r5)
    4ba4:	1906983a 	sll	r3,r3,r4
    4ba8:	10c4b03a 	or	r2,r2,r3
    4bac:	28800115 	stw	r2,4(r5)
    4bb0:	003fa306 	br	4a40 <_malloc_r+0x500>
    4bb4:	0027883a 	mov	r19,zero
    4bb8:	00c00044 	movi	r3,1
    4bbc:	003f8606 	br	49d8 <_malloc_r+0x498>
    4bc0:	d1200c15 	stw	r4,-32720(gp)
    4bc4:	003f7306 	br	4994 <_malloc_r+0x454>
    4bc8:	00801504 	movi	r2,84
    4bcc:	11001936 	bltu	r2,r4,4c34 <_malloc_r+0x6f4>
    4bd0:	2804d33a 	srli	r2,r5,12
    4bd4:	11001b84 	addi	r4,r2,110
    4bd8:	200690fa 	slli	r3,r4,3
    4bdc:	003f8e06 	br	4a18 <_malloc_r+0x4d8>
    4be0:	480b883a 	mov	r5,r9
    4be4:	6807883a 	mov	r3,r13
    4be8:	288000cc 	andi	r2,r5,3
    4bec:	18fffe04 	addi	r3,r3,-8
    4bf0:	297fffc4 	addi	r5,r5,-1
    4bf4:	10001526 	beq	r2,zero,4c4c <_malloc_r+0x70c>
    4bf8:	18800217 	ldw	r2,8(r3)
    4bfc:	10fffa26 	beq	r2,r3,4be8 <_malloc_r+0x6a8>
    4c00:	2109883a 	add	r4,r4,r4
    4c04:	393f1e36 	bltu	r7,r4,4880 <_malloc_r+0x340>
    4c08:	203f1d26 	beq	r4,zero,4880 <_malloc_r+0x340>
    4c0c:	21c4703a 	and	r2,r4,r7
    4c10:	10000226 	beq	r2,zero,4c1c <_malloc_r+0x6dc>
    4c14:	6013883a 	mov	r9,r12
    4c18:	003ee106 	br	47a0 <_malloc_r+0x260>
    4c1c:	2109883a 	add	r4,r4,r4
    4c20:	3904703a 	and	r2,r7,r4
    4c24:	63000104 	addi	r12,r12,4
    4c28:	103ffc26 	beq	r2,zero,4c1c <_malloc_r+0x6dc>
    4c2c:	6013883a 	mov	r9,r12
    4c30:	003edb06 	br	47a0 <_malloc_r+0x260>
    4c34:	00805504 	movi	r2,340
    4c38:	11000836 	bltu	r2,r4,4c5c <_malloc_r+0x71c>
    4c3c:	2804d3fa 	srli	r2,r5,15
    4c40:	11001dc4 	addi	r4,r2,119
    4c44:	200690fa 	slli	r3,r4,3
    4c48:	003f7306 	br	4a18 <_malloc_r+0x4d8>
    4c4c:	0104303a 	nor	r2,zero,r4
    4c50:	388e703a 	and	r7,r7,r2
    4c54:	e1c00115 	stw	r7,4(fp)
    4c58:	003fe906 	br	4c00 <_malloc_r+0x6c0>
    4c5c:	00815504 	movi	r2,1364
    4c60:	1100032e 	bgeu	r2,r4,4c70 <_malloc_r+0x730>
    4c64:	01001f84 	movi	r4,126
    4c68:	00c0fc04 	movi	r3,1008
    4c6c:	003f6a06 	br	4a18 <_malloc_r+0x4d8>
    4c70:	2804d4ba 	srli	r2,r5,18
    4c74:	11001f04 	addi	r4,r2,124
    4c78:	200690fa 	slli	r3,r4,3
    4c7c:	003f6606 	br	4a18 <_malloc_r+0x4d8>

00004c80 <_sbrk_r>:
    4c80:	defffd04 	addi	sp,sp,-12
    4c84:	dc000015 	stw	r16,0(sp)
    4c88:	04000074 	movhi	r16,1
    4c8c:	8424be04 	addi	r16,r16,-27912
    4c90:	dc400115 	stw	r17,4(sp)
    4c94:	80000015 	stw	zero,0(r16)
    4c98:	2023883a 	mov	r17,r4
    4c9c:	2809883a 	mov	r4,r5
    4ca0:	dfc00215 	stw	ra,8(sp)
    4ca4:	00054cc0 	call	54cc <sbrk>
    4ca8:	1007883a 	mov	r3,r2
    4cac:	00bfffc4 	movi	r2,-1
    4cb0:	18800626 	beq	r3,r2,4ccc <_sbrk_r+0x4c>
    4cb4:	1805883a 	mov	r2,r3
    4cb8:	dfc00217 	ldw	ra,8(sp)
    4cbc:	dc400117 	ldw	r17,4(sp)
    4cc0:	dc000017 	ldw	r16,0(sp)
    4cc4:	dec00304 	addi	sp,sp,12
    4cc8:	f800283a 	ret
    4ccc:	80800017 	ldw	r2,0(r16)
    4cd0:	103ff826 	beq	r2,zero,4cb4 <_sbrk_r+0x34>
    4cd4:	88800015 	stw	r2,0(r17)
    4cd8:	1805883a 	mov	r2,r3
    4cdc:	dfc00217 	ldw	ra,8(sp)
    4ce0:	dc400117 	ldw	r17,4(sp)
    4ce4:	dc000017 	ldw	r16,0(sp)
    4ce8:	dec00304 	addi	sp,sp,12
    4cec:	f800283a 	ret

00004cf0 <__sclose>:
    4cf0:	2940038f 	ldh	r5,14(r5)
    4cf4:	0004eb41 	jmpi	4eb4 <_close_r>

00004cf8 <__sseek>:
    4cf8:	defffe04 	addi	sp,sp,-8
    4cfc:	dc000015 	stw	r16,0(sp)
    4d00:	2821883a 	mov	r16,r5
    4d04:	2940038f 	ldh	r5,14(r5)
    4d08:	dfc00115 	stw	ra,4(sp)
    4d0c:	000512c0 	call	512c <_lseek_r>
    4d10:	1007883a 	mov	r3,r2
    4d14:	00bfffc4 	movi	r2,-1
    4d18:	18800926 	beq	r3,r2,4d40 <__sseek+0x48>
    4d1c:	8080030b 	ldhu	r2,12(r16)
    4d20:	80c01415 	stw	r3,80(r16)
    4d24:	10840014 	ori	r2,r2,4096
    4d28:	8080030d 	sth	r2,12(r16)
    4d2c:	1805883a 	mov	r2,r3
    4d30:	dfc00117 	ldw	ra,4(sp)
    4d34:	dc000017 	ldw	r16,0(sp)
    4d38:	dec00204 	addi	sp,sp,8
    4d3c:	f800283a 	ret
    4d40:	8080030b 	ldhu	r2,12(r16)
    4d44:	10bbffcc 	andi	r2,r2,61439
    4d48:	8080030d 	sth	r2,12(r16)
    4d4c:	1805883a 	mov	r2,r3
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	dc000017 	ldw	r16,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <__swrite>:
    4d60:	2880030b 	ldhu	r2,12(r5)
    4d64:	defffb04 	addi	sp,sp,-20
    4d68:	dcc00315 	stw	r19,12(sp)
    4d6c:	1080400c 	andi	r2,r2,256
    4d70:	dc800215 	stw	r18,8(sp)
    4d74:	dc400115 	stw	r17,4(sp)
    4d78:	dc000015 	stw	r16,0(sp)
    4d7c:	3027883a 	mov	r19,r6
    4d80:	3825883a 	mov	r18,r7
    4d84:	dfc00415 	stw	ra,16(sp)
    4d88:	2821883a 	mov	r16,r5
    4d8c:	000d883a 	mov	r6,zero
    4d90:	01c00084 	movi	r7,2
    4d94:	2023883a 	mov	r17,r4
    4d98:	10000226 	beq	r2,zero,4da4 <__swrite+0x44>
    4d9c:	2940038f 	ldh	r5,14(r5)
    4da0:	000512c0 	call	512c <_lseek_r>
    4da4:	8080030b 	ldhu	r2,12(r16)
    4da8:	8140038f 	ldh	r5,14(r16)
    4dac:	8809883a 	mov	r4,r17
    4db0:	10bbffcc 	andi	r2,r2,61439
    4db4:	980d883a 	mov	r6,r19
    4db8:	900f883a 	mov	r7,r18
    4dbc:	8080030d 	sth	r2,12(r16)
    4dc0:	dfc00417 	ldw	ra,16(sp)
    4dc4:	dcc00317 	ldw	r19,12(sp)
    4dc8:	dc800217 	ldw	r18,8(sp)
    4dcc:	dc400117 	ldw	r17,4(sp)
    4dd0:	dc000017 	ldw	r16,0(sp)
    4dd4:	dec00504 	addi	sp,sp,20
    4dd8:	0004e3c1 	jmpi	4e3c <_write_r>

00004ddc <__sread>:
    4ddc:	defffe04 	addi	sp,sp,-8
    4de0:	dc000015 	stw	r16,0(sp)
    4de4:	2821883a 	mov	r16,r5
    4de8:	2940038f 	ldh	r5,14(r5)
    4dec:	dfc00115 	stw	ra,4(sp)
    4df0:	00051a40 	call	51a4 <_read_r>
    4df4:	1007883a 	mov	r3,r2
    4df8:	10000816 	blt	r2,zero,4e1c <__sread+0x40>
    4dfc:	80801417 	ldw	r2,80(r16)
    4e00:	10c5883a 	add	r2,r2,r3
    4e04:	80801415 	stw	r2,80(r16)
    4e08:	1805883a 	mov	r2,r3
    4e0c:	dfc00117 	ldw	ra,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00204 	addi	sp,sp,8
    4e18:	f800283a 	ret
    4e1c:	8080030b 	ldhu	r2,12(r16)
    4e20:	10bbffcc 	andi	r2,r2,61439
    4e24:	8080030d 	sth	r2,12(r16)
    4e28:	1805883a 	mov	r2,r3
    4e2c:	dfc00117 	ldw	ra,4(sp)
    4e30:	dc000017 	ldw	r16,0(sp)
    4e34:	dec00204 	addi	sp,sp,8
    4e38:	f800283a 	ret

00004e3c <_write_r>:
    4e3c:	defffd04 	addi	sp,sp,-12
    4e40:	dc000015 	stw	r16,0(sp)
    4e44:	04000074 	movhi	r16,1
    4e48:	8424be04 	addi	r16,r16,-27912
    4e4c:	dc400115 	stw	r17,4(sp)
    4e50:	80000015 	stw	zero,0(r16)
    4e54:	2023883a 	mov	r17,r4
    4e58:	2809883a 	mov	r4,r5
    4e5c:	300b883a 	mov	r5,r6
    4e60:	380d883a 	mov	r6,r7
    4e64:	dfc00215 	stw	ra,8(sp)
    4e68:	000551c0 	call	551c <write>
    4e6c:	1007883a 	mov	r3,r2
    4e70:	00bfffc4 	movi	r2,-1
    4e74:	18800626 	beq	r3,r2,4e90 <_write_r+0x54>
    4e78:	1805883a 	mov	r2,r3
    4e7c:	dfc00217 	ldw	ra,8(sp)
    4e80:	dc400117 	ldw	r17,4(sp)
    4e84:	dc000017 	ldw	r16,0(sp)
    4e88:	dec00304 	addi	sp,sp,12
    4e8c:	f800283a 	ret
    4e90:	80800017 	ldw	r2,0(r16)
    4e94:	103ff826 	beq	r2,zero,4e78 <_write_r+0x3c>
    4e98:	88800015 	stw	r2,0(r17)
    4e9c:	1805883a 	mov	r2,r3
    4ea0:	dfc00217 	ldw	ra,8(sp)
    4ea4:	dc400117 	ldw	r17,4(sp)
    4ea8:	dc000017 	ldw	r16,0(sp)
    4eac:	dec00304 	addi	sp,sp,12
    4eb0:	f800283a 	ret

00004eb4 <_close_r>:
    4eb4:	defffd04 	addi	sp,sp,-12
    4eb8:	dc000015 	stw	r16,0(sp)
    4ebc:	04000074 	movhi	r16,1
    4ec0:	8424be04 	addi	r16,r16,-27912
    4ec4:	dc400115 	stw	r17,4(sp)
    4ec8:	80000015 	stw	zero,0(r16)
    4ecc:	2023883a 	mov	r17,r4
    4ed0:	2809883a 	mov	r4,r5
    4ed4:	dfc00215 	stw	ra,8(sp)
    4ed8:	00028cc0 	call	28cc <close>
    4edc:	1007883a 	mov	r3,r2
    4ee0:	00bfffc4 	movi	r2,-1
    4ee4:	18800626 	beq	r3,r2,4f00 <_close_r+0x4c>
    4ee8:	1805883a 	mov	r2,r3
    4eec:	dfc00217 	ldw	ra,8(sp)
    4ef0:	dc400117 	ldw	r17,4(sp)
    4ef4:	dc000017 	ldw	r16,0(sp)
    4ef8:	dec00304 	addi	sp,sp,12
    4efc:	f800283a 	ret
    4f00:	80800017 	ldw	r2,0(r16)
    4f04:	103ff826 	beq	r2,zero,4ee8 <_close_r+0x34>
    4f08:	88800015 	stw	r2,0(r17)
    4f0c:	1805883a 	mov	r2,r3
    4f10:	dfc00217 	ldw	ra,8(sp)
    4f14:	dc400117 	ldw	r17,4(sp)
    4f18:	dc000017 	ldw	r16,0(sp)
    4f1c:	dec00304 	addi	sp,sp,12
    4f20:	f800283a 	ret

00004f24 <_fclose_r>:
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dc400115 	stw	r17,4(sp)
    4f2c:	dc000015 	stw	r16,0(sp)
    4f30:	dfc00315 	stw	ra,12(sp)
    4f34:	dc800215 	stw	r18,8(sp)
    4f38:	2821883a 	mov	r16,r5
    4f3c:	2023883a 	mov	r17,r4
    4f40:	28002926 	beq	r5,zero,4fe8 <_fclose_r+0xc4>
    4f44:	0003b840 	call	3b84 <__sfp_lock_acquire>
    4f48:	88000226 	beq	r17,zero,4f54 <_fclose_r+0x30>
    4f4c:	88800e17 	ldw	r2,56(r17)
    4f50:	10002d26 	beq	r2,zero,5008 <_fclose_r+0xe4>
    4f54:	8080030f 	ldh	r2,12(r16)
    4f58:	10002226 	beq	r2,zero,4fe4 <_fclose_r+0xc0>
    4f5c:	8809883a 	mov	r4,r17
    4f60:	800b883a 	mov	r5,r16
    4f64:	00038fc0 	call	38fc <_fflush_r>
    4f68:	1025883a 	mov	r18,r2
    4f6c:	80800b17 	ldw	r2,44(r16)
    4f70:	10000426 	beq	r2,zero,4f84 <_fclose_r+0x60>
    4f74:	81400717 	ldw	r5,28(r16)
    4f78:	8809883a 	mov	r4,r17
    4f7c:	103ee83a 	callr	r2
    4f80:	10002a16 	blt	r2,zero,502c <_fclose_r+0x108>
    4f84:	8080030b 	ldhu	r2,12(r16)
    4f88:	1080200c 	andi	r2,r2,128
    4f8c:	1000231e 	bne	r2,zero,501c <_fclose_r+0xf8>
    4f90:	81400c17 	ldw	r5,48(r16)
    4f94:	28000526 	beq	r5,zero,4fac <_fclose_r+0x88>
    4f98:	80801004 	addi	r2,r16,64
    4f9c:	28800226 	beq	r5,r2,4fa8 <_fclose_r+0x84>
    4fa0:	8809883a 	mov	r4,r17
    4fa4:	0003f180 	call	3f18 <_free_r>
    4fa8:	80000c15 	stw	zero,48(r16)
    4fac:	81401117 	ldw	r5,68(r16)
    4fb0:	28000326 	beq	r5,zero,4fc0 <_fclose_r+0x9c>
    4fb4:	8809883a 	mov	r4,r17
    4fb8:	0003f180 	call	3f18 <_free_r>
    4fbc:	80001115 	stw	zero,68(r16)
    4fc0:	8000030d 	sth	zero,12(r16)
    4fc4:	0003b880 	call	3b88 <__sfp_lock_release>
    4fc8:	9005883a 	mov	r2,r18
    4fcc:	dfc00317 	ldw	ra,12(sp)
    4fd0:	dc800217 	ldw	r18,8(sp)
    4fd4:	dc400117 	ldw	r17,4(sp)
    4fd8:	dc000017 	ldw	r16,0(sp)
    4fdc:	dec00404 	addi	sp,sp,16
    4fe0:	f800283a 	ret
    4fe4:	0003b880 	call	3b88 <__sfp_lock_release>
    4fe8:	0025883a 	mov	r18,zero
    4fec:	9005883a 	mov	r2,r18
    4ff0:	dfc00317 	ldw	ra,12(sp)
    4ff4:	dc800217 	ldw	r18,8(sp)
    4ff8:	dc400117 	ldw	r17,4(sp)
    4ffc:	dc000017 	ldw	r16,0(sp)
    5000:	dec00404 	addi	sp,sp,16
    5004:	f800283a 	ret
    5008:	8809883a 	mov	r4,r17
    500c:	0003b940 	call	3b94 <__sinit>
    5010:	8080030f 	ldh	r2,12(r16)
    5014:	103fd11e 	bne	r2,zero,4f5c <_fclose_r+0x38>
    5018:	003ff206 	br	4fe4 <_fclose_r+0xc0>
    501c:	81400417 	ldw	r5,16(r16)
    5020:	8809883a 	mov	r4,r17
    5024:	0003f180 	call	3f18 <_free_r>
    5028:	003fd906 	br	4f90 <_fclose_r+0x6c>
    502c:	04bfffc4 	movi	r18,-1
    5030:	003fd406 	br	4f84 <_fclose_r+0x60>

00005034 <fclose>:
    5034:	00800034 	movhi	r2,0
    5038:	109d6604 	addi	r2,r2,30104
    503c:	200b883a 	mov	r5,r4
    5040:	11000017 	ldw	r4,0(r2)
    5044:	0004f241 	jmpi	4f24 <_fclose_r>

00005048 <_fstat_r>:
    5048:	defffd04 	addi	sp,sp,-12
    504c:	dc000015 	stw	r16,0(sp)
    5050:	04000074 	movhi	r16,1
    5054:	8424be04 	addi	r16,r16,-27912
    5058:	dc400115 	stw	r17,4(sp)
    505c:	80000015 	stw	zero,0(r16)
    5060:	2023883a 	mov	r17,r4
    5064:	2809883a 	mov	r4,r5
    5068:	300b883a 	mov	r5,r6
    506c:	dfc00215 	stw	ra,8(sp)
    5070:	00052300 	call	5230 <fstat>
    5074:	1007883a 	mov	r3,r2
    5078:	00bfffc4 	movi	r2,-1
    507c:	18800626 	beq	r3,r2,5098 <_fstat_r+0x50>
    5080:	1805883a 	mov	r2,r3
    5084:	dfc00217 	ldw	ra,8(sp)
    5088:	dc400117 	ldw	r17,4(sp)
    508c:	dc000017 	ldw	r16,0(sp)
    5090:	dec00304 	addi	sp,sp,12
    5094:	f800283a 	ret
    5098:	80800017 	ldw	r2,0(r16)
    509c:	103ff826 	beq	r2,zero,5080 <_fstat_r+0x38>
    50a0:	88800015 	stw	r2,0(r17)
    50a4:	1805883a 	mov	r2,r3
    50a8:	dfc00217 	ldw	ra,8(sp)
    50ac:	dc400117 	ldw	r17,4(sp)
    50b0:	dc000017 	ldw	r16,0(sp)
    50b4:	dec00304 	addi	sp,sp,12
    50b8:	f800283a 	ret

000050bc <_isatty_r>:
    50bc:	defffd04 	addi	sp,sp,-12
    50c0:	dc000015 	stw	r16,0(sp)
    50c4:	04000074 	movhi	r16,1
    50c8:	8424be04 	addi	r16,r16,-27912
    50cc:	dc400115 	stw	r17,4(sp)
    50d0:	80000015 	stw	zero,0(r16)
    50d4:	2023883a 	mov	r17,r4
    50d8:	2809883a 	mov	r4,r5
    50dc:	dfc00215 	stw	ra,8(sp)
    50e0:	00052b00 	call	52b0 <isatty>
    50e4:	1007883a 	mov	r3,r2
    50e8:	00bfffc4 	movi	r2,-1
    50ec:	18800626 	beq	r3,r2,5108 <_isatty_r+0x4c>
    50f0:	1805883a 	mov	r2,r3
    50f4:	dfc00217 	ldw	ra,8(sp)
    50f8:	dc400117 	ldw	r17,4(sp)
    50fc:	dc000017 	ldw	r16,0(sp)
    5100:	dec00304 	addi	sp,sp,12
    5104:	f800283a 	ret
    5108:	80800017 	ldw	r2,0(r16)
    510c:	103ff826 	beq	r2,zero,50f0 <_isatty_r+0x34>
    5110:	88800015 	stw	r2,0(r17)
    5114:	1805883a 	mov	r2,r3
    5118:	dfc00217 	ldw	ra,8(sp)
    511c:	dc400117 	ldw	r17,4(sp)
    5120:	dc000017 	ldw	r16,0(sp)
    5124:	dec00304 	addi	sp,sp,12
    5128:	f800283a 	ret

0000512c <_lseek_r>:
    512c:	defffd04 	addi	sp,sp,-12
    5130:	dc000015 	stw	r16,0(sp)
    5134:	04000074 	movhi	r16,1
    5138:	8424be04 	addi	r16,r16,-27912
    513c:	dc400115 	stw	r17,4(sp)
    5140:	80000015 	stw	zero,0(r16)
    5144:	2023883a 	mov	r17,r4
    5148:	2809883a 	mov	r4,r5
    514c:	300b883a 	mov	r5,r6
    5150:	380d883a 	mov	r6,r7
    5154:	dfc00215 	stw	ra,8(sp)
    5158:	00053340 	call	5334 <lseek>
    515c:	1007883a 	mov	r3,r2
    5160:	00bfffc4 	movi	r2,-1
    5164:	18800626 	beq	r3,r2,5180 <_lseek_r+0x54>
    5168:	1805883a 	mov	r2,r3
    516c:	dfc00217 	ldw	ra,8(sp)
    5170:	dc400117 	ldw	r17,4(sp)
    5174:	dc000017 	ldw	r16,0(sp)
    5178:	dec00304 	addi	sp,sp,12
    517c:	f800283a 	ret
    5180:	80800017 	ldw	r2,0(r16)
    5184:	103ff826 	beq	r2,zero,5168 <_lseek_r+0x3c>
    5188:	88800015 	stw	r2,0(r17)
    518c:	1805883a 	mov	r2,r3
    5190:	dfc00217 	ldw	ra,8(sp)
    5194:	dc400117 	ldw	r17,4(sp)
    5198:	dc000017 	ldw	r16,0(sp)
    519c:	dec00304 	addi	sp,sp,12
    51a0:	f800283a 	ret

000051a4 <_read_r>:
    51a4:	defffd04 	addi	sp,sp,-12
    51a8:	dc000015 	stw	r16,0(sp)
    51ac:	04000074 	movhi	r16,1
    51b0:	8424be04 	addi	r16,r16,-27912
    51b4:	dc400115 	stw	r17,4(sp)
    51b8:	80000015 	stw	zero,0(r16)
    51bc:	2023883a 	mov	r17,r4
    51c0:	2809883a 	mov	r4,r5
    51c4:	300b883a 	mov	r5,r6
    51c8:	380d883a 	mov	r6,r7
    51cc:	dfc00215 	stw	ra,8(sp)
    51d0:	00053d40 	call	53d4 <read>
    51d4:	1007883a 	mov	r3,r2
    51d8:	00bfffc4 	movi	r2,-1
    51dc:	18800626 	beq	r3,r2,51f8 <_read_r+0x54>
    51e0:	1805883a 	mov	r2,r3
    51e4:	dfc00217 	ldw	ra,8(sp)
    51e8:	dc400117 	ldw	r17,4(sp)
    51ec:	dc000017 	ldw	r16,0(sp)
    51f0:	dec00304 	addi	sp,sp,12
    51f4:	f800283a 	ret
    51f8:	80800017 	ldw	r2,0(r16)
    51fc:	103ff826 	beq	r2,zero,51e0 <_read_r+0x3c>
    5200:	88800015 	stw	r2,0(r17)
    5204:	1805883a 	mov	r2,r3
    5208:	dfc00217 	ldw	ra,8(sp)
    520c:	dc400117 	ldw	r17,4(sp)
    5210:	dc000017 	ldw	r16,0(sp)
    5214:	dec00304 	addi	sp,sp,12
    5218:	f800283a 	ret

0000521c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    521c:	20000226 	beq	r4,zero,5228 <_exit+0xc>
    ALT_SIM_FAIL();
    5220:	002af070 	cmpltui	zero,zero,43969
    5224:	00000106 	br	522c <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    5228:	002af0b0 	cmpltui	zero,zero,43970
    522c:	003fff06 	br	522c <_exit+0x10>

00005230 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5230:	deffff04 	addi	sp,sp,-4
    5234:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5238:	20000e16 	blt	r4,zero,5274 <fstat+0x44>
    523c:	20c00324 	muli	r3,r4,12
    5240:	00800034 	movhi	r2,0
    5244:	109afb04 	addi	r2,r2,27628
    5248:	1889883a 	add	r4,r3,r2
  
  if (fd)
    524c:	20000926 	beq	r4,zero,5274 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5250:	20800017 	ldw	r2,0(r4)
    5254:	10800817 	ldw	r2,32(r2)
    5258:	10000226 	beq	r2,zero,5264 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    525c:	103ee83a 	callr	r2
    5260:	00001006 	br	52a4 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5264:	00880004 	movi	r2,8192
    5268:	28800115 	stw	r2,4(r5)
    526c:	0005883a 	mov	r2,zero
    5270:	00000c06 	br	52a4 <fstat+0x74>
    5274:	00800034 	movhi	r2,0
    5278:	109d6204 	addi	r2,r2,30088
    527c:	10800017 	ldw	r2,0(r2)
    5280:	1000031e 	bne	r2,zero,5290 <fstat+0x60>
    5284:	00c00074 	movhi	r3,1
    5288:	18e4be04 	addi	r3,r3,-27912
    528c:	00000206 	br	5298 <fstat+0x68>
    5290:	103ee83a 	callr	r2
    5294:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5298:	00801444 	movi	r2,81
    529c:	18800015 	stw	r2,0(r3)
    52a0:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    52a4:	dfc00017 	ldw	ra,0(sp)
    52a8:	dec00104 	addi	sp,sp,4
    52ac:	f800283a 	ret

000052b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    52b0:	defff004 	addi	sp,sp,-64
    52b4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    52b8:	20000f16 	blt	r4,zero,52f8 <isatty+0x48>
    52bc:	20c00324 	muli	r3,r4,12
    52c0:	00800034 	movhi	r2,0
    52c4:	109afb04 	addi	r2,r2,27628
    52c8:	1885883a 	add	r2,r3,r2
  
  if (fd)
    52cc:	10000a26 	beq	r2,zero,52f8 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    52d0:	10800017 	ldw	r2,0(r2)
    52d4:	10800817 	ldw	r2,32(r2)
    52d8:	1000021e 	bne	r2,zero,52e4 <isatty+0x34>
    52dc:	00800044 	movi	r2,1
    52e0:	00001106 	br	5328 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    52e4:	d80b883a 	mov	r5,sp
    52e8:	00052300 	call	5230 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    52ec:	d8800117 	ldw	r2,4(sp)
    52f0:	10880020 	cmpeqi	r2,r2,8192
    52f4:	00000c06 	br	5328 <isatty+0x78>
    52f8:	00800034 	movhi	r2,0
    52fc:	109d6204 	addi	r2,r2,30088
    5300:	10800017 	ldw	r2,0(r2)
    5304:	1000031e 	bne	r2,zero,5314 <isatty+0x64>
    5308:	00c00074 	movhi	r3,1
    530c:	18e4be04 	addi	r3,r3,-27912
    5310:	00000206 	br	531c <isatty+0x6c>
    5314:	103ee83a 	callr	r2
    5318:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    531c:	00801444 	movi	r2,81
    5320:	18800015 	stw	r2,0(r3)
    5324:	0005883a 	mov	r2,zero
    return 0;
  }
}
    5328:	dfc00f17 	ldw	ra,60(sp)
    532c:	dec01004 	addi	sp,sp,64
    5330:	f800283a 	ret

00005334 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5334:	defffe04 	addi	sp,sp,-8
    5338:	dfc00115 	stw	ra,4(sp)
    533c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5340:	2000020e 	bge	r4,zero,534c <lseek+0x18>
    5344:	043febc4 	movi	r16,-81
    5348:	00000d06 	br	5380 <lseek+0x4c>
    534c:	20c00324 	muli	r3,r4,12
    5350:	00800034 	movhi	r2,0
    5354:	109afb04 	addi	r2,r2,27628
    5358:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    535c:	20001526 	beq	r4,zero,53b4 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5360:	20800017 	ldw	r2,0(r4)
    5364:	10800717 	ldw	r2,28(r2)
    5368:	1000021e 	bne	r2,zero,5374 <lseek+0x40>
    536c:	043fde84 	movi	r16,-134
    5370:	00000306 	br	5380 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5374:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    5378:	1000100e 	bge	r2,zero,53bc <lseek+0x88>
    537c:	1021883a 	mov	r16,r2
    5380:	00800034 	movhi	r2,0
    5384:	109d6204 	addi	r2,r2,30088
    5388:	10800017 	ldw	r2,0(r2)
    538c:	1000031e 	bne	r2,zero,539c <lseek+0x68>
    5390:	00c00074 	movhi	r3,1
    5394:	18e4be04 	addi	r3,r3,-27912
    5398:	00000206 	br	53a4 <lseek+0x70>
    539c:	103ee83a 	callr	r2
    53a0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    53a4:	0405c83a 	sub	r2,zero,r16
    53a8:	18800015 	stw	r2,0(r3)
    53ac:	00bfffc4 	movi	r2,-1
    53b0:	00000206 	br	53bc <lseek+0x88>
    53b4:	043febc4 	movi	r16,-81
    53b8:	003ff106 	br	5380 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    53bc:	dfc00117 	ldw	ra,4(sp)
    53c0:	dc000017 	ldw	r16,0(sp)
    53c4:	dec00204 	addi	sp,sp,8
    53c8:	f800283a 	ret

000053cc <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    53cc:	f800283a 	ret

000053d0 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    53d0:	f800283a 	ret

000053d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    53d4:	defffe04 	addi	sp,sp,-8
    53d8:	dfc00115 	stw	ra,4(sp)
    53dc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    53e0:	20002916 	blt	r4,zero,5488 <read+0xb4>
    53e4:	20c00324 	muli	r3,r4,12
    53e8:	00800034 	movhi	r2,0
    53ec:	109afb04 	addi	r2,r2,27628
    53f0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    53f4:	20002426 	beq	r4,zero,5488 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    53f8:	20800217 	ldw	r2,8(r4)
    53fc:	108000cc 	andi	r2,r2,3
    5400:	00c00044 	movi	r3,1
    5404:	10c01326 	beq	r2,r3,5454 <read+0x80>
    5408:	20800017 	ldw	r2,0(r4)
    540c:	10800517 	ldw	r2,20(r2)
    5410:	10001026 	beq	r2,zero,5454 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5414:	103ee83a 	callr	r2
    5418:	1021883a 	mov	r16,r2
    541c:	1000260e 	bge	r2,zero,54b8 <read+0xe4>
    5420:	00800034 	movhi	r2,0
    5424:	109d6204 	addi	r2,r2,30088
    5428:	10800017 	ldw	r2,0(r2)
    542c:	1000031e 	bne	r2,zero,543c <read+0x68>
    5430:	00c00074 	movhi	r3,1
    5434:	18e4be04 	addi	r3,r3,-27912
    5438:	00000206 	br	5444 <read+0x70>
    543c:	103ee83a 	callr	r2
    5440:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    5444:	0405c83a 	sub	r2,zero,r16
    5448:	18800015 	stw	r2,0(r3)
    544c:	043fffc4 	movi	r16,-1
    5450:	00001906 	br	54b8 <read+0xe4>
    5454:	00800034 	movhi	r2,0
    5458:	109d6204 	addi	r2,r2,30088
    545c:	10800017 	ldw	r2,0(r2)
    5460:	1000031e 	bne	r2,zero,5470 <read+0x9c>
    5464:	00c00074 	movhi	r3,1
    5468:	18e4be04 	addi	r3,r3,-27912
    546c:	00000206 	br	5478 <read+0xa4>
    5470:	103ee83a 	callr	r2
    5474:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    5478:	00800344 	movi	r2,13
    547c:	18800015 	stw	r2,0(r3)
    5480:	043fffc4 	movi	r16,-1
    5484:	00000c06 	br	54b8 <read+0xe4>
    5488:	00800034 	movhi	r2,0
    548c:	109d6204 	addi	r2,r2,30088
    5490:	10800017 	ldw	r2,0(r2)
    5494:	1000031e 	bne	r2,zero,54a4 <read+0xd0>
    5498:	00c00074 	movhi	r3,1
    549c:	18e4be04 	addi	r3,r3,-27912
    54a0:	00000206 	br	54ac <read+0xd8>
    54a4:	103ee83a 	callr	r2
    54a8:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    54ac:	00801444 	movi	r2,81
    54b0:	18800015 	stw	r2,0(r3)
    54b4:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    54b8:	8005883a 	mov	r2,r16
    54bc:	dfc00117 	ldw	ra,4(sp)
    54c0:	dc000017 	ldw	r16,0(sp)
    54c4:	dec00204 	addi	sp,sp,8
    54c8:	f800283a 	ret

000054cc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54cc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54d0:	00bfff84 	movi	r2,-2
    54d4:	2884703a 	and	r2,r5,r2
    54d8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    54dc:	d0a00d17 	ldw	r2,-32716(gp)
    54e0:	108000c4 	addi	r2,r2,3
    54e4:	00ffff04 	movi	r3,-4
    54e8:	10c6703a 	and	r3,r2,r3
    54ec:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    54f0:	1909883a 	add	r4,r3,r4
    54f4:	00802034 	movhi	r2,128
    54f8:	10800004 	addi	r2,r2,0
    54fc:	1100032e 	bgeu	r2,r4,550c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5500:	2801703a 	wrctl	status,r5
    5504:	00ffffc4 	movi	r3,-1
    5508:	00000206 	br	5514 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    550c:	d1200d15 	stw	r4,-32716(gp)
    5510:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    5514:	1805883a 	mov	r2,r3
    5518:	f800283a 	ret

0000551c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    551c:	defffe04 	addi	sp,sp,-8
    5520:	dfc00115 	stw	ra,4(sp)
    5524:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5528:	20002816 	blt	r4,zero,55cc <write+0xb0>
    552c:	20c00324 	muli	r3,r4,12
    5530:	00800034 	movhi	r2,0
    5534:	109afb04 	addi	r2,r2,27628
    5538:	1889883a 	add	r4,r3,r2
  
  if (fd)
    553c:	20002326 	beq	r4,zero,55cc <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5540:	20800217 	ldw	r2,8(r4)
    5544:	108000cc 	andi	r2,r2,3
    5548:	10001326 	beq	r2,zero,5598 <write+0x7c>
    554c:	20800017 	ldw	r2,0(r4)
    5550:	10800617 	ldw	r2,24(r2)
    5554:	10001026 	beq	r2,zero,5598 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5558:	103ee83a 	callr	r2
    555c:	1021883a 	mov	r16,r2
    5560:	1000260e 	bge	r2,zero,55fc <write+0xe0>
    5564:	00800034 	movhi	r2,0
    5568:	109d6204 	addi	r2,r2,30088
    556c:	10800017 	ldw	r2,0(r2)
    5570:	1000031e 	bne	r2,zero,5580 <write+0x64>
    5574:	00c00074 	movhi	r3,1
    5578:	18e4be04 	addi	r3,r3,-27912
    557c:	00000206 	br	5588 <write+0x6c>
    5580:	103ee83a 	callr	r2
    5584:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5588:	0405c83a 	sub	r2,zero,r16
    558c:	18800015 	stw	r2,0(r3)
    5590:	043fffc4 	movi	r16,-1
    5594:	00001906 	br	55fc <write+0xe0>
    5598:	00800034 	movhi	r2,0
    559c:	109d6204 	addi	r2,r2,30088
    55a0:	10800017 	ldw	r2,0(r2)
    55a4:	1000031e 	bne	r2,zero,55b4 <write+0x98>
    55a8:	00c00074 	movhi	r3,1
    55ac:	18e4be04 	addi	r3,r3,-27912
    55b0:	00000206 	br	55bc <write+0xa0>
    55b4:	103ee83a 	callr	r2
    55b8:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    55bc:	00800344 	movi	r2,13
    55c0:	18800015 	stw	r2,0(r3)
    55c4:	043fffc4 	movi	r16,-1
    55c8:	00000c06 	br	55fc <write+0xe0>
    55cc:	00800034 	movhi	r2,0
    55d0:	109d6204 	addi	r2,r2,30088
    55d4:	10800017 	ldw	r2,0(r2)
    55d8:	1000031e 	bne	r2,zero,55e8 <write+0xcc>
    55dc:	00c00074 	movhi	r3,1
    55e0:	18e4be04 	addi	r3,r3,-27912
    55e4:	00000206 	br	55f0 <write+0xd4>
    55e8:	103ee83a 	callr	r2
    55ec:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    55f0:	00801444 	movi	r2,81
    55f4:	18800015 	stw	r2,0(r3)
    55f8:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    55fc:	8005883a 	mov	r2,r16
    5600:	dfc00117 	ldw	ra,4(sp)
    5604:	dc000017 	ldw	r16,0(sp)
    5608:	dec00204 	addi	sp,sp,8
    560c:	f800283a 	ret
    5610:	00003748 	cmpgei	zero,zero,221
